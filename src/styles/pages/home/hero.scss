@import "../../variables";

// --------------------------------------------------
// Homepage Hero
// --------------------------------------------------

// CSS rule order
// --------------------

// 1. Variables
// 2. Box model properties
// 3. Display and position
// 4. Background
// 5. Border
// 6. Box shadow
// 7. Text
// 8. Transforms
// 9. Other

.hero {
  margin-top: $spacing__s;
  margin-bottom: $spacing__l;
  justify-content: space-between;
  min-height: 250px; // TODO: this is to keep the two headers the same size. Find a better way to do this.

  // TODO This is a great opportunity to rewrite with container queries; let the buttons adjust to their container, not the width of the whole screen.
  .button--primary,
  .button--secondary {
    display: block;
    margin-bottom: $spacing__s;
    @include breakpoint("m") {
      display: inline-flex;
    }
  }
  @include breakpoint("s") {
    margin-bottom: 0;
  }
  @include breakpoint("m") {
    margin-top: $spacing__l;
  }
}

.hero__wardens .hero__left-side {
  @include breakpoint("l") {
    max-width: 30rem;
  }
}

.hero__right-side {
  margin-top: $spacing__m;

  display: grid;
  grid-template-columns: repeat(1, 1fr);
  grid-template-rows: repeat(4, 1fr);
  grid-gap: 2px; // Not basing this off of font size since this is the smallest and the largest it should ever get.
  align-items: center;
  justify-items: center;

  border-radius: $border-radius__l;
  overflow: hidden; // TODO This is for the border radius, but overflow:hidden is inaccessible. Find a better way to do this.
  @include accessible-animation {
    transition: $transition__base;
  }
  @include breakpoint("xs") {
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(2, 1fr);
  }

  @include breakpoint("s") {
    margin-top: $spacing__s;
    grid-template-columns: repeat(1, 1fr);
    grid-template-rows: repeat(4, 1fr);
  }

  @include breakpoint("m") {
    margin-top: $spacing__l;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(2, 1fr);
  }
}
.hero__project {
  .hero__right-side {
    &:hover {
      box-shadow: 0px 0px 2px rgba($color__project, 1);
      background: rgba($color__project, 0.1);
      .hero__statistic {
        background: rgba(#fff, 0.06);
      }
    }
  }
}
.hero__wardens {
  .hero__right-side {
    &:hover {
      box-shadow: 0px 0px 2px rgba($color__button-blurple, 1);
      background: rgba($color__button-blurple, 0.1);
      .hero__statistic {
        background: rgba(#fff, 0.06);
      }
    }
  }
}

.hero__statistic {
  padding: $spacing__l;
  margin: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

  // display: grid;
  // grid-template-rows: repeat(2, 1fr);
  // grid-auto-flow: column;
  // grid-template-columns: 1fr;
  // grid-column-gap: 0px;
  // grid-row-gap: 0px;

  background: $color__n-90;

  @include breakpoint("m") {
    padding: $spacing__xl;
  }
}

.hero__statistic-number {
  margin: 0 !important;
  margin-bottom: $spacing__s;
  text-align: center;
  line-height: 120%;
}
.hero__statistic-unit {
  margin-bottom: 0 !important;
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
  line-height: 120%;
  font-size: 1.1rem;

  &--short {
    font-size: 1.25rem;
    // margin-top: -#{$spacing__s}; // TODO: do this a better way
  }
}

.hero__project .button--primary {
  background-color: $color__project-color !important;
  border-color: $color__project-color !important;

  &:hover {
    background-color: $color__project-color--hover !important;
    border-color: $color__project-color--hover !important;
  }
}

.hero__project .button--secondary {
  border-color: $color__project-color !important;

  &:hover {
    background: $color__project-color !important;
    border-color: $color__project-color--hover !important;
  }
}
