{
  "circa": {
    "title": "Sublime contest",
    "sponsor": "Sublime",
    "slug": "2021-12-sublime",
    "date": "2022-02-14",
    "findings": "https://github.com/code-423n4/2021-12-sublime-findings/issues",
    "contest": 61
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Sublime contest smart contract system written in Solidity. The code contest took place between December 9—December 15 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>21 Wardens contributed reports to the Sublime contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/liam_eastwood13\">leastwood</a></li>\n<li>0x0x0x</li>\n<li>certora</li>\n<li>harleythedog</li>\n<li><a href=\"https://twitter.com/k3mmio\">kemmio</a></li>\n<li>hyh</li>\n<li>0x1f8b</li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://twitter.com/ngndev\">0xngndev</a></li>\n<li><a href=\"https://github.com/TomAFrench\">TomFrenchBlockchain</a></li>\n<li><a href=\"https://twitter.com/SirH4shalot\">sirhashalot</a></li>\n<li>Jujic</li>\n<li><a href=\"https://twitter.com/0xbroccolirob\">broccolirob</a></li>\n<li>pedroais</li>\n<li>robee</li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li>p4st13r4 (0xb4bb4, <a href=\"https://github.com/0x69e8\">0x69e8</a>)</li>\n</ol>\n<p>This contest was judged by <a href=\"https://github.com/0xean\">Oxean</a>.</p>\n<p>Final report assembled by <a href=\"https://github.com/tealtigrrr\">tealtiger</a>, <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>, and <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 43 unique vulnerabilities and 93 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 11 received a risk rating in the category of HIGH severity, 8 received a risk rating in the category of MEDIUM severity, and 24 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 18 non-critical recommendations and 32 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-12-sublime\">C4 Sublime contest repository</a>, and is composed of 16 smart contracts written in the Solidity programming language and includes 1,689 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-11\" style=\"position:relative;\"><a href=\"#high-risk-findings-11\" aria-label=\"high risk findings 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (11)</h1>\n<h2 id=\"h-01-in-creditline_borrowtokenstoliquidate-oracle-is-used-wrong-way\" style=\"position:relative;\"><a href=\"#h-01-in-creditline_borrowtokenstoliquidate-oracle-is-used-wrong-way\" aria-label=\"h 01 in creditline_borrowtokenstoliquidate oracle is used wrong way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/155\">[H-01] In <code>CreditLine#_borrowTokensToLiquidate</code>, oracle is used wrong way</a></h2>\n<p><em>Submitted by 0x0x0x</em></p>\n<p>Current implementation to get the price is as follows:</p>\n<p><code>(uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(_borrowAsset, _collateralAsset);</code></p>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L1050\">https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L1050</a></p>\n<p>But it should not consult <code>borrowToken / collateralToken</code>, rather it should consult the inverse of this result. As a consequence, in <code>liquidate</code> the liquidator/lender can lose/gain funds as a result of this miscalculation.</p>\n<h4 id=\"mitigation-step\" style=\"position:relative;\"><a href=\"#mitigation-step\" aria-label=\"mitigation step permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mitigation step</h4>\n<p>Replace it with</p>\n<p><code>(uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(_collateralAsset, _borrowAsset);</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/155\">ritik99 (Sublime) confirmed</a></strong></p>\n<h2 id=\"h-02-wrong-returns-of-savingsaccountutildepositfromsavingsaccount-can-cause-fund-loss\" style=\"position:relative;\"><a href=\"#h-02-wrong-returns-of-savingsaccountutildepositfromsavingsaccount-can-cause-fund-loss\" aria-label=\"h 02 wrong returns of savingsaccountutildepositfromsavingsaccount can cause fund loss permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/132\">[H-02] Wrong returns of <code>SavingsAccountUtil.depositFromSavingsAccount()</code> can cause fund loss</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>The function <code>SavingsAccountUtil.depositFromSavingsAccount()</code> is expected to return the number of equivalent shares for given <code>_asset</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/Pool/Pool.sol#L225-L267\">https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/Pool/Pool.sol#L225-L267</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> internal function used to get amount of collateral deposited to the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">_fromSavingsAccount</span><span class=\"mtk3\"> if true, collateral is transferred from _sender&#39;s savings account, if false, it is transferred from _sender&#39;s wallet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">_toSavingsAccount</span><span class=\"mtk3\"> if true, collateral is transferred to pool&#39;s savings account, if false, it is withdrawn from _sender&#39;s savings account</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">_asset</span><span class=\"mtk3\"> address of the asset to be deposited</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk3\"> amount of tokens to be deposited in the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">_poolSavingsStrategy</span><span class=\"mtk3\"> address of the saving strategy used for collateral deposit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">_depositFrom</span><span class=\"mtk3\"> address which makes the deposit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">_depositTo</span><span class=\"mtk3\"> address to which the tokens are deposited</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> _sharesReceived number of equivalent shares for given _asset</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_deposit</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_fromSavingsAccount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_toSavingsAccount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_poolSavingsStrategy</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_depositFrom</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_depositTo</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_fromSavingsAccount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">SavingsAccountUtil</span><span class=\"mtk1\">.</span><span class=\"mtk11\">depositFromSavingsAccount</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">ISavingsAccount</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IPoolFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">poolFactory</span><span class=\"mtk1\">).</span><span class=\"mtk11\">savingsAccount</span><span class=\"mtk1\">()),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_depositFrom</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_depositTo</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_poolSavingsStrategy</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">true</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_toSavingsAccount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">SavingsAccountUtil</span><span class=\"mtk1\">.</span><span class=\"mtk11\">directDeposit</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">ISavingsAccount</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IPoolFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">poolFactory</span><span class=\"mtk1\">).</span><span class=\"mtk11\">savingsAccount</span><span class=\"mtk1\">()),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_depositFrom</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_depositTo</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_toSavingsAccount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_poolSavingsStrategy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>However, since <code>savingsAccountTransfer()</code> does not return the result of <code>_savingsAccount.transfer()</code>, but returned <code>_amount</code> instead, which means that <code>SavingsAccountUtil.depositFromSavingsAccount()</code> may not return the actual shares (when pps is not 1).</p>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/SavingsAccount/SavingsAccountUtil.sol#L11-L26\">https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/SavingsAccount/SavingsAccountUtil.sol#L11-L26</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">depositFromSavingsAccount</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ISavingsAccount</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_savingsAccount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_from</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_withdrawShares</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_toSavingsAccount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_toSavingsAccount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">savingsAccountTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_savingsAccount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawFromSavingsAccount</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_savingsAccount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_withdrawShares</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/SavingsAccount/SavingsAccountUtil.sol#L66-L80\">https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/SavingsAccount/SavingsAccountUtil.sol#L66-L80</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">savingsAccountTransfer</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ISavingsAccount</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_savingsAccount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_from</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_strategy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_from</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_savingsAccount</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_savingsAccount</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>As a result, the recorded <code>_sharesReceived</code> can be wrong.</p>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/Pool/Pool.sol#L207-L223\">https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/Pool/Pool.sol#L207-L223</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_depositCollateral</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_depositor</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_transferFromSavingsAccount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_deposit</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_transferFromSavingsAccount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">true</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">poolConstants</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collateralAsset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">poolConstants</span><span class=\"mtk1\">.</span><span class=\"mtk12\">poolSavingsStrategy</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_depositor</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">poolVariables</span><span class=\"mtk1\">.</span><span class=\"mtk12\">baseLiquidityShares</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">poolVariables</span><span class=\"mtk1\">.</span><span class=\"mtk12\">baseLiquidityShares</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CollateralAdded</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_depositor</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h5 id=\"poc\" style=\"position:relative;\"><a href=\"#poc\" aria-label=\"poc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PoC</h5>\n<p>Given:</p>\n<ul>\n<li>the price per share of yearn USDC vault is <code>1.2</code></li>\n<li>Alice deposited <code>12,000 USDC</code> to <code>yearn</code> strategy, received <code>10,000</code> share tokens;</li>\n<li>Alice created a pool, and added all the <code>12,000 USDC</code> from the saving account as collateral; The recorded <code>CollateralAdded</code> got the wrong number: <code>12000</code> which should be <code>10000</code>;</li>\n<li>Alice failed to borrow money with the pool and tries to <code>cancelPool()</code>, it fails as the recorded collateral <code>shares</code> are more than the actual collateral.</li>\n</ul>\n<p>As a result, Alice has lost all the <code>12,000 USDC</code>.</p>\n<p>If Alice managed to borrow with the pool, when the loan defaults, the liquidation will also fail, and cause fund loss to the lenders.</p>\n<h5 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h5>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">savingsAccountTransfer</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ISavingsAccount</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_savingsAccount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_from</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_strategy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_from</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_savingsAccount</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_savingsAccount</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/132\">ritik99 (Sublime) confirmed</a></strong></p>\n<h2 id=\"h-03-denial-of-service\" style=\"position:relative;\"><a href=\"#h-03-denial-of-service\" aria-label=\"h 03 denial of service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/154\">[H-03] denial of service</a></h2>\n<p><em>Submitted by certora</em></p>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/Pool/Pool.sol#L645\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/Pool/Pool.sol#L645</a>\nif the borrow token is address(0) (ether), and someone calls withdrawLiquidity, it calls SavingsAccountUtil.transferTokens which will transfer to msg.sender, msg.value (of withdrawLiquidity, because it’s an internal function). In other words, the liquidity provided will pay to themselves and their liquidity tokens will still be burned. therefore they will never be able to get their funds back.</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>the bug is in\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccountUtil.sol\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccountUtil.sol</a>\nIt is wrong to use msg.value in transferTokens because it’ll be the msg.value of the calling function.\ntherefore every transfer of ether using this function is wrong and dangerous, the solution is to remove all msg.value from this function and just transfer _amount regularly.</p>\n<p>**<a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/154\">ritik99 (Sublime) confirmed</a> **</p>\n<h2 id=\"h-04-yearn-token--shares-conversion-decimal-issue\" style=\"position:relative;\"><a href=\"#h-04-yearn-token--shares-conversion-decimal-issue\" aria-label=\"h 04 yearn token  shares conversion decimal issue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/134\">[H-04] Yearn token &#x3C;> shares conversion decimal issue</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The yearn strategy <code>YearnYield</code> converts shares to tokens by doing <code>pricePerFullShare * shares / 1e18</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (shares == 0) return 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // @audit should divided by vaultDecimals </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    amount = IyVault(liquidityToken[asset]).getPricePerFullShare().mul(shares).div(1e18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>But Yearn’s <code>getPricePerFullShare</code> seems to be <a href=\"https://github.com/yearn/yearn-vaults/blob/03b42dacacec2c5e93af9bf3151da364d333c222/contracts/Vault.vy#L1147\">in <code>vault.decimals()</code> precision</a>, i.e., it should convert it as <code>pricePerFullShare * shares / (10 ** vault.decimals())</code>.\nThe vault decimals are the same <a href=\"https://github.com/yearn/yearn-vaults/blob/03b42dacacec2c5e93af9bf3151da364d333c222/contracts/Vault.vy#L295-L296\">as the underlying token decimals</a></p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The token and shares conversions do not work correctly for underlying tokens that do not have 18 decimals.\nToo much or too little might be paid out leading to a loss for either the protocol or user.</p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Divide by <code>10**vault.decimals()</code> instead of <code>1e18</code> in <code>getTokensForShares</code>.\nApply a similar fix in <code>getSharesForTokens</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/134\">ritik99 (Sublime) confirmed</a></strong> </p>\n<h2 id=\"h-05-aaves-share-tokens-are-rebasing-breaking-current-strategy-code\" style=\"position:relative;\"><a href=\"#h-05-aaves-share-tokens-are-rebasing-breaking-current-strategy-code\" aria-label=\"h 05 aaves share tokens are rebasing breaking current strategy code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/137\">[H-05] Aave’s share tokens are rebasing breaking current strategy code</a></h2>\n<p><em>Submitted by cmichel, also found by WatchPug and leastwood</em></p>\n<p>When depositing into Aave through the <code>AaveYield.lockTokens</code> contract strategy, one receives the <code>sharesReceived</code> amount corresponding to the diff of <code>aToken</code> balance, which is just always the deposited amount as aave is a rebasing token and <code>1.0 aToken = 1.0 underlying</code> at each deposit / withdrawal.</p>\n<p>Note that this <code>sharesReceived</code> (the underlying deposit amount) is cached in a <code>balanceInShares</code> map in <code>SavingsAccount.deposit</code> which makes this share <em>static</em> and not dynamically rebasing anymore:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deposit</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_to</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;SavingsAccount::deposit receiver address should not be zero address&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_deposit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">balanceInShares</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">balanceInShares</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">].</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Deposited</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_strategy</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getTokensForShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">shares</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">asset</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">shares</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">aToken</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">liquidityToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (, , , , , , , </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">liquidityIndex</span><span class=\"mtk1\">, , ) = </span><span class=\"mtk11\">IProtocolDataProvider</span><span class=\"mtk1\">(</span><span class=\"mtk12\">protocolDataProvider</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getReserveData</span><span class=\"mtk1\">(</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// @audit-info tries to do (user shares / total shares) * underlying amount where underlying amount = scaledBalance * liquidityIndex</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IScaledBalanceToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">aToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">scaledBalanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">liquidityIndex</span><span class=\"mtk1\">).</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">shares</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">aToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>However, the <code>getTokensForShares</code> function uses a rebasing total share supply of <code>IERC20(aToken).balanceOf(this)</code>.</p>\n<h6 id=\"poc-1\" style=\"position:relative;\"><a href=\"#poc-1\" aria-label=\"poc 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POC</h6>\n<ul>\n<li>SavingsAccount deposits 1000 DAI for user and user receives 1000 aDAI as shares. These shares are cached in <code>balanceInShares[user][dai][aave]</code>.</li>\n<li>Time passes, Aave accrues interest for lenders, and the initial 1000 aTokens balance has rebased to 1200 aTokens</li>\n<li>SavingsAccount <code>withdraw</code>s 1000 aDAI shares for user which calls <code>AaveYield.unlockTokens</code>. The user receives only 1000 DAI. The interest owed to the user is not paid out.</li>\n<li>Note that <code>getTokensForShares</code> also returns the wrong amount as <code>1200 * 1000 / 1200 = 1000</code></li>\n</ul>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Interest is not paid out to users.\nPool collateral is measured without the interest accrued as it uses <code>getTokensForShares</code> which will lead to early liquidations and further loss.</p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>If the user shares are not rebasing, you cannot have the “total shares supply” (the shares in the contract) be rebasing as in <code>getTokensForShares</code>. Also withdrawing the share amount directly from Aave as in <code>_withdrawERC</code> does not withdraw the yield.\nA fix could be to create a <em>non-rebasing</em> wrapper LP token that is paid out to the user proportional to the current strategy TVL at time of user deposit.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/137#issuecomment-1001476854\">ritik99 (Sublime) acknowledged</a>:</strong></p>\n<blockquote>\n<p>We’ve been aware of this issue for some time.. ended up including the AaveYield file in the scope by mistake! We do not plan to include the Aave strategy in our launch (we maintain a strategy registry that allows us to add/drop yield strategies), and as noted in #128, we will be utilizing <a href=\"https://github.com/aave/protocol-v2/blob/feat-atoken-wrapper-liquidity-mining/contracts/protocol/tokenization/StaticATokenLM.sol\">wrapper contracts</a> that mimics behaviour of non-rebasing LP tokens</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/137#issuecomment-1018051683\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>going to side with the warden since they believed the contract to be in scope and it’s a valid concern.</p>\n</blockquote>\n<h2 id=\"h-06-anyone-can-liquidate-credit-line-when-autoliquidation-is-false-without-supplying-borrow-tokens\" style=\"position:relative;\"><a href=\"#h-06-anyone-can-liquidate-credit-line-when-autoliquidation-is-false-without-supplying-borrow-tokens\" aria-label=\"h 06 anyone can liquidate credit line when autoliquidation is false without supplying borrow tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/96\">[H-06] Anyone can liquidate credit line when autoLiquidation is false without supplying borrow tokens</a></h2>\n<p><em>Submitted by harleythedog</em></p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>It is intended that if a credit line has autoLiquidation as false, then only the lender can be the liquidator (see docs here: <a href=\"https://docs.sublime.finance/sublime-docs/smart-contracts/creditlines\">https://docs.sublime.finance/sublime-docs/smart-contracts/creditlines</a>). However, this is not correctly implemented, and anyone can liquidate a position that has autoLiquidation set to false.</p>\n<p>Even worse, when autoLiquidation is set to false, the liquidator does not have to supply the initial amount of borrow tokens (determined by <code>_borrowTokensToLiquidate</code>) that normally have to be transferred when autoLiquidation is true. This means that the liquidator will be sent all of the collateral that is supposed to be sent to the lender, so this represents a huge loss to the lender. Since the lender will lose all of the collateral that they are owed, this is a high severity issue.</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The current implementation of liquidate is here: <a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L996\">https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L996</a>.</p>\n<p>Notice that the autoLiquidation value is only used in one place within this function, which is in this segment of the code:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">creditLineConstants</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_id</span><span class=\"mtk1\">].</span><span class=\"mtk12\">autoLiquidation</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">_lender</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_borrowTokens</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_borrowTokensToLiquidate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_borrowAsset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_collateralAsset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_totalCollateralTokens</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_borrowAsset</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_returnETH</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_borrowTokens</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;Insufficient ETH to liquidate&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_returnETH</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">_returnETH</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&#39;&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;Transfer fail&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_borrowAsset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_lender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_borrowTokens</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_transferCollateral</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_collateralAsset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_totalCollateralTokens</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_toSavingsAccount</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\">  </span><span class=\"mtk11\">CreditLineLiquidated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>So, if <code>autoLiquidation</code> is false, the code inside of the if statement will simply not be executed, and there are no further checks that the sender HAS to be the lender if <code>autoLiquidation</code> is false. This means that anyone can liquidate a non-autoLiquidation credit line, and receive all of the collateral without first transferring the necessary borrow tokens.</p>\n<p>For a further proof of concept, consider the test file here: <a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/test/CreditLines/2.spec.ts\">https://github.com/code-423n4/2021-12-sublime/blob/main/test/CreditLines/2.spec.ts</a>. If the code on line 238 is changed from <code>let _autoLiquidation: boolean = true;</code> to <code>let _autoLiquidation: boolean = false;</code>, all the test cases will still pass. This confirms the issue, as the final test case “Liquidate credit line” has the <code>admin</code> as the liquidator, which should not work in non-autoLiquidations since they are not the lender.</p>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Inspection and confirmed with Hardhat.</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add the following require statement somewhere in the <code>liquidate</code> function:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">creditLineConstants</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_id</span><span class=\"mtk1\">].</span><span class=\"mtk12\">autoLiquidation</span><span class=\"mtk1\"> || </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">creditLineConstants</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_id</span><span class=\"mtk1\">].</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;not autoLiquidation and not lender&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h4 id=\"ritik99-sublime-labeled-sponsor-confirmed\" style=\"position:relative;\"><a href=\"#ritik99-sublime-labeled-sponsor-confirmed\" aria-label=\"ritik99 sublime labeled sponsor confirmed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/96\">ritik99 (Sublime) labeled</a> sponsor confirmed</h4>\n<h2 id=\"h-07-savingsaccount-withdrawall-and-switchstrategy-can-freeze-user-funds-by-ignoring-possible-strategy-liquidity-issues\" style=\"position:relative;\"><a href=\"#h-07-savingsaccount-withdrawall-and-switchstrategy-can-freeze-user-funds-by-ignoring-possible-strategy-liquidity-issues\" aria-label=\"h 07 savingsaccount withdrawall and switchstrategy can freeze user funds by ignoring possible strategy liquidity issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/80\">[H-07] SavingsAccount withdrawAll and switchStrategy can freeze user funds by ignoring possible strategy liquidity issues</a></h2>\n<p><em>Submitted by hyh, also found by cmichel</em></p>\n<h3 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Full withdrawal and moving funds between strategies can lead to wrong accounting if the corresponding market has tight liquidity, which can be the case at least for <code>AaveYield</code>. That is, as the whole amount is required to be moved at once from Aave, both <code>withdrawAll</code> and <code>switchStrategy</code> will incorrectly account for partial withdrawal as if it was full whenever the corresponding underlying yield pool had liquidity issues.</p>\n<p><code>withdrawAll</code> will delete user entry, locking the user funds in the strategy: user will get partial withdrawal and have the corresponding accounting entry removed, while the remaining actual funds will be frozen within the system.</p>\n<p><code>switchStrategy</code> will subtract full number of shares for the <code>_amount</code> requested from the old strategy, while adding lesser partial number of shares for <code>_tokensReceived</code> to the new one with the same effect of freezing user’s funds within the system.</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>SavingsAccount.withdrawAll\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L286\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L286</a></p>\n<p>SavingsAccount.switchStrategy:\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L152\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L152</a></p>\n<p>When full withdrawal or strategy switch is performed it is one withdraw via <code>unlockTokens</code> without checking the amount received.</p>\n<p>In the same time the withdraw can fail for example for the strategy switch if old strategy is having liquidity issues at the moment, i.e. Aave market is currently have utilization rate too high to withdraw the amount requested given current size of the lending pool.</p>\n<p>Aave <code>unlockTokens</code> return is correctly not matched with amount requested:\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/yield/AaveYield.sol#L217\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/yield/AaveYield.sol#L217</a></p>\n<p>But, for example, <code>withdrawAll</code> ignores the fact that some funds can remain in the strategy and deletes the use entry after one withdraw attempt:\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L294\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L294</a>\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L312\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L312</a></p>\n<p><code>switchStrategy</code> removes the old entry completely:\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L181\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L181</a></p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>For both <code>withdrawAll</code> and <code>switchStrategy</code> the immediate fix is to account for tokens received in both cases, which are <code>_amount</code> after <code>unlockTokens</code> for <code>withdrawAll</code> and <code>_tokensReceived</code> for <code>switchStrategy</code>.</p>\n<p>More general handling of the liquidity issues ideally to be addressed architecturally, given the potential issues with liquidity availability any strategy withdrawals can be done as follows:</p>\n<ol>\n<li>Withdraw what is possible on demand, leave the amount due as is, i.e. do not commit to completing the action in one go and notify the user the action was partial (return actual amount)</li>\n<li>Save to query and repeat for the remainder funds on the next similar action (this can be separate flag triggered mode)</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/80#issuecomment-1000184590\">ritik99 (Sublime) disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>The above issue requires making a few assumptions - (i) the underlying yield protocol does not have sufficient reserves to facilitate the withdrawal of a single user, (ii) the user attempts to withdraw all their assets during such times of insufficient reserves.</p>\n<p>We agree that the above could be a possibility, but would be unlikely. The underlying yield protocols undergo an interest rate spike during high utilization ratios to bring reserves back to normal levels, and some revert if they cannot withdraw the necessary amount (for eg, <a href=\"https://github.com/compound-finance/compound-protocol/blob/4a8648ec0364d24c4ecfc7d6cae254f55030d65f/contracts/CToken.sol#L679\">Compound</a>). During live deployment, only those strategies that work expectedly would be onboarded, while others wouldn’t (for eg, Aave as a strategy wouldn’t be integrated until their <a href=\"https://github.com/aave/protocol-v2/blob/feat-atoken-wrapper-liquidity-mining/contracts/protocol/tokenization/StaticATokenLM.sol\">wrappers for aTokens</a> are ready for use). Hence we suggest reducing severity to (2) medium-risk</p>\n<p>also similar to #144 </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/80#issuecomment-1018054859\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>While I understand the argument regarding this being an unlikely scenario, I don’t believe that is a sufficient reason to downgrade the issue give the impact to a user and the lost funds.  </p>\n<p><code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n<p>In this scenario - Assets are at a direct risk. </p>\n</blockquote>\n<h2 id=\"h-08-possibility-to-drain-savingsaccount-contract-assets\" style=\"position:relative;\"><a href=\"#h-08-possibility-to-drain-savingsaccount-contract-assets\" aria-label=\"h 08 possibility to drain savingsaccount contract assets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/41\">[H-08] Possibility to drain SavingsAccount contract assets</a></h2>\n<p><em>Submitted by kemmio</em></p>\n<h4 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>A malicious actor can manipulate switchStrategy() function in a way to withdraw tokens that are locked in SavingsAccount contract\n(the risk severity should be reviewed)</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Firstly an attacker need to deploy a rogue strategy contract implementing IYield.getSharesForTokens() and IYield.unlockTokens() functions\nand calling switchStrategy() with _currentStrategy = ROGUE<em>CONTRACT</em>ADDRESS (_newStrategy can be any valid strategy e.g. NoYield)</p>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L160\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L160</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;SavingsAccount::switchStrategy Amount must be greater than zero&#39;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Bypass this check by setting _amount > 0, since it will be overwritten in line\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L162\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L162</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IYield</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_currentStrategy</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getSharesForTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>getSharesForTokens() should be implemented to always return 0, hence to bypass the overflow in lines\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L164-L167\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L164-L167</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">balanceInShares</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_currentStrategy</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">balanceInShares</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_currentStrategy</span><span class=\"mtk1\">].</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">&#39;SavingsAccount::switchStrategy Insufficient balance&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>since balanceInShares[msg.sender][_token][_currentStrategy] == 0 and 0-0 will not overflow</p>\n<p>The actual amount to be locked is saved in line\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L169\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L169</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokensReceived</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IYield</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_currentStrategy</span><span class=\"mtk1\">).</span><span class=\"mtk11\">unlockTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>the rouge unlockTokens() can check asset balance of the contract and return the full amount</p>\n<p>After that some adjustment are made to set approval for the token or to handle native assets case\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L171-L177\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L171-L177</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_ethValue</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_token</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeApprove</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_newStrategy</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_tokensReceived</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_ethValue</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_tokensReceived</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_tokensReceived</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>Finally the assets are locked in the locked strategy and shares are allocated on attackers acount\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L179-L181\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L179-L181</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IYield</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_newStrategy</span><span class=\"mtk1\">).</span><span class=\"mtk12\">lockTokens</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">_ethValue</span><span class=\"mtk1\">}(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_tokensReceived</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">balanceInShares</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_newStrategy</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">balanceInShares</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_newStrategy</span><span class=\"mtk1\">].</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_sharesReceived</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Proof of Concept</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Attacker</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getSharesForTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">  </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">unlockTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bal</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">bal</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">bal</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bal</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a check for _currentStrategy to be from strategy list like the one in line\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L159\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L159</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">require(IStrategyRegistry(strategyRegistry).registry(_newStrategy), &#39;SavingsAccount::_newStrategy do not exist&#39;);</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/41#issuecomment-1001380202\">ritik99 (Sublime) disputed</a>:</strong></p>\n<blockquote>\n<p>The savings account contract doesn’t hold any tokens, so it is not possible to lock tokens in a new strategy, hence this attack will not work. Nevertheless it is something we will explore further to limit unexpected state changes</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/41#issuecomment-1018063038\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Based on the review of the warden I believe this is a valid attack path.  This line would need to change to the amount of tokens that are to be “stolen” but otherwise this does seem accurate. </p>\n</blockquote>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">bal</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"h-09-priceoracle-does-not-filter-price-feed-outliers\" style=\"position:relative;\"><a href=\"#h-09-priceoracle-does-not-filter-price-feed-outliers\" aria-label=\"h 09 priceoracle does not filter price feed outliers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/51\">[H-09] <code>PriceOracle</code> Does Not Filter Price Feed Outliers</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<h4 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>If for whatever reason the Chainlink oracle returns a malformed price due to oracle manipulation or a malfunctioned price, the result will be passed onto users, causing unintended consequences as a result.</p>\n<p>In the same time it’s possible to construct mitigation mechanics for such cases, so user economics be affected by sustainable price movements only. As price outrages provide a substantial attack surface for the project it’s worth adding some complexity to the implementation.</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/PriceOracle.sol#L149-L161\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/PriceOracle.sol#L149-L161</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getLatestPrice</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">num</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">den</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_price</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_decimals</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">_price</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_decimals</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">getChainlinkLatestPrice</span><span class=\"mtk1\">(</span><span class=\"mtk12\">num</span><span class=\"mtk1\">, </span><span class=\"mtk12\">den</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_decimals</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_price</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_decimals</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">_price</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_decimals</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">getUniswapLatestPrice</span><span class=\"mtk1\">(</span><span class=\"mtk12\">num</span><span class=\"mtk1\">, </span><span class=\"mtk12\">den</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_decimals</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_price</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_decimals</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">revert</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;PriceOracle::getLatestPrice - Price Feed doesn&#39;t exist&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The above code outlines how prices are utilised regardless of their actual value (assuming it is always a non-zero value).</p>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider querying both the Chainlink oracle and Uniswap pool for latest prices, ensuring that these two values are within some upper/lower bounds of each other. It may also be useful to track historic values and ensure that there are no sharp changes in price. However, the first option provides a level of simplicity as UniswapV3’s TWAP implementation is incredibly resistant to flash loan attacks. Hence, the main issue to address is a malfunctioning Chainlink oracle.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/51#issuecomment-1007996594\">ritik99 (Sublime) disputed</a>:</strong></p>\n<blockquote>\n<p>The described suggestion is fairly complex - besides the increase in code complexity, we’d also have to decide the bounds within which the Uniswap and Chainlink oracles should report prices that won’t be trivial. We’ve also noted in the <a href=\"https://github.com/code-423n4/2021-12-sublime#assumptions--design-choices\">assumptions</a> section of our contest repo that oracles are assumed to be accurate</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/51#issuecomment-1018064762\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>” We expect these feeds to be fairly reliable.” - Based on this quote, I am going to leave this open at the current risk level.  These are valid changes that could significantly reduce the risk of the implementation and unintended liquidations. </p>\n<p>Fairly reliable != 100% reliable</p>\n</blockquote>\n<h2 id=\"h-10-wrong-implementation-of-noyieldsolemergencywithdraw\" style=\"position:relative;\"><a href=\"#h-10-wrong-implementation-of-noyieldsolemergencywithdraw\" aria-label=\"h 10 wrong implementation of noyieldsolemergencywithdraw permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/115\">[H-10] Wrong implementation of <code>NoYield.sol#emergencyWithdraw()</code></a></h2>\n<p><em>Submitted by WatchPug, also found by 0x1f8b</em></p>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L78-L83\">https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L78-L83</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">emergencyWithdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_wallet</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">received</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wallet</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;cant burn&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">received</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">received</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><code>received</code> is not being assigned prior to L81, therefore, at L81, <code>received</code> is <code>0</code>.</p>\n<p>As a result, the <code>emergencyWithdraw()</code> does not work, in essence.</p>\n<h5 id=\"recommendation-1\" style=\"position:relative;\"><a href=\"#recommendation-1\" aria-label=\"recommendation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h5>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">emergencyWithdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_wallet</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">received</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wallet</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;cant burn&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">received</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">received</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/115\">ritik99 (Sublime) confirmed</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/115#issuecomment-1018669684\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>upgrading to High  sev based on assets being “lost” directly.  IE the emergency function will not work.</p>\n<p><code>3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).</code></p>\n</blockquote>\n<h2 id=\"h-11-unable-to-call-emergencywithdraw-eth-in-noyield-contract\" style=\"position:relative;\"><a href=\"#h-11-unable-to-call-emergencywithdraw-eth-in-noyield-contract\" aria-label=\"h 11 unable to call emergencywithdraw eth in noyield contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/52\">[H-11] Unable To Call <code>emergencyWithdraw</code> ETH in <code>NoYield</code> Contract</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<h4 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>emergencyWithdraw</code> function is implemented in all yield sources to allow the <code>onlyOwner</code> role to drain the contract’s balance in case of emergency. The contract considers ETH as a zero address asset. However, there is a call made on <code>_asset</code> which will revert if it is the zero address. As a result, ETH tokens can never be withdrawn from the <code>NoYield</code> contract in the event of an emergency.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Consider the case where <code>_asset == address(0)</code>. An external call is made to check the contract’s token balance for the target <code>_asset</code>. However, this call will revert as <code>_asset</code> is the zero address. As a result, the <code>onlyOwner</code> role will never be able to withdraw ETH tokens during an emergency.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">emergencyWithdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_wallet</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">received</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wallet</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;cant burn&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">received</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">received</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Affected function as per below:\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/yield/NoYield.sol#L78-L83\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/yield/NoYield.sol#L78-L83</a></p>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider handling the case where <code>_asset</code> is the zero address, i.e. the asset to be withdrawn under emergency is the ETH token.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/52\">ritik99 (Sublime) confirmed</a></strong>\n<strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/52#issuecomment-1018680972\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Upgrading to Sev 3 in line with #4  / #115 as this results in funds being stuck in the contract. </p>\n</blockquote>\n<h1 id=\"medium-risk-findings-8\" style=\"position:relative;\"><a href=\"#medium-risk-findings-8\" aria-label=\"medium risk findings 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (8)</h1>\n<h2 id=\"m-01-ether-can-be-locked-in-the-poolfactory-contract-without-a-way-to-retrieve-it\" style=\"position:relative;\"><a href=\"#m-01-ether-can-be-locked-in-the-poolfactory-contract-without-a-way-to-retrieve-it\" aria-label=\"m 01 ether can be locked in the poolfactory contract without a way to retrieve it permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/168\">[M-01] Ether can be locked in the <code>PoolFactory</code> contract without a way to retrieve it</a></h2>\n<p><em>Submitted by broccolirob</em></p>\n<p>If a borrower calls the <code>createPool</code> function with a non-zero value, but also includes an ERC20 token address for <code>_collateralToken</code>, then the Ether value sent will be locked in the <code>PoolFactory</code> contract forever.</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/Pool/PoolFactory.sol#L260-L317\">createPool L260-317</a></li>\n</ul>\n<p>In the <code>_createPool</code> function, a <code>_collateralToken</code> address other than the zero address will set the <code>amount</code> variable to zero. That <code>amount</code> variable will be passed to <code>create2</code> which will send 0 wei to the newly created <code>Pool</code> contract.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"349\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"350\"></span><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_collateralToken</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) ? </span><span class=\"mtk12\">_collateralAmount</span><span class=\"mtk1\"> : </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h4 id=\"impact-7\" style=\"position:relative;\"><a href=\"#impact-7\" aria-label=\"impact 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>A borrower can accidentally lock Ether in the <code>PoolFactory</code> without the ability to retrieve it.</p>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>A borrower reuses a script they made to create a pool and deposit collateral. They intend to deposit Ether as collateral so they send value with the transaction, but forget to change the <code>_collateralToken</code> address to address(0). The <code>Pool</code> contract will be deployed using the <code>_collateralToken</code>, and will lock the Ether sent in the <code>PoolFactory</code></p>\n<h4 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual analysis and Hardhat.</p>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>If msg.value is greater than 0, make sure the <code>_collateralToken</code> address is set to address(0).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/168#issuecomment-1001018859\">ritik99 (Sublime) disputed and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>We will add this check but the scenario laid out is more about sanity checks on the side of the end-user. Assets are not stolen or compromised directly but because of user error. Such cases are better handled via UI/UX. We would suggest a (1) Low rating given the likelihood</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/168#issuecomment-1018049928\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Marking down to medium risk based on the c4 documentation and some external requirements on how this would have to occur. </p>\n<p><code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<h2 id=\"m-02-creditlineliquidate-doesnt-transfer-borrowed-eth-to-a-lender\" style=\"position:relative;\"><a href=\"#m-02-creditlineliquidate-doesnt-transfer-borrowed-eth-to-a-lender\" aria-label=\"m 02 creditlineliquidate doesnt transfer borrowed eth to a lender permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/90\">[M-02] CreditLine.liquidate doesn’t transfer borrowed ETH to a lender</a></h2>\n<p><em>Submitted by hyh, also found by 0x0x0x</em></p>\n<h4 id=\"impact-8\" style=\"position:relative;\"><a href=\"#impact-8\" aria-label=\"impact 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Funds that are acquired from a liquidator and should be sent to a lender are left with the contract instead. The funds aren’t lost, but after the fact mitigation will require manual accounting and fund transfer for each CreditLine.liquidate usage.</p>\n<h4 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>ETH sent to CreditLine.liquidate by an external liquidator when <code>autoLiquidation</code> is enabled remain with the contract and aren’t transferred to the lender:\n<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/CreditLine/CreditLine.sol#L1015\">https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/CreditLine/CreditLine.sol#L1015</a></p>\n<h4 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add transfer to a lender for ETH case:</p>\n<p>Now:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_borrowAsset</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_returnETH</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_borrowTokens</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;Insufficient ETH to liquidate&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_returnETH</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">_returnETH</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&#39;&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;Transfer fail&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>To be:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_borrowAsset</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_returnETH</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_borrowTokens</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;Insufficient ETH to liquidate&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">_lender</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">_borrowTokens</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&#39;&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;liquidate: Transfer failed&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_returnETH</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                (</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">_returnETH</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&#39;&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;liquidate: Return transfer failed&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/90\">ritik99 (Sublime) confirmed</a></strong></p>\n<h2 id=\"m-03-collateral-can-be-deposited-in-a-finished-pool\" style=\"position:relative;\"><a href=\"#m-03-collateral-can-be-deposited-in-a-finished-pool\" aria-label=\"m 03 collateral can be deposited in a finished pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/169\">[M-03] Collateral can be deposited in a finished pool</a></h2>\n<p><em>Submitted by pedroais</em></p>\n<h4 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The depositCollateral function doesn’t check the status of the pool so collateral can be deposited in a finished loan. This can happen by mistake and all funds will be lost.</p>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/Pool/Pool.sol#L207\">https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/Pool/Pool.sol#L207</a></p>\n<h4 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Require loan status to be collection or active in the depositCollateral function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/169#issuecomment-1001019540\">ritik99 (Sublime) disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>We will add a check for this. The issue however stems from user error. Sending assets to an address without proper checks does not constitute an attack path imo. We would suggest a rating of (1) Low or (0) non-critical given the low likelihood and the impact of the attack (only the user making the incorrect transaction is affected)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/169#issuecomment-1018679575\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p><code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n<p>This definitely qualifies as “external requirements” and a simple check would assist in avoid it.</p>\n</blockquote>\n<h2 id=\"m-04-unlinked-address-can-link-immediately-again\" style=\"position:relative;\"><a href=\"#m-04-unlinked-address-can-link-immediately-again\" aria-label=\"m 04 unlinked address can link immediately again permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/54\">[M-04] Unlinked address can link immediately again</a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<h4 id=\"impact-9\" style=\"position:relative;\"><a href=\"#impact-9\" aria-label=\"impact 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>After a master calls unlinkAddress() to unlink an address, the address that has just been unlinked can directly link again without permission.\nThe address that is just unlinked can call linkAddress(masterAddress) which will execute because pendingLinkAddresses is still set.\nAssuming the master has unlinked for a good reason it is unwanted to be able to be linked again without any permission from the master.</p>\n<p>Note: a master can prevent this by calling cancelAddressLinkingRequest(), but this doesn’t seem logical to do</p>\n<h4 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/e688bd6cd3df7fefa3be092529b4e2d013219625/contracts/Verification/Verification.sol#L129-L154\">https://github.com/code-423n4/2021-12-sublime/blob/e688bd6cd3df7fefa3be092529b4e2d013219625/contracts/Verification/Verification.sol#L129-L154</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">unlinkAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_linkedAddress</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_linkedTo</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">linkedAddresses</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_linkedAddress</span><span class=\"mtk1\">].</span><span class=\"mtk12\">masterAddress</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_linkedTo</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;V:UA-Address not linked&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_linkedTo</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;V:UA-Not linked to sender&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">linkedAddresses</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_linkedAddress</span><span class=\"mtk1\">]; </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">linkAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_masterAddress</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">linkedAddresses</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">masterAddress</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;V:LA-Address already linked&#39;</span><span class=\"mtk1\">);   </span><span class=\"mtk3\">// == true (after unlinkAddress)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pendingLinkAddresses</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_masterAddress</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&#39;V:LA-No pending request&#39;</span><span class=\"mtk1\">);                 </span><span class=\"mtk3\">// == true (after unlinkAddress)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_linkAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_masterAddress</span><span class=\"mtk1\">);                                                                                           </span><span class=\"mtk3\">// // pendingLinkAddresses not reset</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">cancelAddressLinkingRequest</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_linkedAddress</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ... </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pendingLinkAddresses</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_linkedAddress</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">]; </span><span class=\"mtk3\">// only location where pendingLinkAddresses is reset</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add something like to following at the end of linkAddress:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pendingLinkAddresses</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_masterAddress</span><span class=\"mtk1\">]; </span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/54\">ritik99 (Sublime) confirmed</a></strong></p>\n<h2 id=\"m-05-extension-voting-threshold-check-needs-to-rerun-on-each-transfer\" style=\"position:relative;\"><a href=\"#m-05-extension-voting-threshold-check-needs-to-rerun-on-each-transfer\" aria-label=\"m 05 extension voting threshold check needs to rerun on each transfer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/141\">[M-05] Extension voting threshold check needs to rerun on each transfer</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>Extension</code> contract correctly reduces votes from the <code>from</code> address of a transfer and adds it to the <code>to</code> address of the transfer (in case both of them voted on it before), but it does not rerun the voting logic in <code>voteOnExtension</code> that actually grants the extension.\nThis leads to issues where an extension should be granted but is not:</p>\n<h6 id=\"poc-2\" style=\"position:relative;\"><a href=\"#poc-2\" aria-label=\"poc 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POC</h6>\n<ul>\n<li><code>to</code> address has 100 tokens and votes for the extension</li>\n<li><code>from</code> address has 100 tokens but does not vote for the extension and transfers the 100 tokens to <code>to</code></li>\n<li><code>to</code> now has 200 tokens, <code>removeVotes</code> is run, the <code>totalExtensionSupport</code> is increased by 100 to 200. In theory, the threshold is reached and the vote should pass if <code>to</code> could call <code>voteOnExtension</code> again.</li>\n<li>But their call to <code>voteOnExtension</code> with the new balance will fail as they already voted on it (<code>lastVotedExtension == _extensionVoteEndTime</code>). The extension is not granted.</li>\n</ul>\n<h4 id=\"impact-10\" style=\"position:relative;\"><a href=\"#impact-10\" aria-label=\"impact 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Extensions that should be granted after a token transfer are not granted.</p>\n<h4 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Rerun the threshold logic in <code>removeVotes</code> as it has the potential to increase the total support if <code>to</code> voted for the extension but <code>from</code> did not.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/141\">ritik99 (Sublime) confirmed</a></strong></p>\n<h2 id=\"m-06-noyieldsol-tokens-with-fee-on-transfer-are-not-supported\" style=\"position:relative;\"><a href=\"#m-06-noyieldsol-tokens-with-fee-on-transfer-are-not-supported\" aria-label=\"m 06 noyieldsol tokens with fee on transfer are not supported permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/142\">[M-06] <code>NoYield.sol</code> Tokens with fee on transfer are not supported</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>There are ERC20 tokens that charge fee for every <code>transfer()</code> or <code>transferFrom()</code>.</p>\n<p>In the current implementation, <code>NoYield.sol#lockTokens()</code> assumes that the received amount is the same as the transfer amount, and uses it to calculate <code>sharesReceived</code> amounts.</p>\n<p>As a result, in <code>unlockTokens()</code>, later users may not be able to successfully withdraw their tokens, as it may revert at L141 for insufficient balance.</p>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L93-L106\">https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L93-L106</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lockTokens</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">asset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySavingsAccount</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sharesReceived</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;Invest: amount&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">asset</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;Invest: ETH amount&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">sharesReceived</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LockedTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">asset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sharesReceived</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L134-L144\">https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L134-L144</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_unlockTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">asset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">received</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;Invest: amount&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">received</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">asset</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">savingsAccount</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">received</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&#39;&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;Transfer failed&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savingsAccount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">received</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">UnlockedTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">received</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h5 id=\"recommendation-2\" style=\"position:relative;\"><a href=\"#recommendation-2\" aria-label=\"recommendation 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h5>\n<p>Consider comparing before and after balance to get the actual transferred amount.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/142\">ritik99 (Sublime) acknowledged and disagreed with severity</a></strong></p>\n<h2 id=\"m-07-aaveyield-misspelled-external-function-name-making-functions-fail\" style=\"position:relative;\"><a href=\"#m-07-aaveyield-misspelled-external-function-name-making-functions-fail\" aria-label=\"m 07 aaveyield misspelled external function name making functions fail permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/42\">[M-07] AaveYield: Misspelled external function name making functions fail</a></h2>\n<p><em>Submitted by 0xngndev</em></p>\n<h4 id=\"impact-11\" style=\"position:relative;\"><a href=\"#impact-11\" aria-label=\"impact 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>In <code>AaveYield.sol</code> the functions:</p>\n<ul>\n<li><code>liquidityToken</code></li>\n<li><code>_withdrawETH</code></li>\n<li><code>_depositETH</code></li>\n</ul>\n<p>Make a conditional call to <code>IWETHGateway(wethGateway).getAWETHAddress()</code></p>\n<p>This function does not exist in the <code>wethGateway</code> contract, causing these function to fail with the error <code>\"Fallback not allowed\"</code>.</p>\n<p>The function they should be calling is <code>getWethAddress()</code> without the “A”.</p>\n<p>Small yet dangerous typo.</p>\n<h5 id=\"mitigation-steps\" style=\"position:relative;\"><a href=\"#mitigation-steps\" aria-label=\"mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mitigation Steps</h5>\n<p>Simply modify:</p>\n<p><code>IWETHGateway(wethGateway).getAWETHAddress()</code></p>\n<p>to:</p>\n<p><code>IWETHGateway(wethGateway).getWETHAddress()</code></p>\n<p>In the functions mentioned above.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/42#issuecomment-1001348407\">ritik99 (Sublime) confirmed</a>:</strong></p>\n<blockquote>\n<p>We were using an older version of the contracts that had <a href=\"https://etherscan.io/address/dcd33426ba191383f1c9b431a342498fdac73488#code#F1#L158\">this definition</a>, will be updated accordingly</p>\n</blockquote>\n<h2 id=\"m-08-missing-approve0\" style=\"position:relative;\"><a href=\"#m-08-missing-approve0\" aria-label=\"m 08 missing approve0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/97\">[M-08] Missing approve(0)</a></h2>\n<p><em>Submitted by sirhashalot, also found by Jujic, and sirhashalot</em></p>\n<h4 id=\"impact-12\" style=\"position:relative;\"><a href=\"#impact-12\" aria-label=\"impact 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>There are 3 instances where the <code>IERC20.approve()</code> function is called only once without setting the allowance to zero. Some tokens, like USDT, require first reducing the address’ allowance to zero by calling <code>approve(_spender, 0)</code>. Transactions will revert when using an unsupported token like USDT (see the <code>approve()</code> function requirement <a href=\"https://etherscan.io/address/0xdac17f958d2ee523a2206206994597c13d831ec7#code\">at line 199</a>).</p>\n<h4 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L647\">CreditLine/CreditLine.sol:647</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L779\">CreditLine/CreditLine.sol:779</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/AaveYield.sol#L324\">yield/AaveYield.sol:324</a></li>\n</ul>\n<p>Note: the usage of <code>approve()</code> in yield/CompoundYield.sol (<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/CompoundYield.sol#L211-L212\">lines 211-212</a>), in yield/YearnYield.sol (<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/YearnYield.sol#L210-L211\">lines 211-212</a>), and in yield/AaveYield.sol (<a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/AaveYield.sol#L297-L298\">lines 297-298</a>) do not need modification since it they already use the recommended approach. Additionally the usage of <code>approve()</code> in <a href=\"https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/AaveYield.sol#L307\">yield/AaveYield.sol:307</a> likely does not need modification since that approve function only handles ETH.</p>\n<h4 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use <code>approve(_spender, 0)</code> to set the allowance to zero immediately before each of the existing <code>approve()</code> calls.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/97\">ritik99 (Sublime) confirmed</a></strong>\n<strong><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/97#issuecomment-1018865958\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>moving to medium risk as the availability of the protocol is affected. </p>\n<p><code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<h1 id=\"low-risk-findings-24\" style=\"position:relative;\"><a href=\"#low-risk-findings-24\" aria-label=\"low risk findings 24 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (24)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/114\">[L-01] Wrong usage of <code>OracleLibrary.getQuoteAtTick()</code> breaks <code>PriceOracle.sol</code></a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/2\">[L-02] Deprecated safeApprove() function</a> <em>Submitted by sirhashalot, also found by robee, WatchPug, and 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/106\">[L-03] <code>initializer</code> functions can be front run</a> <em>Submitted by WatchPug, also found by cmichel, robee, and leastwood</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/94\">[L-04] CreditLine.liquidate allows for price manipulated liquidation</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/53\">[L-06] PoolFactory and CreditLine updateSavingsAccount will break the system in production as savings account hold current user records</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/140\">[L-07] Extension voting power can be flashloaned</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/138\">[L-08] Pool direct savingsaccount deposits fail when no strategy set</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/146\">[L-09] Self-transfer leads to wrong withdrawable repayments</a> <em>Submitted by cmichel, also found by gpersoon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/143\">[L-10] Collateral deposit does not support fee-on-transfer tokens</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/87\">[L-11] calculateInterest() comments missing input parameter</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/83\">[L-12] <code>delete</code> doesn’t delete mapping in struct</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/95\">[L-13] Two Steps Verification before Transferring Ownership</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/58\">[L-14] Overflow in _repay()</a> <em>Submitted by gpersoon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/57\">[L-15] transferTokens should use _from instead of msg.sender</a> <em>Submitted by gpersoon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/103\">[L-16] Missing timelock for critical contract setters of privileged roles (Price Oracles)</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/135\">[L-17] <code>unlockShares</code> wrong comment</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/108\">[L-18] <code>Pool.sol</code> should use the Upgradeable variant of OpenZeppelin Contracts</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/78\">[L-19] CreditLine.borrow accepts ETH transfers</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/71\">[L-20] Contracts allow sending ETH on calls which does not expect it</a> <em>Submitted by TomFrenchBlockchain, also found by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/68\">[L-21] <code>poolSizeLimit</code> does not account for differing unit values between borrow assets</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/99\">[L-22] Unnecessary receive()</a> <em>Submitted by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/50\">[L-23] Improper Validation Of Chainlink’s <code>latestRoundData</code> Function</a> <em>Submitted by leastwood, also found by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/48\">[L-24] Natspec not matching function’s logic</a> <em>Submitted by 0xngndev</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/26\">[L-05] Lack Of Precision</a> <em>Submitted by robee</em></li>\n</ul>\n<h1 id=\"non-critical-findings-18\" style=\"position:relative;\"><a href=\"#non-critical-findings-18\" aria-label=\"non critical findings 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (18)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/38\">[N-01] Named return issue</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/170\">[N-02] Event missing when removing a vote in extensions</a> <em>Submitted by pedroais</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/61\">[N-03] Repayments._transferTokens doesn’t check msg.value in ETH case</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/136\">[N-04] approve return values not checked</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/166\">[N-05] missing nonreentrant modfier</a> <em>Submitted by certora</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/130\">[N-06] <code>SavingsAccount.sol</code> Wrong <code>amount</code> in <code>Transfer</code> events</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/74\">[N-07] <code>getInterestOverdue</code> reverts rather than returning 0 when there is no overdue interest</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/84\">[N-08] No validation of protocol fee fraction</a> <em>Submitted by sirhashalot, also found by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/30\">[N-09] Not verified function inputs of public / external functions</a> <em>Submitted by robee, also found by 0x1f8b, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/86\">[N-10] CreditLine.sol assumes 365 day year</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/85\">[N-11] Comments inconsistency for _id</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/82\">[N-12] Magic number 30 could be a constant</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/165\">[N-13] Change state mutability in NoYield.sol</a> <em>Submitted by p4st13r4</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/105\">[N-14] Best Practice: Contract file name should follow coding conventions</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/79\">[N-15] <code>idealCollateralRatio</code> is confusingly named</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/76\">[N-16] Argument order for SavingsAccount approval functions is odd</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/69\">[N-17] Duplicated code in Yield contracts</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/67\">[N-18] Typo in liquidateCancelPenalty natspec</a> <em>Submitted by TomFrenchBlockchain</em></li>\n</ul>\n<h1 id=\"gas-optimizations-32\" style=\"position:relative;\"><a href=\"#gas-optimizations-32\" aria-label=\"gas optimizations 32 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (32)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/39\">[G-01] Gas: Upgrading solc version and removing SafeMath</a> <em>Submitted by 0xngndev, also found by WatchPug, 0x0x0x, Jujic, and defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/46\">[G-02] Fix Unused Variables and Function Parameters</a> <em>Submitted by 0xngndev, also found by p4st13r4</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/36\">[G-03] Unnecessary uint zero initialization</a> <em>Submitted by sirhashalot, also found by 0x0x0x, WatchPug, cmichel, pmerkleplant, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/22\">[G-04] Prefix increments are cheaper than postfix increments</a> <em>Submitted by robee, also found by 0x0x0x and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/18\">[G-05] Unnecessary Reentrancy Guards</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/119\">[G-06] Remove unused local variables</a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/129\">[G-07] Gas Optimization: Struct layout</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/102\">[G-08] Use of _msgSender()</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/148\">[G-09] Gas: Use <code>else if</code> in <code>withdrawLiquidity</code></a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/128\">[G-10] <code>AaveYield.getTokensForShares()</code>, <code>AaveYield.getSharesForTokens()</code> Implementation can be simpler and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/127\">[G-11] <code>Pool.sol#withdrawBorrowedAmount()</code> Validation of pool status can be done earlier to save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/126\">[G-12] <code>10**30</code> can be changed to <code>1e30</code> and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/124\">[G-13] Inline unnecessary function can make the code simpler and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/117\">[G-14] Cache storage variables in the stack can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/112\">[G-15] Remove unnecessary variables can make the code simpler and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/72\">[G-16] LinkedAddress struct can be packed to save an SSTORE</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/70\">[G-17] Unnecessary zero approvals in yield contracts</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/66\">[G-18] Check on <code>poolConstants.loanWithdrawalDeadline</code> for liquidation is unnecessary</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/59\">[G-19] Flattening nested mappings can save gas</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/93\">[G-20] Use one require instead of several</a> <em>Submitted by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/92\">[G-21] Redundant use safeMath</a> <em>Submitted by Jujic, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/47\">[G-22] Reduce length of require error messages to save in deployment costs</a> <em>Submitted by 0xngndev, also found by Jujic, WatchPug, robee, and sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/40\">[G-23] Gas: Inlining logic that’s used only once in the contract</a> <em>Submitted by 0xngndev</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/7\">[G-24] Gas saving using delete</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/6\">[G-25] Gas saving removing safe math</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/5\">[G-26] Gas saving by duplicate check</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/34\">[G-27] Gas optimization</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/14\">[G-28] Gas saving by struct reorganization</a> <em>Submitted by 0x1f8b, also found by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/160\">[G-29] Not needed zero address check</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/157\">[G-30] Loops can be implemented more efficiently</a> <em>Submitted by 0x0x0x, also found by WatchPug, pmerkleplant, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/21\">[G-31] Unnecessary array boundaries check when loading an array element twice</a> <em>Submitted by robee, also found by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-sublime-findings/issues/77\">[G-32] Credit Line acceptance logic can be simplified to avoid SLOAD in some cases</a> <em>Submitted by TomFrenchBlockchain, also found by WatchPug</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-11\">High Risk Findings (11)</a></p>\n<ul>\n<li><a href=\"#h-01-in-creditline_borrowtokenstoliquidate-oracle-is-used-wrong-way\">[H-01] In <code>CreditLine#_borrowTokensToLiquidate</code>, oracle is used wrong way</a></li>\n<li><a href=\"#h-02-wrong-returns-of-savingsaccountutildepositfromsavingsaccount-can-cause-fund-loss\">[H-02] Wrong returns of <code>SavingsAccountUtil.depositFromSavingsAccount()</code> can cause fund loss</a></li>\n<li><a href=\"#h-03-denial-of-service\">[H-03] denial of service</a></li>\n<li><a href=\"#h-04-yearn-token--shares-conversion-decimal-issue\">[H-04] Yearn token &#x3C;> shares conversion decimal issue</a></li>\n<li><a href=\"#h-05-aaves-share-tokens-are-rebasing-breaking-current-strategy-code\">[H-05] Aave’s share tokens are rebasing breaking current strategy code</a></li>\n<li><a href=\"#h-06-anyone-can-liquidate-credit-line-when-autoliquidation-is-false-without-supplying-borrow-tokens\">[H-06] Anyone can liquidate credit line when autoLiquidation is false without supplying borrow tokens</a></li>\n<li><a href=\"#h-07-savingsaccount-withdrawall-and-switchstrategy-can-freeze-user-funds-by-ignoring-possible-strategy-liquidity-issues\">[H-07] SavingsAccount withdrawAll and switchStrategy can freeze user funds by ignoring possible strategy liquidity issues</a></li>\n<li><a href=\"#h-08-possibility-to-drain-savingsaccount-contract-assets\">[H-08] Possibility to drain SavingsAccount contract assets</a></li>\n<li><a href=\"#h-09-priceoracle-does-not-filter-price-feed-outliers\">[H-09] <code>PriceOracle</code> Does Not Filter Price Feed Outliers</a></li>\n<li><a href=\"#h-10-wrong-implementation-of-noyieldsolemergencywithdraw\">[H-10] Wrong implementation of <code>NoYield.sol#emergencyWithdraw()</code></a></li>\n<li><a href=\"#h-11-unable-to-call-emergencywithdraw-eth-in-noyield-contract\">[H-11] Unable To Call <code>emergencyWithdraw</code> ETH in <code>NoYield</code> Contract</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-8\">Medium Risk Findings (8)</a></p>\n<ul>\n<li><a href=\"#m-01-ether-can-be-locked-in-the-poolfactory-contract-without-a-way-to-retrieve-it\">[M-01] Ether can be locked in the <code>PoolFactory</code> contract without a way to retrieve it</a></li>\n<li><a href=\"#m-02-creditlineliquidate-doesnt-transfer-borrowed-eth-to-a-lender\">[M-02] CreditLine.liquidate doesn’t transfer borrowed ETH to a lender</a></li>\n<li><a href=\"#m-03-collateral-can-be-deposited-in-a-finished-pool\">[M-03] Collateral can be deposited in a finished pool</a></li>\n<li><a href=\"#m-04-unlinked-address-can-link-immediately-again\">[M-04] Unlinked address can link immediately again</a></li>\n<li><a href=\"#m-05-extension-voting-threshold-check-needs-to-rerun-on-each-transfer\">[M-05] Extension voting threshold check needs to rerun on each transfer</a></li>\n<li><a href=\"#m-06-noyieldsol-tokens-with-fee-on-transfer-are-not-supported\">[M-06] <code>NoYield.sol</code> Tokens with fee on transfer are not supported</a></li>\n<li><a href=\"#m-07-aaveyield-misspelled-external-function-name-making-functions-fail\">[M-07] AaveYield: Misspelled external function name making functions fail</a></li>\n<li><a href=\"#m-08-missing-approve0\">[M-08] Missing approve(0)</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-24\">Low Risk Findings (24)</a></li>\n<li><a href=\"#non-critical-findings-18\">Non-Critical Findings (18)</a></li>\n<li><a href=\"#gas-optimizations-32\">Gas Optimizations (32)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of Sublime contest smart contract system written in Solidity. The code contest took place between December 9—December 15 2021.\n\n## Wardens\n\n21 Wardens contributed reports to the Sublime contest:\n\n1. [cmichel](https://twitter.com/cmichelio)\n1. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n1. [leastwood](https://twitter.com/liam_eastwood13)\n1. 0x0x0x\n1. certora\n1. harleythedog\n1. [kemmio](https://twitter.com/k3mmio)\n1. hyh\n1. 0x1f8b\n1. [gpersoon](https://twitter.com/gpersoon)\n1. [0xngndev](https://twitter.com/ngndev)\n1. [TomFrenchBlockchain](https://github.com/TomAFrench)\n1. [sirhashalot](https://twitter.com/SirH4shalot)\n1. Jujic\n1. [broccolirob](https://twitter.com/0xbroccolirob)\n1. pedroais\n1. robee\n1. [defsec](https://twitter.com/defsec_)\n1. [pmerkleplant](https://twitter.com/merkleplant_eth)\n1. [gzeon](https://twitter.com/gzeon)\n1. p4st13r4 (0xb4bb4, [0x69e8](https://github.com/0x69e8))\n\nThis contest was judged by [Oxean](https://github.com/0xean).\n\nFinal report assembled by [tealtiger](https://github.com/tealtigrrr), [CloudEllie](https://twitter.com/CloudEllie1), and [liveactionllama](https://twitter.com/liveactionllama).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 43 unique vulnerabilities and 93 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 11 received a risk rating in the category of HIGH severity, 8 received a risk rating in the category of MEDIUM severity, and 24 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 18 non-critical recommendations and 32 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 Sublime contest repository](https://github.com/code-423n4/2021-12-sublime), and is composed of 16 smart contracts written in the Solidity programming language and includes 1,689 lines of Solidity code.\n\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (11)\n## [[H-01] In `CreditLine#_borrowTokensToLiquidate`, oracle is used wrong way](https://github.com/code-423n4/2021-12-sublime-findings/issues/155)\n_Submitted by 0x0x0x_\n\nCurrent implementation to get the price is as follows:\n\n`(uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(_borrowAsset, _collateralAsset);`\n\n<https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L1050>\n\nBut it should not consult `borrowToken / collateralToken`, rather it should consult the inverse of this result. As a consequence, in `liquidate` the liquidator/lender can lose/gain funds as a result of this miscalculation.\n\n#### Mitigation step\n\nReplace it with\n\n`(uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(_collateralAsset, _borrowAsset);`\n\n**[ritik99 (Sublime) confirmed](https://github.com/code-423n4/2021-12-sublime-findings/issues/155)**\n\n\n## [[H-02] Wrong returns of `SavingsAccountUtil.depositFromSavingsAccount()` can cause fund loss](https://github.com/code-423n4/2021-12-sublime-findings/issues/132)\n_Submitted by WatchPug_\n\nThe function `SavingsAccountUtil.depositFromSavingsAccount()` is expected to return the number of equivalent shares for given `_asset`.\n\n<https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/Pool/Pool.sol#L225-L267>\n\n```solidity\n/**\n * @notice internal function used to get amount of collateral deposited to the pool\n * @param _fromSavingsAccount if true, collateral is transferred from _sender's savings account, if false, it is transferred from _sender's wallet\n * @param _toSavingsAccount if true, collateral is transferred to pool's savings account, if false, it is withdrawn from _sender's savings account\n * @param _asset address of the asset to be deposited\n * @param _amount amount of tokens to be deposited in the pool\n * @param _poolSavingsStrategy address of the saving strategy used for collateral deposit\n * @param _depositFrom address which makes the deposit\n * @param _depositTo address to which the tokens are deposited\n * @return _sharesReceived number of equivalent shares for given _asset\n */\nfunction _deposit(\n    bool _fromSavingsAccount,\n    bool _toSavingsAccount,\n    address _asset,\n    uint256 _amount,\n    address _poolSavingsStrategy,\n    address _depositFrom,\n    address _depositTo\n) internal returns (uint256 _sharesReceived) {\n    if (_fromSavingsAccount) {\n        _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(\n            ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),\n            _depositFrom,\n            _depositTo,\n            _amount,\n            _asset,\n            _poolSavingsStrategy,\n            true,\n            _toSavingsAccount\n        );\n    } else {\n        _sharesReceived = SavingsAccountUtil.directDeposit(\n            ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),\n            _depositFrom,\n            _depositTo,\n            _amount,\n            _asset,\n            _toSavingsAccount,\n            _poolSavingsStrategy\n        );\n    }\n}\n```\n\nHowever, since `savingsAccountTransfer()` does not return the result of `_savingsAccount.transfer()`, but returned `_amount` instead, which means that `SavingsAccountUtil.depositFromSavingsAccount()` may not return the actual shares (when pps is not 1).\n\n<https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/SavingsAccount/SavingsAccountUtil.sol#L11-L26>\n\n```solidity\nfunction depositFromSavingsAccount(\n    ISavingsAccount _savingsAccount,\n    address _from,\n    address _to,\n    uint256 _amount,\n    address _token,\n    address _strategy,\n    bool _withdrawShares,\n    bool _toSavingsAccount\n) internal returns (uint256) {\n    if (_toSavingsAccount) {\n        return savingsAccountTransfer(_savingsAccount, _from, _to, _amount, _token, _strategy);\n    } else {\n        return withdrawFromSavingsAccount(_savingsAccount, _from, _to, _amount, _token, _strategy, _withdrawShares);\n    }\n}\n```\n\n<https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/SavingsAccount/SavingsAccountUtil.sol#L66-L80>\n\n```solidity\nfunction savingsAccountTransfer(\n    ISavingsAccount _savingsAccount,\n    address _from,\n    address _to,\n    uint256 _amount,\n    address _token,\n    address _strategy\n) internal returns (uint256) {\n    if (_from == address(this)) {\n        _savingsAccount.transfer(_amount, _token, _strategy, _to);\n    } else {\n        _savingsAccount.transferFrom(_amount, _token, _strategy, _from, _to);\n    }\n    return _amount;\n}\n```\n\nAs a result, the recorded `_sharesReceived` can be wrong.\n\n<https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/Pool/Pool.sol#L207-L223>\n\n```solidity\nfunction _depositCollateral(\n    address _depositor,\n    uint256 _amount,\n    bool _transferFromSavingsAccount\n) internal nonReentrant {\n    uint256 _sharesReceived = _deposit(\n        _transferFromSavingsAccount,\n        true,\n        poolConstants.collateralAsset,\n        _amount,\n        poolConstants.poolSavingsStrategy,\n        _depositor,\n        address(this)\n    );\n    poolVariables.baseLiquidityShares = poolVariables.baseLiquidityShares.add(_sharesReceived);\n    emit CollateralAdded(_depositor, _amount, _sharesReceived);\n}\n```\n\n##### PoC\n\nGiven:\n\n*   the price per share of yearn USDC vault is `1.2`\n\n1.  Alice deposited `12,000 USDC` to `yearn` strategy, received `10,000` share tokens;\n2.  Alice created a pool, and added all the `12,000 USDC` from the saving account as collateral; The recorded `CollateralAdded` got the wrong number: `12000` which should be `10000`;\n3.  Alice failed to borrow money with the pool and tries to `cancelPool()`, it fails as the recorded collateral `shares` are more than the actual collateral.\n\nAs a result, Alice has lost all the `12,000 USDC`.\n\nIf Alice managed to borrow with the pool, when the loan defaults, the liquidation will also fail, and cause fund loss to the lenders.\n\n##### Recommendation\n\nChange to:\n\n```solidity\nfunction savingsAccountTransfer(\n    ISavingsAccount _savingsAccount,\n    address _from,\n    address _to,\n    uint256 _amount,\n    address _token,\n    address _strategy\n) internal returns (uint256) {\n    if (_from == address(this)) {\n        return _savingsAccount.transfer(_amount, _token, _strategy, _to);\n    } else {\n        return _savingsAccount.transferFrom(_amount, _token, _strategy, _from, _to);\n    }\n}\n```\n\n**[ritik99 (Sublime) confirmed](https://github.com/code-423n4/2021-12-sublime-findings/issues/132)**\n\n\n## [[H-03] denial of service](https://github.com/code-423n4/2021-12-sublime-findings/issues/154)\n_Submitted by certora_\n\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/Pool/Pool.sol#L645>\nif the borrow token is address(0) (ether), and someone calls withdrawLiquidity, it calls SavingsAccountUtil.transferTokens which will transfer to msg.sender, msg.value (of withdrawLiquidity, because it's an internal function). In other words, the liquidity provided will pay to themselves and their liquidity tokens will still be burned. therefore they will never be able to get their funds back.\n\n#### Recommended Mitigation Steps\n\nthe bug is in\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccountUtil.sol>\nIt is wrong to use msg.value in transferTokens because it'll be the msg.value of the calling function.\ntherefore every transfer of ether using this function is wrong and dangerous, the solution is to remove all msg.value from this function and just transfer \\_amount regularly.\n\n**[ritik99 (Sublime) confirmed](https://github.com/code-423n4/2021-12-sublime-findings/issues/154) **\n\n\n## [[H-04] Yearn token <> shares conversion decimal issue](https://github.com/code-423n4/2021-12-sublime-findings/issues/134)\n_Submitted by cmichel_\n\nThe yearn strategy `YearnYield` converts shares to tokens by doing `pricePerFullShare * shares / 1e18`:\n\n    function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {\n        if (shares == 0) return 0;\n        // @audit should divided by vaultDecimals \n        amount = IyVault(liquidityToken[asset]).getPricePerFullShare().mul(shares).div(1e18);\n    }\n\nBut Yearn's `getPricePerFullShare` seems to be [in `vault.decimals()` precision](https://github.com/yearn/yearn-vaults/blob/03b42dacacec2c5e93af9bf3151da364d333c222/contracts/Vault.vy#L1147), i.e., it should convert it as `pricePerFullShare * shares / (10 ** vault.decimals())`.\nThe vault decimals are the same [as the underlying token decimals](https://github.com/yearn/yearn-vaults/blob/03b42dacacec2c5e93af9bf3151da364d333c222/contracts/Vault.vy#L295-L296)\n\n#### Impact\n\nThe token and shares conversions do not work correctly for underlying tokens that do not have 18 decimals.\nToo much or too little might be paid out leading to a loss for either the protocol or user.\n\n#### Recommended Mitigation Steps\n\nDivide by `10**vault.decimals()` instead of `1e18` in `getTokensForShares`.\nApply a similar fix in `getSharesForTokens`.\n\n**[ritik99 (Sublime) confirmed](https://github.com/code-423n4/2021-12-sublime-findings/issues/134)** \n\n## [[H-05] Aave's share tokens are rebasing breaking current strategy code](https://github.com/code-423n4/2021-12-sublime-findings/issues/137)\n_Submitted by cmichel, also found by WatchPug and leastwood_\n\nWhen depositing into Aave through the `AaveYield.lockTokens` contract strategy, one receives the `sharesReceived` amount corresponding to the diff of `aToken` balance, which is just always the deposited amount as aave is a rebasing token and `1.0 aToken = 1.0 underlying` at each deposit / withdrawal.\n\nNote that this `sharesReceived` (the underlying deposit amount) is cached in a `balanceInShares` map in `SavingsAccount.deposit` which makes this share *static* and not dynamically rebasing anymore:\n\n```solidity\nfunction deposit(\n    uint256 _amount,\n    address _token,\n    address _strategy,\n    address _to\n) external payable override nonReentrant returns (uint256) {\n    require(_to != address(0), 'SavingsAccount::deposit receiver address should not be zero address');\n    uint256 _sharesReceived = _deposit(_amount, _token, _strategy);\n    balanceInShares[_to][_token][_strategy] = balanceInShares[_to][_token][_strategy].add(_sharesReceived);\n    emit Deposited(_to, _sharesReceived, _token, _strategy);\n    return _sharesReceived;\n}\n\nfunction getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {\n    if (shares == 0) return 0;\n    address aToken = liquidityToken(asset);\n\n    (, , , , , , , uint256 liquidityIndex, , ) = IProtocolDataProvider(protocolDataProvider).getReserveData(asset);\n\n    // @audit-info tries to do (user shares / total shares) * underlying amount where underlying amount = scaledBalance * liquidityIndex\n    amount = IScaledBalanceToken(aToken).scaledBalanceOf(address(this)).mul(liquidityIndex).mul(shares).div(\n        IERC20(aToken).balanceOf(address(this))\n    );\n}\n```\n\nHowever, the `getTokensForShares` function uses a rebasing total share supply of `IERC20(aToken).balanceOf(this)`.\n\n###### POC\n\n*   SavingsAccount deposits 1000 DAI for user and user receives 1000 aDAI as shares. These shares are cached in `balanceInShares[user][dai][aave]`.\n*   Time passes, Aave accrues interest for lenders, and the initial 1000 aTokens balance has rebased to 1200 aTokens\n*   SavingsAccount `withdraw`s 1000 aDAI shares for user which calls `AaveYield.unlockTokens`. The user receives only 1000 DAI. The interest owed to the user is not paid out.\n*   Note that `getTokensForShares` also returns the wrong amount as `1200 * 1000 / 1200 = 1000`\n\n#### Impact\n\nInterest is not paid out to users.\nPool collateral is measured without the interest accrued as it uses `getTokensForShares` which will lead to early liquidations and further loss.\n\n#### Recommended Mitigation Steps\n\nIf the user shares are not rebasing, you cannot have the \"total shares supply\" (the shares in the contract) be rebasing as in `getTokensForShares`. Also withdrawing the share amount directly from Aave as in `_withdrawERC` does not withdraw the yield.\nA fix could be to create a *non-rebasing* wrapper LP token that is paid out to the user proportional to the current strategy TVL at time of user deposit.\n\n**[ritik99 (Sublime) acknowledged](https://github.com/code-423n4/2021-12-sublime-findings/issues/137#issuecomment-1001476854):**\n > We've been aware of this issue for some time.. ended up including the AaveYield file in the scope by mistake! We do not plan to include the Aave strategy in our launch (we maintain a strategy registry that allows us to add/drop yield strategies), and as noted in #128, we will be utilizing [wrapper contracts](https://github.com/aave/protocol-v2/blob/feat-atoken-wrapper-liquidity-mining/contracts/protocol/tokenization/StaticATokenLM.sol) that mimics behaviour of non-rebasing LP tokens\n\n**[0xean (judge) commented](https://github.com/code-423n4/2021-12-sublime-findings/issues/137#issuecomment-1018051683):**\n > going to side with the warden since they believed the contract to be in scope and it's a valid concern.\n\n\n\n## [[H-06] Anyone can liquidate credit line when autoLiquidation is false without supplying borrow tokens](https://github.com/code-423n4/2021-12-sublime-findings/issues/96)\n_Submitted by harleythedog_\n\n#### Impact\n\nIt is intended that if a credit line has autoLiquidation as false, then only the lender can be the liquidator (see docs here: <https://docs.sublime.finance/sublime-docs/smart-contracts/creditlines>). However, this is not correctly implemented, and anyone can liquidate a position that has autoLiquidation set to false.\n\nEven worse, when autoLiquidation is set to false, the liquidator does not have to supply the initial amount of borrow tokens (determined by `_borrowTokensToLiquidate`) that normally have to be transferred when autoLiquidation is true. This means that the liquidator will be sent all of the collateral that is supposed to be sent to the lender, so this represents a huge loss to the lender. Since the lender will lose all of the collateral that they are owed, this is a high severity issue.\n\n#### Proof of Concept\n\nThe current implementation of liquidate is here: <https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L996>.\n\nNotice that the autoLiquidation value is only used in one place within this function, which is in this segment of the code:\n```solidity\n...\n    if (creditLineConstants[_id].autoLiquidation && _lender != msg.sender) {\n        uint256 _borrowTokens = _borrowTokensToLiquidate(_borrowAsset, _collateralAsset, _totalCollateralTokens);\n        if (_borrowAsset == address(0)) {\n            uint256 _returnETH = msg.value.sub(_borrowTokens, 'Insufficient ETH to liquidate');\n            if (_returnETH != 0) {\n                (bool success, ) = msg.sender.call{value: _returnETH}('');\n                require(success, 'Transfer fail');\n            }\n        } else {\n        IERC20(_borrowAsset).safeTransferFrom(msg.sender, _lender, _borrowTokens);\n        }\n    }\n    \n    _transferCollateral(_id, _collateralAsset, _totalCollateralTokens, _toSavingsAccount); \n    emit  CreditLineLiquidated(_id, msg.sender);\n}\n```\n\nSo, if `autoLiquidation` is false, the code inside of the if statement will simply not be executed, and there are no further checks that the sender HAS to be the lender if `autoLiquidation` is false. This means that anyone can liquidate a non-autoLiquidation credit line, and receive all of the collateral without first transferring the necessary borrow tokens.\n\nFor a further proof of concept, consider the test file here: <https://github.com/code-423n4/2021-12-sublime/blob/main/test/CreditLines/2.spec.ts>. If the code on line 238 is changed from `let  _autoLiquidation: boolean  =  true;` to `let  _autoLiquidation: boolean  =  false;`, all the test cases will still pass. This confirms the issue, as the final test case \"Liquidate credit line\" has the `admin` as the liquidator, which should not work in non-autoLiquidations since they are not the lender.\n\n#### Tools Used\n\nInspection and confirmed with Hardhat.\n\n#### Recommended Mitigation Steps\n\nAdd the following require statement somewhere in the `liquidate` function:\n```solidity\nrequire(\n    creditLineConstants[_id].autoLiquidation || \n    msg.sender == creditLineConstants[_id].lender,\n    \"not autoLiquidation and not lender\");\n```\n\n#### [ritik99 (Sublime) labeled](https://github.com/code-423n4/2021-12-sublime-findings/issues/96) sponsor confirmed\n\n\n## [[H-07] SavingsAccount withdrawAll and switchStrategy can freeze user funds by ignoring possible strategy liquidity issues](https://github.com/code-423n4/2021-12-sublime-findings/issues/80)\n_Submitted by hyh, also found by cmichel_\n\n### Impact\n\nFull withdrawal and moving funds between strategies can lead to wrong accounting if the corresponding market has tight liquidity, which can be the case at least for `AaveYield`. That is, as the whole amount is required to be moved at once from Aave, both `withdrawAll` and `switchStrategy` will incorrectly account for partial withdrawal as if it was full whenever the corresponding underlying yield pool had liquidity issues.\n\n`withdrawAll` will delete user entry, locking the user funds in the strategy: user will get partial withdrawal and have the corresponding accounting entry removed, while the remaining actual funds will be frozen within the system.\n\n`switchStrategy` will subtract full number of shares for the `_amount` requested from the old strategy, while adding lesser partial number of shares for `_tokensReceived` to the new one with the same effect of freezing user's funds within the system.\n\n#### Proof of Concept\n\nSavingsAccount.withdrawAll\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L286>\n\nSavingsAccount.switchStrategy:\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L152>\n\nWhen full withdrawal or strategy switch is performed it is one withdraw via `unlockTokens` without checking the amount received.\n\nIn the same time the withdraw can fail for example for the strategy switch if old strategy is having liquidity issues at the moment, i.e. Aave market is currently have utilization rate too high to withdraw the amount requested given current size of the lending pool.\n\nAave `unlockTokens` return is correctly not matched with amount requested:\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/yield/AaveYield.sol#L217>\n\nBut, for example, `withdrawAll` ignores the fact that some funds can remain in the strategy and deletes the use entry after one withdraw attempt:\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L294>\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L312>\n\n`switchStrategy` removes the old entry completely:\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L181>\n\n#### Recommended Mitigation Steps\n\nFor both `withdrawAll` and `switchStrategy` the immediate fix is to account for tokens received in both cases, which are `_amount` after `unlockTokens` for `withdrawAll` and `_tokensReceived` for `switchStrategy`.\n\nMore general handling of the liquidity issues ideally to be addressed architecturally, given the potential issues with liquidity availability any strategy withdrawals can be done as follows:\n\n1.  Withdraw what is possible on demand, leave the amount due as is, i.e. do not commit to completing the action in one go and notify the user the action was partial (return actual amount)\n2.  Save to query and repeat for the remainder funds on the next similar action (this can be separate flag triggered mode)\n\n**[ritik99 (Sublime) disagreed with severity](https://github.com/code-423n4/2021-12-sublime-findings/issues/80#issuecomment-1000184590):**\n > The above issue requires making a few assumptions - (i) the underlying yield protocol does not have sufficient reserves to facilitate the withdrawal of a single user, (ii) the user attempts to withdraw all their assets during such times of insufficient reserves.\n> \n> We agree that the above could be a possibility, but would be unlikely. The underlying yield protocols undergo an interest rate spike during high utilization ratios to bring reserves back to normal levels, and some revert if they cannot withdraw the necessary amount (for eg, [Compound](https://github.com/compound-finance/compound-protocol/blob/4a8648ec0364d24c4ecfc7d6cae254f55030d65f/contracts/CToken.sol#L679)). During live deployment, only those strategies that work expectedly would be onboarded, while others wouldn't (for eg, Aave as a strategy wouldn't be integrated until their [wrappers for aTokens](https://github.com/aave/protocol-v2/blob/feat-atoken-wrapper-liquidity-mining/contracts/protocol/tokenization/StaticATokenLM.sol) are ready for use). Hence we suggest reducing severity to (2) medium-risk\n> \n> also similar to #144 \n\n**[0xean (judge) commented](https://github.com/code-423n4/2021-12-sublime-findings/issues/80#issuecomment-1018054859):**\n > While I understand the argument regarding this being an unlikely scenario, I don't believe that is a sufficient reason to downgrade the issue give the impact to a user and the lost funds.  \n> \n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n> \n> In this scenario - Assets are at a direct risk. \n\n\n## [[H-08] Possibility to drain SavingsAccount contract assets](https://github.com/code-423n4/2021-12-sublime-findings/issues/41)\n_Submitted by kemmio_\n\n#### Impact\n\nA malicious actor can manipulate switchStrategy() function in a way to withdraw tokens that are locked in SavingsAccount contract\n(the risk severity should be reviewed)\n\n#### Proof of Concept\n\nFirstly an attacker need to deploy a rogue strategy contract implementing IYield.getSharesForTokens() and IYield.unlockTokens() functions\nand calling switchStrategy() with \\_currentStrategy = ROGUE_CONTRACT_ADDRESS (\\_newStrategy can be any valid strategy e.g. NoYield)\n\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L160>\n```solidity\nrequire(_amount != 0, 'SavingsAccount::switchStrategy Amount must be greater than zero');\n```\nBypass this check by setting \\_amount > 0, since it will be overwritten in line\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L162>\n```solidity\n_amount = IYield(_currentStrategy).getSharesForTokens(_amount, _token);\n```\ngetSharesForTokens() should be implemented to always return 0, hence to bypass the overflow in lines\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L164-L167>\n```solidity\nbalanceInShares[msg.sender][_token][_currentStrategy] = balanceInShares[msg.sender][_token][_currentStrategy].sub(\n_amount,\n'SavingsAccount::switchStrategy Insufficient balance'\n);\n```\nsince balanceInShares\\[msg.sender]\\[\\_token]\\[\\_currentStrategy] == 0 and 0-0 will not overflow\n\nThe actual amount to be locked is saved in line\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L169>\n```solidity\nuint256 _tokensReceived = IYield(_currentStrategy).unlockTokens(_token, _amount);\n```\nthe rouge unlockTokens() can check asset balance of the contract and return the full amount\n\nAfter that some adjustment are made to set approval for the token or to handle native assets case\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L171-L177>\n```solidity\nuint256 _ethValue;\nif (_token != address(0)) {\n    IERC20(_token).safeApprove(_newStrategy, _tokensReceived);\n} else {\n    _ethValue = _tokensReceived;\n}\n_amount = _tokensReceived;\n```\nFinally the assets are locked in the locked strategy and shares are allocated on attackers acount\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L179-L181>\n```solidity\n\nuint256 _sharesReceived = IYield(_newStrategy).lockTokens{value: _ethValue}(address(this), _token, _tokensReceived);\n\nbalanceInShares[msg.sender][_token][_newStrategy] = balanceInShares[msg.sender][_token][_newStrategy].add(_sharesReceived);\n```\n\nProof of Concept\n\n```solidity\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Attacker{\n    function getSharesForTokens(uint256 amount, address token) external payable  returns(uint256){\n        return 0;\n    }\n    function unlockTokens(address token, uint256 amount) external payable returns(uint256){\n        uint256 bal;\n        if(token == address(0))\n            bal = msg.sender.balance;\n        else\n            bal = IERC20(token).balanceOf(msg.sender);\n        return bal;\n    }\n}\n```\n#### Recommended Mitigation Steps\n\nAdd a check for \\_currentStrategy to be from strategy list like the one in line\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/SavingsAccount/SavingsAccount.sol#L159>\n\n    require(IStrategyRegistry(strategyRegistry).registry(_newStrategy), 'SavingsAccount::_newStrategy do not exist');\n\n**[ritik99 (Sublime) disputed](https://github.com/code-423n4/2021-12-sublime-findings/issues/41#issuecomment-1001380202):**\n > The savings account contract doesn't hold any tokens, so it is not possible to lock tokens in a new strategy, hence this attack will not work. Nevertheless it is something we will explore further to limit unexpected state changes\n\n**[0xean (judge) commented](https://github.com/code-423n4/2021-12-sublime-findings/issues/41#issuecomment-1018063038):**\n > Based on the review of the warden I believe this is a valid attack path.  This line would need to change to the amount of tokens that are to be \"stolen\" but otherwise this does seem accurate. \n> \n```solidity\nbal = IERC20(token).balanceOf(msg.sender);\n```\n\n\n\n## [[H-09] `PriceOracle` Does Not Filter Price Feed Outliers](https://github.com/code-423n4/2021-12-sublime-findings/issues/51)\n_Submitted by leastwood_\n\n#### Impact\n\nIf for whatever reason the Chainlink oracle returns a malformed price due to oracle manipulation or a malfunctioned price, the result will be passed onto users, causing unintended consequences as a result.\n\nIn the same time it's possible to construct mitigation mechanics for such cases, so user economics be affected by sustainable price movements only. As price outrages provide a substantial attack surface for the project it's worth adding some complexity to the implementation.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/PriceOracle.sol#L149-L161>\n```solidity\nfunction getLatestPrice(address num, address den) external view override returns (uint256, uint256) {\n    uint256 _price;\n    uint256 _decimals;\n    (_price, _decimals) = getChainlinkLatestPrice(num, den);\n    if (_decimals != 0) {\n        return (_price, _decimals);\n    }\n    (_price, _decimals) = getUniswapLatestPrice(num, den);\n    if (_decimals != 0) {\n        return (_price, _decimals);\n    }\n    revert(\"PriceOracle::getLatestPrice - Price Feed doesn't exist\");\n}\n```\nThe above code outlines how prices are utilised regardless of their actual value (assuming it is always a non-zero value).\n\n#### Recommended Mitigation Steps\n\nConsider querying both the Chainlink oracle and Uniswap pool for latest prices, ensuring that these two values are within some upper/lower bounds of each other. It may also be useful to track historic values and ensure that there are no sharp changes in price. However, the first option provides a level of simplicity as UniswapV3's TWAP implementation is incredibly resistant to flash loan attacks. Hence, the main issue to address is a malfunctioning Chainlink oracle.\n\n**[ritik99 (Sublime) disputed](https://github.com/code-423n4/2021-12-sublime-findings/issues/51#issuecomment-1007996594):**\n > The described suggestion is fairly complex - besides the increase in code complexity, we'd also have to decide the bounds within which the Uniswap and Chainlink oracles should report prices that won't be trivial. We've also noted in the [assumptions](https://github.com/code-423n4/2021-12-sublime#assumptions--design-choices) section of our contest repo that oracles are assumed to be accurate\n\n**[0xean (judge) commented](https://github.com/code-423n4/2021-12-sublime-findings/issues/51#issuecomment-1018064762):**\n > \" We expect these feeds to be fairly reliable.\" - Based on this quote, I am going to leave this open at the current risk level.  These are valid changes that could significantly reduce the risk of the implementation and unintended liquidations. \n> \n> Fairly reliable != 100% reliable\n> \n\n\n## [[H-10] Wrong implementation of `NoYield.sol#emergencyWithdraw()`](https://github.com/code-423n4/2021-12-sublime-findings/issues/115)\n_Submitted by WatchPug, also found by 0x1f8b_\n\n<https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L78-L83>\n\n```solidity\nfunction emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {\n    require(_wallet != address(0), 'cant burn');\n    uint256 amount = IERC20(_asset).balanceOf(address(this));\n    IERC20(_asset).safeTransfer(_wallet, received);\n    received = amount;\n}\n```\n\n`received` is not being assigned prior to L81, therefore, at L81, `received` is `0`.\n\nAs a result, the `emergencyWithdraw()` does not work, in essence.\n\n##### Recommendation\n\nChange to:\n\n```solidity\nfunction emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {\n    require(_wallet != address(0), 'cant burn');\n    received = IERC20(_asset).balanceOf(address(this));\n    IERC20(_asset).safeTransfer(_wallet, received);\n}\n```\n\n**[ritik99 (Sublime) confirmed](https://github.com/code-423n4/2021-12-sublime-findings/issues/115)** \n\n**[0xean (judge) commented](https://github.com/code-423n4/2021-12-sublime-findings/issues/115#issuecomment-1018669684):**\n > upgrading to High  sev based on assets being \"lost\" directly.  IE the emergency function will not work.\n> \n> `\n> 3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).\n> `\n\n\n\n## [[H-11] Unable To Call `emergencyWithdraw` ETH in `NoYield` Contract](https://github.com/code-423n4/2021-12-sublime-findings/issues/52)\n_Submitted by leastwood_\n\n#### Impact\n\nThe `emergencyWithdraw` function is implemented in all yield sources to allow the `onlyOwner` role to drain the contract's balance in case of emergency. The contract considers ETH as a zero address asset. However, there is a call made on `_asset` which will revert if it is the zero address. As a result, ETH tokens can never be withdrawn from the `NoYield` contract in the event of an emergency.\n\n#### Proof of Concept\n\nConsider the case where `_asset == address(0)`. An external call is made to check the contract's token balance for the target `_asset`. However, this call will revert as `_asset` is the zero address. As a result, the `onlyOwner` role will never be able to withdraw ETH tokens during an emergency.\n```solidity\nfunction emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {\n    require(_wallet != address(0), 'cant burn');\n    uint256 amount = IERC20(_asset).balanceOf(address(this));\n    IERC20(_asset).safeTransfer(_wallet, received);\n    received = amount;\n}\n```\nAffected function as per below:\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/yield/NoYield.sol#L78-L83>\n\n#### Recommended Mitigation Steps\n\nConsider handling the case where `_asset` is the zero address, i.e. the asset to be withdrawn under emergency is the ETH token.\n\n**[ritik99 (Sublime) confirmed](https://github.com/code-423n4/2021-12-sublime-findings/issues/52)**\n**[0xean (judge) commented](https://github.com/code-423n4/2021-12-sublime-findings/issues/52#issuecomment-1018680972):**\n > Upgrading to Sev 3 in line with #4  / #115 as this results in funds being stuck in the contract. \n\n\n\n \n# Medium Risk Findings (8)\n## [[M-01] Ether can be locked in the `PoolFactory` contract without a way to retrieve it](https://github.com/code-423n4/2021-12-sublime-findings/issues/168)\n_Submitted by broccolirob_\n\nIf a borrower calls the `createPool` function with a non-zero value, but also includes an ERC20 token address for `_collateralToken`, then the Ether value sent will be locked in the `PoolFactory` contract forever.\n\n*   [createPool L260-317](https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/Pool/PoolFactory.sol#L260-L317)\n\nIn the `_createPool` function, a `_collateralToken` address other than the zero address will set the `amount` variable to zero. That `amount` variable will be passed to `create2` which will send 0 wei to the newly created `Pool` contract.\n\n```solidity\n// _createPool L349\nuint256 amount = _collateralToken == address(0) ? _collateralAmount : 0;\n```\n\n#### Impact\n\nA borrower can accidentally lock Ether in the `PoolFactory` without the ability to retrieve it.\n\n#### Proof of Concept\n\nA borrower reuses a script they made to create a pool and deposit collateral. They intend to deposit Ether as collateral so they send value with the transaction, but forget to change the `_collateralToken` address to address(0). The `Pool` contract will be deployed using the `_collateralToken`, and will lock the Ether sent in the `PoolFactory`\n\n#### Tools Used\n\nManual analysis and Hardhat.\n\n#### Recommended Mitigation Steps\n\nIf msg.value is greater than 0, make sure the `_collateralToken` address is set to address(0).\n\n\n**[ritik99 (Sublime) disputed and disagreed with severity](https://github.com/code-423n4/2021-12-sublime-findings/issues/168#issuecomment-1001018859):**\n > We will add this check but the scenario laid out is more about sanity checks on the side of the end-user. Assets are not stolen or compromised directly but because of user error. Such cases are better handled via UI/UX. We would suggest a (1) Low rating given the likelihood\n\n**[0xean (judge) commented](https://github.com/code-423n4/2021-12-sublime-findings/issues/168#issuecomment-1018049928):**\n > Marking down to medium risk based on the c4 documentation and some external requirements on how this would have to occur. \n> \n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n\n\n## [[M-02] CreditLine.liquidate doesn't transfer borrowed ETH to a lender](https://github.com/code-423n4/2021-12-sublime-findings/issues/90)\n_Submitted by hyh, also found by 0x0x0x_\n\n#### Impact\n\nFunds that are acquired from a liquidator and should be sent to a lender are left with the contract instead. The funds aren't lost, but after the fact mitigation will require manual accounting and fund transfer for each CreditLine.liquidate usage.\n\n#### Proof of Concept\n\nETH sent to CreditLine.liquidate by an external liquidator when `autoLiquidation` is enabled remain with the contract and aren't transferred to the lender:\n<https://github.com/code-423n4/2021-12-sublime/blob/main/contracts/CreditLine/CreditLine.sol#L1015>\n\n#### Recommended Mitigation Steps\n\nAdd transfer to a lender for ETH case:\n\nNow:\n```solidity\n\nif (_borrowAsset == address(0)) {\n        uint256 _returnETH = msg.value.sub(_borrowTokens, 'Insufficient ETH to liquidate');\n        if (_returnETH != 0) {\n                (bool success, ) = msg.sender.call{value: _returnETH}('');\n                require(success, 'Transfer fail');\n        }\n}\n```\nTo be:\n```solidity\n\nif (_borrowAsset == address(0)) {\n        uint256 _returnETH = msg.value.sub(_borrowTokens, 'Insufficient ETH to liquidate');\n        \n        (bool success, ) = _lender.call{value: _borrowTokens}('');\n        require(success, 'liquidate: Transfer failed');\n        \n        if (_returnETH != 0) {\n                (success, ) = msg.sender.call{value: _returnETH}('');\n                require(success, 'liquidate: Return transfer failed');\n        }\n}\n```\n**[ritik99 (Sublime) confirmed](https://github.com/code-423n4/2021-12-sublime-findings/issues/90)**\n\n\n## [[M-03] Collateral can be deposited in a finished pool](https://github.com/code-423n4/2021-12-sublime-findings/issues/169)\n_Submitted by pedroais_\n\n#### Proof of Concept\n\nThe depositCollateral function doesn't check the status of the pool so collateral can be deposited in a finished loan. This can happen by mistake and all funds will be lost.\n\n<https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/Pool/Pool.sol#L207>\n\n#### Recommended Mitigation Steps\n\nRequire loan status to be collection or active in the depositCollateral function.\n\n**[ritik99 (Sublime) disagreed with severity](https://github.com/code-423n4/2021-12-sublime-findings/issues/169#issuecomment-1001019540):**\n > We will add a check for this. The issue however stems from user error. Sending assets to an address without proper checks does not constitute an attack path imo. We would suggest a rating of (1) Low or (0) non-critical given the low likelihood and the impact of the attack (only the user making the incorrect transaction is affected)\n\n**[0xean (judge) commented](https://github.com/code-423n4/2021-12-sublime-findings/issues/169#issuecomment-1018679575):**\n > `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n> \n> This definitely qualifies as \"external requirements\" and a simple check would assist in avoid it.\n\n\n## [[M-04] Unlinked address can link immediately again](https://github.com/code-423n4/2021-12-sublime-findings/issues/54)\n_Submitted by gpersoon_\n\n#### Impact\n\nAfter a master calls unlinkAddress() to unlink an address, the address that has just been unlinked can directly link again without permission.\nThe address that is just unlinked can call linkAddress(masterAddress) which will execute because pendingLinkAddresses is still set.\nAssuming the master has unlinked for a good reason it is unwanted to be able to be linked again without any permission from the master.\n\nNote: a master can prevent this by calling cancelAddressLinkingRequest(), but this doesn't seem logical to do\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2021-12-sublime/blob/e688bd6cd3df7fefa3be092529b4e2d013219625/contracts/Verification/Verification.sol#L129-L154>\n\n```solidity\n    function unlinkAddress(address _linkedAddress) external {\n        address _linkedTo = linkedAddresses[_linkedAddress].masterAddress;\n        require(_linkedTo != address(0), 'V:UA-Address not linked');\n        require(_linkedTo == msg.sender, 'V:UA-Not linked to sender');\n        delete linkedAddresses[_linkedAddress]; \n       ...\n}\n    function linkAddress(address _masterAddress) external {\n        require(linkedAddresses[msg.sender].masterAddress == address(0), 'V:LA-Address already linked');   // == true (after unlinkAddress)\n        require(pendingLinkAddresses[msg.sender][_masterAddress], 'V:LA-No pending request');                 // == true (after unlinkAddress)\n        _linkAddress(msg.sender, _masterAddress);                                                                                           // // pendingLinkAddresses not reset\n    }\n\nfunction cancelAddressLinkingRequest(address _linkedAddress) external {\n        ... \n        delete pendingLinkAddresses[_linkedAddress][msg.sender]; // only location where pendingLinkAddresses is reset\n```\n\n#### Recommended Mitigation Steps\n\nAdd something like to following at the end of linkAddress:\n\n```solidity\ndelete pendingLinkAddresses[msg.sender][_masterAddress]; \n```\n\n**[ritik99 (Sublime) confirmed](https://github.com/code-423n4/2021-12-sublime-findings/issues/54)**\n\n## [[M-05] Extension voting threshold check needs to rerun on each transfer](https://github.com/code-423n4/2021-12-sublime-findings/issues/141)\n_Submitted by cmichel_\n\nThe `Extension` contract correctly reduces votes from the `from` address of a transfer and adds it to the `to` address of the transfer (in case both of them voted on it before), but it does not rerun the voting logic in `voteOnExtension` that actually grants the extension.\nThis leads to issues where an extension should be granted but is not:\n\n###### POC\n\n*   `to` address has 100 tokens and votes for the extension\n*   `from` address has 100 tokens but does not vote for the extension and transfers the 100 tokens to `to`\n*   `to` now has 200 tokens, `removeVotes` is run, the `totalExtensionSupport` is increased by 100 to 200. In theory, the threshold is reached and the vote should pass if `to` could call `voteOnExtension` again.\n*   But their call to `voteOnExtension` with the new balance will fail as they already voted on it (`lastVotedExtension == _extensionVoteEndTime`). The extension is not granted.\n\n#### Impact\n\nExtensions that should be granted after a token transfer are not granted.\n\n#### Recommended Mitigation Steps\n\nRerun the threshold logic in `removeVotes` as it has the potential to increase the total support if `to` voted for the extension but `from` did not.\n\n**[ritik99 (Sublime) confirmed](https://github.com/code-423n4/2021-12-sublime-findings/issues/141)**\n\n\n## [[M-06] `NoYield.sol` Tokens with fee on transfer are not supported](https://github.com/code-423n4/2021-12-sublime-findings/issues/142)\n_Submitted by WatchPug_\n\n\nThere are ERC20 tokens that charge fee for every `transfer()` or `transferFrom()`.\n\nIn the current implementation, `NoYield.sol#lockTokens()` assumes that the received amount is the same as the transfer amount, and uses it to calculate `sharesReceived` amounts.\n\nAs a result, in `unlockTokens()`, later users may not be able to successfully withdraw their tokens, as it may revert at L141 for insufficient balance.\n\n<https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L93-L106>\n\n```solidity\nfunction lockTokens(\n    address user,\n    address asset,\n    uint256 amount\n) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {\n    require(amount != 0, 'Invest: amount');\n    if (asset != address(0)) {\n        IERC20(asset).safeTransferFrom(user, address(this), amount);\n    } else {\n        require(msg.value == amount, 'Invest: ETH amount');\n    }\n    sharesReceived = amount;\n    emit LockedTokens(user, asset, sharesReceived);\n}\n```\n\n<https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/NoYield.sol#L134-L144>\n\n```solidity\nfunction _unlockTokens(address asset, uint256 amount) internal returns (uint256 received) {\n    require(amount != 0, 'Invest: amount');\n    received = amount;\n    if (asset == address(0)) {\n        (bool success, ) = savingsAccount.call{value: received}('');\n        require(success, 'Transfer failed');\n    } else {\n        IERC20(asset).safeTransfer(savingsAccount, received);\n    }\n    emit UnlockedTokens(asset, received);\n}\n```\n\n##### Recommendation\n\nConsider comparing before and after balance to get the actual transferred amount.\n\n**[ritik99 (Sublime) acknowledged and disagreed with severity](https://github.com/code-423n4/2021-12-sublime-findings/issues/142)**\n\n\n## [[M-07] AaveYield: Misspelled external function name making functions fail](https://github.com/code-423n4/2021-12-sublime-findings/issues/42)\n_Submitted by 0xngndev_\n\n#### Impact\n\nIn `AaveYield.sol` the functions:\n\n*   `liquidityToken`\n*   `_withdrawETH`\n*   `_depositETH`\n\nMake a conditional call to `IWETHGateway(wethGateway).getAWETHAddress()`\n\nThis function does not exist in the `wethGateway` contract, causing these function to fail with the error `\"Fallback not allowed\"`.\n\nThe function they should be calling is `getWethAddress()` without the \"A\".\n\nSmall yet dangerous typo.\n\n##### Mitigation Steps\n\nSimply modify:\n\n`IWETHGateway(wethGateway).getAWETHAddress()`\n\nto:\n\n`IWETHGateway(wethGateway).getWETHAddress()`\n\nIn the functions mentioned above.\n\n**[ritik99 (Sublime) confirmed](https://github.com/code-423n4/2021-12-sublime-findings/issues/42#issuecomment-1001348407):**\n > We were using an older version of the contracts that had [this definition](https://etherscan.io/address/dcd33426ba191383f1c9b431a342498fdac73488#code#F1#L158), will be updated accordingly\n\n\n## [[M-08] Missing approve(0)](https://github.com/code-423n4/2021-12-sublime-findings/issues/97)\n_Submitted by sirhashalot, also found by Jujic, and sirhashalot_\n\n#### Impact\n\nThere are 3 instances where the `IERC20.approve()` function is called only once without setting the allowance to zero. Some tokens, like USDT, require first reducing the address' allowance to zero by calling `approve(_spender, 0)`. Transactions will revert when using an unsupported token like USDT (see the `approve()` function requirement [at line 199](https://etherscan.io/address/0xdac17f958d2ee523a2206206994597c13d831ec7#code)).\n\n#### Proof of Concept\n\n*   [CreditLine/CreditLine.sol:647](https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L647)\n*   [CreditLine/CreditLine.sol:779](https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/CreditLine/CreditLine.sol#L779)\n*   [yield/AaveYield.sol:324](https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/AaveYield.sol#L324)\n\nNote: the usage of `approve()` in yield/CompoundYield.sol ([lines 211-212](https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/CompoundYield.sol#L211-L212)), in yield/YearnYield.sol ([lines 211-212](https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/YearnYield.sol#L210-L211)), and in yield/AaveYield.sol ([lines 297-298](https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/AaveYield.sol#L297-L298)) do not need modification since it they already use the recommended approach. Additionally the usage of `approve()` in [yield/AaveYield.sol:307](https://github.com/code-423n4/2021-12-sublime/blob/9df1b7c4247f8631647c7627a8da9bdc16db8b11/contracts/yield/AaveYield.sol#L307) likely does not need modification since that approve function only handles ETH.\n\n#### Recommended Mitigation Steps\n\nUse `approve(_spender, 0)` to set the allowance to zero immediately before each of the existing `approve()` calls.\n\n**[ritik99 (Sublime) confirmed](https://github.com/code-423n4/2021-12-sublime-findings/issues/97)**\n**[0xean (judge) commented](https://github.com/code-423n4/2021-12-sublime-findings/issues/97#issuecomment-1018865958):**\n > moving to medium risk as the availability of the protocol is affected. \n> \n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n# Low Risk Findings (24)\n- [[L-01] Wrong usage of `OracleLibrary.getQuoteAtTick()` breaks `PriceOracle.sol`](https://github.com/code-423n4/2021-12-sublime-findings/issues/114) _Submitted by WatchPug_\n- [[L-02] Deprecated safeApprove() function](https://github.com/code-423n4/2021-12-sublime-findings/issues/2) _Submitted by sirhashalot, also found by robee, WatchPug, and 0x1f8b_\n- [[L-03] `initializer` functions can be front run](https://github.com/code-423n4/2021-12-sublime-findings/issues/106) _Submitted by WatchPug, also found by cmichel, robee, and leastwood_\n- [[L-04] CreditLine.liquidate allows for price manipulated liquidation](https://github.com/code-423n4/2021-12-sublime-findings/issues/94) _Submitted by hyh_\n- [[L-06] PoolFactory and CreditLine updateSavingsAccount will break the system in production as savings account hold current user records](https://github.com/code-423n4/2021-12-sublime-findings/issues/53) _Submitted by hyh_\n- [[L-07] Extension voting power can be flashloaned](https://github.com/code-423n4/2021-12-sublime-findings/issues/140) _Submitted by cmichel_\n- [[L-08] Pool direct savingsaccount deposits fail when no strategy set](https://github.com/code-423n4/2021-12-sublime-findings/issues/138) _Submitted by cmichel_\n- [[L-09] Self-transfer leads to wrong withdrawable repayments](https://github.com/code-423n4/2021-12-sublime-findings/issues/146) _Submitted by cmichel, also found by gpersoon_\n- [[L-10] Collateral deposit does not support fee-on-transfer tokens](https://github.com/code-423n4/2021-12-sublime-findings/issues/143) _Submitted by cmichel_\n- [[L-11] calculateInterest() comments missing input parameter](https://github.com/code-423n4/2021-12-sublime-findings/issues/87) _Submitted by sirhashalot_\n- [[L-12] `delete` doesn’t delete mapping in struct](https://github.com/code-423n4/2021-12-sublime-findings/issues/83) _Submitted by sirhashalot_\n- [[L-13] Two Steps Verification before Transferring Ownership](https://github.com/code-423n4/2021-12-sublime-findings/issues/95) _Submitted by robee_\n- [[L-14] Overflow in _repay()](https://github.com/code-423n4/2021-12-sublime-findings/issues/58) _Submitted by gpersoon_\n- [[L-15] transferTokens should use _from instead of msg.sender](https://github.com/code-423n4/2021-12-sublime-findings/issues/57) _Submitted by gpersoon_\n- [[L-16] Missing timelock for critical contract setters of privileged roles (Price Oracles)](https://github.com/code-423n4/2021-12-sublime-findings/issues/103) _Submitted by defsec_\n- [[L-17] `unlockShares` wrong comment](https://github.com/code-423n4/2021-12-sublime-findings/issues/135) _Submitted by cmichel_\n- [[L-18] `Pool.sol` should use the Upgradeable variant of OpenZeppelin Contracts](https://github.com/code-423n4/2021-12-sublime-findings/issues/108) _Submitted by WatchPug_\n- [[L-19] CreditLine.borrow accepts ETH transfers](https://github.com/code-423n4/2021-12-sublime-findings/issues/78) _Submitted by TomFrenchBlockchain_\n- [[L-20] Contracts allow sending ETH on calls which does not expect it](https://github.com/code-423n4/2021-12-sublime-findings/issues/71) _Submitted by TomFrenchBlockchain, also found by pmerkleplant_\n- [[L-21] `poolSizeLimit` does not account for differing unit values between borrow assets](https://github.com/code-423n4/2021-12-sublime-findings/issues/68) _Submitted by TomFrenchBlockchain_\n- [[L-22] Unnecessary receive()](https://github.com/code-423n4/2021-12-sublime-findings/issues/99) _Submitted by Jujic_\n- [[L-23] Improper Validation Of Chainlink's `latestRoundData` Function](https://github.com/code-423n4/2021-12-sublime-findings/issues/50) _Submitted by leastwood, also found by Jujic_\n- [[L-24] Natspec not matching function's logic](https://github.com/code-423n4/2021-12-sublime-findings/issues/48) _Submitted by 0xngndev_\n- [[L-05] Lack Of Precision](https://github.com/code-423n4/2021-12-sublime-findings/issues/26) _Submitted by robee_\n\n# Non-Critical Findings (18)\n- [[N-01] Named return issue](https://github.com/code-423n4/2021-12-sublime-findings/issues/38) _Submitted by robee_\n- [[N-02] Event missing when removing a vote in extensions](https://github.com/code-423n4/2021-12-sublime-findings/issues/170) _Submitted by pedroais_\n- [[N-03] Repayments._transferTokens doesn't check msg.value in ETH case](https://github.com/code-423n4/2021-12-sublime-findings/issues/61) _Submitted by hyh_\n- [[N-04] approve return values not checked](https://github.com/code-423n4/2021-12-sublime-findings/issues/136) _Submitted by cmichel_\n- [[N-05] missing nonreentrant modfier](https://github.com/code-423n4/2021-12-sublime-findings/issues/166) _Submitted by certora_\n- [[N-06] `SavingsAccount.sol` Wrong `amount` in `Transfer` events](https://github.com/code-423n4/2021-12-sublime-findings/issues/130) _Submitted by WatchPug_\n- [[N-07] `getInterestOverdue` reverts rather than returning 0 when there is no overdue interest](https://github.com/code-423n4/2021-12-sublime-findings/issues/74) _Submitted by TomFrenchBlockchain_\n- [[N-08] No validation of protocol fee fraction](https://github.com/code-423n4/2021-12-sublime-findings/issues/84) _Submitted by sirhashalot, also found by cmichel_\n- [[N-09] Not verified function inputs of public / external functions](https://github.com/code-423n4/2021-12-sublime-findings/issues/30) _Submitted by robee, also found by 0x1f8b, and WatchPug_\n- [[N-10] CreditLine.sol assumes 365 day year](https://github.com/code-423n4/2021-12-sublime-findings/issues/86) _Submitted by sirhashalot_\n- [[N-11] Comments inconsistency for _id](https://github.com/code-423n4/2021-12-sublime-findings/issues/85) _Submitted by sirhashalot_\n- [[N-12] Magic number 30 could be a constant](https://github.com/code-423n4/2021-12-sublime-findings/issues/82) _Submitted by sirhashalot_\n- [[N-13] Change state mutability in NoYield.sol](https://github.com/code-423n4/2021-12-sublime-findings/issues/165) _Submitted by p4st13r4_\n- [[N-14] Best Practice: Contract file name should follow coding conventions](https://github.com/code-423n4/2021-12-sublime-findings/issues/105) _Submitted by WatchPug_\n- [[N-15] `idealCollateralRatio` is confusingly named](https://github.com/code-423n4/2021-12-sublime-findings/issues/79) _Submitted by TomFrenchBlockchain_\n- [[N-16] Argument order for SavingsAccount approval functions is odd](https://github.com/code-423n4/2021-12-sublime-findings/issues/76) _Submitted by TomFrenchBlockchain_\n- [[N-17] Duplicated code in Yield contracts](https://github.com/code-423n4/2021-12-sublime-findings/issues/69) _Submitted by TomFrenchBlockchain_\n- [[N-18] Typo in liquidateCancelPenalty natspec](https://github.com/code-423n4/2021-12-sublime-findings/issues/67) _Submitted by TomFrenchBlockchain_\n\n# Gas Optimizations (32)\n- [[G-01] Gas: Upgrading solc version and removing SafeMath](https://github.com/code-423n4/2021-12-sublime-findings/issues/39) _Submitted by 0xngndev, also found by WatchPug, 0x0x0x, Jujic, and defsec_\n- [[G-02] Fix Unused Variables and Function Parameters](https://github.com/code-423n4/2021-12-sublime-findings/issues/46) _Submitted by 0xngndev, also found by p4st13r4_\n- [[G-03] Unnecessary uint zero initialization](https://github.com/code-423n4/2021-12-sublime-findings/issues/36) _Submitted by sirhashalot, also found by 0x0x0x, WatchPug, cmichel, pmerkleplant, and robee_\n- [[G-04] Prefix increments are cheaper than postfix increments](https://github.com/code-423n4/2021-12-sublime-findings/issues/22) _Submitted by robee, also found by 0x0x0x and WatchPug_\n- [[G-05] Unnecessary Reentrancy Guards](https://github.com/code-423n4/2021-12-sublime-findings/issues/18) _Submitted by robee_\n- [[G-06] Remove unused local variables](https://github.com/code-423n4/2021-12-sublime-findings/issues/119) _Submitted by pmerkleplant_\n- [[G-07] Gas Optimization: Struct layout](https://github.com/code-423n4/2021-12-sublime-findings/issues/129) _Submitted by gzeon_\n- [[G-08] Use of _msgSender()](https://github.com/code-423n4/2021-12-sublime-findings/issues/102) _Submitted by defsec_\n- [[G-09] Gas: Use `else if` in `withdrawLiquidity`](https://github.com/code-423n4/2021-12-sublime-findings/issues/148) _Submitted by cmichel_\n- [[G-10] `AaveYield.getTokensForShares()`, `AaveYield.getSharesForTokens()` Implementation can be simpler and save some gas](https://github.com/code-423n4/2021-12-sublime-findings/issues/128) _Submitted by WatchPug_\n- [[G-11] `Pool.sol#withdrawBorrowedAmount()` Validation of pool status can be done earlier to save gas](https://github.com/code-423n4/2021-12-sublime-findings/issues/127) _Submitted by WatchPug_\n- [[G-12] `10**30` can be changed to `1e30` and save some gas](https://github.com/code-423n4/2021-12-sublime-findings/issues/126) _Submitted by WatchPug_\n- [[G-13] Inline unnecessary function can make the code simpler and save some gas](https://github.com/code-423n4/2021-12-sublime-findings/issues/124) _Submitted by WatchPug_\n- [[G-14] Cache storage variables in the stack can save gas](https://github.com/code-423n4/2021-12-sublime-findings/issues/117) _Submitted by WatchPug_\n- [[G-15] Remove unnecessary variables can make the code simpler and save some gas](https://github.com/code-423n4/2021-12-sublime-findings/issues/112) _Submitted by WatchPug_\n- [[G-16] LinkedAddress struct can be packed to save an SSTORE](https://github.com/code-423n4/2021-12-sublime-findings/issues/72) _Submitted by TomFrenchBlockchain_\n- [[G-17] Unnecessary zero approvals in yield contracts](https://github.com/code-423n4/2021-12-sublime-findings/issues/70) _Submitted by TomFrenchBlockchain_\n- [[G-18] Check on `poolConstants.loanWithdrawalDeadline` for liquidation is unnecessary](https://github.com/code-423n4/2021-12-sublime-findings/issues/66) _Submitted by TomFrenchBlockchain_\n- [[G-19] Flattening nested mappings can save gas](https://github.com/code-423n4/2021-12-sublime-findings/issues/59) _Submitted by TomFrenchBlockchain_\n- [[G-20] Use one require instead of several](https://github.com/code-423n4/2021-12-sublime-findings/issues/93) _Submitted by Jujic_\n- [[G-21] Redundant use safeMath](https://github.com/code-423n4/2021-12-sublime-findings/issues/92) _Submitted by Jujic, also found by WatchPug_\n- [[G-22] Reduce length of require error messages to save in deployment costs](https://github.com/code-423n4/2021-12-sublime-findings/issues/47) _Submitted by 0xngndev, also found by Jujic, WatchPug, robee, and sirhashalot_\n- [[G-23] Gas: Inlining logic that's used only once in the contract](https://github.com/code-423n4/2021-12-sublime-findings/issues/40) _Submitted by 0xngndev_\n- [[G-24] Gas saving using delete](https://github.com/code-423n4/2021-12-sublime-findings/issues/7) _Submitted by 0x1f8b_\n- [[G-25] Gas saving removing safe math](https://github.com/code-423n4/2021-12-sublime-findings/issues/6) _Submitted by 0x1f8b_\n- [[G-26] Gas saving by duplicate check](https://github.com/code-423n4/2021-12-sublime-findings/issues/5) _Submitted by 0x1f8b_\n- [[G-27] Gas optimization](https://github.com/code-423n4/2021-12-sublime-findings/issues/34) _Submitted by 0x1f8b_\n- [[G-28] Gas saving by struct reorganization](https://github.com/code-423n4/2021-12-sublime-findings/issues/14) _Submitted by 0x1f8b, also found by TomFrenchBlockchain_\n- [[G-29] Not needed zero address check](https://github.com/code-423n4/2021-12-sublime-findings/issues/160) _Submitted by 0x0x0x_\n- [[G-30] Loops can be implemented more efficiently](https://github.com/code-423n4/2021-12-sublime-findings/issues/157) _Submitted by 0x0x0x, also found by WatchPug, pmerkleplant, and robee_\n- [[G-31] Unnecessary array boundaries check when loading an array element twice](https://github.com/code-423n4/2021-12-sublime-findings/issues/21) _Submitted by robee, also found by pmerkleplant_\n- [[G-32] Credit Line acceptance logic can be simplified to avoid SLOAD in some cases](https://github.com/code-423n4/2021-12-sublime-findings/issues/77) _Submitted by TomFrenchBlockchain, also found by WatchPug_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}