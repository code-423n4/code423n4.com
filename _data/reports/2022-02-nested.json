{
  "circa": {
    "title": "Nested Finance contest",
    "sponsor": "Nested Finance",
    "slug": "2022-02-nested",
    "date": "2022-04-27",
    "findings": "https://github.com/code-423n4/2022-02-nested-findings/issues",
    "contest": 86
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Nested Finance smart contract system written in Solidity. The audit contest took place between February 10—February 12 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>26 Wardens contributed reports to the Nested Finance contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/0xliumin\">0xliumin</a></li>\n<li>GreyArt (<a href=\"https://twitter.com/HickupH\">hickuphh3</a> and <a href=\"https://twitter.com/itsmeSTYJ\">itsmeSTYJ</a>)</li>\n<li>0x1f8b</li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/KenzoAgada\">kenzo</a></li>\n<li><a href=\"https://twitter.com/JustDravee\">Dravee</a></li>\n<li>robee</li>\n<li>IllIllI</li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li>hyh</li>\n<li><a href=\"https://twitter.com/omikomikomik\">Omik</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/VladToie/\">bobi</a></li>\n<li><a href=\"https://www.instagram.com/riyan_rfa/\">rfa</a></li>\n<li>ShippooorDAO</li>\n<li>samruna</li>\n<li><a href=\"https://twitter.com/meidhiwirara\">Tomio</a></li>\n<li>kenta</li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li>m_smirnova2020</li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/SirH4shalot\">sirhashalot</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://github.com/harleythedogC4\">harleythedog</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded 5 unique MEDIUM severity vulnerabilities. Additionally, the analysis included 15 reports detailing issues with a risk rating of LOW severity or non-critical as well as 19 reports recommending gas optimizations. All of the issues presented here are linked back to their original finding.</p>\n<p>Notably, 0 vulnerabilities were found during this audit contest that received a risk rating in the category of HIGH severity.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-02-nested\">C4 Nested Finance contest repository</a>, and is composed of 10 smart contracts written in the Solidity programming language and includes 974 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"medium-risk-findings-5\" style=\"position:relative;\"><a href=\"#medium-risk-findings-5\" aria-label=\"medium risk findings 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (5)</h1>\n<h2 id=\"m-01-destroy-can-avoid-the-bulk-of-fees\" style=\"position:relative;\"><a href=\"#m-01-destroy-can-avoid-the-bulk-of-fees\" aria-label=\"m 01 destroy can avoid the bulk of fees permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/27\">[M-01] Destroy can avoid the bulk of fees</a></h2>\n<p><em>Submitted by 0xliumin</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-02-nested/blob/69cf51d8e4eeb8bce3025db7f4f74cc565c9fad3/contracts/NestedFactory.sol#L446\">NestedFactory.sol#L446</a><br></p>\n<p>A user can destroy their NFTs and not pay fees on most of their assets.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Alice has an NFT portfolio with 100 gwei dai and 100 gwei uni. Alice calls destroy on this NFT with buy token marked as dai. We would expect after this destroy step that she would pay 1 gwei dai in fees + 1 gwei uni worth of dai in fees, no matter what orders she selects.</p>\n<p>Alice selects the following orders:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">[{ operator: ZeroEx, token: uni, calldata: performSwap with a very small amount of uni for dai}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> { operator: Flat, token: dai, calldata: transfer a very small amount dai for dai}]</span></span></code></pre>\n<p>This set of orders doesn’t violate any of the require statements in the destroy function. Each order will complete successfully given the constraints here: <a href=\"https://github.com/code-423n4/2022-02-nested/blob/69cf51d8e4eeb8bce3025db7f4f74cc565c9fad3/contracts/abstracts/MixinOperatorResolver.sol#L100-L101\">MixinOperatorResolver.sol#L100-L101</a>.<br></p>\n<p>Fees aren’t collected on the leftover amount from the callOperator step, seen here: <a href=\"https://github.com/code-423n4/2022-02-nested/blob/69cf51d8e4eeb8bce3025db7f4f74cc565c9fad3/contracts/NestedFactory.sol#L446\">NestedFactory.sol#L446</a>.<br></p>\n<p>This means that Alice will only pay the fees on the dai that was output from the orders (a very small amount), and the rest of the 100 gwei uni and 100 gwei dai are transferred directly back to the attacker.</p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Replace the safeTransfer with your safeTransferWithFees function.\nOr, if you don’t want users to have to pay fees on slippage, set a maximum “slippage” amount in the safeSubmitOrder function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/27#issuecomment-1036097325\">maximebrugel (Nested Finance) confirmed, but disagreed with High severity and commented</a>:</strong></p>\n<blockquote>\n<p>Good one</p>\n<p>PR: <a href=\"https://github.com/NestedFi/nested-core-lego/pull/100\">Med/High Risk Fixes</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/27#issuecomment-1053605608\">harleythedog (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>The warden has described a way to avoid fees even when large amounts are being withdrawn. An avoidance of fees more closely fits the criteria of a medium severity issue:</p>\n<blockquote>\n<p>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</p>\n</blockquote>\n<p>This is contrary to the previous audit that awarded a fee avoidance finding as high severity (which I disagree with).</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-nestedfactory-does-not-track-operators-properly\" style=\"position:relative;\"><a href=\"#m-02-nestedfactory-does-not-track-operators-properly\" aria-label=\"m 02 nestedfactory does not track operators properly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/38\">[M-02] <code>NestedFactory</code> does not track operators properly</a></h2>\n<p><em>Submitted by IllIllI, also found by 0x1f8b, hyh, and pauliax</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/NestedFactory.sol#L99-L108\">NestedFactory.sol#L99-L108</a><br>\n<a href=\"https://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/abstracts/MixinOperatorResolver.sol#L30-L47\">MixinOperatorResolver.sol#L30-L47</a><br>\n<a href=\"https://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/NestedFactory.sol#L110-L122\">NestedFactory.sol#L110-L122</a><br>\n<a href=\"https://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/abstracts/MixinOperatorResolver.sol#L49-L55\">MixinOperatorResolver.sol#L49-L55</a></p>\n<p><code>NestedFactory</code> extends the <code>MixinOperatorResolver</code> contract which comes from the <a href=\"https://github.com/Synthetixio/synthetix/blob/a1786e5d64b5b51212785ade6d8b42435f69c387/contracts/MixinResolver.sol\"><code>synthetix/MixinResolver.sol</code></a> code base where the expectation is that <code>isResolverCached()</code> returns false until <a href=\"https://github.com/Synthetixio/synthetix/blob/a1786e5d64b5b51212785ade6d8b42435f69c387/test/contracts/MixinResolver.js#L82-L105\"><code>rebuildCache()</code> is called and the cache is fully up to date</a>. Due to <a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/217\">a medium issue</a> identified in a prior contest, the <code>OperatorResolver.importOperators()</code> step was made to be atomically combined with the <code>NestedFactory.rebuildCache()</code> step. However, the atomicity was not applied everywhere and the ability to add/remove operators from the <code>NestedFactory</code> also had other cache-inconsistency issues. There are <em>four separate instances</em> of operator tracking problems in this submission.</p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>As with the prior issue, many core operations (such as <code>NestedFactory.create()</code> and <code>NestedFactory.swapTokenForTokens()</code>) are dependant on the assumption that the <code>operatorCache</code> cache is synced prior to these functions being executed, but this may not necessarily be the case. Unlike the prior issue which was about updates to the resolver not getting reflected in the cache, this issue is about changes to the factory not updating the cache.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<h4 id=\"1-removeoperator-does-not-call-rebuildcache\" style=\"position:relative;\"><a href=\"#1-removeoperator-does-not-call-rebuildcache\" aria-label=\"1 removeoperator does not call rebuildcache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code>removeOperator()</code> does not call <code>rebuildCache()</code></h4>\n<ol>\n<li><code>NestedFactory.removeOperator()</code> is called to remove an operator</li>\n<li>A user calls <code>NestedFactory(MixinOperatorResolver).create()</code> using that operator and succeedes</li>\n<li><code>NestedFactory.rebuildCache()</code> is called to rebuild cache</li>\n</ol>\n<p>This flow is not aware that the cache is not in sync</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @inheritdoc INestedFactory</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addOperator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operator</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">operator</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;NF: INVALID_OPERATOR_NAME&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operatorsCache</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">operatorsCache</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">operatorsCache</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] != </span><span class=\"mtk12\">operator</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NF: EXISTENT_OPERATOR&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">OperatorAdded</span><span class=\"mtk1\">(</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/NestedFactory.sol#L99-L108\">NestedFactory.sol#L99-L108</a></p>\n<h4 id=\"2-using-both-removeoperator-and-rebuildcache-does-not-prevent-create-from-using-the-operator\" style=\"position:relative;\"><a href=\"#2-using-both-removeoperator-and-rebuildcache-does-not-prevent-create-from-using-the-operator\" aria-label=\"2 using both removeoperator and rebuildcache does not prevent create from using the operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Using both <code>removeOperator()</code> and <code>rebuildCache()</code> does not prevent <code>create()</code> from using the operator</h4>\n<p>Even if <code>removeOperator()</code> calls <code>rebuildCache()</code> the function will still not work because <code>resolverOperatorsRequired()</code> only keeps track of remaining operators, and <code>rebuildCache()</code> currently has no way of knowing that an entry was removed from that array and that a corresponding entry from <code>operatorCache</code> needs to be removed too.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice Rebuild the operatorCache</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rebuildCache</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">requiredOperators</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">resolverOperatorsRequired</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IOperatorResolver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Operator</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destination</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// The resolver must call this function whenever it updates its state</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">requiredOperators</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">requiredOperators</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Note: can only be invoked once the resolver has all the targets needed added</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">destination</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">resolver</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getOperator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">name</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">destination</span><span class=\"mtk1\">.</span><span class=\"mtk12\">implementation</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">operatorCache</span><span class=\"mtk1\">[</span><span class=\"mtk12\">name</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">destination</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operatorCache</span><span class=\"mtk1\">[</span><span class=\"mtk12\">name</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CacheUpdated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destination</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/abstracts/MixinOperatorResolver.sol#L30-L47\">MixinOperatorResolver.sol#L30-L47</a></p>\n<h4 id=\"3-addoperator-does-not-call-rebuildcache\" style=\"position:relative;\"><a href=\"#3-addoperator-does-not-call-rebuildcache\" aria-label=\"3 addoperator does not call rebuildcache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <code>addOperator()</code> does not call <code>rebuildCache()</code></h4>\n<ol>\n<li><code>NestedFactory.addOperator()</code> is called to add an operator</li>\n<li>A user calls <code>NestedFactory(MixinOperatorResolver).create()</code> using that operator and fails because the operator wasn’t in the <code>resolverOperatorsRequired()</code> during the last call to <code>rebuildCaches()</code>, so the operator isn’t in <code>operatorCache</code></li>\n<li><code>NestedFactory.rebuildCache()</code> is called to rebuild cache</li>\n</ol>\n<p>This flow is not aware that the cache is not in sync</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @inheritdoc INestedFactory</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">removeOperator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operator</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operatorsLength</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">operatorsLength</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">operators</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] == </span><span class=\"mtk12\">operator</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operatorsLength</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">.</span><span class=\"mtk11\">pop</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">OperatorRemoved</span><span class=\"mtk1\">(</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">revert</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;NF: NON_EXISTENT_OPERATOR&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/NestedFactory.sol#L110-L122\">NestedFactory.sol#L110-L122</a></p>\n<h4 id=\"4-isresolvercached-does-not-reflect-the-actual-updated-or-not-state\" style=\"position:relative;\"><a href=\"#4-isresolvercached-does-not-reflect-the-actual-updated-or-not-state\" aria-label=\"4 isresolvercached does not reflect the actual updated or not state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <code>isResolverCached()</code> does not reflect the actual updated-or-not state</h4>\n<p>This function, like <code>removeOperator()</code> is not able to tell that there is an operator that needs to be removed from <code>resolverCache</code>, causing the owner not to know a call to <code>rebuildCache()</code> is required to ‘remove’ the operator</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice Check the state of operatorCache</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isResolverCached</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">requiredOperators</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">resolverOperatorsRequired</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">IOperatorResolver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Operator</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cacheTmp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">IOperatorResolver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Operator</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actualValue</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">requiredOperators</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/abstracts/MixinOperatorResolver.sol#L49-L55\">MixinOperatorResolver.sol#L49-L55</a></p>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add calls to <code>rebuildCache()</code> in <code>addOperator()</code> and <code>removeOperator()</code>, have <code>INestedFactory</code> also track operators that have been removed with a new array, and have <code>isResolverCached()</code> also check whether this new array is empty or not.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/38#issuecomment-1041944815\">maximebrugel (Nested Finance) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>With this fix => <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/18\">#18</a><br>\nNo need to add an array of removed operators, because we are now removing the operators from the cache at the same time. Only need to call rebuildCache when adding and removing operators.</p>\n<p>PR: <a href=\"https://github.com/NestedFi/nested-core-lego/pull/100\">Med/High Risk Fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-undesired-behavior\" style=\"position:relative;\"><a href=\"#m-03-undesired-behavior\" aria-label=\"m 03 undesired behavior permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/6\">[M-03] Undesired behavior</a></h2>\n<p><em>Submitted by robee, also found by 0x1f8b, csanuragjain, and Dravee</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-02-nested/blob/69cf51d8e4eeb8bce3025db7f4f74cc565c9fad3/contracts/NestedRecords.sol#:~:text=uint256%20amount%20%3D%20records,_nftId%5D.reserve%20%3D%20_reserve%3B\">NestedRecords.sol#L117-L131</a><br></p>\n<p>You push a parameter into an array of tokens without checking if it already exists. And, if at first it’s added with amount 0, it can later on be pushed with a greater amount and be twice in the array. Then in all processing it will consider the first occurrence and therefore the occurrence with amount 0.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">     NestedRecords.store pushed the parameter _token</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/6#issuecomment-1034735686\">maximebrugel (Nested Finance) disagreed with High severity and commented</a>:</strong></p>\n<blockquote>\n<p>Indeed, <code>_amount</code> is not checked and may result in the loss of funds for the user… If we only look at the <code>store</code> function.</p>\n<p><strong>However</strong>, this situation can’t happen because of the `NestedFactory’ (the only one able to call).</p>\n<p>The Factory is calling with this private function : </p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @dev Transfer tokens to the reserve, and compute the amount received to store</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// in the records. We need to know the amount received in case of deflationary tokens.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _token The token to transfer (IERC20)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _amount The amount to send to the reserve</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _nftId The Token ID to store the assets</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_transferToReserveAndStore</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nftId</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserveAddr</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">reserve</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balanceReserveBefore</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">reserveAddr</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Send output to reserve</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">reserveAddr</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balanceReserveAfter</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">reserveAddr</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">nestedRecords</span><span class=\"mtk1\">.</span><span class=\"mtk11\">store</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">), </span><span class=\"mtk12\">balanceReserveAfter</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">balanceReserveBefore</span><span class=\"mtk1\">, </span><span class=\"mtk12\">reserveAddr</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Here, the <code>store</code> amount parameter can be <code>0</code> if : </p>\n<ul>\n<li><code>_amount</code> is equal to 0. Then <code>balanceReserveAfter - balanceReserveBefore</code> = <code>0</code>.</li>\n<li><code>_amount</code> is not equal to 0 but the <code>safeTransfer</code> function is transferring <code>0</code> tokens (100% fees, malicious contract,…).</li>\n</ul>\n<p>We can’t consider the second option, It is an external cause and we are not able to manage the exotic behaviors of ERC20s.\nSo, when the <code>_amount</code> parameter of this function can be equal to <code>0</code> ?</p>\n<p>=> In <code>submitOutOrders</code> : </p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">amountBought</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_batchedOrders</span><span class=\"mtk1\">.</span><span class=\"mtk12\">outputToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(...)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">amountBought</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_batchedOrders</span><span class=\"mtk1\">.</span><span class=\"mtk12\">outputToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) - </span><span class=\"mtk12\">amountBought</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amountBought</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">100</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// 1% Fee</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_toReserve</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_transferToReserveAndStore</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_batchedOrders</span><span class=\"mtk1\">.</span><span class=\"mtk12\">outputToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountBought</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong>But the <code>ZeroExOperator</code> or <code>FlatOperator</code> will revert if the amount bought is <code>0</code>.</strong></p>\n<p>=> In <code>_submitOrder</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">callOperator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_order</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_outputToken</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NF: OPERATOR_CALL_FAILED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_toReserve</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_transferToReserveAndStore</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_outputToken</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">], </span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong>Same,  the <code>ZeroExOperator</code> or <code>FlatOperator</code> will revert if the amount bought is <code>0</code>.</strong></p>\n<p>In conclusion, we should check this parameter, but in the actual code state it can’t happen (without taking into account the exotic ERC20s that we do not manage). If we add an operator that does not check the amount bought it can happen, so, maybe reducing the severity ?</p>\n<p>PR: <a href=\"https://github.com/NestedFi/nested-core-lego/pull/100\">Med/High Risk Fixes</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/6#issuecomment-1053229547\">harleythedog (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Agree with sponsor, this issue doesn’t exist with the current operators, so it is not currently a threat. I am going to downgrade this to medium.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-nestedfactory-user-can-utilise-accidentally-sent-eth-funds-via-processoutputorders--processinputandoutputorders\" style=\"position:relative;\"><a href=\"#m-04-nestedfactory-user-can-utilise-accidentally-sent-eth-funds-via-processoutputorders--processinputandoutputorders\" aria-label=\"m 04 nestedfactory user can utilise accidentally sent eth funds via processoutputorders  processinputandoutputorders permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/44\">[M-04] <code>NestedFactory</code>: User can utilise accidentally sent ETH funds via <code>processOutputOrders()</code> / <code>processInputAndOutputOrders()</code></a></h2>\n<p><em>Submitted by GreyArt</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L71\">NestedFactory.sol#L71</a><br>\n<a href=\"https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L286-L296\">NestedFactory.sol#L286-L296</a><br>\n<a href=\"https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L370-L375\">NestedFactory.sol#L370-L375</a><br>\n<a href=\"https://github.com/code-423n4/2022-02-nested/blob/main/contracts/NestedFactory.sol#L482-L492\">NestedFactory.sol#L482-L492</a><br></p>\n<p>Should a user accidentally send ETH to the <code>NestedFactory</code>, anyone can utilise it to their own benefit by calling <code>processOutputOrders()</code> / <code>processInputAndOutputOrders()</code>. This is possible because:</p>\n<ol>\n<li><code>receive()</code> has no restriction on the sender</li>\n<li><code>processOutputOrders()</code> does not check <code>msg.value</code>, and rightly so, because funds are expected to come from <code>reserve</code>.</li>\n<li><code>transferInputTokens()</code> does not handle the case where <code>ETH</code> could be specified as an address by the user for an output order.</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">ETH</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NF: INVALID_AMOUNT_IN&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">weth</span><span class=\"mtk1\">.</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">{ value: </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\"> }();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">weth</span><span class=\"mtk1\">)), </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Hence, the attack vector is simple. Should a user accidentally send ETH to the contract, create an output <code>Order</code> with <code>token</code> being <code>ETH</code> and amount corresponding to the NestedFactory’s ETH balance.</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<ol>\n<li>\n<p>Since plain / direct<code>ETH</code> transfers are only expected to solely come from <code>weth</code> (excluding payable functions), we recommend restricting the sender to be <code>weth</code>, like how it is done in <code>[FeeSplitter](https://github.com/code-423n4/2022-02-nested/blob/main/contracts/FeeSplitter.sol#L101-L104)</code>.</p>\n<p>We are aware that this was raised previously here: <a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/188\">code-423n4/2021-11-nested-findings#188</a> and would like to add that restricting the sender in the <code>receive()</code> function will not affect <code>payable</code> functions. From from what we see, plain ETH transfers are also not expected to come from other sources like <code>NestedReserve</code> or operators.</p>\n</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">weth</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;NF: ETH_SENDER_NOT_WETH&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ol start=\"2\">\n<li>Check that <code>_fromReserve</code> is false in the scenario <code>address(_inputToken) == ETH</code>.</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">ETH</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk12\">_fromReserve</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NF: INVALID_INPUT_TOKEN&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NF: INVALID_AMOUNT_IN&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">weth</span><span class=\"mtk1\">.</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">{ value: </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\"> }();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">weth</span><span class=\"mtk1\">)), </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/44\">maximebrugel (Nested Finance) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p>PR: <a href=\"https://github.com/NestedFi/nested-core-lego/pull/100\">Med/High Risk Fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-wrong-logic-around-areoperatorsimported\" style=\"position:relative;\"><a href=\"#m-05-wrong-logic-around-areoperatorsimported\" aria-label=\"m 05 wrong logic around areoperatorsimported permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/17\">[M-05] Wrong logic around <code>areOperatorsImported</code></a></h2>\n<p><em>Submitted by 0x1f8b, also found by 0xliumin and kenzo</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-02-nested/blob/fe6f9ef7783c3c84798c8ab5fc58085a55cebcfc/contracts/OperatorResolver.sol#L42-L43\">OperatorResolver.sol#L42-L43</a><br></p>\n<p>The logic related to the <code>areOperatorsImported</code> method is incorrect and can cause an operator not to be updated because the owner thinks it is already updated, and a vulnerable or defective one can be used.</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <code>operators</code> mapping is made up of a key <code>bytes32 name</code> and a value made up of two values: <code>implementation</code> and <code>selector</code>, both of which identify the contract and function to be called when an operator is invoked.</p>\n<p>The <code>areOperatorsImported</code> method tries to check if the operators to check already exist, however, the check is not done correctly, since &#x26;&#x26; is used instead of ||.</p>\n<p>If the operator with name <code>A</code> and value <code>{implementation=0x27f8d03b3a2196956ed754badc28d73be8830a6e,selector=\"performSwapVulnerable\"}</code> exists, and the owner try to check if the operator with name <code>A</code> and value <code>{implementation=0x27f8d03b3a2196956ed754badc28d73be8830a6e,selector=\"performSwapFixed\"}</code> exists, that function will return <code>true</code>, and the owner may decide not to import it , producing unexpected errors.\nBecause operators manage the tokens, this error can produce a token lost.</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Change &#x26;&#x26; by ||</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/17\">maximebrugel (Nested Finance) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p>PR: <a href=\"https://github.com/NestedFi/nested-core-lego/pull/100\">Med/High Risk Fixes</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/17#issuecomment-1053625678\">harleythedog (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Good catch, I agree with severity.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 15 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/66\">report highlighted below</a> by warden <strong>pauliax</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/70\">Dravee</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/58\">Omik</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/35\">IllIllI</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/46\">kenzo</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/24\">samruna</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/50\">gzeon</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/45\">bobi</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/4\">robee</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/65\">rfa</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/52\">WatchPug</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/40\">GreyArt</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/9\">csanuragjain</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/33\">0xliumin</a>, and <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/26\">ShippooorDAO</a>.</em></p>\n<h2 id=\"01\" style=\"position:relative;\"><a href=\"#01\" aria-label=\"01 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[01]</h2>\n<p>Function releaseTokens uses weth, not eth when comparing against a native asset. if the token address is weth, it unwraps and sends the native asset to the user:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]) == </span><span class=\"mtk12\">weth</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">IWETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">weth</span><span class=\"mtk1\">).</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">().</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{ value: </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> }(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;FS: ETH_TRANFER_ERROR&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Releasing weth token should be left as a valid option if the user prefers wrapped ERC20 eth, and I think for this native purpose there is a not used storage variable named ETH:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ETH</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>Based on my assumptions, the intention was:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]) == </span><span class=\"mtk12\">ETH</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span></code></pre>\n<p>or if you do not want to implement this change, then at least remove this unused variable to save some gas.\nHowever, the issue is small, because the user can always retrieve weth by using another function named releaseTokensNoETH.</p>\n<h2 id=\"02\" style=\"position:relative;\"><a href=\"#02\" aria-label=\"02 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[02]</h2>\n<p>This was mentioned in the Red4Sec audit (NFSC09), but it wasn’t fixed here: OwnableProxyDelegation is Context, but still uses msg.sender, not _msgSender():</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">StorageSlot</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getAddressSlot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_ADMIN_SLOT</span><span class=\"mtk1\">).</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;OFP: FORBIDDEN&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"03\" style=\"position:relative;\"><a href=\"#03\" aria-label=\"03 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[03]</h2>\n<p>function rebuildCache() in MixinOperatorResolver does not delete removed operators from operatorCache. resolverOperatorsRequired return current active operators, so it will not contain removed operators, e.g. operator was removed by calling removeOperator in the factory, then rebuildCache is called, and the cache will still contain this removed operator, and it will be possible to callOperator on this operator.</p>\n<h2 id=\"04\" style=\"position:relative;\"><a href=\"#04\" aria-label=\"04 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[04]</h2>\n<p>Consider introducing an upper limit for _timestamp in updateLockTimestamp, e.g. max 1 year from current block timestamp, otherwise it may be possible to accidentally lock the token forever.</p>\n<h2 id=\"05\" style=\"position:relative;\"><a href=\"#05\" aria-label=\"05 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[05]</h2>\n<p>If removeFactory has this check:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">supportedFactories</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_factory</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot;OFH: NOT_SUPPORTED&quot;</span><span class=\"mtk1\">); </span></span></span></code></pre>\n<p>then I think addFactory should have an analogous check:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk12\">supportedFactories</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_factory</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot;OFH: ALREADY_SUPPORTED&quot;</span><span class=\"mtk1\">); </span></span></span></code></pre>\n<h2 id=\"06\" style=\"position:relative;\"><a href=\"#06\" aria-label=\"06 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[06]</h2>\n<p>The revert message is a bit misleading here:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">assetTokensLength</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NF: UNALLOWED_EMPTY_PORTFOLIO&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"07\" style=\"position:relative;\"><a href=\"#07\" aria-label=\"07 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[07]</h2>\n<p>NestedFactory has a function unlockTokens that lets admin rescue any ERC20 token. Consider also adding support for rescuing the native asset (e.g. ETH).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/66#issuecomment-1040355605\">maximebrugel (Nested Finance) commented</a>:</strong></p>\n<blockquote>\n<p><strong>[01] Function releaseTokens uses weth, not eth</strong><br>\nWe are only sending fees with ERC20 (so WETH and not ETH). In the releaseTokens tokens we are unwrapping the WETH to transfer ETH. The <code>nestedFactory</code> is wrapping ETH before sending fees.</p>\n<p>But we should remove this variable => <code>address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;</code> and change comment.</p>\n<p><strong>[02] OwnableProxyDelegation is Context, but still uses msg.sender, not _msgSender()</strong><br>\nAcknowledged. No meta-transaction support for this admin function.</p>\n<p><strong>[03] Function rebuildCache() in MixinOperatorResolver does not delete removed operators from operatorCache</strong><br>\nConfirmed. The mitigation found is to remove from cache in the <code>removeOperator</code> function.</p>\n<p><strong>[04] Consider introducing an upper limit for _timestamp in updateLockTimestamp</strong><br>\nAcknowledged. We are not sure about an upper limit to set.</p>\n<p><strong>[05] addFactory should have an analogous check</strong><br>\nDisputed. No need for a require as long as  <code>supportedFactories[_factory] = true</code> does not disrupt the protocol state.</p>\n<p><strong>[06] The revert message is a bit misleading here</strong><br>\nDisputed. I don’t really know what is misleading. You can’t withdraw the last token and keep an empty portfolio.</p>\n<p><strong>[07] adding support for rescuing the native asset</strong><br>\nAcknowledged. We will fix this issue by adding a require in the <code>receive</code> function. Also, the user can’t send more ETH than needed with the <code>_checkMsgValue</code> function.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/66#issuecomment-1057576659\">harleythedog (judge) commented</a>:</strong></p>\n<blockquote>\n<p>My personal judgements:<br>\n<strong>[01] “Function releaseTokens uses weth”</strong><br>\nThis is a gas optimization. Will keep it in mind when scoring <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/67\">#67</a> [G-07]. For here, invalid.</p>\n<p><strong>[02] “OwnableProxyDelegation is Context”</strong><br>\nValid and very-low-critical.</p>\n<p><strong>[03] “Function rebuildCache() in MixinOperatorResolver does not delete removed operators from operatorCache”</strong><br>\nThis has been upgraded to medium severity in <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/77\">#77</a> [M-02]. Will not contribute to QA score.</p>\n<p><strong>[04] “Consider introducing an upper limit for _timestamp in updateLockTimestamp”</strong><br>\nI think this is a good idea. Valid and low-critical.</p>\n<p><strong>[05] “addFactory should have an analogous check”</strong><br>\nJust a consistency suggestion, valid and non-critical.</p>\n<p><strong>[06] “The revert message is a bit missleading here”</strong><br>\nWarden doesn’t explain enough why it is misleading. Invalid.</p>\n<p><strong>[07] “Consider also adding support for rescuing the native asset”</strong><br>\nValid and low-critical.</p>\n<p>Now, here is the methodology I used for calculating a score for each QA report. I first assigned each submission to be either non-critical (1 point), very-low-critical (5 points) or low-critical (10 points), depending on how severe/useful the issue is. The score of a QA report is the sum of these points, divided by the maximum number of points achieved by a QA report. This maximum number was 26 points, achieved by this report <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/66\">#66</a>.</p>\n<p>The number of points achieved by this report is 26 points.<br>\nThus the final score of this QA report is (26/26)*100 = 100.</p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 19 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/67\">report highlighted below</a> by warden <strong>pauliax</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/5\">robee</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/28\">Dravee</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/47\">kenzo</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/39\">GreyArt</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/55\">Tomio</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/57\">Omik</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/72\">kenta</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/64\">rfa</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/32\">m_smirnova2020</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/8\">csanuragjain</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/16\">0x1f8b</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/56\">ye0lde</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/68\">sirhashalot</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/25\">ShippooorDAO</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/48\">gzeon</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/71\">defsec</a>, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/15\">cmichel</a>, and <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/43\">bobi</a>.</em></p>\n<h2 id=\"g-01\" style=\"position:relative;\"><a href=\"#g-01\" aria-label=\"g 01 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01]</h2>\n<p>Function transfer in NestedReserve is never used and can only be called by the factory (onlyFactory), so consider removing it because I think the factory uses a withdraw function from the Reserve.</p>\n<p>Currently never used:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setReserve</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyFactory</span></span></span></code></pre>\n<p>You can remove it to save some gas, or leave it if it was intended for future use with other factories.</p>\n<h2 id=\"g-02\" style=\"position:relative;\"><a href=\"#g-02\" aria-label=\"g 02 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-02]</h2>\n<p>Functions that add or remove operators or shareholders iterate over the whole array, so you can consider using EnumerableSet to store them:</p>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/EnumerableSet.sol\">EnumerableSet.sol</a></p>\n<h2 id=\"g-03\" style=\"position:relative;\"><a href=\"#g-03\" aria-label=\"g 03 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-03]</h2>\n<p>Could just use msg.sender and do not call an owner() function here:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">unlockTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk11\">owner</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"g-04\" style=\"position:relative;\"><a href=\"#g-04\" aria-label=\"g 04 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-04]</h2>\n<p>There are several functions that call _checkMsgValue. This function is quite expensive as it iterates over all the _batchedOrders and is only relevant when the inputToken is ETH. Later the callers will have to iterate over all the _batchedOrders again anyway, so I think this function should be refactored to significantly reduce gas. My suggestion:</p>\n<p>Because processInputOrders and processInputAndOutputOrders both call _processInputOrders, the logic from _checkMsgValue could be moved to _processInputOrders. function create then can be refactored to re-use _processInputOrders. I see 2 discrepancies here: _fromReserve is always false when _submitInOrders is called from create (could be solved if _processInputOrders takes extra parameter), and _processInputOrders has this extra line:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nestedRecords</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getAssetReserve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">) == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">reserve</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;NF: RESERVE_MISMATCH&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>but this could be solved if you first mint the NFT and then invoke _processInputOrders from create.</p>\n<h2 id=\"g-05\" style=\"position:relative;\"><a href=\"#g-05\" aria-label=\"g 05 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-05]</h2>\n<p>Function withdraw calls nestedRecords twice:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">assetTokensLength</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">nestedRecords</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getAssetTokensLength</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">nestedRecords</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getAssetTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">)[</span><span class=\"mtk12\">_tokenIndex</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<p>I think it could just substitute these links by first fetching all the tokens, and then calculating the length itself instead of making 2 external calls for pretty much the same data.</p>\n<h2 id=\"g-06\" style=\"position:relative;\"><a href=\"#g-06\" aria-label=\"g 06 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-06]</h2>\n<p>Could use ‘unchecked’ maths here, as underflow is not possible:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_amountToSpend</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">]) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">_amountToSpend</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/67#issuecomment-1042990798\">maximebrugel (Nested Finance) commented</a>:</strong></p>\n<blockquote>\n<p><strong>[G-01] “You can remove it to save some gas, or leave it if it was intended for future use with other factories”</strong><br>\nAcknowledged</p>\n<p><strong>[G-02] Consider using EnumerableSet to store operators</strong><br>\nAcknowledged</p>\n<p><strong>[G-03] “Could just use msg.sender and do not call an owner() function here”</strong><br>\nConfirmed</p>\n<p><strong>[G-04] <code>_checkMsgValue</code> refactoring</strong><br>\nDisputed<br>\n“Could be”. You need to pre-calculate the amount of ETH needed to check msg.value in a simple way.</p>\n<p><strong>[G-05] “function withdraw calls nestedRecords twice”</strong><br>\nAcknowledged</p>\n<p><strong>[G-06] “Could use ‘unchecked’ maths here, as underflow is not possible”</strong><br>\nConfirmed</p>\n<p>PR: <a href=\"https://github.com/NestedFi/nested-core-lego/pull/101\">Gas Optimizations Fixes</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/67#issuecomment-1066015587\">harleythedog (judge) commented</a>:</strong></p>\n<blockquote>\n<p>My personal judgments:<br></p>\n<p><strong>[G-01] “function transfer in NestedReserve is never used”.</strong><br>\nValid and medium-optimization.<br></p>\n<p><strong>[G-02] “EnumerableSet to store them”.</strong><br>\nValid and small-optimization.<br></p>\n<p><strong>[G-03] “Could just use msg.sender”.</strong><br>\nValid and small-optimization.<br></p>\n<p><strong>[G-04] ”<code>_checkMsgValue</code> refactoring”.</strong><br>\nThe idea of refactoring the reserve check to be in the combined function is valid.<br>\nValid and small-optimization.<br></p>\n<p><strong>[G-05] “withdraw calls nestedRecords twice”.</strong><br>\nValid and small-optimization.<br></p>\n<p><strong>[G-06] “Could use ‘unchecked’ here”.</strong><br>\nThis was disputed in other gas reports as this already surfaced in the first contest. To be fair, this should be marked as invalid too.<br>\nInvalid.<br></p>\n<p>Also, <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/66\">#66</a> has the additional issue:<br>\n<strong>[G-07] “remove this unused variable to save some gas (ETH)“.</strong><br>\nValid and small-optimization.</p>\n<p>Now, here is the methodology I used for calculating a score for each gas report. I first assigned each submission to be either small-optimization (1 point), medium-optimization (5 points) or large-optimization (10 points), depending on how useful the optimization is. The score of a gas report is the sum of these points, divided by the maximum number of points achieved by a gas report. This maximum number was 10 points, achieved by this report <a href=\"https://github.com/code-423n4/2022-02-nested-findings/issues/67\">#67</a>.</p>\n<p>The number of points achieved by this report is 10 points.<br>\nThus the final score of this gas report is (10/10)*100 = 100.</p>\n</blockquote>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#medium-risk-findings-5\">Medium Risk Findings (5)</a></p>\n<ul>\n<li><a href=\"#m-01-destroy-can-avoid-the-bulk-of-fees\">[M-01] Destroy can avoid the bulk of fees</a></li>\n<li><a href=\"#m-02-nestedfactory-does-not-track-operators-properly\">[M-02] <code>NestedFactory</code> does not track operators properly</a></li>\n<li><a href=\"#m-03-undesired-behavior\">[M-03] Undesired behavior</a></li>\n<li><a href=\"#m-04-nestedfactory-user-can-utilise-accidentally-sent-eth-funds-via-processoutputorders--processinputandoutputorders\">[M-04] <code>NestedFactory</code>: User can utilise accidentally sent ETH funds via <code>processOutputOrders()</code> / <code>processInputAndOutputOrders()</code></a></li>\n<li><a href=\"#m-05-wrong-logic-around-areoperatorsimported\">[M-05] Wrong logic around <code>areOperatorsImported</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#01\">01</a></li>\n<li><a href=\"#02\">02</a></li>\n<li><a href=\"#03\">03</a></li>\n<li><a href=\"#04\">04</a></li>\n<li><a href=\"#05\">05</a></li>\n<li><a href=\"#06\">06</a></li>\n<li><a href=\"#07\">07</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#g-01\">G-01</a></li>\n<li><a href=\"#g-02\">G-02</a></li>\n<li><a href=\"#g-03\">G-03</a></li>\n<li><a href=\"#g-04\">G-04</a></li>\n<li><a href=\"#g-05\">G-05</a></li>\n<li><a href=\"#g-06\">G-06</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}