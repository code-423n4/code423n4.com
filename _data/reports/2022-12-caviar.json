{
  "circa": {
    "title": "Caviar contest",
    "sponsor": "Caviar",
    "slug": "2022-12-caviar",
    "date": "2023-01-26",
    "findings": "https://github.com/code-423n4/2022-12-caviar-findings/issues",
    "contest": 193
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Caviar smart contract system written in Solidity. The audit contest took place between December 12—December 19 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>130 Wardens contributed reports to the Caviar contest:</p>\n<ol>\n<li>0x1f8b</li>\n<li>0x52</li>\n<li><a href=\"https://twitter.com/0xAgro\">0xAgro</a></li>\n<li><a href=\"https://twitter.com/nl__park\">0xDave</a></li>\n<li><a href=\"https://decorativepineapple.github.io/\">0xDecorativePineapple</a></li>\n<li>0xGusMcCrae</li>\n<li><a href=\"https://twitter.com/0xSmartContract\">0xSmartContract</a></li>\n<li>0xab00</li>\n<li>0xhacksmithh</li>\n<li>0xmuxyz</li>\n<li>0xxm</li>\n<li><a href=\"https://twitter.com/8olidity\">8olidity</a></li>\n<li>9svR6w</li>\n<li>Apocalypto (cRat1st0s, reassor, and M0ndoHEHE)</li>\n<li><a href=\"https://github.com/Aymen1001\">Aymen0909</a></li>\n<li><a href=\"https://twitter.com/bahoz_eth\">BAHOZ</a></li>\n<li>BPZ (pa6221, Bitcoinfever244, and PrasadLak)</li>\n<li>Bnke0x0</li>\n<li><a href=\"https://twitter.com/bobface16\">Bobface</a></li>\n<li>Breeje</li>\n<li>CRYP70</li>\n<li><a href=\"https://chom.dev\">Chom</a></li>\n<li>Diana</li>\n<li><a href=\"https://twitter.com/ElKu_crypto\">ElKu</a></li>\n<li><a href=\"https://franfran.dev/\">Franfran</a></li>\n<li>HE1M</li>\n<li>HardlyCodeMan</li>\n<li>IllIllI</li>\n<li><a href=\"https://twitter.com/sm4rtcontr4ct\">JC</a></li>\n<li>Janio</li>\n<li><a href=\"https://jeiwan.net\">Jeiwan</a></li>\n<li><a href=\"https://twitter.com/JagadeshRonanki\">JrNet</a></li>\n<li>Junnon</li>\n<li>KingNFT</li>\n<li>Koolex</li>\n<li>Lambda</li>\n<li>Madalad</li>\n<li>NoamYakov</li>\n<li>RaymondFam</li>\n<li>ReyAdmirado</li>\n<li>Rolezn</li>\n<li><a href=\"@sam_gmk\">SamGMK</a></li>\n<li>SleepingBugs (<a href=\"https://twitter.com/Deivitto\">Deivitto</a> and 0xLovesleep)</li>\n<li>Tointer</li>\n<li>Tricko</li>\n<li><a href=\"https://unchain.tech/\">UNCHAIN</a> (<a href=\"https://tom-sol.notion.site/Who-am-I-3b4dc28e77b647eb90794735a94dd38e\">Tomo</a>, <a href=\"https://twitter.com/HARUKI05758694\">mashharuki</a>, yawn, keit, ahayashi, <a href=\"https://akxra.art\">sho</a>, KazumaHamamoto, <a href=\"https://twitter.com/cardene777\">cardene</a>, <a href=\"https://twitter.com/_cotoneum_\">cotoneum</a>, mugi, yosuke, masaru, <a href=\"https://twitter.com/kevin_katsu_h\">kevin_katsu</a>, <a href=\"https://twitter.com/junya_tad\">junya</a>, daikai, mabuk, <a href=\"https://twitter.com/TeaTuberMameta\">mameta</a>, <a href=\"https://twitter.com/kyok1st\">kyok1st</a>, 0xShin, hamaup, kii, and yoki)</li>\n<li>UdarTeam (ahmedov and tourist)</li>\n<li>Zarf</li>\n<li>__141345__</li>\n<li><a href=\"https://github.com/romeroadrian\">adriro</a></li>\n<li>ahayashi</li>\n<li>ak1</li>\n<li><a href=\"https://twitter.com/agfviggiano\">aviggiano</a></li>\n<li><a href=\"https://twitter.com/bytehat\">bytehat</a></li>\n<li><a href=\"https://twitter.com/c3ph_\">c3phas</a></li>\n<li><a href=\"https://twitter.com/carlitox477\">carlitox477</a></li>\n<li>carrotsmuggler</li>\n<li>caventa</li>\n<li>cccz</li>\n<li>chaduke</li>\n<li>cozzetti</li>\n<li>cryptonue</li>\n<li>cryptostellar5</li>\n<li>dic0de</li>\n<li>dipp</li>\n<li><a href=\"https://twitter.com/eyexploit\">eyexploit</a></li>\n<li>fs0c</li>\n<li>gz627</li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/h0wlu\">h0wl</a></li>\n<li>haku</li>\n<li><a href=\"https://twitter.com/hansfriese\">hansfriese</a></li>\n<li>helios</li>\n<li>hihen</li>\n<li>imare</li>\n<li>immeas</li>\n<li>izhelyazkov</li>\n<li><a href=\"https://twitter.com/Kiki_developer\">kiki_dev</a></li>\n<li>koxuan</li>\n<li>ktg</li>\n<li>ladboy233</li>\n<li>lukris02</li>\n<li>lumoswiz</li>\n<li><a href=\"https://twitter.com/Mauricio_0218\">mauricio1802</a></li>\n<li>millersplanet</li>\n<li><a href=\"https://www.linkedin.com/in/minhquanym/\">minhquanym</a></li>\n<li>minhtrng</li>\n<li><a href=\"https://github.com/nicobevilacqua\">nicobevi</a></li>\n<li><a href=\"https://twitter.com/zachobront\">obront</a></li>\n<li><a href=\"https://twitter.com/andyfeili\">oyc_109</a></li>\n<li><a href=\"https://twitter.com/@PavanKumarKv2\">pavankv</a></li>\n<li><a href=\"https://twitter.com/rajat_beladiya\">rajatbeladiya</a></li>\n<li><a href=\"https://twitter.com/ret2basic\">ret2basic</a></li>\n<li>rjs</li>\n<li>rvierdiiev</li>\n<li><a href=\"https://medium.com/@saneryee-studio\">saneryee</a></li>\n<li><a href=\"https://twitter.com/seynixyz\">seyni</a></li>\n<li><a href=\"https://twitter.com/shunduquar\">shung</a></li>\n<li><a href=\"https://twitter.com/harshit16024263\">supernova</a></li>\n<li>tnevler</li>\n<li>unforgiven</li>\n<li>wait</li>\n<li>yixxas</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/berndartmueller\">berndartmueller</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 8 unique vulnerabilities. Of these vulnerabilities, 3 received a risk rating in the category of HIGH severity and 5 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 25 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 31 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-12-caviar\">C4 Caviar contest repository</a>, and is composed of 4 smart contracts written in the Solidity programming language and includes 318 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-3\" style=\"position:relative;\"><a href=\"#high-risk-findings-3\" aria-label=\"high risk findings 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (3)</h1>\n<h2 id=\"h-01-reentrancy-in-buy-function-for-erc777-tokens-allows-buying-funds-with-considerable-discount\" style=\"position:relative;\"><a href=\"#h-01-reentrancy-in-buy-function-for-erc777-tokens-allows-buying-funds-with-considerable-discount\" aria-label=\"h 01 reentrancy in buy function for erc777 tokens allows buying funds with considerable discount permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/343\">[H-01] Reentrancy in buy function for ERC777 tokens allows buying funds with considerable discount</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/343\">carlitox477</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/445\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/422\">gzeon</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/268\">9svR6w</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/258\">Lambda</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/221\">koxuan</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/211\">KingNFT</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/125\">cozzetti</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/111\">rvierdiiev</a>, and <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/78\">cccz</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L95\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L95</a><br>\n<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L137\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L137</a><br>\n<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L172\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L172</a><br>\n<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L203\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L203</a></p>\n<p>Current implementation of functions <code>add</code>, <code>remove</code>, <code>buy</code> and <code>sell</code> first transfer fractional tokens, and then base tokens.</p>\n<p>If this base token is ERC777 (extension of ERC20), we can call this function without updating the base token balance, but updating the fractional token balance.</p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Allows to drain funds of a pairs which implements an ERC-777 token.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">function buy(uint256 outputAmount, uint256 maxInputAmount) public payable returns (uint256 inputAmount) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // *** Checks *** //</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // check that correct eth input was sent - if the baseToken equals address(0) then native ETH is used</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    require(baseToken == address(0) ? msg.value == maxInputAmount : msg.value == 0, &quot;Invalid ether input&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // calculate required input amount using xyk invariant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+   @audit Use current balances</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    inputAmount = buyQuote(outputAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // check that the required amount of base tokens is less than the max amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    require(inputAmount &lt;= maxInputAmount, &quot;Slippage: amount in&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // *** Effects *** //</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+   @audit Modifies just fractional balance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // transfer fractional tokens to sender</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    _transferFrom(address(this), msg.sender, outputAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // *** Interactions *** //</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    if (baseToken == address(0)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // refund surplus eth</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        uint256 refundAmount = maxInputAmount - inputAmount;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        if (refundAmount &gt; 0) msg.sender.safeTransferETH(refundAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } else {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // transfer base tokens in</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+       @audit If an ERC-777 token is used, we can re call buy function with the same balance of base token, but with different fractional balance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ERC20(baseToken).safeTransferFrom(msg.sender, address(this), inputAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    emit Buy(inputAmount, outputAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">buyQuote</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1000</span><span class=\"mtk1\"> * </span><span class=\"mtk11\">baseTokenReserves</span><span class=\"mtk1\">()) / ((</span><span class=\"mtk11\">fractionalTokenReserves</span><span class=\"mtk1\">() - </span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\">) * </span><span class=\"mtk7\">997</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The buy quote is used to calculate the amount of fractional token that the user will receive, and it should be less/equal to <strong>maxInputAmount</strong> sent by parameter in order to achieve a successful execution of function buy.</p>\n<p>Current buy quote can be mathematically expressed as: $\\frac{outputAmount \\times 1000 \\times baseTokenReserves}{fractionalTokenReserves - outPutAmount} \\times 997$.</p>\n<p>Then, about sales</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">function sell(uint256 inputAmount, uint256 minOutputAmount) public returns (uint256 outputAmount) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // *** Checks *** //</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // calculate output amount using xyk invariant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    outputAmount = sellQuote(inputAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // check that the outputted amount of fractional tokens is greater than the min amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    require(outputAmount &gt;= minOutputAmount, &quot;Slippage: amount out&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // *** Effects *** //</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // transfer fractional tokens from sender</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+   //@audit fractional balance is updated</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    _transferFrom(msg.sender, address(this), inputAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // *** Interactions *** //</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    if (baseToken == address(0)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // transfer ether out</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        msg.sender.safeTransferETH(outputAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } else {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // transfer base tokens out</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+       @audit If an ERC-777 token is used, we can re call sell function with the same balance of base token, but with different fractional balance.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ERC20(baseToken).safeTransfer(msg.sender, outputAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    emit Sell(inputAmount, outputAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"function\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 inputAmountWithFee = inputAmount * 997;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    return (inputAmountWithFee * baseTokenReserves()) / ((fractionalTokenReserves() * 1000) + inputAmountWithFee);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Current sellQuote function can be expressed mathematically as:</p>\n<p>$inputAmount = \\frac{inputAmount \\times 997 \\times baseTokenReserves}{fractionalTokenReserves \\times 1000 + inputAmountWithFee}$</p>\n<p>Then we can think next scenario to drain a pair which use an ERC-777 token as base token:</p>\n<ol>\n<li>Let’s suppose the pair has 1000 base tokens(BT777) and 1000 Fractional reserve tokens (FRT)</li>\n<li>\n<p>The attacker call buy function, all with next inputs:</p>\n<ul>\n<li>outputAmount = 50</li>\n<li>maxInputAmount = 80</li>\n</ul>\n</li>\n<li>The attacker implements a hook, that will be executed 6 times (using a counter inside a malicus contract) when a transfer is done, and call the buy function. After this 6 times the malicious contract is call again, but this times calls the sell function, doing a huge sell for the fractional reserve token obtained.</li>\n</ol>\n<p>A simulation of this attack can be visualized in next table</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operation</th>\n<th>outputAmount (FRT)</th>\n<th>maxInputAmount (BT777)</th>\n<th>BT777 reserve</th>\n<th>FRT reserve</th>\n<th>inputAmount (BT777 to pay)</th>\n<th align=\"right\">inputAmount &#x3C; maxInputAmount</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Attaker buy 1</td>\n<td>50</td>\n<td>80</td>\n<td>1000</td>\n<td>1000</td>\n<td>52</td>\n<td align=\"right\">TRUE</td>\n</tr>\n<tr>\n<td align=\"left\">Callback buy 2</td>\n<td>50</td>\n<td>80</td>\n<td>1000</td>\n<td>950</td>\n<td>55</td>\n<td align=\"right\">TRUE</td>\n</tr>\n<tr>\n<td align=\"left\">Callback buy 3</td>\n<td>50</td>\n<td>80</td>\n<td>1000</td>\n<td>900</td>\n<td>59</td>\n<td align=\"right\">TRUE</td>\n</tr>\n<tr>\n<td align=\"left\">Callback buy 4</td>\n<td>50</td>\n<td>80</td>\n<td>1000</td>\n<td>850</td>\n<td>62</td>\n<td align=\"right\">TRUE</td>\n</tr>\n<tr>\n<td align=\"left\">Callback buy 5</td>\n<td>50</td>\n<td>80</td>\n<td>1000</td>\n<td>800</td>\n<td>66</td>\n<td align=\"right\">TRUE</td>\n</tr>\n<tr>\n<td align=\"left\">Callback buy 6</td>\n<td>50</td>\n<td>80</td>\n<td>1000</td>\n<td>750</td>\n<td>71</td>\n<td align=\"right\">TRUE</td>\n</tr>\n<tr>\n<td align=\"left\">Callback buy 7</td>\n<td>50</td>\n<td>80</td>\n<td>1000</td>\n<td>700</td>\n<td>77</td>\n<td align=\"right\">TRUE</td>\n</tr>\n</tbody>\n</table>\n<p>The result of this operation is that the attaker/malicious contract has 350 FRT, while BT777 reserve still has 1000 and FRT reserve has 650 tokens. The success execution needs that the attacker pays 442 BT777 eventually.</p>\n<p>To do this, the last operation of the malicious contract is calling sell function</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operation</th>\n<th>inputAmount(BT777)</th>\n<th>minOutputAmount</th>\n<th>BT777 reserve</th>\n<th>FRT reserve</th>\n<th>outputAmount (BT777 to receive)</th>\n<th align=\"right\">outputAmount > minOutputAmount</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">calback Sell</td>\n<td>350</td>\n<td>442</td>\n<td>1000</td>\n<td>650</td>\n<td>536</td>\n<td align=\"right\">TRUE</td>\n</tr>\n</tbody>\n</table>\n<p>The result is that the attacker now controls 536 BT777, the attacker use this balance to pay the debt of 442 BT77, with a profit of 94 BT77 tokens.</p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation steps</h3>\n<p>Add openzeppelin nonReentrant modifier to mentioned functions, or state clear in the documentation that this protocol should not be used with ERC777 tokens.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/343#issuecomment-1372238278\">outdoteth (Caviar) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>Technically valid, though we don’t intend to support erc777 tokens.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-02-liquidity-providers-may-lose-funds-when-adding-liquidity\" style=\"position:relative;\"><a href=\"#h-02-liquidity-providers-may-lose-funds-when-adding-liquidity\" aria-label=\"h 02 liquidity providers may lose funds when adding liquidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/376\">[H-02] Liquidity providers may lose funds when adding liquidity</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/376\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/507\">minhtrng</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/444\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/398\">HE1M</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/388\">wait</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/350\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/342\">BAHOZ</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/340\">unforgiven</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/332\">0xxm</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/329\">Junnon</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/326\">bytehat</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/316\">UNCHAIN</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/288\">carlitox477</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/287\">RaymondFam</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/285\">Chom</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/278\">CRYP70</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/275\">9svR6w</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/252\">mauricio1802</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/234\">__141345__</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/222\">hihen</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/195\">caventa</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/173\">koxuan</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/142\">obront</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/122\">nicobevi</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/90\">shung</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/31\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/30\">Bobface</a>, and <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/17\">chaduke</a></em></p>\n<p>Liquidity providers may lose a portion of provided liquidity in either of the pair tokens. While the <code>minLpTokenAmount</code> protects from slippage when adding liquidity, it doesn’t protect from providing liquidity at different K.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <code>Pair</code> contract is designed to receive liquidity from liquidity providers (<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L63\">Pair.sol#L63</a>). First liquidity provider in a pool may provide arbitrary token amounts and set the initial price (<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L425-L426\">Pair.sol#L425-L426</a>), but all other liquidity providers must provide liquidity proportionally to current pool reserves (<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L420-L423\">Pair.sol#L420-L423</a>). Since a pool is made of two tokens and liquidity is provided in both tokens, there’s a possibility for a discrepancy: token amounts may be provided in different proportions. When this happens, the smaller of the proportions is chosen to calculate the amount of LP tokens minted (<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L420-L423\">Pair.sol#L420-L423</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// calculate amount of lp tokens as a fraction of existing reserves</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseTokenShare</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">baseTokenAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">lpTokenSupply</span><span class=\"mtk1\">) / </span><span class=\"mtk11\">baseTokenReserves</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fractionalTokenShare</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">fractionalTokenAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">lpTokenSupply</span><span class=\"mtk1\">) / </span><span class=\"mtk11\">fractionalTokenReserves</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk11\">min</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseTokenShare</span><span class=\"mtk1\">, </span><span class=\"mtk12\">fractionalTokenShare</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>As a result, the difference in proportions will create an excess of tokens that won’t be redeemable for the amount of LP tokens minted. The excess of tokens gets, basically, donated to the pool: it’ll be shared among all liquidity providers of the pool. While the <code>minLpTokenAmount</code> argument of the <code>add</code> function (<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L63\">Pair.sol#L63</a>) allows liquidity providers to set the minimal amount of LP tokens they want to receive, it doesn’t allow them to minimize the disproportion of token amounts or avoid it at all.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// test/Pair/unit.Add.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testLockOfFunds_AUDIT</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">alice</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0x31337</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bob</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0x12345</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">label</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;alice&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">label</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;bob&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">usd</span><span class=\"mtk1\">), </span><span class=\"mtk12\">alice</span><span class=\"mtk1\">, </span><span class=\"mtk7\">100e18</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">usd</span><span class=\"mtk1\">), </span><span class=\"mtk12\">bob</span><span class=\"mtk1\">, </span><span class=\"mtk7\">100e18</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">p</span><span class=\"mtk1\">), </span><span class=\"mtk12\">alice</span><span class=\"mtk1\">, </span><span class=\"mtk7\">100e18</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">p</span><span class=\"mtk1\">), </span><span class=\"mtk12\">bob</span><span class=\"mtk1\">, </span><span class=\"mtk7\">100e18</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Alice is the first liquidity provider.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">usd</span><span class=\"mtk1\">.</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">p</span><span class=\"mtk1\">), </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">p</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">10</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Bob provides liquidity to the pool and sets the minimal LP amount.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// The token amounts are deposited in different proportions, thus the smaller</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// one will be chosen to calculate the amount of LP tokens Bob will receive.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">usd</span><span class=\"mtk1\">.</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">p</span><span class=\"mtk1\">), </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minLPAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bobLPAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">p</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1.2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk12\">minLPAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Bob has received the minimal LP amount he wanted.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bobLPAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">minLPAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// However, after removing all his liquidity from the pool...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bobUSDBefore</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bobFracBefore</span><span class=\"mtk1\">) = (</span><span class=\"mtk12\">usd</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">), </span><span class=\"mtk12\">p</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">p</span><span class=\"mtk1\">.</span><span class=\"mtk11\">remove</span><span class=\"mtk1\">(</span><span class=\"mtk12\">minLPAmount</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bobUSDAfter</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bobFracAfter</span><span class=\"mtk1\">) = (</span><span class=\"mtk12\">usd</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">), </span><span class=\"mtk12\">p</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// ... Bob received less USD than he deposited.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bobUSDAfter</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">bobUSDBefore</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1.018181818181818181</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bobFracAfter</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">bobFracBefore</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1.000000000000000000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>In the <code>add</code> function, consider calculating optimal token amounts based on the amounts specified by user, current pool reserves, and the minimal LP tokens amount specified by user. As a reference, consider this piece from the Uniswap V2 Router: <a href=\"https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol#L45-L60\">UniswapV2Router02.sol#L45-L60</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/376#issuecomment-1373894006\">outdoteth (Caviar) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fixed in: <a href=\"https://github.com/outdoteth/caviar/pull/2\">https://github.com/outdoteth/caviar/pull/2</a></p>\n<p>By allowing a user to specify a <code>minPrice</code> and <code>maxPrice</code> that they are willing to LP at along with the <code>minLpTokenAmount</code> that they would like to receive. The price calculation is based on this: <a href=\"https://github.com/outdoteth/caviar/blob/main/src/Pair.sol#L471\">https://github.com/outdoteth/caviar/blob/main/src/Pair.sol#L471</a></p>\n</blockquote>\n<hr>\n<h2 id=\"h-03-first-depositor-can-break-minting-of-shares\" style=\"position:relative;\"><a href=\"#h-03-first-depositor-can-break-minting-of-shares\" aria-label=\"h 03 first depositor can break minting of shares permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/442\">[H-03] First depositor can break minting of shares</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/442\">minhquanym</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/500\">Apocalypto</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/495\">0xDecorativePineapple</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/485\">Franfran</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/476\">dipp</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/471\">rjs</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/470\">ak1</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/469\">Tricko</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/382\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/358\">unforgiven</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/352\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/341\">BAHOZ</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/338\">unforgiven</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/317\">bytehat</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/310\">UNCHAIN</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/249\">immeas</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/247\">SamGMK</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/242\">fs0c</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/240\">Tointer</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/239\">haku</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/235\">Koolex</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/232\">__141345__</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/231\">ElKu</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/216\">rajatbeladiya</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/207\">hihen</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/196\">izhelyazkov</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/174\">KingNFT</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/151\">koxuan</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/149\">0x52</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/130\">carrotsmuggler</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/128\">yixxas</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/123\">HE1M</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/121\">supernova</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/119\">cozzetti</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/113\">rvierdiiev</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/99\">SamGMK</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/88\">aviggiano</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/87\">seyni</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/77\">lumoswiz</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/58\">ladboy233</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/56\">chaduke</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/33\">cccz</a>, and <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/19\">eyexploit</a></em></p>\n<p>The attack vector and impact is the same as <a href=\"https://github.com/yearn/yearn-security/blob/master/audits/20210719_ToB_yearn_vaultsv2/ToB_-_Yearn_Vault_v_2_Smart_Contracts_Audit_Report.pdf\">TOB-YEARN-003</a>, where users may not receive shares in exchange for their deposits if the total asset amount has been manipulated through a large “donation”.</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>In <code>Pair.add()</code>, the amount of LP token minted is calculated as</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addQuote</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseTokenAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fractionalTokenAmount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lpTokenSupply</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">lpToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">lpTokenSupply</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// calculate amount of lp tokens as a fraction of existing reserves</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseTokenShare</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">baseTokenAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">lpTokenSupply</span><span class=\"mtk1\">) / </span><span class=\"mtk11\">baseTokenReserves</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fractionalTokenShare</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">fractionalTokenAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">lpTokenSupply</span><span class=\"mtk1\">) / </span><span class=\"mtk11\">fractionalTokenReserves</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk11\">min</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseTokenShare</span><span class=\"mtk1\">, </span><span class=\"mtk12\">fractionalTokenShare</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// if there is no liquidity then init</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Math</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sqrt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseTokenAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">fractionalTokenAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>An attacker can exploit using these steps</p>\n<ol>\n<li>Create and add <code>1 wei baseToken - 1 wei quoteToken</code> to the pair. At this moment, attacker is minted <code>1 wei LP token</code> because <code>sqrt(1 * 1) = 1</code></li>\n<li>Transfer large amount of <code>baseToken</code> and <code>quoteToken</code> directly to the pair, such as <code>1e9 baseToken - 1e9 quoteToken</code>. Since no new LP token is minted, <code>1 wei LP token</code> worths <code>1e9 baseToken - 1e9 quoteToken</code>.</li>\n<li>Normal users add liquidity to pool will receive <code>0</code> LP token if they add less than <code>1e9</code> token because of rounding division.</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">baseTokenShare</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">X</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">1e9</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">fractionalTokenShare</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">Y</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">1e9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<ul>\n<li><a href=\"https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol#L119-L124\">Uniswap V2 solved this problem by sending the first 1000 LP tokens to the zero address</a>. The same can be done in this case i.e. when <code>lpTokenSupply == 0</code>, send the first min liquidity LP tokens to the zero address to enable share dilution.</li>\n<li>In <code>add()</code>, ensure the number of LP tokens to be minted is non-zero:</li>\n</ul>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpTokenAmount</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;No LP minted&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/442#issuecomment-1373902458\">outdoteth (Caviar) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fixed in: <a href=\"https://github.com/outdoteth/caviar/pull/3\">https://github.com/outdoteth/caviar/pull/3</a></p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-5\" style=\"position:relative;\"><a href=\"#medium-risk-findings-5\" aria-label=\"medium risk findings 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (5)</h1>\n<h2 id=\"m-01-missing-deadline-checks-allow-pending-transactions-to-be-maliciously-executed\" style=\"position:relative;\"><a href=\"#m-01-missing-deadline-checks-allow-pending-transactions-to-be-maliciously-executed\" aria-label=\"m 01 missing deadline checks allow pending transactions to be maliciously executed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/28\">[M-01] Missing deadline checks allow pending transactions to be maliciously executed</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/28\">Bobface</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/116\">cozzetti</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L63\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L63</a> <br><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L107\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L107</a> <br><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L147\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L147</a> <br><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L182\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L182</a> <br><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L275\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L275</a> <br><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L294\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L294</a> <br><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L310\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L310</a> <br><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L323\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L323</a></p>\n<p>The <code>Pair</code> contract does not allow users to submit a deadline for their action. This missing feature enables pending transactions to be maliciously executed at a later point.</p>\n<h3 id=\"detailed-description\" style=\"position:relative;\"><a href=\"#detailed-description\" aria-label=\"detailed description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Detailed description</h3>\n<p>AMMs should provide their users with an option to limit the execution of their pending actions, such as swaps or adding and removing liquidity. The most common solution is to include a deadline timestamp as a parameter (for example see <a href=\"https://github.com/Uniswap/v2-periphery/blob/0335e8f7e1bd1e8d8329fd300aea2ef2f36dd19f/contracts/UniswapV2Router02.sol#L229\">Uniswap V2</a>). If such an option is not present, users can unknowingly perform bad trades:</p>\n<ol>\n<li>Alice wants to swap 100 fractional NFT tokens (<code>fTokens</code>) for 1 ETH and later sell the 1 ETH for 1000 DAI. She signs the transaction calling <code>Pair.sell</code> with <code>inputAmount = 100 fTokens</code> and <code>minOutputAmount = 0.99 ETH</code> to allow for some slippage.</li>\n<li>The transaction is submitted to the mempool, however, Alice chose a transaction fee that is too low for miners to be interested in including her transaction in a block. The transaction stays pending in the mempool for extended periods, which could be hours, days, weeks, or even longer.</li>\n<li>When the average gas fee dropped far enough for Alice’s transaction to become interesting again for miners to include it, her swap will be executed. In the meantime, the price of <code>ETH</code> could have drastically changed. She will still at least get <code>0.99 ETH</code> due to <code>minOutputAmount</code>, but the <code>DAI</code> value of that output might be significantly lower. She has unknowingly performed a bad trade due to the pending transaction she forgot about.</li>\n</ol>\n<p>An even worse way this issue can be maliciously exploited is through MEV:</p>\n<ol>\n<li>The swap transaction is still pending in the mempool. Average fees are still too high for miners to be interested in it. The price of <code>fToken</code> has gone up significantly since the transaction was signed, meaning Alice would receive a lot more <code>ETH</code> when the swap is executed. But that also means that her <code>minOutputAmount</code> value is outdated and would allow for significant slippage.</li>\n<li>A MEV bot detects the pending transaction. Since the outdated <code>minOutputAmount</code> now allows for high slippage, the bot sandwiches Alice, resulting in significant profit for the bot and significant loss for Alice.</li>\n</ol>\n<p>The affected functions in <code>Pair.sol</code> are:</p>\n<ul>\n<li><code>add()</code></li>\n<li><code>remove()</code></li>\n<li><code>buy()</code></li>\n<li><code>sell()</code></li>\n<li><code>nftAdd()</code></li>\n<li><code>nftRemove()</code></li>\n<li><code>nftBuy()</code></li>\n<li><code>nftSell()</code></li>\n</ul>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Introduce a <code>deadline</code> parameter to the mentioned functions.</p>\n<h3 id=\"a-word-on-the-severity\" style=\"position:relative;\"><a href=\"#a-word-on-the-severity\" aria-label=\"a word on the severity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A word on the severity</h3>\n<p>Categorizing this issue into medium versus high was not immediately obvious. I came to the conclusion that this is a high-severity issue for the following reason:</p>\n<p>I run an arbitrage MEV bot myself, which also tracks pending transactions in the mempool, though for another reason than the one mentioned in this report. There is a <em>significant</em> amount of pending and even dropped transactions: over <code>200,000</code> transactions that are older than one month. These transactions do all kinds of things, from withdrawing from staking contracts to sending funds to CEXs and also performing swaps on DEXs like Uniswap. This goes to show that this issue will in fact be very real, there will be very old pending transactions wanting to perform trades without a doubt. And with the prevalence of advanced MEV bots, these transactions will be exploited as described in the second example above, leading to losses for Caviar’s users.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Omitted in this case, since the exploit is solely based on the fact that there is no limit on how long a transaction is allowed to be pending, which can be clearly seen when looking at the mentioned functions.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/28#issuecomment-1377558048\">berndartmueller (judge) decreased severity to Medium</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/28#issuecomment-1398324860\">outdoteth (Caviar) commented</a>:</strong></p>\n<blockquote>\n<p>Fixed in <a href=\"https://github.com/outdoteth/caviar/pull/6\">https://github.com/outdoteth/caviar/pull/6</a></p>\n<p>Add a deadline check.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-price-will-not-always-be-18-decimals-as-expected-and-outlined-in-the-comments\" style=\"position:relative;\"><a href=\"#m-02-price-will-not-always-be-18-decimals-as-expected-and-outlined-in-the-comments\" aria-label=\"m 02 price will not always be 18 decimals as expected and outlined in the comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/141\">[M-02] Price will not always be 18 decimals, as expected and outlined in the comments</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/141\">obront</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/488\">cryptostellar5</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/386\">Tricko</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/277\">CRYP70</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/274\">0xmuxyz</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/215\">koxuan</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/171\">8olidity</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/143\">yixxas</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/117\">cozzetti</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/86\">ktg</a>, and <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/53\">ladboy233</a></em></p>\n<p>The <code>price()</code> function is expected to return the price of one fractional tokens, represented in base tokens, to 18 decimals of precision. This is laid out clearly in the comments:</p>\n<p><code>/// @notice The current price of one fractional token in base tokens with 18 decimals of precision.</code><br>\n<code>/// @dev Calculated by dividing the base token reserves by the fractional token reserves.</code><br>\n<code>/// @return price The price of one fractional token in base tokens * 1e18.</code><br></p>\n<p>However, the formula incorrectly calculates the price to be represented in whatever number of decimals the base token is in. Since there are many common base tokens (such as USDC) that will have fewer than 18 decimals, this will create a large mismatch between expected prices and the prices that result from the function.</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Prices are calculated with the following formula, where <code>ONE = 1e18</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">_baseTokenReserves</span><span class=\"mtk1\">() * </span><span class=\"mtk12\">ONE</span><span class=\"mtk1\">) / </span><span class=\"mtk11\">fractionalTokenReserves</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p>We know that <code>fractionalTokenReserves</code> will always be represented in 18 decimals. This means that the <code>ONE</code> and the\n<code>fractionalTokenReserves</code> will cancel each other out, and we are left with the <code>baseTokenReserves</code> number of decimals for the final price.</p>\n<p>As an example:</p>\n<ul>\n<li>We have <code>$1000</code> USDC in reserves, which at 6 decimals is 1e9</li>\n<li>We have 1000 fractional tokens in reserve, which at 18 decimals is 1e21</li>\n<li>The price calculation is <code>1e9 * 1e18 / 1e21 = 1e6</code></li>\n<li>While the value should be 1 token, the 1e6 will be interpreted as just 1/1e12 tokens if we expect the price to be in 1e18</li>\n</ul>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The formula should use the decimals value of the <code>baseToken</code> to ensure that the decimals of the resulting price ends up with 18 decimals as expected:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">_baseTokenReserves</span><span class=\"mtk1\">() * </span><span class=\"mtk7\">10</span><span class=\"mtk1\"> ** (</span><span class=\"mtk7\">36</span><span class=\"mtk1\"> - </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">decimals</span><span class=\"mtk1\">()) / </span><span class=\"mtk11\">fractionalTokenReserves</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p>This will multiple <code>baseTokenReserves</code> by 1e18, and then additionally by the gap between 1e18 and its own decimals count, which will result in the correct decimals value for the outputted price.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/141#issuecomment-1373910029\">outdoteth (Caviar) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fixed in: <a href=\"https://github.com/outdoteth/caviar/pull/5\">https://github.com/outdoteth/caviar/pull/5</a></p>\n<p>Always ensure that the exponent is 18 greater than the denominator. </p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-rounding-error-in-buyquote-might-result-in-free-tokens\" style=\"position:relative;\"><a href=\"#m-03-rounding-error-in-buyquote-might-result-in-free-tokens\" aria-label=\"m 03 rounding error in buyquote might result in free tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/243\">[M-03] Rounding error in <code>buyQuote</code> might result in free tokens</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/243\">Zarf</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/481\">minhtrng</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/460\">Franfran</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/458\">Apocalypto</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/436\">adriro</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/424\">0xDave</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/409\">wait</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/391\">unforgiven</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/381\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/351\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/328\">bytehat</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/307\">UNCHAIN</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/289\">rajatbeladiya</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/276\">CRYP70</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/228\">hihen</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/208\">koxuan</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/131\">kiki_dev</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/129\">yixxas</a>, and <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/43\">chaduke</a></em></p>\n<p>In order to guarantee the contract does not become insolvent, incoming assets should be rounded up, while outgoing assets should be rounded down.</p>\n<p>The function <code>buyQuote()</code> calculates the amount of base tokens required to buy a given amount of fractional tokens. However, this function rounds down the required amount, which is in favor of the buyer (i.e. he/she has to provide less base tokens for the amount of receiving fractional tokens.</p>\n<p>Depending on the amount of current token reserves and the amount of fractional tokens the user wishes to buy, it might be possible to receive free fractional tokens.</p>\n<p>Assume the following reserve state:</p>\n<ul>\n<li>base token reserve: 0,1 WBTC (=<code>1e7</code>)</li>\n<li>fractional token reserve: 10.000.000 (=<code>1e25</code>)</li>\n</ul>\n<p>The user wishes to buy 0,9 fractional tokens (=<code>9e17</code>). Then, the function <code>buyQuote()</code> will calculate the amount of base tokens as follows:</p>\n<p><code>(9e17 * 1000 * 1e7) / ((1e25 - 9e17) * 997) = 0,903</code></p>\n<p>As division in Solidity will round down, the amount results in <code>0</code> amount of base tokens required (WBTC) to buy 0,9 fractional tokens.</p>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Using the example above, 0,9 fractional tokens is a really small amount (<code>0,1 BTC / 1e7 = +- $0,00017</code>). Moreover, if the user keeps repeating this attack, the fractional token reserve becomes smaller, which will result in a buyQuote amount of >1, after which the tokens will not be free anymore.</p>\n<p>Additionally, as the contract incorporates a fee of 30bps, it will likely not be insolvent. The downside would be the LP holder, which will receive a fee of less than 30bps. Hence, the impact is rated as medium.</p>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>For incoming assets, it’s recommended to round up the required amount. We could use solmate’s <code>FixedPointMathLib</code> library to calculate the quote and round up. This way the required amount will always at least be 1 wei:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">buyQuote</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mulDivUp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1000</span><span class=\"mtk1\">, </span><span class=\"mtk11\">baseTokenReserves</span><span class=\"mtk1\">(), (</span><span class=\"mtk11\">fractionalTokenReserves</span><span class=\"mtk1\">() - </span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\">) * </span><span class=\"mtk7\">997</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/243#issuecomment-1373918925\">outdoteth (Caviar) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fixed in: <a href=\"https://github.com/outdoteth/caviar/pull/4\">https://github.com/outdoteth/caviar/pull/4</a></p>\n<p>Uses muldivup from solmate to round up the calculation in buyQuote.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-its-possible-to-swap-nft-token-ids-without-fee-and-also-attacker-can-wrap-unwrap-all-the-nft-token-balance-of-the-pair-contract-and-steal-their-air-drops-for-those-token-ids\" style=\"position:relative;\"><a href=\"#m-04-its-possible-to-swap-nft-token-ids-without-fee-and-also-attacker-can-wrap-unwrap-all-the-nft-token-balance-of-the-pair-contract-and-steal-their-air-drops-for-those-token-ids\" aria-label=\"m 04 its possible to swap nft token ids without fee and also attacker can wrap unwrap all the nft token balance of the pair contract and steal their air drops for those token ids permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/367\">[M-04] It’s possible to swap NFT token ids without fee and also attacker can wrap unwrap all the NFT token balance of the Pair contract and steal their air drops for those token ids</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/367\">unforgiven</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/380\">imare</a> and <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/227\">ElKu</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L217-L243\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L217-L243</a> <br><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L248-L262\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L248-L262</a></p>\n<p>Users can <code>wrap()</code> their NFT tokens (which id is whitelisted) and receive <code>1e18</code> fractional token or they can pay <code>1e18</code> fractional token and unwrap NFT token. there is two issue here:</p>\n<ol>\n<li>anyone can swap their NFT token id with another NFT token id without paying any fee(both ids should be whitelisted). it’s swap without fee.</li>\n<li>attacker can swap his NFT token(with whitelisted id) for all the NFT balance of contract and steal those NFT tokens airdrop all in one transaction.</li>\n</ol>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>This is <code>wrap()</code> and <code>unwrap()</code> code:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function wrap(uint256[] calldata tokenIds, bytes32[][] calldata proofs)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        public</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        returns (uint256 fractionalTokenAmount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // *** Checks *** //</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // check that wrapping is not closed</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(closeTimestamp == 0, &quot;Wrap: closed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // check the tokens exist in the merkle root</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _validateTokenIds(tokenIds, proofs);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // *** Effects *** //</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // mint fractional tokens to sender</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        fractionalTokenAmount = tokenIds.length * ONE;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _mint(msg.sender, fractionalTokenAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // *** Interactions *** //</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // transfer nfts from sender</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i = 0; i &lt; tokenIds.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            ERC721(nft).safeTransferFrom(msg.sender, address(this), tokenIds[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit Wrap(tokenIds);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function unwrap(uint256[] calldata tokenIds) public returns (uint256 fractionalTokenAmount) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // *** Effects *** //</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // burn fractional tokens from sender</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        fractionalTokenAmount = tokenIds.length * ONE;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _burn(msg.sender, fractionalTokenAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // *** Interactions *** //</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // transfer nfts to sender</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i = 0; i &lt; tokenIds.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            ERC721(nft).safeTransferFrom(address(this), msg.sender, tokenIds[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit Unwrap(tokenIds);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>As you can see it’s possible to wrap one NFT token (which id is whitelisted and is in merkle tree) and unwrap another NFT token without paying fee. so Pair contract create NFT swap without fee for users but there is no fee generated for those who wrapped and put their fractional tokens as liquidity providers.\nThe other issue with this is that some NFT tokens air drop new NFT tokens for NFT holders by making NFT holders to call <code>getAirdrop()</code> function. attacker can use this swap functionality to get air drop token for all the NFT balance of the Pair contract. to steps to perform this attack:</p>\n<ol>\n<li>if Pair contract is for NFT1 and baseToken1 and also merkle tree root hash is 0x0.</li>\n<li>users deposited 100 NFT1 tokens to the Pair contract.</li>\n<li>NFT1 decide to airdrop some new tokens for token holders and token holders need to call <code>nft.getAirDrop(id)</code> while they own the NFT id.</li>\n<li>attacker would create a contract and buy one of the NFT1 tokens (attackerID1) and wrap it to receive <code>1e18</code> fractional tokens and perform this steps in the contract:<br>\n4.1 loop through all the NFT tokens in the Pair contract balance and:<br>\n4.2 unwrap NFT token id=i from Pair contract by paying <code>1e18</code> fractional token.<br>\n4.3 call <code>nft.getAirDrop(i)</code> and receive the new airdrop token. (the name of the function can be other thing not exactly <code>getAirDrop()</code>)<br>\n4.4 wrap NFT token id=i and receive <code>1e18</code> fractional token.</li>\n<li>in the end attacker would unwrap attackerID1 token from Pair contract.<br>\nso attacker was able to receive all the air drops of the NFT tokens that were in the contract address, there could be 100 or 1000 NFT tokens in the contract address and attacker can steal their air drops in one transaction(by writing a contract). those air drops belongs to all the fractional owners and contract shouldn’t allow one user to take all the air drops for himself. as airdrops are common in NFT collections so this bug is critical and would happen.</li>\n</ol>\n<p>also some of the NFT tokens allows users to stake some tokens for their NFT tokens and receive rewards(for example BAYC/MAYC). if a user stakes tokens for his NFT tokens then wrap those NFT tokens then it would be possible for attacker to unwrap those tokens and steal user staked amounts. in this scenario user made a risky move and wrapped NFT tokens while they have stake but as a lot of users wants to stake for their NFTs this would make them unable to use caviar protocol.</p>\n<p>also any other action that attacker can perform by becoming the owner of the NFT token is possible by this attack and if that action can harm the NFT token holders then attacker can harm by doing this attack and performing that action.</p>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VIM</p>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The real solution to prevent this attack (stealing air drops) can be hard. some of the things can be done is:</p>\n<ul>\n<li>create functionality so admin can call <code>getAirDrop()</code> functions during the airdrops before attacker.</li>\n<li>call <code>getAirDrop()</code> (which admin specified) function before unwrapping tokens.</li>\n<li>make some fee for NFT token unwrapping.</li>\n<li>create some lock time(some days) for each wrapped NFT that in that lock time only the one who supplied that token can unwrap it.</li>\n<li>create some delay for unwrapping tokens and if user wants to unwrap token he would receive it after this delay.</li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/367#event-8160517199\">outdoteth (Caviar) acknowledged, but disagreed with severity</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/367#event-8227237597\">berndartmueller (judge) decreased severity to Medium</a></strong></p>\n<hr>\n<h2 id=\"m-05-pair-price-may-be-manipulated-by-direct-transfers\" style=\"position:relative;\"><a href=\"#m-05-pair-price-may-be-manipulated-by-direct-transfers\" aria-label=\"m 05 pair price may be manipulated by direct transfers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/383\">[M-05] Pair price may be manipulated by direct transfers</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/383\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/506\">BPZ</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/482\">ak1</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/473\">Janio</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/353\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/311\">UNCHAIN</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/84\">dic0de</a>, and <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/50\">ladboy233</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L391\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L391</a> <br><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L479-L480\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L479-L480</a> <br><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L384\">https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L384</a></p>\n<p>An attacker may manipulate the price of a pair by transferring tokens directly to the pair. Since the <code>Pair</code> contract exposes the <code>price</code> function, it maybe be used as a price oracle in third-party integrations. Manipulating the price of a pair may allow an attacker to steal funds from such integrations.</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <code>Pair</code> contract is a pool of two tokens, a base token and a fractional token. Its main purpose is to allow users to swap the tokens at a fair price. Since the price is calculated based on the reserves of a pair, it can only be changed in two cases:</p>\n<ol>\n<li>when initial liquidity is added: the first liquidity provider sets the price of a pool (<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L85-L97\">Pair.sol#L85-L97</a>); other liquidity providers cannot change the price (<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L421-L423\">Pair.sol#L421-L423</a>);</li>\n<li>during trades: trading adds and removes tokens from a pool, ensuring the K constant invariant is respected (<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L194-L204\">Pair.sol#L194-L204</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L161-L173\">Pair.sol#L161-L173</a>).</li>\n</ol>\n<p>However, the Pair contract calculates the price using the current token balances of the contract (<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L379-L385\">Pair.sol#L379-L385</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L477-L481\">Pair.sol#L477-L481</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">baseTokenReserves</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_baseTokenReserves</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_baseTokenReserves</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ? </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// subtract the msg.value if the base token is ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">fractionalTokenReserves</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balanceOf</span><span class=\"mtk1\">[</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>This allows an attacker to change the price of a pool and skip the K constant invariant check that’s enforced on new liquidity (<a href=\"https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L421-L423\">Pair.sol#L421-L423</a>).</p>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider tracking pair’s reserves internally, using state variables, similarly to how Uniswap V2 does that:</p>\n<ul>\n<li><a href=\"https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol#L22-L23\">UniswapV2Pair.sol#L22-L23</a>:</li>\n</ul>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserve0</span><span class=\"mtk1\">;           </span><span class=\"mtk3\">// uses single storage slot, accessible via getReserves</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserve1</span><span class=\"mtk1\">;           </span><span class=\"mtk3\">// uses single storage slot, accessible via getReserves</span></span></span></code></pre>\n<ul>\n<li><a href=\"https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol#L38-L42\">UniswapV2Pair.sol#L38-L42</a>:</li>\n</ul>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getReserves</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_reserve0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_reserve1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestampLast</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_reserve0</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">reserve0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_reserve1</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">reserve1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_blockTimestampLast</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">blockTimestampLast</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ul>\n<li><a href=\"https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol#L38-L42\">UniswapV2Pair.sol#L38-L42</a>:</li>\n</ul>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// update reserves and, on the first call per block, price accumulators</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_update</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_reserve0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_reserve1</span><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">balance0</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk11\">uint112</span><span class=\"mtk1\">(-</span><span class=\"mtk7\">1</span><span class=\"mtk1\">) &amp;&amp; </span><span class=\"mtk12\">balance1</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk11\">uint112</span><span class=\"mtk1\">(-</span><span class=\"mtk7\">1</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;UniswapV2: OVERFLOW&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timeElapsed</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">blockTimestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">blockTimestampLast</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// overflow is desired</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">timeElapsed</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">_reserve0</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">_reserve1</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// * never overflows, and + overflow is desired</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">price0CumulativeLast</span><span class=\"mtk1\"> += </span><span class=\"mtk11\">uint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">UQ112x112</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_reserve1</span><span class=\"mtk1\">).</span><span class=\"mtk11\">uqdiv</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_reserve0</span><span class=\"mtk1\">)) * </span><span class=\"mtk12\">timeElapsed</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">price1CumulativeLast</span><span class=\"mtk1\"> += </span><span class=\"mtk11\">uint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">UQ112x112</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_reserve0</span><span class=\"mtk1\">).</span><span class=\"mtk11\">uqdiv</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_reserve1</span><span class=\"mtk1\">)) * </span><span class=\"mtk12\">timeElapsed</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">reserve0</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint112</span><span class=\"mtk1\">(</span><span class=\"mtk12\">balance0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">reserve1</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint112</span><span class=\"mtk1\">(</span><span class=\"mtk12\">balance1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">blockTimestampLast</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">blockTimestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Sync</span><span class=\"mtk1\">(</span><span class=\"mtk12\">reserve0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">reserve1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/383#issuecomment-1385868751\">minhquanym (warden) commented</a>:</strong></p>\n<blockquote>\n<p>@berndartmueller - The recommendation suggested that it should follow Uniswap V2 and add internal state balance. However, Uniswap V2 also has function <code>sync()</code> allowing to sync <code>reserve0</code> and <code>reserve1</code> to current token balance of contract. It means if this is an issue, it will also be an issue after UniV2 (by direct transfers and call <code>sync()</code> immediately). Please correct me if I missed something here\n<a href=\"https://github.com/Uniswap/v2-core/blob/ee547b17853e71ed4e0101ccfd52e70d5acded58/contracts/UniswapV2Pair.sol#L198\">https://github.com/Uniswap/v2-core/blob/ee547b17853e71ed4e0101ccfd52e70d5acded58/contracts/UniswapV2Pair.sol#L198</a>  </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/383#issuecomment-1396635210\">berndartmueller (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@minhquanym - The specific issue demonstrated in this submission is exposing the <code>Pair.price</code> function, which is easily manipulatable by direct transfers and thus vulnerable as a price oracle. Uniswap V2, in comparison, uses the concept of a cumulative price weighted by the amount of time this price existed (see <a href=\"https://docs.uniswap.org/contracts/v2/concepts/core-concepts/oracles\">https://docs.uniswap.org/contracts/v2/concepts/core-concepts/oracles</a> for more details).</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/383#event-8321057436\">outdoteth (Caviar) acknowledged</a></strong></p>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 25 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/203\">report highlighted below</a> by <strong>0xSmartContract</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/494\">SleepingBugs</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/492\">JC</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/486\">rjs</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/447\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/441\">IllIllI</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/389\">0xGusMcCrae</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/322\">h0wl</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/319\">unforgiven</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/301\">UNCHAIN</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/251\">immeas</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/238\">ahayashi</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/206\">RaymondFam</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/181\">caventa</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/170\">8olidity</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/145\">yixxas</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/135\">obront</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/124\">shung</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/114\">cozzetti</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/110\">rvierdiiev</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/98\">Bnke0x0</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/61\">Rolezn</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/60\">aviggiano</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/59\">helios</a>, and <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/45\">ladboy233</a>.</em></p>\n<h2 id=\"summary-1\" style=\"position:relative;\"><a href=\"#summary-1\" aria-label=\"summary 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<h3 id=\"low-risk-issues-list\" style=\"position:relative;\"><a href=\"#low-risk-issues-list\" aria-label=\"low risk issues list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Issues List</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Number</th>\n<th align=\"left\">Issues Details</th>\n<th align=\"center\">Context</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">[L-01]</td>\n<td align=\"left\">Missing ReEntrancy Guard to <code>withdraw</code> function</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[L-02]</td>\n<td align=\"left\">Use <code>safeTransferOwnership</code> instead of <code>transferOwnership</code> function</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[L-03]</td>\n<td align=\"left\">Loss of precision due to rounding</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[L-04]</td>\n<td align=\"left\">Solmate’s SafeTransferLib doesn’t check whether the ERC20 contract exists</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td align=\"center\">[L-05]</td>\n<td align=\"left\">Should an airdrop token arrive on the <code>pair.sol</code> contract, it will be stuck</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<p>Total 5 issues</p>\n<h3 id=\"non-critical-issues-list\" style=\"position:relative;\"><a href=\"#non-critical-issues-list\" aria-label=\"non critical issues list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Issues List</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Number</th>\n<th align=\"left\">Issues Details</th>\n<th align=\"center\">Context</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">[N-01]</td>\n<td align=\"left\">Insufficient coverage</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[N-02]</td>\n<td align=\"left\">NatSpec comments should be increased in contracts</td>\n<td align=\"center\">All Contracts</td>\n</tr>\n<tr>\n<td align=\"center\">[N-03]</td>\n<td align=\"left\"><code>Function writing</code> that does not comply with the <code>Solidity Style Guide</code></td>\n<td align=\"center\">All Contracts</td>\n</tr>\n<tr>\n<td align=\"center\">[N-04]</td>\n<td align=\"left\">Solidity compiler optimizations can be problematic</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">[N-05]</td>\n<td align=\"left\">For modern and more readable code; update import usages</td>\n<td align=\"center\">13</td>\n</tr>\n<tr>\n<td align=\"center\">[N-06]</td>\n<td align=\"left\"><em>Lock pragmas</em> to specific compiler version</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"center\">[N-07]</td>\n<td align=\"left\">Use underscores for number literals</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">[N-08]</td>\n<td align=\"left\">Use of bytes.concat() instead of <code>abi.encodePacked()</code></td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[N-09]</td>\n<td align=\"left\">Pragma version^0.8.17  version too recent to be trusted</td>\n<td align=\"center\">All Contracts</td>\n</tr>\n<tr>\n<td align=\"center\">[N-10]</td>\n<td align=\"left\">Add EIP-2981 NFT Royalty Standart Support</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[N-11]</td>\n<td align=\"left\">Showing the actual values of numbers in NatSpec comments makes checking and reading code easier</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">[N-12]</td>\n<td align=\"left\">Missing Event for critical parameters init and change</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">[N-13]</td>\n<td align=\"left\">Add to <em>blacklist function</em></td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<p>Total 13 issues</p>\n<h3 id=\"suggestions\" style=\"position:relative;\"><a href=\"#suggestions\" aria-label=\"suggestions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Suggestions</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Number</th>\n<th align=\"left\">Suggestion Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">[S-01]</td>\n<td align=\"left\">Project Upgrade and Stop Scenario should be</td>\n</tr>\n<tr>\n<td align=\"center\">[S-02]</td>\n<td align=\"left\">Generate perfect code headers every time</td>\n</tr>\n</tbody>\n</table>\n<p>Total 2 suggestions</p>\n<h2 id=\"l-01-missing-reentrancy-guard-to-withdraw-function\" style=\"position:relative;\"><a href=\"#l-01-missing-reentrancy-guard-to-withdraw-function\" aria-label=\"l 01 missing reentrancy guard to withdraw function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-01] Missing ReEntrancy Guard to <code>withdraw</code> function</h2>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/blob/main/src/Pair.sol#L359-L373\">https://github.com/code-423n4/2022-12-caviar/blob/main/src/Pair.sol#L359-L373</a></p>\n<h3 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Position.sol contract has no Re-Entrancy protection in <code>withdraw</code> function</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check that the sender is the caviar owner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">caviar</span><span class=\"mtk1\">.</span><span class=\"mtk11\">owner</span><span class=\"mtk1\">() == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Withdraw: not owner&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check that the close period has been set</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">closeTimestamp</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Withdraw not initiated&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check that the close grace period has passed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">closeTimestamp</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not withdrawable yet&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// transfer the nft to the caviar owner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">ERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>If the mint was initiated by a contract, then the contract is checked for its ability to receive ERC721 tokens. Without reentrancy guard, onERC721Received will allow an attacker controlled contract to call the mint again, which may not be desirable to some parties, like allowing minting more than allowed.<br>\n<a href=\"https://www.paradigm.xyz/2021/08/the-dangers-of-surprising-code\">https://www.paradigm.xyz/2021/08/the-dangers-of-surprising-code</a></p>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>If <code>withdraw</code> is msg.sender contract, it can do re-entrancy by overriding <code>onERC721Received</code> function, it doesn’t seem to be a serious problem since it conforms to check-effect-interaction pattern, but this is a clear re-entry due to access to other functions and pre-emit processing. is the entracy</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">reentrancy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC721Received</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//...do something</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">onERC721Received</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use Openzeppelin or Solmate Re-Entrancy pattern.<br>\nHere is a example of a re-entrancy guard</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">13</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ReEntrancyGuard</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">locked</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">modifier</span><span class=\"mtk1\"> </span><span class=\"mtk11\">noReentrant</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk12\">locked</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;No re-entrancy&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">locked</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">locked</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h2 id=\"l-02-use-safetransferownership-instead-of-transferownership-function\" style=\"position:relative;\"><a href=\"#l-02-use-safetransferownership-instead-of-transferownership-function\" aria-label=\"l 02 use safetransferownership instead of transferownership function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-02] Use <code>safeTransferOwnership</code> instead of <code>transferOwnership</code> function</h2>\n<p><strong>Context:</strong></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">files</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Caviar</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">4</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/auth/Owned.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">12</span><span class=\"mtk1\">: </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Caviar</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Owned</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LpToken</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">4</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/auth/Owned.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">11</span><span class=\"mtk1\">: </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LpToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Owned</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ERC20</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><strong>Description:</strong><br>\n<code>transferOwnership</code> function is used to change Ownership from <code>Owned.sol</code>.</p>\n<p>Use a 2 structure transferOwnership which is safer.<br>\n<code>safeTransferOwnership</code>,  use it is more secure due to 2-stage ownership transfer.</p>\n<p><strong>Recommendation:</strong><br>\nUse <code>Ownable2Step.sol</code><br>\n<a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable2Step.sol\">Ownable2Step.sol</a></p>\n<h2 id=\"l-03-loss-of-precision-due-to-rounding\" style=\"position:relative;\"><a href=\"#l-03-loss-of-precision-due-to-rounding\" aria-label=\"l 03 loss of precision due to rounding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-03] Loss of precision due to rounding</h2>\n<p>Add scalars so roundings are negligible</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">390</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">price</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">391</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">_baseTokenReserves</span><span class=\"mtk1\">() * </span><span class=\"mtk12\">ONE</span><span class=\"mtk1\">) / </span><span class=\"mtk11\">fractionalTokenReserves</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">392</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<h2 id=\"l-04-solmates-safetransferlib-doesnt-check-whether-the-erc20-contract-exists\" style=\"position:relative;\"><a href=\"#l-04-solmates-safetransferlib-doesnt-check-whether-the-erc20-contract-exists\" aria-label=\"l 04 solmates safetransferlib doesnt check whether the erc20 contract exists permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-04] Solmate’s <code>SafeTransferLib</code> doesn’t check whether the ERC20 contract exists</h2>\n<p>Solmate’s SafeTransferLib, which is often used to interact with non-compliant/unsafe ERC20 tokens, does not check whether the ERC20 contract exists. The following code will not revert in case the token doesn’t exist (yet).</p>\n<p>This is stated in the Solmate library:\n<a href=\"https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol#L9\">https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol#L9</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">10</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">file</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">94</span><span class=\"mtk1\">              </span><span class=\"mtk3\">// transfer base tokens in</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">95</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">baseTokenAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">96</span><span class=\"mtk1\">          }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">133</span><span class=\"mtk1\">              </span><span class=\"mtk3\">// if base token is native ETH then send ether to sender</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">134</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseTokenOutputAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">135</span><span class=\"mtk1\">          } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">136</span><span class=\"mtk1\">              </span><span class=\"mtk3\">// transfer base tokens to sender</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">137</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">baseTokenOutputAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">138</span><span class=\"mtk1\">          }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">168</span><span class=\"mtk1\">              </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">refundAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">maxInputAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">inputAmount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">169</span><span class=\"mtk1\">:             </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">refundAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">refundAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">170</span><span class=\"mtk1\">          } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">171</span><span class=\"mtk1\">              </span><span class=\"mtk3\">// transfer base tokens in</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">172</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">inputAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">173</span><span class=\"mtk1\">          }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">199</span><span class=\"mtk1\">              </span><span class=\"mtk3\">// transfer ether out</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">200</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">201</span><span class=\"mtk1\">          } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">202</span><span class=\"mtk1\">              </span><span class=\"mtk3\">// transfer base tokens out</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">203</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">204</span><span class=\"mtk1\">          }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">238</span><span class=\"mtk1\">          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">239</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">ERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">240</span><span class=\"mtk1\">          }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">258</span><span class=\"mtk1\">          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">259</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">ERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">260</span><span class=\"mtk1\">          }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">369</span><span class=\"mtk1\">          </span><span class=\"mtk3\">// transfer the nft to the caviar owner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">370</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">ERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">371</span><span class=\"mtk1\"> </span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add a contract exist control in functions;</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> &gt;=</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isContract</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_addr</span><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isContract</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">isContract</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_addr</span><span class=\"mtk1\">.</span><span class=\"mtk12\">code</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h2 id=\"l-05-should-an-airdrop-token-arrive-on-the-pairsol-contract-it-will-be-stuck\" style=\"position:relative;\"><a href=\"#l-05-should-an-airdrop-token-arrive-on-the-pairsol-contract-it-will-be-stuck\" aria-label=\"l 05 should an airdrop token arrive on the pairsol contract it will be stuck permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-05] Should an airdrop token arrive on the <code>pair.sol</code> contract, it will be stuck</h2>\n<p>With the <code>wrap()</code> function, NFTs are transferred to the contract and in case of airdrop due to these NFTs, it will be stuck in the contract as there is no function to take these airdrop tokens from the contract.</p>\n<p>Important NFT project owners are given airdrops, especially since the project includes NFTs such as BAYC, Moonbirds, Doodles, Azuki, there is a high probability of receiving Airdrops, but there is no function to withdraw incoming airdrop tokens, so airdrop tokens will be stuck in the contract.</p>\n<p>A common method for airdrops is to collect airdrops with <code>claim</code>, so the <code>Pair.sol</code> contract can be considered upgradagable, adding a function to make <code>claim</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">216</span><span class=\"mtk1\">      </span><span class=\"mtk3\">/// @return fractionalTokenAmount The amount of fractional tokens minted.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">217</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">wrap</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proofs</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  218:         </span><span class=\"mtk11\">public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  219:         </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fractionalTokenAmount</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  220:     {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">221</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// *** Checks *** //</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">222</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">223</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// check that wrapping is not closed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">224</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">closeTimestamp</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Wrap: closed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">225</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">226</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// check the tokens exist in the merkle root</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">227</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">_validateTokenIds</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">, </span><span class=\"mtk12\">proofs</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">228</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">229</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// *** Effects *** //</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">230</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">231</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// mint fractional tokens to sender</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">232</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">fractionalTokenAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">ONE</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">233</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">_mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">fractionalTokenAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">234</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">235</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// *** Interactions *** //</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">236</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">237</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// transfer nfts from sender</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">238</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">239</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">ERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">240</span><span class=\"mtk1\">:         }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">241</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">242</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Wrap</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">243</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add this code:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">  * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> Sends ERC20 tokens trapped in contract to external address</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">  * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> Onlyowner is allowed to make this function call</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">  * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">account</span><span class=\"mtk3\"> is the receiving address</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">  * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">externalToken</span><span class=\"mtk3\"> is the token being sent</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">  * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk3\"> is the quantity being sent</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">  * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> boolean value indicating whether the operation succeeded.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">  *</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rescueERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">externalToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">externalToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h2 id=\"n-01-insufficient-coverage\" style=\"position:relative;\"><a href=\"#n-01-insufficient-coverage\" aria-label=\"n 01 insufficient coverage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-01] Insufficient coverage</h2>\n<p><strong>Description:</strong><br>\nThe test coverage rate of the project is 97%. Testing all functions is best practice in terms of security criteria.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">| </span><span class=\"mtk12\">File</span><span class=\"mtk1\">                                     | % </span><span class=\"mtk12\">Lines</span><span class=\"mtk1\">          | % </span><span class=\"mtk12\">Statements</span><span class=\"mtk1\">      | % </span><span class=\"mtk12\">Branches</span><span class=\"mtk1\">     | % </span><span class=\"mtk12\">Funcs</span><span class=\"mtk1\">        |</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">|------------------------------------------|------------------|-------------------|----------------|----------------|</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">| </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Caviar</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">                           | </span><span class=\"mtk7\">100.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">11</span><span class=\"mtk1\">/</span><span class=\"mtk7\">11</span><span class=\"mtk1\">)  | </span><span class=\"mtk7\">100.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">15</span><span class=\"mtk1\">/</span><span class=\"mtk7\">15</span><span class=\"mtk1\">)   | </span><span class=\"mtk7\">100.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">4</span><span class=\"mtk1\">/</span><span class=\"mtk7\">4</span><span class=\"mtk1\">)  | </span><span class=\"mtk7\">100.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">2</span><span class=\"mtk1\">/</span><span class=\"mtk7\">2</span><span class=\"mtk1\">)  |</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">| </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LpToken</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">                          | </span><span class=\"mtk7\">100.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">2</span><span class=\"mtk1\">/</span><span class=\"mtk7\">2</span><span class=\"mtk1\">)    | </span><span class=\"mtk7\">100.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">2</span><span class=\"mtk1\">/</span><span class=\"mtk7\">2</span><span class=\"mtk1\">)     | </span><span class=\"mtk7\">100.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">0</span><span class=\"mtk1\">/</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)  | </span><span class=\"mtk7\">100.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">2</span><span class=\"mtk1\">/</span><span class=\"mtk7\">2</span><span class=\"mtk1\">)  |</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">| </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">                             | </span><span class=\"mtk7\">100.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">88</span><span class=\"mtk1\">/</span><span class=\"mtk7\">88</span><span class=\"mtk1\">)  | </span><span class=\"mtk7\">100.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">107</span><span class=\"mtk1\">/</span><span class=\"mtk7\">107</span><span class=\"mtk1\">) | </span><span class=\"mtk7\">95.24</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">40</span><span class=\"mtk1\">/</span><span class=\"mtk7\">42</span><span class=\"mtk1\">) | </span><span class=\"mtk7\">86.36</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">19</span><span class=\"mtk1\">/</span><span class=\"mtk7\">22</span><span class=\"mtk1\">) |</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">| </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SafeERC20Namer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">               | </span><span class=\"mtk7\">0.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">0</span><span class=\"mtk1\">/</span><span class=\"mtk7\">38</span><span class=\"mtk1\">)     | </span><span class=\"mtk7\">0.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">0</span><span class=\"mtk1\">/</span><span class=\"mtk7\">53</span><span class=\"mtk1\">)      | </span><span class=\"mtk7\">0.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">0</span><span class=\"mtk1\">/</span><span class=\"mtk7\">12</span><span class=\"mtk1\">)   | </span><span class=\"mtk7\">0.00</span><span class=\"mtk1\">% (</span><span class=\"mtk7\">0</span><span class=\"mtk1\">/</span><span class=\"mtk7\">7</span><span class=\"mtk1\">)    |</span></span></span></code></pre>\n<p>Due to its capacity, test coverage is expected to be 100%.</p>\n<h2 id=\"n-02-natspec-comments-should-be-increased-in-contracts\" style=\"position:relative;\"><a href=\"#n-02-natspec-comments-should-be-increased-in-contracts\" aria-label=\"n 02 natspec comments should be increased in contracts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-02] NatSpec comments should be increased in contracts</h2>\n<p><strong>Context:</strong><br>\nAll Contracts</p>\n<p><strong>Description:</strong><br>\nIt is recommended that Solidity contracts are fully annotated using NatSpec for all public interfaces (everything in the ABI). It is clearly stated in the Solidity official documentation.<br>\nIn complex projects such as Defi, the interpretation of all functions and their arguments and returns is important for code readability and auditability.<br>\n<a href=\"https://docs.soliditylang.org/en/v0.8.15/natspec-format.html\">https://docs.soliditylang.org/en/v0.8.15/natspec-format.html</a></p>\n<p><strong>Recommendation:</strong><br>\nNatSpec comments should be increased in contracts</p>\n<h2 id=\"n-03-function-writing-that-does-not-comply-with-the-solidity-style-guide\" style=\"position:relative;\"><a href=\"#n-03-function-writing-that-does-not-comply-with-the-solidity-style-guide\" aria-label=\"n 03 function writing that does not comply with the solidity style guide permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-03] <code>Function writing</code> that does not comply with the <code>Solidity Style Guide</code></h2>\n<p><strong>Context:</strong><br>\nAll Contracts</p>\n<p><strong>Description:</strong><br>\nOrder of Functions; ordering helps readers identify which functions they can call and to find the constructor and fallback definitions easier. But there are contracts in the project that do not comply with this.</p>\n<p><a href=\"https://docs.soliditylang.org/en/v0.8.17/style-guide.html\">https://docs.soliditylang.org/en/v0.8.17/style-guide.html</a></p>\n<p>Functions should be grouped according to their visibility and ordered:</p>\n<ul>\n<li>constructor</li>\n<li>receive function (if exists)</li>\n<li>fallback function (if exists)</li>\n<li>external</li>\n<li>public</li>\n<li>internal</li>\n<li>private</li>\n<li>within a grouping, place the view and pure functions last</li>\n</ul>\n<h2 id=\"n-04-solidity-compiler-optimizations-can-be-problematic\" style=\"position:relative;\"><a href=\"#n-04-solidity-compiler-optimizations-can-be-problematic\" aria-label=\"n 04 solidity compiler optimizations can be problematic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-04] Solidity compiler optimizations can be problematic</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">foundry</span><span class=\"mtk1\">.</span><span class=\"mtk12\">toml</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">1</span><span class=\"mtk1\">: [</span><span class=\"mtk12\">profile</span><span class=\"mtk1\">.</span><span class=\"mtk12\">default</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">2</span><span class=\"mtk1\">: </span><span class=\"mtk12\">src</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&quot;src&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">3</span><span class=\"mtk1\">: </span><span class=\"mtk12\">out</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&quot;out&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">4</span><span class=\"mtk1\">: </span><span class=\"mtk12\">libs</span><span class=\"mtk1\"> = [</span><span class=\"mtk8\">&quot;lib&quot;</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">5</span><span class=\"mtk1\">: </span><span class=\"mtk12\">solc</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&quot;0.8.17&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">6</span><span class=\"mtk1\">: </span><span class=\"mtk12\">optimizer_runs</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">3_000</span></span></span></code></pre>\n<p><strong>Description:</strong><br>\nProtocol has enabled optional compiler optimizations in Solidity.<br>\nThere have been several optimization bugs with security implications. Moreover, optimizations are actively being developed. Solidity compiler optimizations are disabled by default, and it is unclear how many contracts in the wild actually use them. </p>\n<p>Therefore, it is unclear how well they are being tested and exercised.<br>\nHigh-severity security issues due to optimization bugs have occurred in the past. A high-severity bug in the emscripten-generated solc-js compiler used by Truffle and Remix persisted until late 2018. The fix for this bug was not reported in the Solidity CHANGELOG. </p>\n<p>Another high-severity optimization bug resulting in incorrect bit shift results was patched in Solidity 0.5.6. More recently, another bug due to the incorrect caching of keccak256 was reported.<br>\nA compiler audit of Solidity from November 2018 concluded that the optional optimizations may not be safe.<br>\nIt is likely that there are latent bugs related to optimization and that new bugs will be introduced due to future optimizations.</p>\n<p><strong>Exploit Scenario:</strong><br>\nA latent or future bug in Solidity compiler optimizations—or in the Emscripten transpilation to solc-js—causes a security vulnerability in the contracts.</p>\n<p><strong>Recommendation:</strong><br>\nShort term, measure the gas savings from optimizations and carefully weigh them against the possibility of an optimization-related bug.\nLong term, monitor the development and adoption of Solidity compiler optimizations to assess their maturity.</p>\n<h2 id=\"n-05-for-modern-and-more-readable-code-update-import-usages\" style=\"position:relative;\"><a href=\"#n-05-for-modern-and-more-readable-code-update-import-usages\" aria-label=\"n 05 for modern and more readable code update import usages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-05] For modern and more readable code; update import usages</h2>\n<p><strong>Context:</strong></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">13</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">files</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Caviar</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">3</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">4</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/auth/Owned.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">5</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">6</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;./lib/SafeERC20Namer.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">7</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;./Pair.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">8</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LpToken</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">3</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">4</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/auth/Owned.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">5</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/tokens/ERC20.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">6</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">3</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">4</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/tokens/ERC20.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">5</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/tokens/ERC721.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">6</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/utils/MerkleProofLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">7</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/utils/SafeTransferLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">8</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;openzeppelin/utils/math/Math.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">9</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">10</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;./LpToken.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">11</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;./Caviar.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">12</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SafeERC20Namer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">3</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">4</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;openzeppelin/utils/Strings.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">5</span><span class=\"mtk1\"> </span></span></span></code></pre>\n<p><strong>Description:</strong><br>\nSolidity code is also cleaner in another way that might not be noticeable: the struct Point. We were importing it previously with global import but not using it. The Point struct <code>polluted the source code</code> with an unnecessary object we were not using because we did not need it. <br>\nThis was breaking the rule of modularity and modular programming: <code>only import what you need</code> Specific imports with curly braces allow us to apply this rule better.</p>\n<p><strong>Recommendation:</strong><br>\n<code>import {contract1 , contract2} from \"filename.sol\";</code></p>\n<p>A good example from the ArtGobblers project;</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">Owned</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/auth/Owned.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">ERC721</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/tokens/ERC721.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">LibString</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/utils/LibString.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">MerkleProofLib</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/utils/MerkleProofLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">FixedPointMathLib</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/utils/FixedPointMathLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">ERC1155</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ERC1155TokenReceiver</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/tokens/ERC1155.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">toWadUnsafe</span><span class=\"mtk1\">, </span><span class=\"mtk12\">toDaysWadUnsafe</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/utils/SignedWadMath.sol&quot;</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"n-06-lock-pragmas-to-specific-compiler-version\" style=\"position:relative;\"><a href=\"#n-06-lock-pragmas-to-specific-compiler-version\" aria-label=\"n 06 lock pragmas to specific compiler version permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-06] <em>Lock pragmas</em> to specific compiler version</h2>\n<p><strong>Description:</strong><br>\nPragma statements can be allowed to float when a contract is intended for consumption by other developers, as in the case with contracts in a library or EthPM package. Otherwise, the developer would need to manually update the pragma in order to compile locally.<br>\n<a href=\"https://swcregistry.io/docs/SWC-103\">https://swcregistry.io/docs/SWC-103</a></p>\n<p><strong>Recommendation:</strong><br>\nEthereum Smart Contract Best Practices - Lock pragmas to specific compiler version.<br>\n<a href=\"https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/locking-pragmas/\">solidity-specific/locking-pragmas</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">5</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">files</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Caviar</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">1</span><span class=\"mtk1\">  </span><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">2</span><span class=\"mtk1\">: </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">17</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">3</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LpToken</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">1</span><span class=\"mtk1\">  </span><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">2</span><span class=\"mtk1\">: </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">17</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">3</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">1</span><span class=\"mtk1\">  </span><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">2</span><span class=\"mtk1\">: </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">17</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">3</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SafeERC20Namer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">1</span><span class=\"mtk1\">  </span><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">2</span><span class=\"mtk1\">: </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">17</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"n-07-use-underscores-for-number-literals\" style=\"position:relative;\"><a href=\"#n-07-use-underscores-for-number-literals\" aria-label=\"n 07 use underscores for number literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-07] Use underscores for number literals</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">file</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">399</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1000</span><span class=\"mtk1\"> * </span><span class=\"mtk11\">baseTokenReserves</span><span class=\"mtk1\">()) / ((</span><span class=\"mtk11\">fractionalTokenReserves</span><span class=\"mtk1\">() - </span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\">) * </span><span class=\"mtk7\">997</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">413</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">inputAmountWithFee</span><span class=\"mtk1\"> * </span><span class=\"mtk11\">baseTokenReserves</span><span class=\"mtk1\">()) / ((</span><span class=\"mtk11\">fractionalTokenReserves</span><span class=\"mtk1\">() * </span><span class=\"mtk7\">1000</span><span class=\"mtk1\">) + </span><span class=\"mtk12\">inputAmountWithFee</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong>Description:</strong><br>\nThere are occasions where certain numbers have been hardcoded, either in variable or in the code itself. Large numbers can become hard to read.</p>\n<p><strong>Recommendation:</strong><br>\nConsider using underscores for number literals to improve its readability.</p>\n<h2 id=\"n-08-use-of-bytesconcat-instead-of-abiencodepacked\" style=\"position:relative;\"><a href=\"#n-08-use-of-bytesconcat-instead-of-abiencodepacked\" aria-label=\"n 08 use of bytesconcat instead of abiencodepacked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-08] Use of <code>bytes.concat()</code> instead of <code>abi.encodePacked()</code></h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">file</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">473</span><span class=\"mtk1\">          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">474</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isValid</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">MerkleProofLib</span><span class=\"mtk1\">.</span><span class=\"mtk11\">verify</span><span class=\"mtk1\">(</span><span class=\"mtk12\">proofs</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk12\">merkleRoot</span><span class=\"mtk1\">, </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">])));</span></span></span></code></pre>\n<p>Rather than using <code>abi.encodePacked</code> for appending bytes, since version 0.8.4, <code>bytes.concat()</code> is enabled.</p>\n<p>Since version 0.8.4 for appending bytes, <code>bytes.concat()</code> can be used instead of <code>abi.encodePacked(,)</code></p>\n<h2 id=\"n-09-pragma-version0817--version-too-recent-to-be-trusted\" style=\"position:relative;\"><a href=\"#n-09-pragma-version0817--version-too-recent-to-be-trusted\" aria-label=\"n 09 pragma version0817  version too recent to be trusted permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-09] Pragma version^0.8.17  version too recent to be trusted.</h2>\n<p><a href=\"https://github.com/ethereum/solidity/blob/develop/Changelog.md\">https://github.com/ethereum/solidity/blob/develop/Changelog.md</a><br>\n0.8.17 (2022-09-08)<br>\n0.8.16 (2022-08-08)<br>\n0.8.15 (2022-06-15)<br>\n0.8.10 (2021-11-09)</p>\n<p>Unexpected bugs can be reported in recent versions;<br>\nRisks related to recent releases<br>\nRisks of complex code generation changes<br>\nRisks of new language features<br>\nRisks of known bugs</p>\n<p>Use a non-legacy and more battle-tested version<br>\nUse 0.8.10</p>\n<h2 id=\"n-10-add-eip-2981-nft-royalty-standart-support\" style=\"position:relative;\"><a href=\"#n-10-add-eip-2981-nft-royalty-standart-support\" aria-label=\"n 10 add eip 2981 nft royalty standart support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-10] Add EIP-2981 NFT Royalty Standart Support</h2>\n<p>Consider adding EIP-2981 NFT Royalty Standard to the project</p>\n<p><a href=\"https://eips.ethereum.org/EIPS/eip-2981\">https://eips.ethereum.org/EIPS/eip-2981</a></p>\n<p>Royalty (Copyright – EIP 2981):</p>\n<ul>\n<li>Fixed % royalties: For example, 6% of all sales go back to artists</li>\n<li>Declining royalties: There may be a continuous decline in sales based on time or any other variable.</li>\n<li>Dynamic royalties: Varies over time or sales amount</li>\n<li>Upgradeable royalties: Allows a legal entity or NFT owner to change any copyright</li>\n<li>Incremental royalties: No royalties, for example when sold for less than <code>$100</code></li>\n<li>Managed royalties: Funds are owned by a DAO, imagine the recipient is a DAO treasury</li>\n<li>Royalties to different people: Collectors and artists can even use royalties, not specific to a particular personality</li>\n</ul>\n<h2 id=\"n-11-showing-the-actual-values-of-numbers-in-natspec-comments-makes-checking-and-reading-code-easier\" style=\"position:relative;\"><a href=\"#n-11-showing-the-actual-values-of-numbers-in-natspec-comments-makes-checking-and-reading-code-easier\" aria-label=\"n 11 showing the actual values of numbers in natspec comments makes checking and reading code easier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-11] Showing the actual values of numbers in NatSpec comments makes checking and reading code easier</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">src/Pair.sol:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  19  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-  20:     uint256 public constant ONE = 1e18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  20:     uint256 public constant ONE = 1e18;  // 1_000_000_000_000_000_000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-  21:     uint256 public constant CLOSE_GRACE_PERIOD = 7 days; </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  21:     uint256 public constant CLOSE_GRACE_PERIOD = 7 days; // 604_800 ( 7 * 24 * 60 * 60)</span></span></span></code></pre>\n<h2 id=\"n-12-missing-event-for-critical-parameters-init-and-change\" style=\"position:relative;\"><a href=\"#n-12-missing-event-for-critical-parameters-init-and-change\" aria-label=\"n 12 missing event for critical parameters init and change permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-12] Missing Event for critical parameters init and change</h2>\n<p><strong>Context:</strong></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">38</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">39</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">40</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">41</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_baseToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">42</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_merkleRoot</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">43</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">44</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nftName</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">45</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nftSymbol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">46</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftName</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot; fractional token&quot;</span><span class=\"mtk1\">), </span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;f&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nftSymbol</span><span class=\"mtk1\">), </span><span class=\"mtk7\">18</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">47</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">nft</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">48</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_baseToken</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// use address(0) for native ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">49</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">merkleRoot</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_merkleRoot</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">50</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">lpToken</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">LpToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">51</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">caviar</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">Caviar</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">52</span><span class=\"mtk1\">:     }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LpToken</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">11</span><span class=\"mtk1\">  </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LpToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Owned</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ERC20</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">12</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">13</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">Owned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">14</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot; LP token&quot;</span><span class=\"mtk1\">), </span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;LP-&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\">), </span><span class=\"mtk7\">18</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">15</span><span class=\"mtk1\">:     {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">38</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">39</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">40</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">41</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_baseToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">42</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_merkleRoot</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">43</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">44</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nftName</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">45</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nftSymbol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">46</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftName</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot; fractional token&quot;</span><span class=\"mtk1\">), </span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;f&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nftSymbol</span><span class=\"mtk1\">), </span><span class=\"mtk7\">18</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">47</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">nft</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">48</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_baseToken</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// use address(0) for native ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">49</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">merkleRoot</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_merkleRoot</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">50</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">lpToken</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">LpToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">51</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">caviar</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">Caviar</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">52</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<p><strong>Description:</strong><br>\nEvents help non-contract tools to track changes, and events prevent users from being surprised by changes</p>\n<p><strong>Recommendation:</strong><br>\nAdd Event-Emit</p>\n<h2 id=\"n-13-add-to-blacklist-function\" style=\"position:relative;\"><a href=\"#n-13-add-to-blacklist-function\" aria-label=\"n 13 add to blacklist function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-13] Add to <em>blacklist function</em></h2>\n<p>NFT thefts have increased recently, so with the addition of hacked NFTs to the platform, NFTs can be converted into liquidity.\nTo prevent this, I recommend adding the blacklist function.</p>\n<p>Marketplaces such as Opensea have a blacklist feature that will not list NFTs that have been reported theft, NFT projects such as Manifold have blacklist functions in their smart contracts.</p>\n<p>Here is the project example; Manifold</p>\n<p>Manifold Contract<br>\n<a href=\"https://etherscan.io/address/0xe4e4003afe3765aca8149a82fc064c0b125b9e5a#code\">https://etherscan.io/address/0xe4e4003afe3765aca8149a82fc064c0b125b9e5a#code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     </span><span class=\"mtk12\">modifier</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonBlacklistRequired</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">extension</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk12\">_blacklistedExtensions</span><span class=\"mtk1\">.</span><span class=\"mtk11\">contains</span><span class=\"mtk1\">(</span><span class=\"mtk12\">extension</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Extension blacklisted&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         </span><span class=\"mtk12\">_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     }</span></span></span></code></pre>\n<p><strong>Recommended Mitigation Steps:</strong><br>\nAdd to Blacklist function and modifier.</p>\n<h2 id=\"s-01-project-upgrade-and-stop-scenario-should-be\" style=\"position:relative;\"><a href=\"#s-01-project-upgrade-and-stop-scenario-should-be\" aria-label=\"s 01 project upgrade and stop scenario should be permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[S-01] Project Upgrade and Stop Scenario should be</h2>\n<p>At the start of the project, the system may need to be stopped or upgraded, I suggest you have a script beforehand and add it to the documentation.<br>\nThis can also be called an ” EMERGENCY STOP (CIRCUIT BREAKER) PATTERN “.</p>\n<p><a href=\"https://github.com/maxwoe/solidity_patterns/blob/master/security/EmergencyStop.sol\">https://github.com/maxwoe/solidity_patterns/blob/master/security/EmergencyStop.sol</a></p>\n<h2 id=\"s-02-generate-perfect-code-headers-every-time\" style=\"position:relative;\"><a href=\"#s-02-generate-perfect-code-headers-every-time\" aria-label=\"s 02 generate perfect code headers every time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[S-02] Generate perfect code headers every time</h2>\n<p><strong>Description:</strong><br>\nI recommend using header for Solidity code layout and readability</p>\n<p><a href=\"https://github.com/transmissions11/headers\">https://github.com/transmissions11/headers</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/*//////////////////////////////////////////////////////////////</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">                           TESTING 123</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//////////////////////////////////////////////////////////////*/</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/203#issuecomment-1373927645\">outdoteth (Caviar) commented</a>:</strong></p>\n<blockquote>\n<p>Great report</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/203#issuecomment-1383991559\">berndartmueller commented</a>:</strong></p>\n<blockquote>\n<p>Great report by the warden!</p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 31 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/62\">report highlighted below</a> by <strong>Rolezn</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/496\">SleepingBugs</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/491\">JC</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/464\">Breeje</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/457\">Aymen0909</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/452\">c3phas</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/440\">IllIllI</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/426\">lukris02</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/418\">cryptonue</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/410\">Madalad</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/399\">Diana</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/373\">ret2basic</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/372\">tnevler</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/360\">0xAgro</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/347\">carlitox477</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/345\">gz627</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/282\">RaymondFam</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/226\">0xSmartContract</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/204\">NoamYakov</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/201\">0xab00</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/194\">JrNet</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/148\">HardlyCodeMan</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/120\">pavankv</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/96\">Bnke0x0</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/81\">ReyAdmirado</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/70\">oyc_109</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/69\">millersplanet</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/67\">saneryee</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/26\">0x1f8b</a>, <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/8\">UdarTeam</a>, and <a href=\"https://github.com/code-423n4/2022-12-caviar-findings/issues/2\">0xhacksmithh</a>.</em></p>\n<h2 id=\"summary-2\" style=\"position:relative;\"><a href=\"#summary-2\" aria-label=\"summary 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"left\">Contexts</th>\n<th align=\"center\">Estimated Gas Saved</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>G‑01</td>\n<td align=\"left\"><code>&#x3C;x> += &#x3C;y></code> Costs More Gas Than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> For State Variables</td>\n<td align=\"left\">3</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>G‑02</td>\n<td align=\"left\"><code>++i</code>/<code>i++</code> Should Be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> When It Is Not Possible For Them To Overflow, As Is The Case When Used In For- And While-loops</td>\n<td align=\"left\">7</td>\n<td align=\"center\">245</td>\n</tr>\n<tr>\n<td>G‑03</td>\n<td align=\"left\"><code>require()</code>/<code>revert()</code> Strings Longer Than 32 Bytes Cost Extra Gas</td>\n<td align=\"left\">4</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>G‑04</td>\n<td align=\"left\">Splitting <code>require()</code> Statements That Use <code>&#x26;&#x26;</code> Saves Gas</td>\n<td align=\"left\">1</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td>G‑05</td>\n<td align=\"left\">Public Functions To External</td>\n<td align=\"left\">18</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>G‑06</td>\n<td align=\"left\">Optimize names to save gas</td>\n<td align=\"left\">3</td>\n<td align=\"center\">66</td>\n</tr>\n<tr>\n<td>G‑07</td>\n<td align=\"left\">Using fixed bytes is cheaper than using <code>string</code></td>\n<td align=\"left\">2</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>G‑08</td>\n<td align=\"left\">Superfluous event fields</td>\n<td align=\"left\">1</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>G‑09</td>\n<td align=\"left\"><code>internal</code> functions only called once can be inlined to save gas</td>\n<td align=\"left\">3</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>G‑10</td>\n<td align=\"left\">Setting the <code>constructor</code> to <code>payable</code></td>\n<td align=\"left\">3</td>\n<td align=\"center\">39</td>\n</tr>\n<tr>\n<td>G‑11</td>\n<td align=\"left\">Functions guaranteed to revert when called by normal users can be marked <code>payable</code></td>\n<td align=\"left\">2</td>\n<td align=\"center\">42</td>\n</tr>\n<tr>\n<td>G‑12</td>\n<td align=\"left\">Using <code>unchecked</code> blocks to save gas</td>\n<td align=\"left\">1</td>\n<td align=\"center\">136</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 48 contexts over 12 issues</p>\n<h2 id=\"g-01-x--y-costs-more-gas-than-x--x--y-for-state-variables\" style=\"position:relative;\"><a href=\"#g-01-x--y-costs-more-gas-than-x--x--y-for-state-variables\" aria-label=\"g 01 x  y costs more gas than x  x  y for state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01] <code>&#x3C;x> += &#x3C;y></code> Costs More Gas Than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> For State Variables</h2>\n<h3 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">448</span><span class=\"mtk1\">: </span><span class=\"mtk12\">balanceOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">from</span><span class=\"mtk1\">] -= </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">453</span><span class=\"mtk1\">: </span><span class=\"mtk12\">balanceOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">to</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L448\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L448</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L453\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L453</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">35</span><span class=\"mtk1\">: </span><span class=\"mtk12\">charCount</span><span class=\"mtk1\"> += </span><span class=\"mtk11\">uint8</span><span class=\"mtk1\">(</span><span class=\"mtk12\">b</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib%5CSafeERC20Namer.sol#L35\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L35</a></p>\n<h2 id=\"g-02-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" style=\"position:relative;\"><a href=\"#g-02-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" aria-label=\"g 02 ii should be uncheckediuncheckedi when it is not possible for them to overflow as is the case when used in for  and while loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-02] <code>++i</code>/<code>i++</code> Should Be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> When It Is Not Possible For Them To Overflow, As Is The Case When Used In For- And While-loops</h2>\n<p>The unchecked keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves 30-40 gas PER LOOP</p>\n<h3 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">238</span><span class=\"mtk1\">: </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L238\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L238</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">258</span><span class=\"mtk1\">: </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L258\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L258</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">468</span><span class=\"mtk1\">: </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L468\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L468</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">13</span><span class=\"mtk1\">: </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">32</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib%5CSafeERC20Namer.sol#L13\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L13</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">22</span><span class=\"mtk1\">: </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">charCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib%5CSafeERC20Namer.sol#L22\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L22</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">33</span><span class=\"mtk1\">: </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">32</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">64</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib%5CSafeERC20Namer.sol#L33\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L33</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">39</span><span class=\"mtk1\">: </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">charCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib%5CSafeERC20Namer.sol#L39\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L39</a></p>\n<h2 id=\"g-03-requirerevert-strings-longer-than-32-bytes-cost-extra-gas\" style=\"position:relative;\"><a href=\"#g-03-requirerevert-strings-longer-than-32-bytes-cost-extra-gas\" aria-label=\"g 03 requirerevert strings longer than 32 bytes cost extra gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-03] <code>require()</code>/<code>revert()</code> Strings Longer Than 32 Bytes Cost Extra Gas</h2>\n<h3 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">51</span><span class=\"mtk1\">: </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">pairs</span><span class=\"mtk1\">[</span><span class=\"mtk12\">nft</span><span class=\"mtk1\">][</span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\">][</span><span class=\"mtk12\">merkleRoot</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot;Only pair can destroy itself&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L51\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L51</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">80</span><span class=\"mtk1\">: </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpTokenAmount</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">minLpTokenAmount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Slippage: lp token amount out&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L80\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L80</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">117</span><span class=\"mtk1\">: </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseTokenOutputAmount</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">minBaseTokenOutputAmount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Slippage: base token amount out&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L117\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L117</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">120</span><span class=\"mtk1\">: </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">fractionalTokenOutputAmount</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">minFractionalTokenOutputAmount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Slippage: fractional token out&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L120\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L120</a></p>\n<h2 id=\"g-04-splitting-require-statements-that-use--saves-gas\" style=\"position:relative;\"><a href=\"#g-04-splitting-require-statements-that-use--saves-gas\" aria-label=\"g 04 splitting require statements that use  saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-04] Splitting <code>require()</code> statements that use <code>&#x26;&#x26;</code> saves gas</h2>\n<p>Instead of using operator <code>&#x26;&#x26;</code> on a single <code>require</code>. Using a two <code>require</code> can save more gas.</p>\n<p>i.e.\nfor <code>require(version == 1 &#x26;&#x26; _bytecodeHash[1] == bytes1(0), \"zf\");</code> use:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"50\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">\trequire(version == 1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\trequire(_bytecodeHash[1] == bytes1(0));</span></span></code></pre>\n<h3 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"51\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">71</span><span class=\"mtk1\">: </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">baseTokenAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">fractionalTokenAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Input token amount is zero&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L71\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L71</a></p>\n<h2 id=\"g-05-public-functions-to-external\" style=\"position:relative;\"><a href=\"#g-05-public-functions-to-external\" aria-label=\"g 05 public functions to external permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-05] Public Functions To External</h2>\n<p>The following functions could be set external to save gas and improve code quality.<br>\nExternal call cost is less expensive than of public functions.</p>\n<h3 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"52\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">create</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nft</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">merkleRoot</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L28\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L28</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"53\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">destroy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nft</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">merkleRoot</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L49\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L49</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"54\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L19\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L19</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"55\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L26\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L26</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"56\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">buy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxInputAmount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">inputAmount</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L147\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L147</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"57\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sell</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">inputAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minOutputAmount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L182\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L182</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"58\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">unwrap</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fractionalTokenAmount</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L248\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L248</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"59\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nftAdd</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseTokenAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minLpTokenAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proofs</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lpTokenAmount</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L275\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L275</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"60\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nftBuy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenIds</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxInputAmount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">inputAmount</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L310\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L310</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"61\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">close</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L341\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L341</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"62\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L359\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L359</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"63\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">baseTokenReserves</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L379\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L379</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"64\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">fractionalTokenReserves</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L383\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L383</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"65\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">price</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L390\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L390</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"66\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">buyQuote</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">outputAmount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L398\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L398</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"67\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sellQuote</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">inputAmount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L406\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L406</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"68\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addQuote</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseTokenAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fractionalTokenAmount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L417\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L417</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"69\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">removeQuote</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lpTokenAmount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L435\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L435</a></p>\n<h2 id=\"g-06-optimize-names-to-save-gas\" style=\"position:relative;\"><a href=\"#g-06-optimize-names-to-save-gas\" aria-label=\"g 06 optimize names to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-06] Optimize names to save gas</h2>\n<p>Contracts most called functions could simply save gas by function ordering via Method ID. Calling a function at runtime will be cheaper if the function is positioned earlier in the order (has a relatively lower Method ID) because 22 gas are added to the cost of a function for every position that came before it. The caller can save on gas if you prioritize most called functions. </p>\n<p>See more <a href=\"https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92\">here</a>.</p>\n<h3 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"70\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: .\\</span><span class=\"mtk12\">Projects</span><span class=\"mtk1\">\\</span><span class=\"mtk12\">caviar202212</span><span class=\"mtk1\">\\</span><span class=\"mtk7\">2022</span><span class=\"mtk1\">-</span><span class=\"mtk7\">12</span><span class=\"mtk1\">-</span><span class=\"mtk12\">caviar</span><span class=\"mtk1\">\\</span><span class=\"mtk12\">src</span><span class=\"mtk1\">\\</span><span class=\"mtk12\">Caviar</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"71\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: .\\</span><span class=\"mtk12\">Projects</span><span class=\"mtk1\">\\</span><span class=\"mtk12\">caviar202212</span><span class=\"mtk1\">\\</span><span class=\"mtk7\">2022</span><span class=\"mtk1\">-</span><span class=\"mtk7\">12</span><span class=\"mtk1\">-</span><span class=\"mtk12\">caviar</span><span class=\"mtk1\">\\</span><span class=\"mtk12\">src</span><span class=\"mtk1\">\\</span><span class=\"mtk12\">LpToken</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"72\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: .\\</span><span class=\"mtk12\">Projects</span><span class=\"mtk1\">\\</span><span class=\"mtk12\">caviar202212</span><span class=\"mtk1\">\\</span><span class=\"mtk7\">2022</span><span class=\"mtk1\">-</span><span class=\"mtk7\">12</span><span class=\"mtk1\">-</span><span class=\"mtk12\">caviar</span><span class=\"mtk1\">\\</span><span class=\"mtk12\">src</span><span class=\"mtk1\">\\</span><span class=\"mtk12\">Pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol</a></p>\n<h3 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Find a lower method ID name for the most called functions for example <code>Call()</code> vs. <code>Call1()</code> is cheaper by 22 gas.<br>\nFor example, the function IDs in the Gauge.sol contract will be the most used; A lower method ID may be given.</p>\n<h2 id=\"g-07-using-fixed-bytes-is-cheaper-than-using-string\" style=\"position:relative;\"><a href=\"#g-07-using-fixed-bytes-is-cheaper-than-using-string\" aria-label=\"g 07 using fixed bytes is cheaper than using string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-07] Using fixed bytes is cheaper than using <code>string</code></h2>\n<p>As a rule of thumb, use <code>bytes</code> for arbitrary-length raw byte data and string for arbitrary-length <code>string</code> (UTF-8) data. If you can limit the length to a certain number of bytes, always use one of <code>bytes1</code> to <code>bytes32</code> because they are much cheaper.</p>\n<h3 id=\"proof-of-concept-14\" style=\"position:relative;\"><a href=\"#proof-of-concept-14\" aria-label=\"proof of concept 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"73\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">33</span><span class=\"mtk1\">: </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseTokenSymbol</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) ? </span><span class=\"mtk8\">&quot;ETH&quot;</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokenSymbol</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L33\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L33</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"74\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">36</span><span class=\"mtk1\">: </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftSymbol</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;:&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">baseTokenSymbol</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L36\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L36</a></p>\n<h2 id=\"g-08-superfluous-event-fields\" style=\"position:relative;\"><a href=\"#g-08-superfluous-event-fields\" aria-label=\"g 08 superfluous event fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-08] Superfluous event fields</h2>\n<p><code>block.number</code> and <code>block.timestamp</code> are added to the event information by default, so adding them manually will waste additional gas.</p>\n<h3 id=\"proof-of-concept-15\" style=\"position:relative;\"><a href=\"#proof-of-concept-15\" aria-label=\"proof of concept 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"75\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">36</span><span class=\"mtk1\">: </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Close</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">closeTimestamp</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L36\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L36</a></p>\n<h2 id=\"g-09-internal-functions-only-called-once-can-be-inlined-to-save-gas\" style=\"position:relative;\"><a href=\"#g-09-internal-functions-only-called-once-can-be-inlined-to-save-gas\" aria-label=\"g 09 internal functions only called once can be inlined to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-09] <code>internal</code> functions only called once can be inlined to save gas</h2>\n<h3 id=\"proof-of-concept-16\" style=\"position:relative;\"><a href=\"#proof-of-concept-16\" aria-label=\"proof of concept 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"76\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">463</span><span class=\"mtk1\">: </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_validateTokenIds</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L463\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L463</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"77\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">76</span><span class=\"mtk1\">: </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tokenSymbol</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib%5CSafeERC20Namer.sol#L76\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L76</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"78\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">87</span><span class=\"mtk1\">: </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tokenName</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib%5CSafeERC20Namer.sol#L87\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L87</a></p>\n<h2 id=\"g-10-setting-the-constructor-to-payable\" style=\"position:relative;\"><a href=\"#g-10-setting-the-constructor-to-payable\" aria-label=\"g 10 setting the constructor to payable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-10] Setting the <code>constructor</code> to <code>payable</code></h2>\n<p>Saves ~13 gas per instance</p>\n<h3 id=\"proof-of-concept-17\" style=\"position:relative;\"><a href=\"#proof-of-concept-17\" aria-label=\"proof of concept 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"79\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">21</span><span class=\"mtk1\">: </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">() </span><span class=\"mtk11\">Owned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L21\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L21</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"80\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">11</span><span class=\"mtk1\">: </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">Owned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot; LP token&quot;</span><span class=\"mtk1\">), </span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;LP-&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\">), </span><span class=\"mtk7\">18</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L11\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L11</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"81\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">39</span><span class=\"mtk1\">: </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_baseToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_merkleRoot</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pairSymbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nftName</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nftSymbol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftName</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot; fractional token&quot;</span><span class=\"mtk1\">), </span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;f&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nftSymbol</span><span class=\"mtk1\">), </span><span class=\"mtk7\">18</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L39\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L39</a></p>\n<h2 id=\"g-11-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" style=\"position:relative;\"><a href=\"#g-11-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" aria-label=\"g 11 functions guaranteed to revert when called by normal users can be marked payable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-11] Functions guaranteed to revert when called by normal users can be marked <code>payable</code></h2>\n<p>If a function modifier or require such as onlyOwner/onlyX is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are CALLVALUE(2), DUP1(3), ISZERO(3), PUSH2(3), JUMPI(10), PUSH1(3), DUP1(3), REVERT(0), JUMPDEST(1), POP(2) which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost.</p>\n<h3 id=\"proof-of-concept-18\" style=\"position:relative;\"><a href=\"#proof-of-concept-18\" aria-label=\"proof of concept 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"82\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">19</span><span class=\"mtk1\">: </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L19\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L19</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"83\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">26</span><span class=\"mtk1\">: </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L26\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L26</a></p>\n<h3 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Functions guaranteed to revert when called by normal users can be marked payable.</p>\n<h2 id=\"g-12-using-unchecked-blocks-to-save-gas\" style=\"position:relative;\"><a href=\"#g-12-using-unchecked-blocks-to-save-gas\" aria-label=\"g 12 using unchecked blocks to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-12] Using <code>unchecked</code> blocks to save gas</h2>\n<p>Solidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn’t possible (as an example, when a comparison is made before the arithmetic operation), some gas can be saved by using an <code>unchecked</code> block.</p>\n<h3 id=\"proof-of-concept-19\" style=\"position:relative;\"><a href=\"#proof-of-concept-19\" aria-label=\"proof of concept 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"84\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">168</span><span class=\"mtk1\">: </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">refundAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">maxInputAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">inputAmount</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L168\">https://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L168</a></p>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-3\">High Risk Findings (3)</a></p>\n<ul>\n<li><a href=\"#h-01-reentrancy-in-buy-function-for-erc777-tokens-allows-buying-funds-with-considerable-discount\">[H-01] Reentrancy in buy function for ERC777 tokens allows buying funds with considerable discount</a></li>\n<li><a href=\"#h-02-liquidity-providers-may-lose-funds-when-adding-liquidity\">[H-02] Liquidity providers may lose funds when adding liquidity</a></li>\n<li><a href=\"#h-03-first-depositor-can-break-minting-of-shares\">[H-03] First depositor can break minting of shares</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-5\">Medium Risk Findings (5)</a></p>\n<ul>\n<li><a href=\"#m-01-missing-deadline-checks-allow-pending-transactions-to-be-maliciously-executed\">[M-01] Missing deadline checks allow pending transactions to be maliciously executed</a></li>\n<li><a href=\"#m-02-price-will-not-always-be-18-decimals-as-expected-and-outlined-in-the-comments\">[M-02] Price will not always be 18 decimals, as expected and outlined in the comments</a></li>\n<li><a href=\"#m-03-rounding-error-in-buyquote-might-result-in-free-tokens\">[M-03] Rounding error in <code>buyQuote</code> might result in free tokens</a></li>\n<li><a href=\"#m-04-its-possible-to-swap-nft-token-ids-without-fee-and-also-attacker-can-wrap-unwrap-all-the-nft-token-balance-of-the-pair-contract-and-steal-their-air-drops-for-those-token-ids\">[M-04] It’s possible to swap NFT token ids without fee and also attacker can wrap unwrap all the NFT token balance of the Pair contract and steal their air drops for those token ids</a></li>\n<li><a href=\"#m-05-pair-price-may-be-manipulated-by-direct-transfers\">[M-05] Pair price may be manipulated by direct transfers</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#summary-1\">Summary</a></li>\n<li><a href=\"#l-01-missing-reentrancy-guard-to-withdraw-function\">L-01 Missing ReEntrancy Guard to <code>withdraw</code> function</a></li>\n<li><a href=\"#l-02-use-safetransferownership-instead-of-transferownership-function\">L-02 Use <code>safeTransferOwnership</code> instead of <code>transferOwnership</code> function</a></li>\n<li><a href=\"#l-03-loss-of-precision-due-to-rounding\">L-03 Loss of precision due to rounding</a></li>\n<li><a href=\"#l-04-solmates-safetransferlib-doesnt-check-whether-the-erc20-contract-exists\">L-04 Solmate’s <code>SafeTransferLib</code> doesn’t check whether the ERC20 contract exists</a></li>\n<li><a href=\"#l-05-should-an-airdrop-token-arrive-on-the-pairsol-contract-it-will-be-stuck\">L-05 Should an airdrop token arrive on the <code>pair.sol</code> contract, it will be stuck</a></li>\n<li><a href=\"#n-01-insufficient-coverage\">N-01 Insufficient coverage</a></li>\n<li><a href=\"#n-02-natspec-comments-should-be-increased-in-contracts\">N-02 NatSpec comments should be increased in contracts</a></li>\n<li><a href=\"#n-03-function-writing-that-does-not-comply-with-the-solidity-style-guide\">N-03 <code>Function writing</code> that does not comply with the <code>Solidity Style Guide</code></a></li>\n<li><a href=\"#n-04-solidity-compiler-optimizations-can-be-problematic\">N-04 Solidity compiler optimizations can be problematic</a></li>\n<li><a href=\"#n-05-for-modern-and-more-readable-code-update-import-usages\">N-05 For modern and more readable code; update import usages</a></li>\n<li><a href=\"#n-06-lock-pragmas-to-specific-compiler-version\">N-06 <em>Lock pragmas</em> to specific compiler version</a></li>\n<li><a href=\"#n-07-use-underscores-for-number-literals\">N-07 Use underscores for number literals</a></li>\n<li><a href=\"#n-08-use-of-bytesconcat-instead-of-abiencodepacked\">N-08 Use of <code>bytes.concat()</code> instead of <code>abi.encodePacked()</code></a></li>\n<li><a href=\"#n-09-pragma-version0817--version-too-recent-to-be-trusted\">N-09 Pragma version^0.8.17  version too recent to be trusted.</a></li>\n<li><a href=\"#n-10-add-eip-2981-nft-royalty-standart-support\">N-10 Add EIP-2981 NFT Royalty Standart Support</a></li>\n<li><a href=\"#n-11-showing-the-actual-values-of-numbers-in-natspec-comments-makes-checking-and-reading-code-easier\">N-11 Showing the actual values of numbers in NatSpec comments makes checking and reading code easier</a></li>\n<li><a href=\"#n-12-missing-event-for-critical-parameters-init-and-change\">N-12 Missing Event for critical parameters init and change</a></li>\n<li><a href=\"#n-13-add-to-blacklist-function\">N-13 Add to <em>blacklist function</em></a></li>\n<li><a href=\"#s-01-project-upgrade-and-stop-scenario-should-be\">S-01 Project Upgrade and Stop Scenario should be</a></li>\n<li><a href=\"#s-02-generate-perfect-code-headers-every-time\">S-02 Generate perfect code headers every time</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#summary-2\">Summary</a></li>\n<li><a href=\"#g-01-x--y-costs-more-gas-than-x--x--y-for-state-variables\">G-01 <code>&#x3C;x> += &#x3C;y></code> Costs More Gas Than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> For State Variables</a></li>\n<li><a href=\"#g-02-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\">G-02 <code>++i</code>/<code>i++</code> Should Be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> When It Is Not Possible For Them To Overflow, As Is The Case When Used In For- And While-loops</a></li>\n<li><a href=\"#g-03-requirerevert-strings-longer-than-32-bytes-cost-extra-gas\">G-03 <code>require()</code>/<code>revert()</code> Strings Longer Than 32 Bytes Cost Extra Gas</a></li>\n<li><a href=\"#g-04-splitting-require-statements-that-use--saves-gas\">G-04 Splitting <code>require()</code> statements that use <code>&#x26;&#x26;</code> saves gas</a></li>\n<li><a href=\"#g-05-public-functions-to-external\">G-05 Public Functions To External</a></li>\n<li><a href=\"#g-06-optimize-names-to-save-gas\">G-06 Optimize names to save gas</a></li>\n<li><a href=\"#g-07-using-fixed-bytes-is-cheaper-than-using-string\">G-07 Using fixed bytes is cheaper than using <code>string</code></a></li>\n<li><a href=\"#g-08-superfluous-event-fields\">G-08 Superfluous event fields</a></li>\n<li><a href=\"#g-09-internal-functions-only-called-once-can-be-inlined-to-save-gas\">G-09 <code>internal</code> functions only called once can be inlined to save gas</a></li>\n<li><a href=\"#g-10-setting-the-constructor-to-payable\">G-10 Setting the <code>constructor</code> to <code>payable</code></a></li>\n<li><a href=\"#g-11-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\">G-11 Functions guaranteed to revert when called by normal users can be marked <code>payable</code></a></li>\n<li><a href=\"#g-12-using-unchecked-blocks-to-save-gas\">G-12 Using <code>unchecked</code> blocks to save gas</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the audit contest outlined in this document, C4 conducted an analysis of the Caviar smart contract system written in Solidity. The audit contest took place between December 12—December 19 2022.\n\n## Wardens\n\n130 Wardens contributed reports to the Caviar contest:\n\n  1. 0x1f8b\n  2. 0x52\n  3. [0xAgro](https://twitter.com/0xAgro)\n  4. [0xDave](https://twitter.com/nl__park)\n  5. [0xDecorativePineapple](https://decorativepineapple.github.io/)\n  6. 0xGusMcCrae\n  7. [0xSmartContract](https://twitter.com/0xSmartContract)\n  8. 0xab00\n  9. 0xhacksmithh\n  10. 0xmuxyz\n  11. 0xxm\n  12. [8olidity](https://twitter.com/8olidity)\n  13. 9svR6w\n  14. Apocalypto (cRat1st0s, reassor, and M0ndoHEHE)\n  15. [Aymen0909](https://github.com/Aymen1001)\n  16. [BAHOZ](https://twitter.com/bahoz_eth)\n  17. BPZ (pa6221, Bitcoinfever244, and PrasadLak)\n  18. Bnke0x0\n  19. [Bobface](https://twitter.com/bobface16)\n  20. Breeje\n  21. CRYP70\n  22. [Chom](https://chom.dev)\n  23. Diana\n  24. [ElKu](https://twitter.com/ElKu_crypto)\n  25. [Franfran](https://franfran.dev/)\n  26. HE1M\n  27. HardlyCodeMan\n  28. IllIllI\n  29. [JC](https://twitter.com/sm4rtcontr4ct)\n  30. Janio\n  31. [Jeiwan](https://jeiwan.net)\n  32. [JrNet](https://twitter.com/JagadeshRonanki)\n  33. Junnon\n  34. KingNFT\n  35. Koolex\n  36. Lambda\n  37. Madalad\n  38. NoamYakov\n  39. RaymondFam\n  40. ReyAdmirado\n  41. Rolezn\n  42. [SamGMK](@sam_gmk)\n  43. SleepingBugs ([Deivitto](https://twitter.com/Deivitto) and 0xLovesleep)\n  44. Tointer\n  45. Tricko\n  46. [UNCHAIN](https://unchain.tech/) ([Tomo](https://tom-sol.notion.site/Who-am-I-3b4dc28e77b647eb90794735a94dd38e), [mashharuki](https://twitter.com/HARUKI05758694), yawn, keit, ahayashi, [sho](https://akxra.art), KazumaHamamoto, [cardene](https://twitter.com/cardene777), [cotoneum](https://twitter.com/_cotoneum_), mugi, yosuke, masaru, [kevin_katsu](https://twitter.com/kevin_katsu_h), [junya](https://twitter.com/junya_tad), daikai, mabuk, [mameta](https://twitter.com/TeaTuberMameta), [kyok1st](https://twitter.com/kyok1st), 0xShin, hamaup, kii, and yoki)\n  47. UdarTeam (ahmedov and tourist)\n  48. Zarf\n  49. \\_\\_141345\\_\\_\n  50. [adriro](https://github.com/romeroadrian)\n  51. ahayashi\n  52. ak1\n  53. [aviggiano](https://twitter.com/agfviggiano)\n  54. [bytehat](https://twitter.com/bytehat)\n  55. [c3phas](https://twitter.com/c3ph_)\n  56. [carlitox477](https://twitter.com/carlitox477)\n  57. carrotsmuggler\n  58. caventa\n  59. cccz\n  60. chaduke\n  61. cozzetti\n  62. cryptonue\n  63. cryptostellar5\n  64. dic0de\n  65. dipp\n  66. [eyexploit](https://twitter.com/eyexploit)\n  67. fs0c\n  68. gz627\n  69. [gzeon](https://twitter.com/gzeon)\n  70. [h0wl](https://twitter.com/h0wlu)\n  71. haku\n  72. [hansfriese](https://twitter.com/hansfriese)\n  73. helios\n  74. hihen\n  75. imare\n  76. immeas\n  77. izhelyazkov\n  78. [kiki\\_dev](https://twitter.com/Kiki_developer)\n  79. koxuan\n  80. ktg\n  81. ladboy233\n  82. lukris02\n  83. lumoswiz\n  84. [mauricio1802](https://twitter.com/Mauricio_0218)\n  85. millersplanet\n  86. [minhquanym](https://www.linkedin.com/in/minhquanym/)\n  87. minhtrng\n  88. [nicobevi](https://github.com/nicobevilacqua)\n  89. [obront](https://twitter.com/zachobront)\n  90. [oyc\\_109](https://twitter.com/andyfeili)\n  91. [pavankv](https://twitter.com/@PavanKumarKv2)\n  92. [rajatbeladiya](https://twitter.com/rajat_beladiya)\n  93. [ret2basic](https://twitter.com/ret2basic)\n  94. rjs\n  95. rvierdiiev\n  96. [saneryee](https://medium.com/@saneryee-studio)\n  97. [seyni](https://twitter.com/seynixyz)\n  98. [shung](https://twitter.com/shunduquar)\n  99. [supernova](https://twitter.com/harshit16024263)\n  100. tnevler\n  101. unforgiven\n  102. wait\n  103. yixxas\n\nThis contest was judged by [berndartmueller](https://twitter.com/berndartmueller).\n\nFinal report assembled by [liveactionllama](https://twitter.com/liveactionllama).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 8 unique vulnerabilities. Of these vulnerabilities, 3 received a risk rating in the category of HIGH severity and 5 received a risk rating in the category of MEDIUM severity.\n\nAdditionally, C4 analysis included 25 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 31 reports recommending gas optimizations.\n\nAll of the issues presented here are linked back to their original finding.\n\n# Scope\n\nThe code under review can be found within the [C4 Caviar contest repository](https://github.com/code-423n4/2022-12-caviar), and is composed of 4 smart contracts written in the Solidity programming language and includes 318 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code4rena.com).\n\n# High Risk Findings (3)\n## [[H-01] Reentrancy in buy function for ERC777 tokens allows buying funds with considerable discount](https://github.com/code-423n4/2022-12-caviar-findings/issues/343)\n*Submitted by [carlitox477](https://github.com/code-423n4/2022-12-caviar-findings/issues/343), also found by [minhquanym](https://github.com/code-423n4/2022-12-caviar-findings/issues/445), [gzeon](https://github.com/code-423n4/2022-12-caviar-findings/issues/422), [9svR6w](https://github.com/code-423n4/2022-12-caviar-findings/issues/268), [Lambda](https://github.com/code-423n4/2022-12-caviar-findings/issues/258), [koxuan](https://github.com/code-423n4/2022-12-caviar-findings/issues/221), [KingNFT](https://github.com/code-423n4/2022-12-caviar-findings/issues/211), [cozzetti](https://github.com/code-423n4/2022-12-caviar-findings/issues/125), [rvierdiiev](https://github.com/code-423n4/2022-12-caviar-findings/issues/111), and [cccz](https://github.com/code-423n4/2022-12-caviar-findings/issues/78)*\n\n<https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L95><br>\n<https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L137><br>\n<https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L172><br>\n<https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L203>\n\nCurrent implementation of functions `add`, `remove`, `buy` and `sell` first transfer fractional tokens, and then base tokens.\n\nIf this base token is ERC777 (extension of ERC20), we can call this function without updating the base token balance, but updating the fractional token balance.\n\n### Impact\n\nAllows to drain funds of a pairs which implements an ERC-777 token.\n\n### Proof of Concept\n\n```diff\nfunction buy(uint256 outputAmount, uint256 maxInputAmount) public payable returns (uint256 inputAmount) {\n    // *** Checks *** //\n\n    // check that correct eth input was sent - if the baseToken equals address(0) then native ETH is used\n    require(baseToken == address(0) ? msg.value == maxInputAmount : msg.value == 0, \"Invalid ether input\");\n\n    // calculate required input amount using xyk invariant\n+   @audit Use current balances\n    inputAmount = buyQuote(outputAmount);\n\n    // check that the required amount of base tokens is less than the max amount\n    require(inputAmount <= maxInputAmount, \"Slippage: amount in\");\n\n    // *** Effects *** //\n+   @audit Modifies just fractional balance\n    // transfer fractional tokens to sender\n    _transferFrom(address(this), msg.sender, outputAmount);\n\n    // *** Interactions *** //\n\n    if (baseToken == address(0)) {\n        // refund surplus eth\n        uint256 refundAmount = maxInputAmount - inputAmount;\n        if (refundAmount > 0) msg.sender.safeTransferETH(refundAmount);\n    } else {\n\n        // transfer base tokens in\n+       @audit If an ERC-777 token is used, we can re call buy function with the same balance of base token, but with different fractional balance\n        ERC20(baseToken).safeTransferFrom(msg.sender, address(this), inputAmount);\n\n    }\n    emit Buy(inputAmount, outputAmount);\n}\n```\n\n```solidity\nfunction buyQuote(uint256 outputAmount) public view returns (uint256) {\n    return (outputAmount * 1000 * baseTokenReserves()) / ((fractionalTokenReserves() - outputAmount) * 997);\n}\n```\n\nThe buy quote is used to calculate the amount of fractional token that the user will receive, and it should be less/equal to **maxInputAmount** sent by parameter in order to achieve a successful execution of function buy.\n\nCurrent buy quote can be mathematically expressed as: $\\frac{outputAmount \\times 1000 \\times baseTokenReserves}{fractionalTokenReserves - outPutAmount} \\times 997$.\n\nThen, about sales\n\n```diff\nfunction sell(uint256 inputAmount, uint256 minOutputAmount) public returns (uint256 outputAmount) {\n    // *** Checks *** //\n\n    // calculate output amount using xyk invariant\n    outputAmount = sellQuote(inputAmount);\n\n    // check that the outputted amount of fractional tokens is greater than the min amount\n    require(outputAmount >= minOutputAmount, \"Slippage: amount out\");\n\n    // *** Effects *** //\n\n    // transfer fractional tokens from sender\n+   //@audit fractional balance is updated\n    _transferFrom(msg.sender, address(this), inputAmount);\n\n    // *** Interactions *** //\n\n    if (baseToken == address(0)) {\n        // transfer ether out\n        msg.sender.safeTransferETH(outputAmount);\n    } else {\n        // transfer base tokens out\n+       @audit If an ERC-777 token is used, we can re call sell function with the same balance of base token, but with different fractional balance.\n        ERC20(baseToken).safeTransfer(msg.sender, outputAmount);\n    }\n\n    emit Sell(inputAmount, outputAmount);\n}\n```\n\n```function sellQuote(uint256 inputAmount) public view returns (uint256) {\n    uint256 inputAmountWithFee = inputAmount * 997;\n    return (inputAmountWithFee * baseTokenReserves()) / ((fractionalTokenReserves() * 1000) + inputAmountWithFee);\n}\n```\n\nCurrent sellQuote function can be expressed mathematically as:\n\n$inputAmount = \\frac{inputAmount \\times 997 \\times baseTokenReserves}{fractionalTokenReserves \\times 1000 + inputAmountWithFee}$\n\nThen we can think next scenario to drain a pair which use an ERC-777 token as base token:\n\n1.  Let's suppose the pair has 1000 base tokens(BT777) and 1000 Fractional reserve tokens (FRT)\n2.  The attacker call buy function, all with next inputs:\n    *   outputAmount = 50\n    *   maxInputAmount = 80\n3.  The attacker implements a hook, that will be executed 6 times (using a counter inside a malicus contract) when a transfer is done, and call the buy function. After this 6 times the malicious contract is call again, but this times calls the sell function, doing a huge sell for the fractional reserve token obtained.\n\nA simulation of this attack can be visualized in next table\n\n| Operation      | outputAmount (FRT) | maxInputAmount (BT777) | BT777 reserve | FRT reserve | inputAmount (BT777 to pay) | inputAmount < maxInputAmount |\n| :------------- | ------------------ | ---------------------- | ------------- | ----------- | -------------------------- | ---------------------------: |\n| Attaker buy 1  | 50                 | 80                     | 1000          | 1000        | 52                         |                         TRUE |\n| Callback buy 2 | 50                 | 80                     | 1000          | 950         | 55                         |                         TRUE |\n| Callback buy 3 | 50                 | 80                     | 1000          | 900         | 59                         |                         TRUE |\n| Callback buy 4 | 50                 | 80                     | 1000          | 850         | 62                         |                         TRUE |\n| Callback buy 5 | 50                 | 80                     | 1000          | 800         | 66                         |                         TRUE |\n| Callback buy 6 | 50                 | 80                     | 1000          | 750         | 71                         |                         TRUE |\n| Callback buy 7 | 50                 | 80                     | 1000          | 700         | 77                         |                         TRUE |\n\nThe result of this operation is that the attaker/malicious contract has 350 FRT, while BT777 reserve still has 1000 and FRT reserve has 650 tokens. The success execution needs that the attacker pays 442 BT777 eventually.\n\nTo do this, the last operation of the malicious contract is calling sell function\n\n| Operation    | inputAmount(BT777) | minOutputAmount | BT777 reserve | FRT reserve | outputAmount (BT777 to receive) | outputAmount > minOutputAmount |\n| :----------- | ------------------ | --------------- | ------------- | ----------- | ------------------------------- | -----------------------------: |\n| calback Sell | 350                | 442             | 1000          | 650         | 536                             |                           TRUE |\n\nThe result is that the attacker now controls 536 BT777, the attacker use this balance to pay the debt of 442 BT77, with a profit of 94 BT77 tokens.\n\n### Recommended Mitigation steps\n\nAdd openzeppelin nonReentrant modifier to mentioned functions, or state clear in the documentation that this protocol should not be used with ERC777 tokens.\n\n**[outdoteth (Caviar) acknowledged and commented](https://github.com/code-423n4/2022-12-caviar-findings/issues/343#issuecomment-1372238278):**\n > Technically valid, though we don't intend to support erc777 tokens.\n\n\n\n***\n\n## [[H-02] Liquidity providers may lose funds when adding liquidity](https://github.com/code-423n4/2022-12-caviar-findings/issues/376)\n*Submitted by [Jeiwan](https://github.com/code-423n4/2022-12-caviar-findings/issues/376), also found by [minhtrng](https://github.com/code-423n4/2022-12-caviar-findings/issues/507), [minhquanym](https://github.com/code-423n4/2022-12-caviar-findings/issues/444), [HE1M](https://github.com/code-423n4/2022-12-caviar-findings/issues/398), [wait](https://github.com/code-423n4/2022-12-caviar-findings/issues/388), [hansfriese](https://github.com/code-423n4/2022-12-caviar-findings/issues/350), [BAHOZ](https://github.com/code-423n4/2022-12-caviar-findings/issues/342), [unforgiven](https://github.com/code-423n4/2022-12-caviar-findings/issues/340), [0xxm](https://github.com/code-423n4/2022-12-caviar-findings/issues/332), [Junnon](https://github.com/code-423n4/2022-12-caviar-findings/issues/329), [bytehat](https://github.com/code-423n4/2022-12-caviar-findings/issues/326), [UNCHAIN](https://github.com/code-423n4/2022-12-caviar-findings/issues/316), [carlitox477](https://github.com/code-423n4/2022-12-caviar-findings/issues/288), [RaymondFam](https://github.com/code-423n4/2022-12-caviar-findings/issues/287), [Chom](https://github.com/code-423n4/2022-12-caviar-findings/issues/285), [CRYP70](https://github.com/code-423n4/2022-12-caviar-findings/issues/278), [9svR6w](https://github.com/code-423n4/2022-12-caviar-findings/issues/275), [mauricio1802](https://github.com/code-423n4/2022-12-caviar-findings/issues/252), [\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-12-caviar-findings/issues/234), [hihen](https://github.com/code-423n4/2022-12-caviar-findings/issues/222), [caventa](https://github.com/code-423n4/2022-12-caviar-findings/issues/195), [koxuan](https://github.com/code-423n4/2022-12-caviar-findings/issues/173), [obront](https://github.com/code-423n4/2022-12-caviar-findings/issues/142), [nicobevi](https://github.com/code-423n4/2022-12-caviar-findings/issues/122), [shung](https://github.com/code-423n4/2022-12-caviar-findings/issues/90), [cccz](https://github.com/code-423n4/2022-12-caviar-findings/issues/31), [Bobface](https://github.com/code-423n4/2022-12-caviar-findings/issues/30), and [chaduke](https://github.com/code-423n4/2022-12-caviar-findings/issues/17)*\n\nLiquidity providers may lose a portion of provided liquidity in either of the pair tokens. While the `minLpTokenAmount` protects from slippage when adding liquidity, it doesn't protect from providing liquidity at different K.\n\n### Proof of Concept\n\nThe `Pair` contract is designed to receive liquidity from liquidity providers ([Pair.sol#L63](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L63)). First liquidity provider in a pool may provide arbitrary token amounts and set the initial price ([Pair.sol#L425-L426](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L425-L426)), but all other liquidity providers must provide liquidity proportionally to current pool reserves ([Pair.sol#L420-L423](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L420-L423)). Since a pool is made of two tokens and liquidity is provided in both tokens, there's a possibility for a discrepancy: token amounts may be provided in different proportions. When this happens, the smaller of the proportions is chosen to calculate the amount of LP tokens minted ([Pair.sol#L420-L423](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L420-L423)):\n\n```solidity\n// calculate amount of lp tokens as a fraction of existing reserves\nuint256 baseTokenShare = (baseTokenAmount * lpTokenSupply) / baseTokenReserves();\nuint256 fractionalTokenShare = (fractionalTokenAmount * lpTokenSupply) / fractionalTokenReserves();\nreturn Math.min(baseTokenShare, fractionalTokenShare);\n```\n\nAs a result, the difference in proportions will create an excess of tokens that won't be redeemable for the amount of LP tokens minted. The excess of tokens gets, basically, donated to the pool: it'll be shared among all liquidity providers of the pool. While the `minLpTokenAmount` argument of the `add` function ([Pair.sol#L63](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L63)) allows liquidity providers to set the minimal amount of LP tokens they want to receive, it doesn't allow them to minimize the disproportion of token amounts or avoid it at all.\n\n```solidity\n// test/Pair/unit.Add.t.sol\n\nfunction testLockOfFunds_AUDIT() public {\n    address alice = address(0x31337);\n    address bob = address(0x12345);\n    vm.label(alice, \"alice\");\n    vm.label(bob, \"bob\");\n\n    deal(address(usd), alice, 100e18, true);\n    deal(address(usd), bob, 100e18, true);\n    deal(address(p), alice, 100e18, true);\n    deal(address(p), bob, 100e18, true);\n\n    // Alice is the first liquidity provider.\n    vm.startPrank(alice);\n    usd.approve(address(p), type(uint256).max);\n    p.add(10 ether, 10 ether, 0);\n    vm.stopPrank();\n\n    // Bob provides liquidity to the pool and sets the minimal LP amount.\n    // The token amounts are deposited in different proportions, thus the smaller\n    // one will be chosen to calculate the amount of LP tokens Bob will receive.\n    vm.startPrank(bob);\n    usd.approve(address(p), type(uint256).max);\n    uint256 minLPAmount = 1e18;\n    uint256 bobLPAmount = p.add(1.2 ether, 1 ether, minLPAmount);\n    vm.stopPrank();\n\n    // Bob has received the minimal LP amount he wanted.\n    assertEq(bobLPAmount, minLPAmount);\n\n    // However, after removing all his liquidity from the pool...\n    (uint256 bobUSDBefore, uint256 bobFracBefore) = (usd.balanceOf(bob), p.balanceOf(bob));\n    vm.prank(bob);\n    p.remove(minLPAmount, 0, 0);\n    (uint256 bobUSDAfter, uint256 bobFracAfter) = (usd.balanceOf(bob), p.balanceOf(bob));\n\n    // ... Bob received less USD than he deposited.\n    assertEq(bobUSDAfter - bobUSDBefore, 1.018181818181818181 ether);\n    assertEq(bobFracAfter - bobFracBefore, 1.000000000000000000 ether);\n}\n```\n\n### Recommended Mitigation Steps\n\nIn the `add` function, consider calculating optimal token amounts based on the amounts specified by user, current pool reserves, and the minimal LP tokens amount specified by user. As a reference, consider this piece from the Uniswap V2 Router: [UniswapV2Router02.sol#L45-L60](https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol#L45-L60).\n\n**[outdoteth (Caviar) confirmed and commented](https://github.com/code-423n4/2022-12-caviar-findings/issues/376#issuecomment-1373894006):**\n > Fixed in: https://github.com/outdoteth/caviar/pull/2\n> \n> By allowing a user to specify a `minPrice` and `maxPrice` that they are willing to LP at along with the `minLpTokenAmount` that they would like to receive. The price calculation is based on this: https://github.com/outdoteth/caviar/blob/main/src/Pair.sol#L471\n\n\n\n***\n\n## [[H-03] First depositor can break minting of shares](https://github.com/code-423n4/2022-12-caviar-findings/issues/442)\n*Submitted by [minhquanym](https://github.com/code-423n4/2022-12-caviar-findings/issues/442), also found by [Apocalypto](https://github.com/code-423n4/2022-12-caviar-findings/issues/500), [0xDecorativePineapple](https://github.com/code-423n4/2022-12-caviar-findings/issues/495), [Franfran](https://github.com/code-423n4/2022-12-caviar-findings/issues/485), [dipp](https://github.com/code-423n4/2022-12-caviar-findings/issues/476), [rjs](https://github.com/code-423n4/2022-12-caviar-findings/issues/471), [ak1](https://github.com/code-423n4/2022-12-caviar-findings/issues/470), [Tricko](https://github.com/code-423n4/2022-12-caviar-findings/issues/469), [Jeiwan](https://github.com/code-423n4/2022-12-caviar-findings/issues/382), [unforgiven](https://github.com/code-423n4/2022-12-caviar-findings/issues/358), [hansfriese](https://github.com/code-423n4/2022-12-caviar-findings/issues/352), [BAHOZ](https://github.com/code-423n4/2022-12-caviar-findings/issues/341), [unforgiven](https://github.com/code-423n4/2022-12-caviar-findings/issues/338), [bytehat](https://github.com/code-423n4/2022-12-caviar-findings/issues/317), [UNCHAIN](https://github.com/code-423n4/2022-12-caviar-findings/issues/310), [immeas](https://github.com/code-423n4/2022-12-caviar-findings/issues/249), [SamGMK](https://github.com/code-423n4/2022-12-caviar-findings/issues/247), [fs0c](https://github.com/code-423n4/2022-12-caviar-findings/issues/242), [Tointer](https://github.com/code-423n4/2022-12-caviar-findings/issues/240), [haku](https://github.com/code-423n4/2022-12-caviar-findings/issues/239), [Koolex](https://github.com/code-423n4/2022-12-caviar-findings/issues/235), [\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-12-caviar-findings/issues/232), [ElKu](https://github.com/code-423n4/2022-12-caviar-findings/issues/231), [rajatbeladiya](https://github.com/code-423n4/2022-12-caviar-findings/issues/216), [hihen](https://github.com/code-423n4/2022-12-caviar-findings/issues/207), [izhelyazkov](https://github.com/code-423n4/2022-12-caviar-findings/issues/196), [KingNFT](https://github.com/code-423n4/2022-12-caviar-findings/issues/174), [koxuan](https://github.com/code-423n4/2022-12-caviar-findings/issues/151), [0x52](https://github.com/code-423n4/2022-12-caviar-findings/issues/149), [carrotsmuggler](https://github.com/code-423n4/2022-12-caviar-findings/issues/130), [yixxas](https://github.com/code-423n4/2022-12-caviar-findings/issues/128), [HE1M](https://github.com/code-423n4/2022-12-caviar-findings/issues/123), [supernova](https://github.com/code-423n4/2022-12-caviar-findings/issues/121), [cozzetti](https://github.com/code-423n4/2022-12-caviar-findings/issues/119), [rvierdiiev](https://github.com/code-423n4/2022-12-caviar-findings/issues/113), [SamGMK](https://github.com/code-423n4/2022-12-caviar-findings/issues/99), [aviggiano](https://github.com/code-423n4/2022-12-caviar-findings/issues/88), [seyni](https://github.com/code-423n4/2022-12-caviar-findings/issues/87), [lumoswiz](https://github.com/code-423n4/2022-12-caviar-findings/issues/77), [ladboy233](https://github.com/code-423n4/2022-12-caviar-findings/issues/58), [chaduke](https://github.com/code-423n4/2022-12-caviar-findings/issues/56), [cccz](https://github.com/code-423n4/2022-12-caviar-findings/issues/33), and [eyexploit](https://github.com/code-423n4/2022-12-caviar-findings/issues/19)*\n\nThe attack vector and impact is the same as [TOB-YEARN-003](https://github.com/yearn/yearn-security/blob/master/audits/20210719\\_ToB_yearn_vaultsv2/ToB\\_-\\_Yearn_Vault_v\\_2\\_Smart_Contracts_Audit_Report.pdf), where users may not receive shares in exchange for their deposits if the total asset amount has been manipulated through a large “donation”.\n\n### Proof of Concept\n\nIn `Pair.add()`, the amount of LP token minted is calculated as\n\n```solidity\nfunction addQuote(uint256 baseTokenAmount, uint256 fractionalTokenAmount) public view returns (uint256) {\n    uint256 lpTokenSupply = lpToken.totalSupply();\n    if (lpTokenSupply > 0) {\n        // calculate amount of lp tokens as a fraction of existing reserves\n        uint256 baseTokenShare = (baseTokenAmount * lpTokenSupply) / baseTokenReserves();\n        uint256 fractionalTokenShare = (fractionalTokenAmount * lpTokenSupply) / fractionalTokenReserves();\n        return Math.min(baseTokenShare, fractionalTokenShare);\n    } else {\n        // if there is no liquidity then init\n        return Math.sqrt(baseTokenAmount * fractionalTokenAmount);\n    }\n}\n```\n\nAn attacker can exploit using these steps\n\n1.  Create and add `1 wei baseToken - 1 wei quoteToken` to the pair. At this moment, attacker is minted `1 wei LP token` because `sqrt(1 * 1) = 1`\n2.  Transfer large amount of `baseToken` and `quoteToken` directly to the pair, such as `1e9 baseToken - 1e9 quoteToken`. Since no new LP token is minted, `1 wei LP token` worths `1e9 baseToken - 1e9 quoteToken`.\n3.  Normal users add liquidity to pool will receive `0` LP token if they add less than `1e9` token because of rounding division.\n\n```solidity\nbaseTokenShare = (X * 1) / 1e9;\nfractionalTokenShare = (Y * 1) / 1e9;\n```\n\n### Recommended Mitigation Steps\n\n*   [Uniswap V2 solved this problem by sending the first 1000 LP tokens to the zero address](https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol#L119-L124). The same can be done in this case i.e. when `lpTokenSupply == 0`, send the first min liquidity LP tokens to the zero address to enable share dilution.\n*   In `add()`, ensure the number of LP tokens to be minted is non-zero:\n\n```solidity\nrequire(lpTokenAmount != 0, \"No LP minted\");\n```\n\n**[outdoteth (Caviar) confirmed and commented](https://github.com/code-423n4/2022-12-caviar-findings/issues/442#issuecomment-1373902458):**\n > Fixed in: https://github.com/outdoteth/caviar/pull/3\n\n\n\n***\n \n# Medium Risk Findings (5)\n## [[M-01] Missing deadline checks allow pending transactions to be maliciously executed](https://github.com/code-423n4/2022-12-caviar-findings/issues/28)\n*Submitted by [Bobface](https://github.com/code-423n4/2022-12-caviar-findings/issues/28), also found by [cozzetti](https://github.com/code-423n4/2022-12-caviar-findings/issues/116)*\n\n<https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L63> <br><https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L107> <br><https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L147> <br><https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L182> <br><https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L275> <br><https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L294> <br><https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L310> <br><https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L323>\n\nThe `Pair` contract does not allow users to submit a deadline for their action. This missing feature enables pending transactions to be maliciously executed at a later point.\n\n### Detailed description\n\nAMMs should provide their users with an option to limit the execution of their pending actions, such as swaps or adding and removing liquidity. The most common solution is to include a deadline timestamp as a parameter (for example see [Uniswap V2](https://github.com/Uniswap/v2-periphery/blob/0335e8f7e1bd1e8d8329fd300aea2ef2f36dd19f/contracts/UniswapV2Router02.sol#L229)). If such an option is not present, users can unknowingly perform bad trades:\n\n1.  Alice wants to swap 100 fractional NFT tokens (`fTokens`) for 1 ETH and later sell the 1 ETH for 1000 DAI. She signs the transaction calling `Pair.sell` with `inputAmount = 100 fTokens` and `minOutputAmount = 0.99 ETH` to allow for some slippage.\n2.  The transaction is submitted to the mempool, however, Alice chose a transaction fee that is too low for miners to be interested in including her transaction in a block. The transaction stays pending in the mempool for extended periods, which could be hours, days, weeks, or even longer.\n3.  When the average gas fee dropped far enough for Alice's transaction to become interesting again for miners to include it, her swap will be executed. In the meantime, the price of `ETH` could have drastically changed. She will still at least get `0.99 ETH` due to `minOutputAmount`, but the `DAI` value of that output might be significantly lower. She has unknowingly performed a bad trade due to the pending transaction she forgot about.\n\nAn even worse way this issue can be maliciously exploited is through MEV:\n\n1.  The swap transaction is still pending in the mempool. Average fees are still too high for miners to be interested in it. The price of `fToken` has gone up significantly since the transaction was signed, meaning Alice would receive a lot more `ETH` when the swap is executed. But that also means that her `minOutputAmount` value is outdated and would allow for significant slippage.\n2.  A MEV bot detects the pending transaction. Since the outdated `minOutputAmount` now allows for high slippage, the bot sandwiches Alice, resulting in significant profit for the bot and significant loss for Alice.\n\nThe affected functions in `Pair.sol` are:\n\n*   `add()`\n*   `remove()`\n*   `buy()`\n*   `sell()`\n*   `nftAdd()`\n*   `nftRemove()`\n*   `nftBuy()`\n*   `nftSell()`\n\n### Recommended Mitigation Steps\n\nIntroduce a `deadline` parameter to the mentioned functions.\n\n### A word on the severity\n\nCategorizing this issue into medium versus high was not immediately obvious. I came to the conclusion that this is a high-severity issue for the following reason:\n\nI run an arbitrage MEV bot myself, which also tracks pending transactions in the mempool, though for another reason than the one mentioned in this report. There is a *significant* amount of pending and even dropped transactions: over `200,000` transactions that are older than one month. These transactions do all kinds of things, from withdrawing from staking contracts to sending funds to CEXs and also performing swaps on DEXs like Uniswap. This goes to show that this issue will in fact be very real, there will be very old pending transactions wanting to perform trades without a doubt. And with the prevalence of advanced MEV bots, these transactions will be exploited as described in the second example above, leading to losses for Caviar's users.\n\n### Proof of Concept\n\nOmitted in this case, since the exploit is solely based on the fact that there is no limit on how long a transaction is allowed to be pending, which can be clearly seen when looking at the mentioned functions.\n\n**[berndartmueller (judge) decreased severity to Medium](https://github.com/code-423n4/2022-12-caviar-findings/issues/28#issuecomment-1377558048)**\n\n**[outdoteth (Caviar) commented](https://github.com/code-423n4/2022-12-caviar-findings/issues/28#issuecomment-1398324860):**\n > Fixed in https://github.com/outdoteth/caviar/pull/6\n> \n> Add a deadline check.\n\n\n\n***\n\n## [[M-02] Price will not always be 18 decimals, as expected and outlined in the comments](https://github.com/code-423n4/2022-12-caviar-findings/issues/141)\n*Submitted by [obront](https://github.com/code-423n4/2022-12-caviar-findings/issues/141), also found by [cryptostellar5](https://github.com/code-423n4/2022-12-caviar-findings/issues/488), [Tricko](https://github.com/code-423n4/2022-12-caviar-findings/issues/386), [CRYP70](https://github.com/code-423n4/2022-12-caviar-findings/issues/277), [0xmuxyz](https://github.com/code-423n4/2022-12-caviar-findings/issues/274), [koxuan](https://github.com/code-423n4/2022-12-caviar-findings/issues/215), [8olidity](https://github.com/code-423n4/2022-12-caviar-findings/issues/171), [yixxas](https://github.com/code-423n4/2022-12-caviar-findings/issues/143), [cozzetti](https://github.com/code-423n4/2022-12-caviar-findings/issues/117), [ktg](https://github.com/code-423n4/2022-12-caviar-findings/issues/86), and [ladboy233](https://github.com/code-423n4/2022-12-caviar-findings/issues/53)*\n\nThe `price()` function is expected to return the price of one fractional tokens, represented in base tokens, to 18 decimals of precision. This is laid out clearly in the comments:\n\n`/// @notice The current price of one fractional token in base tokens with 18 decimals of precision.`<br>\n`/// @dev Calculated by dividing the base token reserves by the fractional token reserves.`<br>\n`/// @return price The price of one fractional token in base tokens * 1e18.`<br>\n\n\nHowever, the formula incorrectly calculates the price to be represented in whatever number of decimals the base token is in. Since there are many common base tokens (such as USDC) that will have fewer than 18 decimals, this will create a large mismatch between expected prices and the prices that result from the function.\n\n### Proof of Concept\n\nPrices are calculated with the following formula, where `ONE = 1e18`:\n\n```solidity\nreturn (_baseTokenReserves() * ONE) / fractionalTokenReserves();\n```\n\nWe know that `fractionalTokenReserves` will always be represented in 18 decimals. This means that the `ONE` and the\n`fractionalTokenReserves` will cancel each other out, and we are left with the `baseTokenReserves` number of decimals for the final price.\n\nAs an example:\n\n*   We have `$1000` USDC in reserves, which at 6 decimals is 1e9\n*   We have 1000 fractional tokens in reserve, which at 18 decimals is 1e21\n*   The price calculation is `1e9 * 1e18 / 1e21 = 1e6`\n*   While the value should be 1 token, the 1e6 will be interpreted as just 1/1e12 tokens if we expect the price to be in 1e18\n\n### Recommended Mitigation Steps\n\nThe formula should use the decimals value of the `baseToken` to ensure that the decimals of the resulting price ends up with 18 decimals as expected:\n\n```solidity\nreturn (_baseTokenReserves() * 10 ** (36 - ERC20(baseToken).decimals()) / fractionalTokenReserves();\n```\n\nThis will multiple `baseTokenReserves` by 1e18, and then additionally by the gap between 1e18 and its own decimals count, which will result in the correct decimals value for the outputted price.\n\n**[outdoteth (Caviar) confirmed and commented](https://github.com/code-423n4/2022-12-caviar-findings/issues/141#issuecomment-1373910029):**\n > Fixed in: https://github.com/outdoteth/caviar/pull/5\n> \n> Always ensure that the exponent is 18 greater than the denominator. \n\n\n\n***\n\n## [[M-03] Rounding error in `buyQuote` might result in free tokens](https://github.com/code-423n4/2022-12-caviar-findings/issues/243)\n*Submitted by [Zarf](https://github.com/code-423n4/2022-12-caviar-findings/issues/243), also found by [minhtrng](https://github.com/code-423n4/2022-12-caviar-findings/issues/481), [Franfran](https://github.com/code-423n4/2022-12-caviar-findings/issues/460), [Apocalypto](https://github.com/code-423n4/2022-12-caviar-findings/issues/458), [adriro](https://github.com/code-423n4/2022-12-caviar-findings/issues/436), [0xDave](https://github.com/code-423n4/2022-12-caviar-findings/issues/424), [wait](https://github.com/code-423n4/2022-12-caviar-findings/issues/409), [unforgiven](https://github.com/code-423n4/2022-12-caviar-findings/issues/391), [Jeiwan](https://github.com/code-423n4/2022-12-caviar-findings/issues/381), [hansfriese](https://github.com/code-423n4/2022-12-caviar-findings/issues/351), [bytehat](https://github.com/code-423n4/2022-12-caviar-findings/issues/328), [UNCHAIN](https://github.com/code-423n4/2022-12-caviar-findings/issues/307), [rajatbeladiya](https://github.com/code-423n4/2022-12-caviar-findings/issues/289), [CRYP70](https://github.com/code-423n4/2022-12-caviar-findings/issues/276), [hihen](https://github.com/code-423n4/2022-12-caviar-findings/issues/228), [koxuan](https://github.com/code-423n4/2022-12-caviar-findings/issues/208), [kiki\\_dev](https://github.com/code-423n4/2022-12-caviar-findings/issues/131), [yixxas](https://github.com/code-423n4/2022-12-caviar-findings/issues/129), and [chaduke](https://github.com/code-423n4/2022-12-caviar-findings/issues/43)*\n\nIn order to guarantee the contract does not become insolvent, incoming assets should be rounded up, while outgoing assets should be rounded down.\n\nThe function `buyQuote()` calculates the amount of base tokens required to buy a given amount of fractional tokens. However, this function rounds down the required amount, which is in favor of the buyer (i.e. he/she has to provide less base tokens for the amount of receiving fractional tokens.\n\nDepending on the amount of current token reserves and the amount of fractional tokens the user wishes to buy, it might be possible to receive free fractional tokens.\n\nAssume the following reserve state:\n\n*   base token reserve: 0,1 WBTC (=`1e7`)\n*   fractional token reserve: 10.000.000 (=`1e25`)\n\nThe user wishes to buy 0,9 fractional tokens (=`9e17`). Then, the function `buyQuote()` will calculate the amount of base tokens as follows:\n\n`(9e17 * 1000 * 1e7) / ((1e25 - 9e17) * 997) = 0,903`\n\nAs division in Solidity will round down, the amount results in `0` amount of base tokens required (WBTC) to buy 0,9 fractional tokens.\n\n### Impact\n\nUsing the example above, 0,9 fractional tokens is a really small amount (`0,1 BTC / 1e7 = +- $0,00017`). Moreover, if the user keeps repeating this attack, the fractional token reserve becomes smaller, which will result in a buyQuote amount of >1, after which the tokens will not be free anymore.\n\nAdditionally, as the contract incorporates a fee of 30bps, it will likely not be insolvent. The downside would be the LP holder, which will receive a fee of less than 30bps. Hence, the impact is rated as medium.\n\n### Recommended Mitigation Steps\n\nFor incoming assets, it’s recommended to round up the required amount. We could use solmate’s `FixedPointMathLib` library to calculate the quote and round up. This way the required amount will always at least be 1 wei:\n\n```solidity\nfunction buyQuote(uint256 outputAmount) public view returns (uint256) {\n  return mulDivUp(outputAmount * 1000, baseTokenReserves(), (fractionalTokenReserves() - outputAmount) * 997);\n}\n```\n\n**[outdoteth (Caviar) confirmed and commented](https://github.com/code-423n4/2022-12-caviar-findings/issues/243#issuecomment-1373918925):**\n > Fixed in: https://github.com/outdoteth/caviar/pull/4\n> \n> Uses muldivup from solmate to round up the calculation in buyQuote.\n\n\n\n***\n\n## [[M-04] It's possible to swap NFT token ids without fee and also attacker can wrap unwrap all the NFT token balance of the Pair contract and steal their air drops for those token ids](https://github.com/code-423n4/2022-12-caviar-findings/issues/367)\n*Submitted by [unforgiven](https://github.com/code-423n4/2022-12-caviar-findings/issues/367), also found by [imare](https://github.com/code-423n4/2022-12-caviar-findings/issues/380) and [ElKu](https://github.com/code-423n4/2022-12-caviar-findings/issues/227)*\n\n<https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L217-L243> <br><https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L248-L262>\n\nUsers can `wrap()` their NFT tokens (which id is whitelisted) and receive `1e18` fractional token or they can pay `1e18` fractional token and unwrap NFT token. there is two issue here:\n\n1.  anyone can swap their NFT token id with another NFT token id without paying any fee(both ids should be whitelisted). it's swap without fee.\n2.  attacker can swap his NFT token(with whitelisted id) for all the NFT balance of contract and steal those NFT tokens airdrop all in one transaction.\n\n### Proof of Concept\n\nThis is `wrap()` and `unwrap()` code:\n\n        function wrap(uint256[] calldata tokenIds, bytes32[][] calldata proofs)\n            public\n            returns (uint256 fractionalTokenAmount)\n        {\n            // *** Checks *** //\n\n            // check that wrapping is not closed\n            require(closeTimestamp == 0, \"Wrap: closed\");\n\n            // check the tokens exist in the merkle root\n            _validateTokenIds(tokenIds, proofs);\n\n            // *** Effects *** //\n\n            // mint fractional tokens to sender\n            fractionalTokenAmount = tokenIds.length * ONE;\n            _mint(msg.sender, fractionalTokenAmount);\n\n            // *** Interactions *** //\n\n            // transfer nfts from sender\n            for (uint256 i = 0; i < tokenIds.length; i++) {\n                ERC721(nft).safeTransferFrom(msg.sender, address(this), tokenIds[i]);\n            }\n\n            emit Wrap(tokenIds);\n        }\n\n        function unwrap(uint256[] calldata tokenIds) public returns (uint256 fractionalTokenAmount) {\n            // *** Effects *** //\n\n            // burn fractional tokens from sender\n            fractionalTokenAmount = tokenIds.length * ONE;\n            _burn(msg.sender, fractionalTokenAmount);\n\n            // *** Interactions *** //\n\n            // transfer nfts to sender\n            for (uint256 i = 0; i < tokenIds.length; i++) {\n                ERC721(nft).safeTransferFrom(address(this), msg.sender, tokenIds[i]);\n            }\n\n            emit Unwrap(tokenIds);\n        }\n\nAs you can see it's possible to wrap one NFT token (which id is whitelisted and is in merkle tree) and unwrap another NFT token without paying fee. so Pair contract create NFT swap without fee for users but there is no fee generated for those who wrapped and put their fractional tokens as liquidity providers.\nThe other issue with this is that some NFT tokens air drop new NFT tokens for NFT holders by making NFT holders to call `getAirdrop()` function. attacker can use this swap functionality to get air drop token for all the NFT balance of the Pair contract. to steps to perform this attack:\n\n1.  if Pair contract is for NFT1 and baseToken1 and also merkle tree root hash is 0x0.\n2.  users deposited 100 NFT1 tokens to the Pair contract.\n3.  NFT1 decide to airdrop some new tokens for token holders and token holders need to call `nft.getAirDrop(id)` while they own the NFT id.\n4.  attacker would create a contract and buy one of the NFT1 tokens (attackerID1) and wrap it to receive `1e18` fractional tokens and perform this steps in the contract:<br>\n    4.1 loop through all the NFT tokens in the Pair contract balance and:<br>\n    4.2 unwrap NFT token id=i from Pair contract by paying `1e18` fractional token.<br>\n    4.3 call `nft.getAirDrop(i)` and receive the new airdrop token. (the name of the function can be other thing not exactly `getAirDrop()`)<br>\n    4.4 wrap NFT token id=i and receive `1e18` fractional token.\n\n5. in the end attacker would unwrap attackerID1 token from Pair contract.<br>\nso attacker was able to receive all the air drops of the NFT tokens that were in the contract address, there could be 100 or 1000 NFT tokens in the contract address and attacker can steal their air drops in one transaction(by writing a contract). those air drops belongs to all the fractional owners and contract shouldn't allow one user to take all the air drops for himself. as airdrops are common in NFT collections so this bug is critical and would happen.\n\nalso some of the NFT tokens allows users to stake some tokens for their NFT tokens and receive rewards(for example BAYC/MAYC). if a user stakes tokens for his NFT tokens then wrap those NFT tokens then it would be possible for attacker to unwrap those tokens and steal user staked amounts. in this scenario user made a risky move and wrapped NFT tokens while they have stake but as a lot of users wants to stake for their NFTs this would make them unable to use caviar protocol.\n\nalso any other action that attacker can perform by becoming the owner of the NFT token is possible by this attack and if that action can harm the NFT token holders then attacker can harm by doing this attack and performing that action.\n\n### Tools Used\n\nVIM\n\n### Recommended Mitigation Steps\n\nThe real solution to prevent this attack (stealing air drops) can be hard. some of the things can be done is:\n* create functionality so admin can call `getAirDrop()` functions during the airdrops before attacker.\n* call `getAirDrop()` (which admin specified) function before unwrapping tokens.\n* make some fee for NFT token unwrapping.\n* create some lock time(some days) for each wrapped NFT that in that lock time only the one who supplied that token can unwrap it.\n* create some delay for unwrapping tokens and if user wants to unwrap token he would receive it after this delay.\n\n**[outdoteth (Caviar) acknowledged, but disagreed with severity](https://github.com/code-423n4/2022-12-caviar-findings/issues/367#event-8160517199)**\n\n**[berndartmueller (judge) decreased severity to Medium](https://github.com/code-423n4/2022-12-caviar-findings/issues/367#event-8227237597)**\n\n\n\n***\n\n## [[M-05] Pair price may be manipulated by direct transfers](https://github.com/code-423n4/2022-12-caviar-findings/issues/383)\n*Submitted by [Jeiwan](https://github.com/code-423n4/2022-12-caviar-findings/issues/383), also found by [BPZ](https://github.com/code-423n4/2022-12-caviar-findings/issues/506), [ak1](https://github.com/code-423n4/2022-12-caviar-findings/issues/482), [Janio](https://github.com/code-423n4/2022-12-caviar-findings/issues/473), [hansfriese](https://github.com/code-423n4/2022-12-caviar-findings/issues/353), [UNCHAIN](https://github.com/code-423n4/2022-12-caviar-findings/issues/311), [dic0de](https://github.com/code-423n4/2022-12-caviar-findings/issues/84), and [ladboy233](https://github.com/code-423n4/2022-12-caviar-findings/issues/50)*\n\n<https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L391> <br><https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L479-L480> <br><https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L384>\n\nAn attacker may manipulate the price of a pair by transferring tokens directly to the pair. Since the `Pair` contract exposes the `price` function, it maybe be used as a price oracle in third-party integrations. Manipulating the price of a pair may allow an attacker to steal funds from such integrations.\n\n### Proof of Concept\n\nThe `Pair` contract is a pool of two tokens, a base token and a fractional token. Its main purpose is to allow users to swap the tokens at a fair price. Since the price is calculated based on the reserves of a pair, it can only be changed in two cases:\n\n1.  when initial liquidity is added: the first liquidity provider sets the price of a pool ([Pair.sol#L85-L97](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L85-L97)); other liquidity providers cannot change the price ([Pair.sol#L421-L423](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L421-L423));\n2.  during trades: trading adds and removes tokens from a pool, ensuring the K constant invariant is respected ([Pair.sol#L194-L204](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L194-L204), [Pair.sol#L161-L173](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L161-L173)).\n\nHowever, the Pair contract calculates the price using the current token balances of the contract ([Pair.sol#L379-L385](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L379-L385), [Pair.sol#L477-L481](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L477-L481)):\n\n```solidity\nfunction baseTokenReserves() public view returns (uint256) {\n    return _baseTokenReserves();\n}\n\nfunction _baseTokenReserves() internal view returns (uint256) {\n    return baseToken == address(0)\n        ? address(this).balance - msg.value // subtract the msg.value if the base token is ETH\n        : ERC20(baseToken).balanceOf(address(this));\n}\n\nfunction fractionalTokenReserves() public view returns (uint256) {\n    return balanceOf[address(this)];\n}\n```\n\nThis allows an attacker to change the price of a pool and skip the K constant invariant check that's enforced on new liquidity ([Pair.sol#L421-L423](https://github.com/code-423n4/2022-12-caviar/blob/0212f9dc3b6a418803dbfacda0e340e059b8aae2/src/Pair.sol#L421-L423)).\n\n### Recommended Mitigation Steps\n\nConsider tracking pair's reserves internally, using state variables, similarly to how Uniswap V2 does that:\n\n*   [UniswapV2Pair.sol#L22-L23](https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol#L22-L23):\n\n```solidity\nuint112 private reserve0;           // uses single storage slot, accessible via getReserves\nuint112 private reserve1;           // uses single storage slot, accessible via getReserves\n```\n\n*   [UniswapV2Pair.sol#L38-L42](https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol#L38-L42):\n\n```solidity\nfunction getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n    _reserve0 = reserve0;\n    _reserve1 = reserve1;\n    _blockTimestampLast = blockTimestampLast;\n}\n```\n\n*   [UniswapV2Pair.sol#L38-L42](https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol#L38-L42):\n\n```solidity\n// update reserves and, on the first call per block, price accumulators\nfunction _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n    require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\n    uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n    uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n    if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n        // * never overflows, and + overflow is desired\n        price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n        price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n    }\n    reserve0 = uint112(balance0);\n    reserve1 = uint112(balance1);\n    blockTimestampLast = blockTimestamp;\n    emit Sync(reserve0, reserve1);\n}\n```\n\n**[minhquanym (warden) commented](https://github.com/code-423n4/2022-12-caviar-findings/issues/383#issuecomment-1385868751):**\n > @berndartmueller - The recommendation suggested that it should follow Uniswap V2 and add internal state balance. However, Uniswap V2 also has function `sync()` allowing to sync `reserve0` and `reserve1` to current token balance of contract. It means if this is an issue, it will also be an issue after UniV2 (by direct transfers and call `sync()` immediately). Please correct me if I missed something here\n> https://github.com/Uniswap/v2-core/blob/ee547b17853e71ed4e0101ccfd52e70d5acded58/contracts/UniswapV2Pair.sol#L198  \n\n**[berndartmueller (judge) commented](https://github.com/code-423n4/2022-12-caviar-findings/issues/383#issuecomment-1396635210):**\n > @minhquanym - The specific issue demonstrated in this submission is exposing the `Pair.price` function, which is easily manipulatable by direct transfers and thus vulnerable as a price oracle. Uniswap V2, in comparison, uses the concept of a cumulative price weighted by the amount of time this price existed (see https://docs.uniswap.org/contracts/v2/concepts/core-concepts/oracles for more details).\n\n**[outdoteth (Caviar) acknowledged](https://github.com/code-423n4/2022-12-caviar-findings/issues/383#event-8321057436)**\n\n\n\n***\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 25 reports were submitted by wardens detailing low risk and non-critical issues. The [report highlighted below](https://github.com/code-423n4/2022-12-caviar-findings/issues/203) by **0xSmartContract** received the top score from the judge.\n\n*The following wardens also submitted reports: [SleepingBugs](https://github.com/code-423n4/2022-12-caviar-findings/issues/494), [JC](https://github.com/code-423n4/2022-12-caviar-findings/issues/492), [rjs](https://github.com/code-423n4/2022-12-caviar-findings/issues/486), [minhquanym](https://github.com/code-423n4/2022-12-caviar-findings/issues/447), [IllIllI](https://github.com/code-423n4/2022-12-caviar-findings/issues/441), [0xGusMcCrae](https://github.com/code-423n4/2022-12-caviar-findings/issues/389), [h0wl](https://github.com/code-423n4/2022-12-caviar-findings/issues/322), [unforgiven](https://github.com/code-423n4/2022-12-caviar-findings/issues/319), [UNCHAIN](https://github.com/code-423n4/2022-12-caviar-findings/issues/301), [immeas](https://github.com/code-423n4/2022-12-caviar-findings/issues/251), [ahayashi](https://github.com/code-423n4/2022-12-caviar-findings/issues/238), [RaymondFam](https://github.com/code-423n4/2022-12-caviar-findings/issues/206), [caventa](https://github.com/code-423n4/2022-12-caviar-findings/issues/181), [8olidity](https://github.com/code-423n4/2022-12-caviar-findings/issues/170), [yixxas](https://github.com/code-423n4/2022-12-caviar-findings/issues/145), [obront](https://github.com/code-423n4/2022-12-caviar-findings/issues/135), [shung](https://github.com/code-423n4/2022-12-caviar-findings/issues/124), [cozzetti](https://github.com/code-423n4/2022-12-caviar-findings/issues/114), [rvierdiiev](https://github.com/code-423n4/2022-12-caviar-findings/issues/110), [Bnke0x0](https://github.com/code-423n4/2022-12-caviar-findings/issues/98), [Rolezn](https://github.com/code-423n4/2022-12-caviar-findings/issues/61), [aviggiano](https://github.com/code-423n4/2022-12-caviar-findings/issues/60), [helios](https://github.com/code-423n4/2022-12-caviar-findings/issues/59), and [ladboy233](https://github.com/code-423n4/2022-12-caviar-findings/issues/45).*\n\n## Summary\n\n### Low Risk Issues List\n| Number |Issues Details|Context|\n|:--:|:-------|:--:|\n|[L-01]| Missing ReEntrancy Guard to `withdraw` function | 1 |\n|[L-02]| Use ```safeTransferOwnership``` instead of ```transferOwnership``` function | 1 |\n|[L-03]| Loss of precision due to rounding| 1 |\n|[L-04]| Solmate's SafeTransferLib doesn't check whether the ERC20 contract exists| 10 |\n|[L-05]| Should an airdrop token arrive on the `pair.sol` contract, it will be stuck | 1 |\n\nTotal 5 issues\n\n### Non-Critical Issues List\n| Number |Issues Details|Context|\n|:--:|:-------|:--:|\n| [N-01]|Insufficient coverage|1|\n| [N-02] |NatSpec comments should be increased in contracts |All Contracts |\n| [N-03] |`Function writing` that does not comply with the `Solidity Style Guide`| All Contracts |\n| [N-04] |Solidity compiler optimizations can be problematic |  |\n| [N-05] |For modern and more readable code; update import usages | 13|\n| [N-06] |_Lock pragmas_ to specific compiler version| 5 |\n| [N-07] |Use underscores for number literals| 2 |\n| [N-08] |Use of bytes.concat() instead of `abi.encodePacked()` | 1 |\n| [N-09] |Pragma version^0.8.17  version too recent to be trusted| All Contracts |\n| [N-10] |Add EIP-2981 NFT Royalty Standart Support | 1  |\n| [N-11] |Showing the actual values of numbers in NatSpec comments makes checking and reading code easier | 2  |\n| [N-12] | Missing Event for critical parameters init and change| 3 |\n| [N-13] | Add to _blacklist function_  | 1 |\n\nTotal 13 issues\n\n### Suggestions\n| Number | Suggestion Details |\n|:--:|:-------|\n| [S-01] |Project Upgrade and Stop Scenario should be |\n| [S-02] |Generate perfect code headers every time |\n\nTotal 2 suggestions\n\n## [L-01] Missing ReEntrancy Guard to `withdraw` function\n\nhttps://github.com/code-423n4/2022-12-caviar/blob/main/src/Pair.sol#L359-L373\n\n### Impact\n\nPosition.sol contract has no Re-Entrancy protection in `withdraw` function\n\n```solidity\nsrc/Pair.sol:\n\n function withdraw(uint256 tokenId) public {\n        // check that the sender is the caviar owner\n        require(caviar.owner() == msg.sender, \"Withdraw: not owner\");\n\n        // check that the close period has been set\n        require(closeTimestamp != 0, \"Withdraw not initiated\");\n\n        // check that the close grace period has passed\n        require(block.timestamp >= closeTimestamp, \"Not withdrawable yet\");\n\n        // transfer the nft to the caviar owner\n        ERC721(nft).safeTransferFrom(address(this), msg.sender, tokenId);\n\n        emit Withdraw(tokenId);\n    }\n\n```\n\nIf the mint was initiated by a contract, then the contract is checked for its ability to receive ERC721 tokens. Without reentrancy guard, onERC721Received will allow an attacker controlled contract to call the mint again, which may not be desirable to some parties, like allowing minting more than allowed.<br>\nhttps://www.paradigm.xyz/2021/08/the-dangers-of-surprising-code\n\n### Proof of Concept\nIf `withdraw` is msg.sender contract, it can do re-entrancy by overriding `onERC721Received` function, it doesn't seem to be a serious problem since it conforms to check-effect-interaction pattern, but this is a clear re-entry due to access to other functions and pre-emit processing. is the entracy\n\n```solidity\nreentrancy.sol:\n function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes memory\n  ) public virtual override returns (bytes4) {\n    //...do something\n    }\n    return this.onERC721Received.selector;\n  }\n\n```\n\n### Recommended Mitigation Steps\nUse Openzeppelin or Solmate Re-Entrancy pattern.<br>\nHere is a example of a re-entrancy guard\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract ReEntrancyGuard {\n    bool internal locked;\n\n    modifier noReentrant() {\n        require(!locked, \"No re-entrancy\");\n        locked = true;\n        _;\n        locked = false;\n    }\n}\n```\n\n## [L-02] Use `safeTransferOwnership` instead of `transferOwnership` function\n\n**Context:**\n```solidity\n2 results - 2 files\n\nsrc/Caviar.sol:\n   4: import \"solmate/auth/Owned.sol\";\n  12: contract Caviar is Owned {\n\n\nsrc/LpToken.sol:\n   4: import \"solmate/auth/Owned.sol\";\n  11: contract LpToken is Owned, ERC20 {\n\n```\n\n**Description:**<br>\n`transferOwnership` function is used to change Ownership from `Owned.sol`.\n\nUse a 2 structure transferOwnership which is safer.<br>\n`safeTransferOwnership`,  use it is more secure due to 2-stage ownership transfer.\n\n**Recommendation:**<br>\nUse `Ownable2Step.sol`<br>\n[Ownable2Step.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable2Step.sol)\n\n## [L-03] Loss of precision due to rounding\n\nAdd scalars so roundings are negligible\n\n```solidity\n\nsrc/Pair.sol:\n  390:     function price() public view returns (uint256) {\n  391:         return (_baseTokenReserves() * ONE) / fractionalTokenReserves();\n  392:     }\n\n```\n\n## [L-04] Solmate's `SafeTransferLib` doesn't check whether the ERC20 contract exists\n\nSolmate's SafeTransferLib, which is often used to interact with non-compliant/unsafe ERC20 tokens, does not check whether the ERC20 contract exists. The following code will not revert in case the token doesn't exist (yet).\n\nThis is stated in the Solmate library:\nhttps://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol#L9\n\n```solidity\n\n10 results - 1 file\n\nsrc/Pair.sol:\n   94              // transfer base tokens in\n   95:             ERC20(baseToken).safeTransferFrom(msg.sender, address(this), baseTokenAmount);\n   96          }\n\n  133              // if base token is native ETH then send ether to sender\n  134:             msg.sender.safeTransferETH(baseTokenOutputAmount);\n  135          } else {\n  136              // transfer base tokens to sender\n  137:             ERC20(baseToken).safeTransfer(msg.sender, baseTokenOutputAmount);\n  138          }\n\n  168              uint256 refundAmount = maxInputAmount - inputAmount;\n  169:             if (refundAmount > 0) msg.sender.safeTransferETH(refundAmount);\n  170          } else {\n  171              // transfer base tokens in\n  172:             ERC20(baseToken).safeTransferFrom(msg.sender, address(this), inputAmount);\n  173          }\n\n  199              // transfer ether out\n  200:             msg.sender.safeTransferETH(outputAmount);\n  201          } else {\n  202              // transfer base tokens out\n  203:             ERC20(baseToken).safeTransfer(msg.sender, outputAmount);\n  204          }\n\n  238          for (uint256 i = 0; i < tokenIds.length; i++) {\n  239:             ERC721(nft).safeTransferFrom(msg.sender, address(this), tokenIds[i]);\n  240          }\n\n  258          for (uint256 i = 0; i < tokenIds.length; i++) {\n  259:             ERC721(nft).safeTransferFrom(address(this), msg.sender, tokenIds[i]);\n  260          }\n\n  369          // transfer the nft to the caviar owner\n  370:         ERC721(nft).safeTransferFrom(address(this), msg.sender, tokenId);\n  371 \n```\n\n### Recommended Mitigation Steps\n\nAdd a contract exist control in functions;\n```js\npragma solidity >=0.8.0;\n\nfunction isContract(address _addr) private returns (bool isContract) {\n    isContract = _addr.code.length > 0;\n}\n```\n\n## [L-05] Should an airdrop token arrive on the `pair.sol` contract, it will be stuck\n\nWith the `wrap()` function, NFTs are transferred to the contract and in case of airdrop due to these NFTs, it will be stuck in the contract as there is no function to take these airdrop tokens from the contract.\n\nImportant NFT project owners are given airdrops, especially since the project includes NFTs such as BAYC, Moonbirds, Doodles, Azuki, there is a high probability of receiving Airdrops, but there is no function to withdraw incoming airdrop tokens, so airdrop tokens will be stuck in the contract.\n\nA common method for airdrops is to collect airdrops with `claim`, so the `Pair.sol` contract can be considered upgradagable, adding a function to make `claim`.\n\n```solidity\nsrc/Pair.sol:\n  216      /// @return fractionalTokenAmount The amount of fractional tokens minted.\n  217:     function wrap(uint256[] calldata tokenIds, bytes32[][] calldata proofs)\n  218:         public\n  219:         returns (uint256 fractionalTokenAmount)\n  220:     {\n  221:         // *** Checks *** //\n  222: \n  223:         // check that wrapping is not closed\n  224:         require(closeTimestamp == 0, \"Wrap: closed\");\n  225: \n  226:         // check the tokens exist in the merkle root\n  227:         _validateTokenIds(tokenIds, proofs);\n  228: \n  229:         // *** Effects *** //\n  230: \n  231:         // mint fractional tokens to sender\n  232:         fractionalTokenAmount = tokenIds.length * ONE;\n  233:         _mint(msg.sender, fractionalTokenAmount);\n  234: \n  235:         // *** Interactions *** //\n  236: \n  237:         // transfer nfts from sender\n  238:         for (uint256 i = 0; i < tokenIds.length; i++) {\n  239:             ERC721(nft).safeTransferFrom(msg.sender, address(this), tokenIds[i]);\n  240:         }\n  241: \n  242:         emit Wrap(tokenIds);\n  243:     }\n\n```\n\n### Recommended Mitigation Steps\n\nAdd this code:\n\n```solidity\n /**\n  * @notice Sends ERC20 tokens trapped in contract to external address\n  * @dev Onlyowner is allowed to make this function call\n  * @param account is the receiving address\n  * @param externalToken is the token being sent\n  * @param amount is the quantity being sent\n  * @return boolean value indicating whether the operation succeeded.\n  *\n */\n  function rescueERC20(address account, address externalToken, uint256 amount) public onlyOwner returns (bool) {\n    IERC20(externalToken).transfer(account, amount);\n    return true;\n  }\n}\n\n```\n\n## [N-01] Insufficient coverage\n\n**Description:**<br>\nThe test coverage rate of the project is 97%. Testing all functions is best practice in terms of security criteria.\n\n```js\n\n| File                                     | % Lines          | % Statements      | % Branches     | % Funcs        |\n|------------------------------------------|------------------|-------------------|----------------|----------------|\n| src/Caviar.sol                           | 100.00% (11/11)  | 100.00% (15/15)   | 100.00% (4/4)  | 100.00% (2/2)  |\n| src/LpToken.sol                          | 100.00% (2/2)    | 100.00% (2/2)     | 100.00% (0/0)  | 100.00% (2/2)  |\n| src/Pair.sol                             | 100.00% (88/88)  | 100.00% (107/107) | 95.24% (40/42) | 86.36% (19/22) |\n| src/lib/SafeERC20Namer.sol               | 0.00% (0/38)     | 0.00% (0/53)      | 0.00% (0/12)   | 0.00% (0/7)    |\n\n```\nDue to its capacity, test coverage is expected to be 100%.\n\n## [N-02] NatSpec comments should be increased in contracts\n\n**Context:**<br>\nAll Contracts\n\n**Description:**<br>\nIt is recommended that Solidity contracts are fully annotated using NatSpec for all public interfaces (everything in the ABI). It is clearly stated in the Solidity official documentation.<br>\nIn complex projects such as Defi, the interpretation of all functions and their arguments and returns is important for code readability and auditability.<br>\nhttps://docs.soliditylang.org/en/v0.8.15/natspec-format.html\n\n**Recommendation:**<br>\nNatSpec comments should be increased in contracts\n\n## [N-03] `Function writing` that does not comply with the `Solidity Style Guide`\n\n**Context:**<br>\nAll Contracts\n\n**Description:**<br>\nOrder of Functions; ordering helps readers identify which functions they can call and to find the constructor and fallback definitions easier. But there are contracts in the project that do not comply with this.\n\nhttps://docs.soliditylang.org/en/v0.8.17/style-guide.html\n\nFunctions should be grouped according to their visibility and ordered:\n\n* constructor\n* receive function (if exists)\n* fallback function (if exists)\n* external\n* public\n* internal\n* private\n* within a grouping, place the view and pure functions last\n\n## [N-04] Solidity compiler optimizations can be problematic\n\n```js\n\nfoundry.toml:\n  1: [profile.default]\n  2: src = \"src\"\n  3: out = \"out\"\n  4: libs = [\"lib\"]\n  5: solc = \"0.8.17\"\n  6: optimizer_runs = 3_000\n\n```\n\n**Description:**<br>\nProtocol has enabled optional compiler optimizations in Solidity.<br>\nThere have been several optimization bugs with security implications. Moreover, optimizations are actively being developed. Solidity compiler optimizations are disabled by default, and it is unclear how many contracts in the wild actually use them. \n\nTherefore, it is unclear how well they are being tested and exercised.<br>\nHigh-severity security issues due to optimization bugs have occurred in the past. A high-severity bug in the emscripten-generated solc-js compiler used by Truffle and Remix persisted until late 2018. The fix for this bug was not reported in the Solidity CHANGELOG. \n\nAnother high-severity optimization bug resulting in incorrect bit shift results was patched in Solidity 0.5.6. More recently, another bug due to the incorrect caching of keccak256 was reported.<br>\nA compiler audit of Solidity from November 2018 concluded that the optional optimizations may not be safe.<br>\nIt is likely that there are latent bugs related to optimization and that new bugs will be introduced due to future optimizations.\n\n**Exploit Scenario:**<br>\nA latent or future bug in Solidity compiler optimizations—or in the Emscripten transpilation to solc-js—causes a security vulnerability in the contracts.\n\n**Recommendation:**<br>\nShort term, measure the gas savings from optimizations and carefully weigh them against the possibility of an optimization-related bug.\nLong term, monitor the development and adoption of Solidity compiler optimizations to assess their maturity.\n\n## [N-05] For modern and more readable code; update import usages\n\n**Context:**\n\n```solidity\n\n13 results - 4 files\n\nsrc/Caviar.sol:\n  3  \n  4: import \"solmate/auth/Owned.sol\";\n  5  \n  6: import \"./lib/SafeERC20Namer.sol\";\n  7: import \"./Pair.sol\";\n  8  \n\nsrc/LpToken.sol:\n  3  \n  4: import \"solmate/auth/Owned.sol\";\n  5: import \"solmate/tokens/ERC20.sol\";\n  6  \n\nsrc/Pair.sol:\n   3  \n   4: import \"solmate/tokens/ERC20.sol\";\n   5: import \"solmate/tokens/ERC721.sol\";\n   6: import \"solmate/utils/MerkleProofLib.sol\";\n   7: import \"solmate/utils/SafeTransferLib.sol\";\n   8: import \"openzeppelin/utils/math/Math.sol\";\n   9  \n  10: import \"./LpToken.sol\";\n  11: import \"./Caviar.sol\";\n  12  \n\nsrc/lib/SafeERC20Namer.sol:\n  3  \n  4: import \"openzeppelin/utils/Strings.sol\";\n  5 \n\n```\n\n**Description:**<br>\nSolidity code is also cleaner in another way that might not be noticeable: the struct Point. We were importing it previously with global import but not using it. The Point struct `polluted the source code` with an unnecessary object we were not using because we did not need it. <br>\nThis was breaking the rule of modularity and modular programming: `only import what you need` Specific imports with curly braces allow us to apply this rule better.\n\n**Recommendation:**<br>\n`import {contract1 , contract2} from \"filename.sol\";`\n\nA good example from the ArtGobblers project;\n```js\nimport {Owned} from \"solmate/auth/Owned.sol\";\nimport {ERC721} from \"solmate/tokens/ERC721.sol\";\nimport {LibString} from \"solmate/utils/LibString.sol\";\nimport {MerkleProofLib} from \"solmate/utils/MerkleProofLib.sol\";\nimport {FixedPointMathLib} from \"solmate/utils/FixedPointMathLib.sol\";\nimport {ERC1155, ERC1155TokenReceiver} from \"solmate/tokens/ERC1155.sol\";\nimport {toWadUnsafe, toDaysWadUnsafe} from \"solmate/utils/SignedWadMath.sol\";\n```\n\n## [N-06] _Lock pragmas_ to specific compiler version\n\n**Description:**<br>\nPragma statements can be allowed to float when a contract is intended for consumption by other developers, as in the case with contracts in a library or EthPM package. Otherwise, the developer would need to manually update the pragma in order to compile locally.<br>\nhttps://swcregistry.io/docs/SWC-103\n\n**Recommendation:**<br>\nEthereum Smart Contract Best Practices - Lock pragmas to specific compiler version.<br>\n[solidity-specific/locking-pragmas](https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/locking-pragmas/)\n\n```solidity\n5 results - 4 files\n\nsrc/Caviar.sol:\n  1  // SPDX-License-Identifier: MIT\n  2: pragma solidity ^0.8.17;\n  3  \n\nsrc/LpToken.sol:\n  1  // SPDX-License-Identifier: MIT\n  2: pragma solidity ^0.8.17;\n  3  \n\nsrc/Pair.sol:\n  1  // SPDX-License-Identifier: MIT\n  2: pragma solidity ^0.8.17;\n  3  \n\nsrc/lib/SafeERC20Namer.sol:\n  1  // SPDX-License-Identifier: MIT\n  2: pragma solidity ^0.8.17;\n\n```\n\n## [N-07] Use underscores for number literals\n\n```solidity\n2 results - 1 file\n\nsrc/Pair.sol:\n  399:         return (outputAmount * 1000 * baseTokenReserves()) / ((fractionalTokenReserves() - outputAmount) * 997);\n\n  413:         return (inputAmountWithFee * baseTokenReserves()) / ((fractionalTokenReserves() * 1000) + inputAmountWithFee);\n\n```\n**Description:**<br>\nThere are occasions where certain numbers have been hardcoded, either in variable or in the code itself. Large numbers can become hard to read.\n\n**Recommendation:**<br>\nConsider using underscores for number literals to improve its readability.\n\n## [N-08] Use of `bytes.concat()` instead of `abi.encodePacked()`\n\n```solidity\n\n1 result - 1 file\n\nsrc/Pair.sol:\n  473          for (uint256 i = 0; i < tokenIds.length; i++) {\n  474:             bool isValid = MerkleProofLib.verify(proofs[i], merkleRoot, keccak256(abi.encodePacked(tokenIds[i])));\n\n```\nRather than using `abi.encodePacked` for appending bytes, since version 0.8.4, `bytes.concat()` is enabled.\n\nSince version 0.8.4 for appending bytes, `bytes.concat()` can be used instead of `abi.encodePacked(,)`\n\n## [N-09] Pragma version^0.8.17  version too recent to be trusted.\n\nhttps://github.com/ethereum/solidity/blob/develop/Changelog.md<br>\n0.8.17 (2022-09-08)<br>\n0.8.16 (2022-08-08)<br>\n0.8.15 (2022-06-15)<br>\n0.8.10 (2021-11-09)\n\nUnexpected bugs can be reported in recent versions;<br>\nRisks related to recent releases<br>\nRisks of complex code generation changes<br>\nRisks of new language features<br>\nRisks of known bugs\n\nUse a non-legacy and more battle-tested version<br>\nUse 0.8.10\n\n## [N-10] Add EIP-2981 NFT Royalty Standart Support\n\nConsider adding EIP-2981 NFT Royalty Standard to the project\n\nhttps://eips.ethereum.org/EIPS/eip-2981\n\nRoyalty (Copyright – EIP 2981):\n\n* Fixed % royalties: For example, 6% of all sales go back to artists\n* Declining royalties: There may be a continuous decline in sales based on time or any other variable.\n* Dynamic royalties: Varies over time or sales amount\n* Upgradeable royalties: Allows a legal entity or NFT owner to change any copyright\n* Incremental royalties: No royalties, for example when sold for less than `$100`\n* Managed royalties: Funds are owned by a DAO, imagine the recipient is a DAO treasury\n* Royalties to different people: Collectors and artists can even use royalties, not specific to a particular personality\n\n## [N-11] Showing the actual values of numbers in NatSpec comments makes checking and reading code easier\n\n```diff\nsrc/Pair.sol:\n  19  \n-  20:     uint256 public constant ONE = 1e18\n+  20:     uint256 public constant ONE = 1e18;  // 1_000_000_000_000_000_000\n-  21:     uint256 public constant CLOSE_GRACE_PERIOD = 7 days; \n+  21:     uint256 public constant CLOSE_GRACE_PERIOD = 7 days; // 604_800 ( 7 * 24 * 60 * 60)\n```\n\n## [N-12] Missing Event for critical parameters init and change\n\n**Context:**\n```js\nsrc/Pair.sol:\n  38  \n  39:     constructor(\n  40:         address _nft,\n  41:         address _baseToken,\n  42:         bytes32 _merkleRoot,\n  43:         string memory pairSymbol,\n  44:         string memory nftName,\n  45:         string memory nftSymbol\n  46:     ) ERC20(string.concat(nftName, \" fractional token\"), string.concat(\"f\", nftSymbol), 18) {\n  47:         nft = _nft;\n  48:         baseToken = _baseToken; // use address(0) for native ETH\n  49:         merkleRoot = _merkleRoot;\n  50:         lpToken = new LpToken(pairSymbol);\n  51:         caviar = Caviar(msg.sender);\n  52:     }\n\nsrc/LpToken.sol:\n  11  contract LpToken is Owned, ERC20 {\n  12:     constructor(string memory pairSymbol)\n  13:         Owned(msg.sender)\n  14:         ERC20(string.concat(pairSymbol, \" LP token\"), string.concat(\"LP-\", pairSymbol), 18)\n  15:     {}\n\n\nsrc/Pair.sol:\n  38  \n  39:     constructor(\n  40:         address _nft,\n  41:         address _baseToken,\n  42:         bytes32 _merkleRoot,\n  43:         string memory pairSymbol,\n  44:         string memory nftName,\n  45:         string memory nftSymbol\n  46:     ) ERC20(string.concat(nftName, \" fractional token\"), string.concat(\"f\", nftSymbol), 18) {\n  47:         nft = _nft;\n  48:         baseToken = _baseToken; // use address(0) for native ETH\n  49:         merkleRoot = _merkleRoot;\n  50:         lpToken = new LpToken(pairSymbol);\n  51:         caviar = Caviar(msg.sender);\n  52:     }\n\n```\n\n**Description:**<br>\nEvents help non-contract tools to track changes, and events prevent users from being surprised by changes\n\n**Recommendation:**<br>\nAdd Event-Emit\n\n## [N-13] Add to *blacklist function*\n\nNFT thefts have increased recently, so with the addition of hacked NFTs to the platform, NFTs can be converted into liquidity.\nTo prevent this, I recommend adding the blacklist function.\n\nMarketplaces such as Opensea have a blacklist feature that will not list NFTs that have been reported theft, NFT projects such as Manifold have blacklist functions in their smart contracts.\n\nHere is the project example; Manifold\n\nManifold Contract<br>\nhttps://etherscan.io/address/0xe4e4003afe3765aca8149a82fc064c0b125b9e5a#code\n\n```js\n     modifier nonBlacklistRequired(address extension) {\n         require(!_blacklistedExtensions.contains(extension), \"Extension blacklisted\");\n         _;\n     }\n```\n\n**Recommended Mitigation Steps:**<br>\nAdd to Blacklist function and modifier.\n\n## [S-01] Project Upgrade and Stop Scenario should be\n\nAt the start of the project, the system may need to be stopped or upgraded, I suggest you have a script beforehand and add it to the documentation.<br>\nThis can also be called an \" EMERGENCY STOP (CIRCUIT BREAKER) PATTERN \".\n\nhttps://github.com/maxwoe/solidity_patterns/blob/master/security/EmergencyStop.sol\n\n## [S-02] Generate perfect code headers every time\n\n**Description:**<br>\nI recommend using header for Solidity code layout and readability\n\nhttps://github.com/transmissions11/headers\n\n```js\n/*//////////////////////////////////////////////////////////////\n                           TESTING 123\n//////////////////////////////////////////////////////////////*/\n```\n\n**[outdoteth (Caviar) commented](https://github.com/code-423n4/2022-12-caviar-findings/issues/203#issuecomment-1373927645):**\n > Great report\n\n**[berndartmueller commented](https://github.com/code-423n4/2022-12-caviar-findings/issues/203#issuecomment-1383991559):**\n > Great report by the warden!\n\n\n\n***\n\n# Gas Optimizations\n\nFor this contest, 31 reports were submitted by wardens detailing gas optimizations. The [report highlighted below](https://github.com/code-423n4/2022-12-caviar-findings/issues/62) by **Rolezn** received the top score from the judge.\n\n*The following wardens also submitted reports: [SleepingBugs](https://github.com/code-423n4/2022-12-caviar-findings/issues/496), [JC](https://github.com/code-423n4/2022-12-caviar-findings/issues/491), [Breeje](https://github.com/code-423n4/2022-12-caviar-findings/issues/464), [Aymen0909](https://github.com/code-423n4/2022-12-caviar-findings/issues/457), [c3phas](https://github.com/code-423n4/2022-12-caviar-findings/issues/452), [IllIllI](https://github.com/code-423n4/2022-12-caviar-findings/issues/440), [lukris02](https://github.com/code-423n4/2022-12-caviar-findings/issues/426), [cryptonue](https://github.com/code-423n4/2022-12-caviar-findings/issues/418), [Madalad](https://github.com/code-423n4/2022-12-caviar-findings/issues/410), [Diana](https://github.com/code-423n4/2022-12-caviar-findings/issues/399), [ret2basic](https://github.com/code-423n4/2022-12-caviar-findings/issues/373), [tnevler](https://github.com/code-423n4/2022-12-caviar-findings/issues/372), [0xAgro](https://github.com/code-423n4/2022-12-caviar-findings/issues/360), [carlitox477](https://github.com/code-423n4/2022-12-caviar-findings/issues/347), [gz627](https://github.com/code-423n4/2022-12-caviar-findings/issues/345), [RaymondFam](https://github.com/code-423n4/2022-12-caviar-findings/issues/282), [0xSmartContract](https://github.com/code-423n4/2022-12-caviar-findings/issues/226), [NoamYakov](https://github.com/code-423n4/2022-12-caviar-findings/issues/204), [0xab00](https://github.com/code-423n4/2022-12-caviar-findings/issues/201), [JrNet](https://github.com/code-423n4/2022-12-caviar-findings/issues/194), [HardlyCodeMan](https://github.com/code-423n4/2022-12-caviar-findings/issues/148), [pavankv](https://github.com/code-423n4/2022-12-caviar-findings/issues/120), [Bnke0x0](https://github.com/code-423n4/2022-12-caviar-findings/issues/96), [ReyAdmirado](https://github.com/code-423n4/2022-12-caviar-findings/issues/81), [oyc\\_109](https://github.com/code-423n4/2022-12-caviar-findings/issues/70), [millersplanet](https://github.com/code-423n4/2022-12-caviar-findings/issues/69), [saneryee](https://github.com/code-423n4/2022-12-caviar-findings/issues/67), [0x1f8b](https://github.com/code-423n4/2022-12-caviar-findings/issues/26), [UdarTeam](https://github.com/code-423n4/2022-12-caviar-findings/issues/8), and [0xhacksmithh](https://github.com/code-423n4/2022-12-caviar-findings/issues/2).*\n\n## Summary\n\n| |Issue|Contexts|Estimated Gas Saved|\n|-|:-|:-|:-:|\n| G&#x2011;01 | `<x> += <y>` Costs More Gas Than `<x> = <x> + <y>` For State Variables | 3 | - |\n| G&#x2011;02 | `++i`/`i++` Should Be `unchecked{++i}`/`unchecked{i++}` When It Is Not Possible For Them To Overflow, As Is The Case When Used In For- And While-loops | 7 | 245 |\n| G&#x2011;03 | `require()`/`revert()` Strings Longer Than 32 Bytes Cost Extra Gas | 4 | - |\n| G&#x2011;04 | Splitting `require()` Statements That Use `&&` Saves Gas | 1 | 9 |\n| G&#x2011;05 | Public Functions To External | 18 | - |\n| G&#x2011;06 | Optimize names to save gas | 3 | 66 |\n| G&#x2011;07 | Using fixed bytes is cheaper than using `string` | 2 | - |\n| G&#x2011;08 | Superfluous event fields | 1 | - |\n| G&#x2011;09 | `internal` functions only called once can be inlined to save gas | 3 | - |\n| G&#x2011;10 | Setting the `constructor` to `payable` | 3 | 39 |\n| G&#x2011;11 | Functions guaranteed to revert when called by normal users can be marked `payable` | 2 | 42 |\n| G&#x2011;12 | Using `unchecked` blocks to save gas | 1 | 136 |\n\nTotal: 48 contexts over 12 issues\n\n## [G-01] `<x> += <y>` Costs More Gas Than `<x> = <x> + <y>` For State Variables\n\n### Proof Of Concept\n\n```solidity\n448: balanceOf[from] -= amount;\n453: balanceOf[to] += amount;\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L448\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L453\n\n```solidity\n35: charCount += uint8(b[i]);\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L35\n\n## [G-02] `++i`/`i++` Should Be `unchecked{++i}`/`unchecked{i++}` When It Is Not Possible For Them To Overflow, As Is The Case When Used In For- And While-loops\n\nThe unchecked keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves 30-40 gas PER LOOP\n\n### Proof Of Concept\n\n```solidity\n238: for (uint256 i = 0; i < tokenIds.length; i++) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L238\n\n```solidity\n258: for (uint256 i = 0; i < tokenIds.length; i++) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L258\n\n```solidity\n468: for (uint256 i = 0; i < tokenIds.length; i++) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L468\n\n```solidity\n13: for (uint256 j = 0; j < 32; j++) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L13\n\n```solidity\n22: for (uint256 j = 0; j < charCount; j++) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L22\n\n```solidity\n33: for (uint256 i = 32; i < 64; i++) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L33\n\n```solidity\n39: for (uint256 i = 0; i < charCount; i++) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L39\n\n## [G-03] `require()`/`revert()` Strings Longer Than 32 Bytes Cost Extra Gas\n\n### Proof Of Concept\n\n```solidity\n51: require(msg.sender == pairs[nft][baseToken][merkleRoot], \"Only pair can destroy itself\");\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L51\n\n```solidity\n80: require(lpTokenAmount >= minLpTokenAmount, \"Slippage: lp token amount out\");\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L80\n\n```solidity\n117: require(baseTokenOutputAmount >= minBaseTokenOutputAmount, \"Slippage: base token amount out\");\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L117\n\n```solidity\n120: require(fractionalTokenOutputAmount >= minFractionalTokenOutputAmount, \"Slippage: fractional token out\");\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L120\n\n## [G-04] Splitting `require()` statements that use `&&` saves gas\n\nInstead of using operator `&&` on a single `require`. Using a two `require` can save more gas.\n\ni.e.\nfor `require(version == 1 && _bytecodeHash[1] == bytes1(0), \"zf\");` use:\n\n```\n\trequire(version == 1);\n\trequire(_bytecodeHash[1] == bytes1(0));\n```\n\n### Proof Of Concept\n\n```solidity\n71: require(baseTokenAmount > 0 && fractionalTokenAmount > 0, \"Input token amount is zero\");\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L71\n\n## [G-05] Public Functions To External\n\nThe following functions could be set external to save gas and improve code quality.<br>\nExternal call cost is less expensive than of public functions.\n\n### Proof Of Concept\n\n```solidity\nfunction create(address nft, address baseToken, bytes32 merkleRoot) public returns (Pair pair) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L28\n\n```solidity\nfunction destroy(address nft, address baseToken, bytes32 merkleRoot) public {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L49\n\n```solidity\nfunction mint(address to, uint256 amount) public onlyOwner {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L19\n\n```solidity\nfunction burn(address from, uint256 amount) public onlyOwner {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L26\n\n```solidity\nfunction buy(uint256 outputAmount, uint256 maxInputAmount) public payable returns (uint256 inputAmount) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L147\n\n```solidity\nfunction sell(uint256 inputAmount, uint256 minOutputAmount) public returns (uint256 outputAmount) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L182\n\n```solidity\nfunction unwrap(uint256[] calldata tokenIds) public returns (uint256 fractionalTokenAmount) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L248\n\n```solidity\nfunction nftAdd(\n        uint256 baseTokenAmount,\n        uint256[] calldata tokenIds,\n        uint256 minLpTokenAmount,\n        bytes32[][] calldata proofs\n    ) public payable returns (uint256 lpTokenAmount) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L275\n\n```solidity\nfunction nftBuy(uint256[] calldata tokenIds, uint256 maxInputAmount) public payable returns (uint256 inputAmount) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L310\n\n```solidity\nfunction close() public {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L341\n\n```solidity\nfunction withdraw(uint256 tokenId) public {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L359\n\n```solidity\nfunction baseTokenReserves() public view returns (uint256) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L379\n\n```solidity\nfunction fractionalTokenReserves() public view returns (uint256) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L383\n\n```solidity\nfunction price() public view returns (uint256) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L390\n\n```solidity\nfunction buyQuote(uint256 outputAmount) public view returns (uint256) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L398\n\n```solidity\nfunction sellQuote(uint256 inputAmount) public view returns (uint256) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L406\n\n```solidity\nfunction addQuote(uint256 baseTokenAmount, uint256 fractionalTokenAmount) public view returns (uint256) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L417\n\n```solidity\nfunction removeQuote(uint256 lpTokenAmount) public view returns (uint256, uint256) {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L435\n\n## [G-06] Optimize names to save gas\n\nContracts most called functions could simply save gas by function ordering via Method ID. Calling a function at runtime will be cheaper if the function is positioned earlier in the order (has a relatively lower Method ID) because 22 gas are added to the cost of a function for every position that came before it. The caller can save on gas if you prioritize most called functions. \n\nSee more [here](https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92).\n\n### Proof Of Concept\n\n```solidity\nFile: .\\Projects\\caviar202212\\2022-12-caviar\\src\\Caviar.sol\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol\n\n```solidity\nFile: .\\Projects\\caviar202212\\2022-12-caviar\\src\\LpToken.sol\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol\n\n```solidity\nFile: .\\Projects\\caviar202212\\2022-12-caviar\\src\\Pair.sol\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol\n\n### Recommended Mitigation Steps\nFind a lower method ID name for the most called functions for example `Call()` vs. `Call1()` is cheaper by 22 gas.<br>\nFor example, the function IDs in the Gauge.sol contract will be the most used; A lower method ID may be given.\n\n## [G-07] Using fixed bytes is cheaper than using `string`\n\nAs a rule of thumb, use `bytes` for arbitrary-length raw byte data and string for arbitrary-length `string` (UTF-8) data. If you can limit the length to a certain number of bytes, always use one of `bytes1` to `bytes32` because they are much cheaper.\n\n### Proof Of Concept\n\n```solidity\n33: string memory baseTokenSymbol = baseToken == address(0) ? \"ETH\" : baseToken.tokenSymbol();\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L33\n\n```solidity\n36: string memory pairSymbol = string.concat(nftSymbol, \":\", baseTokenSymbol);\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L36\n\n## [G-08] Superfluous event fields\n\n`block.number` and `block.timestamp` are added to the event information by default, so adding them manually will waste additional gas.\n\n### Proof Of Concept\n\n```solidity\n36: event Close(uint256 closeTimestamp);\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L36\n\n## [G-09] `internal` functions only called once can be inlined to save gas\n\n### Proof Of Concept\n\n```solidity\n463: function _validateTokenIds\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L463\n\n```solidity\n76: function tokenSymbol\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L76\n\n```solidity\n87: function tokenName\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/lib\\SafeERC20Namer.sol#L87\n\n## [G-10] Setting the `constructor` to `payable`\n\nSaves ~13 gas per instance\n\n### Proof Of Concept\n\n```solidity\n21: constructor() Owned(msg.sender)\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Caviar.sol#L21\n\n```solidity\n11: constructor(string memory pairSymbol)\n        Owned(msg.sender)\n        ERC20(string.concat(pairSymbol, \" LP token\"), string.concat(\"LP-\", pairSymbol), 18)\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L11\n\n```solidity\n39: constructor(\n        address _nft,\n        address _baseToken,\n        bytes32 _merkleRoot,\n        string memory pairSymbol,\n        string memory nftName,\n        string memory nftSymbol\n    ) ERC20(string.concat(nftName, \" fractional token\"), string.concat(\"f\", nftSymbol), 18)\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L39\n\n## [G-11] Functions guaranteed to revert when called by normal users can be marked `payable`\n\nIf a function modifier or require such as onlyOwner/onlyX is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are CALLVALUE(2), DUP1(3), ISZERO(3), PUSH2(3), JUMPI(10), PUSH1(3), DUP1(3), REVERT(0), JUMPDEST(1), POP(2) which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost.\n\n### Proof Of Concept\n\n```solidity\n19: function mint(address to, uint256 amount) public onlyOwner {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L19\n\n```solidity\n26: function burn(address from, uint256 amount) public onlyOwner {\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/LpToken.sol#L26\n\n### Recommended Mitigation Steps\nFunctions guaranteed to revert when called by normal users can be marked payable.\n\n## [G-12] Using `unchecked` blocks to save gas\n\nSolidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn’t possible (as an example, when a comparison is made before the arithmetic operation), some gas can be saved by using an `unchecked` block.\n\n### Proof Of Concept\n\n```solidity\n168: uint256 refundAmount = maxInputAmount - inputAmount;\n```\n\nhttps://github.com/code-423n4/2022-12-caviar/tree/main/src/Pair.sol#L168\n\n\n\n***\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}