{
  "circa": {
    "title": "Behodler contest",
    "sponsor": "Behodler",
    "slug": "2022-01-behodler",
    "date": "2022-03-24",
    "findings": "https://github.com/code-423n4/2022-01-behodler-findings/issues",
    "contest": 78
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of a critical component of the Behodler Ecosystem. The code contest took place between January 27—February 2, 2022 with a specific focus on the Limbo smart contract system.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>39 Wardens contributed reports to the Behodler contest:</p>\n<ol>\n<li><a href=\"https://github.com/x9453\">shw</a></li>\n<li><a href=\"https://twitter.com/kirkthebaird\">kirk-baird</a></li>\n<li><a href=\"https://twitter.com/danbinnun\">danb</a></li>\n<li><a href=\"https://twitter.com/SirH4shalot\">sirhashalot</a></li>\n<li>CertoraInc (<a href=\"https://twitter.com/danbinnun\">danb</a>, egjlmn1, <a href=\"https://twitter.com/ori_dabush\">OriDabush</a>, ItayG, and shakedwinder)</li>\n<li><a href=\"https://twitter.com/JustDravee\">Dravee</a></li>\n<li>hyh</li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li><a href=\"https://camden.codes\">camden</a></li>\n<li>robee</li>\n<li>Hawkeye (0xwags and 0xmint)</li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li>cccz</li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li><a href=\"https://twitter.com/wuwe19\">wuwe1</a></li>\n<li><a href=\"https://twitter.com/randyyramadhan\">Randyyy</a></li>\n<li>jayjonah8</li>\n<li>0x1f8b</li>\n<li>GeekyLumberjack</li>\n<li><a href=\"https://www.instagram.com/riyan_rfa/\">rfa</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/fitraldys\">Fitraldys</a></li>\n<li><a href=\"https://twitter.com/BouSalman\">BouSalman</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/meidhiwirara\">Tomio</a></li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/_no_handlebars\">throttle</a></li>\n<li><a href=\"https://twitter.com/_0v3rf10w\">0v3rf10w</a></li>\n<li>p4st13r4 (<a href=\"https://github.com/0x69e8\">0x69e8</a> and 0xb4bb4)</li>\n<li><a href=\"https://twitter.com/VladToie/\">bobi</a></li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li>Jujic</li>\n<li>IllIllI</li>\n</ol>\n<p>This contest was judged by <a href=\"https://github.com/jack-the-pug\">Jack the Pug</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a>, <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a>, and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 33 unique vulnerabilities and 74 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 7 received a risk rating in the category of HIGH severity, 14 received a risk rating in the category of MEDIUM severity, and 12 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 10 non-critical recommendations and 31 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-01-behodler\">C4 Behodler contest repository</a>, and is composed of 14 smart contracts written in the Solidity programming language and includes 1629 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-7\" style=\"position:relative;\"><a href=\"#high-risk-findings-7\" aria-label=\"high risk findings 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (7)</h1>\n<h2 id=\"h-01-lack-of-access-control-on-assertgovernanceapproved-can-cause-funds-to-be-locked\" style=\"position:relative;\"><a href=\"#h-01-lack-of-access-control-on-assertgovernanceapproved-can-cause-funds-to-be-locked\" aria-label=\"h 01 lack of access control on assertgovernanceapproved can cause funds to be locked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/300\">[H-01] Lack of access control on <code>assertGovernanceApproved</code> can cause funds to be locked</a></h2>\n<p><em>Submitted by shw, also found by kirk-baird and pauliax</em></p>\n<p>Lack of access control on the <code>assertGovernanceApproved</code> function of <code>FlashGovernanceArbiter</code> allows anyone to lock other users’ funds in the contract as long as the users have approved the contract to transfer <code>flashGovernanceConfig.amount</code> of <code>flashGovernanceConfig.asset</code> from them.</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Alice wants to execute a flash governance decision (e.g., disable to the protocol), so she first calls <code>approve</code> on the <code>flashGovernanceConfig.asset</code> to allow <code>FlashGovernanceArbiter</code> to transfer <code>flashGovernanceConfig.amount</code> of assets from her.</li>\n<li>An attacker Bob, who listens to the mempool, notices Alice’s <code>approve</code> transaction and decides to front-run it. He calls <code>assertGovernanceApproved</code> with <code>sender</code> being Alice, <code>target</code> being any address, and <code>emergency</code> being <code>true</code>.</li>\n<li>As a result, Alice cannot execute her flash governance decision, and her funds are locked in the contract for the <code>flashGovernanceConfig.unlockTime</code> period.</li>\n</ol>\n<p>Referenced code:\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L60-L81\">DAO/FlashGovernanceArbiter.sol#L60-L81</a></p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Only allow certain addresses to call the <code>assertGovernanceApproved</code> function on <code>FlashGovernanceArbiter</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/300#issuecomment-1056104445\">gititGoro (Behodler) confirmed, but disagreed with High severity and commented</a>:</strong></p>\n<blockquote>\n<p>The reason I stuck with medium risk is because the user’s funds can’t be lost in this scenario. Only temporarily locked. If the user unapproves FlashGovernanceArbiter on EYE then they simply have to wait until the unlock period has passed and can withdraw again.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/300#issuecomment-1056190654\">Jack the Pug (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agreed. This should be somewhere in between Med and High. If it’s just the users’ deposits being temporarily locked, then it’s definitely a Med. But this one is taking probably all the funds from users’ wallets and locking them against their will, easy to pull off by anyone, all at once for all potential victims.</p>\n<p>I tend to make it a High so that the future wardens and probably by extent the devs can be more careful with allowances. We have seen so many incidents caused by improper handling of users’ allowances.</p>\n<p>A <code>transferFrom()</code> with from not being hard-coded as <code>msg.sender</code> is evil.</p>\n<p>My fellow wardens, if you are reading this, do not go easy on a <code>transferFrom()</code> that takes an argument as <code>from</code>.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-02-wrong-minting-amount\" style=\"position:relative;\"><a href=\"#h-02-wrong-minting-amount\" aria-label=\"h 02 wrong minting amount permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/297\">[H-02] wrong minting amount</a></h2>\n<p><em>Submitted by danb</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/TokenProxies/RebaseProxy.sol#L36\">https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/TokenProxies/RebaseProxy.sol#L36</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proxy</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">baseBalance</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">ONE</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">_redeemRate</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>should be:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proxy</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">ONE</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">_redeemRate</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/297#issuecomment-1030508474\">gititGoro (Behodler) confirmed, but disagreed with High severity and commented</a>:</strong></p>\n<blockquote>\n<p>Should be a balanceBefore and balanceAfter calculation with the diff being wrapped.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/297#issuecomment-1041248898\">Jack the Pug (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Valid <code>high</code>. The issue description can be more comprehensive though.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-03-double-transfer-in-the-transferandcall-function-of-erc677\" style=\"position:relative;\"><a href=\"#h-03-double-transfer-in-the-transferandcall-function-of-erc677\" aria-label=\"h 03 double transfer in the transferandcall function of erc677 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/302\">[H-03] Double transfer in the <code>transferAndCall</code> function of <code>ERC677</code></a></h2>\n<p><em>Submitted by shw, also found by cccz, danb, and wuwe1</em></p>\n<p>The implementation of the <code>transferAndCall</code> function in <code>ERC677</code> is incorrect. It transfers the <code>_value</code> amount of tokens twice instead of once. Since the <code>Flan</code> contract inherits <code>ERC667</code>, anyone calling the <code>transferAndCall</code> function on <code>Flan</code> is affected by this double-transfer bug.</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Below is the implementation of <code>transferAndCall</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transferAndCall</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_value</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">super</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_value</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_value</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">isContract</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">contractFallback</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_value</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>We can see that <code>super.transfer(_to, _value);</code> and <code>_transfer(msg.sender, _to, _value);</code> are doing the same thing - transfering <code>_value</code> of tokens from <code>msg.sender</code> to <code>_to</code>.</p>\n<p>Referenced code:\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/ERC677/ERC677.sol#L28-L29\">ERC677/ERC677.sol#L28-L29</a></p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Remove <code>_transfer(msg.sender, _to, _value);</code> in the <code>transferAndCall</code> function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/302\">gititGoro (Behodler) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fix\n<a href=\"https://github.com/Behodler/limbo/pull/3\">Behodler/limbo#3</a></p>\n</blockquote>\n<hr>\n<h2 id=\"h-04-logic-error-in-burnflashgovernanceasset-can-cause-locked-assets-to-be-stolen\" style=\"position:relative;\"><a href=\"#h-04-logic-error-in-burnflashgovernanceasset-can-cause-locked-assets-to-be-stolen\" aria-label=\"h 04 logic error in burnflashgovernanceasset can cause locked assets to be stolen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/305\">[H-04] Logic error in <code>burnFlashGovernanceAsset</code> can cause locked assets to be stolen</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>A logic error in the <code>burnFlashGovernanceAsset</code> function that resets a user’s <code>pendingFlashDecision</code> allows that user to steal other user’s assets locked in future flash governance decisions. As a result, attackers can get their funds back even if they execute a malicious flash decision and the community burns their assets.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>An attacker Alice executes a malicious flash governance decision, and her assets are locked in the <code>FlashGovernanceArbiter</code> contract.</li>\n<li>The community disagrees with Alice’s flash governance decision and calls <code>burnFlashGovernanceAsset</code> to burn her locked assets. However, the <code>burnFlashGovernanceAsset</code> function resets Alice’s <code>pendingFlashDecision</code> to the default config (see line 134).</li>\n<li>A benign user, Bob executes another flash governance decision, and his assets are locked in the contract.</li>\n<li>Now, Alice calls <code>withdrawGovernanceAsset</code> to withdraw Bob’s locked asset, effectively the same as stealing Bob’s assets. Since Alice’s <code>pendingFlashDecision</code> is reset to the default, the <code>unlockTime &#x3C; block.timestamp</code> condition is fulfilled, and the withdrawal succeeds.</li>\n</ol>\n<p>Referenced code:\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L134\">DAO/FlashGovernanceArbiter.sol#L134</a>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L146\">DAO/FlashGovernanceArbiter.sol#L146</a></p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Change line 134 to <code>delete pendingFlashDecision[targetContract][user]</code> instead of setting the <code>pendingFlashDecision</code> to the default.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/305\">gititGoro (Behodler) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-05-flash-loan-price-manipulation-in-purchasepyroflan\" style=\"position:relative;\"><a href=\"#h-05-flash-loan-price-manipulation-in-purchasepyroflan\" aria-label=\"h 05 flash loan price manipulation in purchasepyroflan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/231\">[H-05] Flash loan price manipulation in <code>purchasePyroFlan()</code></a></h2>\n<p><em>Submitted by sirhashalot</em></p>\n<p>The comment on <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/FlanBackstop.sol#L54\">line 54</a> of FlanBackstop.sol states “the opportunity for price manipulation through flash loans exists”, and I agree that this is a serious risk. While the acceptableHighestPrice variable attempts to limit the maximum price change of the flan-stablecoin LP, a flashloan sandwich attack can still occur within this limit and make up for the limitation with larger volumes or multiple flashloan attacks. Flashloan price manipulation is the cause for many major hacks, including <a href=\"https://bzx.network/blog/postmortem-ethdenver\">bZx</a>, <a href=\"https://rekt.news/harvest-finance-rekt/\">Harvest</a>, and others.</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/FlanBackstop.sol#L83\">Line 83</a> of FlanBackstop.sol calculates the price of flan to stablecoin in the Uniswap pool based on the balances at a single point in time. Pool balances at a single point in time can be manipulated with flash loans, which can skew the numbers to the extreme. The single data point of LP balances is used to calculate <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/FlanBackstop.sol#L103\">the growth variable in line 103</a>, and the growth variable influences the quantity of pyroflan a user receives in <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/FlanBackstop.sol#L108\">the premium calculation on line 108</a>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">priceBefore</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">balanceOfFlanBefore</span><span class=\"mtk1\"> * </span><span class=\"mtk11\">getMagnitude</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stablecoin</span><span class=\"mtk1\">)) / </span><span class=\"mtk12\">balanceOfStableBefore</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">growth</span><span class=\"mtk1\"> = ((</span><span class=\"mtk12\">priceBefore</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">tiltedPrice</span><span class=\"mtk1\">) * </span><span class=\"mtk7\">100</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">priceBefore</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">premium</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">flanToMint</span><span class=\"mtk1\"> * (</span><span class=\"mtk12\">growth</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">)) / </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>Problems can occur when the volumes that the <code>purchasePyroFlan()</code> function sends to the Uniswap pool are large compared to the pool’s liquidity volume, or if the Uniswap pool price is temporarily tilted with a flashloan (or a whale). Because this function purposefully changes the exchange rate of the LP, by transferring tokens to the LP in a 2-to-1 ratio, a large volume could caught a large price impact in the LP. The code attempts to protect against this manipulation in <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/FlanBackstop.sol#L102\">line 102</a> with a require statement, but this can be worked around by reducing the volume per flashloan and repeating the attack multiple times. A user can manipulate the LP, especially when the LP is new with low liquidity, in order to achieve large amounts of flan and pyroflan.</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use a TWAP instead of the pool price at a single point in time to increase the cost of performing a flashloan sandwich attack. See <a href=\"https://docs.uniswap.org/protocol/V2/concepts/core-concepts/oracles\">the Uniswap v2 price oracle solution </a>documentation for more explanations on how Uniswap designed an approach to providing asset prices while reducing the change of manipulation.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/231#issuecomment-1030498476\">gititGoro (Behodler) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>This is a very well constructed report and if Flan was not intended to target a 1:1 with stablecoins, I’d accept it but since we know Flan shouldn’t diverge far from 1:1, we don’t run very large risks. Essentially, if the flan price crashes dramatically, backstop no longer works so the purpose of this contract is to just boost liquidity for Flan when Flan is operating under normal ish conditions. It’s not intended to be black swan proof.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-06-loss-of-flash-governance-tokens-if-they-are-not-withdrawn-before-the-next-request\" style=\"position:relative;\"><a href=\"#h-06-loss-of-flash-governance-tokens-if-they-are-not-withdrawn-before-the-next-request\" aria-label=\"h 06 loss of flash governance tokens if they are not withdrawn before the next request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/156\">[H-06] Loss Of Flash Governance Tokens If They Are Not Withdrawn Before The Next Request</a></h2>\n<p><em>Submitted by kirk-baird</em></p>\n<p>Users who have not called <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L142\">withdrawGovernanceAsset()</a>  after  they have locked their tokens from a previous proposal (i.e. <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L60\">assertGovernanceApproved</a>), will lose their tokens if <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L60\">assertGovernanceApproved()</a> is called again with the same <code>target</code> and <code>sender</code>.</p>\n<p>The <code>sender</code> will lose <code>pendingFlashDecision[target][sender].amount</code> tokens and the tokens will become unaccounted for and locked in the contract. Since the new amount is not added to the previous amount, instead the previous amount is overwritten with the new amount.</p>\n<p>The impact of this is worsened by another vulnerability, that is <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L60\">assertGovernanceApproved()</a> is a <code>public</code> function and may be called by any arbitrary user so long as the <code>sender</code> field has called <code>approve()</code> for <code>FlashGovernanceArbiter</code> on the ERC20 token. This would allow an attacker to make these tokens inaccessible for any arbitrary <code>sender</code>.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>In <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L60\">assertGovernanceApproved()</a> as seen below, the line<code>pendingFlashDecision[target][sender] = flashGovernanceConfig</code> will overwrite the previous contents. Thereby, making any previous rewards unaccounted for and inaccessible to anyone.</p>\n<p>Note that we must wait <code>pendingFlashDecision[target][sender].unlockTime</code> between calls.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">assertGovernanceApproved</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">target</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">emergency</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">flashGovernanceConfig</span><span class=\"mtk1\">.</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">flashGovernanceConfig</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) &amp;&amp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">target</span><span class=\"mtk1\">][</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">unlockTime</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">emergency</span><span class=\"mtk1\"> || (</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">security</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lastFlashGovernanceAct</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">security</span><span class=\"mtk1\">.</span><span class=\"mtk12\">epochSize</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk8\">&quot;Limbo: flash governance disabled for rest of epoch&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">target</span><span class=\"mtk1\">][</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">flashGovernanceConfig</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">target</span><span class=\"mtk1\">][</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">unlockTime</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">security</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lastFlashGovernanceAct</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">flashDecision</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">flashGovernanceConfig</span><span class=\"mtk1\">.</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">flashGovernanceConfig</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">target</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">revert</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;LIMBO: governance decision rejected.&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider updating the initial if statement to ensure the <code>pendingFlashDecision</code> for that <code>target</code> and <code>sender</code> is empty, that is:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">assertGovernanceApproved</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">target</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">emergency</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">flashGovernanceConfig</span><span class=\"mtk1\">.</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">flashGovernanceConfig</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) &amp;&amp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">target</span><span class=\"mtk1\">][</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">unlockTime</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span></code></pre>\n<p>Note we cannot simply add the new <code>amount</code> to the previous <code>amount</code> incase the underlying <code>asset</code> has been changed.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/156#issuecomment-1029451025\">gititGoro (Behodler) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Excellent find! Thank you.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-07-lp-pricing-formula-is-vulnerable-to-flashloan-manipulation\" style=\"position:relative;\"><a href=\"#h-07-lp-pricing-formula-is-vulnerable-to-flashloan-manipulation\" aria-label=\"h 07 lp pricing formula is vulnerable to flashloan manipulation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/304\">[H-07] LP pricing formula is vulnerable to flashloan manipulation</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The LP pricing formula used in the <code>burnAsset</code> function of <code>LimboDAO</code> is vulnerable to flashloan manipulation. By swapping a large number of EYE into the underlying pool, an attacker can intentionally inflate the value of the LP tokens to get more <code>fate</code> than he is supposed to with a relatively low cost.</p>\n<p>With the large portion of <code>fate</code> he gets, he has more voting power to influence the system’s decisions, or even he can convert his <code>fate</code> to Flan tokens for a direct profit.</p>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Below is an example of how the attack works:</p>\n<ol>\n<li>Suppose that there are 1000 EYE and 1000 LINK tokens in the UniswapV2 LINK-EYE pool. The pool’s total supply is 1000, and the attacker has 100 LP tokens.</li>\n<li>If the attacker burns his LP tokens, he earns <code>1000 * 100/1000 * 20 = 2000</code> amount of <code>fate</code>.</li>\n<li>Instead, the attacker swaps in 1000 EYE and gets 500 LINK from the pool (according to <code>x * y = k</code>, ignoring fees for simplicity). Now the pool contains 2000 EYE and 500 LINK tokens.</li>\n<li>After the manipulation, he burns his LP tokens and gets <code>2000 * 100/1000 * 20 = 4000</code> amount of <code>fate</code>.</li>\n<li>Lastly, he swaps 500 LINK into the pool to get back his 1000 EYE.</li>\n<li>Compared to Step 2, the attacker earns a double amount of <code>fate</code> by only paying the swapping fees to the pool. The more EYE tokens he swaps into the pool, the more <code>fate</code> he can get. This attack is practically possible by leveraging flashloans or flashswaps from other pools containing EYE tokens.</li>\n</ol>\n<p>The <code>setEYEBasedAssetStake</code> function has the same issue of using a manipulatable LP pricing formula. For more detailed explanations, please refer to the analysis of the <a href=\"https://peckshield.medium.com/cheese-bank-incident-root-cause-analysis-d076bf87a1e7\">Cheese Bank attack</a> and the <a href=\"https://peckshield.medium.com/warpfinance-incident-root-cause-analysis-581a4869ee00\">Warp Finance attack</a>.</p>\n<p>Referenced code:\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/LimboDAO.sol#L356\">DAO/LimboDAO.sol#L356</a>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/LimboDAO.sol#L392\">DAO/LimboDAO.sol#L392</a></p>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use a fair pricing formula for the LP tokens, for example, the one proposed by <a href=\"https://blog.alphafinance.io/fair-lp-token-pricing/\">Alpha Finance</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/304#issuecomment-1035844748\">gititGoro (Behodler) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>This is actually a good fate inflation vector especially when combined with the fateToFlan conversion</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/304#issuecomment-1053304725\">Jack the Pug (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Good catch! A valid economic attack vector can potentially be exploited using flashloans.</p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-14\" style=\"position:relative;\"><a href=\"#medium-risk-findings-14\" aria-label=\"medium risk findings 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (14)</h1>\n<h2 id=\"m-01-incorrect-unlocktime-can-dos-withdrawgovernanceasset\" style=\"position:relative;\"><a href=\"#m-01-incorrect-unlocktime-can-dos-withdrawgovernanceasset\" aria-label=\"m 01 incorrect unlocktime can dos withdrawgovernanceasset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/228\">[M-01] Incorrect <code>unlockTime</code> can DOS <code>withdrawGovernanceAsset</code></a></h2>\n<p><em>Submitted by csanuragjain</em></p>\n<p><code>unlockTime</code> is set incorrectly.</p>\n<h4 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Navigate to contract at <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol\">https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol</a></li>\n<li>Observe the assertGovernanceApproved function</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">assertGovernanceApproved</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">target</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">emergency</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">target</span><span class=\"mtk1\">][</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">unlockTime</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ol start=\"3\">\n<li>Assume assertGovernanceApproved is called with sender x and target y and pendingFlashDecision[target][sender].unlockTime is 100 and block.timestamp is 10000 then</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">target</span><span class=\"mtk1\">][</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">unlockTime</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// 10000+100=10100</span></span></span></code></pre>\n<ol start=\"4\">\n<li>Again assertGovernanceApproved is called with same argument after timestamp 10100. This time unlockTime is set to very high value  (assume block.timestamp is 10500). This is incorrect</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">target</span><span class=\"mtk1\">][</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">unlockTime</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// 10100+10500=20600</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Unlock time should be calculated like below:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">CONSTANT_UNLOCK_TIME</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">days</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// example</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">target</span><span class=\"mtk1\">][</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">unlockTime</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">CONSTANT_UNLOCK_TIME</span><span class=\"mtk1\"> +  </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/228#issuecomment-1030494067\">gititGoro (Behodler) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Well spotted. This is a variant of a previously reported issue where the recommendation was to not allow flash governing a contract until stake has been withdrawn which is a safer fix.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/228#issuecomment-1053393533\">Jack the Pug (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m keeping this as <code>Med</code> instead of marking it as a duplicate of #156 as it did not illustrate the severe impact that it can cause.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-reentrancy-on-flash-governance-proposal-withdrawal\" style=\"position:relative;\"><a href=\"#m-02-reentrancy-on-flash-governance-proposal-withdrawal\" aria-label=\"m 02 reentrancy on flash governance proposal withdrawal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/154\">[M-02] Reentrancy on Flash Governance Proposal Withdrawal</a></h2>\n<p><em>Submitted by kirk-baird</em></p>\n<p>The function <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L142\">withdrawGovernanceAsset()</a> is vulnerable to reentrancy, which would allow the attacker to drain the balance of the <code>flashGoverananceConfig.asset</code>.</p>\n<p>Note: this attack assumes the attacker may gain control of the execution flow in <code>asset.tranfer()</code> which is the case for many ERC20 tokens such as those that implement ERC777 but will depend on which asset is chosen in the configuration.</p>\n<h4 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L142\">withdrawGovernanceAsset()</a> does not follow the check-effects-interactions pattern as seen from the following code snippet, where an external call is made before state modifications.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawGovernanceAsset</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">asset</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">asset</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">asset</span><span class=\"mtk1\"> &amp;&amp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">unlockTime</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;Limbo: Flashgovernance decision pending.&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The attacker can exploit this vulnerability through the following steps:</p>\n<ol>\n<li><code>assertGovernanceApproved(userA, target, false)</code></li>\n<li>wait for <code>unlockTime</code> seconds to pass</li>\n<li><code>withdrawGovernanceAsset(target, asset)</code>  and gain control of the execution during <code>asset.transfer()</code></li>\n<li>repeat step 3) until there balance of <code>FlashGovernanceArbiter</code> is less than <code>pendingFlashDecision[target][msg.sender].amount</code></li>\n</ol>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>There are two possible mitigations, the first is to implement the check-effects-interactions patter. This involves doing as checks and state changes before making external calls. To implement this in the current context delete the <code>pendingFlashDecision</code> before making the external call as follows.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawGovernanceAsset</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">asset</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">asset</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">asset</span><span class=\"mtk1\"> &amp;&amp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">unlockTime</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;Limbo: Flashgovernance decision pending.&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">asset</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">asset</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/154#issuecomment-1029448627\">gititGoro (Behodler) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>I do mention in the documentation that the only eligible assets are EYE and EYE LPs but that rule isn’t enforced on a contract level which is why I’m acknowledging this rather than disputing it.\nNonetheless it’s not relevant to the context of Limbo</p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-burning-a-users-tokens-for-a-flash-proposal-will-not-deduct-their-balance\" style=\"position:relative;\"><a href=\"#m-03-burning-a-users-tokens-for-a-flash-proposal-will-not-deduct-their-balance\" aria-label=\"m 03 burning a users tokens for a flash proposal will not deduct their balance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/157\">[M-03] Burning a User’s Tokens for a Flash Proposal will not Deduct Their Balance</a></h2>\n<p><em>Submitted by kirk-baird</em></p>\n<p>The proposal to burn a user’s tokens for a flash governance proposal does not result in the user losing any funds and may in fact unlock their funds sooner.</p>\n<h4 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The function <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L124\">burnFlashGovernanceAsset()</a>  will simply overwrite the user’s state with <code>pendingFlashDecision[targetContract][user] = flashGovernanceConfig;</code> as seen below.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">burnFlashGovernanceAsset</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">asset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySuccessfulProposal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">user</span><span class=\"mtk1\">].</span><span class=\"mtk12\">assetBurnable</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">Burnable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">pendingFlashDecision</span><span class=\"mtk1\">[</span><span class=\"mtk12\">targetContract</span><span class=\"mtk1\">][</span><span class=\"mtk12\">user</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">flashGovernanceConfig</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Since <code>flashGovernanceConfig</code> is not modified in <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Proposals/BurnFlashStakeDeposit.sol#L39\">BurnFlashStakeDeposit.execute()</a> the user will have <code>amount</code> set to the current config amount which is likely what they originally transferred in {assertGovernanceApproved()](<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L60\">https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L60</a>).</p>\n<p>Furthermore, <code>unlockTime</code> will be set to the config unlock time.  The config unlock time is the length of time in seconds that proposal should lock tokens for not the future timestamp. That is unlock time may be say <code>7 days</code> rather than <code>now + 7 days</code>. As a result the check in <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/FlashGovernanceArbiter.sol#L146\">withdrawGovernanceAsset()</a>  <code>pendingFlashDecision[targetContract][msg.sender].unlockTime &#x3C; block.timestamp,</code> will always pass unless there is a significant misconfiguration.</p>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider deleting the user’s data (i.e. <code>delete pendingFlashDecision[targetContract][user]</code>) rather than setting it to the config. This would ensure the user cannot withraw any funds afterwards.</p>\n<p>Alternatively, only update <code>pendingFlashDecision[targetContract][user].amount</code> to subtract the amount sent as a function parameter and leave the remaining fields untouched.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/157\">gititGoro (Behodler) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-04-the-system-can-get-to-a-stuck-state-if-a-bad-proposal-proposal-that-cant-be-executed-is-accepted\" style=\"position:relative;\"><a href=\"#m-04-the-system-can-get-to-a-stuck-state-if-a-bad-proposal-proposal-that-cant-be-executed-is-accepted\" aria-label=\"m 04 the system can get to a stuck state if a bad proposal proposal that cant be executed is accepted permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/153\">[M-04] The system can get to a “stuck” state if a bad proposal (proposal that can’t be executed) is accepted</a></h2>\n<p><em>Submitted by CertoraInc</em></p>\n<h4 id=\"limbodaosol-updatecurrentproposal-modifier-and-makeproposal-function\" style=\"position:relative;\"><a href=\"#limbodaosol-updatecurrentproposal-modifier-and-makeproposal-function\" aria-label=\"limbodaosol updatecurrentproposal modifier and makeproposal function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LimboDAO.sol (<code>updateCurrentProposal()</code> modifier and <code>makeProposal()</code> function)</h4>\n<p>The LimboDAO contract has a variable that indicates the current proposal - every time there can be only one proposal. The only way a proposal can be done and a new proposal can be registered is to finish the previous proposal by either accepting it and executing it or by rejecting it. If a proposal that can’t succeed, like for example an <code>UpdateMultipleSoulConfigProposal</code> proposal that has too much tokens and not enough gas, will stuck the system if it will be accepted. Thats because its time will pass - the users won’t be able to vote anymore (because the <code>vote</code> function will revert), and the proposal can’t be executed - the <code>execute</code> function will revert. So the proposal won’t be able to be done and the system will be stuck because new proposal won’t be able to be registered.</p>\n<p>When trying to call the <code>executeCurrentProposal()</code> function that activates the <code>updateCurrentProposal()</code> modifier, the modifier will check the balance of fate, it will see that it’s positive and will call <code>currentProposalState.proposal.orchestrateExecute()</code> to execute the proposal. the proposal will revert and cancel it all (leaving the proposal as the current proposal with <code>voting</code> state).</p>\n<p>When trying to call <code>makeProposal()</code> function to make a new proposal it will revert because the current proposal is not equal to address(0).</p>\n<p>To sum up, the system can get to a “stuck” state if a bad proposal (proposal that can’t be executed) is accepted.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/153#issuecomment-1029445460\">gititGoro (Behodler) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>I’m so glad someone finally noticed this. So many issues logged skirted around this issue. A lot of issues were logged about adding too may token to the updateMultipleSoulProposal but the crux of the matter is that the proposal.execute() should be replaced with a call that returns a success boolean so that the DAO doesn’t get stuck on broken proposals. Congratulations on spotting this.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/153#issuecomment-1041459074\">Jack the Pug (judge) decreased severity from High to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>This is a good one, but I’m still going to downgrade this to <code>medium</code> as there is no fund at risk afaics.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/153#issuecomment-1056128991\">gititGoro (Behodler) commented</a>:</strong></p>\n<blockquote>\n<p>@jack-the-pug  There is a funds risk. Limbo can be paused via flash governance. When paused, funds can’t be withdrawn. The only way to unpause is with a proposal. If the DAO gets jammed up with a broken proposal contract then an attacker can pause Limbo and all staked funds will be locked permanently.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/153#issuecomment-1056154599\">Jack the Pug (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Yeah, I agree that funds can be at risk indirectly, like the vector you described above, but only when the warden made a clear and persuasive presentation about how the funds can be at risk, then it can be a <code>High</code>.</p>\n<p>Furthermore, this attack vector requires the community to misbehave or at least be imprudent, to pass a malicious proposal, which already lowers the severity of it.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-flan-cant-be-transferred-unless-the-flan-contract-has-flan-balance-greater-than-the-amount-we-want-to-transfer\" style=\"position:relative;\"><a href=\"#m-05-flan-cant-be-transferred-unless-the-flan-contract-has-flan-balance-greater-than-the-amount-we-want-to-transfer\" aria-label=\"m 05 flan cant be transferred unless the flan contract has flan balance greater than the amount we want to transfer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/160\">[M-05] flan can’t be transferred unless the flan contract has flan balance greater than the amount we want to transfer</a></h2>\n<p><em>Submitted by CertoraInc</em></p>\n<h4 id=\"flansol-safetransfer-function\" style=\"position:relative;\"><a href=\"#flansol-safetransfer-function\" aria-label=\"flansol safetransfer function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flan.sol (<code>safeTransfer()</code> function)</h4>\n<p>The flan contract must have balance (and must have more flan then we want to transfer) in order to allow flan transfers. If it doesn’t have any balance, the safeTransfer, which is the only way to transfer flan, will call <code>_transfer()</code> function with <code>amount = 0</code>. It should check <code>address(msg.sender)</code>’s balance instead of <code>address(this)</code>’s balance.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">flanBal</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">// the problem is in this line</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">flanToTransfer</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">flanBal</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">flanBal</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_transfer</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">flanToTransfer</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/160\">gititGoro (Behodler) confirmed but disagreed with High severity</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/160#issuecomment-1041461515\">Jack the Pug (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Downgrade to medium as there is no fund at risk.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-06-consistently-check-account-balance-before-and-after-transfers-for-fee-on-transfer-discrepencies\" style=\"position:relative;\"><a href=\"#m-06-consistently-check-account-balance-before-and-after-transfers-for-fee-on-transfer-discrepencies\" aria-label=\"m 06 consistently check account balance before and after transfers for fee on transfer discrepencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/237\">[M-06] Consistently check account balance before and after transfers for Fee-On-Transfer discrepencies</a></h2>\n<p><em>Submitted by Dravee</em></p>\n<p>Wrong fateBalance bookkeeping for a user.\nWrong fateCreated value emitted.</p>\n<h4 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Taking into account the FOT is done almost everywhere important in the solution already. That’s a known practice in the solution.</p>\n<p>However, it’s missing here (see @audit-info tags):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">LimboDAO</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">383</span><span class=\"mtk1\">:   </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">burnAsset</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">asset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isLive</span><span class=\"mtk1\"> </span><span class=\"mtk11\">incrementFate</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">384</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">assetApproved</span><span class=\"mtk1\">[</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot;LimboDAO: illegal asset&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">385</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">386</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ERC677</span><span class=\"mtk1\">(</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;LimboDAO: transferFailed&quot;</span><span class=\"mtk1\">); </span><span class=\"mtk3\">//@audit-info FOT not taken into account</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">387</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fateCreated</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">fateState</span><span class=\"mtk1\">[</span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">()].</span><span class=\"mtk12\">fateBalance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">388</span><span class=\"mtk1\">:     </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">asset</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">domainConfig</span><span class=\"mtk1\">.</span><span class=\"mtk12\">eye</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">389</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">fateCreated</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">10</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//@audit-info wrong amount due to lack of FOT calculation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">390</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">ERC677</span><span class=\"mtk1\">(</span><span class=\"mtk12\">domainConfig</span><span class=\"mtk1\">.</span><span class=\"mtk12\">eye</span><span class=\"mtk1\">).</span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span><span class=\"mtk3\">//@audit-info wrong amount due to lack of FOT calculation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">391</span><span class=\"mtk1\">:     } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">392</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actualEyeBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">domainConfig</span><span class=\"mtk1\">.</span><span class=\"mtk12\">eye</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">393</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">actualEyeBalance</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;LimboDAO: No EYE&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">394</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">395</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">eyePerUnit</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">actualEyeBalance</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">ONE</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">396</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">impliedEye</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">eyePerUnit</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">ONE</span><span class=\"mtk1\">;</span><span class=\"mtk3\">//@audit-info wrong amount due to lack of FOT calculation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">397</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">fateCreated</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">impliedEye</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">20</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">398</span><span class=\"mtk1\">:     }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">399</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">fateState</span><span class=\"mtk1\">[</span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">()].</span><span class=\"mtk12\">fateBalance</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">fateCreated</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//@audit-info potentially wrong fateCreated as fateCreated can be equal to amount * 10;  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">400</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">assetBurnt</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">asset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">fateCreated</span><span class=\"mtk1\">);</span><span class=\"mtk3\">//@audit-info potentially wrong fateCreated emitted</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">401</span><span class=\"mtk1\">:   }</span></span></span></code></pre>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>VS Code</p>\n<h4 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Check the balance before and after the transfer to take into account the Fees-On-Transfer.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/237#issuecomment-1030499258\">gititGoro (Behodler) confirmed but disagreed with High severity and commented</a>:</strong></p>\n<blockquote>\n<p>Nice catch! It’s not a level 3 bug, though. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/237#issuecomment-1053291744\">Jack the Pug (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Downgrade to <code>Med</code> as the assets need to be whitelisted.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-07-calling-generateflnquote-twice-in-every-block-prevents-any-migration\" style=\"position:relative;\"><a href=\"#m-07-calling-generateflnquote-twice-in-every-block-prevents-any-migration\" aria-label=\"m 07 calling generateflnquote twice in every block prevents any migration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/102\">[M-07] Calling <code>generateFLNQuote</code> twice in every block prevents any migration</a></h2>\n<p><em>Submitted by camden, also found by GeekyLumberjack, kirk-baird, and shw</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-behodler/blob/71d8e0cfd9388f975d6a90dffba9b502b222bdfe/contracts/UniswapHelper.sol#L138\">https://github.com/code-423n4/2022-01-behodler/blob/71d8e0cfd9388f975d6a90dffba9b502b222bdfe/contracts/UniswapHelper.sol#L138</a>\nIn the Uniswap helper, <code>generateFLNQuote</code> is public, so any user can generate the latest quote. If you call this twice in any block, then the two latest flan quotes will have a <code>blockProduced</code> value of the current block’s number.</p>\n<p>These quotes are used in the <code>_ensurePriceStability</code> function. The last require statement here is key:\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/71d8e0cfd9388f975d6a90dffba9b502b222bdfe/contracts/UniswapHelper.sol#L283-L285\">https://github.com/code-423n4/2022-01-behodler/blob/71d8e0cfd9388f975d6a90dffba9b502b222bdfe/contracts/UniswapHelper.sol#L283-L285</a></p>\n<p>This function will revert if this statement is false:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">localFlanQuotes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">].</span><span class=\"mtk12\">blockProduced</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">localFlanQuotes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">].</span><span class=\"mtk12\">blockProduced</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">VARS</span><span class=\"mtk1\">.</span><span class=\"mtk12\">minQuoteWaitDuration</span></span></span></code></pre>\n<p>Since <code>VARS.minQuoteWaitDuration</code> is a <code>uint256</code>, it is at least 0</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">localFlanQuotes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">].</span><span class=\"mtk12\">blockProduced</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">localFlanQuotes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">].</span><span class=\"mtk12\">blockProduced</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span></span></span></code></pre>\n<p>But, as we’ve shown above, we can create a transaction in every block that will make <code>localFlanQuotes[0].blockProduced - localFlanQuotes[1].blockProduced == 0</code>. In any block we can make any call to <code>_ensurePriceStability</code> revert.</p>\n<p><code>_ensurePriceStability</code> is called in the <code>ensurePriceStability</code> modifier:\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/71d8e0cfd9388f975d6a90dffba9b502b222bdfe/contracts/UniswapHelper.sol#L70\">https://github.com/code-423n4/2022-01-behodler/blob/71d8e0cfd9388f975d6a90dffba9b502b222bdfe/contracts/UniswapHelper.sol#L70</a></p>\n<p>This modifier is used in <code>stabilizeFlan</code>:\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/71d8e0cfd9388f975d6a90dffba9b502b222bdfe/contracts/UniswapHelper.sol#L162\">https://github.com/code-423n4/2022-01-behodler/blob/71d8e0cfd9388f975d6a90dffba9b502b222bdfe/contracts/UniswapHelper.sol#L162</a></p>\n<p>Lastly, <code>stabilizeFlan</code> is used in <code>migrate</code> in <code>Limbo.sol</code>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/71d8e0cfd9388f975d6a90dffba9b502b222bdfe/contracts/Limbo.sol#L234\">https://github.com/code-423n4/2022-01-behodler/blob/71d8e0cfd9388f975d6a90dffba9b502b222bdfe/contracts/Limbo.sol#L234</a></p>\n<p>Therefore, we can grief a migration in any block. In reality, the <code>minQuoteWaitDuration</code> would be set to a much higher value than 0, making this even easier to grief for people (you only need to call <code>generateFLNQuote</code> every <code>minQuoteWaitDuration - 1</code> blocks to be safe).</p>\n<h3 id=\"mitigation\" style=\"position:relative;\"><a href=\"#mitigation\" aria-label=\"mitigation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mitigation</h3>\n<p>Mitigation is to just use a time weighted oracle for uniswap.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/102#issuecomment-1027503228\">gititGoro (Behodler) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>I appreciate the write up. You’re not technically incorrect on the problem. The solution isn’t ideal because Uniswap can’t tell us what’s happening on Behodler. </p>\n<p>UniswapHelper can be replaced without much trouble. So if the oracle functionality does fail, we can deploy a better one. But for now, I doubt that the incentive exists to perpetually grief migrations on Limbo. If someone does start to grief, we can add flash governance to the flan quote generation and then burn the EYE belonging to griefers but I was reluctant to call on the big guns right from the start.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/102#issuecomment-1029344158\">gititGoro (Behodler) changed to confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>I’ve changed this to confirmed because a cryptoeconomic layer should be added. Flash governance for sampling an oracle is too extreme and adding a require to force the duration can still be griefed.</p>\n<p>Instead I think the solution is to force the caller to pay EYE if the interval is below the min required. The EYE is then burnt.\nSo the idea is that if you wish to grief migrations, it’s going to cost you more than just gas and the community will benefit from your griefing. </p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-tolerance-is-not-enforced-during-a-flash-governance-decision\" style=\"position:relative;\"><a href=\"#m-08-tolerance-is-not-enforced-during-a-flash-governance-decision\" aria-label=\"m 08 tolerance is not enforced during a flash governance decision permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/306\">[M-08] Tolerance is not enforced during a flash governance decision</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>Most of the functions with a <code>governanceApproved</code> modifier call <code>flashGoverner.enforceTolerance</code> to ensure the provided parameters are restricted to some range of their original values. However, in the <code>governanceApproved</code> modifier, <code>flashGoverner.setEnforcement(true);</code> is called after the function body is executed, and thus the changed values are not restricted during the function execution.</p>\n<p>An attacker can exploit this bug to change some critical parameters to arbitrary values by flash governance decisions. The effect will last until the community executes another proposal to correct the values. In the meanwhile, the attacker may make use of the corrupted values to launch an attack.</p>\n<h4 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>An attacker executes a flash governance decision, for example, the <code>adjustSoul</code> function of <code>Limbo</code>, and sets the <code>fps</code> of a soul to an extremely large value.</li>\n<li>During the flash governance decision, some of his assets, for example, EYE, are locked in the <code>FlashGovernanceArbiter</code> contract.</li>\n<li>He calls <code>claimReward</code> to get his rewards on the corresponding soul (assume that he has staked some number of the token before). Because of the manipulated <code>fps</code>, he gets a large number of Flan tokens as the reward.</li>\n<li>Surely, he will lose his EYE tokens because of the malicious flash governance decision. However, as long as the attacker gets large enough Flan tokens, he is incentivized to launch such an attack.</li>\n</ol>\n<p>Referenced code:\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Governable.sol#L46-L57\">DAO/Governable.sol#L46-L57</a>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/Limbo.sol#L380-L381\">Limbo.sol#L380-L381</a>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/Limbo.sol#L327-L329\">Limbo.sol#L327-L329</a>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/Limbo.sol#L530\">Limbo.sol#L530</a>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/Limbo.sol#L628-L630\">Limbo.sol#L628-L630</a></p>\n<h4 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Rewrite the <code>_governanceApproved</code> function and the <code>governanceApproved</code> modifier as follows:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_governanceApproved</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">emergency</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">successfulProposal</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">LimboDAOLike</span><span class=\"mtk1\">(</span><span class=\"mtk12\">DAO</span><span class=\"mtk1\">).</span><span class=\"mtk11\">successfulProposal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">successfulProposal</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">flashGoverner</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setEnforcement</span><span class=\"mtk1\">(</span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">configured</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">flashGoverner</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setEnforcement</span><span class=\"mtk1\">(</span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">flashGoverner</span><span class=\"mtk1\">.</span><span class=\"mtk11\">assertGovernanceApproved</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">emergency</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">modifier</span><span class=\"mtk1\"> </span><span class=\"mtk11\">governanceApproved</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">emergency</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_governanceApproved</span><span class=\"mtk1\">(</span><span class=\"mtk12\">emergency</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/306#issuecomment-1030510740\">gititGoro (Behodler) confirmed but disagreed with High severity and commented</a>:</strong></p>\n<blockquote>\n<p>So this is a vulnerability for the very first execution of flashgovernance decision on a contract, after which it’s safe. This is the type of thing that won’t be acted upon because it will have gone away by the time the public interacts with Limbo. However, it is technically true so I’m confirming the issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/306#issuecomment-1053333307\">Jack the Pug (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Valid finding, but the conditions are quite strict, downgraded to <code>Med</code>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-09-all-the-scxminted-is-at-risk-of-being-burntlimbosol\" style=\"position:relative;\"><a href=\"#m-09-all-the-scxminted-is-at-risk-of-being-burntlimbosol\" aria-label=\"m 09 all the scxminted is at risk of being burntlimbosol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/335\">[M-09] All the scxMinted is at risk of being burnt.(Limbo.sol)</a></h2>\n<p><em>Submitted by Hawkeye</em></p>\n<p>If one of the variables that calculate adjustedRectangle is a zero value,it will impair the calculation of excessSCX which would equal to all of the scxMinted on line 219.Nothing will be deducted from scxMinted on line 229 since adjustedRectangle =0 putting all of the former at risk of being burnt(line 230).</p>\n<p>Also, the check on line 224 would not pass for high value migrations since scxMinted would always be greater than the adjustedRectangle.No scx would be avaliable to be sent to the AMM helper nor would there be any LP minted.</p>\n<p>Furthermore, since SCX is needed to ensure the proper functioning of the protocol,ie, to provide liquidity and influence the value of Flan, it would be imperative that the correct value of excessScx is accounted for.</p>\n<h4 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Insert a require statement on line 222:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">AdjustedRectangle</span><span class=\"mtk1\">! =</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, “ </span><span class=\"mtk12\">err</span><span class=\"mtk1\">”)</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/335#issuecomment-1030515127\">gititGoro (Behodler) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>I really appreciate how deeply you’ve thought about this. Requires a thorough understanding of Limbo. Indeed your handle is apt (unless you’re just naming yourself after the marvel hero in which case I would have to see your archery skills).</p>\n<p>The RectangleOfFairness is hardcoded as a constant 30 eth in Limbo.sol (line 269) so that can’t be zero. The only way it could be zero is if the inflation factor is zero which is a community set variable. However, there might be some funny community edge case where they want it set to zero. For instance, suppose the community feels in some distant future that flan is sufficiently liquid but that SCX is still a bit dilute. Maybe they’d want to bring on new tokens while burning all new scx.</p>\n<p>I’m marking this as acknowledged, rather than disputed because your reasoning is really good.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-10-user-wont-be-able-to-get-his-rewards-in-case-of-staking-with-amount--0\" style=\"position:relative;\"><a href=\"#m-10-user-wont-be-able-to-get-his-rewards-in-case-of-staking-with-amount--0\" aria-label=\"m 10 user wont be able to get his rewards in case of staking with amount  0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/146\">[M-10] user won’t be able to get his rewards in case of staking with amount = 0</a></h2>\n<p><em>Submitted by CertoraInc, also found by Randyyy</em></p>\n<h4 id=\"limbosol-stake-function\" style=\"position:relative;\"><a href=\"#limbosol-stake-function\" aria-label=\"limbosol stake function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Limbo.sol (<code>stake()</code> function)</h4>\n<p>If a user has a pending reward and he calls the <code>stake</code> function with <code>amount = 0</code>, he won’t be able to get his reward (he won’t get the reward, and the reward debt will cover the reward)</p>\n<p>That’s happening because the reward calculation is done only if the staked amount (given as a parameter) is greater than 0, and it updates the reward debt also if the amount is 0, so the reward debt will be updated without the user will be able to get his reward</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/146#issuecomment-1029415967\">gititGoro (Behodler) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Good catch! I’d be interested in your mitigation step being provided. </p>\n<p>To me, it looks like the simplest solution is just to remove that if statement. Users who stake zero will pay unnecessary gas costs but the contract shouldn’t have to optimise gas consumption for undesired behaviour.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/146#issuecomment-1053338078\">Jack the Pug (judge) increased severity from Low to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Upgraded to <code>Med</code> as users can lose their rewards.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-11-you-can-grief-migrations-by-sending-scx-to-the-uniswaphelper\" style=\"position:relative;\"><a href=\"#m-11-you-can-grief-migrations-by-sending-scx-to-the-uniswaphelper\" aria-label=\"m 11 you can grief migrations by sending scx to the uniswaphelper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/105\">[M-11] You can grief migrations by sending SCX to the UniswapHelper</a></h2>\n<p><em>Submitted by camden, also found by robee</em></p>\n<p>The attack here allows the attacker to prevent migrations.</p>\n<p>The attack here is recoverable because we can just call <code>buyFlanAndBurn</code> (f it worked as expected) with SCX as the input token to buy Flan with the extra SCX, then run the migration again.</p>\n<h4 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The attack here is simple:</p>\n<ol>\n<li>Get some SCX</li>\n<li>Send it to the UniswapHelper contract</li>\n<li>Any migration called will revert</li>\n</ol>\n<p>My proof of concept test. You should be able to use this directly in the thig\n<a href=\"https://gist.github.com/CamdenClark/b6841ac7a63e868d90eff7d9a40e3e0a\">https://gist.github.com/CamdenClark/b6841ac7a63e868d90eff7d9a40e3e0a</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/UniswapHelper.sol#L167\">https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/UniswapHelper.sol#L167</a></p>\n<p><code>localSCXBalance</code> is the SCX balance of the uniswap helper. <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/UniswapHelper.sol#L163\">https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/UniswapHelper.sol#L163</a></p>\n<p>But, the caller of <code>stablizeFlan</code> assumes that the <code>rectangleOfFairness</code> parameter is going to be equal to the amount of SCX that was sent\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/Limbo.sol#L234\">https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/Limbo.sol#L234</a></p>\n<h4 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The mitigation could be to do <code>>=</code> instead of <code>==</code> so sending tokens can’t grief this.</p>\n<p>Beyond this though, why do you need to pass in rectangleOfFairness if we’re requiring it to be a function of the localSCXBalance anyways? <a href=\"https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/UniswapHelper.sol#L167\">https://github.com/code-423n4/2022-01-behodler/blob/cedb81273f6daf2ee39ec765eef5ba74f21b2c6e/contracts/UniswapHelper.sol#L167</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/105#issuecomment-1027518632\">gititGoro (Behodler) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>It’s interesting to think about this issue because it’s the type of tight rope walk between incentives and code enforcement. In this scenario, the net results of the griefing will be both a higher flan and scx price. So in exchange for a timely migration, we get a boost to flan and scx (which is precisely the goal of a migration from Limbo’s perspective).  Eventually we get the migration we wanted but only after some price assist from a griefer.\nFor this cryptoeconomic reason, I’ve marked it as acknowledged rather than confirmed. </p>\n<p>Still I appreciate the depth with which you’ve thought about this and I hope the Behodler community sees more of you after this audit.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/105#issuecomment-1053361876\">Jack the Pug (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Good catch! Thank you for creating the proof of concept test script. The Code4rena community needs more wardens like you!</p>\n</blockquote>\n<hr>\n<h2 id=\"m-12-you-can-flip-governance-decisions-without-extending-vote-duration\" style=\"position:relative;\"><a href=\"#m-12-you-can-flip-governance-decisions-without-extending-vote-duration\" aria-label=\"m 12 you can flip governance decisions without extending vote duration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/106\">[M-12] You can flip governance decisions without extending vote duration</a></h2>\n<p><em>Submitted by camden, also found by kirk-baird</em></p>\n<p>The impact here is that a user can, right at the end of the voting period, flip the decision without triggering the logic to extend the vote duration. The user doesn’t even have to be very sophisticated: they can just send one vote in one transaction to go to 0, then in a subsequent transaction send enough to flip the vote.</p>\n<h4 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-behodler/blob/608cec2e297867e4d954a63fecd720e80c1d5ae8/contracts/DAO/LimboDAO.sol#L281\">https://github.com/code-423n4/2022-01-behodler/blob/608cec2e297867e4d954a63fecd720e80c1d5ae8/contracts/DAO/LimboDAO.sol#L281</a>\nYou can send exactly enough fate to send the fate amount to 0, then send fate to change the vote. You’ll never trigger this logic.</p>\n<p>On the first call, to send the currentProposalState.fate to 0, <code>(fate + currentFate) * fate == 0</code>, so we won’t extend the proposal state.</p>\n<p>Then, on the second call, to actually change the vote, <code>fate * currentFate == 0</code> because <code>currentFate</code> is 0.</p>\n<h4 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Make sure that going to 0 is equivalent to a flip, but going away from 0 isn’t a flip.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/106#issuecomment-1027529133\">gititGoro (Behodler) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Changing the logic to include this edge case can get a little convoluted. One thing I thought of is to change the condition to\ncurrentFate<em>fate&#x3C;0 &#x26;&#x26; currrentFate</em>currentFate>fate*fate but then moving from 0 to positive won’t flip the vote.\nWhat about requiring the square of your vote to not equal the currentFate and reverting if not? In other words, your vote needs to either have no flipping impact or clearly be intended to flip, not just to cancel out all other votes.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/106#issuecomment-1036954286\">gititGoro (Behodler) commented</a>:</strong></p>\n<blockquote>\n<p>After some consideration, I’m going to implement the square of votes != currentVote rule as a tie makes no sense in the context of whether to execute. </p>\n</blockquote>\n<hr>\n<h2 id=\"m-13-lack-of-access-control-in-the-parameterize-function-of-proposal-contracts\" style=\"position:relative;\"><a href=\"#m-13-lack-of-access-control-in-the-parameterize-function-of-proposal-contracts\" aria-label=\"m 13 lack of access control in the parameterize function of proposal contracts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/296\">[M-13] Lack of access control in the <code>parameterize</code> function of proposal contracts</a></h2>\n<p><em>Submitted by shw, also found by hyh and jayjonah8</em></p>\n<p>Most of the proposal contracts have a <code>parameterize</code> function for setting the proposal parameters, and these functions are protected only by the <code>notCurrent</code> modifier. When the proposal is proposed through a <code>lodgeProposal</code> transaction, an attacker can front-run it, modify the proposal parameters, and let the community vote it down. As a result, the person proposing loses his <code>fate</code> deposit.</p>\n<h4 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>A benign user Alice wants to make a proposal, so she deploys one of the proposal contracts and sets the intended parameters. Her proposal is approved by the <code>ProposalFactory</code> and is ready to be proposed.</li>\n<li>Alice calls the <code>lodgeProposal</code> function of <code>ProposalFactory</code> to propose her proposal.</li>\n<li>An attacker Bob, who listens to the mempool, notices Alice’s transaction and front-runs it. He calls the <code>parameterize</code> function to change the parameters to undesirable ones.</li>\n<li>Alice’s proposal becomes the current proposal. However, the community rejects the proposal because of the changed parameters, causing Alice to lose her deposit.</li>\n</ol>\n<p>Referenced code:\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Proposals/BurnFlashStakeDeposit.sol#L25-L37\">DAO/Proposals/BurnFlashStakeDeposit.sol#L25-L37</a>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Proposals/SetAssetApprovalProposal.sol#L21-L24\">DAO/Proposals/SetAssetApprovalProposal.sol#L21-L24</a>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Proposals/ToggleWhitelistProposalProposal.sol#L22-L28\">DAO/Proposals/ToggleWhitelistProposalProposal.sol#L22-L28</a>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Proposals/UpdateMultipleSoulConfigProposal.sol#L40-L61\">DAO/Proposals/UpdateMultipleSoulConfigProposal.sol#L40-L61</a>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/Proposals/WithdrawERC20Proposal.sol#L26-L32\">DAO/Proposals/WithdrawERC20Proposal.sol#L26-L32</a>\n<a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/DAO/ProposalFactory.sol#L74-L78\">DAO/ProposalFactory.sol#L74-L78</a></p>\n<h4 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Only allow the creator of the proposal to modify the parameters.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/296\">gititGoro (Behodler) acknowledged</a></strong></p>\n<hr>\n<h2 id=\"m-14-uniswaphelperbuyflanandburn-is-a-subject-to-sandwich-attacks\" style=\"position:relative;\"><a href=\"#m-14-uniswaphelperbuyflanandburn-is-a-subject-to-sandwich-attacks\" aria-label=\"m 14 uniswaphelperbuyflanandburn is a subject to sandwich attacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/230\">[M-14] UniswapHelper.buyFlanAndBurn is a subject to sandwich attacks</a></h2>\n<p><em>Submitted by hyh</em></p>\n<p>Trades can happen at a manipulated price and end up receiving fewer Flan to be bought than current market price dictates.</p>\n<p>For example, at the time a user decides to call <code>buyFlanAndBurn</code> Flan trades at 0.8 in the input token terms at the corresponding DEX pool. If the input token holdings are big enough to compensate for pool manipulation costs, the following can happen: Flan buy order will be seen by a malicious bot, that buys Flan, pushing it to 0.9 before UniswapHelper’s order comes through, and selling it back right afterwards. This way, given a cumulative impact of the trades on Flan’s market price, the input token will be overspent.</p>\n<p>This yields direct loss for the system as input token market operations have lesser effect than expected at the expense of contract holdings.</p>\n<h4 id=\"proof-of-concept-14\" style=\"position:relative;\"><a href=\"#proof-of-concept-14\" aria-label=\"proof of concept 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><code>buyFlanAndBurn</code> doesn’t control for swap results, executing swaps with exchange pool provided amounts, which can be manipulated:</p>\n<p><a href=\"https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/UniswapHelper.sol#L231\">https://github.com/code-423n4/2022-01-behodler/blob/main/contracts/UniswapHelper.sol#L231</a></p>\n<h4 id=\"recommended-mitigation-steps-15\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-15\" aria-label=\"recommended mitigation steps 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider adding the minimum accepted price as a function argument so a user can limit the effective slippage, and check that actually received amount is above this accepted minimum.</p>\n<p>Also, in the future it will prudent to add a relative version of the parameter to control percentage based slippage with TWAP Oracle price as a benchmark.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/230#issuecomment-1030495237\">gititGoro (Behodler) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>You’re not wrong but remember that the tokens that can be called here are specifically those that are not listed on Limbo and likely never will be BUT that also have Flan pools. It’s unlikely that these pools will ever be significantly large as no incentives are provided for their maintenance.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-findings-12\" style=\"position:relative;\"><a href=\"#low-risk-findings-12\" aria-label=\"low risk findings 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (12)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/165\">[L-01] <code>Limbo.sol</code> Does Not Implement <code>WithdrawERC20Proposal</code> Functionality</a> <em>Submitted by kirk-baird, also found by shw</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/52\">[L-02] Denial of Service in UpdateMultipleSoulConfigProposal</a> <em>Submitted by 0x1f8b, also found by Dravee, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/37\">[L-03] transfer return value of a general ERC20 is ignored</a> <em>Submitted by robee, also found by 0v3rf10w, 0x1f8b, bobi, BouSalman, cmichel, Dravee, Fitraldys, hyh, p4st13r4, Ruhum, and shw</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/158\">[L-04] Insufficient Validation of <code>burnFlashGovernanceAsset()</code> Parameters</a> <em>Submitted by kirk-baird</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/55\">[L-05] <code>approveUnstake</code> is unsafe </a> <em>Submitted by CertoraInc</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/232\">[L-06] Loss of precision in <code>purchasePyroFlan()</code></a> <em>Submitted by sirhashalot, also found by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/88\">[L-07] Add emergency stop for specific stablecoins in <code>FlanBackstop</code></a> <em>Submitted by Ruhum, also found by hyh and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/78\">[L-08] <code>Governable</code> configuration can be backrun</a> <em>Submitted by Ruhum, also found by kirk-baird</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/86\">[L-09] <code>LimboDAO.killDAO()</code> doesn’t update the DAO address of <code>FlanBackstop</code>, <code>UniswapHelper</code>, and <code>ProposalFactory</code></a> <em>Submitted by Ruhum</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/27\">[L-10] Two Steps Verification before Transferring Ownership</a> <em>Submitted by robee, also found by cccz</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/210\">[L-11] Unstake wont work if pending reward is 0</a> <em>Submitted by csanuragjain, also found by CertoraInc and danb</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/189\">[L-12] Proposal cost doesn’t use votingDuration</a> <em>Submitted by sirhashalot</em></li>\n</ul>\n<h1 id=\"non-critical-findings-10\" style=\"position:relative;\"><a href=\"#non-critical-findings-10\" aria-label=\"non critical findings 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (10)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/236\">[N-01] UniswapHelper is open to manipulations on all chains whose id isn’t 1</a> <em>Submitted by hyh, also found by 0x1f8b, Dravee, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/51\">[N-02] Lack of Governance in Governable methods</a> <em>Submitted by 0x1f8b, also found by wuwe1</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/188\">[N-03] Wrong units in <code>convertFateToFlan()</code></a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/310\">[N-04] require() validation and the revert message is not match</a> <em>Submitted by rfa, also found by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/167\">[N-05] <code>LimboDAO.seed</code>: Wrong error message</a> <em>Submitted by cmichel, also found by camden, danb, Dravee, and hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/213\">[N-06] Incorrect require statement</a> <em>Submitted by csanuragjain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/249\">[N-07] Limbo, LimboDAO and FlashGovernanceArbiter events aren’t indexed</a> <em>Submitted by hyh, also found by p4st13r4</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/97\">[N-08] commented debugging code</a> <em>Submitted by BouSalman, also found by p4st13r4</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/123\">[N-09] typo</a> <em>Submitted by CertoraInc</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/148\">[N-10] not emitting <code>ClaimedReward</code> event </a> <em>Submitted by CertoraInc</em></li>\n</ul>\n<h1 id=\"gas-optimizations-31\" style=\"position:relative;\"><a href=\"#gas-optimizations-31\" aria-label=\"gas optimizations 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (31)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/12\">[G-01] Caching array length can save gas</a> <em>Submitted by robee, also found by BouSalman, CertoraInc, Dravee, gzeon, Jujic, pauliax, Randyyy, and throttle</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/336\">[G-02] Gas in <code>FlashGovernanceArbiter.assertGovernanceApproved()</code>: <code>flashGovernanceConfig.asset</code> and <code>flashGovernanceConfig.amount</code> should get cached</a> <em>Submitted by Dravee, also found by CertoraInc, hyh, and Ruhum</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/22\">[G-03] Use calldata instead of memory</a> <em>Submitted by robee, also found by Randyyy, rfa, sirhashalot, and Tomio</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/79\">[G-04] Remove duplicate call to save gas</a> <em>Submitted by Ruhum, also found by 0v3rf10w, camden, CertoraInc, Dravee, gzeon, hyh, and sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/185\">[G-05] Revert string > 32 bytes</a> <em>Submitted by sirhashalot, also found by BouSalman, Dravee, gzeon, pauliax, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/143\">[G-06] inline a function (use its code) instead of calling it</a> <em>Submitted by CertoraInc, also found by rfa, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/309\">[G-07] Gas in <code>LimboDAO.seed()</code>: Avoiding a 2N for-loop for a N one</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/242\">[G-08] Use of _msgSender()</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/20\">[G-09] Unnecessary default assignment</a> <em>Submitted by robee, also found by BouSalman, Dravee, rfa, Ruhum, throttle, and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/282\">[G-10] use multiple require() instead of &#x26;&#x26;</a> <em>Submitted by rfa</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/15\">[G-11] Use != 0 instead of > 0</a> <em>Submitted by robee, also found by BouSalman, Dravee, gzeon, and Ruhum</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/10\">[G-12] Prefix increments are cheaper than postfix increments</a> <em>Submitted by robee, also found by 0x1f8b, CertoraInc, defsec, Dravee, IllIllI, p4st13r4, rfa, and throttle</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/265\">[G-13] Gas in <code>FlashGovernanceArbiter.enforceTolerance()</code>: substractions that can’t underflow should be unchecked</a> <em>Submitted by Dravee, also found by CertoraInc, defsec, pauliax, and sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/142\">[G-14] a not needed variable</a> <em>Submitted by CertoraInc</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/89\">[G-15] Unnecessary if else in <code>UniswapHelper.configure()</code></a> <em>Submitted by Ruhum, also found by CertoraInc, sirhashalot, and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/127\">[G-16] use a defined constant to save gas</a> <em>Submitted by CertoraInc</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/270\">[G-17] Immutable variables</a> <em>Submitted by pauliax, also found by 0x1f8b, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/222\">[G-18] Gas Optimization: Struct layout</a> <em>Submitted by gzeon, also found by 0x1f8b, CertoraInc, Dravee, pauliax, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/50\">[G-19] Gas saving removing variable</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/95\">[G-20] gas optimization by using shift operator</a> <em>Submitted by BouSalman, also found by CertoraInc, and Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/119\">[G-21] use variables indtead of array to save gas</a> <em>Submitted by CertoraInc</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/122\">[G-22] save gas by using <code>if else</code> instead of calculating the same expression twice</a> <em>Submitted by CertoraInc</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/197\">[G-23] Gas: “constants” expressions are expressions, not constants.</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/290\">[G-24] Gas in <code>TransferHelper.ERC20NetTransfer</code>: check if amount != 0 before transfer</a> <em>Submitted by Dravee, also found by csanuragjain and Tomio</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/256\">[G-25] Gas in <code>UniswapHelper.configure()</code>: require statements should be reordered to save gas on revert</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/246\">[G-26] dai already update on constructor</a> <em>Submitted by Fitraldys</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/18\">[G-27] Unnecessary constructor</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/173\">[G-28] Using type(uint).max is cheaper than using calculation.</a> <em>Submitted by Randyyy</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/217\">[G-29] Gas savings</a> <em>Submitted by csanuragjain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/2\">[G-30] Unused imports</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-behodler-findings/issues/187\">[G-31] transferFrom gas improvement</a> <em>Submitted by sirhashalot</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-7\">High Risk Findings (7)</a></p>\n<ul>\n<li><a href=\"#h-01-lack-of-access-control-on-assertgovernanceapproved-can-cause-funds-to-be-locked\">[H-01] Lack of access control on <code>assertGovernanceApproved</code> can cause funds to be locked</a></li>\n<li><a href=\"#h-02-wrong-minting-amount\">[H-02] wrong minting amount</a></li>\n<li><a href=\"#h-03-double-transfer-in-the-transferandcall-function-of-erc677\">[H-03] Double transfer in the <code>transferAndCall</code> function of <code>ERC677</code></a></li>\n<li><a href=\"#h-04-logic-error-in-burnflashgovernanceasset-can-cause-locked-assets-to-be-stolen\">[H-04] Logic error in <code>burnFlashGovernanceAsset</code> can cause locked assets to be stolen</a></li>\n<li><a href=\"#h-05-flash-loan-price-manipulation-in-purchasepyroflan\">[H-05] Flash loan price manipulation in <code>purchasePyroFlan()</code></a></li>\n<li><a href=\"#h-06-loss-of-flash-governance-tokens-if-they-are-not-withdrawn-before-the-next-request\">[H-06] Loss Of Flash Governance Tokens If They Are Not Withdrawn Before The Next Request</a></li>\n<li><a href=\"#h-07-lp-pricing-formula-is-vulnerable-to-flashloan-manipulation\">[H-07] LP pricing formula is vulnerable to flashloan manipulation</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-14\">Medium Risk Findings (14)</a></p>\n<ul>\n<li><a href=\"#m-01-incorrect-unlocktime-can-dos-withdrawgovernanceasset\">[M-01] Incorrect <code>unlockTime</code> can DOS <code>withdrawGovernanceAsset</code></a></li>\n<li><a href=\"#m-02-reentrancy-on-flash-governance-proposal-withdrawal\">[M-02] Reentrancy on Flash Governance Proposal Withdrawal</a></li>\n<li><a href=\"#m-03-burning-a-users-tokens-for-a-flash-proposal-will-not-deduct-their-balance\">[M-03] Burning a User’s Tokens for a Flash Proposal will not Deduct Their Balance</a></li>\n<li><a href=\"#m-04-the-system-can-get-to-a-stuck-state-if-a-bad-proposal-proposal-that-cant-be-executed-is-accepted\">[M-04] The system can get to a “stuck” state if a bad proposal (proposal that can’t be executed) is accepted</a></li>\n<li><a href=\"#m-05-flan-cant-be-transferred-unless-the-flan-contract-has-flan-balance-greater-than-the-amount-we-want-to-transfer\">[M-05] flan can’t be transferred unless the flan contract has flan balance greater than the amount we want to transfer</a></li>\n<li><a href=\"#m-06-consistently-check-account-balance-before-and-after-transfers-for-fee-on-transfer-discrepencies\">[M-06] Consistently check account balance before and after transfers for Fee-On-Transfer discrepencies</a></li>\n<li><a href=\"#m-07-calling-generateflnquote-twice-in-every-block-prevents-any-migration\">[M-07] Calling <code>generateFLNQuote</code> twice in every block prevents any migration</a></li>\n<li><a href=\"#m-08-tolerance-is-not-enforced-during-a-flash-governance-decision\">[M-08] Tolerance is not enforced during a flash governance decision</a></li>\n<li><a href=\"#m-09-all-the-scxminted-is-at-risk-of-being-burntlimbosol\">[M-09] All the scxMinted is at risk of being burnt.(Limbo.sol)</a></li>\n<li><a href=\"#m-10-user-wont-be-able-to-get-his-rewards-in-case-of-staking-with-amount--0\">[M-10] user won’t be able to get his rewards in case of staking with amount = 0</a></li>\n<li><a href=\"#m-11-you-can-grief-migrations-by-sending-scx-to-the-uniswaphelper\">[M-11] You can grief migrations by sending SCX to the UniswapHelper</a></li>\n<li><a href=\"#m-12-you-can-flip-governance-decisions-without-extending-vote-duration\">[M-12] You can flip governance decisions without extending vote duration</a></li>\n<li><a href=\"#m-13-lack-of-access-control-in-the-parameterize-function-of-proposal-contracts\">[M-13] Lack of access control in the <code>parameterize</code> function of proposal contracts</a></li>\n<li><a href=\"#m-14-uniswaphelperbuyflanandburn-is-a-subject-to-sandwich-attacks\">[M-14] UniswapHelper.buyFlanAndBurn is a subject to sandwich attacks</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-12\">Low Risk Findings (12)</a></li>\n<li><a href=\"#non-critical-findings-10\">Non-Critical Findings (10)</a></li>\n<li><a href=\"#gas-optimizations-31\">Gas Optimizations (31)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}