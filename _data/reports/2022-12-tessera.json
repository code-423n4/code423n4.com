{
  "circa": {
    "title": "Tessera - Versus contest",
    "sponsor": "Tessera",
    "slug": "2022-12-tessera",
    "date": "2023-04-18",
    "findings": "https://github.com/code-423n4/2022-12-tessera-findings/issues",
    "contest": 195
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Tessera smart contract system written in Solidity. The audit contest took place between December 16—December 19 2022.</p>\n<p>Following the C4 audit contest, 3 wardens (IllIllI, Lambda, and <a href=\"https://twitter.com/gzeon\">gzeon</a>) reviewed the mitigations for all identified issues; the mitigation review report is appended below the audit contest report.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>5 Wardens contributed reports to the Tessera - Versus contest:</p>\n<ol>\n<li>IllIllI</li>\n<li>Lambda</li>\n<li><a href=\"https://twitter.com/trust__90\">Trust</a></li>\n<li>cccz</li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://github.com/HickupHH3\">hickuphh3</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 18 unique vulnerabilities. Of these vulnerabilities, 9 received a risk rating in the category of HIGH severity and 9 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 4 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 2 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-12-tessera\">C4 Tessera - Versus contest repository</a>, and is composed of 5 smart contracts written in the Solidity programming language and includes 795 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities based on three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>For more information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>, specifically our section on <a href=\"https://docs.code4rena.com/awarding/judging-criteria/severity-categorization\">Severity Categorization</a>.</p>\n<h1 id=\"high-risk-findings-9\" style=\"position:relative;\"><a href=\"#high-risk-findings-9\" aria-label=\"high risk findings 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (9)</h1>\n<h2 id=\"h-01-groupbuy-does-not-check-return-value-of-call\" style=\"position:relative;\"><a href=\"#h-01-groupbuy-does-not-check-return-value-of-call\" aria-label=\"h 01 groupbuy does not check return value of call permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/6\">[H-01] GroupBuy does not check return value of call</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/6\">Lambda</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/48\">Trust</a> and <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/30\">IllIllI</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/1e408ebc1c4fdcc72678ea7f21a94d38855ccc0b/src/modules/GroupBuy.sol#L265\">https://github.com/code-423n4/2022-12-tessera/blob/1e408ebc1c4fdcc72678ea7f21a94d38855ccc0b/src/modules/GroupBuy.sol#L265</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/1e408ebc1c4fdcc72678ea7f21a94d38855ccc0b/src/modules/GroupBuy.sol#L283\">https://github.com/code-423n4/2022-12-tessera/blob/1e408ebc1c4fdcc72678ea7f21a94d38855ccc0b/src/modules/GroupBuy.sol#L283</a></p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Both usages of <code>call</code> do not check if the transfer of ETH was succesful:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">).</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">contribution</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">).</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">balance</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>This can become very problematic when the recipient is a smart contract that reverts (for instance, temporarily) in its <code>receive</code> function. Then, <code>GroupBuy</code> still assumes that this ETH was transferred out and sets the balance to 0 or deletes <code>userContributions[_poolId][msg.sender]</code>, although no ETH was transferred. This leads to a loss of funds for the recipient.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<p>We assume that the recipient is a smart contract that performs some logic in its <code>receive</code> function. For instance, it can be a nice feature for some people to automatically convert all incoming ETH into another token using an AMM. However, it can happen that the used AMM has too little liquidity at the moment or the slippage of a swap would be too high, leading to a revert in the receing contract. In such a scenario, the <code>GroupBuy</code> contract still thinks that the call was succesful, leading to lost funds for the recipient.</p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p><code>require</code> that the call was successful.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/6#issuecomment-1358704150\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Keeping as High severity because of valid use case and resulting loss of funds if the receiving contract reverts, but the tx doesn’t.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/6#issuecomment-1404416518\">stevennevins (Tessera) confirmed and mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/204\">https://github.com/fractional-company/modular-fractional/pull/204</a></p>\n<p> <strong>Status:</strong> Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/39\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/20\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/2\">Lambda</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-02-groupbuy-lost-eth-when-the-nft-is-bought-for-less-than-the-minimum-reserve-price\" style=\"position:relative;\"><a href=\"#h-02-groupbuy-lost-eth-when-the-nft-is-bought-for-less-than-the-minimum-reserve-price\" aria-label=\"h 02 groupbuy lost eth when the nft is bought for less than the minimum reserve price permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/7\">[H-02] GroupBuy: Lost ETH when the NFT is bought for less than the minimum reserve price</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/7\">Lambda</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/19\">gzeon</a></em></p>\n<p>The <code>purchase</code> function does not require that an NFT is bought for exactly <code>minReservePrices[_poolId] * filledQuantities[_poolId]</code>, the price is only not allowed to be greater:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_price</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">minReservePrices</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">] * </span><span class=\"mtk12\">filledQuantities</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidPurchase</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p>This makes sense because it is not sensible to pay more when the purchase also succeeds with a smaller amount. However, the logic within <code>claim</code> does assume that the NFT was bought for <code>minReservePrices[_poolId]</code>. It decreases from <code>contribution</code> the quantity times the reserve price for all bids:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contribution</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">reservePrice</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>Only the remaining amount is reimbursed to the user, which can lead to a loss of funds.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<p>Let’s say that <code>filledQuantities[_poolId] = 100</code> and <code>minReservePrices[_poolId]</code> (i.e., the lowest bid) was 1 ETH. However, it was possible to buy the NFT for only 50 ETH. When a user has contributed 20 * 1 ETH, he does not get anything back when calling <code>claim</code>, although only 10 ETH (0.5 ETH * 20) of his contributions were used to buy the NFT. The overall loss of funds for all contributors is 50 ETH.</p>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Set <code>minReservePrices[_poolId]</code> to <code>_price / filledQuantities[_poolId]</code> after a purchase.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/7#issuecomment-1371404170\">stevennevins (Tessera) disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Not sure I agree with the severity.  The mechanism is essentially users pre-state their X interest at Y quantity and so a user can never “pay” at a price greater than they essentially agreed to.  We will look into ways to better handle the change and as it related to <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/19\">#19</a>. I would mark this as Medium.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/7#issuecomment-1371512844\">mehtaculous (Tessera) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/7#issuecomment-1378146079\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Funds are considered lost if the NFT was bought at a discounted price, and cannot be recovered, right? Would keep at High severity if it’s the case.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/7#issuecomment-1381955503\">stevennevins (Tessera) commented</a>:</strong></p>\n<blockquote>\n<p>Yeah correct, confirmed.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/7#issuecomment-1404414898\">stevennevins (Tessera) mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/207\">https://github.com/fractional-company/modular-fractional/pull/207</a></p>\n</blockquote>\n<p><strong>Status:</strong> Mitigation not confirmed.  Full details in reports from <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/40\">gzeon</a> and  <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/21\">IllIllI</a>. Also included in Mitigation Review section below.</p>\n<hr>\n<h2 id=\"h-03-groupbuy_verifyunsuccessfulstate-and-_verifysuccessfulstate-both-can-return-true-when-blocktimestamp--poolterminationperiod\" style=\"position:relative;\"><a href=\"#h-03-groupbuy_verifyunsuccessfulstate-and-_verifysuccessfulstate-both-can-return-true-when-blocktimestamp--poolterminationperiod\" aria-label=\"h 03 groupbuy_verifyunsuccessfulstate and _verifysuccessfulstate both can return true when blocktimestamp  poolterminationperiod permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/10\">[H-03] Groupbuy:<code>_verifyUnsuccessfulState</code> and <code>_verifySuccessfulState</code> both can return true when block.timestamp == pool.terminationPeriod</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/10\">Lambda</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/1e408ebc1c4fdcc72678ea7f21a94d38855ccc0b/src/modules/GroupBuy.sol#L455\">https://github.com/code-423n4/2022-12-tessera/blob/1e408ebc1c4fdcc72678ea7f21a94d38855ccc0b/src/modules/GroupBuy.sol#L455</a> </p>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/1e408ebc1c4fdcc72678ea7f21a94d38855ccc0b/src/modules/GroupBuy.sol#L478\">https://github.com/code-423n4/2022-12-tessera/blob/1e408ebc1c4fdcc72678ea7f21a94d38855ccc0b/src/modules/GroupBuy.sol#L478</a></p>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The functions <code>_verifyUnsuccessfulState</code> and <code>_verifySuccessfulState</code> should always have a differing behavior with regards to reversion, i.e. when one does not revert, the other should revert. In one condition, this is not true. Namely, when we have <code>pool.success == false</code> and <code>block.timestamp == pool.terminationPeriod</code>, this check within <code>_verifyUnsuccessfulState</code> is <code>false</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">success</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">terminationPeriod</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidState</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p>Similarly, this check within <code>_verifySuccessfulState</code> is also <code>false</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">success</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">terminationPeriod</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidState</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p>Because this breaks a fundamental invariant of the contract, there are probably multiple ways to exploit it.\nOne way an attacker can exploit is by calling <code>claim</code> (to get his contribution back completely), bidding again with a higher value than his previous contributions (to get his contributions back again).</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<p>Let’s assume we are at timestamp <code>pool.terminationPeriod</code>. Attacker Charlie has performed the lowest bid with quantity 10 and price 1 ETH. He calls <code>claim</code> to get his 10 ETH back. Now, he calls <code>contribute</code> with a quantity of 10 and a price of 2 ETH. Because this bid is higher than his previous one (which was the lowest one), his <code>pendingBalances</code> is set to 10 ETH (for the deleted entries) and his <code>userContributions</code> is set to 20 ETH (for this new contribution). He can now call <code>claim</code> again to get back his 20 ETH in <code>userContributions</code>, but also the 10 ETH in <code>pendingBalances</code>. Like that, he has stolen 10 ETH (and could use this attack pattern to drain the whole contract).</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Change <code>&#x3C;</code> in <code>_verifySuccessfulState</code> to <code>&#x3C;=</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/10#issuecomment-1358723568\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Given that block timestamp period for ETH mainnet is now a constant 12s, the probability of a block timestamp being equal to <code>terminationPeriod</code> is 1/12 (~8.3%), which is non-trivial.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/10#issuecomment-1404411546\">stevennevins (Tessera) confirmed and mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/203\">https://github.com/fractional-company/modular-fractional/pull/203</a></p>\n<p> <strong>Status:</strong> Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/41\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/22\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/4\">Lambda</a>. </p>\n</blockquote>\n<hr>\n<h2 id=\"h-04-optimisticlistingseaportpropose-sets-pendingbalances-of-newly-added-proposer-instead-of-previous-one\" style=\"position:relative;\"><a href=\"#h-04-optimisticlistingseaportpropose-sets-pendingbalances-of-newly-added-proposer-instead-of-previous-one\" aria-label=\"h 04 optimisticlistingseaportpropose sets pendingbalances of newly added proposer instead of previous one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/12\">[H-04] OptimisticListingSeaport.propose sets pendingBalances of newly added proposer instead of previous one</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/12\">Lambda</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/53\">Trust</a></em></p>\n<p>In <code>OptimisticListingSeaport.propose</code>, <code>pendingBalances</code> is set to the collateral. The purpose of this is that the proposer of a previous proposal can withdraw his collateral afterwards. However, this is done on the storage variable <code>proposedListing</code> after the new listing is already set:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_setListing</span><span class=\"mtk1\">(</span><span class=\"mtk12\">proposedListing</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_collateral</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pricePerToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Sets collateral amount to pending balances for withdrawal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pendingBalances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">][</span><span class=\"mtk12\">proposedListing</span><span class=\"mtk1\">.</span><span class=\"mtk12\">proposer</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">proposedListing</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collateral</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>Because of that, it will actually set <code>pendingBalances</code> of the new proposer. Therefore, the old proposer loses his collateral and the new one can make proposals for free.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/test/seaport/OptimisticListingSeaport.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/test/seaport/OptimisticListingSeaport.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -379,8 +379,11 @@ contract OptimisticListingSeaportTest is SeaportTestUtil {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// ===== LIST =====</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// ================</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     function testList(uint256 _collateral, uint256 _price) public {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // setup</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         testPropose(_collateral, _price);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(optimistic.pendingBalances(vault, bob), 0);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         _increaseTime(PROPOSAL_PERIOD);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         _collateral = _boundCollateral(_collateral, bobTokenBalance);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         _price = _boundPrice(_price);</span></span></span></code></pre>\n<p>This test fails and <code>optimistic.pendingBalances(vault, bob)</code> is equal to <code>_collateral</code>.</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Run <code>pendingBalances[_vault][proposedListing.proposer] += proposedListing.collateral;</code> before the <code>_setListing</code> call, in which case the above PoC no longer works.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/12#issuecomment-1358744847\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>Because of that, it will actually set pendingBalances of the new proposer. Therefore, the old proposer loses his collateral and the new one can make proposals for free.</p>\n</blockquote>\n<p>Seems like intended behaviour to me (actually set pendingBalances of the new proposer). The old proposer wouldn’t be losing his collateral because his pendingBalances would’ve been set when he called <code>propose()</code>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/12#issuecomment-1371507827\">mehtaculous (Tessera) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Agree with severity. The suggested solution makes sense.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/12#issuecomment-1404411097\">stevennevins (Tessera) mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/202\">https://github.com/fractional-company/modular-fractional/pull/202</a></p>\n<p> <strong>Status:</strong> Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/42\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/23\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/5\">Lambda</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-05-attacker-can-dos-optimisticlisting-with-very-low-cost\" style=\"position:relative;\"><a href=\"#h-05-attacker-can-dos-optimisticlisting-with-very-low-cost\" aria-label=\"h 05 attacker can dos optimisticlisting with very low cost permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/25\">[H-05] Attacker can DOS OptimisticListing with very low cost</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/25\">gzeon</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/42\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/41\">Trust</a>, and <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/15\">cccz</a></em></p>\n<p>The only check on a new proposal is that it is priced lower than the existing proposal. It does not constrain on the <code>_collateral</code> supplied (except it will revert in <code>\\_verifyBalance</code> if set to 0). Anyone can block normal proposal creation by creating a proposal with lower price but <code>\\_collateral == 1</code>. When a high total supply is used, the price of each Rae is negligible and enables an attacker to DOS the protocol.</p>\n<p>This violated the <code>prevent a user from holding a vault hostage and never letting the piece be reasonably bought</code> requirement.</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>For any proposal, an attacker can deny it with <code>\\_collateral = 1</code> and <code>\\_price = price - 1</code>.</p>\n<p>If he does not want the NFT to be sold, he can reject the proposal himself, resetting the contract state.</p>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L112-L116\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L112-L116</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Reverts if price per token is not lower than both the proposed and active listings</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_pricePerToken</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">proposedListing</span><span class=\"mtk1\">.</span><span class=\"mtk12\">pricePerToken</span><span class=\"mtk1\"> ||</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_pricePerToken</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">activeListings</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">].</span><span class=\"mtk12\">pricePerToken</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NotLower</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p>Add this test to OptimisticListingSeaport.t.sol:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function testProposeRevertLowerTotalValue() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _collateral = 100;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _price = 100;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // setup</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        testPropose(_collateral, _price);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        lowerPrice = pricePerToken - 1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // execute</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.expectRevert();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _propose(eve, vault, 1, lowerPrice, offer);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // expect</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _assertListing(eve, 1, lowerPrice, block.timestamp);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _assertTokenBalance(eve, token, tokenId, eveTokenBalance - 1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>[FAIL. Reason: Call did not revert as expected]</p>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Foundry</p>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Require the total value of the new collateral to be greater than the previous.</p>\n<p>This however still allows a Rae holder with sufficiently large holding to block proposal by creating a new proposal and immediately reject it himself.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/25#issuecomment-1371409906\">stevennevins (Tessera) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/25#issuecomment-1378890797\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Best report for Foundry POC + the following statement:</p>\n<blockquote>\n<p>This violated the <code>prevent a user from holding a vault hostage and never letting the piece be reasonably bought</code> requirement.</p>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"h-06-funds-are-permanently-stuck-in-optimisticlistingseaportsol-contract-if-active-proposal-is-executed-after-new-proposal-is-pending\" style=\"position:relative;\"><a href=\"#h-06-funds-are-permanently-stuck-in-optimisticlistingseaportsol-contract-if-active-proposal-is-executed-after-new-proposal-is-pending\" aria-label=\"h 06 funds are permanently stuck in optimisticlistingseaportsol contract if active proposal is executed after new proposal is pending permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/43\">[H-06] Funds are permanently stuck in OptimisticListingSeaport.sol contract if active proposal is executed after new proposal is pending.</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/43\">Trust</a></em></p>\n<p><code>\\_constructOrder</code> is called in <code>propose()</code>, OptimisticListingSeaport.sol. It fills the order params stored in proposedListings[_vault].</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    orderParams.offerer = _vault;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    orderParams.startTime = block.timestamp;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // order doesn&#39;t expire in human time scales and needs explicit cancellations</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    orderParams.endTime = type(uint256).max;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    orderParams.zone = zone;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // 0: no partial fills, anyone can execute</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    orderParams.orderType = OrderType.FULL_OPEN;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    orderParams.conduitKey = conduitKey;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // 1 Consideration for the listing itself + 1 consideration for the fees</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    orderParams.totalOriginalConsiderationItems = 3;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Importantly, it updates the order hash associated with the vault:\n<code>vaultOrderHash[_vault] = _getOrderHash(orderParams, counter);</code></p>\n<p>There is only one other use of <code>vaultOrderHash</code>, in <code>\\_verifySale()</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function _verifySale(address _vault) internal view returns (bool status) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    (bool isValidated, bool isCancelled, uint256 totalFilled, uint256 totalSize) = ISeaport(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        seaport</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ).getOrderStatus(vaultOrderHash[_vault]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (isValidated &amp;&amp; !isCancelled &amp;&amp; totalFilled &gt; 0 &amp;&amp; totalFilled == totalSize) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        status = true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>This function gets order information from the order hash, and makes sure the order is completely fulfilled.</p>\n<p>After NFT sell has completed, <code>cash()</code> is used to distribute income ETH:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function cash(address _vault, bytes32[] calldata _burnProof) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Reverts if vault is not registered</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    (address token, uint256 id) = _verifyVault(_vault);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Reverts if active listing has not been settled</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Listing storage activeListing = activeListings[_vault];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Reverts if listing has not been sold</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t  // -------------- _verifySale MUST BE TRUE ---------</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (!_verifySale(_vault)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        revert NotSold();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    } else if (activeListing.collateral != 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 collateral = activeListing.collateral;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        activeListing.collateral = 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Sets collateral amount to pending balances for withdrawal</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        pendingBalances[_vault][activeListing.proposer] = collateral;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>As long as sale is not complete, <code>cash()</code> can’t be called as highlighted. The issue is that <code>vaultOrderHash[_vault]</code> is not protected during the lifetime of an active proposal. If another proposal is proposed and then the sell using active proposal takes place, <code>cash()</code> will keep reverting. Funds are stuck in listing contract.</p>\n<p>We can try to be clever and call <code>propose()</code> again with the same parameters to create an identical orderID, which will make <code>vaultOrderHash[_vault]</code> fine again and allow <code>cash()</code> to go through. But order params contain block.timestamp which will certainly be different which will make the hash different.</p>\n<h3 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Funds are permanently stuck in OptimisticListingSeaport.sol contract if active proposal is executed after new proposal is pending.</p>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>User A calls <code>propose()</code>, setting proposedListing. vaultOrderHash=X</li>\n<li>PROPOSAL_PERIOD passes , list is called promoting the listing to activeListing.</li>\n<li>Another user, malicious or innocent, proposes another proposal. vaultOrderHash=Y</li>\n<li>Sell goes down due to OpenSea validation confirmed on activeListing.</li>\n<li><code>\\_verifySale</code> will never return true because we can never got vaultOrderHash to be X</li>\n<li>cash() is bricked. Money is stuck in contract.</li>\n</ol>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Keep the order hash in the Listing structure rather than a single one per vault.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/43#issuecomment-1370140203\">mehtaculous (Tessera) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Agree with High severity. Solution is to move <code>orderHash</code> to Listing struct so that active and proposed listings can have separate order hashes.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/43#issuecomment-1404412211\">stevennevins (Tessera) mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/211\">https://github.com/fractional-company/modular-fractional/pull/211</a></p>\n<p> <strong>Status:</strong> Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/45\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/25\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/7\">Lambda</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-07-user-loses-collateral-converted-to-pendingbalance-when-cash-or-list-is-called\" style=\"position:relative;\"><a href=\"#h-07-user-loses-collateral-converted-to-pendingbalance-when-cash-or-list-is-called\" aria-label=\"h 07 user loses collateral converted to pendingbalance when cash or list is called permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/44\">[H-07] User loses collateral converted to pendingBalance when <code>cash()</code> or <code>list()</code> is called</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/44\">Trust</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/13\">Lambda</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L295\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L295</a> </p>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L232\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L232</a></p>\n<h3 id=\"description\" style=\"position:relative;\"><a href=\"#description\" aria-label=\"description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Description</h3>\n<p>In OptimisticListingOpensea, there are several functions which update pendingBalances of a proposer:</p>\n<ol>\n<li><code>list()</code></li>\n<li><code>cash()</code></li>\n<li><code>propose()</code></li>\n</ol>\n<p>Unfortunately, in <code>list()</code> and <code>cash()</code> the = operator is used instead of += when writing the new pendingBalances. For example:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function cash(address _vault, bytes32[] calldata _burnProof) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Reverts if vault is not registered</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    (address token, uint256 id) = _verifyVault(_vault);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Reverts if active listing has not been settled</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Listing storage activeListing = activeListings[_vault];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Reverts if listing has not been sold</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (!_verifySale(_vault)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        revert NotSold();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    } else if (activeListing.collateral != 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 collateral = activeListing.collateral;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        activeListing.collateral = 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Sets collateral amount to pending balances for withdrawal</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        pendingBalances[_vault][activeListing.proposer] = collateral;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t...</span></span></code></pre>\n<p>pendingBalances is not guaranteed to be zero. There could be funds from previous proposals which are not yet collected. Propose updates pendingBalance correctly:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// Sets collateral amount to pending balances for withdrawal</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">pendingBalances[_vault][proposedListing.proposer] += proposedListing.collateral;</span></span></code></pre>\n<p>So, when propose is followed by another propose(), the pendingBalance is updated correctly, but in cash and list we don’t account for pre-existing balance. This issue would manifest even after the fix suggested in the issue “User can send a proposal and instantly take back their collateral” because reject functions would increment the pendingBalance and then it would be overriden.</p>\n<h3 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>User loses collateral converted to pendingBalance when <code>cash()</code> or <code>list()</code> is called.</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>User calls <code>propose()</code> and gets pendingBalance = x</li>\n<li>User calls <code>propose()</code> with an improved proposal and gets pendingBalance = 1.5x</li>\n<li>proposal is successfull and the listing purchased the NFT</li>\n<li><code>cash()</code> is called to convert the Raes to ETH amount from the sell. pendingBalance is overridden by the current “collateral”  value. pendingBalance = 0.5x</li>\n<li>User loses x collateral value which is stuck in the contract</li>\n</ol>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Change the = operator to += in <code>list()</code> and <code>cash()</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/44#issuecomment-1370128040\">mehtaculous (Tessera) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Agree with High severity. Solution is to replace <code>=</code> with <code>+=</code> for both <code>list</code> and <code>cash</code> functions.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/44#issuecomment-1404413085\">stevennevins (Tessera) mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/202\">https://github.com/fractional-company/modular-fractional/pull/202</a></p>\n<p> <strong>Status:</strong> Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/46\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/26\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/8\">Lambda</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-08-attacker-can-steal-the-amount-collected-so-far-in-the-groupbuy-for-nft-purchase\" style=\"position:relative;\"><a href=\"#h-08-attacker-can-steal-the-amount-collected-so-far-in-the-groupbuy-for-nft-purchase\" aria-label=\"h 08 attacker can steal the amount collected so far in the groupbuy for nft purchase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/47\">[H-08] Attacker can steal the amount collected so far in the GroupBuy for NFT purchase.</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/47\">Trust</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/39\">IllIllI</a> and <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/9\">Lambda</a></em></p>\n<p><code>purchase()</code> in GroupBuy.sol executes the purchase call for the group. After safety checks, the NFT is bought with <code>\\_market</code>’s <code>execute()</code> function. Supposedly it deploys a vault which owns the NFT. The code makes sure the vault is the new owner of the NFT and exits.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// Executes purchase order transaction through market buyer contract and deploys new vault</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">address vault = IMarketBuyer(_market).execute{value: _price}(_purchaseOrder);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Checks if NFT contract supports ERC165 and interface ID of ERC721 tokens</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if (ERC165Checker.supportsInterface(_nftContract, _INTERFACE_ID_ERC721)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Verifes vault is owner of ERC-721 token</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (IERC721(_nftContract).ownerOf(_tokenId) != vault) revert UnsuccessfulPurchase();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">} else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Verifies vault is owner of CryptoPunk token</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (ICryptoPunk(_nftContract).punkIndexToAddress(_tokenId) != vault)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        revert UnsuccessfulPurchase();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Stores mapping value of poolId to newly deployed vault</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">poolToVault[_poolId] = vault;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Sets pool state to successful</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">poolInfo[_poolId].success = true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Emits event for purchasing NFT at given price</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">emit Purchase(_poolId, vault, _nftContract, _tokenId, _price);</span></span></code></pre>\n<p>The issue is that <code>\\_market</code> user-supplied variable is not validated at all. Attacker can pass their malicious contract, which uses the passed funds to buy the NFT and store it in attacker’s wallet. It will return the NFT-holding wallet so the checks will pass. As a result, attacker has the NFT while they could have contributed nothing to the GroupBuy. Attacker can also just steal the supplied ETH and return the current address which holds the NFT.</p>\n<h3 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Attacker can steal the amount collected so far in the GroupBuy for NFT purchase.</p>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>Group assembles and raises funds to buy NFT X</li>\n<li>Attacker calls <code>purchase()</code> and supplies their malicious contract in <code>\\_market</code>, as described.</li>\n<li>Attacker receives raised funds totalling  <code>minReservePrices[_poolId] * filledQuantities[_poolId]</code>, as checked in line 182.</li>\n</ol>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p><code>\\_market</code> should be whitelisted, or supplied in createPool stage and able to be scrutinized.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/47#issuecomment-1370123421\">mehtaculous (Tessera) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Agree with High severity. Solution is to check that the <code>vault</code> deployed from the MarketBuyer is actually registered through the <code>VaultRegistry</code>. This would confirm that the vault is not a user address</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/47#issuecomment-1404413419\">stevennevins (Tessera) mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/201\">https://github.com/fractional-company/modular-fractional/pull/201</a></p>\n</blockquote>\n<p><strong>Status:</strong> Mitigation not confirmed.  Full details in <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/47\">report from gzeon</a>, and also included in the Mitigation Review section below.</p>\n<hr>\n<h2 id=\"h-09-groupbuy-can-be-drained-of-all-eth\" style=\"position:relative;\"><a href=\"#h-09-groupbuy-can-be-drained-of-all-eth\" aria-label=\"h 09 groupbuy can be drained of all eth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/52\">[H-09] GroupBuy can be drained of all ETH.</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/52\">Trust</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/8\">Lambda</a></em></p>\n<p><code>purchase()</code> in GroupBuy faciilitates the purchasing of an NFT after enough contributions were gathered. Another report titled <em>“Attacker can steal the amount collected so far in the GroupBuy for NFT purchase</em>” describes a high impact bug in purchase. It is advised to read that first for context.</p>\n<p>Additionally, <code>purchase()</code> is vulnerable to a re-entrancy exploit which can be <em>chained</em> or <em>not chained</em> to the <code>\\_market</code> issue to steal <em>the entire</em> ETH stored in GroupBuy, rather than being capped to <code>minReservePrices[_poolId] * filledQuantities[_poolId]</code>.</p>\n<p>Attacker may take control of execution using this call:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// Executes purchase order transaction through market buyer contract and deploys new vault</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">address vault = IMarketBuyer(_market).execute{value: _price}(_purchaseOrder);</span></span></code></pre>\n<p>It could occur either by exploiting the unvalidated <code>\\_market</code> vulnerability , or by abusing an existing market that uses a user address in <code>\\_purchaseOrder</code>.</p>\n<p>There is no re-entrancy protection in <code>purchase()</code> call:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function purchase(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 _poolId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address _market,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address _nftContract,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 _tokenId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 _price,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bytes memory _purchaseOrder,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bytes32[] memory _purchaseProof</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">) external {</span></span></code></pre>\n<p><code>\\_verifyUnsuccessfulState()</code> needs to not revert for purchase call. It checks the pool.success flag:\n<code>if (pool.success || block.timestamp > pool.terminationPeriod) revert InvalidState();</code></p>\n<p>However, success is only set as the last thing in <code>purchase()</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Stores mapping value of poolId to newly deployed vault</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    poolToVault[_poolId] = vault;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Sets pool state to successful</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    poolInfo[_poolId].success = true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Emits event for purchasing NFT at given price</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    emit Purchase(_poolId, vault, _nftContract, _tokenId, _price);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Therefore, attacker can re-enter purchase() function multiple times, each time extracting the maximum allowed price. If attacker uses the controlled <code>\\_market</code> exploit, the function will return the current NFT owner, so when all the functions unwind they will keep setting success to true and exit nicely.</p>\n<h3 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>GroupBuy can be drained of all ETH.</p>\n<h3 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>GroupBuy holds 1500 ETH, from various bids</li>\n<li>maximum allowed price (<code>minReservePrices[_poolId] * filledQuantities[_poolId]</code>) is 50 * 20 = 1000 ETH</li>\n<li>\n<p>purchase(1000 ETH) is called</p>\n<ol>\n<li>\n<p>GroupBuy sends attacker 1000 ETH and calls <code>execute()</code></p>\n<ol>\n<li>\n<p><code>execute()</code> calls purchase(500ETH)</p>\n<ol>\n<li>\n<p>GroupBuy sends attacker 500 ETH and calls <code>execute()</code></p>\n<ol>\n<li>execute returns NFT owner address</li>\n</ol>\n</li>\n<li>GroupBuy sees returned address is NFT owner. Marks success and returns</li>\n</ol>\n</li>\n<li>execute returns NFT owner address</li>\n</ol>\n</li>\n<li>GroupBuy sees returned address is NFT owner. Marks success and returns</li>\n</ol>\n</li>\n<li>Attacker is left with 1500 ETH. Previous exploit alone can only net 1000ETH. Additionally, this exploit can be chained to any trusted MarketBuyer which passes control to user for purchasing and storing in vault, and then returns a valid vault.</li>\n</ol>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add a re-entrancy guard to <code>purchase()</code> function. Also, change success variable before performing external contract calls.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/52#issuecomment-1370077960\">mehtaculous (Tessera) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Agree with High severity. Instead of adding <code>re-entrancy</code> tag to <code>purchase</code> function, pool state simply needs to be updated to <code>success</code> before execution.</p>\n<p>In regards to:</p>\n<blockquote>\n<p>or by abusing an existing market that uses a user address in _purchaseOrder.</p>\n</blockquote>\n<p>This is not considered an issue since users will most likely NOT contribute to a pool where they are not familiar with the NFT and / or contract. Since the NFT contract is set when the pool is created, it should not matter whether the contract is malicious or is for an existing market that uses a user address, the pool will just be disregarded.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/52#issuecomment-1404413680\">stevennevins (Tessera) mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/201\">https://github.com/fractional-company/modular-fractional/pull/201</a></p>\n<p> <strong>Status:</strong> Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/48\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/28\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/10\">Lambda</a>.</p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-9\" style=\"position:relative;\"><a href=\"#medium-risk-findings-9\" aria-label=\"medium risk findings 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (9)</h1>\n<h2 id=\"m-01-groupbuy-may-purchase-nft-not-in-the-allowed-list\" style=\"position:relative;\"><a href=\"#m-01-groupbuy-may-purchase-nft-not-in-the-allowed-list\" aria-label=\"m 01 groupbuy may purchase nft not in the allowed list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/14\">[M-01] GroupBuy may purchase NFT not in the allowed list</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/14\">gzeon</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/46\">Trust</a> and <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/11\">Lambda</a></em></p>\n<p>When <code>_purchaseProof.length == 0</code>, GroupBuy.purchase compare the tokenId with the merkleRoot. This allows any tokenId that matches the merkleRoot to be purchased, even if they are not included in the allow list during setup.</p>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L186-L188\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L186-L188</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_purchaseProof</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Hashes tokenId to verify merkle root if proof is empty</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">) != </span><span class=\"mtk12\">merkleRoot</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidProof</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<h3 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Add the following to GroupBuy.t.sol. It would still revert (since no such nft existed) but not as expected.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    // modified from testPurchaseRevertInvalidProof</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function testPurchaseRevertInvalidTokenIdZeroLength() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // setup</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        testContributeSuccess();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // exploit</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 invalidPunkId = uint256(nftMerkleRoot);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32[] memory invalidPurchaseProof = new bytes32[](0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // expect</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.expectRevert(INVALID_PROOF_ERROR);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // execute</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _purchase(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            address(this),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            currentId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            address(punksBuyer),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            address(punks),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            invalidPunkId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            minValue,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            purchaseOrder,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            invalidPurchaseProof</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<h3 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Foundry</p>\n<h4 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Hash the tokenId even if there is only when length is 1.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/11\">stevennevins (Tessera) disagreed with severity</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/14#issuecomment-1378156253\">HickupHH3 (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Best report because Foundry POC.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-attacker-can-delay-proposal-rejection\" style=\"position:relative;\"><a href=\"#m-02-attacker-can-delay-proposal-rejection\" aria-label=\"m 02 attacker can delay proposal rejection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/24\">[M-02] Attacker can delay proposal rejection</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/24\">gzeon</a></em></p>\n<p>In <code>OptimisticListingSeaport.rejectProposal</code>, it reverts if <code>proposedListing.collateral &#x3C; _amount</code>. An attacker can therefore monitor the mempool, reducing the <code>proposedListing.collateral</code> to <code>_amount - 1</code> by frontrunning the <code>rejectProposal</code> call and delaying the rejection. The attacker may even be able to deny the rejection when the deadline passes.</p>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L145\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L145</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">proposedListing</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collateral</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InsufficientCollateral</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L153\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L153</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">proposedListing</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collateral</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h3 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>Attacker proposes a 10000 collateral at a very low price</li>\n<li>Bob tries to reject it by purchasing the 10000 collateral</li>\n<li>Attacker sees Bob’s tx in the mempool, frontruns it to reject 1 unit</li>\n<li>The proposedListing.collateral is now 9999</li>\n<li>Bob’s call reverted</li>\n<li>This keeps happening until PROPOSAL_PERIOD passes or Bob gave up because of gas paid on failing tx</li>\n<li>Attacker buys the NFT at a very low price</li>\n</ol>\n<h3 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>When <code>proposedListing.collateral &#x3C; _amount</code>, set <code>\\_amount</code> to proposedListing.collateral and refund the excess.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/24#issuecomment-1371389949\">stevennevins (Tessera) disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>While annoying, I think this is a Medium severity issue.  The attacker has to under price their proposal, defend this under priced proposal from other users and front run each purchase > 1, while selling their Raes at a loss, and it would be relatively costly for griefer to defend their underpriced proposal for the duration of the proposal period.  Users could purchase 1 Rae at a time without risk of front running.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/24#issuecomment-1378858509\">HickupHH3 (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Agree with Medium severity given the external requirements needed to pull this off.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-users-that-send-funds-at-a-price-lower-than-the-current-low-bid-have-the-funds-locked\" style=\"position:relative;\"><a href=\"#m-03-users-that-send-funds-at-a-price-lower-than-the-current-low-bid-have-the-funds-locked\" aria-label=\"m 03 users that send funds at a price lower than the current low bid have the funds locked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/31\">[M-03] Users that send funds at a price lower than the current low bid have the funds locked</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/31\">IllIllI</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/55\">Lambda</a> and <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/26\">cccz</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L114-L150\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L114-L150</a> </p>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L301-L303\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L301-L303</a></p>\n<h3 id=\"vulnerability-details\" style=\"position:relative;\"><a href=\"#vulnerability-details\" aria-label=\"vulnerability details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerability details</h3>\n<p>If a user contributes funds after there is no more supply left, and they don’t provide a price higher than the current minimum bid, they will be unable to withdraw their funds while the NFT remains unbought.</p>\n<h3 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Ether becomes stuck until and unless the NFT is bought, which may never happen.</p>\n<h3 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>When making a contribution, the user calls the <code>payable</code> <code>contribute()</code> function. If the supply has already been filled (<code>fillAtAnyPriceQuantity</code> is zero), the bid isn’t inserted into the queue, so the new bid is not tracked anywhere. When the function reaches <code>processBidsInQueue()</code>…:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// File: src/modules/GroupBuy.sol : GroupBuy.contribute()   #1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">99</span><span class=\"mtk1\">         </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">contribute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">100            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">101            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">102            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_price</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">103 @&gt;     ) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">104</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Reverts if pool ID is not valid</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">105</span><span class=\"mtk1\">            </span><span class=\"mtk11\">_verifyPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">106</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Reverts if NFT has already been purchased OR termination period has passed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">107</span><span class=\"mtk1\">            (, </span><span class=\"mtk12\">uint48</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">, , , ) = </span><span class=\"mtk11\">_verifyUnsuccessfulState</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">108</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Reverts if ether contribution amount per Rae is less than minimum bid price per Rae</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">109</span><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">minBidPrices</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">] || </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">110</span><span class=\"mtk1\">                </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidContribution</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">111</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Reverts if ether payment amount is not equal to total amount being contributed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">112</span><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_price</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidPayment</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">113</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">114</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Updates user and pool contribution amounts</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">115</span><span class=\"mtk1\">            </span><span class=\"mtk12\">userContributions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">116</span><span class=\"mtk1\">            </span><span class=\"mtk12\">totalContributions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">117</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">118</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Calculates remaining supply based on total possible supply and current filled quantity amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">119</span><span class=\"mtk1\">            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">remainingSupply</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">filledQuantities</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">120</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Calculates quantity amount being filled at any price</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">121</span><span class=\"mtk1\">            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fillAtAnyPriceQuantity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">remainingSupply</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">remainingSupply</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">122</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">123</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Checks if quantity amount being filled is greater than 0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">124</span><span class=\"mtk1\"> @&gt;         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">fillAtAnyPriceQuantity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">125</span><span class=\"mtk1\">                </span><span class=\"mtk3\">// Inserts bid into end of queue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">126</span><span class=\"mtk1\">                </span><span class=\"mtk12\">bidPriorityQueues</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">].</span><span class=\"mtk11\">insert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_price</span><span class=\"mtk1\">, </span><span class=\"mtk12\">fillAtAnyPriceQuantity</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">127</span><span class=\"mtk1\">                </span><span class=\"mtk3\">// Increments total amount of filled quantities</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">128</span><span class=\"mtk1\">                </span><span class=\"mtk12\">filledQuantities</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">fillAtAnyPriceQuantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">129</span><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">130</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">131</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Calculates unfilled quantity amount based on desired quantity and actual filled quantity amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">132</span><span class=\"mtk1\">            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">unfilledQuantity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">fillAtAnyPriceQuantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">133</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Processes bids in queue to recalculate unfilled quantity amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">134</span><span class=\"mtk1\"> @&gt;         </span><span class=\"mtk12\">unfilledQuantity</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">processBidsInQueue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">unfilledQuantity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_price</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">135</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">136</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Recalculates filled quantity amount based on updated unfilled quantity amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">137</span><span class=\"mtk1\">            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">filledQuantity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">unfilledQuantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">138</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Updates minimum reserve price if filled quantity amount is greater than 0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">139</span><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">filledQuantity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">minReservePrices</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">getMinPrice</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">140</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">141</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Emits event for contributing ether to pool based on desired quantity amount and price per Rae</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">142</span><span class=\"mtk1\">            </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Contribute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">143</span><span class=\"mtk1\">                </span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">144</span><span class=\"mtk1\">                </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">145</span><span class=\"mtk1\">                </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">146</span><span class=\"mtk1\">                </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">147</span><span class=\"mtk1\">                </span><span class=\"mtk12\">_price</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">148</span><span class=\"mtk1\">                </span><span class=\"mtk12\">minReservePrices</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">149</span><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">150</span><span class=\"mtk1\">:       }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L99-L150\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L99-L150</a></p>\n<p>…if the price isn’t higher than the lowest bid, the while loop is broken out of, with <code>pendingBalances</code> having never been updated, and the function does not revert:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// File: src/modules/GroupBuy.sol : GroupBuy.processBidsInQueue()   #2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">291</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">processBidsInQueue</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">292            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">293            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">294            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_price</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">295        ) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">296</span><span class=\"mtk1\">            </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">297</span><span class=\"mtk1\">            </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">298</span><span class=\"mtk1\">                </span><span class=\"mtk3\">// Retrieves lowest bid in queue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">299</span><span class=\"mtk1\">                </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">bidPriorityQueues</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">].</span><span class=\"mtk11\">getMin</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">300</span><span class=\"mtk1\">                </span><span class=\"mtk3\">// Breaks out of while loop if given price is less than than lowest bid price</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">301</span><span class=\"mtk1\"> @&gt;             </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_price</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">302</span><span class=\"mtk1\"> @&gt;                 </span><span class=\"mtk15\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">303</span><span class=\"mtk1\"> @&gt;             }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">304</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">305</span><span class=\"mtk1\">                </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lowestBidQuantity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">306</span><span class=\"mtk1\">                </span><span class=\"mtk3\">// Checks if lowest bid quantity amount is greater than given quantity amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">307</span><span class=\"mtk1\">                </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">lowestBidQuantity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">308</span><span class=\"mtk1\">                    </span><span class=\"mtk3\">// Decrements given quantity amount from lowest bid quantity</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">309</span><span class=\"mtk1\">                    </span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">310</span><span class=\"mtk1\">                    </span><span class=\"mtk3\">// Calculates partial contribution of bid by quantity amount and price</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">311</span><span class=\"mtk1\">                    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contribution</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">312</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">313</span><span class=\"mtk1\">:                   </span><span class=\"mtk3\">// Decrements partial contribution amount of lowest bid from total and user contributions</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L291-L313\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L291-L313</a></p>\n<p>In order for a user to get funds back, the amount must have been stored in <code>pendingBalances</code>, and since this is never done, all funds contributed during the <code>contribute()</code> call become property of the <code>GroupBuy</code> contract, with the user being unable to withdraw...:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// File: src/modules/GroupBuy.sol : GroupBuy.withdrawBalance()   #3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">274</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawBalance</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">275</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Reverts if caller balance is insufficient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">276</span><span class=\"mtk1\"> @&gt;         </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pendingBalances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">277</span><span class=\"mtk1\"> @&gt;         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InsufficientBalance</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">278</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">279</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Resets pending balance amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">280</span><span class=\"mtk1\">            </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pendingBalances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">281</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">282</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Transfers pending ether balance to caller</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">283</span><span class=\"mtk1\">            </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">).</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">balance</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">284</span><span class=\"mtk1\">:       }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L274-L284\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L274-L284</a></p>\n<p>…until the order has gone through, and they can <code>claim()</code> excess funds, but there likely won’t be any, due to the separate MEV bug I raised:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// File: src/modules/GroupBuy.sol : GroupBuy.contribution   #4</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">228</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">claim</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_mintProof</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">229</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Reverts if pool ID is not valid</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">230</span><span class=\"mtk1\">            </span><span class=\"mtk11\">_verifyPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">231</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Reverts if purchase has not been made AND termination period has not passed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">232</span><span class=\"mtk1\">            (, , , </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk11\">_verifySuccessfulState</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">233</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Reverts if contribution balance of user is insufficient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">234</span><span class=\"mtk1\"> @&gt;         </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contribution</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">userContributions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">235</span><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">contribution</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InsufficientBalance</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">236</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">237</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Deletes user contribution from storage</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">238</span><span class=\"mtk1\">            </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">userContributions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L228-L244\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L228-L244</a></p>\n<h3 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p><code>revert()</code> if the price is lower than the min bid, and the queue is already full</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/31#issuecomment-1404415639\">stevennevins (Tessera) confirmed and mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/206\">https://github.com/fractional-company/modular-fractional/pull/206</a></p>\n<p> <strong>Status:</strong> Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/51\">gzeon</a> and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/13\">Lambda</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-priority-queue-min-accounting-breaks-when-nodes-are-split-in-two\" style=\"position:relative;\"><a href=\"#m-04-priority-queue-min-accounting-breaks-when-nodes-are-split-in-two\" aria-label=\"m 04 priority queue min accounting breaks when nodes are split in two permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/32\">[M-04] Priority queue min accounting breaks when nodes are split in two</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/32\">IllIllI</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/51\">Trust</a></em></p>\n<p>The README states <code>If two users place bids at the same price but with different quantities, the queue will pull from the bid with a higher quantity first</code>, but the data-structure used for implementing this logic, is not used properly and essentially has its data corrupted when a large bid that is the current minimum bid, is split into two parts, so that a more favorable price can be used for a fraction of the large bid. The underlying issue is that one of the tree nodes is modified, without re-shuffling that node’s location in the tree.</p>\n<h3 id=\"impact-7\" style=\"position:relative;\"><a href=\"#impact-7\" aria-label=\"impact 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The minimum bid as told by the priority queue will be wrong, leading to the wrong bids being allowed to withdraw their funds, and being kicked out of the fraction of bids that are used to buy the NFT.</p>\n<h3 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The priority queue using a binary tree within an array to <a href=\"https://algs4.cs.princeton.edu/24pq/\">efficiently navigate and find the current minimum based on a node and its children</a>. The sorting of the nodes in the tree is based, in part, on the quantity in the case where two bids have the same price:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// File: src/lib/MinPriorityQueue.sol : MinPriorityQueue.isGreater()   #1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">111</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isGreater</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">112            </span><span class=\"mtk12\">Queue</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">113            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">114            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">j</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">115        ) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">116</span><span class=\"mtk1\">            </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidI</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">bidIdToBidMap</span><span class=\"mtk1\">[</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">bidIdList</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">117</span><span class=\"mtk1\">            </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidJ</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">bidIdToBidMap</span><span class=\"mtk1\">[</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">bidIdList</span><span class=\"mtk1\">[</span><span class=\"mtk12\">j</span><span class=\"mtk1\">]];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">118</span><span class=\"mtk1\"> @&gt;         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bidI</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">bidJ</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">119</span><span class=\"mtk1\"> @&gt;             </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidI</span><span class=\"mtk1\">.</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">bidJ</span><span class=\"mtk1\">.</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">120</span><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">121</span><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidI</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">bidJ</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">122</span><span class=\"mtk1\">:       }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol#L111-L122\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol#L111-L122</a></p>\n<p>The algorithm of the binary tree only works when the nodes are properly sorted. The sorting is corrupted when a node is modified, without removing it from the tree and re-inserting it:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// File: src/modules/GroupBuy.sol : GroupBuy.processBidsInQueue()   #2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">299</span><span class=\"mtk1\">                </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">bidPriorityQueues</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">].</span><span class=\"mtk11\">getMin</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">300</span><span class=\"mtk1\">                </span><span class=\"mtk3\">// Breaks out of while loop if given price is less than than lowest bid price</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">301</span><span class=\"mtk1\">                </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_price</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">302</span><span class=\"mtk1\">                    </span><span class=\"mtk15\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">303</span><span class=\"mtk1\">                }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">304</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">305</span><span class=\"mtk1\">                </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lowestBidQuantity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">306</span><span class=\"mtk1\">                </span><span class=\"mtk3\">// Checks if lowest bid quantity amount is greater than given quantity amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">307</span><span class=\"mtk1\">                </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">lowestBidQuantity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">308</span><span class=\"mtk1\">                    </span><span class=\"mtk3\">// Decrements given quantity amount from lowest bid quantity</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">309</span><span class=\"mtk1\"> @&gt;                 </span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">310</span><span class=\"mtk1\">                    </span><span class=\"mtk3\">// Calculates partial contribution of bid by quantity amount and price</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">311</span><span class=\"mtk1\">                    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contribution</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">312</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">313</span><span class=\"mtk1\">                    </span><span class=\"mtk3\">// Decrements partial contribution amount of lowest bid from total and user contributions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">314</span><span class=\"mtk1\">                    </span><span class=\"mtk12\">totalContributions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">] -= </span><span class=\"mtk12\">contribution</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">315</span><span class=\"mtk1\">                    </span><span class=\"mtk12\">userContributions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">][</span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">owner</span><span class=\"mtk1\">] -= </span><span class=\"mtk12\">contribution</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">316</span><span class=\"mtk1\">                    </span><span class=\"mtk3\">// Increments pending balance of lowest bid owner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">317</span><span class=\"mtk1\">                    </span><span class=\"mtk12\">pendingBalances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">owner</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">contribution</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">318</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">319</span><span class=\"mtk1\">:                   </span><span class=\"mtk3\">// Inserts new bid with given quantity amount into proper position of queue</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L299-L319\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L299-L319</a></p>\n<p>Let’s say that the tree looks like this:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">            A:(p:100,q:10)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            /             \\</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       B:(p:100,q:10)  C:(&lt;whatever&gt;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       /           \\</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">D:(whatever)   E:(whatever) </span></span></code></pre>\n<p>If A is modified so that q (quantity) goes from 10 to 5, B should now be at the root of the tree, since it has the larger size, and would be considered the smaller node. When another node is added, say, <code>F:(p:100,q:6)</code>, the algorithm will see that F has a larger size than A, and so A will be popped out as the min, even though B should have been. All nodes that are under B (which may be a lot of the nodes if they all entered at the same price/quantity) essentially become invisible under various scenarios, which means the users that own those bids will not be able to withdraw their funds, even if they really are the lowest bid that deserves to be pushed out of the queue. Note that the swimming up that is done for <code>F</code> will not re-shuffle <code>B</code> since, according to the algorithm, <code>F</code> will start as a child of <code>C</code>, and <code>B</code> is not in the list of parent nodes of <code>C</code>.</p>\n<h3 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>When modifying nodes of the tree, remove them first, then re-add them after modification.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/32#issuecomment-1406670452\">stevennevins (Tessera) confirmed and mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/212\">https://github.com/fractional-company/modular-fractional/pull/212</a></p>\n<p> <strong>Status:</strong> Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/52\">gzeon</a> and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/14\">Lambda</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-orders-may-not-be-fillable-due-to-missing-approvals\" style=\"position:relative;\"><a href=\"#m-05-orders-may-not-be-fillable-due-to-missing-approvals\" aria-label=\"m 05 orders may not be fillable due to missing approvals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/36\">[M-05] Orders may not be fillable due to missing approvals</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/36\">IllIllI</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/56\">gzeon</a></em></p>\n<p>Not all <code>IERC20</code> implementations <code>revert()</code> when there’s a failure in <code>approve()</code>. If one of these tokens returns false, there is no check for whether this has happened during the order listing validation, so it will only be detected when the order is attempted.</p>\n<h3 id=\"impact-8\" style=\"position:relative;\"><a href=\"#impact-8\" aria-label=\"impact 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>If the approval failure isn’t detected, the listing will never be fillable, because the funds won’t be able to be pulled from the opensea conduit. Once this happens, and if it’s detected, the only way to fix it is to create a counter-listing at a lower price (which may be below the market value of the tokens), waiting for the order to expire (which it may never), or by buying out all of the Rae to cancel the order (very expensive and defeats the purpose of pooling funds in the first place).</p>\n<h3 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The return value of <code>approve()</code> isn’t checked, so the order will be allowed to be listed without having approved the conduit:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// File: src/seaport/targets/SeaportLister.sol : SeaportLister.validateListing()   #1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">29</span><span class=\"mtk1\">                </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">ordersLength</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">30</span><span class=\"mtk1\">                    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">offerLength</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">parameters</span><span class=\"mtk1\">.</span><span class=\"mtk12\">offer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">31</span><span class=\"mtk1\">                    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">j</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">offerLength</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">j</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">32</span><span class=\"mtk1\">                        </span><span class=\"mtk12\">OfferItem</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">offer</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">parameters</span><span class=\"mtk1\">.</span><span class=\"mtk12\">offer</span><span class=\"mtk1\">[</span><span class=\"mtk12\">j</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">33</span><span class=\"mtk1\">                        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">offer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">34</span><span class=\"mtk1\">                        </span><span class=\"mtk12\">ItemType</span><span class=\"mtk1\"> </span><span class=\"mtk12\">itemType</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">offer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">itemType</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">35</span><span class=\"mtk1\">                        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">itemType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">ItemType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC721</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">36</span><span class=\"mtk1\">                            </span><span class=\"mtk11\">IERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">setApprovalForAll</span><span class=\"mtk1\">(</span><span class=\"mtk12\">conduit</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">37</span><span class=\"mtk1\">                        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">itemType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">ItemType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC1155</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">38</span><span class=\"mtk1\">                            </span><span class=\"mtk11\">IERC1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">setApprovalForAll</span><span class=\"mtk1\">(</span><span class=\"mtk12\">conduit</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">39</span><span class=\"mtk1\">                        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">itemType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">ItemType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC20</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">40</span><span class=\"mtk1\"> @&gt;                         </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">conduit</span><span class=\"mtk1\">, </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">41</span><span class=\"mtk1\">                    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">42</span><span class=\"mtk1\">                }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">43</span><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">44</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Validates the order on-chain so no signature is required to fill it</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">45</span><span class=\"mtk1\">            </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ConsiderationInterface</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_consideration</span><span class=\"mtk1\">).</span><span class=\"mtk11\">validate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">46</span><span class=\"mtk1\">:       }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol#L29-L46\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol#L29-L46</a></p>\n<h3 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use OpenZeppelin’s <code>safeApprove()</code>, which checks the return code and reverts if it’s not success.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/36#issuecomment-1370195907\">mehtaculous (Tessera) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>Disagree with validity. The listing would just need to be canceled and a new order would be created (without the ERC20 token that is not able to be approved)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/36#issuecomment-1378847444\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p><code>cancel()</code> can only be performed by the proposer, or through <code>rejectActive()</code>:</p>\n<blockquote>\n<p>or by buying out all of the Rae to cancel the order (very expensive and defeats the purpose of pooling funds in the first place).</p>\n</blockquote>\n<p>While unlikely, it is an attack vector to hold user funds hostage.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/36\">stevennevins (Tessera) acknowledged</a></strong></p>\n<hr>\n<h2 id=\"m-06-only-one-groupbuy-can-ever-use-usdt-or-similar-tokens-with-front-running-approval-protections\" style=\"position:relative;\"><a href=\"#m-06-only-one-groupbuy-can-ever-use-usdt-or-similar-tokens-with-front-running-approval-protections\" aria-label=\"m 06 only one groupbuy can ever use usdt or similar tokens with front running approval protections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/37\">[M-06] Only one <code>GroupBuy</code> can ever use USDT or similar tokens with front-running approval protections</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/37\">IllIllI</a></em></p>\n<p>Calling <code>approve()</code> without first calling <code>approve(0)</code> if the current approval is non-zero will revert with some tokens, such as Tether (USDT). While Tether is known to do this, it applies to other tokens as well, which are trying to protect against <a href=\"https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit\">this attack vector</a>.</p>\n<h3 id=\"impact-9\" style=\"position:relative;\"><a href=\"#impact-9\" aria-label=\"impact 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Only the first listing will start with the conduit’s approval at zero and will be able to change it to the maximum. Thereafter, every attempt to approve that same token will revert, causing any order using this lister to revert, including a re-listing at a lower price, which the protocol allows for.</p>\n<h3 id=\"proof-of-concept-14\" style=\"position:relative;\"><a href=\"#proof-of-concept-14\" aria-label=\"proof of concept 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The seaport conduit address is set in the constructor as an immutable variable, so it’s not possible to change it once the issue is hit:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// File: src/seaport/targets/SeaportLister.sol : SeaportLister.constructor()   #1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">19</span><span class=\"mtk1\">        </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_conduit</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">20</span><span class=\"mtk1\"> @&gt;         </span><span class=\"mtk12\">conduit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_conduit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">21</span><span class=\"mtk1\">:       }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol#L19-L21\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol#L19-L21</a></p>\n<p>The approval is set to the maximum without checking whether it’s already the maximum:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// File: src/seaport/targets/SeaportLister.sol : SeaportLister.validateListing()   #2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">29</span><span class=\"mtk1\">                </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">ordersLength</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">30</span><span class=\"mtk1\">                    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">offerLength</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">parameters</span><span class=\"mtk1\">.</span><span class=\"mtk12\">offer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">31</span><span class=\"mtk1\">                    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">j</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">offerLength</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">j</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">32</span><span class=\"mtk1\">                        </span><span class=\"mtk12\">OfferItem</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">offer</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">parameters</span><span class=\"mtk1\">.</span><span class=\"mtk12\">offer</span><span class=\"mtk1\">[</span><span class=\"mtk12\">j</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">33</span><span class=\"mtk1\">                        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">offer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">34</span><span class=\"mtk1\">                        </span><span class=\"mtk12\">ItemType</span><span class=\"mtk1\"> </span><span class=\"mtk12\">itemType</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">offer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">itemType</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">35</span><span class=\"mtk1\">                        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">itemType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">ItemType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC721</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">36</span><span class=\"mtk1\">                            </span><span class=\"mtk11\">IERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">setApprovalForAll</span><span class=\"mtk1\">(</span><span class=\"mtk12\">conduit</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">37</span><span class=\"mtk1\">                        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">itemType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">ItemType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC1155</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">38</span><span class=\"mtk1\">                            </span><span class=\"mtk11\">IERC1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">setApprovalForAll</span><span class=\"mtk1\">(</span><span class=\"mtk12\">conduit</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">39</span><span class=\"mtk1\">                        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">itemType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">ItemType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC20</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">40</span><span class=\"mtk1\"> @&gt;                         </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">conduit</span><span class=\"mtk1\">, </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">41</span><span class=\"mtk1\">                    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">42</span><span class=\"mtk1\">                }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">43</span><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">44</span><span class=\"mtk1\">            </span><span class=\"mtk3\">// Validates the order on-chain so no signature is required to fill it</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">45</span><span class=\"mtk1\">            </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ConsiderationInterface</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_consideration</span><span class=\"mtk1\">).</span><span class=\"mtk11\">validate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">46</span><span class=\"mtk1\">:       }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol#L29-L46\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol#L29-L46</a></p>\n<p>The README states: <code>The Tessera Protocol is designed around the concept of Hyperstructures, which are crypto protocols that can run for free and forever, without maintenance, interruption or intermediaries</code>, and having to deploy a new <code>SeaportLister</code> in order to have a fresh conduit that also needs to be deployed, is not <code>without maintenance or interruption</code>.</p>\n<h3 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Always reset the approval to zero before changing it to the maximum.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/37#issuecomment-1370188871\">mehtaculous (Tessera) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>Disagree with approval issue since the conduit will not be able to front-run the approvals.</p>\n<p>However, the issue regarding the conduit as an immutable variable is valid and it seems that a solution would be to pass the conduit in as a parameter for every <code>validateListing</code> call.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/37#issuecomment-1378841205\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The issue here isn’t about the frontrunning attack vector, but about not being able to reset the approval back to the maximum because some token implementations require the allowance can only be set to non-zero from zero, ie. non-zero -> non-zero is disallowed.</p>\n<p>Meaning, once the allowance is partially used, subsequent attempts to approve back to <code>type(uint256).max</code> will fail.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/37#issuecomment-1420884653\">stevennevins (Tessera) commented</a>:</strong></p>\n<blockquote>\n<p>I think this title is mislabeled and they meant SeaportOL.  The Vault delegate calls to the Seaport Lister so these approvals would be scoped to the Vault so multiple listing are possible through the target contract.  But a vault that relists wouldn’t be able to relist an ERC20 with front running protection.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-07-loss-of-eth-for-proposer-when-it-is-a-contract-that-doesnt-have-fallback-function\" style=\"position:relative;\"><a href=\"#m-07-loss-of-eth-for-proposer-when-it-is-a-contract-that-doesnt-have-fallback-function\" aria-label=\"m 07 loss of eth for proposer when it is a contract that doesnt have fallback function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/40\">[M-07] Loss of ETH for proposer when it is a contract that doesn’t have fallback function.</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/40\">Trust</a></em></p>\n<p><code>sendEthOrWeth()</code> is used in several locations in OptimisticListingSeaport:</p>\n<ol>\n<li>rejectProposal - sent to proposer</li>\n<li>rejectActive - sent to proposer</li>\n<li>cash - sent to msg.sender</li>\n</ol>\n<p>This is the implementation of sendEthOrWeth:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function _attemptETHTransfer(address _to, uint256 _value) internal returns (bool success) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Here increase the gas limit a reasonable amount above the default, and try</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // to send ETH to the recipient.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // NOTE: This might allow the recipient to attempt a limited reentrancy attack.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    (success, ) = _to.call{value: _value, gas: 30000}(&quot;&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">/// @notice Sends eth or weth to an address</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">/// @param _to Address to send to</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">/// @param _value Amount to send</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">function _sendEthOrWeth(address _to, uint256 _value) internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (!_attemptETHTransfer(_to, _value)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        WETH(WETH_ADDRESS).deposit{value: _value}();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        WETH(WETH_ADDRESS).transfer(_to, _value);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>The issue is that the receive could be a contract that does not have a fallback function. In this scenario, _attemptETHTransfer will fail and WETH would be transferred to the contract. It is likely that it bricks those funds for the contract as there is no reason it would support interaction with WETH tokens.</p>\n<p>It can be reasonably assumed that developers will develop contracts which will interact with OptimisticListingSeaport using proposals. They are not warned and are likely to suffer losses.</p>\n<h3 id=\"impact-10\" style=\"position:relative;\"><a href=\"#impact-10\" aria-label=\"impact 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Loss of ETH for proposer when it is a contract that doesn’t have fallback function.</p>\n<h3 id=\"recommended-mitigation-steps-15\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-15\" aria-label=\"recommended mitigation steps 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Either enforce that proposer is an EOA or take in a recipient address for ETH transfers.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/40#issuecomment-1378996495\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The argument here is about the contract being able to handle ETH but not WETH. If the ETH transfer fails (eg. gas used exceeds the 30k sent), then funds would be stuck.</p>\n<p>On the fence regarding severity here.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/40#issuecomment-1381978554\">stevennevins (Tessera) confirmed, but disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>I actually more agree with this being an issue:</p>\n<blockquote>\n<p>The argument here is about the contract being able to handle ETH but not WETH. If the ETH transfer fails (eg. gas used exceeds the 30k sent), then funds would be stuck.</p>\n</blockquote>\n<p>But it’s not clear to me that is what was originally highlighted in the description of the issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/40#issuecomment-1382004749\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Yeah it’s not fully clear because the premise is the contract not having a fallback function, but the intended effect of not being able to handle WETH is.</p>\n<blockquote>\n<p>It is likely that it bricks those funds for the contract as there is no reason it would support interaction with WETH tokens.</p>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"m-08--earlier-bidders-get-cut-out-of-future-nft-holdings-by-bidders-specifying-the-same-price\" style=\"position:relative;\"><a href=\"#m-08--earlier-bidders-get-cut-out-of-future-nft-holdings-by-bidders-specifying-the-same-price\" aria-label=\"m 08  earlier bidders get cut out of future nft holdings by bidders specifying the same price permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/45\">[M-08]  Earlier bidders get cut out of future NFT holdings by bidders specifying the same price.</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/45\">Trust</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/54\">cccz</a></em></p>\n<p>In GroupBuy module, users can call contribute to get a piece of the NFT pie. There are two stages in transforming the msg.value to holdings in the NFT. </p>\n<ol>\n<li>filling at any price(supply is not yet saturated)</li>\n</ol>\n<!---->\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 fillAtAnyPriceQuantity = remainingSupply &lt; _quantity ? remainingSupply : _quantity;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Checks if quantity amount being filled is greater than 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if (fillAtAnyPriceQuantity &gt; 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Inserts bid into end of queue</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bidPriorityQueues[_poolId].insert(msg.sender, _price, fillAtAnyPriceQuantity);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Increments total amount of filled quantities</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    filledQuantities[_poolId] += fillAtAnyPriceQuantity;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<ol start=\"2\">\n<li>Trim out lower price offers to make room for current higher offer.</li>\n</ol>\n<!---->\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// Calculates unfilled quantity amount based on desired quantity and actual filled quantity amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 unfilledQuantity = _quantity - fillAtAnyPriceQuantity;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Processes bids in queue to recalculate unfilled quantity amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">unfilledQuantity = processBidsInQueue(_poolId, unfilledQuantity, _price);</span></span></code></pre>\n<p>The while loop in <code>processBidsInQueue</code> will keep removing existing bids with lower price and create new queue entries for currently processed bid. When it reached a bid with a higher price than msg.sender’s price, it will break:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">while (quantity &gt; 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Retrieves lowest bid in queue</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Bid storage lowestBid = bidPriorityQueues[_poolId].getMin();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Breaks out of while loop if given price is less than than lowest bid price</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (_price &lt; lowestBid.price) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        break;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>The issue is that when <code>_price == lowestBid.price</code>, we don’t break and current bid will kick out older bid, as can be seen here:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// Decrements given quantity amount from lowest bid quantity</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">lowestBid.quantity -= quantity;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Calculates partial contribution of bid by quantity amount and price</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 contribution = quantity * lowestBid.price;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Decrements partial contribution amount of lowest bid from total and user contributions</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">totalContributions[_poolId] -= contribution;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">userContributions[_poolId][lowestBid.owner] -= contribution;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Increments pending balance of lowest bid owner</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">pendingBalances[lowestBid.owner] += contribution;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Inserts new bid with given quantity amount into proper position of queue</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">bidPriorityQueues[_poolId].insert(msg.sender, _price, quantity);</span></span></code></pre>\n<p>The described behavior goes against what the docs <a href=\"https://github.com/code-423n4/2022-12-tessera#step-3-other-users-deposit-funds-to-pool-filtering\">describe</a> will happen when two equal priced bids collide.</p>\n<h3 id=\"impact-11\" style=\"position:relative;\"><a href=\"#impact-11\" aria-label=\"impact 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Earlier bidders get cut out of future NFT holdings by bidders specifying the same price.</p>\n<h3 id=\"recommended-mitigation-steps-16\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-16\" aria-label=\"recommended mitigation steps 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Change the &#x3C; to &#x3C;= in the if condition:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">if (_price &lt;= lowestBid.price) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    break;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/45#issuecomment-1362646074\">IllIllI (warden) commented</a>:</strong></p>\n<blockquote>\n<p>@HickupHH3 @Trust the final code block in this submission comes from <a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L308-L320\">here</a>, which falls under the case where the price is the same and the quantity is different. The readme states <code>If two users place bids at the same price but with different quantities, the queue will pull from the bid with a higher quantity first</code>, and as the submission shows, it’s pulling from the higher quantity first - doesn’t that mean this finding is invalid?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/45#issuecomment-1362665724\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>I agree the example shown is accidentally the wrong block (if clause) and the misbehavior occurs in the else block:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">            } else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Calculates total contribution of bid by quantity amount and price</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                uint256 contribution = lowestBid.quantity * lowestBid.price;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Decrements full contribution amount of lowest bid from total and user contributions</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                totalContributions[_poolId] -= contribution;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                userContributions[_poolId][lowestBid.owner] -= contribution;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Increments pending balance of lowest bid owner</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                pendingBalances[lowestBid.owner] += contribution;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Removes lowest bid in queue</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                bidPriorityQueues[_poolId].delMin();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Inserts new bid with lowest bid quantity amount into proper position of queue</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                bidPriorityQueues[_poolId].insert(msg.sender, _price, lowestBidQuantity);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Decrements lowest bid quantity from total quantity amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                quantity -= lowestBidQuantity;</span></span></code></pre>\n<p>The issue described still manifests in this block.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/45#issuecomment-1406670133\">stevennevins (Tessera) confirmed and mitigated</a></strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/212\">https://github.com/fractional-company/modular-fractional/pull/212</a></p>\n<p> <strong>Status:</strong> Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/56\">gzeon</a> and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/18\">Lambda</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-09-groupbuys-that-are-completely-filled-still-dont-raise-stated-target-amount\" style=\"position:relative;\"><a href=\"#m-09-groupbuys-that-are-completely-filled-still-dont-raise-stated-target-amount\" aria-label=\"m 09 groupbuys that are completely filled still dont raise stated target amount permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/49\">[M-09] GroupBuys that are completely filled still don’t raise stated target amount</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/49\">Trust</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/57\">gzeon</a></em></p>\n<p><code>createPool()</code> in GroupBuy.sol creates a new contribution pool around an NFT. It specifies a target <code>\\_initialPrice</code> as minimum amount of ETH the NFT will cost, and <code>\\_totalSupply</code> which is the number of Raes to be minted on purchase success.</p>\n<p>minBidPrices is calculated from the two numbers. All future bids must be at least minBidPrices. It is assumed that if the totalSupply of Raes is filled up, the group will collect the initialPrice.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// Calculates minimum bid price based on initial price of NFT and desired total supply</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">minBidPrices[currentId] = _initialPrice / _totalSupply;</span></span></code></pre>\n<p>The issue is that division rounding error will make minBidPrices too low. Therefore, when all Raes are minted using minBidPrices price:\n<code>minBidPrices[currentId] * _totalSupply != _initialPrice</code></p>\n<p>Therefore, not enough money has been collected to fund the purchase.</p>\n<p>It can be assumed that most people will use minBidPrices to drive the price they will choose. Therefore, even after discovering that the Group has not raised enough after filling the supply pool, it will be very hard to get everyone to top up the contribution by a bit. This is because the settled price which is collected from all contributions is minReservePrices, which is always the minimum price deposited.</p>\n<p>Code in contribute that updates minReservePrices:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// Updates minimum reserve price if filled quantity amount is greater than 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if (filledQuantity &gt; 0) minReservePrices[_poolId] = getMinPrice(_poolId);</span></span></code></pre>\n<p>The check in purchase() that we don’t charge more than minReservePrices from each contribution:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">if (_price &gt; minReservePrices[_poolId] * filledQuantities[_poolId])</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    revert InvalidPurchase();</span></span></code></pre>\n<p>We can see an important contract functionality is not working as expected which will impair NFT purchases.</p>\n<h3 id=\"impact-12\" style=\"position:relative;\"><a href=\"#impact-12\" aria-label=\"impact 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>GroupBuys that are completely filled still don’t raise stated target amount.</p>\n<h3 id=\"recommended-mitigation-steps-17\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-17\" aria-label=\"recommended mitigation steps 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Round the minBidPrices up, rather than down. It will ensure enough funds are collected.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/49#issuecomment-1358963067\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree that the division rounding down will be a problem. Reasonable for a RAE holder to create a new pool where the <code>_initialPrice</code> isn’t exactly divisible by <code>_totalSupply</code>:</p>\n<p>Eg. <code>_initialPrice = 100</code>, _totalSupply = 8<code>. Then purchase will always revert with</code>InvalidPurchase()` because:</p>\n<ul>\n<li><code>minBidPrices[currentId] = 100 / 8</code> and </li>\n<li><code>_price (100) > minReservePrices[_poolId] * filledQuantities[_poolId]) = 12 * 8 = 96</code> is true.</li>\n</ul>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/49#issuecomment-1406670889\">stevennevins (Tessera) confirmed and mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/213\">https://github.com/fractional-company/modular-fractional/pull/213</a></p>\n<p> <strong>Status:</strong> Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/57\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/37\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/19\">Lambda</a>.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 4 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/29\">report highlighted below</a> by <strong>IllIllI</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/22\">gzeon</a>,\n<a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/17\">cccz</a>, and\n<a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/4\">Lambda</a>\n.</em></p>\n<h2 id=\"low-risk-issues-summary\" style=\"position:relative;\"><a href=\"#low-risk-issues-summary\" aria-label=\"low risk issues summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Issues Summary</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[L‑01]</td>\n<td align=\"left\">Bid size is an unfair ordering metric</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[L‑02]</td>\n<td align=\"left\">Users may DOS themselves with a lot of smalle payments</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[L‑03]</td>\n<td align=\"left\">Empty <code>receive()</code>/<code>payable fallback()</code> function does not authorize requests</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[L‑04]</td>\n<td align=\"left\"><code>require()</code> should be used instead of <code>assert()</code></td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[L‑05]</td>\n<td align=\"left\">Missing checks for <code>address(0x0)</code> when assigning values to <code>address</code> state variables</td>\n<td align=\"center\">12</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 18 instances over 5 issues</p>\n<h2 id=\"l01--bid-size-is-an-unfair-ordering-metric\" style=\"position:relative;\"><a href=\"#l01--bid-size-is-an-unfair-ordering-metric\" aria-label=\"l01  bid size is an unfair ordering metric permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L‑01]  Bid size is an unfair ordering metric</h2>\n<p>The README states that this is intentional, so I’ve filed it as Low rather than Medium, but giving priority to bids with the smaller quantity is not a fair ordering mechanic. A person with a lot of funds may have gotten that by pooling externally to the contract, and it’s not fair to kick them out of the pool earlier than another address that came in later.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MinPriorityQueue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">111</span><span class=\"mtk1\">      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isGreater</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">112          </span><span class=\"mtk12\">Queue</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">113          </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">114          </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">j</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">115      ) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">116</span><span class=\"mtk1\">          </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidI</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">bidIdToBidMap</span><span class=\"mtk1\">[</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">bidIdList</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">117</span><span class=\"mtk1\">          </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidJ</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">bidIdToBidMap</span><span class=\"mtk1\">[</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">bidIdList</span><span class=\"mtk1\">[</span><span class=\"mtk12\">j</span><span class=\"mtk1\">]];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">118</span><span class=\"mtk1\">          </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bidI</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">bidJ</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">119</span><span class=\"mtk1\">              </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidI</span><span class=\"mtk1\">.</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">bidJ</span><span class=\"mtk1\">.</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">120</span><span class=\"mtk1\">          }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">121</span><span class=\"mtk1\">          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidI</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">bidJ</span><span class=\"mtk1\">.</span><span class=\"mtk12\">price</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">122</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol#L111-L122\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol#L111-L122</a></p>\n<h2 id=\"l02--users-may-dos-themselves-with-a-lot-of-smalle-payments\" style=\"position:relative;\"><a href=\"#l02--users-may-dos-themselves-with-a-lot-of-smalle-payments\" aria-label=\"l02  users may dos themselves with a lot of smalle payments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L‑02]  Users may DOS themselves with a lot of smalle payments</h2>\n<p>If a user has to contribute to a pool via lots of dust payments (e.g. if they only have enough money each week to spend a few wei), they may eventually add enough payments that when it’s time to claim their excess, their for-loop below exceeds the block gas limit.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GroupBuy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">247</span><span class=\"mtk1\">          </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">success</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">248</span><span class=\"mtk1\">              </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">length</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">249</span><span class=\"mtk1\">                  </span><span class=\"mtk3\">// Gets bid quantity from storage</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">250</span><span class=\"mtk1\">:                 </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bid</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">bidPriorityQueues</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">].</span><span class=\"mtk12\">bidIdToBidMap</span><span class=\"mtk1\">[</span><span class=\"mtk12\">bidIds</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]];</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L247-L250\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L247-L250</a></p>\n<h2 id=\"l03--empty-receivepayable-fallback-function-does-not-authorize-requests\" style=\"position:relative;\"><a href=\"#l03--empty-receivepayable-fallback-function-does-not-authorize-requests\" aria-label=\"l03  empty receivepayable fallback function does not authorize requests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L‑03]  Empty <code>receive()</code>/<code>payable fallback()</code> function does not authorize requests</h2>\n<p>If the intention is for the Ether to be used, the function should call another function, otherwise it should revert (e.g. <code>require(msg.sender == address(weth))</code>). Having no access control on the function means that someone may send Ether to the contract, and have no way to get anything back out, which is a loss of funds. If the concern is having to spend a small amount of gas to check the sender against an immutable address, the code should at least have a function to rescue unused Ether.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">punks</span><span class=\"mtk1\">/</span><span class=\"mtk12\">protoforms</span><span class=\"mtk1\">/</span><span class=\"mtk12\">PunksMarketBuyer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">41</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/punks/protoforms/PunksMarketBuyer.sol#L41\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/punks/protoforms/PunksMarketBuyer.sol#L41</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">83</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L83\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L83</a></p>\n<h2 id=\"l04--require-should-be-used-instead-of-assert\" style=\"position:relative;\"><a href=\"#l04--require-should-be-used-instead-of-assert\" aria-label=\"l04  require should be used instead of assert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L‑04]  <code>require()</code> should be used instead of <code>assert()</code></h2>\n<p>Prior to solidity version 0.8.0, hitting an assert consumes the <strong>remainder of the transaction’s available gas</strong> rather than returning it, as <code>require()</code>/<code>revert()</code> do. <code>assert()</code> should be avoided even past solidity version 0.8.0 as its <a href=\"https://docs.soliditylang.org/en/v0.8.14/control-structures.html#panic-via-assert-and-error-via-require\">documentation</a> states that “The assert function creates an error of type Panic(uint256). … Properly functioning code should never create a Panic, not even on invalid external input. If this happens, then there is a bug in your contract which you should fix”.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">targets</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SeaportLister</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">45</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ConsiderationInterface</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_consideration</span><span class=\"mtk1\">).</span><span class=\"mtk11\">validate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">52</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ConsiderationInterface</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_consideration</span><span class=\"mtk1\">).</span><span class=\"mtk11\">cancel</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol#L45\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol#L45</a></p>\n<h2 id=\"l05--missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\" style=\"position:relative;\"><a href=\"#l05--missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\" aria-label=\"l05  missing checks for address0x0 when assigning values to address state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L‑05]  Missing checks for <code>address(0x0)</code> when assigning values to <code>address</code> state variables</h2>\n<p><em>There are 12 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">punks</span><span class=\"mtk1\">/</span><span class=\"mtk12\">protoforms</span><span class=\"mtk1\">/</span><span class=\"mtk12\">PunksMarketBuyer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">32</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">registry</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_registry</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">33</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">wrapper</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_wrapper</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">34</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">listing</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_listing</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/punks/protoforms/PunksMarketBuyer.sol#L32\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/punks/protoforms/PunksMarketBuyer.sol#L32</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">71</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">registry</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_registry</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">72</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">seaport</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_seaport</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">73</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">zone</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_zone</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">75</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">supply</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_supply</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">76</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">seaportLister</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_seaportLister</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">77</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">feeReceiver</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_feeReceiver</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">78</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">OPENSEA_RECIPIENT</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_openseaRecipient</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">338</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">feeReceiver</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L71\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L71</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">targets</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SeaportLister</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">20</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">conduit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_conduit</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol#L20\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol#L20</a></p>\n<h2 id=\"non-critical-issues-summary\" style=\"position:relative;\"><a href=\"#non-critical-issues-summary\" aria-label=\"non critical issues summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Issues Summary</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[N‑01]</td>\n<td align=\"left\">Debugging functions should be moved to a child class rather than being deployed</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[N‑02]</td>\n<td align=\"left\">Typos</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>[N‑03]</td>\n<td align=\"left\"><code>public</code> functions not called by the contract should be declared <code>external</code> instead</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td>[N‑04]</td>\n<td align=\"left\"><code>constant</code>s should be defined rather than using magic numbers</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>[N‑05]</td>\n<td align=\"left\">Missing event and or timelock for critical parameter change</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[N‑06]</td>\n<td align=\"left\">NatSpec is incomplete</td>\n<td align=\"center\">7</td>\n</tr>\n<tr>\n<td>[N‑07]</td>\n<td align=\"left\">Consider using <code>delete</code> rather than assigning zero to clear values</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>[N‑08]</td>\n<td align=\"left\">Contracts should have full test coverage</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[N‑09]</td>\n<td align=\"left\">Large or complicated code bases should implement fuzzing tests</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 33 instances over 9 issues</p>\n<h2 id=\"n01--debugging-functions-should-be-moved-to-a-child-class-rather-than-being-deployed\" style=\"position:relative;\"><a href=\"#n01--debugging-functions-should-be-moved-to-a-child-class-rather-than-being-deployed\" aria-label=\"n01  debugging functions should be moved to a child class rather than being deployed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑01]  Debugging functions should be moved to a child class rather than being deployed</h2>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"50\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GroupBuy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">402</span><span class=\"mtk1\">      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">printQueue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">403</span><span class=\"mtk1\">          </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">counter</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">404</span><span class=\"mtk1\">          </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">index</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">405</span><span class=\"mtk1\">          </span><span class=\"mtk12\">MinPriorityQueue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Queue</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">queue</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">bidPriorityQueues</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">406</span><span class=\"mtk1\">          </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">numBids</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">numBids</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">407</span><span class=\"mtk1\">          </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">counter</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">numBids</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">408</span><span class=\"mtk1\">              </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bid</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">queue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">bidIdToBidMap</span><span class=\"mtk1\">[</span><span class=\"mtk12\">index</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">409</span><span class=\"mtk1\">              </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">bidId</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">410</span><span class=\"mtk1\">                  ++</span><span class=\"mtk12\">index</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">411</span><span class=\"mtk1\">                  </span><span class=\"mtk15\">continue</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">412</span><span class=\"mtk1\">              }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">413</span><span class=\"mtk1\">              ++</span><span class=\"mtk12\">index</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">414</span><span class=\"mtk1\">              ++</span><span class=\"mtk12\">counter</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">415</span><span class=\"mtk1\">          }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">416</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L402-L416\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L402-L416</a></p>\n<h2 id=\"n02--typos\" style=\"position:relative;\"><a href=\"#n02--typos\" aria-label=\"n02  typos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑02]  Typos</h2>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"51\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MinPriorityQueue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit addreses</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">22</span><span class=\"mtk1\">:           </span><span class=\"mtk3\">///@notice map addreses to bids they own</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol#L22\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol#L22</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"52\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GroupBuy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit equalt</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">179</span><span class=\"mtk1\">:          </span><span class=\"mtk3\">// Reverts if NFT contract is not equalt to NFT contract set on pool creation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Verifes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">208</span><span class=\"mtk1\">:              </span><span class=\"mtk3\">// Verifes vault is owner of ERC-721 token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit specifc</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">286</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @notice Attempts to accept bid for specifc quantity and price</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L179\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L179</a></p>\n<h2 id=\"n03--public-functions-not-called-by-the-contract-should-be-declared-external-instead\" style=\"position:relative;\"><a href=\"#n03--public-functions-not-called-by-the-contract-should-be-declared-external-instead\" aria-label=\"n03  public functions not called by the contract should be declared external instead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑03]  <code>public</code> functions not called by the contract should be declared <code>external</code> instead</h2>\n<p>Contracts <a href=\"https://docs.soliditylang.org/en/latest/contracts.html#function-overriding\">are allowed</a> to override their parents’ functions and change the visibility from <code>external</code> to <code>public</code>.</p>\n<p><em>There are 10 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"53\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MinPriorityQueue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">27</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initialize</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Queue</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">36</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getNumBids</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Queue</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">41</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getMin</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Queue</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">90</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">delMin</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Queue</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol#L27\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol#L27</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"54\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GroupBuy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">346</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getBidInQueue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_bidId</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">347           </span><span class=\"mtk11\">public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">348           </span><span class=\"mtk11\">view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">349           </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">350               </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">351               </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">352               </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">353:              </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">quantity</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">371</span><span class=\"mtk1\">:      </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">getNextBidId</span><span class=\"mtk1\">(</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_poolId</span><span class=\"mtk1\">) </span><span class=\"mtk10\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">377</span><span class=\"mtk1\">:      </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">getNumBids</span><span class=\"mtk1\">(</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_poolId</span><span class=\"mtk1\">) </span><span class=\"mtk10\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">384</span><span class=\"mtk1\">:      </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">getBidQuantity</span><span class=\"mtk1\">(</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_poolId</span><span class=\"mtk1\">, </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_bidId</span><span class=\"mtk1\">) </span><span class=\"mtk10\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">402</span><span class=\"mtk1\">:      </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">printQueue</span><span class=\"mtk1\">(</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_poolId</span><span class=\"mtk1\">) </span><span class=\"mtk10\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L346-L353\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L346-L353</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"55\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">218</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">list</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_listProof</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L218\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L218</a></p>\n<h2 id=\"n04--constants-should-be-defined-rather-than-using-magic-numbers\" style=\"position:relative;\"><a href=\"#n04--constants-should-be-defined-rather-than-using-magic-numbers\" aria-label=\"n04  constants should be defined rather than using magic numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑04]  <code>constant</code>s should be defined rather than using magic numbers</h2>\n<p>Even <a href=\"https://github.com/code-423n4/2022-05-opensea-seaport/blob/9d7ce4d08bf3c3010304a0476a785c70c0e90ae7/contracts/lib/TokenTransferrer.sol#L35-L39\">assembly</a> can benefit from using readable constants instead of hex/numeric literals.</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"56\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">350</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">permissions</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Permission</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">3</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">385</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">orderParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalOriginalConsiderationItems</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">3</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 40</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">395</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">openseaFees</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_listingPrice</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">40</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 20</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">396</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tesseraFees</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_listingPrice</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">20</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L350\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L350</a></p>\n<h2 id=\"n05--missing-event-and-or-timelock-for-critical-parameter-change\" style=\"position:relative;\"><a href=\"#n05--missing-event-and-or-timelock-for-critical-parameter-change\" aria-label=\"n05  missing event and or timelock for critical parameter change permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑05]  Missing event and or timelock for critical parameter change</h2>\n<p>Events help non-contract tools to track changes, and events prevent users from being surprised by changes.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"57\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">336</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateFeeReceiver</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">337</span><span class=\"mtk1\">           </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">feeReceiver</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NotAuthorized</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">338</span><span class=\"mtk1\">           </span><span class=\"mtk12\">feeReceiver</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">339</span><span class=\"mtk1\">:      }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L336-L339\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L336-L339</a></p>\n<h2 id=\"n06--natspec-is-incomplete\" style=\"position:relative;\"><a href=\"#n06--natspec-is-incomplete\" aria-label=\"n06  natspec is incomplete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑06]  NatSpec is incomplete</h2>\n<p><em>There are 7 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"58\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GroupBuy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">344</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @param _poolId ID of the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">345</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @param _bidId ID of the bid in queue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">346</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getBidInQueue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_bidId</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">347           </span><span class=\"mtk11\">public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">348           </span><span class=\"mtk11\">view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">349           </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">350               </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">351               </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">352               </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">353:              </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">quantity</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">363</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @notice Gets minimum bid price of queue for given pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">364</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @param _poolId ID of the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">365</span><span class=\"mtk1\">:      </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">getMinPrice</span><span class=\"mtk1\">(</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_poolId</span><span class=\"mtk1\">) </span><span class=\"mtk10\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">369</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @notice Gets next bidId in queue of given pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">370</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @param _poolId ID of the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">371</span><span class=\"mtk1\">:      </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">getNextBidId</span><span class=\"mtk1\">(</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_poolId</span><span class=\"mtk1\">) </span><span class=\"mtk10\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">375</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @notice Gets total number of bids in queue for given pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">376</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @param _poolId ID of the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">377</span><span class=\"mtk1\">:      </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">getNumBids</span><span class=\"mtk1\">(</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_poolId</span><span class=\"mtk1\">) </span><span class=\"mtk10\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">382</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @param _poolId ID of the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">383</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @param _bidId ID of the bid in queue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">384</span><span class=\"mtk1\">:      </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">getBidQuantity</span><span class=\"mtk1\">(</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_poolId</span><span class=\"mtk1\">, </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_bidId</span><span class=\"mtk1\">) </span><span class=\"mtk10\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">389</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @param _poolId ID of the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">390</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @param _owner Address of the owner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">391</span><span class=\"mtk1\">       </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getOwnerToBidIds</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_owner</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">392</span><span class=\"mtk1\">           </span><span class=\"mtk12\">public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">393</span><span class=\"mtk1\">           </span><span class=\"mtk12\">view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">394</span><span class=\"mtk1\">:          </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk10\">memory</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L344-L353\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L344-L353</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"59\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">punks</span><span class=\"mtk1\">/</span><span class=\"mtk12\">protoforms</span><span class=\"mtk1\">/</span><span class=\"mtk12\">PunksMarketBuyer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">44</span><span class=\"mtk1\">        </span><span class=\"mtk3\">/// @param _order Bytes value of the necessary order parameters</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">45</span><span class=\"mtk1\">        </span><span class=\"mtk3\">/// return vault Address of the deployed vault</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">46</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_order</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/punks/protoforms/PunksMarketBuyer.sol#L44-L46\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/punks/protoforms/PunksMarketBuyer.sol#L44-L46</a></p>\n<h2 id=\"n07--consider-using-delete-rather-than-assigning-zero-to-clear-values\" style=\"position:relative;\"><a href=\"#n07--consider-using-delete-rather-than-assigning-zero-to-clear-values\" aria-label=\"n07  consider using delete rather than assigning zero to clear values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑07]  Consider using <code>delete</code> rather than assigning zero to clear values</h2>\n<p>The <code>delete</code> keyword more closely matches the semantics of what is being done, and draws more attention to the changing of state, which may lead to a more thorough audit of its associated logic.</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"60\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GroupBuy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">253</span><span class=\"mtk1\">:                  </span><span class=\"mtk12\">bid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L253\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L253</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"61\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">293</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">activeListing</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collateral</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">325</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">pendingBalances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">437</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">orderParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalOriginalConsiderationItems</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L293\">https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol#L293</a></p>\n<h2 id=\"n08--contracts-should-have-full-test-coverage\" style=\"position:relative;\"><a href=\"#n08--contracts-should-have-full-test-coverage\" aria-label=\"n08  contracts should have full test coverage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑08]  Contracts should have full test coverage</h2>\n<p>While 100% code coverage does not guarantee that there are no bugs, it often will catch easy-to-find bugs, and will ensure that there are fewer regressions when the code invariably has to be modified. Furthermore, in order to get full coverage, code authors will often have to re-organize their code so that it is more modular, so that each component can be tested separately, which reduces interdependencies between modules and layers, and makes for code that is easier to reason about and audit.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"62\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MinPriorityQueue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span></code></pre>\n<h2 id=\"n09--large-or-complicated-code-bases-should-implement-fuzzing-tests\" style=\"position:relative;\"><a href=\"#n09--large-or-complicated-code-bases-should-implement-fuzzing-tests\" aria-label=\"n09  large or complicated code bases should implement fuzzing tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑09]  Large or complicated code bases should implement fuzzing tests</h2>\n<p>Large code bases, or code with lots of inline-assembly, complicated math, or complicated interactions between multiple contracts, should implement <a href=\"https://medium.com/coinmonks/smart-contract-fuzzing-d9b88e0b0a05\">fuzzing tests</a>. Fuzzers such as Echidna require the test writer to come up with invariants which should not be violated under any circumstances, and the fuzzer tests various inputs and function calls to ensure that the invariants always hold. Even code with 100% code coverage can still have bugs due to the order of the operations a user performs, and fuzzers, with properly and extensively-written invariants, can close this testing gap significantly.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"63\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MinPriorityQueue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/29#issuecomment-1379018752\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Tough one between this and <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/4\">#4</a> as both contain very useful findings. While I like that #4 has more context specific findings, I decided to go with this one because of the number of findings made and its comprehensiveness.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/29#issuecomment-1404417864\">stevennevins (Tessera) confirmed and mitigated</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/pull/205\">https://github.com/fractional-company/modular-fractional/pull/205</a></p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 2 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/21\">report highlighted below</a> by <strong>gzeon</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/28\">IllIllI</a>.</em></p>\n<h2 id=\"gas-optimizations-summary\" style=\"position:relative;\"><a href=\"#gas-optimizations-summary\" aria-label=\"gas optimizations summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations Summary</h2>\n<p><em>Disclaimer: report extended from 4naly3er tool</em></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[G-01]</td>\n<td align=\"left\">Use assembly to check for <code>address(0)</code></td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[G-02]</td>\n<td align=\"left\">Cache array length outside of loop</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[G-03]</td>\n<td align=\"left\">State variables should be cached in stack variables rather than re-reading them from storage</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>[G-04]</td>\n<td align=\"left\">Use calldata instead of memory for function arguments that do not get mutated</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>[G-05]</td>\n<td align=\"left\">Use Custom Errors</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[G-06]</td>\n<td align=\"left\">Don’t initialize variables with default value</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[G-07]</td>\n<td align=\"left\"><code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>[G-08]</td>\n<td align=\"left\">Use shift Right/Left instead of division/multiplication if possible</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>[G-09]</td>\n<td align=\"left\">Use != 0 instead of > 0 for unsigned integer comparison</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>[G-10]</td>\n<td align=\"left\">Use unchecked when it is safe</td>\n<td align=\"center\">?</td>\n</tr>\n<tr>\n<td>[G-11]</td>\n<td align=\"left\">Refund contribution and pending balance in the same call</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[G-12]</td>\n<td align=\"left\">Generate merkle tree offchain</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[G-13]</td>\n<td align=\"left\">Pack Bid Struck</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[G-14]</td>\n<td align=\"left\">Pack Queue Struck</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"g-01-use-assembly-to-check-for-address0\" style=\"position:relative;\"><a href=\"#g-01-use-assembly-to-check-for-address0\" aria-label=\"g 01 use assembly to check for address0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01] Use assembly to check for <code>address(0)</code></h2>\n<p><em>Saves 6 gas per instance</em></p>\n<p><em>Instances (2)</em>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"64\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">106</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">proposedListings</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">].</span><span class=\"mtk12\">proposer</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) &amp;&amp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">107</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">activeListings</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">].</span><span class=\"mtk12\">proposer</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol\">Link to code</a></p>\n<h2 id=\"g-02-cache-array-length-outside-of-loop\" style=\"position:relative;\"><a href=\"#g-02-cache-array-length-outside-of-loop\" aria-label=\"g 02 cache array length outside of loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-02] Cache array length outside of loop</h2>\n<p>If not cached, the solidity compiler will always read the length of the array during each iteration. That is, if it is a storage array, this is an extra sload operation (100 additional extra gas for each iteration except for the first) and if it is a memory array, this is an extra mload operation (3 additional gas for each iteration except for the first).</p>\n<p><em>Instances (2)</em>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"65\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MinPriorityQueue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">98</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">curUserBids</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol\">Link to code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"66\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">390</span><span class=\"mtk1\">:             </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_offer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol\">Link to code</a></p>\n<h2 id=\"g-03-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\" style=\"position:relative;\"><a href=\"#g-03-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\" aria-label=\"g 03 state variables should be cached in stack variables rather than re reading them from storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-03] State variables should be cached in stack variables rather than re-reading them from storage</h2>\n<p>The instances below point to the second+ access of a state variable within a function. Caching of a state variable replaces each Gwarmaccess (100 gas) with a much cheaper stack read. Other less obvious fixes/optimizations include having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.</p>\n<p><em>Saves 100 gas per instance</em></p>\n<p><em>Instances (5)</em>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"67\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GroupBuy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">92</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">contribute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">currentId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_quantity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_raePrice</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol\">Link to code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"68\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">punks</span><span class=\"mtk1\">/</span><span class=\"mtk12\">protoforms</span><span class=\"mtk1\">/</span><span class=\"mtk12\">PunksMarketBuyer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">37</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">proxy</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IWrappedPunk</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wrapper</span><span class=\"mtk1\">).</span><span class=\"mtk11\">proxyInfo</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">64</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">IERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wrapper</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/punks/protoforms/PunksMarketBuyer.sol\">Link to code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"69\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">362</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">seaportLister</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol\">Link to code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"70\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">targets</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SeaportLister</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">38</span><span class=\"mtk1\">:                         </span><span class=\"mtk11\">IERC1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">setApprovalForAll</span><span class=\"mtk1\">(</span><span class=\"mtk12\">conduit</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol\">Link to code</a></p>\n<h2 id=\"g-04-use-calldata-instead-of-memory-for-function-arguments-that-do-not-get-mutated\" style=\"position:relative;\"><a href=\"#g-04-use-calldata-instead-of-memory-for-function-arguments-that-do-not-get-mutated\" aria-label=\"g 04 use calldata instead of memory for function arguments that do not get mutated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-04] Use calldata instead of memory for function arguments that do not get mutated</h2>\n<p>Mark data types as <code>calldata</code> instead of <code>memory</code> where possible. This makes it so that the data is not automatically loaded into memory. If the data passed into the function does not need to be changed (like updating values in an array), it can be passed in as <code>calldata</code>. The one exception to this is if the argument must later be passed into another function that takes an argument that specifies <code>memory</code> storage.</p>\n<p><em>Instances (5)</em>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"71\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GroupBuy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">166</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_purchaseOrder</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">167</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_purchaseProof</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol\">Link to code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"72\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">punks</span><span class=\"mtk1\">/</span><span class=\"mtk12\">protoforms</span><span class=\"mtk1\">/</span><span class=\"mtk12\">PunksMarketBuyer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">46</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_order</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/punks/protoforms/PunksMarketBuyer.sol\">Link to code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"73\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">targets</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SeaportLister</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">26</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">validateListing</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_consideration</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Order</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">51</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">cancelListing</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_consideration</span><span class=\"mtk1\">, </span><span class=\"mtk12\">OrderComponents</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/targets/SeaportLister.sol\">Link to code</a></p>\n<h2 id=\"g-05-use-custom-errors\" style=\"position:relative;\"><a href=\"#g-05-use-custom-errors\" aria-label=\"g 05 use custom errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-05] Use Custom Errors</h2>\n<p><a href=\"https://blog.soliditylang.org/2021/04/21/custom-errors/\">Source</a></p>\n<p>Instead of using error strings, to reduce deployment and runtime cost, you should use Custom Errors. This would save both deployment and runtime cost.</p>\n<p><em>Instances (2)</em>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"74\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MinPriorityQueue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">42</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk11\">isEmpty</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;nothing to return&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">91</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk11\">isEmpty</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;nothing to delete&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol\">Link to code</a></p>\n<h2 id=\"g-06-dont-initialize-variables-with-default-value\" style=\"position:relative;\"><a href=\"#g-06-dont-initialize-variables-with-default-value\" aria-label=\"g 06 dont initialize variables with default value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-06] Don’t initialize variables with default value</h2>\n<p><em>Instances (2)</em>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"75\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MinPriorityQueue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">98</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">curUserBids</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol\">Link to code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"76\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">390</span><span class=\"mtk1\">:             </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_offer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol\">Link to code</a></p>\n<h2 id=\"g-07-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" style=\"position:relative;\"><a href=\"#g-07-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" aria-label=\"g 07 i costs less gas than i especially when its used in for loops   ii   too permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-07] <code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</h2>\n<p><em>Saves 5 gas per loop</em></p>\n<p><em>Instances (4)</em>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"77\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MinPriorityQueue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">60</span><span class=\"mtk1\">:                 </span><span class=\"mtk12\">j</span><span class=\"mtk1\">++;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">77</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">insert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">, </span><span class=\"mtk11\">Bid</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">nextBidId</span><span class=\"mtk1\">++, </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">price</span><span class=\"mtk1\">, </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">98</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">curUserBids</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol\">Link to code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"78\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GroupBuy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">74</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">poolInfo</span><span class=\"mtk1\">[++</span><span class=\"mtk12\">currentId</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">PoolInfo</span><span class=\"mtk1\">(</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol\">Link to code</a></p>\n<h2 id=\"g-08-use-shift-rightleft-instead-of-divisionmultiplication-if-possible\" style=\"position:relative;\"><a href=\"#g-08-use-shift-rightleft-instead-of-divisionmultiplication-if-possible\" aria-label=\"g 08 use shift rightleft instead of divisionmultiplication if possible permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-08] Use shift Right/Left instead of division/multiplication if possible</h2>\n<p><em>Instances (5)</em>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"79\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MinPriorityQueue</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">49</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">k</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk11\">isGreater</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">, </span><span class=\"mtk12\">k</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk12\">k</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">50</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">exchange</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">, </span><span class=\"mtk12\">k</span><span class=\"mtk1\">, </span><span class=\"mtk12\">k</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">51</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">k</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">k</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol\">Link to code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"80\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">395</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">openseaFees</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_listingPrice</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">40</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">396</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tesseraFees</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_listingPrice</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">20</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol\">Link to code</a></p>\n<h2 id=\"g-09-use--0-instead-of--0-for-unsigned-integer-comparison\" style=\"position:relative;\"><a href=\"#g-09-use--0-instead-of--0-for-unsigned-integer-comparison\" aria-label=\"g 09 use  0 instead of  0 for unsigned integer comparison permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-09] Use != 0 instead of > 0 for unsigned integer comparison</h2>\n<p><em>Instances (5)</em>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"81\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GroupBuy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">124</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">fillAtAnyPriceQuantity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">139</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">filledQuantity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">minReservePrices</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">getMinPrice</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">268</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">pendingBalances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk11\">withdrawBalance</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">297</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">while</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol\">Link to code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"82\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">seaport</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptimisticListingSeaport</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">469</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">isValidated</span><span class=\"mtk1\"> &amp;&amp; !</span><span class=\"mtk12\">isCancelled</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">totalFilled</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">totalFilled</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">totalSize</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/seaport/modules/OptimisticListingSeaport.sol\">Link to code</a></p>\n<h2 id=\"g-10-use-unchecked-when-it-is-safe\" style=\"position:relative;\"><a href=\"#g-10-use-unchecked-when-it-is-safe\" aria-label=\"g 10 use unchecked when it is safe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-10] Use unchecked when it is safe</h2>\n<p>For example, those dealing with eth value will basically never overflow:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"83\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">userContributions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">totalContributions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L115-L116\">Link to code</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"84\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">filledQuantities</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">fillAtAnyPriceQuantity</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L128\">Link to code</a></p>\n<p>Also those with explicit check before</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"85\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">lowestBid</span><span class=\"mtk1\">.</span><span class=\"mtk12\">quantity</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L309\">Link to code</a></p>\n<h2 id=\"g-11-refund-contribution-and-pending-balance-in-the-same-call\" style=\"position:relative;\"><a href=\"#g-11-refund-contribution-and-pending-balance-in-the-same-call\" aria-label=\"g 11 refund contribution and pending balance in the same call permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-11] Refund contribution and pending balance in the same call</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"86\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Transfers remaining contribution balance back to caller</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">).</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">contribution</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Withdraws pending balance of caller if available</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">pendingBalances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk11\">withdrawBalance</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L264-L268\">Link to code</a></p>\n<h2 id=\"g-12-generate-merkle-tree-offchain\" style=\"position:relative;\"><a href=\"#g-12-generate-merkle-tree-offchain\" aria-label=\"g 12 generate merkle tree offchain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-12] Generate merkle tree offchain</h2>\n<p>Generate merkle tree onchain is expensive espically when you want to include a large set of value. Consider generating it offchain a publish the root when creating a new pool.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"87\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">merkleRoot</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) ? </span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenIds</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">]) : </span><span class=\"mtk11\">_generateRoot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenIds</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/modules/GroupBuy.sol#L71\">Link to code</a></p>\n<h2 id=\"g-13-pack-bid-struct\" style=\"position:relative;\"><a href=\"#g-13-pack-bid-struct\" aria-label=\"g 13 pack bid struct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-13] Pack Bid Struct</h2>\n<p>The Bid struct can be packed tighter</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"88\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidId</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol#L4-L9\">Link to code</a></p>\n<p>to</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"89\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint96</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidId</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">quantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h2 id=\"g-14-pack-queue-struct\" style=\"position:relative;\"><a href=\"#g-14-pack-queue-struct\" aria-label=\"g 14 pack queue struct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-14] Pack Queue Struct</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"90\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Queue</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">///@notice incrementing bid id</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nextBidId</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">///@notice array backing priority queue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">bidIdList</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">///@notice total number of bids in queue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">numBids</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//@notice map bid ids to bids</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\">) </span><span class=\"mtk12\">bidIdToBidMap</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">///@notice map addreses to bids they own</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[]) </span><span class=\"mtk12\">ownerToBidIds</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-12-tessera/blob/f37a11407da2af844bbfe868e1422e3665a5f8e4/src/lib/MinPriorityQueue.sol#L13-L24\">Link to code</a></p>\n<p>to</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"91\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Queue</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">///@notice incrementing bid id</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint96</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nextBidId</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">///@notice total number of bids in queue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint160</span><span class=\"mtk1\"> </span><span class=\"mtk12\">numBids</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">///@notice array backing priority queue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">bidIdList</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//@notice map bid ids to bids</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Bid</span><span class=\"mtk1\">) </span><span class=\"mtk12\">bidIdToBidMap</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">///@notice map addreses to bids they own</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[]) </span><span class=\"mtk12\">ownerToBidIds</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/21#issuecomment-1359052085\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I like that <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/28\">#28</a> states the amount of gas saved per finding and as a whole. However, this report edges out in gas savings IMO, notably with the struct reorderings + doing merkle proof generation off-chain recommendations.</p>\n<p><em>(Note: See <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/21\">original submission</a> for judge’s full commentary.)</em></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/21#issuecomment-1372587483\">mehtaculous (Tessera) confirmed</a></strong></p>\n<hr>\n<h1 id=\"mitigation-review\" style=\"position:relative;\"><a href=\"#mitigation-review\" aria-label=\"mitigation review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mitigation Review</h1>\n<h2 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>Following the C4 audit contest, 3 wardens (IllIllI, Lambda, and <a href=\"https://twitter.com/gzeon\">gzeon</a>) reviewed the mitigations for all identified issues. Additional details can be found within the <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation\">C4 Tessera Versus Mitigation Review contest repository</a>.</p>\n<h2 id=\"mitigation-review-scope\" style=\"position:relative;\"><a href=\"#mitigation-review-scope\" aria-label=\"mitigation review scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mitigation Review Scope</h2>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>Mitigation of</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/fractional-company/modular-fractional/pull/204\">PR 204</a></td>\n<td>H-01</td>\n<td>Fixed by checking success value of call.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fractional-company/modular-fractional/pull/207\">PR 207</a></td>\n<td>H-02</td>\n<td>Calculate actual minReservePrice after purchase has been made. This is done by simply dividing total filled quantity by the purchase price. This fixes the ETH accounting when the NFT is purchased for less than the minimum reserve price.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fractional-company/modular-fractional/pull/203\">PR 203</a></td>\n<td>H-03</td>\n<td>Updated comparison to use &#x3C;= to avoid edge case for an invalid state.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fractional-company/modular-fractional/pull/202\">PR 202</a></td>\n<td>H-04, H-07</td>\n<td>Updated pendingBalances mapping before setting the newly proposed listing. This way, the balance is updated for the previous proposer and the currently proposed listing can be overridden with the new one.</td>\n</tr>\n<tr>\n<td>Not fixing</td>\n<td>H-05</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fractional-company/modular-fractional/pull/211\">PR 211</a></td>\n<td>H-06</td>\n<td>Solution is to move orderHash to Listing struct so that active and proposed listings can have separate order hashes.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fractional-company/modular-fractional/pull/201\">PR 201</a></td>\n<td>H-08, H-09</td>\n<td>Fixed by moving success state update before call to market buyer.</td>\n</tr>\n<tr>\n<td>Not fixing</td>\n<td>M-01</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>Not fixing</td>\n<td>M-02</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fractional-company/modular-fractional/pull/206\">PR 206</a></td>\n<td>M-03</td>\n<td>If total supply is equal to filled quantities, use min reserved price instead of min price when validating the user contribution. this way, funds will not be stuck until a purchase is made and the user will be able to withdraw their funds right away.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fractional-company/modular-fractional/pull/212\">PR 212</a></td>\n<td>M-04, M-08</td>\n<td>Used &#x3C;= when comparing the new price to the lowest bid price. That way, it can only override the lower bid if price is higher.</td>\n</tr>\n<tr>\n<td>Not fixing</td>\n<td>M-05</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>Not fixing</td>\n<td>M-06</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>Not fixing</td>\n<td>M-07</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/fractional-company/modular-fractional/pull/213\">PR 213</a></td>\n<td>M-09</td>\n<td>Where due to truncation, the stated minimum raised wouldn’t result in actually being able to purchase with the full amount raised. Instead of doing that math we’re going to have the initial purchase by the deployer set the initial target.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"mitigation-review-summary\" style=\"position:relative;\"><a href=\"#mitigation-review-summary\" aria-label=\"mitigation review summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mitigation Review Summary</h2>\n<p>Of the mitigations reviewed, 10 have been confirmed:</p>\n<ul>\n<li>H-01: Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/39\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/20\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/2\">Lambda</a>.</li>\n<li>H-03: Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/41\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/22\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/4\">Lambda</a>.</li>\n<li>H-04: Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/42\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/23\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/5\">Lambda</a>.</li>\n<li>H-06: Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/45\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/25\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/7\">Lambda</a>.</li>\n<li>H-07: Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/46\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/26\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/8\">Lambda</a>.</li>\n<li>H-09: Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/48\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/28\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/10\">Lambda</a>.</li>\n<li>M-03: Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/51\">gzeon</a> and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/13\">Lambda</a>.</li>\n<li>M-04: Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/52\">gzeon</a> and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/14\">Lambda</a>.</li>\n<li>M-08: Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/56\">gzeon</a> and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/18\">Lambda</a>.</li>\n<li>M-09: Mitigation confirmed by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/57\">gzeon</a>, <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/37\">IllIllI</a>, and <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/19\">Lambda</a>.</li>\n</ul>\n<p>The two remaining mitigations have either not been confirmed and/or introduced new issues. See full details below.</p>\n<p><em>(Note: mitigation reviews below are referenced as <code>MR:S-N</code>, <code>MitigationReview:NewIssueSeverity-NewIssueNumber</code>)</em></p>\n<h2 id=\"mrh-01-mitigation-doesnt-take-rounding-issue-into-account\" style=\"position:relative;\"><a href=\"#mrh-01-mitigation-doesnt-take-rounding-issue-into-account\" aria-label=\"mrh 01 mitigation doesnt take rounding issue into account permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/21\">[MR:H-01] Mitigation doesn’t take rounding issue into account</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/21\">IllIllI</a>, also found by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/40\">gzeon</a>.</em></p>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/blob/fc15c85069d8d55cfe840d4c313754c77f18979f/src/modules/GroupBuy.sol#L198-L199\">https://github.com/fractional-company/modular-fractional/blob/fc15c85069d8d55cfe840d4c313754c77f18979f/src/modules/GroupBuy.sol#L198-L199</a></p>\n<h3 id=\"vulnerability-details-1\" style=\"position:relative;\"><a href=\"#vulnerability-details-1\" aria-label=\"vulnerability details 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vulnerability details</h3>\n<p>The <a href=\"https://github.com/fractional-company/modular-fractional/pull/207\">PR</a> applies the recommended mitigation from the <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/7\">original finding (H-02)</a>, but doesn’t take into account the rounding issue identified in <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/49\">M-09</a> </p>\n<h3 id=\"impact-13\" style=\"position:relative;\"><a href=\"#impact-13\" aria-label=\"impact 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>If the price the NFT is bought for is not an exact multiple of the <code>filledQuantities</code>, there will be a loss of precision, and during the <a href=\"https://github.com/fractional-company/modular-fractional/blob/fc15c85069d8d55cfe840d4c313754c77f18979f/src/modules/GroupBuy.sol#L260\">calculation</a> of refunds, each user will get back more than they should, which will leave the last user with not enough funds to withdraw. It is much more likely for the price <em>not</em> to be an exact multiple than it is for it to be one, so most <code>GroupBuy</code>s will have this issue.</p>\n<h3 id=\"proof-of-concept-15\" style=\"position:relative;\"><a href=\"#proof-of-concept-15\" aria-label=\"proof of concept 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The division will have a loss of precision:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"92\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Calculates actual min reserve price based on purchase price</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">minReservePrices</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_poolId</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">_price</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">filledQuantity</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/blob/fc15c85069d8d55cfe840d4c313754c77f18979f/src/modules/GroupBuy.sol#L198-L199\">https://github.com/fractional-company/modular-fractional/blob/fc15c85069d8d55cfe840d4c313754c77f18979f/src/modules/GroupBuy.sol#L198-L199</a></p>\n<p>And the <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/49#issuecomment-1358963067\">same example</a> the judge used in finding M-9 would still apply.</p>\n<h3 id=\"recommended-mitigation-steps-18\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-18\" aria-label=\"recommended mitigation steps 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Decrease the total number of Raes if the price is not a multiple of the current total, so that it becomes a multiple.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/21\">stevennevins (Tessera) acknowledged</a></strong></p>\n<hr>\n<h2 id=\"mrh-02-attacker-can-steal-the-nft-bought-by-sending-it-to-another-vault-he-controls\" style=\"position:relative;\"><a href=\"#mrh-02-attacker-can-steal-the-nft-bought-by-sending-it-to-another-vault-he-controls\" aria-label=\"mrh 02 attacker can steal the nft bought by sending it to another vault he controls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/47\">[MR:H-02] Attacker can steal the NFT bought by sending it to another vault he controls</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/47\">gzeon</a>.</em></p>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/blob/d0974eef922c3087ed9c1b8d758fe66307734c23/src/modules/GroupBuy.sol#L214\">https://github.com/fractional-company/modular-fractional/blob/d0974eef922c3087ed9c1b8d758fe66307734c23/src/modules/GroupBuy.sol#L214</a></p>\n<h3 id=\"impact-14\" style=\"position:relative;\"><a href=\"#impact-14\" aria-label=\"impact 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The mitigation of <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/47\">H-08</a> tries to validate the vault returned by _market with the VaultRegistry. However, it’s only validated if the vault exists, but not if it is the correct vault. A similar attack described in <a href=\"https://github.com/code-423n4/2022-12-tessera-findings/issues/47\">https://github.com/code-423n4/2022-12-tessera-findings/issues/47</a> can be carried out by using a valid vault address that is permissionlessly deployed with VaultRegistry.createFor but have the owner set to the attacker.</p>\n<h3 id=\"proof-of-concept-16\" style=\"position:relative;\"><a href=\"#proof-of-concept-16\" aria-label=\"proof of concept 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/blob/d0974eef922c3087ed9c1b8d758fe66307734c23/src/modules/GroupBuy.sol#L214-L215\">https://github.com/fractional-company/modular-fractional/blob/d0974eef922c3087ed9c1b8d758fe66307734c23/src/modules/GroupBuy.sol#L214-L215</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"93\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">IVaultRegistry</span><span class=\"mtk1\">(</span><span class=\"mtk12\">registry</span><span class=\"mtk1\">).</span><span class=\"mtk11\">vaultToToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">id</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NotVault</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<ol>\n<li>Group assembles and raises funds to buy NFT X</li>\n<li>Attacker deploy a valid vault using VaultRegistry.createFor but setting himself as the owner, with a merkle root that enable NFT transfer</li>\n<li>Attacker calls purchase() and supplies their malicious contract in _market, returning the vault generated above</li>\n<li>Attacker call Vault.execute in the vault to retrieve the NFT to his own wallet</li>\n<li>Attacker receives the NFT bought by the raised funds with 0 cost except gas</li>\n</ol>\n<p><a href=\"https://github.com/fractional-company/modular-fractional/blob/9411afcd03d457192adc2bc59b3b378aeddd5865/src/Vault.sol#L36\">https://github.com/fractional-company/modular-fractional/blob/9411afcd03d457192adc2bc59b3b378aeddd5865/src/Vault.sol#L36</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"94\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_target</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_proof</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">response</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">selector</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">assembly</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            selector := </span><span class=\"mtk11\">calldataload</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">offset</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Generate leaf node by hashing module, target and function selector.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">leaf</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_target</span><span class=\"mtk1\">, </span><span class=\"mtk12\">selector</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Check that the caller is either a module with permission to call or the owner.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">MerkleProof</span><span class=\"mtk1\">.</span><span class=\"mtk11\">verify</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_proof</span><span class=\"mtk1\">, </span><span class=\"mtk11\">MERKLE_ROOT</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">leaf</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">FACTORY</span><span class=\"mtk1\">() &amp;&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">OWNER</span><span class=\"mtk1\">())</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NotAuthorized</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_target</span><span class=\"mtk1\">, </span><span class=\"mtk12\">selector</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">response</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">_execute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_target</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-19\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-19\" aria-label=\"recommended mitigation steps 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Also check the owner of the vault.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/47#issuecomment-1413836406\">HickupHH3 (judge) commented</a>:</strong></p>\n<blockquote>\n<p>It’s clear to me that the vault should be the owner of the NFT. The question I have is, who should be the owner of the vault? Multisig? What address should be considered to be the rightful owner?</p>\n<blockquote>\n<p>Once the purchase is executed, a new vault gets deployed with the proper permissions, the NFT then gets transferred to the vault, and ownership of the NFT by the vault is verified.</p>\n</blockquote>\n<p>Based on this, given that the market is still a user supplied param, a valid vault can be deployed, but it belongs to an arbitrary owner.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-01-tessera-mitigation-findings/issues/47\">stevennevins (Tessera) acknowledged</a></strong></p>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-9\">High Risk Findings (9)</a></p>\n<ul>\n<li><a href=\"#h-01-groupbuy-does-not-check-return-value-of-call\">[H-01] GroupBuy does not check return value of call</a></li>\n<li><a href=\"#h-02-groupbuy-lost-eth-when-the-nft-is-bought-for-less-than-the-minimum-reserve-price\">[H-02] GroupBuy: Lost ETH when the NFT is bought for less than the minimum reserve price</a></li>\n<li><a href=\"#h-03-groupbuy_verifyunsuccessfulstate-and-_verifysuccessfulstate-both-can-return-true-when-blocktimestamp--poolterminationperiod\">[H-03] Groupbuy:<code>_verifyUnsuccessfulState</code> and <code>_verifySuccessfulState</code> both can return true when block.timestamp == pool.terminationPeriod</a></li>\n<li><a href=\"#h-04-optimisticlistingseaportpropose-sets-pendingbalances-of-newly-added-proposer-instead-of-previous-one\">[H-04] OptimisticListingSeaport.propose sets pendingBalances of newly added proposer instead of previous one</a></li>\n<li><a href=\"#h-05-attacker-can-dos-optimisticlisting-with-very-low-cost\">[H-05] Attacker can DOS OptimisticListing with very low cost</a></li>\n<li><a href=\"#h-06-funds-are-permanently-stuck-in-optimisticlistingseaportsol-contract-if-active-proposal-is-executed-after-new-proposal-is-pending\">[H-06] Funds are permanently stuck in OptimisticListingSeaport.sol contract if active proposal is executed after new proposal is pending.</a></li>\n<li><a href=\"#h-07-user-loses-collateral-converted-to-pendingbalance-when-cash-or-list-is-called\">[H-07] User loses collateral converted to pendingBalance when <code>cash()</code> or <code>list()</code> is called</a></li>\n<li><a href=\"#h-08-attacker-can-steal-the-amount-collected-so-far-in-the-groupbuy-for-nft-purchase\">[H-08] Attacker can steal the amount collected so far in the GroupBuy for NFT purchase.</a></li>\n<li><a href=\"#h-09-groupbuy-can-be-drained-of-all-eth\">[H-09] GroupBuy can be drained of all ETH.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-9\">Medium Risk Findings (9)</a></p>\n<ul>\n<li><a href=\"#m-01-groupbuy-may-purchase-nft-not-in-the-allowed-list\">[M-01] GroupBuy may purchase NFT not in the allowed list</a></li>\n<li><a href=\"#m-02-attacker-can-delay-proposal-rejection\">[M-02] Attacker can delay proposal rejection</a></li>\n<li><a href=\"#m-03-users-that-send-funds-at-a-price-lower-than-the-current-low-bid-have-the-funds-locked\">[M-03] Users that send funds at a price lower than the current low bid have the funds locked</a></li>\n<li><a href=\"#m-04-priority-queue-min-accounting-breaks-when-nodes-are-split-in-two\">[M-04] Priority queue min accounting breaks when nodes are split in two</a></li>\n<li><a href=\"#m-05-orders-may-not-be-fillable-due-to-missing-approvals\">[M-05] Orders may not be fillable due to missing approvals</a></li>\n<li><a href=\"#m-06-only-one-groupbuy-can-ever-use-usdt-or-similar-tokens-with-front-running-approval-protections\">[M-06] Only one <code>GroupBuy</code> can ever use USDT or similar tokens with front-running approval protections</a></li>\n<li><a href=\"#m-07-loss-of-eth-for-proposer-when-it-is-a-contract-that-doesnt-have-fallback-function\">[M-07] Loss of ETH for proposer when it is a contract that doesn’t have fallback function.</a></li>\n<li><a href=\"#m-08--earlier-bidders-get-cut-out-of-future-nft-holdings-by-bidders-specifying-the-same-price\">[M-08]  Earlier bidders get cut out of future NFT holdings by bidders specifying the same price.</a></li>\n<li><a href=\"#m-09-groupbuys-that-are-completely-filled-still-dont-raise-stated-target-amount\">[M-09] GroupBuys that are completely filled still don’t raise stated target amount</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#low-risk-issues-summary\">Low Risk Issues Summary</a></li>\n<li><a href=\"#l01--bid-size-is-an-unfair-ordering-metric\">L‑01  Bid size is an unfair ordering metric</a></li>\n<li><a href=\"#l02--users-may-dos-themselves-with-a-lot-of-smalle-payments\">L‑02  Users may DOS themselves with a lot of smalle payments</a></li>\n<li><a href=\"#l03--empty-receivepayable-fallback-function-does-not-authorize-requests\">L‑03  Empty <code>receive()</code>/<code>payable fallback()</code> function does not authorize requests</a></li>\n<li><a href=\"#l04--require-should-be-used-instead-of-assert\">L‑04  <code>require()</code> should be used instead of <code>assert()</code></a></li>\n<li><a href=\"#l05--missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\">L‑05  Missing checks for <code>address(0x0)</code> when assigning values to <code>address</code> state variables</a></li>\n<li><a href=\"#non-critical-issues-summary\">Non-Critical Issues Summary</a></li>\n<li><a href=\"#n01--debugging-functions-should-be-moved-to-a-child-class-rather-than-being-deployed\">N‑01  Debugging functions should be moved to a child class rather than being deployed</a></li>\n<li><a href=\"#n02--typos\">N‑02  Typos</a></li>\n<li><a href=\"#n03--public-functions-not-called-by-the-contract-should-be-declared-external-instead\">N‑03  <code>public</code> functions not called by the contract should be declared <code>external</code> instead</a></li>\n<li><a href=\"#n04--constants-should-be-defined-rather-than-using-magic-numbers\">N‑04  <code>constant</code>s should be defined rather than using magic numbers</a></li>\n<li><a href=\"#n05--missing-event-and-or-timelock-for-critical-parameter-change\">N‑05  Missing event and or timelock for critical parameter change</a></li>\n<li><a href=\"#n06--natspec-is-incomplete\">N‑06  NatSpec is incomplete</a></li>\n<li><a href=\"#n07--consider-using-delete-rather-than-assigning-zero-to-clear-values\">N‑07  Consider using <code>delete</code> rather than assigning zero to clear values</a></li>\n<li><a href=\"#n08--contracts-should-have-full-test-coverage\">N‑08  Contracts should have full test coverage</a></li>\n<li><a href=\"#n09--large-or-complicated-code-bases-should-implement-fuzzing-tests\">N‑09  Large or complicated code bases should implement fuzzing tests</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#gas-optimizations-summary\">Gas Optimizations Summary</a></li>\n<li><a href=\"#g-01-use-assembly-to-check-for-address0\">G-01 Use assembly to check for <code>address(0)</code></a></li>\n<li><a href=\"#g-02-cache-array-length-outside-of-loop\">G-02 Cache array length outside of loop</a></li>\n<li><a href=\"#g-03-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\">G-03 State variables should be cached in stack variables rather than re-reading them from storage</a></li>\n<li><a href=\"#g-04-use-calldata-instead-of-memory-for-function-arguments-that-do-not-get-mutated\">G-04 Use calldata instead of memory for function arguments that do not get mutated</a></li>\n<li><a href=\"#g-05-use-custom-errors\">G-05 Use Custom Errors</a></li>\n<li><a href=\"#g-06-dont-initialize-variables-with-default-value\">G-06 Don’t initialize variables with default value</a></li>\n<li><a href=\"#g-07-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\">G-07 <code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</a></li>\n<li><a href=\"#g-08-use-shift-rightleft-instead-of-divisionmultiplication-if-possible\">G-08 Use shift Right/Left instead of division/multiplication if possible</a></li>\n<li><a href=\"#g-09-use--0-instead-of--0-for-unsigned-integer-comparison\">G-09 Use != 0 instead of > 0 for unsigned integer comparison</a></li>\n<li><a href=\"#g-10-use-unchecked-when-it-is-safe\">G-10 Use unchecked when it is safe</a></li>\n<li><a href=\"#g-11-refund-contribution-and-pending-balance-in-the-same-call\">G-11 Refund contribution and pending balance in the same call</a></li>\n<li><a href=\"#g-12-generate-merkle-tree-offchain\">G-12 Generate merkle tree offchain</a></li>\n<li><a href=\"#g-13-pack-bid-struct\">G-13 Pack Bid Struct</a></li>\n<li><a href=\"#g-14-pack-queue-struct\">G-14 Pack Queue Struct</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mitigation-review\">Mitigation Review</a></p>\n<ul>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#mitigation-review-scope\">Mitigation Review Scope</a></li>\n<li><a href=\"#mitigation-review-summary\">Mitigation Review Summary</a></li>\n<li><a href=\"#mrh-01-mitigation-doesnt-take-rounding-issue-into-account\">[MR:H-01] Mitigation doesn’t take rounding issue into account</a></li>\n<li><a href=\"#mrh-02-attacker-can-steal-the-nft-bought-by-sending-it-to-another-vault-he-controls\">[MR:H-02] Attacker can steal the NFT bought by sending it to another vault he controls</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}