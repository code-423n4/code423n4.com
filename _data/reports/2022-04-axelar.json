{
  "circa": {
    "title": "Axelar Network contest",
    "sponsor": "Axelar Network",
    "slug": "2022-04-axelar",
    "date": "2022-06-29",
    "findings": "https://github.com/code-423n4/2022-04-axelar-findings/issues",
    "contest": 109
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Axelar Network smart contract system written in Solidity. The audit contest took place between April 7—April 11 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>24 Wardens contributed reports to the Axelar Network contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/CertoraInc\">CertoraInc</a> (<a href=\"https://twitter.com/danbinnun\">danb</a>, egjlmn1, <a href=\"https://twitter.com/ori_dabush\">OriDabush</a>, ItayG, and shakedwinder)</li>\n<li><a href=\"https://chom.dev\">Chom</a></li>\n<li><a href=\"http://seanseefried.org/blog\">sseefried</a></li>\n<li><a href=\"https://twitter.com/rayn731\">rayn</a></li>\n<li>cccz</li>\n<li>IllIllI</li>\n<li>ilan</li>\n<li><a href=\"https://twitter.com/JustDravee\">Dravee</a></li>\n<li><a href=\"https://instagram.com/vanensurya\">Funen</a></li>\n<li>dirk_y</li>\n<li>delfin454000</li>\n<li>rishabh</li>\n<li>0xkatana</li>\n<li><a href=\"https://twitter.com/0xNazgul\">0xNazgul</a></li>\n<li><a href=\"https://www.instagram.com/riyan_rfa/\">rfa</a></li>\n<li><a href=\"https://twitter.com/meidhiwirara\">Tomio</a></li>\n<li><a href=\"https://twitter.com/_0v3rf10w\">0v3rf10w</a></li>\n<li>Hawkeye (0xwags and 0xmint)</li>\n<li>nahnah</li>\n</ol>\n<p>This contest was judged by <a href=\"https://github.com/0xean\">0xean</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 5 unique vulnerabilities. Of these vulnerabilities, 1 received a risk rating in the category of HIGH severity and 4 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 10 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 14 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-04-axelar\">C4 Axelar Network contest repository</a>, and is composed of 19 smart contracts written in the Solidity programming language and includes 1,605 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-1\" style=\"position:relative;\"><a href=\"#high-risk-findings-1\" aria-label=\"high risk findings 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (1)</h1>\n<h2 id=\"h-01-cross-chain-smart-contract-calls-can-revert-but-source-chain-tokens-remain-burnt-and-are-not-refunded\" style=\"position:relative;\"><a href=\"#h-01-cross-chain-smart-contract-calls-can-revert-but-source-chain-tokens-remain-burnt-and-are-not-refunded\" aria-label=\"h 01 cross chain smart contract calls can revert but source chain tokens remain burnt and are not refunded permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/35\">[H-01] Cross-chain smart contract calls can revert but source chain tokens remain burnt and are not refunded</a></h2>\n<p><em>Submitted by sseefried, also found by Chom</em></p>\n<p>Smart contract calls often revert. In such cases any ether sent along with the transaction is returned and sometimes the remaining gas (depending on whether an <code>assert</code> caused the reversion or not).</p>\n<p>For contracts involving ERC20 tokens it is also expected that, should a contract call fail, one’s tokens are not lost/transferred elsewhere.</p>\n<p>The <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L98-L115\">callContractWithToken</a> function does not appear to take contract call failure on the destination chain into account, even though this could be quite a common occurrence.</p>\n<p>Tokens are burned on <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L105\">line 105</a> but there is no mechanism in the code base to return these burned tokens in the case that the contract call fails on the destination chain.</p>\n<p>The impact is that users of the Axelar Network can lose funds.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>I have put together an executable Proof of Concept in a fork of the repo.\nFile <a href=\"https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L127\">DestinationChainContractCallFails.js</a> implements a test that attempts to call a token swap function on the destination chain. The <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/test/TokenSwapper.sol#L16-L33\">swap</a> function was provided as part of the competition repo. Given a certain amount of token A it returns twice as much of token B.</p>\n<p>In the test I have provided the contract call on the destination chain fails because there is simply not enough of token B in the <code>TokenSwapper</code> contract to transfer to the user. This might be rare in practice — since adequate liquidity would generally be provided by the contract — but cross-chain contract calls are unlikely to be limited to token swaps only! I specifically chose this example to show that cross-chain contract calls can fail <em>even in the cases that Axelar have already considered</em> in their test suite.</p>\n<p>In the <a href=\"https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L129\">unit test</a> you will find:</p>\n<ul>\n<li>Lines of note have been prefixed with <code>sseefried:</code></li>\n<li>The test is a little strange in that it <em>succeeds</em> because it expects a <code>revert</code>. This happens on <a href=\"https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L380\">line 380</a></li>\n<li>I took the liberty of modifying the <code>TokenSwapper</code> contract slightly <a href=\"https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/src/test/TokenSwapper.sol#L37\">here</a>, in order to show that the contract call reverts because of a lack of token B.</li>\n<li>The amount of token A on <a href=\"https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L201\">line 201</a> can be modified to be a smaller value. Doing so, and re-running the test, will result in a <em>test failure</em> which means that the contract call did <em>not</em> revert i.e. the contract call on the destination chain succeeded. This shows that, before the change, the revert was due to a lack of token B in the <code>TokenSwapper</code> contract.</li>\n<li><a href=\"https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L388-L389\">Lines 388-389</a> show that, in the case of a revert on the destination chain, the tokens remain burnt on the source chain.</li>\n</ul>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>When making a credit card purchase it is common for transactions to remain in a “pending” state until eventually finalised. Often one’s <em>available</em> bank balance will decrease the moment the purchase has been approved. Then one of\ntwo things happens:</p>\n<ul>\n<li>the transaction is finalised and the balance becomes the same as the available balance</li>\n<li>the transaction fails and the amount is refunded</li>\n</ul>\n<p>I suggest a similar design for cross-chain contract calls, with one major difference: the token should still be burned on the source chain but it should be re-minted and refunded in case of a contract call failure on the destination chain. The steps would be roughly this:</p>\n<ul>\n<li>User calls <code>AxelarGateway.callContractWithToken()</code> and tokens are burned</li>\n<li>Steps 3 - 8 from the <a href=\"https://code4rena.com/contests/2022-04-axelar-network-contest#cross-chain-smart-contract-call\">competition page</a> occur as normal.</li>\n<li>However, the call to <code>executeWithToken</code> in step 8 now fails. This is monitored by the Axelar Network and a new event e.g. <code>ContractCalledFailed</code> is emitted on the <em>destination chain</em>.</li>\n<li>One the <em>source chain</em> the Axelar Network emits a new event e.g. <code>ContractCallFailedWithRefund</code>. This causes a re-minting of the tokens and a refund to the user to occur. The event should also be observable by the user. It should contain a reason for the contract call failure so that they are informed as to why it failed</li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/35#issuecomment-1103612251\">deluca-mike (Axelar) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>In this situation, the validators can still mint/transfer the user back their tokens on the source chain, so there is no real loss. There does lack an “official” way to alert the validators of this, but it can be handled entirely by off-chain micro-services and whatnot. In the future, as ERC20 transfers are pushed out of the contract as handled as separate application on top of the generic cross-chain calls, a mechanism can be implemented to send a message back to the source chain to release/mint the tokens back to the user.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/35#issuecomment-1107532494\">0xean (judge) increased severity to High and commented</a>:</strong></p>\n<blockquote>\n<p>Upgrading this issue from Medium to High Severity </p>\n<p><code>3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).</code></p>\n<p>While the sponsor does mention there is a possible way that this could be handled in the future, currently this risk exists in the system today and doesn’t have a proper or official mitigation in place.</p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-4\" style=\"position:relative;\"><a href=\"#medium-risk-findings-4\" aria-label=\"medium risk findings 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (4)</h1>\n<h2 id=\"m-01-low-level-call-returns-true-if-the-address-doesnt-exist\" style=\"position:relative;\"><a href=\"#m-01-low-level-call-returns-true-if-the-address-doesnt-exist\" aria-label=\"m 01 low level call returns true if the address doesnt exist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/11\">[M-01] Low level call returns true if the address doesn’t exist</a></h2>\n<p><em>Submitted by CertoraInc</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L545-L548\">AxelarGateway.sol#L545-L548</a><br>\n<a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L16-L24\">AxelarGatewayProxy.sol#L16-L24</a><br></p>\n<p>As written in the <a href=\"https://docs.soliditylang.org/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions\">solidity documentation</a>, the low-level functions call, delegatecall and staticcall return true as their first return value if the account called is non-existent, as part of the design of the EVM. Account existence must be checked prior to calling if needed.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The low-level functions <code>call</code> and <code>delegatecall</code> are used in some places in the code and it can be problematic. For example, in the <code>_callERC20Token</code> of the <code>AxelarGateway</code> contract there is a low level call in order to call the ERC20 functions, but if the given <code>tokenAddress</code> doesn’t exist <code>success</code> will be equal to true and the function will return true and the code execution will be continued like the call was successful.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"sol\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_callERC20Token</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">callData</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">returnData</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">.</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">callData</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\"> &amp;&amp; (</span><span class=\"mtk12\">returnData</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) || </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">returnData</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Another place that this can happen is in <code>AxelarGatewayProxy</code>’s constructor</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"sol\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gatewayImplementation</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_setAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">KEY_IMPLEMENTATION</span><span class=\"mtk1\">, </span><span class=\"mtk12\">gatewayImplementation</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">gatewayImplementation</span><span class=\"mtk1\">.</span><span class=\"mtk11\">delegatecall</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IAxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">setup</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">params</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">success</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">SetupFailed</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>If the <code>gatewayImplementation</code> address doesn’t exist, the delegate call will return true and the function won’t revert.</p>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Remix, VS Code</p>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Check before any low-level call that the address actually exists, for example before the low level call in the callERC20 function you can check that the address is a contract by checking its code size.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/11#issuecomment-1098564878\">deluca-mike (Axelar) confirmed, but disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p><code>_callERC20Token</code> is only called with a token address that has been set and was already validated by the gateway, and thus they do already exist.</p>\n<p>See:</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L291\">AxelarGateway.sol#L291</a><br></li>\n<li><a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L379\">AxelarGateway.sol#L379</a><br></li>\n</ul>\n<p>As for <code>gatewayImplementation.delegatecall</code>, this is a valid find, but there isn’t much risk because it would just mean that the gateway deployed would be a dud, and it would need to be redeployed correctly before the Axelar network can start interacting with it. In any case, we will fix this by checking that there is code at that address.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/11#issuecomment-1107536846\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p><code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n<p>Given that this <em>would</em> affect the protocols availability (the gateway being a  “dud”) the finding does qualify as med risk.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-users-funds-can-get-lost-when-transferring-to-other-chain\" style=\"position:relative;\"><a href=\"#m-02-users-funds-can-get-lost-when-transferring-to-other-chain\" aria-label=\"m 02 users funds can get lost when transferring to other chain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/12\">[M-02] User’s funds can get lost when transferring to other chain</a></h2>\n<p><em>Submitted by CertoraInc</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L384-L389\">AxelarGateway.sol#L384-L389</a><br></p>\n<p>When transferring tokens to other chain, the tokens in the source chain are burned - if they are external they will be transferred to the AxelarGateway, otherwise they will be burned. In the target chain the same amount of tokens will be minted for the user - if it is external it will be transferred to him from the AxelarGateway, otherwise it will be minted to him.<br>\nBut there is a problem - if the AxelarGateway doesn’t have the needed amount of token for some reason, the <code>_callERC20Token</code> with the <code>transfer</code> function selector will fail and return false, which will make the <code>_mintToken</code> function revert. Because it reverted, the user won’t get his funds on the destination chain, although he payed the needed amount in the source chain.</p>\n<h3 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VS Code and Remix</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Instead of reverting when the transfer is not successful, simply call the <code>callContractWithToken</code> with the source chain as the destination chain in order to return the user his funds.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/12#issuecomment-1098570273\">deluca-mike (Axelar) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>While true, the only way the destination gateway cannot mint or transfer token, in response to a burn or transferFrom on the source chain, is foul play on the validators’ part. Once we assume foul play, then really there is no protection here, since even with the recommended mitigation steps, you’d still need cooperation from the validators to sign the mint/transfer refund command for the source gateway.</p>\n<p>Because of this, while the issue is acknowledged, it’s not really something that can be solved.</p>\n<p>Further, well-behaving validators can still sign a refund mint/transfer for the source gateway if they see that a mint/transfer on the destination gateway failed, without needing to do what is suggested in the Recommended Mitigation Steps.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-_execute-can-potentially-reorder-a-batch-of-commands-while-executing-breaking-any-assumptions-on-command-orders\" style=\"position:relative;\"><a href=\"#m-03-_execute-can-potentially-reorder-a-batch-of-commands-while-executing-breaking-any-assumptions-on-command-orders\" aria-label=\"m 03 _execute can potentially reorder a batch of commands while executing breaking any assumptions on command orders permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/17\">[M-03] <code>_execute</code> can potentially reorder a batch of commands while executing, breaking any assumptions on command orders.</a></h2>\n<p><em>Submitted by rayn</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L484\">AxelarGatewayMultisig.sol#L484</a><br>\n<a href=\"https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L490\">AxelarGatewayMultisig.sol#L490</a><br>\n<a href=\"https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L529\">AxelarGatewayMultisig.sol#L529</a><br></p>\n<p>Since this is important, we quote it again instead of referring to our other bug report on a different, yet related bug. The context within which a command is executed is extremely important.</p>\n<blockquote>\n<p>AxelarGatewayMultisig.execute() takes a signed batch of commands. Each command has a corresponding commandID. This is guaranteed to be unique from the Axelar network. execute intentionally allows retrying a commandID if the command failed to be processed; this is because commands are state dependent, and someone might submit command 2 before command 1 causing it to fail.</p>\n</blockquote>\n<p>Thus if an attacker manages to rearrange execution order of commands within a batch, it should probably be treated seriously. This is exactly what might happen here due to reentrancy. A malicious player that managed to gain reentrancy over execute can easily execute later commands in a batch before earlier commands are fully executed, effectively breaking all assumptions on command executed context.</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <code>_execute</code> function and its wrapper <code>execute</code> are both reentrant.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function execute(bytes calldata input) external override;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _execute(bytes memory data, bytes[] memory signatures) internal;</span></span></code></pre>\n<p>Thus if an attacker manages to reenter the <code>_execute</code> function with the same batch of commands and signatures, previously successfully executed and ongoing commands will be skipped due to premature marking of the success flag.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (isCommandExecuted(commandId)) continue; /* Ignore if duplicate commandId received */</span></span></code></pre>\n<p>This allows later commands to be executed before the current ongoing command is finished. The reentrant attack can be nested to perform further reordering of commands.</p>\n<p>Generally speaking, other unrelated batches of signed commands can only be executed, but since the assumption of ordering is most likely stronger within a single batch, we focus on illustrating the single batch scenario above.</p>\n<h3 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>vim, ganache-cli</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Make execute nonReentrant</p>\n<p>Add an ever increasing nonce to signatures to prevent replay</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function execute(bytes calldata input) nonReentrant external override {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/17#issuecomment-1103782975\">deluca-mike (Axelar) acknowledged, but disagreed with High severity and commented</a>:</strong></p>\n<blockquote>\n<p>Axelar and the gateways make no concrete guarantees about command execution order, so the idea of “reordering” is moot. Currently, the only commands that call out are:</p>\n<ul>\n<li>deploy a token (so its order is irrelevant)</li>\n<li>minting a token (and thus a call to the token contract will not re-enter, since it is either one the gateway deployed, or the gateway onboarded a malicious external ERC2, which still has no effect on the other tokens)</li>\n<li>burn a token (same as above)</li>\n</ul>\n<p>As with the other issue, while we do acknowledge that the contestant has correctly pointed out how the gateway handles (and can re-handle) commands, this is a low-risk (or no-risk) issue, since no actual risk has been demonstrated apart from “maybe, somehow, possibly, it could be abused”. We’d need at least some feasible and concrete hypothetical or example.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/17#issuecomment-1107615612\">0xean (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>I am going to side with the warden on this but downgrade to medium severity.  The transaction ordering is not the high risk issue, but the ability for re-entrancy and thus replay presents a risk that should be mitigated. </p>\n<p>Looking at other recent hacks ( for example - <a href=\"https://rekt.news/agave-hundred-rekt/\">https://rekt.news/agave-hundred-rekt/</a> ), new environments pose new risks for re-entrancy to appear and with the point of this protocol being to extend across many chains, added additional measures to avoid re-entrancy and the replay that could occur as a result seems like a very logical choice.<br>\n<code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-unsupported-fee-on-transfer-tokens\" style=\"position:relative;\"><a href=\"#m-04-unsupported-fee-on-transfer-tokens\" aria-label=\"m 04 unsupported fee on transfer tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/5\">[M-04] Unsupported fee-on-transfer tokens</a></h2>\n<p><em>Submitted by cccz</em></p>\n<p>When tokenAddress is fee-on-transfer tokens, in the _burnTokenFrom function, the actual amount of tokens received by the contract will be less than the amount.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L284-L334\">AxelarGateway.sol#L284-L334</a><br></p>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider getting the received amount by calculating the difference of token balance (using balanceOf) before and after the transferFrom.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/5#issuecomment-1098474999\">deluca-mike (Axelar) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Valid for <code>TokenType.External</code>, since it is a token implementation that is not ours, and thus could actually transfer us less than expected due to fees.</p>\n<p>Keep in mind that, in the case of a malicious token contract, it could also lie about the <code>balanceOf</code>.</p>\n<p>In any case, if and when we wanted to accept fee-on-transfer tokens in the gateway, we <em>might</em> need to implement the recommended mitigation steps; however, it is not that simple because the is not link (on-chain) here that ensure the amount the gateway burns to be equal to the amount the gateway/validators mint elsewhere. Knowing the actual amount burned is not critical to the source gateway, but rather to the validators that will need to create the mint command elsewhere.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 10 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/38\">report highlighted below</a> by <strong>IllIllI</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/20\">rayn</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/34\">ilan</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/10\">CertoraInc</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/18\">dirk_y</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/4\">delfin454000</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/6\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/30\">Funen</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/15\">Dravee</a>, and <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/3\">rishabh</a>.</em></p>\n<h2 id=\"l-01-cross-chain-replay-attacks\" style=\"position:relative;\"><a href=\"#l-01-cross-chain-replay-attacks\" aria-label=\"l 01 cross chain replay attacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-01] Cross-chain replay attacks</h2>\n<p>Storing the <code>block.chainid</code> is not safe. See <a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/2\">this</a> issue from a prior contest for details.</p>\n<ol>\n<li>File: src/ERC20Permit.sol (lines <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ERC20Permit.sol#L23-L28\">23-28</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">DOMAIN_SEPARATOR</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">DOMAIN_TYPE_SIGNATURE_HASH</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">name</span><span class=\"mtk1\">)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;1&#39;</span><span class=\"mtk1\">)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">chainid</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<h2 id=\"l-02-incorrect-eip-2612-deadline-check\" style=\"position:relative;\"><a href=\"#l-02-incorrect-eip-2612-deadline-check\" aria-label=\"l 02 incorrect eip 2612 deadline check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-02] Incorrect EIP-2612 deadline check</h2>\n<blockquote>\n<p>allow <code>transferFrom</code> to occur while <code>expiry >= block.timestamp</code>.</p>\n</blockquote>\n<p><a href=\"https://github.com/ethereum/EIPs/blob/1473025f064929bfab405eb00b8cd16dd741f269/EIPS/eip-2612.md?plain=1#L172\">https://github.com/ethereum/EIPs/blob/1473025f064929bfab405eb00b8cd16dd741f269/EIPS/eip-2612.md?plain=1#L172</a><br>\nThe current code should change to use <code>&#x3C;=</code></p>\n<ol>\n<li>File: src/ERC20Permit.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ERC20Permit.sol#L43\">43</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">deadline</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;EXPIRED&#39;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"l-03-missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\" style=\"position:relative;\"><a href=\"#l-03-missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\" aria-label=\"l 03 missing checks for address0x0 when assigning values to address state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-03] Missing checks for <code>address(0x0)</code> when assigning values to <code>address</code> state variables</h2>\n<ol>\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L67\">67</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">TOKEN_DEPLOYER_IMPLEMENTATION</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tokenDeployerImplementation</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"l-04-open-todos\" style=\"position:relative;\"><a href=\"#l-04-open-todos\" aria-label=\"l 04 open todos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-04] Open TODOs</h2>\n<p>Code architecture, incentives, and error handling/reporting questions/issues should be resolved before deployment</p>\n<ol>\n<li>File: src/MintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L30\">30</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// TODO move burnFrom into a separate BurnableERC20 contract</span></span></span></code></pre>\n<h2 id=\"l-05-missing-contract-existence-checks-before-low-level-calls\" style=\"position:relative;\"><a href=\"#l-05-missing-contract-existence-checks-before-low-level-calls\" aria-label=\"l 05 missing contract existence checks before low level calls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-05] Missing contract-existence checks before low-level calls</h2>\n<p>Low-level calls return success if there is no code present at the specified address. In addition to the zero-address checks, add a check to verify that <code>&#x3C;address>.code.length > 0</code></p>\n<ol>\n<li>File: src/AxelarGateway.sol (lines <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L398-L415\">398-415</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TokenDoesNotExist</span><span class=\"mtk1\">(</span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">_getTokenType</span><span class=\"mtk1\">(</span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">TokenType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">External</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_checkTokenStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">DepositHandler</span><span class=\"mtk1\"> </span><span class=\"mtk12\">depositHandler</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">DepositHandler</span><span class=\"mtk1\">{ </span><span class=\"mtk12\">salt</span><span class=\"mtk1\">: </span><span class=\"mtk10\">salt</span><span class=\"mtk1\"> }();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">returnData</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">depositHandler</span><span class=\"mtk1\">.</span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">transfer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">depositHandler</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">success</span><span class=\"mtk1\"> || (</span><span class=\"mtk12\">returnData</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) &amp;&amp; !</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">returnData</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">))))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">BurnFailed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/AxelarGatewayProxy.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L19\">19</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">gatewayImplementation</span><span class=\"mtk1\">.</span><span class=\"mtk11\">delegatecall</span><span class=\"mtk1\">(</span></span></span></code></pre>\n<ol start=\"3\">\n<li>File: src/AxelarGatewayProxy.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L34\">34</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> := </span><span class=\"mtk10\">delegatecall</span><span class=\"mtk1\">(</span><span class=\"mtk10\">gas</span><span class=\"mtk1\">(), </span><span class=\"mtk10\">implementation</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk10\">calldatasize</span><span class=\"mtk1\">(), </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<ol start=\"4\">\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L350\">350</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">TOKEN_DEPLOYER_IMPLEMENTATION</span><span class=\"mtk1\">.</span><span class=\"mtk11\">delegatecall</span><span class=\"mtk1\">(</span></span></span></code></pre>\n<h2 id=\"n-01-requirerevert-statements-should-have-descriptive-reason-strings\" style=\"position:relative;\"><a href=\"#n-01-requirerevert-statements-should-have-descriptive-reason-strings\" aria-label=\"n 01 requirerevert statements should have descriptive reason strings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-01] <code>require()</code>/<code>revert()</code> statements should have descriptive reason strings</h2>\n<ol>\n<li>File: src/DepositHandler.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol#L12\">12</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_lockedStatus</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">IS_NOT_LOCKED</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"n-02-public-functions-not-called-by-the-contract-should-be-declared-external-instead\" style=\"position:relative;\"><a href=\"#n-02-public-functions-not-called-by-the-contract-should-be-declared-external-instead\" aria-label=\"n 02 public functions not called by the contract should be declared external instead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-02] <code>public</code> functions not called by the contract should be declared <code>external</code> instead</h2>\n<p>Contracts <a href=\"https://docs.soliditylang.org/en/latest/contracts.html#function-overriding\">are allowed</a> to override their parents’ functions and change the visibility from <code>external</code> to <code>public</code>.</p>\n<ol>\n<li>File: src/BurnableMintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L48\">48</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">salt</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/MintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L23\">23</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<h2 id=\"n-03-constants-should-be-defined-rather-than-using-magic-numbers\" style=\"position:relative;\"><a href=\"#n-03-constants-should-be-defined-rather-than-using-magic-numbers\" aria-label=\"n 03 constants should be defined rather than using magic numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-03] <code>constant</code>s should be defined rather than using magic numbers</h2>\n<ol>\n<li>File: src/BurnableMintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L37\">37</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                </span><span class=\"mtk11\">bytes1</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0xff</span><span class=\"mtk1\">),</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/ECDSA.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L33\">33</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">signature</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">65</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidSignatureLength</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<ol start=\"3\">\n<li>File: src/ECDSA.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L58\">58</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">s</span><span class=\"mtk1\">) &gt; </span><span class=\"mtk7\">0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidS</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<ol start=\"4\">\n<li>File: src/ECDSA.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L60\">60</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">v</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">27</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">v</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">28</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidV</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<ol start=\"5\">\n<li>File: src/ECDSA.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L60\">60</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">v</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">27</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">v</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">28</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidV</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<ol start=\"6\">\n<li>File: src/ERC20Permit.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L44\">44</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">s</span><span class=\"mtk1\">) &lt;= </span><span class=\"mtk7\">0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;INV_S&#39;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<ol start=\"7\">\n<li>File: src/ERC20Permit.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L45\">45</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">v</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">27</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">v</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">28</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;INV_V&#39;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<ol start=\"8\">\n<li>File: src/ERC20Permit.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L45\">45</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">v</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">27</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">v</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">28</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;INV_V&#39;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"n-04-use-a-more-recent-version-of-solidity\" style=\"position:relative;\"><a href=\"#n-04-use-a-more-recent-version-of-solidity\" aria-label=\"n 04 use a more recent version of solidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-04] Use a more recent version of solidity</h2>\n<p>Use a solidity version of at least 0.8.12 to get <code>string.concat()</code> to be used instead of <code>abi.encodePacked(&#x3C;str>,&#x3C;str>)</code></p>\n<ol>\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L3\">3</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/AdminMultisigBase.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L3\">3</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<ol start=\"3\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L3\">3</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<ol start=\"4\">\n<li>File: src/BurnableMintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L3\">3</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<ol start=\"5\">\n<li>File: src/ECDSA.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L3\">3</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<ol start=\"6\">\n<li>File: src/ERC20Permit.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L3\">3</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"n-05-multiple-address-mappings-can-be-combined-into-a-single-mapping-of-an-address-to-a-struct-where-appropriate\" style=\"position:relative;\"><a href=\"#n-05-multiple-address-mappings-can-be-combined-into-a-single-mapping-of-an-address-to-a-struct-where-appropriate\" aria-label=\"n 05 multiple address mappings can be combined into a single mapping of an address to a struct where appropriate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-05] Multiple <code>address</code> mappings can be combined into a single <code>mapping</code> of an <code>address</code> to a <code>struct</code>, where appropriate</h2>\n<ol>\n<li>File: src/ERC20.sol (lines <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L34-L36\">34-36</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">override</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balanceOf</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">override</span><span class=\"mtk1\"> </span><span class=\"mtk12\">allowance</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"n-06-variable-names-that-consist-of-all-capital-letters-should-be-reserved-for-constimmutable-variables\" style=\"position:relative;\"><a href=\"#n-06-variable-names-that-consist-of-all-capital-letters-should-be-reserved-for-constimmutable-variables\" aria-label=\"n 06 variable names that consist of all capital letters should be reserved for constimmutable variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-06] Variable names that consist of all capital letters should be reserved for <code>const</code>/<code>immutable</code> variables</h2>\n<p>If the variable needs to be different based on which class it comes from, a <code>view</code>/<code>pure</code> <em>function</em> should be used instead (e.g. like <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/76eee35971c2541585e05cbf258510dda7b2fbc6/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#L59\">this</a>).</p>\n<ol>\n<li>File: src/ERC20Permit.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L8\">8</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">DOMAIN_SEPARATOR</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"n-07-file-is-missing-natspec\" style=\"position:relative;\"><a href=\"#n-07-file-is-missing-natspec\" aria-label=\"n 07 file is missing natspec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-07] File is missing NatSpec</h2>\n<ol>\n<li>File: src/AdminMultisigBase.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L0\">0</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/DepositHandler.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol#L0\">0</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span></code></pre>\n<ol start=\"3\">\n<li>File: src/BurnableMintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L0\">0</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span></code></pre>\n<ol start=\"4\">\n<li>File: src/Ownable.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Ownable.sol#L0\">0</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span></code></pre>\n<ol start=\"5\">\n<li>File: src/TokenDeployer.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/TokenDeployer.sol#L0\">0</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span></code></pre>\n<ol start=\"6\">\n<li>File: src/interfaces/IAxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L0\">0</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span></code></pre>\n<ol start=\"7\">\n<li>File: src/interfaces/IAxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGatewayMultisig.sol#L0\">0</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span></code></pre>\n<ol start=\"8\">\n<li>File: src/interfaces/IERC20BurnFrom.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IERC20BurnFrom.sol#L0\">0</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span></code></pre>\n<ol start=\"9\">\n<li>File: src/interfaces/IAxelarExecutable.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarExecutable.sol#L0\">0</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span></code></pre>\n<ol start=\"10\">\n<li>File: src/MintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L0\">0</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span></code></pre>\n<ol start=\"11\">\n<li>File: src/ERC20Permit.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L0\">0</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// SPDX-License-Identifier: MIT</span></span></span></code></pre>\n<h2 id=\"n-08-event-is-missing-indexed-fields\" style=\"position:relative;\"><a href=\"#n-08-event-is-missing-indexed-fields\" aria-label=\"n 08 event is missing indexed fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-08] Event is missing <code>indexed</code> fields</h2>\n<p>Each <code>event</code> should use three <code>indexed</code> fields if there are three or more fields</p>\n<ol>\n<li>File: src/interfaces/IAxelarGateway.sol (lines <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L10-L16\">10-16</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TokenSent</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/interfaces/IAxelarGateway.sol (lines <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L18-L24\">18-24</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ContractCall</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationContractAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payloadHash</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span></code></pre>\n<ol start=\"3\">\n<li>File: src/interfaces/IAxelarGateway.sol (lines <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L26-L34\">26-34</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ContractCallWithToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationContractAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payloadHash</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span></code></pre>\n<ol start=\"4\">\n<li>File: src/interfaces/IAxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L38\">38</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TokenDeployed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenAddresses</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<ol start=\"5\">\n<li>File: src/interfaces/IAxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L62\">62</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TokenFrozen</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<ol start=\"6\">\n<li>File: src/interfaces/IAxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L64\">64</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TokenUnfrozen</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<ol start=\"7\">\n<li>File: src/interfaces/IAxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGatewayMultisig.sol#L8\">8</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">OwnershipTransferred</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">preOwners</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">prevThreshold</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">newOwners</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newThreshold</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<ol start=\"8\">\n<li>File: src/interfaces/IAxelarGatewayMultisig.sol (lines <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGatewayMultisig.sol#L10-L15\">10-15</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"50\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">OperatorshipTransferred</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">preOperators</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">prevThreshold</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">newOperators</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newThreshold</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span></code></pre>\n<ol start=\"9\">\n<li>File: src/interfaces/IERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IERC20.sol#L74\">74</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"51\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">value</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<ol start=\"10\">\n<li>File: src/interfaces/IERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IERC20.sol#L80\">80</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"52\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Approval</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">spender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">value</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"n-09-unsafe-early-return-from-a-modifier\" style=\"position:relative;\"><a href=\"#n-09-unsafe-early-return-from-a-modifier\" aria-label=\"n 09 unsafe early return from a modifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-09] Unsafe early return from a modifier</h2>\n<p>If the modifier is used with a function that has a named return, the default value will be returned which may lead to confusing behavior. Consider using a function instead of a modifier</p>\n<ol>\n<li>File: src/AdminMultisigBase.sol (lines <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AdminMultisigBase.sol#L42-L44\">42-44</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"53\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">adminVoteCount</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk11\">_getAdminThreshold</span><span class=\"mtk1\">(</span><span class=\"mtk12\">adminEpoch</span><span class=\"mtk1\">)) </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"n-10-consider-allowing-infinite-approval\" style=\"position:relative;\"><a href=\"#n-10-consider-allowing-infinite-approval\" aria-label=\"n 10 consider allowing infinite approval permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-10] Consider allowing infinite approval</h2>\n<p>Doing what <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/28dd490726f045f7137fa1903b7a6b8a52d6ffcb/contracts/token/ERC20/ERC20.sol#L129-L130\">OpenZeppelin</a> does and considering <code>type(uint256).max</code> to be infinite approval may help users to create smaller transactions.</p>\n<ol>\n<li>File: src/ERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ERC20.sol#L105\">105</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"54\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">allowance</span><span class=\"mtk1\">[</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">()] - </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"n-11-consider-using-a-two-step-transfer-of-ownership\" style=\"position:relative;\"><a href=\"#n-11-consider-using-a-two-step-transfer-of-ownership\" aria-label=\"n 11 consider using a two step transfer of ownership permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-11] Consider using a two-step-transfer of ownership</h2>\n<p>The current owner would nominate a new owner, and to become the new owner, the nominated account would have to approve the change, so that the address is proven to be valid</p>\n<ol>\n<li>File: src/Ownable.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/Ownable.sol#L20\">20</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"55\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transferOwnership</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newOwner</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<h2 id=\"n-12-consider-adding-a-comment-saying-that-eip-2098-short-signatures-are-not-supported\" style=\"position:relative;\"><a href=\"#n-12-consider-adding-a-comment-saying-that-eip-2098-short-signatures-are-not-supported\" aria-label=\"n 12 consider adding a comment saying that eip 2098 short signatures are not supported permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-12] Consider adding a comment saying that EIP-2098 short signatures are not supported</h2>\n<ol>\n<li>File: src/ECDSA.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ECDSA.sol#L33\">33</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"56\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">signature</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">65</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidSignatureLength</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/38#issuecomment-1103709624\">deluca-mike (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p><strong>Cross-chain replay attacks</strong><br>\nAcknowledged, since just as that linked finding suggested, if Ethereum forks we will not use any minority fork, since we are dealing with (bridging) assets that cannot be split.</p>\n<p><strong>Incorrect EIP-2612 deadline check</strong><br>\nConfirmed.</p>\n<p><strong>Missing checks for address(0x0) when assigning values to address state variables</strong><br>\nConfirmed. Will correct by checking code length of the address, which will also help with a delegatcall elsewhere in the contract.</p>\n<p><strong>Open TODOs</strong><br>\nConfirmed, will remove TODO and move the function as noted.</p>\n<p><strong>Missing contract-existence checks before low-level calls</strong><br></p>\n<ol>\n<li>File: src/AxelarGateway.sol (lines <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L398-L415\">398-415</a>)\nDisputed since that is not a low-level call, despite looking similar to one.</li>\n<li>File: src/AxelarGatewayProxy.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L19\">19</a>)\nAcknowledged, but given that it is a highly-used delegatecall as part of the proxy pattern, there is no point checking if the contract exists. If it does not, we have much much larger problems.</li>\n<li>File: src/AxelarGatewayProxy.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L34\">34</a>)\nAs above, acknowledged, but given that it is a highly-used delegatecall as part of the proxy pattern, there is no point checking if the contract exists. If it does not, we have much much larger problems.</li>\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L350\">350</a>)\nConfirmed, but we will solve this but doing a <code>if (tokenDeployerImplementation.code.length == 0) revert InvalidTokenDeployer();</code> in the gateway’s constructor, to prevent it form ever being initialized with an invalid TokenDeployer.</li>\n</ol>\n<p><strong>require()/revert() statements should have descriptive reason strings</strong><br>\nConfirmed, and will be fixed with adopting if-revert with custom error messages in place of all requires.</p>\n<p><strong>public functions not called by the contract should be declared external instead</strong><br>\nConfirmed.</p>\n<p><strong>constants should be defined rather than using magic numbers</strong><br>\nAcknowledged, but these were intentional so they could be compared to <a href=\"https://docs.soliditylang.org/en/v0.8.9/control-structures.html?highlight=bytes1(0xff)#salted-contract-creations-create2\">Solidity Docs</a> and standard ECDSA implementations.</p>\n<p><strong>Use a more recent version of solidity</strong><br>\nAcknowledged, but these were all tested on 0.8.9, and this is locked in for release. The next release will take latest Solidity available at the time testing is started.</p>\n<p><strong>Multiple address mappings can be combined into a single mapping of an address to a struct, where appropriate</strong><br>\nDisputed. While true, and would save gas, this would be a deviation from the ERC20 standard, and add complexity (in terms of standards and readability) for minimal gain.</p>\n<p><strong>Variable names that consist of all capital letters should be reserved for const/immutable variables</strong><br>\nConfirmed. That variable should have been, and will be, made immutable.</p>\n<p><strong>File is missing NatSpec</strong><br>\nAcknowledged, but more documentation will come in subsequent releases.</p>\n<p><strong>Each event should use three indexed fields if there are three or more fields</strong><br>\nAcknowledged. Indexed fields actually cost a bit more gas, and should only be reserved for data that can be known ahead of time. Further, it is not yet clear which fields should be indexed, so they will only be indexed at a later release when we gather requirements. However, one should never index fields whose possible values are not part of some reasonable set (i.e. amount).</p>\n<p><strong>Unsafe early return from a modifier</strong><br>\nConfirmed, however since all functions that currently use this modifier do not return data, we will just leave a comment above the modifier noting that it should be used with care.</p>\n<p><strong>Consider allowing infinite approval</strong><br>\nConfirmed.</p>\n<p><strong>Consider adding a comment saying that EIP-2098 short signatures are not supported</strong><br>\nAcknowledged, but such a comment would be misplaced here, and would be better in normal documentation.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/38#issuecomment-1125338781\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Severities proposed by warden seem correct.</p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 14 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/39\">report highlighted below</a> by <strong>IllIllI</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/14\">Dravee</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/9\">CertoraInc</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/33\">0xkatana</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/29\">Funen</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/13\">0xNazgul</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/31\">ilan</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/27\">rfa</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/21\">rayn</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/32\">Tomio</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/22\">Chom</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/2\">0v3rf10w</a>, <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/28\">Hawkeye</a>, and <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/40\">nahnah</a>.</em></p>\n<h2 id=\"g-01-using-1-and-2-rather-than-0-and-1-saves-gas\" style=\"position:relative;\"><a href=\"#g-01-using-1-and-2-rather-than-0-and-1-saves-gas\" aria-label=\"g 01 using 1 and 2 rather than 0 and 1 saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01] Using <code>1</code> and <code>2</code> rather than <code>0</code> and <code>1</code> saves gas</h2>\n<p>See <a href=\"https://github.com/code-423n4/2022-01-yield-findings/issues/102\">this</a> issue from a prior contest for details</p>\n<ol>\n<li>File: src/DepositHandler.sol (lines <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol#L6-L7\">6-7</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"57\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IS_NOT_LOCKED</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IS_LOCKED</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"g-02-not-using-the-named-return-variables-when-a-function-returns-wastes-deployment-gas\" style=\"position:relative;\"><a href=\"#g-02-not-using-the-named-return-variables-when-a-function-returns-wastes-deployment-gas\" aria-label=\"g 02 not using the named return variables when a function returns wastes deployment gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-02] Not using the named return variables when a function returns, wastes deployment gas</h2>\n<ol>\n<li>File: src/Context.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Context.sol#L17\">17</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"58\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"g-03-use-a-more-recent-version-of-solidity\" style=\"position:relative;\"><a href=\"#g-03-use-a-more-recent-version-of-solidity\" aria-label=\"g 03 use a more recent version of solidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-03] Use a more recent version of solidity</h2>\n<p>Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value</p>\n<p>See <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/39\">original submission</a> for list of instances.</p>\n<h2 id=\"g-04-using-bools-for-storage-incurs-overhead\" style=\"position:relative;\"><a href=\"#g-04-using-bools-for-storage-incurs-overhead\" aria-label=\"g 04 using bools for storage incurs overhead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-04] Using <code>bool</code>s for storage incurs overhead</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"59\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Booleans are more expensive than uint256 or any type that takes up a full</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// word because each write operation emits an extra SLOAD to first read the</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// slot&#39;s contents, replace the bits taken up by the boolean, and then write</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// back. This is the compiler&#39;s defense against contract upgrades and</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// pointer aliasing, and it cannot be disabled.</span></span></span></code></pre>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27</a></p>\n<ol>\n<li>File: src/EternalStorage.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/EternalStorage.sol#L14\">14</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"60\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_boolStorage</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"g-05-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\" style=\"position:relative;\"><a href=\"#g-05-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\" aria-label=\"g 05 arraylength should not be looked up in every loop of a for loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-05] <code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</h2>\n<p>Even memory arrays incur the overhead of bit tests and bit shifts to calculate the array length</p>\n<ol>\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L118\">118</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"61\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accounts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L271\">271</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"62\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accounts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<h2 id=\"g-06-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" style=\"position:relative;\"><a href=\"#g-06-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" aria-label=\"g 06 using calldata instead of memory for read only arguments in external functions saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-06] Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</h2>\n<p>See <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/39\">original submission</a> for list of instances.</p>\n<h2 id=\"g-07-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" style=\"position:relative;\"><a href=\"#g-07-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" aria-label=\"g 07 ii should be uncheckediuncheckedi when it is not possible for them to overflow as is the case when used in for  and while loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-07] <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{++i}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</h2>\n<ol>\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L225\">225</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"63\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">adminCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/AdminMultisigBase.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L51\">51</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"64\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">adminCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"3\">\n<li>File: src/AdminMultisigBase.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L158\">158</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"65\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">adminLength</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"4\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L42\">42</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"66\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accounts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<ol start=\"5\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L118\">118</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"67\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accounts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"6\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L140\">140</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"68\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">ownerCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"7\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L181\">181</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"69\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accountLength</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"8\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L271\">271</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"70\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accounts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"9\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L293\">293</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"71\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">operatorCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"10\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L332\">332</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"72\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accountLength</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"11\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L495\">495</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"73\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">signatureCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"12\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L526\">526</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"74\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">commandsLength</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<h2 id=\"g-08-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" style=\"position:relative;\"><a href=\"#g-08-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" aria-label=\"g 08 i costs less gas than i especially when its used in for loops   ii   too permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-08] <code>++i</code> costs less gas than <code>++i</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</h2>\n<ol>\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L225\">225</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"75\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">adminCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/AdminMultisigBase.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L51\">51</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"76\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">adminCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"3\">\n<li>File: src/AdminMultisigBase.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L158\">158</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"77\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">adminLength</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"4\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L118\">118</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"78\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accounts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"5\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L140\">140</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"79\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">ownerCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"6\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L181\">181</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"80\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accountLength</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"7\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L271\">271</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"81\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accounts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"8\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L293\">293</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"82\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">operatorCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"9\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L332\">332</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"83\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accountLength</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"10\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L495\">495</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"84\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">signatureCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<ol start=\"11\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L526\">526</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"85\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">commandsLength</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<h2 id=\"g-09-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\" style=\"position:relative;\"><a href=\"#g-09-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\" aria-label=\"g 09 usage of uintsints smaller than 32 bytes 256 bits incurs overhead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-09] Usage of <code>uints</code>/<code>ints</code> smaller than 32 bytes (256 bits) incurs overhead</h2>\n<blockquote>\n<p>When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.</p>\n</blockquote>\n<p><a href=\"https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\">https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html</a><br>\nUse a larger size then downcast where needed</p>\n<ol>\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L62\">62</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"86\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">OLD_KEY_RETENTION</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">16</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L339\">339</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"87\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<ol start=\"3\">\n<li>File: src/ERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L43\">43</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"88\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<ol start=\"4\">\n<li>File: src/ERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L54\">54</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"89\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">decimals_</span></span></span></code></pre>\n<ol start=\"5\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L363\">363</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"90\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cap</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenAddr</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span></span></span></code></pre>\n<ol start=\"6\">\n<li>File: src/BurnableMintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L24\">24</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"91\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<ol start=\"7\">\n<li>File: src/TokenDeployer.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/TokenDeployer.sol#L11\">11</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"92\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<ol start=\"8\">\n<li>File: src/ECDSA.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L38\">38</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"93\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">v</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<ol start=\"9\">\n<li>File: src/MintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L17\">17</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"94\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<ol start=\"10\">\n<li>File: src/ERC20Permit.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L39\">39</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"95\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">v</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<h2 id=\"g-10-expressions-for-constant-values-such-as-a-call-to-keccak256-should-use-immutable-rather-than-constant\" style=\"position:relative;\"><a href=\"#g-10-expressions-for-constant-values-such-as-a-call-to-keccak256-should-use-immutable-rather-than-constant\" aria-label=\"g 10 expressions for constant values such as a call to keccak256 should use immutable rather than constant permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-10] Expressions for constant values such as a call to <code>keccak256()</code>, should use <code>immutable</code> rather than <code>constant</code></h2>\n<p>See <a href=\"https://github.com/ethereum/solidity/issues/9232\">this</a> issue for a detail description of the issue.</p>\n<p>See <a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/39\">original submission</a> for list of instances.</p>\n<h2 id=\"g-11-duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\" style=\"position:relative;\"><a href=\"#g-11-duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\" aria-label=\"g 11 duplicated requirerevert checks should be refactored to a modifier or function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-11] Duplicated <code>require()</code>/<code>revert()</code> checks should be refactored to a modifier or function</h2>\n<ol>\n<li>File: src/ERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L205\">205</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"96\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">account</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;ZERO_ADDR&#39;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"g-12-state-variables-only-set-in-the-constructor-should-be-declared-immutable\" style=\"position:relative;\"><a href=\"#g-12-state-variables-only-set-in-the-constructor-should-be-declared-immutable\" aria-label=\"g 12 state variables only set in the constructor should be declared immutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-12] State variables only set in the constructor should be declared <code>immutable</code></h2>\n<ol>\n<li>File: src/ERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L40\">40</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"97\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/ERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L41\">41</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"98\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<ol start=\"3\">\n<li>File: src/MintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L12\">12</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"99\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cap</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"g-13-use-custom-errors-rather-than-revertrequire-strings-to-save-deployment-gas\" style=\"position:relative;\"><a href=\"#g-13-use-custom-errors-rather-than-revertrequire-strings-to-save-deployment-gas\" aria-label=\"g 13 use custom errors rather than revertrequire strings to save deployment gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-13] Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save deployment gas</h2>\n<ol>\n<li>File: src/ERC20.sol (Various lines throughout the <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol\">file</a>)</li>\n<li>File: src/DepositHandler.sol (Various lines throughout the <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol\">file</a>)</li>\n<li>File: src/BurnableMintableCappedERC20.sol (Various lines throughout the <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol\">file</a>)</li>\n<li>File: src/Ownable.sol (Various lines throughout the <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Ownable.sol\">file</a>)</li>\n<li>File: src/AxelarGatewayProxy.sol (Various lines throughout the <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayProxy.sol\">file</a>)</li>\n<li>File: src/MintableCappedERC20.sol (Various lines throughout the <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol\">file</a>)</li>\n<li>File: src/ERC20Permit.sol (Various lines throughout the <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol\">file</a>)</li>\n</ol>\n<h2 id=\"g-14-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" style=\"position:relative;\"><a href=\"#g-14-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" aria-label=\"g 14 functions guaranteed to revert when called by normal users can be marked payable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-14] Functions guaranteed to revert when called by normal users can be marked <code>payable</code></h2>\n<p>If a function modifier such as <code>onlyOwner</code> is used, the function will revert if a normal user tries to pay the function. Marking the function as <code>payable</code> will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.</p>\n<ol>\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L234\">234</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"100\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">freezeToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyAdmin</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"2\">\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L240\">240</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"101\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">unfreezeToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyAdmin</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"3\">\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L246\">246</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"102\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">freezeAllTokens</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyAdmin</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"4\">\n<li>File: src/AxelarGateway.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L252\">252</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"103\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">unfreezeAllTokens</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyAdmin</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"5\">\n<li>File: src/AxelarGateway.sol (lines <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L258-L262\">258-262</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"104\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">upgrade</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newImplementation</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newImplementationCodeHash</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">setupParams</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyAdmin</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"6\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L362\">362</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"105\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"7\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L371\">371</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"106\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mintToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"8\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L377\">377</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"107\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">burnToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"9\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L383\">383</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"108\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">approveContractCall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"10\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L404\">404</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"109\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">approveContractCallWithMint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"11\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L429\">429</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"110\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transferOwnership</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"12\">\n<li>File: src/AxelarGatewayMultisig.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L440\">440</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"111\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transferOperatorship</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"13\">\n<li>File: src/BurnableMintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L48\">48</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"112\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">salt</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"14\">\n<li>File: src/Ownable.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Ownable.sol#L20\">20</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"113\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transferOwnership</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newOwner</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"15\">\n<li>File: src/MintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L23\">23</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"114\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<ol start=\"16\">\n<li>File: src/MintableCappedERC20.sol (line <a href=\"https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L31\">31</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"115\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">burnFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-04-axelar-findings/issues/39#issuecomment-1103727112\">deluca-mike (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p><strong>Using 1 and 2 rather than 0 and 1 saves gas</strong><br>\nConfirmed.</p>\n<p><strong>Not using the named return variables when a function returns, wastes deployment gas</strong><br>\nDisputed, since in most cases it does not actually cost more gas, however, we are removing the Context contract anyway.</p>\n<p><strong>Use a more recent version of solidity</strong><br>\nAcknowledged, but these were all tested on 0.8.9, and this is locked in for release. The next release will take latest Solidity available at the time testing is started.</p>\n<p><strong>Using bools for storage incurs overhead</strong><br>\nAcknowledged, but it’s better to use bools for readability in many cases.</p>\n<p><strong>.length should not be looked up in every loop of a for-loop</strong><br>\nDisputed, since recent versions of solidity optimize for this if the array has a fixed length.</p>\n<p><strong>Using calldata instead of memory for read-only arguments in external functions saves gas</strong><br>\nConfirmed.</p>\n<p><strong>++i/i++ should be unchecked{++i}/unchecked{++i} when it is not possible for them to overflow, as is the case when used in for- and while-loops</strong><br>\nConfirmed for using ++i instead of i++, but acknowledged for the unchecked suggestion, which we will forgo for readability, for now.</p>\n<p><strong>Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead</strong><br>\nAcknowledged, but will not change since the overhead is at worst minimal, and much of this functionality/code is shared in the space. Further, it helps with readability.</p>\n<p><strong>Expressions for constant values such as a call to keccak256(), should use immutable rather than constant</strong><br>\nDisputed, since the issue being referred to is 2 years old, and since then, Solidity computes the literals at compile-time.</p>\n<p><strong>Duplicated require()/revert() checks should be refactored to a modifier or function</strong><br>\nAcknowledged, but will not change as this is a design preference and the compiler can optimize out duplicate code.</p>\n<p><strong>State variables only set in the constructor should be declared immutable</strong><br>\nWhile true, and thus confirmed, for cap, this is not true, and thus disputed for strings, since non-value types cannot be immutable in Solidity (yet).</p>\n<p><strong>Use custom errors rather than revert()/require() strings to save deployment gas</strong><br>\nConfirmed.</p>\n<p><strong>Functions guaranteed to revert when called by normal users can be marked payable</strong><br>\nAcknowledged, but will not do since it is gas savings at the expense of confusion, readability issues, and the possibilities for ETH to be received.</p>\n</blockquote>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-1\">High Risk Findings (1)</a></p>\n<ul>\n<li><a href=\"#h-01-cross-chain-smart-contract-calls-can-revert-but-source-chain-tokens-remain-burnt-and-are-not-refunded\">[H-01] Cross-chain smart contract calls can revert but source chain tokens remain burnt and are not refunded</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-4\">Medium Risk Findings (4)</a></p>\n<ul>\n<li><a href=\"#m-01-low-level-call-returns-true-if-the-address-doesnt-exist\">[M-01] Low level call returns true if the address doesn’t exist</a></li>\n<li><a href=\"#m-02-users-funds-can-get-lost-when-transferring-to-other-chain\">[M-02] User’s funds can get lost when transferring to other chain</a></li>\n<li><a href=\"#m-03-_execute-can-potentially-reorder-a-batch-of-commands-while-executing-breaking-any-assumptions-on-command-orders\">[M-03] <code>_execute</code> can potentially reorder a batch of commands while executing, breaking any assumptions on command orders.</a></li>\n<li><a href=\"#m-04-unsupported-fee-on-transfer-tokens\">[M-04] Unsupported fee-on-transfer tokens</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#l-01-cross-chain-replay-attacks\">L-01 Cross-chain replay attacks</a></li>\n<li><a href=\"#l-02-incorrect-eip-2612-deadline-check\">L-02 Incorrect EIP-2612 deadline check</a></li>\n<li><a href=\"#l-03-missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\">L-03 Missing checks for <code>address(0x0)</code> when assigning values to <code>address</code> state variables</a></li>\n<li><a href=\"#l-04-open-todos\">L-04 Open TODOs</a></li>\n<li><a href=\"#l-05-missing-contract-existence-checks-before-low-level-calls\">L-05 Missing contract-existence checks before low-level calls</a></li>\n<li><a href=\"#n-01-requirerevert-statements-should-have-descriptive-reason-strings\">N-01 <code>require()</code>/<code>revert()</code> statements should have descriptive reason strings</a></li>\n<li><a href=\"#n-02-public-functions-not-called-by-the-contract-should-be-declared-external-instead\">N-02 <code>public</code> functions not called by the contract should be declared <code>external</code> instead</a></li>\n<li><a href=\"#n-03-constants-should-be-defined-rather-than-using-magic-numbers\">N-03 <code>constant</code>s should be defined rather than using magic numbers</a></li>\n<li><a href=\"#n-04-use-a-more-recent-version-of-solidity\">N-04 Use a more recent version of solidity</a></li>\n<li><a href=\"#n-05-multiple-address-mappings-can-be-combined-into-a-single-mapping-of-an-address-to-a-struct-where-appropriate\">N-05 Multiple <code>address</code> mappings can be combined into a single <code>mapping</code> of an <code>address</code> to a <code>struct</code>, where appropriate</a></li>\n<li><a href=\"#n-06-variable-names-that-consist-of-all-capital-letters-should-be-reserved-for-constimmutable-variables\">N-06 Variable names that consist of all capital letters should be reserved for <code>const</code>/<code>immutable</code> variables</a></li>\n<li><a href=\"#n-07-file-is-missing-natspec\">N-07 File is missing NatSpec</a></li>\n<li><a href=\"#n-08-event-is-missing-indexed-fields\">N-08 Event is missing <code>indexed</code> fields</a></li>\n<li><a href=\"#n-09-unsafe-early-return-from-a-modifier\">N-09 Unsafe early return from a modifier</a></li>\n<li><a href=\"#n-10-consider-allowing-infinite-approval\">N-10 Consider allowing infinite approval</a></li>\n<li><a href=\"#n-11-consider-using-a-two-step-transfer-of-ownership\">N-11 Consider using a two-step-transfer of ownership</a></li>\n<li><a href=\"#n-12-consider-adding-a-comment-saying-that-eip-2098-short-signatures-are-not-supported\">N-12 Consider adding a comment saying that EIP-2098 short signatures are not supported</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#g-01-using-1-and-2-rather-than-0-and-1-saves-gas\">G-01 Using <code>1</code> and <code>2</code> rather than <code>0</code> and <code>1</code> saves gas</a></li>\n<li><a href=\"#g-02-not-using-the-named-return-variables-when-a-function-returns-wastes-deployment-gas\">G-02 Not using the named return variables when a function returns, wastes deployment gas</a></li>\n<li><a href=\"#g-03-use-a-more-recent-version-of-solidity\">G-03 Use a more recent version of solidity</a></li>\n<li><a href=\"#g-04-using-bools-for-storage-incurs-overhead\">G-04 Using <code>bool</code>s for storage incurs overhead</a></li>\n<li><a href=\"#g-05-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\">G-05 <code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</a></li>\n<li><a href=\"#g-06-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\">G-06 Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</a></li>\n<li><a href=\"#g-07-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\">G-07 <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{++i}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</a></li>\n<li><a href=\"#g-08-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\">G-08 <code>++i</code> costs less gas than <code>++i</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</a></li>\n<li><a href=\"#g-09-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\">G-09 Usage of <code>uints</code>/<code>ints</code> smaller than 32 bytes (256 bits) incurs overhead</a></li>\n<li><a href=\"#g-10-expressions-for-constant-values-such-as-a-call-to-keccak256-should-use-immutable-rather-than-constant\">G-10 Expressions for constant values such as a call to <code>keccak256()</code>, should use <code>immutable</code> rather than <code>constant</code></a></li>\n<li><a href=\"#g-11-duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\">G-11 Duplicated <code>require()</code>/<code>revert()</code> checks should be refactored to a modifier or function</a></li>\n<li><a href=\"#g-12-state-variables-only-set-in-the-constructor-should-be-declared-immutable\">G-12 State variables only set in the constructor should be declared <code>immutable</code></a></li>\n<li><a href=\"#g-13-use-custom-errors-rather-than-revertrequire-strings-to-save-deployment-gas\">G-13 Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save deployment gas</a></li>\n<li><a href=\"#g-14-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\">G-14 Functions guaranteed to revert when called by normal users can be marked <code>payable</code></a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the audit contest outlined in this document, C4 conducted an analysis of the Axelar Network smart contract system written in Solidity. The audit contest took place between April 7—April 11 2022.\n\n## Wardens\n\n24 Wardens contributed reports to the Axelar Network contest:\n\n  1. [CertoraInc](https://twitter.com/CertoraInc) ([danb](https://twitter.com/danbinnun), egjlmn1, [OriDabush](https://twitter.com/ori_dabush), ItayG, and shakedwinder)\n  1. [Chom](https://chom.dev)\n  1. [sseefried](http://seanseefried.org/blog)\n  1. [rayn](https://twitter.com/rayn731)\n  1. cccz\n  1. IllIllI\n  1. ilan\n  1. [Dravee](https://twitter.com/JustDravee)\n  1. [Funen](https://instagram.com/vanensurya)\n  1. dirk_y\n  1. delfin454000\n  1. rishabh\n  1. 0xkatana\n  1. [0xNazgul](https://twitter.com/0xNazgul)\n  1. [rfa](https://www.instagram.com/riyan_rfa/)\n  1. [Tomio](https://twitter.com/meidhiwirara)\n  1. [0v3rf10w](https://twitter.com/_0v3rf10w)\n  1. Hawkeye (0xwags and 0xmint)\n  1. nahnah\n\nThis contest was judged by [0xean](https://github.com/0xean).\n\nFinal report assembled by [liveactionllama](https://twitter.com/liveactionllama).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 5 unique vulnerabilities. Of these vulnerabilities, 1 received a risk rating in the category of HIGH severity and 4 received a risk rating in the category of MEDIUM severity.\n\nAdditionally, C4 analysis included 10 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 14 reports recommending gas optimizations.\n\nAll of the issues presented here are linked back to their original finding.\n\n# Scope\n\nThe code under review can be found within the [C4 Axelar Network contest repository](https://github.com/code-423n4/2022-04-axelar), and is composed of 19 smart contracts written in the Solidity programming language and includes 1,605 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code4rena.com).\n\n# High Risk Findings (1)\n## [[H-01] Cross-chain smart contract calls can revert but source chain tokens remain burnt and are not refunded](https://github.com/code-423n4/2022-04-axelar-findings/issues/35)\n_Submitted by sseefried, also found by Chom_\n\nSmart contract calls often revert. In such cases any ether sent along with the transaction is returned and sometimes the remaining gas (depending on whether an `assert` caused the reversion or not).\n\nFor contracts involving ERC20 tokens it is also expected that, should a contract call fail, one's tokens are not lost/transferred elsewhere.\n\nThe [callContractWithToken](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L98-L115) function does not appear to take contract call failure on the destination chain into account, even though this could be quite a common occurrence.\n\nTokens are burned on [line 105](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L105) but there is no mechanism in the code base to return these burned tokens in the case that the contract call fails on the destination chain.\n\nThe impact is that users of the Axelar Network can lose funds.\n\n### Proof of Concept\n\nI have put together an executable Proof of Concept in a fork of the repo.\nFile [DestinationChainContractCallFails.js](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L127) implements a test that attempts to call a token swap function on the destination chain. The [swap](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/test/TokenSwapper.sol#L16-L33) function was provided as part of the competition repo. Given a certain amount of token A it returns twice as much of token B.\n\nIn the test I have provided the contract call on the destination chain fails because there is simply not enough of token B in the `TokenSwapper` contract to transfer to the user. This might be rare in practice -- since adequate liquidity would generally be provided by the contract -- but cross-chain contract calls are unlikely to be limited to token swaps only! I specifically chose this example to show that cross-chain contract calls can fail *even in the cases that Axelar have already considered* in their test suite.\n\nIn the [unit test](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L129) you will find:\n\n*   Lines of note have been prefixed with `sseefried:`\n*   The test is a little strange in that it *succeeds* because it expects a `revert`. This happens on [line 380](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L380)\n*   I took the liberty of modifying the `TokenSwapper` contract slightly [here](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/src/test/TokenSwapper.sol#L37), in order to show that the contract call reverts because of a lack of token B.\n*   The amount of token A on [line 201](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L201) can be modified to be a smaller value. Doing so, and re-running the test, will result in a *test failure* which means that the contract call did *not* revert i.e. the contract call on the destination chain succeeded. This shows that, before the change, the revert was due to a lack of token B in the `TokenSwapper` contract.\n*   [Lines 388-389](https://github.com/sseefried/axelar-2022-04/blob/025078cda30e2da561f80166d8f2274c94a0f814/test/DestinationChainContractCallFails.js#L388-L389) show that, in the case of a revert on the destination chain, the tokens remain burnt on the source chain.\n\n### Recommended Mitigation Steps\n\nWhen making a credit card purchase it is common for transactions to remain in a \"pending\" state until eventually finalised. Often one's *available* bank balance will decrease the moment the purchase has been approved. Then one of\ntwo things happens:\n\n*   the transaction is finalised and the balance becomes the same as the available balance\n*   the transaction fails and the amount is refunded\n\nI suggest a similar design for cross-chain contract calls, with one major difference: the token should still be burned on the source chain but it should be re-minted and refunded in case of a contract call failure on the destination chain. The steps would be roughly this:\n\n*   User calls `AxelarGateway.callContractWithToken()` and tokens are burned\n*   Steps 3 - 8 from the [competition page](https://code4rena.com/contests/2022-04-axelar-network-contest#cross-chain-smart-contract-call) occur as normal.\n*   However, the call to `executeWithToken` in step 8 now fails. This is monitored by the Axelar Network and a new event e.g. `ContractCalledFailed` is emitted on the *destination chain*.\n*   One the *source chain* the Axelar Network emits a new event e.g. `ContractCallFailedWithRefund`. This causes a re-minting of the tokens and a refund to the user to occur. The event should also be observable by the user. It should contain a reason for the contract call failure so that they are informed as to why it failed\n\n**[deluca-mike (Axelar) acknowledged and commented](https://github.com/code-423n4/2022-04-axelar-findings/issues/35#issuecomment-1103612251):**\n > In this situation, the validators can still mint/transfer the user back their tokens on the source chain, so there is no real loss. There does lack an \"official\" way to alert the validators of this, but it can be handled entirely by off-chain micro-services and whatnot. In the future, as ERC20 transfers are pushed out of the contract as handled as separate application on top of the generic cross-chain calls, a mechanism can be implemented to send a message back to the source chain to release/mint the tokens back to the user.\n\n**[0xean (judge) increased severity to High and commented](https://github.com/code-423n4/2022-04-axelar-findings/issues/35#issuecomment-1107532494):**\n > Upgrading this issue from Medium to High Severity \n> \n> `\n> 3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).\n> `\n> \n> While the sponsor does mention there is a possible way that this could be handled in the future, currently this risk exists in the system today and doesn't have a proper or official mitigation in place.\n\n\n\n***\n \n# Medium Risk Findings (4)\n## [[M-01] Low level call returns true if the address doesn't exist](https://github.com/code-423n4/2022-04-axelar-findings/issues/11)\n_Submitted by CertoraInc_\n\n[AxelarGateway.sol#L545-L548](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L545-L548)<br>\n[AxelarGatewayProxy.sol#L16-L24](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L16-L24)<br>\n\nAs written in the [solidity documentation](https://docs.soliditylang.org/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions), the low-level functions call, delegatecall and staticcall return true as their first return value if the account called is non-existent, as part of the design of the EVM. Account existence must be checked prior to calling if needed.\n\n### Proof of Concept\n\nThe low-level functions `call` and `delegatecall` are used in some places in the code and it can be problematic. For example, in the `_callERC20Token` of the `AxelarGateway` contract there is a low level call in order to call the ERC20 functions, but if the given `tokenAddress` doesn't exist `success` will be equal to true and the function will return true and the code execution will be continued like the call was successful.\n\n```sol\nfunction _callERC20Token(address tokenAddress, bytes memory callData) internal returns (bool) {\n    (bool success, bytes memory returnData) = tokenAddress.call(callData);\n    return success && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\n}\n```\n\nAnother place that this can happen is in `AxelarGatewayProxy`'s constructor\n\n```sol\nconstructor(address gatewayImplementation, bytes memory params) {\n    _setAddress(KEY_IMPLEMENTATION, gatewayImplementation);\n\n   (bool success, ) = gatewayImplementation.delegatecall(\n       abi.encodeWithSelector(IAxelarGateway.setup.selector, params)\n   );\n\n    if (!success) revert SetupFailed();\n}\n```\n\nIf the `gatewayImplementation` address doesn't exist, the delegate call will return true and the function won't revert.\n\n### Tools Used\n\nRemix, VS Code\n\n### Recommended Mitigation Steps\n\nCheck before any low-level call that the address actually exists, for example before the low level call in the callERC20 function you can check that the address is a contract by checking its code size.\n\n**[deluca-mike (Axelar) confirmed, but disagreed with severity and commented](https://github.com/code-423n4/2022-04-axelar-findings/issues/11#issuecomment-1098564878):**\n > `_callERC20Token` is only called with a token address that has been set and was already validated by the gateway, and thus they do already exist.\n> \n> See:\n> - [AxelarGateway.sol#L291](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L291)<br>\n> - [AxelarGateway.sol#L379](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L379)<br>\n> \n> As for `gatewayImplementation.delegatecall`, this is a valid find, but there isn't much risk because it would just mean that the gateway deployed would be a dud, and it would need to be redeployed correctly before the Axelar network can start interacting with it. In any case, we will fix this by checking that there is code at that address.\n\n**[0xean (judge) commented](https://github.com/code-423n4/2022-04-axelar-findings/issues/11#issuecomment-1107536846):**\n > `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n> \n> Given that this _would_ affect the protocols availability (the gateway being a  \"dud\") the finding does qualify as med risk.\n\n\n\n***\n\n## [[M-02] User's funds can get lost when transferring to other chain](https://github.com/code-423n4/2022-04-axelar-findings/issues/12)\n_Submitted by CertoraInc_\n\n[AxelarGateway.sol#L384-L389](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L384-L389)<br>\n\nWhen transferring tokens to other chain, the tokens in the source chain are burned - if they are external they will be transferred to the AxelarGateway, otherwise they will be burned. In the target chain the same amount of tokens will be minted for the user - if it is external it will be transferred to him from the AxelarGateway, otherwise it will be minted to him.<br>\nBut there is a problem - if the AxelarGateway doesn't have the needed amount of token for some reason, the `_callERC20Token` with the `transfer` function selector will fail and return false, which will make the `_mintToken` function revert. Because it reverted, the user won't get his funds on the destination chain, although he payed the needed amount in the source chain.\n\n### Tools Used\n\nVS Code and Remix\n\n### Recommended Mitigation Steps\n\nInstead of reverting when the transfer is not successful, simply call the `callContractWithToken` with the source chain as the destination chain in order to return the user his funds.\n\n**[deluca-mike (Axelar) acknowledged and commented](https://github.com/code-423n4/2022-04-axelar-findings/issues/12#issuecomment-1098570273):**\n > While true, the only way the destination gateway cannot mint or transfer token, in response to a burn or transferFrom on the source chain, is foul play on the validators' part. Once we assume foul play, then really there is no protection here, since even with the recommended mitigation steps, you'd still need cooperation from the validators to sign the mint/transfer refund command for the source gateway.\n> \n> Because of this, while the issue is acknowledged, it's not really something that can be solved.\n> \n> Further, well-behaving validators can still sign a refund mint/transfer for the source gateway if they see that a mint/transfer on the destination gateway failed, without needing to do what is suggested in the Recommended Mitigation Steps.\n\n\n\n***\n\n## [[M-03] `_execute` can potentially reorder a batch of commands while executing, breaking any assumptions on command orders.](https://github.com/code-423n4/2022-04-axelar-findings/issues/17)\n_Submitted by rayn_\n\n[AxelarGatewayMultisig.sol#L484](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L484)<br>\n[AxelarGatewayMultisig.sol#L490](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L490)<br>\n[AxelarGatewayMultisig.sol#L529](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGatewayMultisig.sol#L529)<br>\n\nSince this is important, we quote it again instead of referring to our other bug report on a different, yet related bug. The context within which a command is executed is extremely important.\n\n> AxelarGatewayMultisig.execute() takes a signed batch of commands. Each command has a corresponding commandID. This is guaranteed to be unique from the Axelar network. execute intentionally allows retrying a commandID if the command failed to be processed; this is because commands are state dependent, and someone might submit command 2 before command 1 causing it to fail.\n\nThus if an attacker manages to rearrange execution order of commands within a batch, it should probably be treated seriously. This is exactly what might happen here due to reentrancy. A malicious player that managed to gain reentrancy over execute can easily execute later commands in a batch before earlier commands are fully executed, effectively breaking all assumptions on command executed context.\n\n### Proof of Concept\n\nThe `_execute` function and its wrapper `execute` are both reentrant.\n\n        function execute(bytes calldata input) external override;\n        function _execute(bytes memory data, bytes[] memory signatures) internal;\n\nThus if an attacker manages to reenter the `_execute` function with the same batch of commands and signatures, previously successfully executed and ongoing commands will be skipped due to premature marking of the success flag.\n\n            if (isCommandExecuted(commandId)) continue; /* Ignore if duplicate commandId received */\n\nThis allows later commands to be executed before the current ongoing command is finished. The reentrant attack can be nested to perform further reordering of commands.\n\nGenerally speaking, other unrelated batches of signed commands can only be executed, but since the assumption of ordering is most likely stronger within a single batch, we focus on illustrating the single batch scenario above.\n\n### Tools Used\n\nvim, ganache-cli\n\n### Recommended Mitigation Steps\n\nMake execute nonReentrant\n\nAdd an ever increasing nonce to signatures to prevent replay\n\n        function execute(bytes calldata input) nonReentrant external override {\n            ...\n        }\n\n**[deluca-mike (Axelar) acknowledged, but disagreed with High severity and commented](https://github.com/code-423n4/2022-04-axelar-findings/issues/17#issuecomment-1103782975):**\n > Axelar and the gateways make no concrete guarantees about command execution order, so the idea of \"reordering\" is moot. Currently, the only commands that call out are:\n> - deploy a token (so its order is irrelevant)\n> - minting a token (and thus a call to the token contract will not re-enter, since it is either one the gateway deployed, or the gateway onboarded a malicious external ERC2, which still has no effect on the other tokens)\n> - burn a token (same as above)\n> \n> As with the other issue, while we do acknowledge that the contestant has correctly pointed out how the gateway handles (and can re-handle) commands, this is a low-risk (or no-risk) issue, since no actual risk has been demonstrated apart from \"maybe, somehow, possibly, it could be abused\". We'd need at least some feasible and concrete hypothetical or example.\n\n**[0xean (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-04-axelar-findings/issues/17#issuecomment-1107615612):**\n > I am going to side with the warden on this but downgrade to medium severity.  The transaction ordering is not the high risk issue, but the ability for re-entrancy and thus replay presents a risk that should be mitigated. \n> \n> Looking at other recent hacks ( for example - https://rekt.news/agave-hundred-rekt/ ), new environments pose new risks for re-entrancy to appear and with the point of this protocol being to extend across many chains, added additional measures to avoid re-entrancy and the replay that could occur as a result seems like a very logical choice.<br> \n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n\n\n***\n\n## [[M-04] Unsupported fee-on-transfer tokens](https://github.com/code-423n4/2022-04-axelar-findings/issues/5)\n_Submitted by cccz_\n\nWhen tokenAddress is fee-on-transfer tokens, in the \\_burnTokenFrom function, the actual amount of tokens received by the contract will be less than the amount.\n\n### Proof of Concept\n\n[AxelarGateway.sol#L284-L334](https://github.com/code-423n4/2022-04-axelar/blob/main/src/AxelarGateway.sol#L284-L334)<br>\n\n### Recommended Mitigation Steps\n\nConsider getting the received amount by calculating the difference of token balance (using balanceOf) before and after the transferFrom.\n\n**[deluca-mike (Axelar) confirmed and commented](https://github.com/code-423n4/2022-04-axelar-findings/issues/5#issuecomment-1098474999):**\n > Valid for `TokenType.External`, since it is a token implementation that is not ours, and thus could actually transfer us less than expected due to fees.\n> \n> Keep in mind that, in the case of a malicious token contract, it could also lie about the `balanceOf`.\n> \n> In any case, if and when we wanted to accept fee-on-transfer tokens in the gateway, we _might_ need to implement the recommended mitigation steps; however, it is not that simple because the is not link (on-chain) here that ensure the amount the gateway burns to be equal to the amount the gateway/validators mint elsewhere. Knowing the actual amount burned is not critical to the source gateway, but rather to the validators that will need to create the mint command elsewhere.\n\n\n\n***\n\n\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 10 reports were submitted by wardens detailing low risk and non-critical issues. The [report highlighted below](https://github.com/code-423n4/2022-04-axelar-findings/issues/38) by **IllIllI** received the top score from the judge.\n\n*The following wardens also submitted reports: [rayn](https://github.com/code-423n4/2022-04-axelar-findings/issues/20), [ilan](https://github.com/code-423n4/2022-04-axelar-findings/issues/34), [CertoraInc](https://github.com/code-423n4/2022-04-axelar-findings/issues/10), [dirk_y](https://github.com/code-423n4/2022-04-axelar-findings/issues/18), [delfin454000](https://github.com/code-423n4/2022-04-axelar-findings/issues/4), [cccz](https://github.com/code-423n4/2022-04-axelar-findings/issues/6), [Funen](https://github.com/code-423n4/2022-04-axelar-findings/issues/30), [Dravee](https://github.com/code-423n4/2022-04-axelar-findings/issues/15), and [rishabh](https://github.com/code-423n4/2022-04-axelar-findings/issues/3).*\n\n## [L-01] Cross-chain replay attacks\n\nStoring the `block.chainid` is not safe. See [this](https://github.com/code-423n4/2021-04-maple-findings/issues/2) issue from a prior contest for details.\n\n1.  File: src/ERC20Permit.sol (lines [23-28](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ERC20Permit.sol#L23-L28))\n\n```solidity\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                DOMAIN_TYPE_SIGNATURE_HASH,\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                block.chainid,\n```\n\n## [L-02] Incorrect EIP-2612 deadline check\n\n> allow `transferFrom` to occur while `expiry >= block.timestamp`.\n\n<https://github.com/ethereum/EIPs/blob/1473025f064929bfab405eb00b8cd16dd741f269/EIPS/eip-2612.md?plain=1#L172><br>\nThe current code should change to use `<=`\n\n1.  File: src/ERC20Permit.sol (line [43](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ERC20Permit.sol#L43))\n\n```solidity\n        require(block.timestamp < deadline, 'EXPIRED');\n```\n\n## [L-03] Missing checks for `address(0x0)` when assigning values to `address` state variables\n\n1.  File: src/AxelarGateway.sol (line [67](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L67))\n\n```solidity\n        TOKEN_DEPLOYER_IMPLEMENTATION = tokenDeployerImplementation;\n```\n\n## [L-04] Open TODOs\n\nCode architecture, incentives, and error handling/reporting questions/issues should be resolved before deployment\n\n1.  File: src/MintableCappedERC20.sol (line [30](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L30))\n\n```solidity\n    // TODO move burnFrom into a separate BurnableERC20 contract\n```\n\n## [L-05] Missing contract-existence checks before low-level calls\n\nLow-level calls return success if there is no code present at the specified address. In addition to the zero-address checks, add a check to verify that `<address>.code.length > 0`\n\n1.  File: src/AxelarGateway.sol (lines [398-415](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L398-L415))\n\n```solidity\n        if (tokenAddress == address(0)) revert TokenDoesNotExist(symbol);\n\n        if (_getTokenType(symbol) == TokenType.External) {\n            _checkTokenStatus(symbol);\n\n            DepositHandler depositHandler = new DepositHandler{ salt: salt }();\n\n            (bool success, bytes memory returnData) = depositHandler.execute(\n                tokenAddress,\n                abi.encodeWithSelector(\n                    IERC20.transfer.selector,\n                    address(this),\n                    IERC20(tokenAddress).balanceOf(address(depositHandler))\n                )\n            );\n\n            if (!success || (returnData.length != uint256(0) && !abi.decode(returnData, (bool))))\n                revert BurnFailed(symbol);\n```\n\n2.  File: src/AxelarGatewayProxy.sol (line [19](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L19))\n\n```solidity\n        (bool success, ) = gatewayImplementation.delegatecall(\n```\n\n3.  File: src/AxelarGatewayProxy.sol (line [34](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L34))\n\n```solidity\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n```\n\n4.  File: src/AxelarGateway.sol (line [350](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L350))\n\n```solidity\n            (bool success, bytes memory data) = TOKEN_DEPLOYER_IMPLEMENTATION.delegatecall(\n```\n\n## [N-01] `require()`/`revert()` statements should have descriptive reason strings\n\n1.  File: src/DepositHandler.sol (line [12](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol#L12))\n\n```solidity\n        require(_lockedStatus == IS_NOT_LOCKED);\n```\n\n## [N-02] `public` functions not called by the contract should be declared `external` instead\n\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\n\n1.  File: src/BurnableMintableCappedERC20.sol (line [48](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L48))\n\n```solidity\n    function burn(bytes32 salt) public onlyOwner {\n```\n\n2.  File: src/MintableCappedERC20.sol (line [23](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L23))\n\n```solidity\n    function mint(address account, uint256 amount) public onlyOwner {\n```\n\n## [N-03] `constant`s should be defined rather than using magic numbers\n\n1.  File: src/BurnableMintableCappedERC20.sol (line [37](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L37))\n\n```solidity\n                                bytes1(0xff),\n```\n\n2.  File: src/ECDSA.sol (line [33](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L33))\n\n```solidity\n        if (signature.length != 65) revert InvalidSignatureLength();\n```\n\n3.  File: src/ECDSA.sol (line [58](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L58))\n\n```solidity\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) revert InvalidS();\n```\n\n4.  File: src/ECDSA.sol (line [60](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L60))\n\n```solidity\n        if (v != 27 && v != 28) revert InvalidV();\n```\n\n5.  File: src/ECDSA.sol (line [60](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L60))\n\n```solidity\n        if (v != 27 && v != 28) revert InvalidV();\n```\n\n6.  File: src/ERC20Permit.sol (line [44](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L44))\n\n```solidity\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, 'INV_S');\n```\n\n7.  File: src/ERC20Permit.sol (line [45](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L45))\n\n```solidity\n        require(v == 27 || v == 28, 'INV_V');\n```\n\n8.  File: src/ERC20Permit.sol (line [45](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L45))\n\n```solidity\n        require(v == 27 || v == 28, 'INV_V');\n```\n\n## [N-04] Use a more recent version of solidity\n\nUse a solidity version of at least 0.8.12 to get `string.concat()` to be used instead of `abi.encodePacked(<str>,<str>)`\n\n1.  File: src/AxelarGateway.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L3))\n\n```solidity\npragma solidity 0.8.9;\n```\n\n2.  File: src/AdminMultisigBase.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L3))\n\n```solidity\npragma solidity 0.8.9;\n```\n\n3.  File: src/AxelarGatewayMultisig.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L3))\n\n```solidity\npragma solidity 0.8.9;\n```\n\n4.  File: src/BurnableMintableCappedERC20.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L3))\n\n```solidity\npragma solidity 0.8.9;\n```\n\n5.  File: src/ECDSA.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L3))\n\n```solidity\npragma solidity 0.8.9;\n```\n\n6.  File: src/ERC20Permit.sol (line [3](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L3))\n\n```solidity\npragma solidity 0.8.9;\n```\n\n## [N-05] Multiple `address` mappings can be combined into a single `mapping` of an `address` to a `struct`, where appropriate\n\n1.  File: src/ERC20.sol (lines [34-36](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L34-L36))\n\n```solidity\n    mapping(address => uint256) public override balanceOf;\n\n    mapping(address => mapping(address => uint256)) public override allowance;\n```\n\n## [N-06] Variable names that consist of all capital letters should be reserved for `const`/`immutable` variables\n\nIf the variable needs to be different based on which class it comes from, a `view`/`pure` *function* should be used instead (e.g. like [this](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/76eee35971c2541585e05cbf258510dda7b2fbc6/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#L59)).\n\n1.  File: src/ERC20Permit.sol (line [8](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L8))\n\n```solidity\n    bytes32 public DOMAIN_SEPARATOR;\n```\n\n## [N-07] File is missing NatSpec\n\n1.  File: src/AdminMultisigBase.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L0))\n\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n2.  File: src/DepositHandler.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol#L0))\n\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n3.  File: src/BurnableMintableCappedERC20.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L0))\n\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n4.  File: src/Ownable.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Ownable.sol#L0))\n\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n5.  File: src/TokenDeployer.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/TokenDeployer.sol#L0))\n\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n6.  File: src/interfaces/IAxelarGateway.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L0))\n\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n7.  File: src/interfaces/IAxelarGatewayMultisig.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGatewayMultisig.sol#L0))\n\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n8.  File: src/interfaces/IERC20BurnFrom.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IERC20BurnFrom.sol#L0))\n\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n9.  File: src/interfaces/IAxelarExecutable.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarExecutable.sol#L0))\n\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n10. File: src/MintableCappedERC20.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L0))\n\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n11. File: src/ERC20Permit.sol (line [0](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L0))\n\n```solidity\n// SPDX-License-Identifier: MIT\n```\n\n## [N-08] Event is missing `indexed` fields\n\nEach `event` should use three `indexed` fields if there are three or more fields\n\n1.  File: src/interfaces/IAxelarGateway.sol (lines [10-16](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L10-L16))\n\n```solidity\n    event TokenSent(\n        address indexed sender,\n        string destinationChain,\n        string destinationAddress,\n        string symbol,\n        uint256 amount\n    );\n```\n\n2.  File: src/interfaces/IAxelarGateway.sol (lines [18-24](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L18-L24))\n\n```solidity\n    event ContractCall(\n        address indexed sender,\n        string destinationChain,\n        string destinationContractAddress,\n        bytes32 indexed payloadHash,\n        bytes payload\n    );\n```\n\n3.  File: src/interfaces/IAxelarGateway.sol (lines [26-34](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L26-L34))\n\n```solidity\n    event ContractCallWithToken(\n        address indexed sender,\n        string destinationChain,\n        string destinationContractAddress,\n        bytes32 indexed payloadHash,\n        bytes payload,\n        string symbol,\n        uint256 amount\n    );\n```\n\n4.  File: src/interfaces/IAxelarGateway.sol (line [38](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L38))\n\n```solidity\n    event TokenDeployed(string symbol, address tokenAddresses);\n```\n\n5.  File: src/interfaces/IAxelarGateway.sol (line [62](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L62))\n\n```solidity\n    event TokenFrozen(string symbol);\n```\n\n6.  File: src/interfaces/IAxelarGateway.sol (line [64](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGateway.sol#L64))\n\n```solidity\n    event TokenUnfrozen(string symbol);\n```\n\n7.  File: src/interfaces/IAxelarGatewayMultisig.sol (line [8](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGatewayMultisig.sol#L8))\n\n```solidity\n    event OwnershipTransferred(address[] preOwners, uint256 prevThreshold, address[] newOwners, uint256 newThreshold);\n```\n\n8.  File: src/interfaces/IAxelarGatewayMultisig.sol (lines [10-15](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IAxelarGatewayMultisig.sol#L10-L15))\n\n```solidity\n    event OperatorshipTransferred(\n        address[] preOperators,\n        uint256 prevThreshold,\n        address[] newOperators,\n        uint256 newThreshold\n    );\n```\n\n9.  File: src/interfaces/IERC20.sol (line [74](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IERC20.sol#L74))\n\n```solidity\n    event Transfer(address indexed from, address indexed to, uint256 value);\n```\n\n10. File: src/interfaces/IERC20.sol (line [80](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/interfaces/IERC20.sol#L80))\n\n```solidity\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n```\n\n## [N-09] Unsafe early return from a modifier\n\nIf the modifier is used with a function that has a named return, the default value will be returned which may lead to confusing behavior. Consider using a function instead of a modifier\n\n1.  File: src/AdminMultisigBase.sol (lines [42-44](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AdminMultisigBase.sol#L42-L44))\n\n```solidity\n        if (adminVoteCount < _getAdminThreshold(adminEpoch)) return;\n\n        _;\n```\n\n## [N-10] Consider allowing infinite approval\n\nDoing what [OpenZeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/28dd490726f045f7137fa1903b7a6b8a52d6ffcb/contracts/token/ERC20/ERC20.sol#L129-L130) does and considering `type(uint256).max` to be infinite approval may help users to create smaller transactions.\n\n1.  File: src/ERC20.sol (line [105](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ERC20.sol#L105))\n\n```solidity\n        _approve(sender, _msgSender(), allowance[sender][_msgSender()] - amount);\n```\n\n## [N-11] Consider using a two-step-transfer of ownership\n\nThe current owner would nominate a new owner, and to become the new owner, the nominated account would have to approve the change, so that the address is proven to be valid\n\n1.  File: src/Ownable.sol (line [20](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/Ownable.sol#L20))\n\n```solidity\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n```\n\n## [N-12] Consider adding a comment saying that EIP-2098 short signatures are not supported\n\n1.  File: src/ECDSA.sol (line [33](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/ECDSA.sol#L33))\n\n```solidity\n        if (signature.length != 65) revert InvalidSignatureLength();\n```\n\n**[deluca-mike (Axelar) commented](https://github.com/code-423n4/2022-04-axelar-findings/issues/38#issuecomment-1103709624):**\n > **Cross-chain replay attacks**<br>\n> Acknowledged, since just as that linked finding suggested, if Ethereum forks we will not use any minority fork, since we are dealing with (bridging) assets that cannot be split.\n> \n> **Incorrect EIP-2612 deadline check**<br>\n> Confirmed.\n> \n> **Missing checks for address(0x0) when assigning values to address state variables**<br>\n> Confirmed. Will correct by checking code length of the address, which will also help with a delegatcall elsewhere in the contract.\n> \n> **Open TODOs**<br>\n> Confirmed, will remove TODO and move the function as noted.\n> \n> **Missing contract-existence checks before low-level calls**<br>\n> 1. File: src/AxelarGateway.sol (lines [398-415](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L398-L415))\n> Disputed since that is not a low-level call, despite looking similar to one.\n> \n> 2. File: src/AxelarGatewayProxy.sol (line [19](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L19))\n> Acknowledged, but given that it is a highly-used delegatecall as part of the proxy pattern, there is no point checking if the contract exists. If it does not, we have much much larger problems.\n> \n> 3. File: src/AxelarGatewayProxy.sol (line [34](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGatewayProxy.sol#L34))\n> As above, acknowledged, but given that it is a highly-used delegatecall as part of the proxy pattern, there is no point checking if the contract exists. If it does not, we have much much larger problems.\n> \n> 4. File: src/AxelarGateway.sol (line [350](https://github.com/code-423n4/2022-04-axelar/blob/dee2f2d352e8f20f20027977d511b19bfcca23a3/src/AxelarGateway.sol#L350))\n> Confirmed, but we will solve this but doing a `if (tokenDeployerImplementation.code.length == 0) revert InvalidTokenDeployer();` in the gateway's constructor, to prevent it form ever being initialized with an invalid TokenDeployer.\n> \n> **require()/revert() statements should have descriptive reason strings**<br>\n> Confirmed, and will be fixed with adopting if-revert with custom error messages in place of all requires.\n> \n> **public functions not called by the contract should be declared external instead**<br>\n> Confirmed.\n> \n> **constants should be defined rather than using magic numbers**<br>\n> Acknowledged, but these were intentional so they could be compared to [Solidity Docs](https://docs.soliditylang.org/en/v0.8.9/control-structures.html?highlight=bytes1(0xff)#salted-contract-creations-create2) and standard ECDSA implementations.\n> \n> **Use a more recent version of solidity**<br>\n> Acknowledged, but these were all tested on 0.8.9, and this is locked in for release. The next release will take latest Solidity available at the time testing is started.\n> \n> **Multiple address mappings can be combined into a single mapping of an address to a struct, where appropriate**<br>\n> Disputed. While true, and would save gas, this would be a deviation from the ERC20 standard, and add complexity (in terms of standards and readability) for minimal gain.\n> \n> **Variable names that consist of all capital letters should be reserved for const/immutable variables**<br>\n> Confirmed. That variable should have been, and will be, made immutable.\n> \n> **File is missing NatSpec**<br>\n> Acknowledged, but more documentation will come in subsequent releases.\n> \n> **Each event should use three indexed fields if there are three or more fields**<br>\n> Acknowledged. Indexed fields actually cost a bit more gas, and should only be reserved for data that can be known ahead of time. Further, it is not yet clear which fields should be indexed, so they will only be indexed at a later release when we gather requirements. However, one should never index fields whose possible values are not part of some reasonable set (i.e. amount).\n> \n> **Unsafe early return from a modifier**<br>\n> Confirmed, however since all functions that currently use this modifier do not return data, we will just leave a comment above the modifier noting that it should be used with care.\n> \n> **Consider allowing infinite approval**<br>\n> Confirmed.\n> \n> **Consider adding a comment saying that EIP-2098 short signatures are not supported**<br>\n> Acknowledged, but such a comment would be misplaced here, and would be better in normal documentation.\n\n**[0xean (judge) commented](https://github.com/code-423n4/2022-04-axelar-findings/issues/38#issuecomment-1125338781):**\n > Severities proposed by warden seem correct.\n\n\n\n***\n\n# Gas Optimizations\n\nFor this contest, 14 reports were submitted by wardens detailing gas optimizations. The [report highlighted below](https://github.com/code-423n4/2022-04-axelar-findings/issues/39) by **IllIllI** received the top score from the judge.\n\n*The following wardens also submitted reports: [Dravee](https://github.com/code-423n4/2022-04-axelar-findings/issues/14), [CertoraInc](https://github.com/code-423n4/2022-04-axelar-findings/issues/9), [0xkatana](https://github.com/code-423n4/2022-04-axelar-findings/issues/33), [Funen](https://github.com/code-423n4/2022-04-axelar-findings/issues/29), [0xNazgul](https://github.com/code-423n4/2022-04-axelar-findings/issues/13), [ilan](https://github.com/code-423n4/2022-04-axelar-findings/issues/31), [rfa](https://github.com/code-423n4/2022-04-axelar-findings/issues/27), [rayn](https://github.com/code-423n4/2022-04-axelar-findings/issues/21), [Tomio](https://github.com/code-423n4/2022-04-axelar-findings/issues/32), [Chom](https://github.com/code-423n4/2022-04-axelar-findings/issues/22), [0v3rf10w](https://github.com/code-423n4/2022-04-axelar-findings/issues/2), [Hawkeye](https://github.com/code-423n4/2022-04-axelar-findings/issues/28), and [nahnah](https://github.com/code-423n4/2022-04-axelar-findings/issues/40).*\n\n## [G-01] Using `1` and `2` rather than `0` and `1` saves gas\n\nSee [this](https://github.com/code-423n4/2022-01-yield-findings/issues/102) issue from a prior contest for details\n\n1.  File: src/DepositHandler.sol (lines [6-7](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol#L6-L7))\n\n```solidity\n    uint256 internal constant IS_NOT_LOCKED = uint256(0);\n    uint256 internal constant IS_LOCKED = uint256(1);\n```\n\n## [G-02] Not using the named return variables when a function returns, wastes deployment gas\n\n1.  File: src/Context.sol (line [17](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Context.sol#L17))\n\n```solidity\n        return payable(msg.sender);\n```\n\n## [G-03] Use a more recent version of solidity\n\nUse a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value\n\nSee [original submission](https://github.com/code-423n4/2022-04-axelar-findings/issues/39) for list of instances.\n\n## [G-04] Using `bool`s for storage incurs overhead\n\n```solidity\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n```\n\n<https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27>\n\n1.  File: src/EternalStorage.sol (line [14](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/EternalStorage.sol#L14))\n\n```solidity\n    mapping(bytes32 => bool) private _boolStorage;\n```\n\n## [G-05] `<array>.length` should not be looked up in every loop of a `for`-loop\n\nEven memory arrays incur the overhead of bit tests and bit shifts to calculate the array length\n\n1.  File: src/AxelarGatewayMultisig.sol (line [118](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L118))\n\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n\n2.  File: src/AxelarGatewayMultisig.sol (line [271](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L271))\n\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n\n## [G-06] Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas\n\nSee [original submission](https://github.com/code-423n4/2022-04-axelar-findings/issues/39) for list of instances.\n\n## [G-07] `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops\n\n1.  File: src/AxelarGateway.sol (line [225](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L225))\n\n```solidity\n        for (uint256 i; i < adminCount; i++) {\n```\n\n2.  File: src/AdminMultisigBase.sol (line [51](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L51))\n\n```solidity\n        for (uint256 i; i < adminCount; i++) {\n```\n\n3.  File: src/AdminMultisigBase.sol (line [158](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L158))\n\n```solidity\n        for (uint256 i; i < adminLength; i++) {\n```\n\n4.  File: src/AxelarGatewayMultisig.sol (line [42](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L42))\n\n```solidity\n        for (uint256 i; i < accounts.length - 1; ++i) {\n```\n\n5.  File: src/AxelarGatewayMultisig.sol (line [118](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L118))\n\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n\n6.  File: src/AxelarGatewayMultisig.sol (line [140](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L140))\n\n```solidity\n        for (uint256 i; i < ownerCount; i++) {\n```\n\n7.  File: src/AxelarGatewayMultisig.sol (line [181](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L181))\n\n```solidity\n        for (uint256 i; i < accountLength; i++) {\n```\n\n8.  File: src/AxelarGatewayMultisig.sol (line [271](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L271))\n\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n\n9.  File: src/AxelarGatewayMultisig.sol (line [293](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L293))\n\n```solidity\n        for (uint256 i; i < operatorCount; i++) {\n```\n\n10. File: src/AxelarGatewayMultisig.sol (line [332](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L332))\n\n```solidity\n        for (uint256 i; i < accountLength; i++) {\n```\n\n11. File: src/AxelarGatewayMultisig.sol (line [495](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L495))\n\n```solidity\n        for (uint256 i; i < signatureCount; i++) {\n```\n\n12. File: src/AxelarGatewayMultisig.sol (line [526](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L526))\n\n```solidity\n        for (uint256 i; i < commandsLength; i++) {\n```\n\n## [G-08] `++i` costs less gas than `++i`, especially when it's used in `for`-loops (`--i`/`i--` too)\n\n1.  File: src/AxelarGateway.sol (line [225](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L225))\n\n```solidity\n        for (uint256 i; i < adminCount; i++) {\n```\n\n2.  File: src/AdminMultisigBase.sol (line [51](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L51))\n\n```solidity\n        for (uint256 i; i < adminCount; i++) {\n```\n\n3.  File: src/AdminMultisigBase.sol (line [158](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AdminMultisigBase.sol#L158))\n\n```solidity\n        for (uint256 i; i < adminLength; i++) {\n```\n\n4.  File: src/AxelarGatewayMultisig.sol (line [118](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L118))\n\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n\n5.  File: src/AxelarGatewayMultisig.sol (line [140](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L140))\n\n```solidity\n        for (uint256 i; i < ownerCount; i++) {\n```\n\n6.  File: src/AxelarGatewayMultisig.sol (line [181](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L181))\n\n```solidity\n        for (uint256 i; i < accountLength; i++) {\n```\n\n7.  File: src/AxelarGatewayMultisig.sol (line [271](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L271))\n\n```solidity\n        for (uint256 i; i < accounts.length; i++) {\n```\n\n8.  File: src/AxelarGatewayMultisig.sol (line [293](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L293))\n\n```solidity\n        for (uint256 i; i < operatorCount; i++) {\n```\n\n9.  File: src/AxelarGatewayMultisig.sol (line [332](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L332))\n\n```solidity\n        for (uint256 i; i < accountLength; i++) {\n```\n\n10. File: src/AxelarGatewayMultisig.sol (line [495](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L495))\n\n```solidity\n        for (uint256 i; i < signatureCount; i++) {\n```\n\n11. File: src/AxelarGatewayMultisig.sol (line [526](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L526))\n\n```solidity\n        for (uint256 i; i < commandsLength; i++) {\n```\n\n## [G-09] Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead\n\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\n\n<https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html><br>\nUse a larger size then downcast where needed\n\n1.  File: src/AxelarGateway.sol (line [62](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L62))\n\n```solidity\n    uint8 internal constant OLD_KEY_RETENTION = 16;\n```\n\n2.  File: src/AxelarGateway.sol (line [339](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L339))\n\n```solidity\n        uint8 decimals,\n```\n\n3.  File: src/ERC20.sol (line [43](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L43))\n\n```solidity\n    uint8 public immutable decimals;\n```\n\n4.  File: src/ERC20.sol (line [54](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L54))\n\n```solidity\n        uint8 decimals_\n```\n\n5.  File: src/AxelarGatewayMultisig.sol (line [363](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L363))\n\n```solidity\n        (string memory name, string memory symbol, uint8 decimals, uint256 cap, address tokenAddr) = abi.decode(\n```\n\n6.  File: src/BurnableMintableCappedERC20.sol (line [24](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L24))\n\n```solidity\n        uint8 decimals,\n```\n\n7.  File: src/TokenDeployer.sol (line [11](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/TokenDeployer.sol#L11))\n\n```solidity\n        uint8 decimals,\n```\n\n8.  File: src/ECDSA.sol (line [38](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ECDSA.sol#L38))\n\n```solidity\n        uint8 v;\n```\n\n9.  File: src/MintableCappedERC20.sol (line [17](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L17))\n\n```solidity\n        uint8 decimals,\n```\n\n10. File: src/ERC20Permit.sol (line [39](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol#L39))\n\n```solidity\n        uint8 v,\n```\n\n## [G-10] Expressions for constant values such as a call to `keccak256()`, should use `immutable` rather than `constant`\n\nSee [this](https://github.com/ethereum/solidity/issues/9232) issue for a detail description of the issue.\n\nSee [original submission](https://github.com/code-423n4/2022-04-axelar-findings/issues/39) for list of instances.\n\n## [G-11] Duplicated `require()`/`revert()` checks should be refactored to a modifier or function\n\n1.  File: src/ERC20.sol (line [205](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L205))\n\n```solidity\n        require(account != address(0), 'ZERO_ADDR');\n```\n\n## [G-12] State variables only set in the constructor should be declared `immutable`\n\n1.  File: src/ERC20.sol (line [40](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L40))\n\n```solidity\n    string public name;\n```\n\n2.  File: src/ERC20.sol (line [41](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol#L41))\n\n```solidity\n    string public symbol;\n```\n\n3.  File: src/MintableCappedERC20.sol (line [12](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L12))\n\n```solidity\n    uint256 public cap;\n```\n\n## [G-13] Use custom errors rather than `revert()`/`require()` strings to save deployment gas\n\n1.  File: src/ERC20.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20.sol))\n2.  File: src/DepositHandler.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/DepositHandler.sol))\n3.  File: src/BurnableMintableCappedERC20.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol))\n4.  File: src/Ownable.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Ownable.sol))\n5.  File: src/AxelarGatewayProxy.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayProxy.sol))\n6.  File: src/MintableCappedERC20.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol))\n7.  File: src/ERC20Permit.sol (Various lines throughout the [file](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/ERC20Permit.sol))\n\n## [G-14] Functions guaranteed to revert when called by normal users can be marked `payable`\n\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.\n\n1.  File: src/AxelarGateway.sol (line [234](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L234))\n\n```solidity\n    function freezeToken(string memory symbol) external override onlyAdmin {\n```\n\n2.  File: src/AxelarGateway.sol (line [240](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L240))\n\n```solidity\n    function unfreezeToken(string memory symbol) external override onlyAdmin {\n```\n\n3.  File: src/AxelarGateway.sol (line [246](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L246))\n\n```solidity\n    function freezeAllTokens() external override onlyAdmin {\n```\n\n4.  File: src/AxelarGateway.sol (line [252](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L252))\n\n```solidity\n    function unfreezeAllTokens() external override onlyAdmin {\n```\n\n5.  File: src/AxelarGateway.sol (lines [258-262](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGateway.sol#L258-L262))\n\n```solidity\n    function upgrade(\n        address newImplementation,\n        bytes32 newImplementationCodeHash,\n        bytes calldata setupParams\n    ) external override onlyAdmin {\n```\n\n6.  File: src/AxelarGatewayMultisig.sol (line [362](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L362))\n\n```solidity\n    function deployToken(bytes calldata params, bytes32) external onlySelf {\n```\n\n7.  File: src/AxelarGatewayMultisig.sol (line [371](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L371))\n\n```solidity\n    function mintToken(bytes calldata params, bytes32) external onlySelf {\n```\n\n8.  File: src/AxelarGatewayMultisig.sol (line [377](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L377))\n\n```solidity\n    function burnToken(bytes calldata params, bytes32) external onlySelf {\n```\n\n9.  File: src/AxelarGatewayMultisig.sol (line [383](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L383))\n\n```solidity\n    function approveContractCall(bytes calldata params, bytes32 commandId) external onlySelf {\n```\n\n10. File: src/AxelarGatewayMultisig.sol (line [404](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L404))\n\n```solidity\n    function approveContractCallWithMint(bytes calldata params, bytes32 commandId) external onlySelf {\n```\n\n11. File: src/AxelarGatewayMultisig.sol (line [429](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L429))\n\n```solidity\n    function transferOwnership(bytes calldata params, bytes32) external onlySelf {\n```\n\n12. File: src/AxelarGatewayMultisig.sol (line [440](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/AxelarGatewayMultisig.sol#L440))\n\n```solidity\n    function transferOperatorship(bytes calldata params, bytes32) external onlySelf {\n```\n\n13. File: src/BurnableMintableCappedERC20.sol (line [48](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/BurnableMintableCappedERC20.sol#L48))\n\n```solidity\n    function burn(bytes32 salt) public onlyOwner {\n```\n\n14. File: src/Ownable.sol (line [20](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/Ownable.sol#L20))\n\n```solidity\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n```\n\n15. File: src/MintableCappedERC20.sol (line [23](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L23))\n\n```solidity\n    function mint(address account, uint256 amount) public onlyOwner {\n```\n\n16. File: src/MintableCappedERC20.sol (line [31](https://github.com/code-423n4/2022-04-axelar/blob/f1c8bfc16f82a27797f61cb3a310c0f936dce567/src/MintableCappedERC20.sol#L31))\n\n```solidity\n    function burnFrom(address account, uint256 amount) external onlyOwner {\n```\n\n**[deluca-mike (Axelar) commented](https://github.com/code-423n4/2022-04-axelar-findings/issues/39#issuecomment-1103727112):**\n > **Using 1 and 2 rather than 0 and 1 saves gas**<br>\n> Confirmed.\n> \n> **Not using the named return variables when a function returns, wastes deployment gas**<br>\n> Disputed, since in most cases it does not actually cost more gas, however, we are removing the Context contract anyway.\n> \n> **Use a more recent version of solidity**<br>\n> Acknowledged, but these were all tested on 0.8.9, and this is locked in for release. The next release will take latest Solidity available at the time testing is started.\n> \n> **Using bools for storage incurs overhead**<br>\n> Acknowledged, but it's better to use bools for readability in many cases.\n> \n> **.length should not be looked up in every loop of a for-loop**<br>\n> Disputed, since recent versions of solidity optimize for this if the array has a fixed length.\n> \n> **Using calldata instead of memory for read-only arguments in external functions saves gas**<br>\n> Confirmed.\n> \n> **++i/i++ should be unchecked{++i}/unchecked{++i} when it is not possible for them to overflow, as is the case when used in for- and while-loops**<br>\n> Confirmed for using ++i instead of i++, but acknowledged for the unchecked suggestion, which we will forgo for readability, for now.\n> \n> **Usage of uints/ints smaller than 32 bytes (256 bits) incurs overhead**<br>\n> Acknowledged, but will not change since the overhead is at worst minimal, and much of this functionality/code is shared in the space. Further, it helps with readability.\n> \n> **Expressions for constant values such as a call to keccak256(), should use immutable rather than constant**<br>\n> Disputed, since the issue being referred to is 2 years old, and since then, Solidity computes the literals at compile-time.\n> \n> **Duplicated require()/revert() checks should be refactored to a modifier or function**<br>\n> Acknowledged, but will not change as this is a design preference and the compiler can optimize out duplicate code.\n> \n> **State variables only set in the constructor should be declared immutable**<br>\n> While true, and thus confirmed, for cap, this is not true, and thus disputed for strings, since non-value types cannot be immutable in Solidity (yet).\n> \n> **Use custom errors rather than revert()/require() strings to save deployment gas**<br>\n> Confirmed.\n> \n> **Functions guaranteed to revert when called by normal users can be marked payable**<br>\n> Acknowledged, but will not do since it is gas savings at the expense of confusion, readability issues, and the possibilities for ETH to be received.\n\n\n\n***\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}