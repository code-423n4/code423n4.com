{
  "circa": {
    "title": "Mellow Protocol contest",
    "sponsor": "Mellow Protocol",
    "slug": "2021-12-mellow",
    "date": "2022-02-09",
    "findings": "https://github.com/code-423n4/2021-12-mellow-findings/issues",
    "contest": 58
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Mellow Protocol contest smart contract system written in Solidity. The code contest took place between December 2—December 8 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>17 Wardens contributed reports to the Mellow Protocol contest:</p>\n<ol>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li>0x1f8b</li>\n<li>0x0x0x</li>\n<li><a href=\"https://twitter.com/Meta0xNull\">Meta0xNull</a></li>\n<li>robee</li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/cuong_qnom\">cuong_qnom</a></li>\n<li>hagrid</li>\n<li><a href=\"https://twitter.com/0x421f\">0x421f</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li>Jujic</li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a></li>\n<li>hyh</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/liam_eastwood13\">0xleastwood</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 23 unique vulnerabilities and 73 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 4 received a risk rating in the category of HIGH severity, 7 received a risk rating in the category of MEDIUM severity, and 12 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 11 non-critical recommendations and 39 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-12-mellow\">C4 Mellow Protocol contest repository</a>, and is composed of 80 smart contracts written in the Solidity programming language and includes 5400 lines of Solidity code and 3 lines of JavaScript.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-4\" style=\"position:relative;\"><a href=\"#high-risk-findings-4\" aria-label=\"high risk findings 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (4)</h1>\n<h2 id=\"h-01-yearnvaultsolpull-will-most-certainly-fail\" style=\"position:relative;\"><a href=\"#h-01-yearnvaultsolpull-will-most-certainly-fail\" aria-label=\"h 01 yearnvaultsolpull will most certainly fail permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/121\">[H-01] <code>YearnVault.sol#pull()</code> will most certainly fail</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/test_brownie/contracts/YearnVault.sol#L84-L101\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/test_brownie/contracts/YearnVault.sol#L84-L101</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_yTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">tokenAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">continue</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IYearnVault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">yToken</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IYearnVault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_yTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">yTokenAmount</span><span class=\"mtk1\"> = ((</span><span class=\"mtk12\">tokenAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] * (</span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk12\">yToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decimals</span><span class=\"mtk1\">())) / </span><span class=\"mtk12\">yToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">pricePerShare</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">yToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">yTokenAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">balance</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">yTokenAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">balance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">yTokenAmount</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">continue</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">yToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">yTokenAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">maxLoss</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">tokenAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">actualTokenAmounts</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tokenAmounts</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>The actual token withdrew from <code>yToken.withdraw()</code> will most certainly be less than the <code>tokenAmounts[i]</code>, due to precision loss in the calculation of <code>yTokenAmount</code>.</p>\n<p>As a result, <code>IERC20(_vaultTokens[i]).safeTransfer(to, actualTokenAmounts[i]);</code> in <code>LpIssuer.sol#withdraw()</code> will revert due to insufficant balance.</p>\n<h4 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">tokenAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">yToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">yTokenAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">maxLoss</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/121#issuecomment-1005637681\">MihanixA (Mellow Protocol) confirmed and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Actually I don’t see how this could lead to fund loss. I think this one is a bug.\n@0xleastwood what do you think? </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/121#issuecomment-1007872447\">0xleastwood (judge) commented</a>:</strong></p>\n<blockquote>\n<p>my understanding is that users won’t be able to withdraw pushed funds @MihanixA </p>\n<p>so fund loss is related to not being able to withdraw rather than by extracting value from the protocol</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/121#issuecomment-1030698636\">Oxn1ck (Mellow Protocol) commented</a>:</strong></p>\n<blockquote>\n<p>While we agree that this will prevent full withdrawal of the funds, that wil be limited to only a couple of wei’s which is the yearn precision loss. So in case you put 100eth you will be able to recover 100eth - 1wei. So we’d rather name the issue “some small amounts cannot be withdrawn from the pool”</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/121#issuecomment-1030720307\">0xleastwood (judge) commented</a>:</strong></p>\n<blockquote>\n<p>If my understanding is correct, <code>YearnVault._pull</code> will withdraw <code>yTokenAmount</code> representing the yToken’s shares and then withdraw on this amount but return <code>tokenAmounts</code> where the amount withdrawn is typically less than the amount intended to be withdrawn. <code>LpIssuer.withdraw()</code> will expect <code>actualTokenAmounts</code> to be available to be transferred which isn’t exactly in the contract’s balance.</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/YearnVault.sol#L90\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/YearnVault.sol#L90</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L152\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L152</a></li>\n</ul>\n<p>Let’s use an example:</p>\n<ul>\n<li>Alice calls <code>LpIssuer.withdraw()</code> with <code>tokensAmount[0]</code> equal to 100 tokens. Let’s ignore the <code>lpTokenAmount</code> argument for the sake of this example.</li>\n<li><code>_subvault().pull</code> is called on this <code>tokensAmount[0]</code>.</li>\n<li><code>yTokenAmount</code> is calculated according to <code>((tokenAmounts[i] * (10**yToken.decimals())) / yToken.pricePerShare());</code> which potentially leads to a slightly truncated output.</li>\n<li>This truncated output represents the shares belonging to the user which is then parsed to <code>yToken.withdraw()</code>.</li>\n<li><code>yToken.withdraw()</code> is likely less than 100 tokens and is sent to the <code>LpIssuer.sol</code> contract but <code>actualTokenAmounts[0]</code> is equal to 100 tokens.</li>\n<li><code>LpIssuer.withdraw()</code> attempts to send tokens to the withdrawer but is unable as the contract does not have sufficient balance. <code>IERC20(_vaultTokens[i]).safeTransfer(to, actualTokenAmounts[i]);</code></li>\n<li>If I’m not mistaken, it seems like this issue would be apparent on any withdrawal amount (assuming there is some amount truncated).</li>\n<li>There is also an important edge case where the amount to withdraw from the yearn vault is greater than the available contract balance, it will always revert.</li>\n</ul>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/121#issuecomment-1032415580\">Oxn1ck (Mellow Protocol) commented</a>:</strong></p>\n<blockquote>\n<p>Agreed, thank you!</p>\n</blockquote>\n<h2 id=\"h-02-wrong-implementation-of-performancefee-can-cause-users-to-lose-50-to-100-of-their-funds\" style=\"position:relative;\"><a href=\"#h-02-wrong-implementation-of-performancefee-can-cause-users-to-lose-50-to-100-of-their-funds\" aria-label=\"h 02 wrong implementation of performancefee can cause users to lose 50 to 100 of their funds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/91\">[H-02] Wrong implementation of <code>performanceFee</code> can cause users to lose 50% to 100% of their funds</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>A certain amount of lp tokens (shares of the vault) will be minted to the <code>strategyPerformanceTreasury</code> as <code>performanceFee</code>, the amount is calculated based on the <code>minLpPriceFactor</code>.</p>\n<p>However, the current formula for <code>toMint</code> is wrong, which issues more than 100% of the current totalSupply of the lp token to the <code>strategyPerformanceTreasury</code> each time. Causing users to lose 50% to 100% of their funds after a few times.</p>\n<p><a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L269-L271\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L269-L271</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">treasury</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">strategyParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">strategyPerformanceTreasury</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">toMint</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">baseSupply</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">minLpPriceFactor</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">CommonLibrary</span><span class=\"mtk1\">.</span><span class=\"mtk12\">DENOMINATOR</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">treasury</span><span class=\"mtk1\">, </span><span class=\"mtk12\">toMint</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Given:</p>\n<ul>\n<li><code>strategyParams.performanceFee</code>: <code>10e7</code> (1%)</li>\n<li>Alice deposited <code>1,000 USDC</code>, received <code>1000</code> lpToken; the totalSupply of the lpToken is now: <code>1000</code>;</li>\n<li>3 days later, <code>baseTvl</code> increased to <code>1,001 USDC</code>, Bob deposited <code>1 USDC</code> and trigegred <code>_chargeFees()</code>:</li>\n<li>Expected Result: <code>strategyPerformanceTreasury</code> to receive about <code>0.01</code> lpToken (1% of 1 USDC);</li>\n<li>Actual Result: <code>minLpPriceFactor</code> is about <code>1.001</code>, and <code>strategyPerformanceTreasury</code> will received <code>1001</code> lpToken as performanceFee; Alice lose 50% of deposited funds.</li>\n</ul>\n<h4 id=\"recommendation-1\" style=\"position:relative;\"><a href=\"#recommendation-1\" aria-label=\"recommendation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">treasury</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">strategyParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">strategyPerformanceTreasury</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">toMint</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">baseSupply</span><span class=\"mtk1\"> * (</span><span class=\"mtk12\">minLpPriceFactor</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">CommonLibrary</span><span class=\"mtk1\">.</span><span class=\"mtk12\">DENOMINATOR</span><span class=\"mtk1\">) * </span><span class=\"mtk12\">performanceFee</span><span class=\"mtk1\">  / </span><span class=\"mtk12\">CommonLibrary</span><span class=\"mtk1\">.</span><span class=\"mtk12\">DENOMINATOR</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">CommonLibrary</span><span class=\"mtk1\">.</span><span class=\"mtk12\">DENOMINATOR</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">treasury</span><span class=\"mtk1\">, </span><span class=\"mtk12\">toMint</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/91\">MihanixA (Mellow Protocol) confirmed</a></strong></p>\n<h2 id=\"h-03-univ3vaultsolcollectearnings-can-be-front-run\" style=\"position:relative;\"><a href=\"#h-03-univ3vaultsolcollectearnings-can-be-front-run\" aria-label=\"h 03 univ3vaultsolcollectearnings can be front run permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/98\">[H-03] <code>UniV3Vault.sol#collectEarnings()</code> can be front run</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>For <code>UniV3Vault</code>, it seems that lp fees are collected through <code>collectEarnings()</code> callable by the <code>strategy</code> and reinvested (rebalanced).</p>\n<p>However, in the current implementation, unharvested yields are not included in <code>tvl()</code>, making it vulnerable to front-run attacks that steal pending yields.</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/UniV3Vault.sol#L100-L122\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/UniV3Vault.sol#L100-L122</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/UniV3Vault.sol#L80-L97\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/UniV3Vault.sol#L80-L97</a></li>\n</ul>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h4>\n<p>Given:</p>\n<ul>\n<li>Current <code>tvl()</code> is <code>10 ETH</code> and <code>40,000 USDC</code>;</li>\n<li>Current unclaimed yields (trading fees) is <code>1 ETH</code> and <code>4,000 USDC</code>;</li>\n<li><code>strategy</code> calls <code>collectEarnings()</code> to collect fees and reinvest;</li>\n<li>The attacker sends a deposit tx with a higher gas price to deposit <code>10 ETH</code> and <code>40,000 USDC</code>, take 50% share of the pool;</li>\n<li>After the transaction in step 1 is packed, the attacker calls <code>withdraw()</code> and retrieves <code>10.5 ETH</code> and <code>42,000 USDC</code>.</li>\n</ul>\n<p>As a result, the attacker has stolen half of the pending yields in about 1 block of time.</p>\n<h4 id=\"recommendation-2\" style=\"position:relative;\"><a href=\"#recommendation-2\" aria-label=\"recommendation 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Consider including fees in <code>tvl()</code>.</p>\n<p>For the code to calculate fees earned, please reference <code>_computeFeesEarned()</code> in G-UNI project:</p>\n<ul>\n<li><a href=\"https://github.com/gelatodigital/g-uni-v1-core/blob/master/contracts/GUniPool.sol#L762-L806\">https://github.com/gelatodigital/g-uni-v1-core/blob/master/contracts/GUniPool.sol#L762-L806</a></li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/98#issuecomment-995467521\">MihanixA (Mellow Protocol) confirmed</a>:</strong></p>\n<blockquote>\n<p>Thanks!\nAdded <code>tokensOwed</code> to <code>UniV3Vault</code>’s <code>tvl</code> </p>\n</blockquote>\n<h2 id=\"h-04-aavevault-does-not-update-tvl-on-depositwithdraw\" style=\"position:relative;\"><a href=\"#h-04-aavevault-does-not-update-tvl-on-depositwithdraw\" aria-label=\"h 04 aavevault does not update tvl on depositwithdraw permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/41\">[H-04] AaveVault does not update TVL on deposit/withdraw</a></h2>\n<p><em>Submitted by cmichel, also found by WatchPug</em></p>\n<p>Aave uses <strong>rebasing</strong> tokens which means the token balance <code>aToken.balanceOf(this)</code> increases over time with the accrued interest.</p>\n<p>The <code>AaveVault.tvl</code> uses a cached value that needs to be updated using a <code>updateTvls</code> call.</p>\n<p>This call is not done when depositing tokens which allows an attacker to deposit tokens, get a fair share <em>of the old tvl</em>, update the tvl to include the interest, and then withdraw the LP tokens receiving a larger share of the <em>new tvl</em>, receiving back their initial deposit + the share of the interest.\nThis can be done risk-free in a single transaction.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h4>\n<ul>\n<li>Imagine an Aave Vault with a single vault token, and current TVL = <code>1,000 aTokens</code></li>\n<li>Attacker calls <code>LPIssuer.push([1000])</code>. This loads the old, cached <code>tvl</code>. No <code>updateTvl</code> is called.</li>\n<li>The <code>1000</code> underlying tokens are already balanced as there’s only one aToken, then the entire amount is pushed: <code>aaveVault.transferAndPush([1000])</code>. This deposists <code>1000</code> underlying tokens to the Aave lending pool and returns <code>actualTokenAmounts = [1000]</code>. <strong>After that</strong> the internal <code>_tvls</code> variable is updated with the latest aTokens. This includes the 1000 aTokens just deposited <strong>but also the new rebased aToken amounts</strong>, the interest the vault received from supplying the tokens since last <code>updateTvls</code> call. <code>_tvls = _tvls + interest + 1000</code></li>\n<li>The LP amount to mint <code>amountToMint</code> is still calculated on the old cached <code>tvl</code> memory variable, i.e., attacker receives <code>amount / oldTvl = 1000/1000 = 100%</code> of existing LP supply</li>\n<li>Attacker withdraws the LP tokens for 50% of the new TVL (it has been updated in <code>deposit</code>’s <code>transferAndPush</code> call). Attacker receives <code>50% * _newTvl = 50% * (2,000 + interest) = 1000 + 0.5 * interest</code>.</li>\n<li>Attacker makes a profit of <code>0.5 * interest</code></li>\n</ul>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The interest since the last TVL storage update can be stolen as Aave uses rebasing tokens but the tvl is not first recomputed when depositing.\nIf the vaults experience low activity a significant amount of interest can accrue which can all be captured by taking a flashloan and depositing and withdrawing a large amount to capture a large share of this interest</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Update the tvl when depositing and withdrawing before doing anything else.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/41\">MihanixA (Mellow Protocol) confirmed</a></strong></p>\n<h1 id=\"medium-risk-findings-7\" style=\"position:relative;\"><a href=\"#medium-risk-findings-7\" aria-label=\"medium risk findings 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (7)</h1>\n<h2 id=\"m-01-user-deposits-dont-have-min-return-checks\" style=\"position:relative;\"><a href=\"#m-01-user-deposits-dont-have-min-return-checks\" aria-label=\"m 01 user deposits dont have min return checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/46\">[M-01] User deposits don’t have min. return checks</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>LPIssuer.deposit</code> first computes <em>balanced amounts</em> on the user’s defined <code>tokenAmounts</code>.\nThe idea is that LP tokens give the same percentage share of each vault tokens’ tvl, therefore the provided amounts should be <em>balanced</em>, meaning, the <code>depositAmount / tvl</code> ratio should be equal for all vault tokens.</p>\n<p>But the strategist can frontrun the user’s deposit and rebalance the vault tokens, changing the tvl for each vault token which changes the rebalance.\nThis frontrun can happen accidentally whenever the strategist rebalances</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h4>\n<p>There’s a vault with two tokens A and B, tvls are <code>[500, 1500]</code></p>\n<ul>\n<li>The user provides <code>[500, 1500]</code>, expecting to get 50% of the share supply (is minted 100% of old total supply).</li>\n<li>The strategist rebalances to <code>[1000, 1000]</code></li>\n<li>The user’s balanceFactor is <code>min(500/1000, 1500/1000) = 1/2</code>, their balancedAmounts are thus <code>tvl * balanceFactor = [500, 500]</code>, the <code>1000</code> excess token B are refunded. In the end, they only received <code>500/(1000+500) = 33.3%</code> of the total supply but used up all of their token A which they might have wanted to hold on to if they had known they’d only get 33.3% of the supply.</li>\n</ul>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Users can get rekt when depositing as the received LP amount is unpredictable and lead to a trade using a very different balanced token mix that they never intended.</p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add minimum return amount checks.\nAccept a function parameter that can be chosen by the user indicating their <em>expected LP amount</em> for their deposit <code>tokenAmounts</code>, then check that the actually minted LP token amount is above this parameter.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/46\">MihanixA (Mellow Protocol) confirmed</a></strong></p>\n<h2 id=\"m-02-withdraw-from-aavevault-will-receive-less-than-actual-share\" style=\"position:relative;\"><a href=\"#m-02-withdraw-from-aavevault-will-receive-less-than-actual-share\" aria-label=\"m 02 withdraw from aavevault will receive less than actual share permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/82\">[M-02] Withdraw from <code>AaveVault</code> will receive less than actual share</a></h2>\n<p><em>Submitted by gzeon</em></p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p><code>AaveVault</code> cache <code>tvl</code> and update it at the end of each <code>_push</code> and <code>_pull</code>. When withdrawing from <code>LpIssuer</code>,  <code>tokenAmounts</code> is calculated using the cached <code>tvl</code> to be pulled from <code>AaveVault</code>. This will lead to user missing out their share of the accrued interest / donations to Aave since the last <code>updateTvls</code>.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L150\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L150</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/AaveVault.sol#L13\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/AaveVault.sol#L13</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Call <code>updateTvls</code> at the beginning of <code>withdraw</code> function if the <code>_subvault</code> will cache tvl</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/82\">MihanixA (Mellow Protocol) confirmed</a></strong></p>\n<h2 id=\"m-03-users-can-avoid-paying-vault-fees\" style=\"position:relative;\"><a href=\"#m-03-users-can-avoid-paying-vault-fees\" aria-label=\"m 03 users can avoid paying vault fees permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/47\">[M-03] Users can avoid paying vault fees</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>LPIssuer.deposit/withdraw</code> function charges protocol&#x26;management&#x26;performance fees through inflating the LP supply in the <code>_chargeFees</code> function.\nHowever, this LP fees minting is skipped if the elapsed time is less than the <code>managementFeeChargeDelay</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">elapsed</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">vg</span><span class=\"mtk1\">.</span><span class=\"mtk11\">delayedProtocolParams</span><span class=\"mtk1\">().</span><span class=\"mtk12\">managementFeeChargeDelay</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>This allows a user to avoid paying any fees if they deposit right after a charge fee interaction and withdraw within again <code>managementFeeChargeDelay</code> time period.</p>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h4>\n<p>This can be abused heavily on networks where the gas fees are a lot cheaper than the three vault fees:</p>\n<ul>\n<li>deposit a tiny amount just to trigger the charge fees. This sets <code>lastFeeCharge</code></li>\n<li>deposit a huge amount, tvl increases significantly</li>\n<li>let it earn interest. withdraw it before the <code>managementFeeChargeDelay</code>. No fees are paid, tvl reduces significantly</li>\n<li>repeat, fees are only paid on tiny tvl</li>\n</ul>\n<h4 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>In the worst case, nobody pays fees by repeating the above actions.</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Fees must always be charged on each deposit and withdrawal, even within the same block as it could be that a huge interest “harvest” comes in that an attacker sandwiches.\nRemove the <code>if (elapsed &#x3C; vg.delayedProtocolParams().managementFeeChargeDelay) { return; }</code> code.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/47#issuecomment-999373852\">MihanixA (Mellow Protocol) disputed</a>:</strong></p>\n<blockquote>\n<p>Charging fees on every deposit costs a lot of gas.\nIf we notice users avoid paying fees we would just switch <code>managementFeeChargeDelay</code> to zero. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/47#issuecomment-1005658252\">0xleastwood (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I don’t think this is a valid reason. At the end of the day, users can still abuse this feature and it is best to think about worse case scenario. I’ll keep this issue as <code>high</code> severity unless there is any reason not to? @MihanixA </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/47#issuecomment-1005665074\">MihanixA (Mellow Protocol) commented</a>:</strong></p>\n<blockquote>\n<p>@0xleastwood\nNotice that users funds are not at risk and we can not remove this behaviour because this would lead to high withdraw/deposit fees.\nAnyway feel free to mark this issue anything seems fair to you.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/47#issuecomment-1005668810\">0xleastwood (judge) commented</a>:</strong></p>\n<blockquote>\n<p>While I understand funds aren’t directly at risk. It does seem like this issue can be exploited to earn additional yield at a lower opportunity cost as the user does not pay fees.</p>\n<p>I think I’ll mark this as <code>medium</code> then.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2 — Med (M): vulns have a risk of 2 and are considered “Medium” severity when assets are not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</span></span></code></pre>\n</blockquote>\n<h2 id=\"m-04-chieftradersol-wrong-implementation-of-swapexactinput-and-swapexactoutput\" style=\"position:relative;\"><a href=\"#m-04-chieftradersol-wrong-implementation-of-swapexactinput-and-swapexactoutput\" aria-label=\"m 04 chieftradersol wrong implementation of swapexactinput and swapexactoutput permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/108\">[M-04] <code>ChiefTrader.sol</code> Wrong implementation of <code>swapExactInput()</code> and <code>swapExactOutput()</code></a></h2>\n<p><em>Submitted by WatchPug, also found by Meta0xNull</em></p>\n<p>When a caller calls <code>ChiefTrader.sol#swapExactInput()</code>, it will call <code>ITrader(traderAddress).swapExactInput()</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/ChiefTrader.sol#L59-L59\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/ChiefTrader.sol#L59-L59</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ITrader</span><span class=\"mtk1\">(</span><span class=\"mtk12\">traderAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">swapExactInput</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">path</span><span class=\"mtk1\">, </span><span class=\"mtk12\">options</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>However, in the current implementation, <code>inputToken</code> is not approved to the <code>traderAddress</code>.</p>\n<p>For example, in <code>UniV3Trader.sol#_swapExactInputSingle</code>, at L89, it tries to transfer inputToken from <code>msg.sender</code> (which is <code>ChiefTrader</code>), since it’s not approved, this will revert.</p>\n<p>Plus, the <code>inputToken</code> should also be transferred from the caller before calling the subtrader.</p>\n<p><a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/UniV3Trader.sol#L89-L89\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/UniV3Trader.sol#L89-L89</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">input</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The same problem exists in <code>swapExactOutput()</code>:</p>\n<p><a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/ChiefTrader.sol#L63-L75\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/ChiefTrader.sol#L63-L75</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">swapExactOutput</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">traderId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">PathItem</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">path</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">options</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">traderId</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_traders</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">, </span><span class=\"mtk12\">TraderExceptionsLibrary</span><span class=\"mtk1\">.</span><span class=\"mtk12\">TRADER_NOT_FOUND_EXCEPTION</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_requireAllowedTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">path</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">traderAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_traders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">traderId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ITrader</span><span class=\"mtk1\">(</span><span class=\"mtk12\">traderAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">swapExactOutput</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">path</span><span class=\"mtk1\">, </span><span class=\"mtk12\">options</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommendation-3\" style=\"position:relative;\"><a href=\"#recommendation-3\" aria-label=\"recommendation 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Approve the <code>inputToken</code> to the subtrader and transfer from the caller before calling <code>ITrader.swapExactInput()</code> and <code>ITrader.swapExactOutput()</code>.</p>\n<p>Or maybe just remove support of <code>swapExactInput()</code> and <code>swapExactOutput()</code> in <code>ChiefTrader</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/108#issuecomment-995456401\">MihanixA (Mellow Protocol) confirmed</a>:</strong></p>\n<blockquote>\n<p>In fact, tokens are approved to the trader <a href=\"https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/ERC20Vault.sol#L67\">https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/ERC20Vault.sol#L67</a>\nThe problem is that <code>safeTransferFrom</code> uses <code>msg.sender</code> which is <code>ChiefTrader</code> instead of <code>recipient</code> which is <code>ERC20Vault</code>.</p>\n</blockquote>\n<h2 id=\"m-05-admin-can-break-_numberofvalidtokens\" style=\"position:relative;\"><a href=\"#m-05-admin-can-break-_numberofvalidtokens\" aria-label=\"m 05 admin can break _numberofvalidtokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/49\">[M-05] Admin can break <code>_numberOfValidTokens</code></a></h2>\n<p><em>Submitted by cmichel, also found by gzeon and 0x1f8b</em></p>\n<p>The <code>ProtocolGovernance._numberOfValidTokens</code> can be decreased by the admin in the <code>ProtocolGovernance.removeFromTokenWhitelist</code> function:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">removeFromTokenWhitelist</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">addr</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">isAdmin</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;ADM&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_tokensAllowed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">addr</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_tokenEverAdded</span><span class=\"mtk1\">[</span><span class=\"mtk12\">addr</span><span class=\"mtk1\">]) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// @audit admin can repeatedly call this function and sets _numberOfValidTokens to zero. because they don&#39;t flip _tokenEverAdded[addr] here</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        --</span><span class=\"mtk12\">_numberOfValidTokens</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>This function can be called repeatedly until the <code>_numberOfValidTokens</code> is zero.</p>\n<h4 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>_numberOfValidTokens</code> is wrong and with it the <code>tokenWhitelist()</code>.</p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>It seems that <code>_numberOfValidTokens</code> should only be decreased if the token was previously allowed:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">removeFromTokenWhitelist</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">addr</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">isAdmin</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;ADM&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_tokensAllowed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">addr</span><span class=\"mtk1\">]) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_tokensAllowed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">addr</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        --</span><span class=\"mtk12\">_numberOfValidTokens</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/49#issuecomment-1005680208\">0xleastwood (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Can you confirm if this issue is valid or not? @MihanixA</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/49#issuecomment-1006252085\">0xleastwood (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Just realised this is a duplicate of another issue. Marking this as the primary issue</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/49#issuecomment-1006394949\">MihanixA (Mellow Protocol) commented</a>:</strong></p>\n<blockquote>\n<p>@0xleastwood Confirmed, it’s a bug.</p>\n</blockquote>\n<h2 id=\"m-06-uniswapv3s-path-issue-for-swapexactoutput\" style=\"position:relative;\"><a href=\"#m-06-uniswapv3s-path-issue-for-swapexactoutput\" aria-label=\"m 06 uniswapv3s path issue for swapexactoutput permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/50\">[M-06] UniswapV3’s path issue for <code>swapExactOutput</code></a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>UniswapV3 expects a path object like <code>(tokenA, feeAB, tokenB, feeBC, tokenC)</code>.\nThe <code>UniV3Trader.swapExactOutput</code> code tries to reverse this path to get to <code>(tokenC, feeBC, tokenB, feeAB, tokenA)</code> but that’s not what the <code>_reverseBytes</code> function does.\nNote that it reverts the entire encoded <code>path</code> byte array <strong>byte-by-byte</strong> which breaks the byte-order in a token.\nFor example, <code>tokenA</code> would have every single byte reversed and lead to a different token.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_reverseBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">input</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">output</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/** </span><span class=\"mtk4\">@audit</span><span class=\"mtk3\"> reverses byte order? */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">input</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) </span><span class=\"mtk12\">output</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">input</span><span class=\"mtk1\">[</span><span class=\"mtk12\">input</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>UniV3Trader.swapExactOutput</code> function with multi-hops is broken and cannot be used.</p>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Don’t reverse the path byte-by-byte but element-by-element.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/50#issuecomment-1005680245\">0xleastwood (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Can you confirm if this issue is valid or not? @MihanixA</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/50#issuecomment-1006253424\">0xleastwood (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I actually agree with the warden’s finding here. Leaving as is.</p>\n</blockquote>\n<h2 id=\"m-07-bad-redirects-can-make-it-impossible-to-deposit--withdraw\" style=\"position:relative;\"><a href=\"#m-07-bad-redirects-can-make-it-impossible-to-deposit--withdraw\" aria-label=\"m 07 bad redirects can make it impossible to deposit  withdraw permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/44\">[M-07] Bad redirects can make it impossible to deposit &#x26; withdraw</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>GatewayVault._push()</code> function gets <code>redirects</code> from the <code>strategyParams</code>.\nIf <code>redirects[i] = j</code>, vault index <code>i</code>’s deposits are redirected to vault index <code>j</code>.</p>\n<p>Note that the deposits for vault index <code>i</code> are cleared, as they are redirected:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_vaultTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vaultIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_subvaultNftsIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">strategyParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">redirects</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">amountsByVault</span><span class=\"mtk1\">[</span><span class=\"mtk12\">vaultIndex</span><span class=\"mtk1\">][</span><span class=\"mtk12\">j</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">amountsByVault</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">][</span><span class=\"mtk12\">j</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">amountsByVault</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">][</span><span class=\"mtk12\">j</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<blockquote>\n<p>The same is true for withdrawals in the <code>_pull</code> function. Users might not be able to withdraw this way.</p>\n</blockquote>\n<p>If the <code>redirects</code> array is misconfigured, it’s possible that all <code>amountsByVault</code> are set to zero.\nFor example, if <code>0</code> redirects to <code>1</code> and <code>1</code> redirects to <code>0</code>. Or <code>0</code> redirects to itself, etc.\nThere are many misconfigurations that can lead to not being able to deposit to the pool anymore.</p>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The <code>redirects[i] = j</code> matrix needs to be restricted.\nIf <code>i</code> is redirected to <code>j</code>, <code>j</code> may not redirect itself.\nCheck for this when setting the <code>redirects</code> array.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/44#issuecomment-1005680123\">0xleastwood (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Can you confirm if this issue is valid or not? @MihanixA </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/44#issuecomment-1006406574\">MihanixA (Mellow Protocol) confirmed</a>:</strong></p>\n<blockquote>\n<p>@0xleastwood Confirmed</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/44#issuecomment-1006407377\">MihanixA (Mellow Protocol) commented</a>:</strong></p>\n<blockquote>\n<p>(notice that this one is a deploy-related issue)</p>\n</blockquote>\n<h1 id=\"low-risk-findings-12\" style=\"position:relative;\"><a href=\"#low-risk-findings-12\" aria-label=\"low risk findings 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (12)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/111\">[L-01] <code>UniV3Vault</code> does not distribute fee earning to depositor</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/22\">[L-02] Wrong logic in UniV3Trader</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/88\">[L-03] Unsafe token transfer</a> <em>Submitted by WatchPug, also found by defsec, cuong</em>qnom, 0x0x0x, cmichel, and pmerkleplant_</li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/20\">[L-04] Learn from the past</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/27\">[L-05] Potential DOS with Division By Zero on <code>LpIssuer</code></a> <em>Submitted by hagrid</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/65\">[L-06] <code>maxTokensPerVault</code> is not used</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/115\">[L-07]  The Contract Should Approve(0) first</a> <em>Submitted by defsec, also found by Jujic and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/119\">[L-08] <code>AaveVault.sol#_pull()</code> may return wrong <code>actualTokenAmounts</code></a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/48\">[L-09] Wrong logic in <code>tokenWhitelist()</code>?</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/105\">[L-10] Guard for initialization function of VaultGovernance</a> <em>Submitted by cuong</em>qnom_</li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/84\">[L-11] <code>YearnVault</code> did not cache tvl as comment described</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/117\">[L-12] adminApprove will not work</a> <em>Submitted by pauliax</em></li>\n</ul>\n<h1 id=\"non-critical-findings-11\" style=\"position:relative;\"><a href=\"#non-critical-findings-11\" aria-label=\"non critical findings 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (11)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/130\">[N-01] What you guys mean by this line ? Its redundant imo</a> <em>Submitted by 0x421f</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/76\">[N-02] Initialization with empty <code>_symbol</code></a> <em>Submitted by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/16\">[N-03] Open TODOs</a> <em>Submitted by robee, also found by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/15\">[N-04] safeApprove of openZeppelin is deprecated</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/17\">[N-05] Solidity compiler versions mismatch</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/45\">[N-06] <code>GatewayVault</code> events not used</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/11\">[N-07] Require with empty message</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/19\">[N-08] Missing zero-address checks on contract construction</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/100\">[N-09] Outdated compiler version</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/106\">[N-10] These functions can be made modifier</a> <em>Submitted by cuong</em>qnom_</li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/38\">[N-11] withdraw() Validate lpTokenAmount At Beginning of Function Can Save Gas</a> <em>Submitted by Meta0xNull</em></li>\n</ul>\n<h1 id=\"gas-optimizations-39\" style=\"position:relative;\"><a href=\"#gas-optimizations-39\" aria-label=\"gas optimizations 39 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (39)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/63\">[G-01] <code>+= 1</code> costs extra gas</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/64\">[G-02] Optimize <code>baseSupply</code> calculation in <code>_chargeFee</code></a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/66\">[G-03] Don’t cache variables used only once</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/73\">[G-04] Loops can be implemented more efficiently</a> <em>Submitted by 0x0x0x, also found by Jujic, WatchPug, pmerkleplant, and gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/92\">[G-05] Use immutable variables can save gas</a> <em>Submitted by WatchPug, also found by robee and 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/122\">[G-06]  Constant variables can be immutable (DefaultAccessControl.sol)</a> <em>Submitted by ye0lde, also found by gzeon and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/103\">[G-07] Declaring unnecessary immutable variables as constant can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/71\">[G-08] There is no need to assign default values to variables</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/60\">[G-09] Gas Optimization: Use != 0 instead of > 0</a> <em>Submitted by gzeon, also found by 0x0x0x, Jujic, pmerkleplant, and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/21\">[G-10] Store Interface instead of address</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/26\">[G-11] Don’t check contains before remove II</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/127\">[G-12] Skip initialization of factory address in vault governance by predicting it before hand</a> <em>Submitted by 0x421f</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/129\">[G-13] No need of separate indexing (NFT_ID => Vault Address)</a> <em>Submitted by 0x421f</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/132\">[G-14] Make deposit efficient </a> <em>Submitted by 0x421f</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/133\">[G-15] Migrate from NonFungiblePositionManager to UniV3Pool directly</a> <em>Submitted by 0x421f</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/54\">[G-16] A more efficient for loop index proceeding</a> <em>Submitted by Jujic, also found by defsec and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/101\">[G-17] Unnecessary checked arithmetic in for loops</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/102\">[G-18] Adding unchecked directive can save gas</a> <em>Submitted by WatchPug, also found by Jujic and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/32\">[G-19] ExceptionsLibrary.sol Shorten Revert Strings to Save Gas</a> <em>Submitted by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/34\">[G-20] Remove ADMIN<em>DELEGATE</em>ROLE to Save Gas</a> <em>Submitted by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/81\">[G-21] Use of _msgSender()</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/78\">[G-22] Use <code>calldata</code> instead of <code>memory</code> for function parameters</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/104\">[G-23] Use literal <code>2</code> instead of read from storage for <code>_vaultTokens.length</code> can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/86\">[G-24] Setting <code>uint256</code> variables to <code>0</code> is redundant</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/89\">[G-25] Cache external call results can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/90\">[G-26] <code>LpIssuer.sol#_chargeFees()</code> Check <code>if (performanceFee > 0)</code> can be done earlier to save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/93\">[G-27] Remove unnecessary variables can make the code simpler and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/96\">[G-28] Cache storage variables in the stack can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/51\">[G-29] Gas: <code>GatewayVault._pull</code> can skip redirected</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/52\">[G-30] Gas: Cache <code>_pendingTokenWhitelistAdd[i]</code></a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/53\">[G-31] Gas: Unnecessary zero writes</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/59\">[G-32] Gas Optimization: Pack <code>Params</code> struct in <code>IProtocolGovernance</code></a> <em>Submitted by gzeon, also found by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/118\">[G-33] pre-calculate expressions that do not change</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/1\">[G-34] Unused imports</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/10\">[G-35] Unnecessary array boundaries check when loading an array element twice</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/6\">[G-36] Storage double reading. Could save SLOAD</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/7\">[G-37] Internal functions to private</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/8\">[G-38] Public functions to external</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-mellow-findings/issues/123\">[G-39] Save Gas With The Unchecked Keyword</a> <em>Submitted by ye0lde</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-4\">High Risk Findings (4)</a></p>\n<ul>\n<li><a href=\"#h-01-yearnvaultsolpull-will-most-certainly-fail\">[H-01] <code>YearnVault.sol#pull()</code> will most certainly fail</a></li>\n<li><a href=\"#h-02-wrong-implementation-of-performancefee-can-cause-users-to-lose-50-to-100-of-their-funds\">[H-02] Wrong implementation of <code>performanceFee</code> can cause users to lose 50% to 100% of their funds</a></li>\n<li><a href=\"#h-03-univ3vaultsolcollectearnings-can-be-front-run\">[H-03] <code>UniV3Vault.sol#collectEarnings()</code> can be front run</a></li>\n<li><a href=\"#h-04-aavevault-does-not-update-tvl-on-depositwithdraw\">[H-04] AaveVault does not update TVL on deposit/withdraw</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-7\">Medium Risk Findings (7)</a></p>\n<ul>\n<li><a href=\"#m-01-user-deposits-dont-have-min-return-checks\">[M-01] User deposits don’t have min. return checks</a></li>\n<li><a href=\"#m-02-withdraw-from-aavevault-will-receive-less-than-actual-share\">[M-02] Withdraw from <code>AaveVault</code> will receive less than actual share</a></li>\n<li><a href=\"#m-03-users-can-avoid-paying-vault-fees\">[M-03] Users can avoid paying vault fees</a></li>\n<li><a href=\"#m-04-chieftradersol-wrong-implementation-of-swapexactinput-and-swapexactoutput\">[M-04] <code>ChiefTrader.sol</code> Wrong implementation of <code>swapExactInput()</code> and <code>swapExactOutput()</code></a></li>\n<li><a href=\"#m-05-admin-can-break-_numberofvalidtokens\">[M-05] Admin can break <code>_numberOfValidTokens</code></a></li>\n<li><a href=\"#m-06-uniswapv3s-path-issue-for-swapexactoutput\">[M-06] UniswapV3’s path issue for <code>swapExactOutput</code></a></li>\n<li><a href=\"#m-07-bad-redirects-can-make-it-impossible-to-deposit--withdraw\">[M-07] Bad redirects can make it impossible to deposit &#x26; withdraw</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-12\">Low Risk Findings (12)</a></li>\n<li><a href=\"#non-critical-findings-11\">Non-Critical Findings (11)</a></li>\n<li><a href=\"#gas-optimizations-39\">Gas Optimizations (39)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of Mellow Protocol contest smart contract system written in Solidity. The code contest took place between December 2—December 8 2021.\n\n## Wardens\n\n17 Wardens contributed reports to the Mellow Protocol contest:\n\n1. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n1. [cmichel](https://twitter.com/cmichelio)\n1. [gzeon](https://twitter.com/gzeon)\n1. 0x1f8b\n1. 0x0x0x\n1. [Meta0xNull](https://twitter.com/Meta0xNull)\n1. robee\n1. [pauliax](https://twitter.com/SolidityDev)\n1. [cuong_qnom](https://twitter.com/cuong_qnom)\n1. hagrid\n1. [0x421f](https://twitter.com/0x421f)\n1. [defsec](https://twitter.com/defsec_)\n1. Jujic\n1. [ye0lde](https://twitter.com/_ye0lde)\n1. [pmerkleplant](https://twitter.com/merkleplant_eth)\n1. hyh\n\nThis contest was judged by [0xleastwood](https://twitter.com/liam_eastwood13).\n\nFinal report assembled by [itsmetechjay](https://twitter.com/itsmetechjay) and [CloudEllie](https://twitter.com/CloudEllie1).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 23 unique vulnerabilities and 73 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 4 received a risk rating in the category of HIGH severity, 7 received a risk rating in the category of MEDIUM severity, and 12 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 11 non-critical recommendations and 39 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 Mellow Protocol contest repository](https://github.com/code-423n4/2021-12-mellow), and is composed of 80 smart contracts written in the Solidity programming language and includes 5400 lines of Solidity code and 3 lines of JavaScript.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (4)\n## [[H-01] `YearnVault.sol#pull()` will most certainly fail](https://github.com/code-423n4/2021-12-mellow-findings/issues/121)\n_Submitted by WatchPug_\n\n<https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/test_brownie/contracts/YearnVault.sol#L84-L101>\n\n```solidity\n    for (uint256 i = 0; i < _yTokens.length; i++) {\n        if (tokenAmounts[i] == 0) {\n            continue;\n        }\n\n        IYearnVault yToken = IYearnVault(_yTokens[i]);\n        uint256 yTokenAmount = ((tokenAmounts[i] * (10**yToken.decimals())) / yToken.pricePerShare());\n        uint256 balance = yToken.balanceOf(address(this));\n        if (yTokenAmount > balance) {\n            yTokenAmount = balance;\n        }\n        if (yTokenAmount == 0) {\n            continue;\n        }\n        yToken.withdraw(yTokenAmount, to, maxLoss);\n        (tokenAmounts[i], address(this));\n    }\n    actualTokenAmounts = tokenAmounts;\n```\n\nThe actual token withdrew from `yToken.withdraw()` will most certainly be less than the `tokenAmounts[i]`, due to precision loss in the calculation of `yTokenAmount`.\n\nAs a result, `IERC20(_vaultTokens[i]).safeTransfer(to, actualTokenAmounts[i]);` in `LpIssuer.sol#withdraw()` will revert due to insufficant balance.\n\n#### Recommendation\n\nChange to:\n\n```solidity\ntokenAmounts[i] = yToken.withdraw(yTokenAmount, to, maxLoss);\n```\n\n**[MihanixA (Mellow Protocol) confirmed and disagreed with severity](https://github.com/code-423n4/2021-12-mellow-findings/issues/121#issuecomment-1005637681):**\n > Actually I don't see how this could lead to fund loss. I think this one is a bug.\n> @0xleastwood what do you think? \n\n**[0xleastwood (judge) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/121#issuecomment-1007872447):**\n > my understanding is that users won't be able to withdraw pushed funds @MihanixA \n > \n > so fund loss is related to not being able to withdraw rather than by extracting value from the protocol\n\n**[Oxn1ck (Mellow Protocol) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/121#issuecomment-1030698636):**\n > While we agree that this will prevent full withdrawal of the funds, that wil be limited to only a couple of wei's which is the yearn precision loss. So in case you put 100eth you will be able to recover 100eth - 1wei. So we'd rather name the issue \"some small amounts cannot be withdrawn from the pool\"\n\n**[0xleastwood (judge) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/121#issuecomment-1030720307):**\n > If my understanding is correct, `YearnVault._pull` will withdraw `yTokenAmount` representing the yToken's shares and then withdraw on this amount but return `tokenAmounts` where the amount withdrawn is typically less than the amount intended to be withdrawn. `LpIssuer.withdraw()` will expect `actualTokenAmounts` to be available to be transferred which isn't exactly in the contract's balance.\n> \n> - https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/YearnVault.sol#L90\n> - https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L152\n> \n > Let's use an example:\n> \n> - Alice calls `LpIssuer.withdraw()` with `tokensAmount[0]` equal to 100 tokens. Let's ignore the `lpTokenAmount` argument for the sake of this example.\n> - `_subvault().pull` is called on this `tokensAmount[0]`.\n> - `yTokenAmount` is calculated according to `((tokenAmounts[i] * (10**yToken.decimals())) / yToken.pricePerShare());` which potentially leads to a slightly truncated output.\n> - This truncated output represents the shares belonging to the user which is then parsed to `yToken.withdraw()`.\n> - `yToken.withdraw()` is likely less than 100 tokens and is sent to the `LpIssuer.sol` contract but `actualTokenAmounts[0]` is equal to 100 tokens.\n> - `LpIssuer.withdraw()` attempts to send tokens to the withdrawer but is unable as the contract does not have sufficient balance. `IERC20(_vaultTokens[i]).safeTransfer(to, actualTokenAmounts[i]);`\n> - If I'm not mistaken, it seems like this issue would be apparent on any withdrawal amount (assuming there is some amount truncated).\n> - There is also an important edge case where the amount to withdraw from the yearn vault is greater than the available contract balance, it will always revert.\n\n**[Oxn1ck (Mellow Protocol) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/121#issuecomment-1032415580):**\n > Agreed, thank you!\n\n\n## [[H-02] Wrong implementation of `performanceFee` can cause users to lose 50% to 100% of their funds](https://github.com/code-423n4/2021-12-mellow-findings/issues/91)\n_Submitted by WatchPug_\n\nA certain amount of lp tokens (shares of the vault) will be minted to the `strategyPerformanceTreasury` as `performanceFee`, the amount is calculated based on the `minLpPriceFactor`.\n\nHowever, the current formula for `toMint` is wrong, which issues more than 100% of the current totalSupply of the lp token to the `strategyPerformanceTreasury` each time. Causing users to lose 50% to 100% of their funds after a few times.\n\n<https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L269-L271>\n\n```solidity\naddress treasury = strategyParams.strategyPerformanceTreasury;\nuint256 toMint = (baseSupply * minLpPriceFactor) / CommonLibrary.DENOMINATOR;\n_mint(treasury, toMint);\n```\n\n#### Proof of Concept\n\nGiven:\n\n*   `strategyParams.performanceFee`: `10e7` (1%)\n\n1.  Alice deposited `1,000 USDC`, received `1000` lpToken; the totalSupply of the lpToken is now: `1000`;\n2.  3 days later, `baseTvl` increased to `1,001 USDC`, Bob deposited `1 USDC` and trigegred `_chargeFees()`:\n\n*   Expected Result: `strategyPerformanceTreasury` to receive about `0.01` lpToken (1% of 1 USDC);\n*   Actual Result: `minLpPriceFactor` is about `1.001`, and `strategyPerformanceTreasury` will received `1001` lpToken as performanceFee; Alice lose 50% of deposited funds.\n\n#### Recommendation\n\nChange to:\n\n```solidity\naddress treasury = strategyParams.strategyPerformanceTreasury;\nuint256 toMint = (baseSupply * (minLpPriceFactor - CommonLibrary.DENOMINATOR) * performanceFee  / CommonLibrary.DENOMINATOR) / CommonLibrary.DENOMINATOR;\n_mint(treasury, toMint);\n```\n\n**[MihanixA (Mellow Protocol) confirmed](https://github.com/code-423n4/2021-12-mellow-findings/issues/91)**\n\n## [[H-03] `UniV3Vault.sol#collectEarnings()` can be front run](https://github.com/code-423n4/2021-12-mellow-findings/issues/98)\n_Submitted by WatchPug_\n\nFor `UniV3Vault`, it seems that lp fees are collected through `collectEarnings()` callable by the `strategy` and reinvested (rebalanced).\n\nHowever, in the current implementation, unharvested yields are not included in `tvl()`, making it vulnerable to front-run attacks that steal pending yields.\n\n- <https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/UniV3Vault.sol#L100-L122>\n\n- <https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/UniV3Vault.sol#L80-L97>\n\n#### Proof Of Concept\n\nGiven:\n\n*   Current `tvl()` is `10 ETH` and `40,000 USDC`;\n*   Current unclaimed yields (trading fees) is `1 ETH` and `4,000 USDC`;\n\n1.  `strategy` calls `collectEarnings()` to collect fees and reinvest;\n2.  The attacker sends a deposit tx with a higher gas price to deposit `10 ETH` and `40,000 USDC`, take 50% share of the pool;\n3.  After the transaction in step 1 is packed, the attacker calls `withdraw()` and retrieves `10.5 ETH` and `42,000 USDC`.\n\nAs a result, the attacker has stolen half of the pending yields in about 1 block of time.\n\n#### Recommendation\n\nConsider including fees in `tvl()`.\n\nFor the code to calculate fees earned, please reference `_computeFeesEarned()` in G-UNI project:\n\n- <https://github.com/gelatodigital/g-uni-v1-core/blob/master/contracts/GUniPool.sol#L762-L806>\n\n**[MihanixA (Mellow Protocol) confirmed](https://github.com/code-423n4/2021-12-mellow-findings/issues/98#issuecomment-995467521):**\n > Thanks! \n> Added `tokensOwed` to `UniV3Vault`'s `tvl` \n\n\n\n## [[H-04] AaveVault does not update TVL on deposit/withdraw](https://github.com/code-423n4/2021-12-mellow-findings/issues/41)\n_Submitted by cmichel, also found by WatchPug_\n\nAave uses **rebasing** tokens which means the token balance `aToken.balanceOf(this)` increases over time with the accrued interest.\n\nThe `AaveVault.tvl` uses a cached value that needs to be updated using a `updateTvls` call.\n\nThis call is not done when depositing tokens which allows an attacker to deposit tokens, get a fair share *of the old tvl*, update the tvl to include the interest, and then withdraw the LP tokens receiving a larger share of the *new tvl*, receiving back their initial deposit + the share of the interest.\nThis can be done risk-free in a single transaction.\n\n#### Proof Of Concept\n\n*   Imagine an Aave Vault with a single vault token, and current TVL = `1,000 aTokens`\n*   Attacker calls `LPIssuer.push([1000])`. This loads the old, cached `tvl`. No `updateTvl` is called.\n*   The `1000` underlying tokens are already balanced as there's only one aToken, then the entire amount is pushed: `aaveVault.transferAndPush([1000])`. This deposists `1000` underlying tokens to the Aave lending pool and returns `actualTokenAmounts = [1000]`. **After that** the internal `_tvls` variable is updated with the latest aTokens. This includes the 1000 aTokens just deposited **but also the new rebased aToken amounts**, the interest the vault received from supplying the tokens since last `updateTvls` call. `_tvls = _tvls + interest + 1000`\n*   The LP amount to mint `amountToMint` is still calculated on the old cached `tvl` memory variable, i.e., attacker receives `amount / oldTvl = 1000/1000 = 100%` of existing LP supply\n*   Attacker withdraws the LP tokens for 50% of the new TVL (it has been updated in `deposit`'s `transferAndPush` call). Attacker receives `50% * _newTvl = 50% * (2,000 + interest) = 1000 + 0.5 * interest`.\n*   Attacker makes a profit of `0.5 * interest`\n\n#### Impact\n\nThe interest since the last TVL storage update can be stolen as Aave uses rebasing tokens but the tvl is not first recomputed when depositing.\nIf the vaults experience low activity a significant amount of interest can accrue which can all be captured by taking a flashloan and depositing and withdrawing a large amount to capture a large share of this interest\n\n#### Recommended Mitigation Steps\n\nUpdate the tvl when depositing and withdrawing before doing anything else.\n\n**[MihanixA (Mellow Protocol) confirmed](https://github.com/code-423n4/2021-12-mellow-findings/issues/41)**\n \n# Medium Risk Findings (7)\n## [[M-01] User deposits don't have min. return checks](https://github.com/code-423n4/2021-12-mellow-findings/issues/46)\n_Submitted by cmichel_\n\nThe `LPIssuer.deposit` first computes *balanced amounts* on the user's defined `tokenAmounts`.\nThe idea is that LP tokens give the same percentage share of each vault tokens' tvl, therefore the provided amounts should be *balanced*, meaning, the `depositAmount / tvl` ratio should be equal for all vault tokens.\n\nBut the strategist can frontrun the user's deposit and rebalance the vault tokens, changing the tvl for each vault token which changes the rebalance.\nThis frontrun can happen accidentally whenever the strategist rebalances\n\n#### Proof Of Concept\n\nThere's a vault with two tokens A and B, tvls are `[500, 1500]`\n\n*   The user provides `[500, 1500]`, expecting to get 50% of the share supply (is minted 100% of old total supply).\n*   The strategist rebalances to `[1000, 1000]`\n*   The user's balanceFactor is `min(500/1000, 1500/1000) = 1/2`, their balancedAmounts are thus `tvl * balanceFactor = [500, 500]`, the `1000` excess token B are refunded. In the end, they only received `500/(1000+500) = 33.3%` of the total supply but used up all of their token A which they might have wanted to hold on to if they had known they'd only get 33.3% of the supply.\n\n#### Impact\n\nUsers can get rekt when depositing as the received LP amount is unpredictable and lead to a trade using a very different balanced token mix that they never intended.\n\n#### Recommended Mitigation Steps\n\nAdd minimum return amount checks.\nAccept a function parameter that can be chosen by the user indicating their *expected LP amount* for their deposit `tokenAmounts`, then check that the actually minted LP token amount is above this parameter.\n\n**[MihanixA (Mellow Protocol) confirmed](https://github.com/code-423n4/2021-12-mellow-findings/issues/46)**\n\n## [[M-02] Withdraw from `AaveVault` will receive less than actual share](https://github.com/code-423n4/2021-12-mellow-findings/issues/82)\n_Submitted by gzeon_\n\n#### Impact\n\n`AaveVault` cache `tvl` and update it at the end of each `_push` and `_pull`. When withdrawing from `LpIssuer`,  `tokenAmounts` is calculated using the cached `tvl` to be pulled from `AaveVault`. This will lead to user missing out their share of the accrued interest / donations to Aave since the last `updateTvls`.\n\n#### Proof of Concept\n\n- <https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/LpIssuer.sol#L150>\n- <https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/AaveVault.sol#L13>\n\n#### Recommended Mitigation Steps\n\nCall `updateTvls` at the beginning of `withdraw` function if the `_subvault` will cache tvl\n\n**[MihanixA (Mellow Protocol) confirmed](https://github.com/code-423n4/2021-12-mellow-findings/issues/82)**\n\n## [[M-03] Users can avoid paying vault fees](https://github.com/code-423n4/2021-12-mellow-findings/issues/47)\n_Submitted by cmichel_\n\nThe `LPIssuer.deposit/withdraw` function charges protocol\\&management\\&performance fees through inflating the LP supply in the `_chargeFees` function.\nHowever, this LP fees minting is skipped if the elapsed time is less than the `managementFeeChargeDelay`:\n\n```solidity\nif (elapsed < vg.delayedProtocolParams().managementFeeChargeDelay) {\n    return;\n}\n```\n\nThis allows a user to avoid paying any fees if they deposit right after a charge fee interaction and withdraw within again `managementFeeChargeDelay` time period.\n\n#### Proof Of Concept\n\nThis can be abused heavily on networks where the gas fees are a lot cheaper than the three vault fees:\n\n*   deposit a tiny amount just to trigger the charge fees. This sets `lastFeeCharge`\n*   deposit a huge amount, tvl increases significantly\n*   let it earn interest. withdraw it before the `managementFeeChargeDelay`. No fees are paid, tvl reduces significantly\n*   repeat, fees are only paid on tiny tvl\n\n#### Impact\n\nIn the worst case, nobody pays fees by repeating the above actions.\n\n#### Recommended Mitigation Steps\n\nFees must always be charged on each deposit and withdrawal, even within the same block as it could be that a huge interest \"harvest\" comes in that an attacker sandwiches.\nRemove the `if (elapsed < vg.delayedProtocolParams().managementFeeChargeDelay) { return; }` code.\n\n**[MihanixA (Mellow Protocol) disputed](https://github.com/code-423n4/2021-12-mellow-findings/issues/47#issuecomment-999373852):**\n > Charging fees on every deposit costs a lot of gas. \n> If we notice users avoid paying fees we would just switch `managementFeeChargeDelay` to zero. \n\n**[0xleastwood (judge) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/47#issuecomment-1005658252):**\n > I don't think this is a valid reason. At the end of the day, users can still abuse this feature and it is best to think about worse case scenario. I'll keep this issue as `high` severity unless there is any reason not to? @MihanixA \n\n**[MihanixA (Mellow Protocol) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/47#issuecomment-1005665074):**\n > @0xleastwood \n> Notice that users funds are not at risk and we can not remove this behaviour because this would lead to high withdraw/deposit fees.\n> Anyway feel free to mark this issue anything seems fair to you.\n\n**[0xleastwood (judge) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/47#issuecomment-1005668810):**\n > While I understand funds aren't directly at risk. It does seem like this issue can be exploited to earn additional yield at a lower opportunity cost as the user does not pay fees.\n> \n> I think I'll mark this as `medium` then.\n> ```\n> 2 — Med (M): vulns have a risk of 2 and are considered “Medium” severity when assets are not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> ```\n\n\n\n## [[M-04] `ChiefTrader.sol` Wrong implementation of `swapExactInput()` and `swapExactOutput()`](https://github.com/code-423n4/2021-12-mellow-findings/issues/108)\n_Submitted by WatchPug, also found by Meta0xNull_\n\nWhen a caller calls `ChiefTrader.sol#swapExactInput()`, it will call `ITrader(traderAddress).swapExactInput()`.\n\n<https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/ChiefTrader.sol#L59-L59>\n\n```solidity\nreturn ITrader(traderAddress).swapExactInput(0, amount, recipient, path, options);\n```\n\nHowever, in the current implementation, `inputToken` is not approved to the `traderAddress`.\n\nFor example, in `UniV3Trader.sol#_swapExactInputSingle`, at L89, it tries to transfer inputToken from `msg.sender` (which is `ChiefTrader`), since it's not approved, this will revert.\n\nPlus, the `inputToken` should also be transferred from the caller before calling the subtrader.\n\n<https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/UniV3Trader.sol#L89-L89>\n\n```solidity\nIERC20(input).safeTransferFrom(msg.sender, address(this), amount);\n```\n\nThe same problem exists in `swapExactOutput()`:\n\n<https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/trader/ChiefTrader.sol#L63-L75>\n\n```solidity\nfunction swapExactOutput(\n    uint256 traderId,\n    uint256 amount,\n    address,\n    PathItem[] calldata path,\n    bytes calldata options\n) external returns (uint256) {\n    require(traderId < _traders.length, TraderExceptionsLibrary.TRADER_NOT_FOUND_EXCEPTION);\n    _requireAllowedTokens(path);\n    address traderAddress = _traders[traderId];\n    address recipient = msg.sender;\n    return ITrader(traderAddress).swapExactOutput(0, amount, recipient, path, options);\n}\n```\n\n#### Recommendation\n\nApprove the `inputToken` to the subtrader and transfer from the caller before calling `ITrader.swapExactInput()` and `ITrader.swapExactOutput()`.\n\nOr maybe just remove support of `swapExactInput()` and `swapExactOutput()` in `ChiefTrader`.\n\n**[MihanixA (Mellow Protocol) confirmed](https://github.com/code-423n4/2021-12-mellow-findings/issues/108#issuecomment-995456401):**\n > In fact, tokens are approved to the trader https://github.com/code-423n4/2021-12-mellow/blob/6679e2dd118b33481ee81ad013ece4ea723327b5/mellow-vaults/contracts/ERC20Vault.sol#L67\n> The problem is that `safeTransferFrom` uses `msg.sender` which is `ChiefTrader` instead of `recipient` which is `ERC20Vault`.\n\n\n\n## [[M-05] Admin can break `_numberOfValidTokens`](https://github.com/code-423n4/2021-12-mellow-findings/issues/49)\n_Submitted by cmichel, also found by gzeon and 0x1f8b_\n\nThe `ProtocolGovernance._numberOfValidTokens` can be decreased by the admin in the `ProtocolGovernance.removeFromTokenWhitelist` function:\n\n```solidity\nfunction removeFromTokenWhitelist(address addr) external {\n    require(isAdmin(msg.sender), \"ADM\");\n    _tokensAllowed[addr] = false;\n    if (_tokenEverAdded[addr]) {\n        // @audit admin can repeatedly call this function and sets _numberOfValidTokens to zero. because they don't flip _tokenEverAdded[addr] here\n        --_numberOfValidTokens;\n    }\n}\n```\n\nThis function can be called repeatedly until the `_numberOfValidTokens` is zero.\n\n#### Impact\n\nThe `_numberOfValidTokens` is wrong and with it the `tokenWhitelist()`.\n\n#### Recommended Mitigation Steps\n\nIt seems that `_numberOfValidTokens` should only be decreased if the token was previously allowed:\n\n```solidity\nfunction removeFromTokenWhitelist(address addr) external {\n    require(isAdmin(msg.sender), \"ADM\");\n    if (_tokensAllowed[addr]) {\n        _tokensAllowed[addr] = false;\n        --_numberOfValidTokens;\n    }\n}\n```\n\n**[0xleastwood (judge) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/49#issuecomment-1005680208):**\n > Can you confirm if this issue is valid or not? @MihanixA\n\n**[0xleastwood (judge) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/49#issuecomment-1006252085):**\n > Just realised this is a duplicate of another issue. Marking this as the primary issue\n\n**[MihanixA (Mellow Protocol) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/49#issuecomment-1006394949):**\n > @0xleastwood Confirmed, it's a bug.\n\n\n\n## [[M-06] UniswapV3's path issue for `swapExactOutput`](https://github.com/code-423n4/2021-12-mellow-findings/issues/50)\n_Submitted by cmichel_\n\nUniswapV3 expects a path object like `(tokenA, feeAB, tokenB, feeBC, tokenC)`.\nThe `UniV3Trader.swapExactOutput` code tries to reverse this path to get to `(tokenC, feeBC, tokenB, feeAB, tokenA)` but that's not what the `_reverseBytes` function does.\nNote that it reverts the entire encoded `path` byte array **byte-by-byte** which breaks the byte-order in a token.\nFor example, `tokenA` would have every single byte reversed and lead to a different token.\n\n```solidity\nfunction _reverseBytes(bytes memory input) internal pure returns (bytes memory output) {\n    /** @audit reverses byte order? */\n    for (uint256 i = 0; i < input.length; ++i) output[i] = input[input.length - 1 - i];\n}\n```\n\n#### Impact\n\nThe `UniV3Trader.swapExactOutput` function with multi-hops is broken and cannot be used.\n\n#### Recommended Mitigation Steps\n\nDon't reverse the path byte-by-byte but element-by-element.\n\n**[0xleastwood (judge) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/50#issuecomment-1005680245):**\n > Can you confirm if this issue is valid or not? @MihanixA\n\n**[0xleastwood (judge) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/50#issuecomment-1006253424):**\n > I actually agree with the warden's finding here. Leaving as is.\n\n\n\n## [[M-07] Bad redirects can make it impossible to deposit & withdraw](https://github.com/code-423n4/2021-12-mellow-findings/issues/44)\n_Submitted by cmichel_\n\nThe `GatewayVault._push()` function gets `redirects` from the `strategyParams`.\nIf `redirects[i] = j`, vault index `i`'s deposits are redirected to vault index `j`.\n\nNote that the deposits for vault index `i` are cleared, as they are redirected:\n\n```solidity\nfor (uint256 j = 0; j < _vaultTokens.length; j++) {\n    uint256 vaultIndex = _subvaultNftsIndex[strategyParams.redirects[i]];\n    amountsByVault[vaultIndex][j] += amountsByVault[i][j];\n    amountsByVault[i][j] = 0;\n}\n```\n\n> The same is true for withdrawals in the `_pull` function. Users might not be able to withdraw this way.\n\nIf the `redirects` array is misconfigured, it's possible that all `amountsByVault` are set to zero.\nFor example, if `0` redirects to `1` and `1` redirects to `0`. Or `0` redirects to itself, etc.\nThere are many misconfigurations that can lead to not being able to deposit to the pool anymore.\n\n#### Recommended Mitigation Steps\n\nThe `redirects[i] = j` matrix needs to be restricted.\nIf `i` is redirected to `j`, `j` may not redirect itself.\nCheck for this when setting the `redirects` array.\n\n**[0xleastwood (judge) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/44#issuecomment-1005680123):**\n > Can you confirm if this issue is valid or not? @MihanixA \n\n**[MihanixA (Mellow Protocol) confirmed](https://github.com/code-423n4/2021-12-mellow-findings/issues/44#issuecomment-1006406574):**\n > @0xleastwood Confirmed\n\n**[MihanixA (Mellow Protocol) commented](https://github.com/code-423n4/2021-12-mellow-findings/issues/44#issuecomment-1006407377):**\n > (notice that this one is a deploy-related issue)\n\n# Low Risk Findings (12)\n- [[L-01] `UniV3Vault` does not distribute fee earning to depositor](https://github.com/code-423n4/2021-12-mellow-findings/issues/111) _Submitted by gzeon_\n- [[L-02] Wrong logic in UniV3Trader](https://github.com/code-423n4/2021-12-mellow-findings/issues/22) _Submitted by 0x1f8b_\n- [[L-03] Unsafe token transfer](https://github.com/code-423n4/2021-12-mellow-findings/issues/88) _Submitted by WatchPug, also found by defsec, cuong_qnom, 0x0x0x, cmichel, and pmerkleplant_\n- [[L-04] Learn from the past](https://github.com/code-423n4/2021-12-mellow-findings/issues/20) _Submitted by 0x1f8b_\n- [[L-05] Potential DOS with Division By Zero on `LpIssuer`](https://github.com/code-423n4/2021-12-mellow-findings/issues/27) _Submitted by hagrid_\n- [[L-06] `maxTokensPerVault` is not used](https://github.com/code-423n4/2021-12-mellow-findings/issues/65) _Submitted by 0x0x0x_\n- [[L-07]  The Contract Should Approve(0) first](https://github.com/code-423n4/2021-12-mellow-findings/issues/115) _Submitted by defsec, also found by Jujic and robee_\n- [[L-08] `AaveVault.sol#_pull()` may return wrong `actualTokenAmounts`](https://github.com/code-423n4/2021-12-mellow-findings/issues/119) _Submitted by WatchPug_\n- [[L-09] Wrong logic in `tokenWhitelist()`?](https://github.com/code-423n4/2021-12-mellow-findings/issues/48) _Submitted by cmichel_\n- [[L-10] Guard for initialization function of VaultGovernance](https://github.com/code-423n4/2021-12-mellow-findings/issues/105) _Submitted by cuong_qnom_\n- [[L-11] `YearnVault` did not cache tvl as comment described](https://github.com/code-423n4/2021-12-mellow-findings/issues/84) _Submitted by gzeon_\n- [[L-12] adminApprove will not work](https://github.com/code-423n4/2021-12-mellow-findings/issues/117) _Submitted by pauliax_\n\n# Non-Critical Findings (11)\n- [[N-01] What you guys mean by this line ? Its redundant imo](https://github.com/code-423n4/2021-12-mellow-findings/issues/130) _Submitted by 0x421f_\n- [[N-02] Initialization with empty `_symbol`](https://github.com/code-423n4/2021-12-mellow-findings/issues/76) _Submitted by Jujic_\n- [[N-03] Open TODOs](https://github.com/code-423n4/2021-12-mellow-findings/issues/16) _Submitted by robee, also found by Meta0xNull_\n- [[N-04] safeApprove of openZeppelin is deprecated](https://github.com/code-423n4/2021-12-mellow-findings/issues/15) _Submitted by robee_\n- [[N-05] Solidity compiler versions mismatch](https://github.com/code-423n4/2021-12-mellow-findings/issues/17) _Submitted by robee_\n- [[N-06] `GatewayVault` events not used](https://github.com/code-423n4/2021-12-mellow-findings/issues/45) _Submitted by cmichel_\n- [[N-07] Require with empty message](https://github.com/code-423n4/2021-12-mellow-findings/issues/11) _Submitted by robee_\n- [[N-08] Missing zero-address checks on contract construction](https://github.com/code-423n4/2021-12-mellow-findings/issues/19) _Submitted by hyh_\n- [[N-09] Outdated compiler version](https://github.com/code-423n4/2021-12-mellow-findings/issues/100) _Submitted by WatchPug_\n- [[N-10] These functions can be made modifier](https://github.com/code-423n4/2021-12-mellow-findings/issues/106) _Submitted by cuong_qnom_\n- [[N-11] withdraw() Validate lpTokenAmount At Beginning of Function Can Save Gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/38) _Submitted by Meta0xNull_\n\n# Gas Optimizations (39)\n- [[G-01] `+= 1` costs extra gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/63) _Submitted by 0x0x0x_\n- [[G-02] Optimize `baseSupply` calculation in `_chargeFee`](https://github.com/code-423n4/2021-12-mellow-findings/issues/64) _Submitted by 0x0x0x_\n- [[G-03] Don't cache variables used only once](https://github.com/code-423n4/2021-12-mellow-findings/issues/66) _Submitted by 0x0x0x_\n- [[G-04] Loops can be implemented more efficiently](https://github.com/code-423n4/2021-12-mellow-findings/issues/73) _Submitted by 0x0x0x, also found by Jujic, WatchPug, pmerkleplant, and gzeon_\n- [[G-05] Use immutable variables can save gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/92) _Submitted by WatchPug, also found by robee and 0x0x0x_\n- [[G-06]  Constant variables can be immutable (DefaultAccessControl.sol)](https://github.com/code-423n4/2021-12-mellow-findings/issues/122) _Submitted by ye0lde, also found by gzeon and pauliax_\n- [[G-07] Declaring unnecessary immutable variables as constant can save gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/103) _Submitted by WatchPug_\n- [[G-08] There is no need to assign default values to variables](https://github.com/code-423n4/2021-12-mellow-findings/issues/71) _Submitted by 0x0x0x_\n- [[G-09] Gas Optimization: Use != 0 instead of > 0](https://github.com/code-423n4/2021-12-mellow-findings/issues/60) _Submitted by gzeon, also found by 0x0x0x, Jujic, pmerkleplant, and ye0lde_\n- [[G-10] Store Interface instead of address](https://github.com/code-423n4/2021-12-mellow-findings/issues/21) _Submitted by 0x1f8b_\n- [[G-11] Don't check contains before remove II](https://github.com/code-423n4/2021-12-mellow-findings/issues/26) _Submitted by 0x1f8b_\n- [[G-12] Skip initialization of factory address in vault governance by predicting it before hand](https://github.com/code-423n4/2021-12-mellow-findings/issues/127) _Submitted by 0x421f_\n- [[G-13] No need of separate indexing (NFT_ID => Vault Address)](https://github.com/code-423n4/2021-12-mellow-findings/issues/129) _Submitted by 0x421f_\n- [[G-14] Make deposit efficient ](https://github.com/code-423n4/2021-12-mellow-findings/issues/132) _Submitted by 0x421f_\n- [[G-15] Migrate from NonFungiblePositionManager to UniV3Pool directly](https://github.com/code-423n4/2021-12-mellow-findings/issues/133) _Submitted by 0x421f_\n- [[G-16] A more efficient for loop index proceeding](https://github.com/code-423n4/2021-12-mellow-findings/issues/54) _Submitted by Jujic, also found by defsec and WatchPug_\n- [[G-17] Unnecessary checked arithmetic in for loops](https://github.com/code-423n4/2021-12-mellow-findings/issues/101) _Submitted by WatchPug_\n- [[G-18] Adding unchecked directive can save gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/102) _Submitted by WatchPug, also found by Jujic and ye0lde_\n- [[G-19] ExceptionsLibrary.sol Shorten Revert Strings to Save Gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/32) _Submitted by Meta0xNull_\n- [[G-20] Remove ADMIN_DELEGATE_ROLE to Save Gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/34) _Submitted by Meta0xNull_\n- [[G-21] Use of _msgSender()](https://github.com/code-423n4/2021-12-mellow-findings/issues/81) _Submitted by defsec_\n- [[G-22] Use `calldata` instead of `memory` for function parameters](https://github.com/code-423n4/2021-12-mellow-findings/issues/78) _Submitted by defsec_\n- [[G-23] Use literal `2` instead of read from storage for `_vaultTokens.length` can save gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/104) _Submitted by WatchPug_\n- [[G-24] Setting `uint256` variables to `0` is redundant](https://github.com/code-423n4/2021-12-mellow-findings/issues/86) _Submitted by WatchPug_\n- [[G-25] Cache external call results can save gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/89) _Submitted by WatchPug_\n- [[G-26] `LpIssuer.sol#_chargeFees()` Check `if (performanceFee > 0)` can be done earlier to save gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/90) _Submitted by WatchPug_\n- [[G-27] Remove unnecessary variables can make the code simpler and save some gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/93) _Submitted by WatchPug_\n- [[G-28] Cache storage variables in the stack can save gas](https://github.com/code-423n4/2021-12-mellow-findings/issues/96) _Submitted by WatchPug_\n- [[G-29] Gas: `GatewayVault._pull` can skip redirected](https://github.com/code-423n4/2021-12-mellow-findings/issues/51) _Submitted by cmichel_\n- [[G-30] Gas: Cache `_pendingTokenWhitelistAdd[i]`](https://github.com/code-423n4/2021-12-mellow-findings/issues/52) _Submitted by cmichel_\n- [[G-31] Gas: Unnecessary zero writes](https://github.com/code-423n4/2021-12-mellow-findings/issues/53) _Submitted by cmichel_\n- [[G-32] Gas Optimization: Pack `Params` struct in `IProtocolGovernance`](https://github.com/code-423n4/2021-12-mellow-findings/issues/59) _Submitted by gzeon, also found by robee_\n- [[G-33] pre-calculate expressions that do not change](https://github.com/code-423n4/2021-12-mellow-findings/issues/118) _Submitted by pauliax_\n- [[G-34] Unused imports](https://github.com/code-423n4/2021-12-mellow-findings/issues/1) _Submitted by robee_\n- [[G-35] Unnecessary array boundaries check when loading an array element twice](https://github.com/code-423n4/2021-12-mellow-findings/issues/10) _Submitted by robee_\n- [[G-36] Storage double reading. Could save SLOAD](https://github.com/code-423n4/2021-12-mellow-findings/issues/6) _Submitted by robee_\n- [[G-37] Internal functions to private](https://github.com/code-423n4/2021-12-mellow-findings/issues/7) _Submitted by robee_\n- [[G-38] Public functions to external](https://github.com/code-423n4/2021-12-mellow-findings/issues/8) _Submitted by robee_\n- [[G-39] Save Gas With The Unchecked Keyword](https://github.com/code-423n4/2021-12-mellow-findings/issues/123) _Submitted by ye0lde_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}