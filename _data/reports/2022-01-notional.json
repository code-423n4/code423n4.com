{
  "circa": {
    "title": "Notional contest",
    "sponsor": "Notional",
    "slug": "2022-01-notional",
    "date": "2022-03-10",
    "findings": "https://github.com/code-423n4/2022-01-notional-findings/issues",
    "contest": 81
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of the Notional smart contract system written in Solidity. The code contest took place between January 27—February 2 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>27 Wardens contributed reports to the Notional contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/liam_eastwood13\">leastwood</a></li>\n<li>ShippooorDAO</li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://github.com/TomAFrench\">TomFrenchBlockchain</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/JustDravee\">Dravee</a></li>\n<li>gellej</li>\n<li>Jujic</li>\n<li>GeekyLumberjack</li>\n<li>hyh</li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li>UncleGrandpa925</li>\n<li>samruna</li>\n<li><a href=\"https://twitter.com/SirH4shalot\">sirhashalot</a></li>\n<li><a href=\"https://twitter.com/meidhiwirara\">Tomio</a></li>\n<li>SolidityScan (<a href=\"https://twitter.com/cyberboyIndia\">cyberboy</a> and <a href=\"https://blog.dixitaditya.com/\">zombie</a>)</li>\n<li>0x1f8b</li>\n<li><a href=\"https://twitter.com/_no_handlebars\">throttle</a></li>\n<li>robee</li>\n<li>IllIllI</li>\n<li>PranavG</li>\n<li><a href=\"https://twitter.com/_0v3rf10w\">0v3rf10w</a></li>\n<li>cccz</li>\n<li><a href=\"https://camden.codes\">camden</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/SolidityDev\">pauliax</a>. The judge also competed in the contest as a warden, but forfeited their winnings.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 18 unique vulnerabilities and 57 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 3 received a risk rating in the category of HIGH severity, 7 received a risk rating in the category of MEDIUM severity, and 8 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 16 non-critical recommendations and 23 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-01-notional\">C4 Notional contest repository</a>, and is composed of 18 smart contracts written in the Solidity programming language and includes 1745 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-3\" style=\"position:relative;\"><a href=\"#high-risk-findings-3\" aria-label=\"high risk findings 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (3)</h1>\n<h2 id=\"h-01-treasury-cannot-claim-comp-tokens--comp-tokens-are-stuck\" style=\"position:relative;\"><a href=\"#h-01-treasury-cannot-claim-comp-tokens--comp-tokens-are-stuck\" aria-label=\"h 01 treasury cannot claim comp tokens  comp tokens are stuck permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/192\">[H-01] Treasury cannot claim COMP tokens &#x26; COMP tokens are stuck</a></h2>\n<p><em>Submitted by cmichel, also found by leastwood</em></p>\n<p>The <code>TreasuryAction.claimCOMPAndTransfer</code> function uses pre- and post-balances of the <code>COMP</code> token to check which ones to transfer:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">claimCOMPAndTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cTokens</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">onlyManagerContract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">nonReentrant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Take a snasphot of the COMP balance before we claim COMP so that we don&#39;t inadvertently transfer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// something we shouldn&#39;t.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balanceBefore</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">COMP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1328\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1329\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">COMPTROLLER</span><span class=\"mtk1\">.</span><span class=\"mtk11\">claimComp</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">cTokens</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1330\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// NOTE: If Notional ever lists COMP as a collateral asset it will be cCOMP instead and it</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1331\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// will never hold COMP balances directly. In this case we can always transfer all the COMP</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1332\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// off of the contract.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1333\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balanceAfter</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">COMP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1334\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountClaimed</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">balanceAfter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">balanceBefore</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1335\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// NOTE: the onlyManagerContract modifier prevents a transfer to address(0) here</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1336\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">COMP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">treasuryManagerContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountClaimed</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1337\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// NOTE: TreasuryManager contract will emit a COMPHarvested event</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1338\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountClaimed</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1339\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Note that anyone can claim COMP tokens on behalf of any address (see <a href=\"https://github.com/compound-finance/compound-protocol/blob/master/contracts/Comptroller.sol#L1328\"><code>Comptroller.claimComp</code></a>).\nAn attacker can claim COMP tokens on behalf of the contract and it’ll never be able to claim any compound itself.\nThe COMP claimed by the attacker are stuck in the contract and cannot be retrieved.\n(One can eventually get back the stuck COMP by creating a cCOMP market and then transferring it through <code>transferReserveToTreasury</code>.)</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Don’t use pre-and post-balances, can you use the entire balance?</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/192#issuecomment-1030843184\">jeffywu (Notional) disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Dispute as a high risk bug. Would categorize this as medium risk.</p>\n<p>There is no profit to be gained by doing this from the attacker besides denial of service. The protocol could simply upgrade to regain access to the tokens. We will fix this regardless.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/192#issuecomment-1041504305\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Very good find. </p>\n<p>It is a tough decision if this should be classified as High or Medium severity. An exploiter cannot acquire those assets, and the contracts are upgradeable if necessary, however, I think this time I will leave it in favor of wardens who both are experienced enough and submitted this as of high severity:\n<em>3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).</em></p>\n</blockquote>\n<hr>\n<h2 id=\"h-02-cooldown-and-redeem-windows-can-be-rendered-useless\" style=\"position:relative;\"><a href=\"#h-02-cooldown-and-redeem-windows-can-be-rendered-useless\" aria-label=\"h 02 cooldown and redeem windows can be rendered useless permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/68\">[H-02] Cooldown and redeem windows can be rendered useless</a></h2>\n<p><em>Submitted by ShippooorDAO</em></p>\n<p>Cooldown and redeem windows can be rendered useless.</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li>Given an account that has not staked sNOTE.</li>\n<li>Account calls sNOTE.startCooldown</li>\n<li>Account waits for the duration of the cooldown period. Redeem period starts.</li>\n<li>Account can then deposit and redeem as they wish, making the cooldown useless.</li>\n<li>Multiple accounts could be used to “hop” between redeem windows by transfering between them, making the redeem window effictively useless.</li>\n</ul>\n<p>Could be used for voting power attacks using flash loan if voting process is not monitored\n<a href=\"https://www.coindesk.com/tech/2020/10/29/flash-loans-have-made-their-way-to-manipulating-protocol-elections/\">https://www.coindesk.com/tech/2020/10/29/flash-loans-have-made-their-way-to-manipulating-protocol-elections/</a></p>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<ul>\n<li>VS Code</li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>A few ways to mitigate this problem:\nOption A: Remove the cooldown/redeem period as it’s not really preventing much in current state.\nOption B: Let the contract start the cooldown on mint, and bind the cooldown/redeem window to the amount that was minted at that time by the account. Don’t make sNOTE.startCooldown() available externally. Redeem should verify amount of token available using this new logic.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/68#issuecomment-1030855494\">jeffywu (Notional) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Propose to increase the severity of this [from Low] to High.</p>\n<p>This image is a better way to understand the potential attack.\n<img src=\"https://user-images.githubusercontent.com/977434/152688228-f26123d4-1c48-4779-8005-b22638e6595c.png\" alt=\"image\"></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/68#issuecomment-1041532469\">pauliax (judge) increased severity to high and commented</a>:</strong></p>\n<blockquote>\n<p>Great find. Agree with the sponsor, the severity can be upgraded because it destroys the cooldown/redeem protection.</p>\n<p>Could this be mitigated by including an amount (up to the whole user’s balance) when starting a cooldown, and then redeem can’t withdraw more than specified during the cooldown init?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/68#issuecomment-1042982946\">jeffywu (Notional) commented</a>:</strong></p>\n<blockquote>\n<p>We’ve prevented this by refactoring how the redemption window is defined.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-03-a-malicious-treasury-manager-can-burn-treasury-tokens-by-setting-makerfee-to-the-amount-the-maker-receives\" style=\"position:relative;\"><a href=\"#h-03-a-malicious-treasury-manager-can-burn-treasury-tokens-by-setting-makerfee-to-the-amount-the-maker-receives\" aria-label=\"h 03 a malicious treasury manager can burn treasury tokens by setting makerfee to the amount the maker receives permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/230\">[H-03] A Malicious Treasury Manager Can Burn Treasury Tokens By Setting <code>makerFee</code> To The Amount The Maker Receives</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<p>The treasury manager contract holds harvested assets/<code>COMP</code> from Notional which are used to perform <code>NOTE</code> buybacks or in other areas of the protocol. The manager account is allowed to sign off-chain orders used on 0x to exchange tokens to <code>WETH</code> which can then be deposited in the Balancer LP and distributed to <code>sNOTE</code> holders.</p>\n<p>However, <code>_validateOrder</code> does not validate that <code>takerFee</code> and <code>makerFee</code> are set to zero, hence, it is possible for a malicious manager to receive tokens as part of a swap, but the treasury manager contract receives zero tokens as <code>makerFee</code> is set to the amount the maker receives. This can be abused to effectively burn treasury tokens at no cost to the order taker.</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L196-L250\">https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L196-L250</a></p>\n<p><a href=\"https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange-libs/contracts/src/LibFillResults.sol#L59-L91\">https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange-libs/contracts/src/LibFillResults.sol#L59-L91</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-notional/blob/main/contracts/utils/EIP1271Wallet.sol#L147-L188\">https://github.com/code-423n4/2022-01-notional/blob/main/contracts/utils/EIP1271Wallet.sol#L147-L188</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_validateOrder</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">order</span><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">makerToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">takerToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">feeRecipient</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">makerAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">takerAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) = </span><span class=\"mtk11\">_extractOrderInfo</span><span class=\"mtk1\">(</span><span class=\"mtk12\">order</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// No fee recipient allowed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feeRecipient</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;no fee recipient allowed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// MakerToken should never be WETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">makerToken</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;maker token must not be WETH&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// TakerToken (proceeds) should always be WETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">takerToken</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;taker token must be WETH&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">priceOracle</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">priceOracles</span><span class=\"mtk1\">[</span><span class=\"mtk12\">makerToken</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Price oracle not defined</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">priceOracle</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;price oracle not defined&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">slippageLimit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">slippageLimits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">makerToken</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Slippage limit not defined</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">slippageLimit</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;slippage limit not defined&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oraclePrice</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_toUint</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">AggregatorV2V3Interface</span><span class=\"mtk1\">(</span><span class=\"mtk12\">priceOracle</span><span class=\"mtk1\">).</span><span class=\"mtk11\">latestAnswer</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">priceFloor</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">oraclePrice</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">slippageLimit</span><span class=\"mtk1\">) /</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">SLIPPAGE_LIMIT_PRECISION</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">makerDecimals</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">makerToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">decimals</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// makerPrice = takerAmount / makerAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">makerPrice</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">takerAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">makerDecimals</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">makerAmount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">makerPrice</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">priceFloor</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;slippage is too high&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider checking that <code>makerFee == 0</code> and <code>takerFee == 0</code> in <code>EIP1271Wallet._validateOrder</code> s.t. the treasury manager cannot sign unfair orders which severely impact the <code>TreasuryManager</code> contract.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/230#issuecomment-1030839051\">jeffywu (Notional) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Confirmed, we will fix this.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/230#issuecomment-1041560475\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Good job warden for identifying this issue with 0x integration.</p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-7\" style=\"position:relative;\"><a href=\"#medium-risk-findings-7\" aria-label=\"medium risk findings 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (7)</h1>\n<h2 id=\"m-01-usage-of-deprecated-chainlink-api-in-eip1271wallet\" style=\"position:relative;\"><a href=\"#m-01-usage-of-deprecated-chainlink-api-in-eip1271wallet\" aria-label=\"m 01 usage of deprecated chainlink api in eip1271wallet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/197\">[M-01] Usage of deprecated ChainLink API in <code>EIP1271Wallet</code></a></h2>\n<p><em>Submitted by cmichel, also found by 0x1f8b, defsec, leastwood, pauliax, sirhashalot, TomFrenchBlockchain, UncleGrandpa925, and WatchPug</em></p>\n<p>The Chainlink API (<code>latestAnswer</code>) used in the <code>EIP1271Wallet</code> contract is deprecated:</p>\n<blockquote>\n<p>This API is deprecated. Please see API Reference for the latest Price Feed API. <a href=\"https://web.archive.org/web/20210304160150/https://docs.chain.link/docs/deprecated-aggregatorinterface-api-reference\">Chainlink Docs</a></p>\n</blockquote>\n<p>This function does not error if no answer has been reached but returns 0. Besides, the <code>latestAnswer</code> is reported with 18 decimals for crypto quotes but 8 decimals for FX quotes (See Chainlink FAQ for more details). A best practice is to get the decimals from the oracles instead of hard-coding them in the contract.</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use the <code>latestRoundData</code> function to get the price instead. Add checks on the return data with proper revert messages if the price is stale or the round is uncomplete, for example:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span><span class=\"mtk12\">uint80</span><span class=\"mtk1\"> </span><span class=\"mtk12\">roundID</span><span class=\"mtk1\">, </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\">, , </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timeStamp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint80</span><span class=\"mtk1\"> </span><span class=\"mtk12\">answeredInRound</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">priceOracle</span><span class=\"mtk1\">.</span><span class=\"mtk11\">latestRoundData</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">answeredInRound</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">roundID</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;...&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">timeStamp</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;...&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/197#issuecomment-1037191042\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Valid finding. I am hesitating whether this should be low or medium but decided to leave it as a medium because the likeliness is low but the impact would be huge, and all the wardens submitted this with a medium severity. Also: “Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.”</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-snotesol_mintfromassets-lack-of-slippage-control\" style=\"position:relative;\"><a href=\"#m-02-snotesol_mintfromassets-lack-of-slippage-control\" aria-label=\"m 02 snotesol_mintfromassets lack of slippage control permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/181\">[M-02] <code>sNOTE.sol#_mintFromAssets()</code> Lack of slippage control</a></h2>\n<p><em>Submitted by WatchPug, also found by cmichel, hyh, pauliax, TomFrenchBlockchain, and UncleGrandpa925</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-notional/blob/d171cad9e86e0d02e0909eb66d4c24ab6ea6b982/contracts/sNOTE.sol#L195-L209\">https://github.com/code-423n4/2022-01-notional/blob/d171cad9e86e0d02e0909eb66d4c24ab6ea6b982/contracts/sNOTE.sol#L195-L209</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">BALANCER_VAULT</span><span class=\"mtk1\">.</span><span class=\"mtk12\">joinPool</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">msgValue</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">NOTE_ETH_POOL_ID</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk3\">// sNOTE will receive the BPT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IVault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">JoinPoolRequest</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">assets</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">maxAmountsIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">IVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">JoinKind</span><span class=\"mtk1\">.</span><span class=\"mtk12\">EXACT_TOKENS_IN_FOR_BPT_OUT</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">maxAmountsIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// Accept however much BPT the pool will give us</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">false</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// Don&#39;t use internal balances</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The current implementation of <code>mintFromNOTE()</code> and <code>mintFromETH()</code> and <code>mintFromWETH()</code> (all are using <code>_mintFromAssets()</code> with <code>minimumBPT</code> hardcoded to <code>0</code>) provides no parameter for slippage control, making it vulnerable to front-run attacks.</p>\n<h5 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h5>\n<p>Consider adding a <code>minAmountOut</code> parameter for these functions.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/181\">jeffywu (Notional) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/181#issuecomment-1037991707\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Great find, slippage should be configurable and not hardcoded to 0.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-no-upper-limit-on-cooldowntimeinseconds-allows-funds-to-be-locked-snote-owner\" style=\"position:relative;\"><a href=\"#m-03-no-upper-limit-on-cooldowntimeinseconds-allows-funds-to-be-locked-snote-owner\" aria-label=\"m 03 no upper limit on cooldowntimeinseconds allows funds to be locked snote owner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/40\">[M-03] No upper limit on <code>coolDownTimeInSeconds</code> allows funds to be locked sNOTE owner</a></h2>\n<p><em>Submitted by TomFrenchBlockchain, also found by defsec, Dravee, and Jujic</em></p>\n<p>Inability for sNOTE holders to exit the pool in the case of ownership over SNOTE contract being compromised/malicious.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>sNOTE works on a stkAAVE model where users have to wait a set cooldown period before being able to reclaim the underlying tokens. This cooldown period can be set to an arbitrary uint32 value in seconds by the owner of the sNOTE contract.</p>\n<p><a href=\"https://github.com/code-423n4/2022-01-notional/blob/d171cad9e86e0d02e0909eb66d4c24ab6ea6b982/contracts/sNOTE.sol#L94-L97\">https://github.com/code-423n4/2022-01-notional/blob/d171cad9e86e0d02e0909eb66d4c24ab6ea6b982/contracts/sNOTE.sol#L94-L97</a></p>\n<p>Below in the <code>startCooldown()</code> function, it’s possible for the owner of the sNOTE contract to choose a value for <code>coolDownTimeInSeconds</code> which always causes this function to revert (<code>_safe32</code> will always revert if <code>coolDownTimeInSeconds = type(uint32).max</code>).</p>\n<p><a href=\"https://github.com/code-423n4/2022-01-notional/blob/d171cad9e86e0d02e0909eb66d4c24ab6ea6b982/contracts/sNOTE.sol#L217-L226\">https://github.com/code-423n4/2022-01-notional/blob/d171cad9e86e0d02e0909eb66d4c24ab6ea6b982/contracts/sNOTE.sol#L217-L226</a></p>\n<p>Should ownership over sNOTE become compromised then all of the users’ assets may be locked indefinitely.</p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Provide a sensible upper limit to <code>coolDownTimeInSeconds</code> of, say, a month. This will give plenty of time for NOTE governance to withdraw funds in the event of a shortfall while giving confidence that a user’s funds can’t be locked forever.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/40#issuecomment-1039169763\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Valid concern. I was thinking if this should be left as of medium or low severity, but decided this time in favor of wardens:\n<em>“Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.”</em></p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-maxshortfallwithdraw-limit-on-btp-extraction-is-not-enforced\" style=\"position:relative;\"><a href=\"#m-04-maxshortfallwithdraw-limit-on-btp-extraction-is-not-enforced\" aria-label=\"m 04 maxshortfallwithdraw limit on btp extraction is not enforced permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/209\">[M-04] MAX<em>SHORTFALL</em>WITHDRAW limit on BTP extraction is not enforced</a></h2>\n<p><em>Submitted by gellej, also found by gzeon</em></p>\n<p>The function <code>extractTokensForCollateralShortfall()</code> allows the owner of the sNote contract to withdraw up to 50% of the total amount of BPT.</p>\n<p>Presumably, this 50% limit is in place to prevent the owner from “rug-pulling” the sNote holders (or at least to give them a guarantee that their loss is limited to 50% of the underlying value).</p>\n<p>However, this limit is easily circumvented as the function can simply be called a second, third and fourth time, to withdraw almost all of the BPT.</p>\n<p>As the contract does not enforce this limit, the bug requires stakers to trust the governance to not withdraw more than 50% of the underlying collateral. This represents a higher risk for the stakers, which may  also result in a larger discount on sNote wrt its BPT collateral (this is why I classified the bug as medium risk - users may lose value - not from an exploit, but from the lack of enforcing the 50% rule)</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>See above.\nThe code affected is here: <a href=\"https://github.com/code-423n4/2022-01-notional/blob/main/contracts/sNOTE.sol#L100\">https://github.com/code-423n4/2022-01-notional/blob/main/contracts/sNOTE.sol#L100</a></p>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Rewrite the logic and enforce a limit during a time period - i.e. do not allow to withdraw over 50% <em>per week</em> (or any time period that is longer than the cooldown period, so that users have time to withdraw their collateral)</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/209\">jeffywu (Notional) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/209#issuecomment-1040141667\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Great find, 50% withdrawal limit can be bypassed by invoking the function multiple times.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-snote-holders-are-not-incetivized-to-vote-on-proposals-to-call-extracttokensforcollateralshortfall\" style=\"position:relative;\"><a href=\"#m-05-snote-holders-are-not-incetivized-to-vote-on-proposals-to-call-extracttokensforcollateralshortfall\" aria-label=\"m 05 snote holders are not incetivized to vote on proposals to call extracttokensforcollateralshortfall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/229\">[M-05] <code>sNOTE</code> Holders Are Not Incetivized To Vote On Proposals To Call <code>extractTokensForCollateralShortfall</code></a></h2>\n<p><em>Submitted by leastwood</em></p>\n<p>As <code>sNOTE</code> have governance voting rights equivalent to the token amount in <code>NOTE</code>, users who stake their <code>NOTE</code> are also able to vote on governance proposals. In the event a majority of <code>NOTE</code> is staked in the <code>sNOTE</code> contract, it doesn’t seem likely that stakers would be willing to vote on a proposal which liquidates a portion of their staked position.</p>\n<p>Hence, the protocol may be put into a state where stakers are unwilling to vote on a proposal to call <code>extractTokensForCollateralShortfall</code>, leaving Notional insolvent as stakers continue to dump their holdings.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-notional/blob/main/contracts/sNOTE.sol#L99-L129\">https://github.com/code-423n4/2022-01-notional/blob/main/contracts/sNOTE.sol#L99-L129</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">extractTokensForCollateralShortfall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">requestedWithdraw</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bptBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BALANCER_POOL_TOKEN</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxBPTWithdraw</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">bptBalance</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">MAX_SHORTFALL_WITHDRAW</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Do not allow a withdraw of more than the MAX_SHORTFALL_WITHDRAW percentage. Specifically don&#39;t</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// revert here since there may be a delay between when governance issues the token amount and when</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// the withdraw actually occurs.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bptExitAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">requestedWithdraw</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">maxBPTWithdraw</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">maxBPTWithdraw</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">requestedWithdraw</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IAsset</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">assets</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IAsset</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">assets</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">IAsset</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">assets</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">IAsset</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">NOTE</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minAmountsOut</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">minAmountsOut</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">minAmountsOut</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">BALANCER_VAULT</span><span class=\"mtk1\">.</span><span class=\"mtk11\">exitPool</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">NOTE_ETH_POOL_ID</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">owner</span><span class=\"mtk1\">), </span><span class=\"mtk3\">// Owner will receive the NOTE and WETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IVault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ExitPoolRequest</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">assets</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">minAmountsOut</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">IVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ExitKind</span><span class=\"mtk1\">.</span><span class=\"mtk12\">EXACT_BPT_IN_FOR_TOKENS_OUT</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">bptExitAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">false</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// Don&#39;t use internal balances</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider redesigning this mechanism to better align stakers with the health of the protocol. It might be useful to allocate a percentage of generated fees to an insurance fund which will be used to cover any collateral shortfall events. This fund can be staked to generate additional yield.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/229#issuecomment-1030839281\">jeffywu (Notional) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>Acknowledged, however, there are technical difficulties with programmatic collateral shortfall detection at this moment. We will look to develop a method that allows for programmatic detection in the future (these issues have been discussed with the warden).</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/229#issuecomment-1041536723\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>A hypothetical but valid concern.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-06-getvotingpower-is-not-equipped-to-handle-on-chain-voting\" style=\"position:relative;\"><a href=\"#m-06-getvotingpower-is-not-equipped-to-handle-on-chain-voting\" aria-label=\"m 06 getvotingpower is not equipped to handle on chain voting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/165\">[M-06] <code>getVotingPower</code> Is Not Equipped To Handle On-Chain Voting</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<p>As <code>NOTE</code> continues to be staked in the <code>sNOTE</code> contract, it is important that Notional’s governance is able to correctly handle on-chain voting by calculating the relative power <code>sNOTE</code> has in terms of its equivalent <code>NOTE</code> amount.</p>\n<p><code>getVotingPower</code> is a useful function in tracking the relative voting power a staker has, however, it does not utilise any checkpointing mechanism to ensure the user’s voting power is a snapshot of a specific block number. As a result, it would be possible to manipulate a user’s voting power by casting a vote on-chain and then have them transfer their <code>sNOTE</code> to another account to then vote again.</p>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-notional/blob/main/contracts/sNOTE.sol#L271-L293\">https://github.com/code-423n4/2022-01-notional/blob/main/contracts/sNOTE.sol#L271-L293</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getVotingPower</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sNOTEAmount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Gets the BPT token price (in ETH)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bptPrice</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IPriceOracle</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">BALANCER_POOL_TOKEN</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">getLatest</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IPriceOracle</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Variable</span><span class=\"mtk1\">.</span><span class=\"mtk12\">BPT_PRICE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Gets the NOTE token price (in ETH)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">notePrice</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IPriceOracle</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">BALANCER_POOL_TOKEN</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">getLatest</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IPriceOracle</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Variable</span><span class=\"mtk1\">.</span><span class=\"mtk12\">PAIR_PRICE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Since both bptPrice and notePrice are denominated in ETH, we can use</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// this formula to calculate noteAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// bptBalance * bptPrice = notePrice * noteAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// noteAmount = bptPrice/notePrice * bptBalance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">priceRatio</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">bptPrice</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">notePrice</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bptBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BALANCER_POOL_TOKEN</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Amount_note = Price_NOTE_per_BPT * BPT_supply * 80% (80/20 pool)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">noteAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">priceRatio</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">bptBalance</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">80</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Reduce precision down to 1e8 (NOTE token)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// priceRatio and bptBalance are both 1e18 (1e36 total)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// we divide by 1e28 to get to 1e8</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">noteAmount</span><span class=\"mtk1\"> /= </span><span class=\"mtk7\">1e28</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">noteAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">sNOTEAmount</span><span class=\"mtk1\">) / </span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider implementing a <code>getPriorVotingPower</code> function which takes in a <code>blockNumber</code> argument and returns the correct balance at that specific block.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/165\">jeffywu (Notional) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/165#issuecomment-1041539604\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Great find, voting power snapshots would also make the system more resilient to manipulation, e.g. by using flashloans.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-07-_validateorder-does-not-allow-anyone-to-be-a-taker-of-an-off-chain-order\" style=\"position:relative;\"><a href=\"#m-07-_validateorder-does-not-allow-anyone-to-be-a-taker-of-an-off-chain-order\" aria-label=\"m 07 _validateorder does not allow anyone to be a taker of an off chain order permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/152\">[M-07] <code>_validateOrder</code> Does Not Allow Anyone To Be A Taker Of An Off-Chain Order</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<p>The <code>EIP1271Wallet</code> contract intends to allow the treasury manager account to sign off-chain orders in 0x on behalf of the <code>TreasuryManager</code> contract, which holds harvested assets/<code>COMP</code> from Notional. While the <code>EIP1271Wallet._validateOrder</code> function mostly prevents the treasury manager from exploiting these orders, it does not ensure that the <code>takerAddress</code> and <code>senderAddress</code> are set to the zero address. As a result, it is possible for the manager to have sole rights to an off-chain order and due to the flexibility in <code>makerPrice</code>, the manager is able to extract value from the treasury by maximising the allowed slippage.</p>\n<p>By setting <code>takerAddress</code> to the zero address, any user can be the taker of an off-chain order. By setting <code>senderAddress</code> to the zero address, anyone is allowed to access the exchange methods that interact with the order, including filling the order itself. Hence, these two order addresses can be manipulated by the manager to effectively restrict order trades to themselves.</p>\n<h4 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange-libs/contracts/src/LibOrder.sol#L66\">https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange-libs/contracts/src/LibOrder.sol#L66</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">takerAddress</span><span class=\"mtk1\">;   </span><span class=\"mtk3\">// Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.</span></span></span></code></pre>\n<p><a href=\"https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L196-L250\">https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L196-L250</a></p>\n<p><a href=\"https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L354-L374\">https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L354-L374</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-notional/blob/main/contracts/utils/EIP1271Wallet.sol#L147-L188\">https://github.com/code-423n4/2022-01-notional/blob/main/contracts/utils/EIP1271Wallet.sol#L147-L188</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_validateOrder</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">order</span><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">makerToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">takerToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">feeRecipient</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">makerAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">takerAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) = </span><span class=\"mtk11\">_extractOrderInfo</span><span class=\"mtk1\">(</span><span class=\"mtk12\">order</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// No fee recipient allowed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feeRecipient</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;no fee recipient allowed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// MakerToken should never be WETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">makerToken</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;maker token must not be WETH&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// TakerToken (proceeds) should always be WETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">takerToken</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;taker token must be WETH&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">priceOracle</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">priceOracles</span><span class=\"mtk1\">[</span><span class=\"mtk12\">makerToken</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Price oracle not defined</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">priceOracle</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;price oracle not defined&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">slippageLimit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">slippageLimits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">makerToken</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Slippage limit not defined</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">slippageLimit</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;slippage limit not defined&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oraclePrice</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_toUint</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">AggregatorV2V3Interface</span><span class=\"mtk1\">(</span><span class=\"mtk12\">priceOracle</span><span class=\"mtk1\">).</span><span class=\"mtk11\">latestAnswer</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">priceFloor</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">oraclePrice</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">slippageLimit</span><span class=\"mtk1\">) /</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">SLIPPAGE_LIMIT_PRECISION</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">makerDecimals</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">makerToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">decimals</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// makerPrice = takerAmount / makerAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">makerPrice</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">takerAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">makerDecimals</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">makerAmount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">makerPrice</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">priceFloor</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;slippage is too high&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.\nDiscussions with Notional team.</p>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider adding <code>require(takerAddress == address(0), \"manager cannot set taker\");</code> and <code>require(senderAddress == address(0), \"manager cannot set sender\");</code> statements to <code>_validateOrder</code>. This should allow any user to fill an order and prevent the manager from restricting exchange methods to themselves.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/152\">jeffywu (Notional) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/152#issuecomment-1041564430\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Great find, I like when wardens understand and identify issues with integrated external protocols.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-findings-8\" style=\"position:relative;\"><a href=\"#low-risk-findings-8\" aria-label=\"low risk findings 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (8)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/170\">[L-01] Missing validation check in totalSupply()</a> <em>Submitted by SolidityScan, also found by cmichel and Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/103\">[L-02] setReserveCashBalance can only set less reserves</a> <em>Submitted by GeekyLumberjack</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/182\">[L-03] No upper limit check on swap fee Percentage</a> <em>Submitted by samruna, also found by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/222\">[L-04] <code>getVotingPower</code> Truncates Result Leading To Inaccuracies In Voting Power</a> <em>Submitted by leastwood, also found by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/198\">[L-05] <code>makerPrice</code> assumes oracle price is always in 18 decimals</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/231\">[L-06] Users Can Game <code>sNOTE</code> Minting If Buybacks Occur Infrequently</a> <em>Submitted by leastwood, also found by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/227\">[L-07] <code>extractTokensForCollateralShortfall</code> Can Be Frontrun By Non-Stakers</a> <em>Submitted by leastwood</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/71\">[L-08] Conversions between sNOTE and BPT when burning cause less sNOTE to be burned than expected</a> <em>Submitted by TomFrenchBlockchain, also found by gellej and gzeon</em></li>\n</ul>\n<h1 id=\"non-critical-findings-16\" style=\"position:relative;\"><a href=\"#non-critical-findings-16\" aria-label=\"non critical findings 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (16)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/20\">[N-01] safeApprove of openZeppelin is deprecated</a> <em>Submitted by robee, also found by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/115\">[N-02] <code>approve()</code> return value not checked</a> <em>Submitted by sirhashalot, also found by 0x1f8b, cmichel, PranavG, robee, and SolidityScan</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/174\">[N-03] Multiple Missing zero address checks </a> <em>Submitted by SolidityScan, also found by 0v3rf10w, cccz, hyh, Jujic, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/18\">[N-04] Require with empty message</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/223\">[N-05] Improper Contract Upgrades Can Lead To Loss Of Contract Ownership</a> <em>Submitted by leastwood, also found by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/36\">[N-06] _getToken not resilient to errors</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/131\">[N-07] TreasuryManager and sNOTE events aren’t indexed</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/196\">[N-08] <code>StorageId</code> enums may never be shuffled</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/45\">[N-09] Incorrect comment on cooldown check</a> <em>Submitted by camden, also found by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/42\">[N-10] Comment refers to NOTE when it means WETH</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/106\">[N-11] <code>TreasuryAction.sol</code>:<code>modifier onlyOwner()</code>’s revert message is confusing</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/111\">[N-12] <code>TreasuryAction.sol:transferReserveToTreasury()</code>: Missing @return comment </a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/90\">[N-13] Consider making contracts Pausable</a> <em>Submitted by Jujic, also found by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/202\">[N-14] Inclusive conditions</a> <em>Submitted by pauliax, also found by cmichel and Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/150\">[N-15] Oracle Time Interval Is Small</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/195\">[N-16] Missing parameter validation</a> <em>Submitted by cmichel</em></li>\n</ul>\n<h1 id=\"gas-optimizations-23\" style=\"position:relative;\"><a href=\"#gas-optimizations-23\" aria-label=\"gas optimizations 23 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (23)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/95\">[G-01] Gas: Places where both the <code>return</code> statement and a named <code>returns</code> are used</a> <em>Submitted by Dravee, also found by Jujic and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/228\">[G-02] Prefix (<code>++i</code>), rather than postfix (<code>i++</code>), increment/decrement operators should be used in for-loops</a> <em>Submitted by IllIllI, also found by defsec, Dravee, robee, and throttle</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/112\">[G-03] Remove unnecessary super._beforeTokenTransfer()</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/110\">[G-04] Revert string > 32 bytes</a> <em>Submitted by sirhashalot, also found by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/204\">[G-05] Unused state variables</a> <em>Submitted by pauliax, also found by gzeon, Jujic, samruna, ShippooorDAO, SolidityScan, throttle, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/62\">[G-06] Unnecessary inheritance messing with inheritance tree.</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/97\">[G-07] Gas: When a function use the <code>onlyOwner</code> modifier, use <code>msg.sender</code> instead of <code>owner</code></a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/59\">[G-08] Initialisation of zero entries in arrays is unnecessary</a> <em>Submitted by TomFrenchBlockchain, also found by Jujic and throttle</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/55\">[G-09] Placement of require statement</a> <em>Submitted by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/86\">[G-10] Gas: Use Custom Errors instead of Revert Strings to save Gas</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/128\">[G-11] Gas in <code>Bitmap.sol:getMSB()</code>: unnecessary arithmetic operation</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/129\">[G-12] Gas in <code>TreasuryManager.sol</code>: Inline function <code>_investWETHToBuyNOTE()</code></a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/125\">[G-13] <code>BalanceHandler.sol:getBalanceStorage()</code>: <code>store</code> is used only once and shouldn’t get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/41\">[G-14] <code>mintFromNOTE</code>, <code>mintFromETH</code> and <code>mintFromWETH</code> can be merged into two functions to give users better experience.</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/199\">[G-15] Gas: <code>reserveInternal.subNoNeg(bufferInternal)</code> can be unchecked</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/214\">[G-16] Double _requireAccountNotInCoolDown</a> <em>Submitted by Tomio, also found by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/213\">[G-17] Optimization on _redeemAndTransfer</a> <em>Submitted by Tomio, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/210\">[G-18] considered changing it to storage </a> <em>Submitted by Tomio</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/161\">[G-19] Gas Optimization: Unnecessary comparison</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/43\">[G-20] coolDown.redeemWindowEnd serves no purpose</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/39\">[G-21] Require statement on nonzero pool address is impossible to fail </a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/65\">[G-22] <code>_investWETHToBuyNOTE</code> is unnecessarily roundabout.</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-notional-findings/issues/94\">[G-23] Gas: Missing checks for non-zero transfer value calls</a> <em>Submitted by Dravee, also found by Jujic</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-3\">High Risk Findings (3)</a></p>\n<ul>\n<li><a href=\"#h-01-treasury-cannot-claim-comp-tokens--comp-tokens-are-stuck\">[H-01] Treasury cannot claim COMP tokens &#x26; COMP tokens are stuck</a></li>\n<li><a href=\"#h-02-cooldown-and-redeem-windows-can-be-rendered-useless\">[H-02] Cooldown and redeem windows can be rendered useless</a></li>\n<li><a href=\"#h-03-a-malicious-treasury-manager-can-burn-treasury-tokens-by-setting-makerfee-to-the-amount-the-maker-receives\">[H-03] A Malicious Treasury Manager Can Burn Treasury Tokens By Setting <code>makerFee</code> To The Amount The Maker Receives</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-7\">Medium Risk Findings (7)</a></p>\n<ul>\n<li><a href=\"#m-01-usage-of-deprecated-chainlink-api-in-eip1271wallet\">[M-01] Usage of deprecated ChainLink API in <code>EIP1271Wallet</code></a></li>\n<li><a href=\"#m-02-snotesol_mintfromassets-lack-of-slippage-control\">[M-02] <code>sNOTE.sol#_mintFromAssets()</code> Lack of slippage control</a></li>\n<li><a href=\"#m-03-no-upper-limit-on-cooldowntimeinseconds-allows-funds-to-be-locked-snote-owner\">[M-03] No upper limit on <code>coolDownTimeInSeconds</code> allows funds to be locked sNOTE owner</a></li>\n<li><a href=\"#m-04-maxshortfallwithdraw-limit-on-btp-extraction-is-not-enforced\">[M-04] MAX<em>SHORTFALL</em>WITHDRAW limit on BTP extraction is not enforced</a></li>\n<li><a href=\"#m-05-snote-holders-are-not-incetivized-to-vote-on-proposals-to-call-extracttokensforcollateralshortfall\">[M-05] <code>sNOTE</code> Holders Are Not Incetivized To Vote On Proposals To Call <code>extractTokensForCollateralShortfall</code></a></li>\n<li><a href=\"#m-06-getvotingpower-is-not-equipped-to-handle-on-chain-voting\">[M-06] <code>getVotingPower</code> Is Not Equipped To Handle On-Chain Voting</a></li>\n<li><a href=\"#m-07-_validateorder-does-not-allow-anyone-to-be-a-taker-of-an-off-chain-order\">[M-07] <code>_validateOrder</code> Does Not Allow Anyone To Be A Taker Of An Off-Chain Order</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-8\">Low Risk Findings (8)</a></li>\n<li><a href=\"#non-critical-findings-16\">Non-Critical Findings (16)</a></li>\n<li><a href=\"#gas-optimizations-23\">Gas Optimizations (23)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of the Notional smart contract system written in Solidity. The code contest took place between January 27—February 2 2022.\n\n## Wardens\n\n27 Wardens contributed reports to the Notional contest:\n\n  1. [leastwood](https://twitter.com/liam_eastwood13)\n  1. ShippooorDAO\n  1. [cmichel](https://twitter.com/cmichelio)\n  1. [TomFrenchBlockchain](https://github.com/TomAFrench)\n  1. [gzeon](https://twitter.com/gzeon)\n  1. [Dravee](https://twitter.com/JustDravee)\n  1. gellej\n  1. Jujic\n  1. GeekyLumberjack\n  1. hyh\n  1. [defsec](https://twitter.com/defsec_)\n  1. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n  1. UncleGrandpa925\n  1. samruna\n  1. [sirhashalot](https://twitter.com/SirH4shalot)\n  1. [Tomio](https://twitter.com/meidhiwirara)\n  1. SolidityScan ([cyberboy](https://twitter.com/cyberboyIndia) and [zombie](https://blog.dixitaditya.com/))\n  1. 0x1f8b\n  1. [throttle](https://twitter.com/_no_handlebars)\n  1. robee\n  1. IllIllI\n  1. PranavG\n  1. [0v3rf10w](https://twitter.com/_0v3rf10w)\n  1. cccz\n  1. [camden](https://camden.codes)\n\nThis contest was judged by [pauliax](https://twitter.com/SolidityDev). The judge also competed in the contest as a warden, but forfeited their winnings.\n\nFinal report assembled by [liveactionllama](https://twitter.com/liveactionllama) and [CloudEllie](https://twitter.com/CloudEllie1).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 18 unique vulnerabilities and 57 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 3 received a risk rating in the category of HIGH severity, 7 received a risk rating in the category of MEDIUM severity, and 8 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 16 non-critical recommendations and 23 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 Notional contest repository](https://github.com/code-423n4/2022-01-notional), and is composed of 18 smart contracts written in the Solidity programming language and includes 1745 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (3)\n## [[H-01] Treasury cannot claim COMP tokens & COMP tokens are stuck](https://github.com/code-423n4/2022-01-notional-findings/issues/192)\n_Submitted by cmichel, also found by leastwood_\n\nThe `TreasuryAction.claimCOMPAndTransfer` function uses pre- and post-balances of the `COMP` token to check which ones to transfer:\n\n```solidity\nfunction claimCOMPAndTransfer(address[] calldata cTokens)\n    external\n    override\n    onlyManagerContract\n    nonReentrant\n    returns (uint256)\n{\n    // Take a snasphot of the COMP balance before we claim COMP so that we don't inadvertently transfer\n    // something we shouldn't.\n    uint256 balanceBefore = COMP.balanceOf(address(this));\n    // @audit anyone can claim COMP on behalf of this contract and then it's stuck. https://github.com/compound-finance/compound-protocol/blob/master/contracts/Comptroller.sol#L1328\n    COMPTROLLER.claimComp(address(this), cTokens);\n    // NOTE: If Notional ever lists COMP as a collateral asset it will be cCOMP instead and it\n    // will never hold COMP balances directly. In this case we can always transfer all the COMP\n    // off of the contract.\n    uint256 balanceAfter = COMP.balanceOf(address(this));\n    uint256 amountClaimed = balanceAfter.sub(balanceBefore);\n    // NOTE: the onlyManagerContract modifier prevents a transfer to address(0) here\n    COMP.safeTransfer(treasuryManagerContract, amountClaimed);\n    // NOTE: TreasuryManager contract will emit a COMPHarvested event\n    return amountClaimed;\n}\n```\n\nNote that anyone can claim COMP tokens on behalf of any address (see [`Comptroller.claimComp`](https://github.com/compound-finance/compound-protocol/blob/master/contracts/Comptroller.sol#L1328)).\nAn attacker can claim COMP tokens on behalf of the contract and it'll never be able to claim any compound itself.\nThe COMP claimed by the attacker are stuck in the contract and cannot be retrieved.\n(One can eventually get back the stuck COMP by creating a cCOMP market and then transferring it through `transferReserveToTreasury`.)\n\n#### Recommended Mitigation Steps\n\nDon't use pre-and post-balances, can you use the entire balance?\n\n**[jeffywu (Notional) disagreed with severity and commented](https://github.com/code-423n4/2022-01-notional-findings/issues/192#issuecomment-1030843184):**\n > Dispute as a high risk bug. Would categorize this as medium risk.\n> \n> There is no profit to be gained by doing this from the attacker besides denial of service. The protocol could simply upgrade to regain access to the tokens. We will fix this regardless.\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2022-01-notional-findings/issues/192#issuecomment-1041504305):**\n > Very good find. \n> \n> It is a tough decision if this should be classified as High or Medium severity. An exploiter cannot acquire those assets, and the contracts are upgradeable if necessary, however, I think this time I will leave it in favor of wardens who both are experienced enough and submitted this as of high severity:\n> _3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals)._\n\n\n\n***\n\n## [[H-02] Cooldown and redeem windows can be rendered useless](https://github.com/code-423n4/2022-01-notional-findings/issues/68)\n_Submitted by ShippooorDAO_\n\nCooldown and redeem windows can be rendered useless.\n\n#### Proof of Concept\n\n*   Given an account that has not staked sNOTE.\n*   Account calls sNOTE.startCooldown\n*   Account waits for the duration of the cooldown period. Redeem period starts.\n*   Account can then deposit and redeem as they wish, making the cooldown useless.\n*   Multiple accounts could be used to \"hop\" between redeem windows by transfering between them, making the redeem window effictively useless.\n\nCould be used for voting power attacks using flash loan if voting process is not monitored\n<https://www.coindesk.com/tech/2020/10/29/flash-loans-have-made-their-way-to-manipulating-protocol-elections/>\n\n#### Tools Used\n\n*   VS Code\n\n#### Recommended Mitigation Steps\n\nA few ways to mitigate this problem:\nOption A: Remove the cooldown/redeem period as it's not really preventing much in current state.\nOption B: Let the contract start the cooldown on mint, and bind the cooldown/redeem window to the amount that was minted at that time by the account. Don't make sNOTE.startCooldown() available externally. Redeem should verify amount of token available using this new logic.\n\n**[jeffywu (Notional) confirmed and commented](https://github.com/code-423n4/2022-01-notional-findings/issues/68#issuecomment-1030855494):**\n > Propose to increase the severity of this [from Low] to High.\n> \n> This image is a better way to understand the potential attack.\n> ![image](https://user-images.githubusercontent.com/977434/152688228-f26123d4-1c48-4779-8005-b22638e6595c.png)\n> \n\n**[pauliax (judge) increased severity to high and commented](https://github.com/code-423n4/2022-01-notional-findings/issues/68#issuecomment-1041532469):**\n > Great find. Agree with the sponsor, the severity can be upgraded because it destroys the cooldown/redeem protection.\n> \n> \n> Could this be mitigated by including an amount (up to the whole user's balance) when starting a cooldown, and then redeem can't withdraw more than specified during the cooldown init?\n\n**[jeffywu (Notional) commented](https://github.com/code-423n4/2022-01-notional-findings/issues/68#issuecomment-1042982946):**\n > We've prevented this by refactoring how the redemption window is defined.\n\n\n\n***\n\n## [[H-03] A Malicious Treasury Manager Can Burn Treasury Tokens By Setting `makerFee` To The Amount The Maker Receives](https://github.com/code-423n4/2022-01-notional-findings/issues/230)\n_Submitted by leastwood_\n\nThe treasury manager contract holds harvested assets/`COMP` from Notional which are used to perform `NOTE` buybacks or in other areas of the protocol. The manager account is allowed to sign off-chain orders used on 0x to exchange tokens to `WETH` which can then be deposited in the Balancer LP and distributed to `sNOTE` holders.\n\nHowever, `_validateOrder` does not validate that `takerFee` and `makerFee` are set to zero, hence, it is possible for a malicious manager to receive tokens as part of a swap, but the treasury manager contract receives zero tokens as `makerFee` is set to the amount the maker receives. This can be abused to effectively burn treasury tokens at no cost to the order taker.\n\n#### Proof of Concept\n\n<https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L196-L250>\n\n<https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange-libs/contracts/src/LibFillResults.sol#L59-L91>\n\n<https://github.com/code-423n4/2022-01-notional/blob/main/contracts/utils/EIP1271Wallet.sol#L147-L188>\n```solidity\nfunction _validateOrder(bytes memory order) private view {\n    (\n        address makerToken,\n        address takerToken,\n        address feeRecipient,\n        uint256 makerAmount,\n        uint256 takerAmount\n    ) = _extractOrderInfo(order);\n\n    // No fee recipient allowed\n    require(feeRecipient == address(0), \"no fee recipient allowed\");\n\n    // MakerToken should never be WETH\n    require(makerToken != address(WETH), \"maker token must not be WETH\");\n\n    // TakerToken (proceeds) should always be WETH\n    require(takerToken == address(WETH), \"taker token must be WETH\");\n\n    address priceOracle = priceOracles[makerToken];\n\n    // Price oracle not defined\n    require(priceOracle != address(0), \"price oracle not defined\");\n\n    uint256 slippageLimit = slippageLimits[makerToken];\n\n    // Slippage limit not defined\n    require(slippageLimit != 0, \"slippage limit not defined\");\n\n    uint256 oraclePrice = _toUint(\n        AggregatorV2V3Interface(priceOracle).latestAnswer()\n    );\n\n    uint256 priceFloor = (oraclePrice * slippageLimit) /\n        SLIPPAGE_LIMIT_PRECISION;\n\n    uint256 makerDecimals = 10**ERC20(makerToken).decimals();\n\n    // makerPrice = takerAmount / makerAmount\n    uint256 makerPrice = (takerAmount * makerDecimals) / makerAmount;\n\n    require(makerPrice >= priceFloor, \"slippage is too high\");\n}\n```\n\n#### Recommended Mitigation Steps\n\nConsider checking that `makerFee == 0` and `takerFee == 0` in `EIP1271Wallet._validateOrder` s.t. the treasury manager cannot sign unfair orders which severely impact the `TreasuryManager` contract.\n\n**[jeffywu (Notional) confirmed and commented](https://github.com/code-423n4/2022-01-notional-findings/issues/230#issuecomment-1030839051):**\n > Confirmed, we will fix this.\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2022-01-notional-findings/issues/230#issuecomment-1041560475):**\n > Good job warden for identifying this issue with 0x integration.\n\n\n\n***\n\n \n# Medium Risk Findings (7)\n## [[M-01] Usage of deprecated ChainLink API in `EIP1271Wallet`](https://github.com/code-423n4/2022-01-notional-findings/issues/197)\n_Submitted by cmichel, also found by 0x1f8b, defsec, leastwood, pauliax, sirhashalot, TomFrenchBlockchain, UncleGrandpa925, and WatchPug_\n\nThe Chainlink API (`latestAnswer`) used in the `EIP1271Wallet` contract is deprecated:\n\n> This API is deprecated. Please see API Reference for the latest Price Feed API. [Chainlink Docs](https://web.archive.org/web/20210304160150/https://docs.chain.link/docs/deprecated-aggregatorinterface-api-reference)\n\nThis function does not error if no answer has been reached but returns 0. Besides, the `latestAnswer` is reported with 18 decimals for crypto quotes but 8 decimals for FX quotes (See Chainlink FAQ for more details). A best practice is to get the decimals from the oracles instead of hard-coding them in the contract.\n\n#### Recommended Mitigation Steps\n\nUse the `latestRoundData` function to get the price instead. Add checks on the return data with proper revert messages if the price is stale or the round is uncomplete, for example:\n\n```solidity\n(uint80 roundID, int256 price, , uint256 timeStamp, uint80 answeredInRound) = priceOracle.latestRoundData();\nrequire(answeredInRound >= roundID, \"...\");\nrequire(timeStamp != 0, \"...\");\n```\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2022-01-notional-findings/issues/197#issuecomment-1037191042):**\n > Valid finding. I am hesitating whether this should be low or medium but decided to leave it as a medium because the likeliness is low but the impact would be huge, and all the wardens submitted this with a medium severity. Also: \"Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\"\n\n\n\n***\n\n## [[M-02] `sNOTE.sol#_mintFromAssets()` Lack of slippage control](https://github.com/code-423n4/2022-01-notional-findings/issues/181)\n_Submitted by WatchPug, also found by cmichel, hyh, pauliax, TomFrenchBlockchain, and UncleGrandpa925_\n\nhttps://github.com/code-423n4/2022-01-notional/blob/d171cad9e86e0d02e0909eb66d4c24ab6ea6b982/contracts/sNOTE.sol#L195-L209\n\n```solidity\nBALANCER_VAULT.joinPool{value: msgValue}(\n    NOTE_ETH_POOL_ID,\n    address(this),\n    address(this), // sNOTE will receive the BPT\n    IVault.JoinPoolRequest(\n        assets,\n        maxAmountsIn,\n        abi.encode(\n            IVault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT,\n            maxAmountsIn,\n            0 // Accept however much BPT the pool will give us\n        ),\n        false // Don't use internal balances\n    )\n);\n```\n\nThe current implementation of `mintFromNOTE()` and `mintFromETH()` and `mintFromWETH()` (all are using `_mintFromAssets()` with `minimumBPT` hardcoded to `0`) provides no parameter for slippage control, making it vulnerable to front-run attacks.\n\n##### Recommendation\n\nConsider adding a `minAmountOut` parameter for these functions.\n\n**[jeffywu (Notional) confirmed](https://github.com/code-423n4/2022-01-notional-findings/issues/181)**\n\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2022-01-notional-findings/issues/181#issuecomment-1037991707):**\n > Great find, slippage should be configurable and not hardcoded to 0.\n\n\n\n***\n\n## [[M-03] No upper limit on `coolDownTimeInSeconds` allows funds to be locked sNOTE owner](https://github.com/code-423n4/2022-01-notional-findings/issues/40)\n_Submitted by TomFrenchBlockchain, also found by defsec, Dravee, and Jujic_\n\nInability for sNOTE holders to exit the pool in the case of ownership over SNOTE contract being compromised/malicious.\n\n#### Proof of Concept\n\nsNOTE works on a stkAAVE model where users have to wait a set cooldown period before being able to reclaim the underlying tokens. This cooldown period can be set to an arbitrary uint32 value in seconds by the owner of the sNOTE contract.\n\n<https://github.com/code-423n4/2022-01-notional/blob/d171cad9e86e0d02e0909eb66d4c24ab6ea6b982/contracts/sNOTE.sol#L94-L97>\n\nBelow in the `startCooldown()` function, it's possible for the owner of the sNOTE contract to choose a value for `coolDownTimeInSeconds` which always causes this function to revert (`_safe32` will always revert if `coolDownTimeInSeconds = type(uint32).max`).\n\n<https://github.com/code-423n4/2022-01-notional/blob/d171cad9e86e0d02e0909eb66d4c24ab6ea6b982/contracts/sNOTE.sol#L217-L226>\n\nShould ownership over sNOTE become compromised then all of the users' assets may be locked indefinitely.\n\n#### Recommended Mitigation Steps\n\nProvide a sensible upper limit to `coolDownTimeInSeconds` of, say, a month. This will give plenty of time for NOTE governance to withdraw funds in the event of a shortfall while giving confidence that a user's funds can't be locked forever.\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2022-01-notional-findings/issues/40#issuecomment-1039169763):**\n > Valid concern. I was thinking if this should be left as of medium or low severity, but decided this time in favor of wardens:\n> _\"Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\"_\n\n\n\n***\n\n## [[M-04] MAX_SHORTFALL_WITHDRAW limit on BTP extraction is not enforced](https://github.com/code-423n4/2022-01-notional-findings/issues/209)\n_Submitted by gellej, also found by gzeon_\n\nThe function `extractTokensForCollateralShortfall()` allows the owner of the sNote contract to withdraw up to 50% of the total amount of BPT.\n\nPresumably, this 50% limit is in place to prevent the owner from \"rug-pulling\" the sNote holders (or at least to give them a guarantee that their loss is limited to 50% of the underlying value).\n\nHowever, this limit is easily circumvented as the function can simply be called a second, third and fourth time, to withdraw almost all of the BPT.\n\nAs the contract does not enforce this limit, the bug requires stakers to trust the governance to not withdraw more than 50% of the underlying collateral. This represents a higher risk for the stakers, which may  also result in a larger discount on sNote wrt its BPT collateral (this is why I classified the bug as medium risk - users may lose value - not from an exploit, but from the lack of enforcing the 50% rule)\n\n### Proof of Concept\n\nSee above.\nThe code affected is here: <https://github.com/code-423n4/2022-01-notional/blob/main/contracts/sNOTE.sol#L100>\n\n#### Recommended Mitigation Steps\n\nRewrite the logic and enforce a limit during a time period - i.e. do not allow to withdraw over 50% *per week* (or any time period that is longer than the cooldown period, so that users have time to withdraw their collateral)\n\n**[jeffywu (Notional) confirmed](https://github.com/code-423n4/2022-01-notional-findings/issues/209)**\n\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2022-01-notional-findings/issues/209#issuecomment-1040141667):**\n > Great find, 50% withdrawal limit can be bypassed by invoking the function multiple times.\n\n\n\n***\n\n## [[M-05] `sNOTE` Holders Are Not Incetivized To Vote On Proposals To Call `extractTokensForCollateralShortfall`](https://github.com/code-423n4/2022-01-notional-findings/issues/229)\n_Submitted by leastwood_\n\nAs `sNOTE` have governance voting rights equivalent to the token amount in `NOTE`, users who stake their `NOTE` are also able to vote on governance proposals. In the event a majority of `NOTE` is staked in the `sNOTE` contract, it doesn't seem likely that stakers would be willing to vote on a proposal which liquidates a portion of their staked position.\n\nHence, the protocol may be put into a state where stakers are unwilling to vote on a proposal to call `extractTokensForCollateralShortfall`, leaving Notional insolvent as stakers continue to dump their holdings.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2022-01-notional/blob/main/contracts/sNOTE.sol#L99-L129>\n```solidity\nfunction extractTokensForCollateralShortfall(uint256 requestedWithdraw) external nonReentrant onlyOwner {\n    uint256 bptBalance = BALANCER_POOL_TOKEN.balanceOf(address(this));\n    uint256 maxBPTWithdraw = (bptBalance * MAX_SHORTFALL_WITHDRAW) / 100;\n    // Do not allow a withdraw of more than the MAX_SHORTFALL_WITHDRAW percentage. Specifically don't\n    // revert here since there may be a delay between when governance issues the token amount and when\n    // the withdraw actually occurs.\n    uint256 bptExitAmount = requestedWithdraw > maxBPTWithdraw ? maxBPTWithdraw : requestedWithdraw;\n\n    IAsset[] memory assets = new IAsset[](2);\n    assets[0] = IAsset(address(WETH));\n    assets[1] = IAsset(address(NOTE));\n    uint256[] memory minAmountsOut = new uint256[](2);\n    minAmountsOut[0] = 0;\n    minAmountsOut[1] = 0;\n\n    BALANCER_VAULT.exitPool(\n        NOTE_ETH_POOL_ID,\n        address(this),\n        payable(owner), // Owner will receive the NOTE and WETH\n        IVault.ExitPoolRequest(\n            assets,\n            minAmountsOut,\n            abi.encode(\n                IVault.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT,\n                bptExitAmount\n            ),\n            false // Don't use internal balances\n        )\n    );\n}\n```\n\n#### Recommended Mitigation Steps\n\nConsider redesigning this mechanism to better align stakers with the health of the protocol. It might be useful to allocate a percentage of generated fees to an insurance fund which will be used to cover any collateral shortfall events. This fund can be staked to generate additional yield.\n\n**[jeffywu (Notional) acknowledged and commented](https://github.com/code-423n4/2022-01-notional-findings/issues/229#issuecomment-1030839281):**\n > Acknowledged, however, there are technical difficulties with programmatic collateral shortfall detection at this moment. We will look to develop a method that allows for programmatic detection in the future (these issues have been discussed with the warden).\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2022-01-notional-findings/issues/229#issuecomment-1041536723):**\n > A hypothetical but valid concern.\n\n\n\n***\n\n## [[M-06] `getVotingPower` Is Not Equipped To Handle On-Chain Voting](https://github.com/code-423n4/2022-01-notional-findings/issues/165)\n_Submitted by leastwood_\n\nAs `NOTE` continues to be staked in the `sNOTE` contract, it is important that Notional's governance is able to correctly handle on-chain voting by calculating the relative power `sNOTE` has in terms of its equivalent `NOTE` amount.\n\n`getVotingPower` is a useful function in tracking the relative voting power a staker has, however, it does not utilise any checkpointing mechanism to ensure the user's voting power is a snapshot of a specific block number. As a result, it would be possible to manipulate a user's voting power by casting a vote on-chain and then have them transfer their `sNOTE` to another account to then vote again.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2022-01-notional/blob/main/contracts/sNOTE.sol#L271-L293>\n```solidity\nfunction getVotingPower(uint256 sNOTEAmount) public view returns (uint256) {\n    // Gets the BPT token price (in ETH)\n    uint256 bptPrice = IPriceOracle(address(BALANCER_POOL_TOKEN)).getLatest(IPriceOracle.Variable.BPT_PRICE);\n    // Gets the NOTE token price (in ETH)\n    uint256 notePrice = IPriceOracle(address(BALANCER_POOL_TOKEN)).getLatest(IPriceOracle.Variable.PAIR_PRICE);\n    \n    // Since both bptPrice and notePrice are denominated in ETH, we can use\n    // this formula to calculate noteAmount\n    // bptBalance * bptPrice = notePrice * noteAmount\n    // noteAmount = bptPrice/notePrice * bptBalance\n    uint256 priceRatio = bptPrice * 1e18 / notePrice;\n    uint256 bptBalance = BALANCER_POOL_TOKEN.balanceOf(address(this));\n\n    // Amount_note = Price_NOTE_per_BPT * BPT_supply * 80% (80/20 pool)\n    uint256 noteAmount = priceRatio * bptBalance * 80 / 100;\n\n    // Reduce precision down to 1e8 (NOTE token)\n    // priceRatio and bptBalance are both 1e18 (1e36 total)\n    // we divide by 1e28 to get to 1e8\n    noteAmount /= 1e28;\n\n    return (noteAmount * sNOTEAmount) / totalSupply();\n}\n```\n\n#### Recommended Mitigation Steps\n\nConsider implementing a `getPriorVotingPower` function which takes in a `blockNumber` argument and returns the correct balance at that specific block.\n\n**[jeffywu (Notional) confirmed](https://github.com/code-423n4/2022-01-notional-findings/issues/165)**\n\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2022-01-notional-findings/issues/165#issuecomment-1041539604):**\n > Great find, voting power snapshots would also make the system more resilient to manipulation, e.g. by using flashloans.\n\n\n\n***\n\n## [[M-07] `_validateOrder` Does Not Allow Anyone To Be A Taker Of An Off-Chain Order](https://github.com/code-423n4/2022-01-notional-findings/issues/152)\n_Submitted by leastwood_\n\nThe `EIP1271Wallet` contract intends to allow the treasury manager account to sign off-chain orders in 0x on behalf of the `TreasuryManager` contract, which holds harvested assets/`COMP` from Notional. While the `EIP1271Wallet._validateOrder` function mostly prevents the treasury manager from exploiting these orders, it does not ensure that the `takerAddress` and `senderAddress` are set to the zero address. As a result, it is possible for the manager to have sole rights to an off-chain order and due to the flexibility in `makerPrice`, the manager is able to extract value from the treasury by maximising the allowed slippage.\n\nBy setting `takerAddress` to the zero address, any user can be the taker of an off-chain order. By setting `senderAddress` to the zero address, anyone is allowed to access the exchange methods that interact with the order, including filling the order itself. Hence, these two order addresses can be manipulated by the manager to effectively restrict order trades to themselves.\n\n#### Proof of Concept\n\n<https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange-libs/contracts/src/LibOrder.sol#L66>\n```solidity\naddress takerAddress;   // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n```\n\n<https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L196-L250>\n\n<https://github.com/0xProject/0x-monorepo/blob/0571244e9e84b9ad778bccb99b837dd6f9baaf6e/contracts/exchange/contracts/src/MixinExchangeCore.sol#L354-L374>\n\n<https://github.com/code-423n4/2022-01-notional/blob/main/contracts/utils/EIP1271Wallet.sol#L147-L188>\n```solidity\nfunction _validateOrder(bytes memory order) private view {\n    (\n        address makerToken,\n        address takerToken,\n        address feeRecipient,\n        uint256 makerAmount,\n        uint256 takerAmount\n    ) = _extractOrderInfo(order);\n\n    // No fee recipient allowed\n    require(feeRecipient == address(0), \"no fee recipient allowed\");\n\n    // MakerToken should never be WETH\n    require(makerToken != address(WETH), \"maker token must not be WETH\");\n\n    // TakerToken (proceeds) should always be WETH\n    require(takerToken == address(WETH), \"taker token must be WETH\");\n\n    address priceOracle = priceOracles[makerToken];\n\n    // Price oracle not defined\n    require(priceOracle != address(0), \"price oracle not defined\");\n\n    uint256 slippageLimit = slippageLimits[makerToken];\n\n    // Slippage limit not defined\n    require(slippageLimit != 0, \"slippage limit not defined\");\n\n    uint256 oraclePrice = _toUint(\n        AggregatorV2V3Interface(priceOracle).latestAnswer()\n    );\n\n    uint256 priceFloor = (oraclePrice * slippageLimit) /\n        SLIPPAGE_LIMIT_PRECISION;\n\n    uint256 makerDecimals = 10**ERC20(makerToken).decimals();\n\n    // makerPrice = takerAmount / makerAmount\n    uint256 makerPrice = (takerAmount * makerDecimals) / makerAmount;\n\n    require(makerPrice >= priceFloor, \"slippage is too high\");\n}\n```\n\n#### Tools Used\n\nManual code review.\nDiscussions with Notional team.\n\n#### Recommended Mitigation Steps\n\nConsider adding `require(takerAddress == address(0), \"manager cannot set taker\");` and `require(senderAddress == address(0), \"manager cannot set sender\");` statements to `_validateOrder`. This should allow any user to fill an order and prevent the manager from restricting exchange methods to themselves.\n\n**[jeffywu (Notional) confirmed](https://github.com/code-423n4/2022-01-notional-findings/issues/152)**\n\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2022-01-notional-findings/issues/152#issuecomment-1041564430):**\n > Great find, I like when wardens understand and identify issues with integrated external protocols.\n\n\n\n***\n\n# Low Risk Findings (8)\n- [[L-01] Missing validation check in totalSupply()](https://github.com/code-423n4/2022-01-notional-findings/issues/170) _Submitted by SolidityScan, also found by cmichel and Dravee_\n- [[L-02] setReserveCashBalance can only set less reserves](https://github.com/code-423n4/2022-01-notional-findings/issues/103) _Submitted by GeekyLumberjack_\n- [[L-03] No upper limit check on swap fee Percentage](https://github.com/code-423n4/2022-01-notional-findings/issues/182) _Submitted by samruna, also found by Jujic_\n- [[L-04] `getVotingPower` Truncates Result Leading To Inaccuracies In Voting Power](https://github.com/code-423n4/2022-01-notional-findings/issues/222) _Submitted by leastwood, also found by hyh_\n- [[L-05] `makerPrice` assumes oracle price is always in 18 decimals](https://github.com/code-423n4/2022-01-notional-findings/issues/198) _Submitted by cmichel_\n- [[L-06] Users Can Game `sNOTE` Minting If Buybacks Occur Infrequently](https://github.com/code-423n4/2022-01-notional-findings/issues/231) _Submitted by leastwood, also found by cmichel_\n- [[L-07] `extractTokensForCollateralShortfall` Can Be Frontrun By Non-Stakers](https://github.com/code-423n4/2022-01-notional-findings/issues/227) _Submitted by leastwood_\n- [[L-08] Conversions between sNOTE and BPT when burning cause less sNOTE to be burned than expected](https://github.com/code-423n4/2022-01-notional-findings/issues/71) _Submitted by TomFrenchBlockchain, also found by gellej and gzeon_\n\n# Non-Critical Findings (16)\n- [[N-01] safeApprove of openZeppelin is deprecated](https://github.com/code-423n4/2022-01-notional-findings/issues/20) _Submitted by robee, also found by sirhashalot_\n- [[N-02] `approve()` return value not checked](https://github.com/code-423n4/2022-01-notional-findings/issues/115) _Submitted by sirhashalot, also found by 0x1f8b, cmichel, PranavG, robee, and SolidityScan_\n- [[N-03] Multiple Missing zero address checks ](https://github.com/code-423n4/2022-01-notional-findings/issues/174) _Submitted by SolidityScan, also found by 0v3rf10w, cccz, hyh, Jujic, and robee_\n- [[N-04] Require with empty message](https://github.com/code-423n4/2022-01-notional-findings/issues/18) _Submitted by robee_\n- [[N-05] Improper Contract Upgrades Can Lead To Loss Of Contract Ownership](https://github.com/code-423n4/2022-01-notional-findings/issues/223) _Submitted by leastwood, also found by robee_\n- [[N-06] _getToken not resilient to errors](https://github.com/code-423n4/2022-01-notional-findings/issues/36) _Submitted by 0x1f8b_\n- [[N-07] TreasuryManager and sNOTE events aren't indexed](https://github.com/code-423n4/2022-01-notional-findings/issues/131) _Submitted by hyh_\n- [[N-08] `StorageId` enums may never be shuffled](https://github.com/code-423n4/2022-01-notional-findings/issues/196) _Submitted by cmichel_\n- [[N-09] Incorrect comment on cooldown check](https://github.com/code-423n4/2022-01-notional-findings/issues/45) _Submitted by camden, also found by hyh_\n- [[N-10] Comment refers to NOTE when it means WETH](https://github.com/code-423n4/2022-01-notional-findings/issues/42) _Submitted by TomFrenchBlockchain_\n- [[N-11] `TreasuryAction.sol`:`modifier onlyOwner()`'s revert message is confusing](https://github.com/code-423n4/2022-01-notional-findings/issues/106) _Submitted by Dravee_\n- [[N-12] `TreasuryAction.sol:transferReserveToTreasury()`: Missing @return comment ](https://github.com/code-423n4/2022-01-notional-findings/issues/111) _Submitted by Dravee_\n- [[N-13] Consider making contracts Pausable](https://github.com/code-423n4/2022-01-notional-findings/issues/90) _Submitted by Jujic, also found by hyh_\n- [[N-14] Inclusive conditions](https://github.com/code-423n4/2022-01-notional-findings/issues/202) _Submitted by pauliax, also found by cmichel and Dravee_\n- [[N-15] Oracle Time Interval Is Small](https://github.com/code-423n4/2022-01-notional-findings/issues/150) _Submitted by defsec_\n- [[N-16] Missing parameter validation](https://github.com/code-423n4/2022-01-notional-findings/issues/195) _Submitted by cmichel_\n\n# Gas Optimizations (23)\n- [[G-01] Gas: Places where both the `return` statement and a named `returns` are used](https://github.com/code-423n4/2022-01-notional-findings/issues/95) _Submitted by Dravee, also found by Jujic and robee_\n- [[G-02] Prefix (`++i`), rather than postfix (`i++`), increment/decrement operators should be used in for-loops](https://github.com/code-423n4/2022-01-notional-findings/issues/228) _Submitted by IllIllI, also found by defsec, Dravee, robee, and throttle_\n- [[G-03] Remove unnecessary super._beforeTokenTransfer()](https://github.com/code-423n4/2022-01-notional-findings/issues/112) _Submitted by sirhashalot_\n- [[G-04] Revert string > 32 bytes](https://github.com/code-423n4/2022-01-notional-findings/issues/110) _Submitted by sirhashalot, also found by Jujic_\n- [[G-05] Unused state variables](https://github.com/code-423n4/2022-01-notional-findings/issues/204) _Submitted by pauliax, also found by gzeon, Jujic, samruna, ShippooorDAO, SolidityScan, throttle, and WatchPug_\n- [[G-06] Unnecessary inheritance messing with inheritance tree.](https://github.com/code-423n4/2022-01-notional-findings/issues/62) _Submitted by TomFrenchBlockchain_\n- [[G-07] Gas: When a function use the `onlyOwner` modifier, use `msg.sender` instead of `owner`](https://github.com/code-423n4/2022-01-notional-findings/issues/97) _Submitted by Dravee_\n- [[G-08] Initialisation of zero entries in arrays is unnecessary](https://github.com/code-423n4/2022-01-notional-findings/issues/59) _Submitted by TomFrenchBlockchain, also found by Jujic and throttle_\n- [[G-09] Placement of require statement](https://github.com/code-423n4/2022-01-notional-findings/issues/55) _Submitted by Jujic_\n- [[G-10] Gas: Use Custom Errors instead of Revert Strings to save Gas](https://github.com/code-423n4/2022-01-notional-findings/issues/86) _Submitted by Dravee_\n- [[G-11] Gas in `Bitmap.sol:getMSB()`: unnecessary arithmetic operation](https://github.com/code-423n4/2022-01-notional-findings/issues/128) _Submitted by Dravee_\n- [[G-12] Gas in `TreasuryManager.sol`: Inline function `_investWETHToBuyNOTE()`](https://github.com/code-423n4/2022-01-notional-findings/issues/129) _Submitted by Dravee_\n- [[G-13] `BalanceHandler.sol:getBalanceStorage()`: `store` is used only once and shouldn't get cached](https://github.com/code-423n4/2022-01-notional-findings/issues/125) _Submitted by Dravee_\n- [[G-14] `mintFromNOTE`, `mintFromETH` and `mintFromWETH` can be merged into two functions to give users better experience.](https://github.com/code-423n4/2022-01-notional-findings/issues/41) _Submitted by TomFrenchBlockchain_\n- [[G-15] Gas: `reserveInternal.subNoNeg(bufferInternal)` can be unchecked](https://github.com/code-423n4/2022-01-notional-findings/issues/199) _Submitted by cmichel_\n- [[G-16] Double _requireAccountNotInCoolDown](https://github.com/code-423n4/2022-01-notional-findings/issues/214) _Submitted by Tomio, also found by TomFrenchBlockchain_\n- [[G-17] Optimization on _redeemAndTransfer](https://github.com/code-423n4/2022-01-notional-findings/issues/213) _Submitted by Tomio, also found by pauliax_\n- [[G-18] considered changing it to storage ](https://github.com/code-423n4/2022-01-notional-findings/issues/210) _Submitted by Tomio_\n- [[G-19] Gas Optimization: Unnecessary comparison](https://github.com/code-423n4/2022-01-notional-findings/issues/161) _Submitted by gzeon_\n- [[G-20] coolDown.redeemWindowEnd serves no purpose](https://github.com/code-423n4/2022-01-notional-findings/issues/43) _Submitted by TomFrenchBlockchain_\n- [[G-21] Require statement on nonzero pool address is impossible to fail ](https://github.com/code-423n4/2022-01-notional-findings/issues/39) _Submitted by TomFrenchBlockchain_\n- [[G-22] `_investWETHToBuyNOTE` is unnecessarily roundabout.](https://github.com/code-423n4/2022-01-notional-findings/issues/65) _Submitted by TomFrenchBlockchain_\n- [[G-23] Gas: Missing checks for non-zero transfer value calls](https://github.com/code-423n4/2022-01-notional-findings/issues/94) _Submitted by Dravee, also found by Jujic_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}