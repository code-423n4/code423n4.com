{
  "circa": {
    "title": "Boot Finance contest",
    "sponsor": "Boot Finance",
    "slug": "2021-11-bootfinance",
    "date": "2022-01-21",
    "findings": "https://github.com/code-423n4/2021-11-bootfinance-findings/issues",
    "contest": 51
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Boot Finance contest smart contract system written in Solidity. The code contest took place between November 4—November 10 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>28 Wardens contributed reports to the Boot Finance contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/jonah1005w\">jonah1005</a></li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li>pants</li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li>Reigada</li>\n<li><a href=\"https://twitter.com/Meta0xNull\">Meta0xNull</a></li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/liam_eastwood13\">leastwood</a></li>\n<li><a href=\"https://twitter.com/_fr0zn\">fr0zn</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/MukeshJ_eth\">JMukesh</a></li>\n<li>0v3rf10w</li>\n<li>hyh</li>\n<li><a href=\"https://twitter.com/n4th4n131?t=ZXGbALC3q6JMMoolZddgHg&#x26;s=09\">nathaniel</a></li>\n<li>elprofesor</li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li>mics</li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/loop_225\">loop</a></li>\n<li><a href=\"https://www.instagram.com/riyan_rfa/\">rfa</a></li>\n<li><a href=\"https://github.com/TomAFrench\">TomFrenchBlockchain</a></li>\n<li><a href=\"https://tqts.ar/\">tqts</a></li>\n<li><a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a></li>\n<li>0x0x0x</li>\n<li>PranavG</li>\n<li><a href=\"https://twitter.com/jah_s3\">jah</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://github.com/0xean\">0xean</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 55 unique vulnerabilities and 156 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 9 received a risk rating in the category of HIGH severity, 12 received a risk rating in the category of MEDIUM severity, and 34 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 39 non-critical recommendations and 62 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-11-bootfinance\">C4 Boot Finance contest repository</a>, and is composed of 27 smart contracts written in the Solidity programming language and includes 5588 lines of Solidity code and 107 lines of JavaScript.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-9\" style=\"position:relative;\"><a href=\"#high-risk-findings-9\" aria-label=\"high risk findings 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (9)</h1>\n<h2 id=\"h-01-contract-basicsale-is-missing-an-approveaddressvestlock-2256-1-call\" style=\"position:relative;\"><a href=\"#h-01-contract-basicsale-is-missing-an-approveaddressvestlock-2256-1-call\" aria-label=\"h 01 contract basicsale is missing an approveaddressvestlock 2256 1 call permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/135\">[H-01] Contract BasicSale is missing an approve(address(vestLock), 2**256-1) call</a></h2>\n<p><em>Submitted by Reigada, also found by WatchPug</em></p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>As we can see in the contracts <code>AirdropDistribution</code> and <code>InvestorDistribution</code>, they both have the following <code>approve() call: mainToken.approve(address(vestLock), 2\\*\\*256-1);</code></p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/AirdropDistribution.sol#L499\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/AirdropDistribution.sol#L499</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/InvestorDistribution.sol#L80\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/InvestorDistribution.sol#L80</a></li>\n</ul>\n<p>This is necessary because both contracts transfer tokens to the vesting contract by calling its <code>vest()</code> function:</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/AirdropDistribution.sol#L544\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/AirdropDistribution.sol#L544</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/AirdropDistribution.sol#L569\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/AirdropDistribution.sol#L569</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/InvestorDistribution.sol#L134\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/InvestorDistribution.sol#L134</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/InvestorDistribution.sol#L158\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/InvestorDistribution.sol#L158</a></li>\n</ul>\n<p>The code of the <code>vest()</code> function in the Vesting contract performs a transfer from <code>msg.sender</code> to Vesting contract address -> <code>vestingToken.transferFrom(msg.sender, address(this), \\_amount);</code>\n<a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/Vesting.sol#L95\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/Vesting.sol#L95</a></p>\n<p>Same is done in the BasicSale contract:\n<a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/tge/contracts/PublicSale.sol#L225\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/tge/contracts/PublicSale.sol#L225</a></p>\n<p>The problem is that this contract is missing the <code>approve()</code> call. For that reason, the contract is totally useless as the function <code>\\_withdrawShare()</code> will always revert with the following message:\nrevert reason: ERC20: transfer amount exceeds allowance. This means that all the <code>mainToken</code> sent to the contract would be stuck there forever. No way to retrieve them.</p>\n<p>How this issue was not detected in the testing phase?\nVery simple. The mock used by the team has an empty <code>vest()</code> function that performs no transfer call.\n<a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/tge/contracts/helper/MockVesting.sol#L10\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/tge/contracts/helper/MockVesting.sol#L10</a></p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>See below Brownie’s custom output:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Calling -&gt; publicsale.withdrawShare(1, 1, {&#39;from&#39;: user2})</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Transaction sent: 0x9976e4f48bd14f9be8e3e0f4d80fdb8f660afab96a7cbd64fa252510154e7fde</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Gas price: 0.0 gwei   Gas limit: 6721975   Nonce: 5</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">BasicSale.withdrawShare confirmed (ERC20: transfer amount exceeds allowance)   Block: 13577532   Gas used: 323334 (4.81%)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Call trace for &#39;0x9976e4f48bd14f9be8e3e0f4d80fdb8f660afab96a7cbd64fa252510154e7fde&#39;:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Initial call cost  \\[21344 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">BasicSale.withdrawShare  0:3724  \\[16114 / -193010 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">├── BasicSale.\\_withdrawShare  111:1109  \\[8643 / 63957 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   ├── BasicSale.\\_updateEmission  116:405  \\[53294 / 55739 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   └── BasicSale.getDayEmission  233:248  \\[2445 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   ├── BasicSale.\\_processWithdrawal  437:993  \\[-7726 / -616 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   ├── BasicSale.getEmissionShare  484:859  \\[4956 / 6919 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   │   │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   │   └── MockERC20.balanceOf  \\[STATICCALL]  616:738  \\[1963 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   │           ├── address: mockerc20.address</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   │           ├── input arguments:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   │           │   └── account: publicsale.address</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   │           └── return value: 100000000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   └── SafeMath.sub  924:984  \\[191 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   └── SafeMath.sub  1040:1100  \\[191 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">├── MockERC20.transfer  \\[CALL]  1269:1554  \\[1115 / 30109 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   ├── address: mockerc20.address</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   ├── value: 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   ├── input arguments:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   │   ├── recipient: user2.address</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   │   └── amount: 27272727272727272727</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   └── return value: True</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   └── ERC20.transfer  1366:1534  \\[50 / 28994 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│       └── ERC20.\\_transfer  1374:1526  \\[28944 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">└── Vesting.vest  \\[CALL]  1705:3712  \\[-330491 / -303190 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   ├── address: vesting.address</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   ├── value: 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   ├── input arguments:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   ├── \\_beneficiary: user2.address</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   ├── \\_amount: 63636363636363636363</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   └── \\_isRevocable: 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   └── revert reason: ERC20: transfer amount exceeds allowance &lt;-------------</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">├── SafeMath.add  1855:1883  \\[94 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">├── SafeMath.add  3182:3210  \\[94 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">├── SafeMath.add  3236:3264  \\[94 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">└── MockERC20.transferFrom  \\[CALL]  3341:3700  \\[99923 / 27019 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   ├── address: mockerc20.address</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   ├── value: 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   ├── input arguments:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   ├── sender: publicsale.address</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   ├── recipient: vesting.address</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   │   └── amount: 63636363636363636363</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│   └── revert reason: ERC20: transfer amount exceeds allowance</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">└── ERC20.transferFrom  3465:3700  \\[-97648 / -72904 gas]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">└── ERC20.\\_transfer  3473:3625  \\[24744 gas]</span></span></code></pre>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual testing</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The following <code>approve()</code> call should be added in the constructor of the BasicSale contract:\n<code>mainToken.approve(address(vestLock), 2\\*\\*256-1);</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/135\">chickenpie347 (Boot Finance) confirmed</a></strong> </p>\n<h2 id=\"h-02-can-not-update-target-price\" style=\"position:relative;\"><a href=\"#h-02-can-not-update-target-price\" aria-label=\"h 02 can not update target price permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/143\">[H-02] Can not update target price</a></h2>\n<p><em>Submitted by jonah1005, also found by WatchPug</em></p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The sanity checks in <code>rampTargetPrice</code> are broken\n<a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/customswap/contracts/SwapUtils.sol#L1571-L1581\">SwapUtils.sol#L1571-L1581</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">futureTargetPricePrecise</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">initialTargetPricePrecise</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">futureTargetPricePrecise</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">MAX_RELATIVE_PRICE_CHANGE</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WEI_UNIT</span><span class=\"mtk1\">) &gt;= </span><span class=\"mtk12\">initialTargetPricePrecise</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;futureTargetPrice_ is too small&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">futureTargetPricePrecise</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">initialTargetPricePrecise</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">MAX_RELATIVE_PRICE_CHANGE</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WEI_UNIT</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;futureTargetPrice_ is too large&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span></code></pre>\n<p>If <code>futureTargetPricePrecise</code> is smaller than <code>initialTargetPricePrecise</code> 0.01 of <code>futureTargetPricePrecise</code> would never larger than <code>initialTargetPricePrecise</code>.</p>\n<p>Admin would not be able to ramp the target price. As it’s one of the most important features of the customswap, I consider this is a high-risk issue</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Here’s a web3.py script to demo that it’s not possible to change the target price even by 1 wei.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"python\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    p1, p2, _, _ =swap.functions.targetPriceStorage().call()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    future = w3.eth.getBlock(w3.eth.block_number)[</span><span class=\"mtk8\">&#39;timestamp&#39;</span><span class=\"mtk1\">] + </span><span class=\"mtk7\">200</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">3600</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># futureTargetPrice_ is too small</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    swap.functions.rampTargetPrice(p1 -</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, future).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># futureTargetPrice_ is too large</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    swap.functions.rampTargetPrice(p1 + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, future).transact()</span></span></span></code></pre>\n<h4 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Would it be something like:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">futureTargetPricePrecise</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">initialTargetPricePrecise</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">futureTargetPricePrecise</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">MAX_RELATIVE_PRICE_CHANGE</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">WEI_UNIT</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WEI_UNIT</span><span class=\"mtk1\">) &gt;= </span><span class=\"mtk12\">initialTargetPricePrecise</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;futureTargetPrice_ is too small&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">futureTargetPricePrecise</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">initialTargetPricePrecise</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">MAX_RELATIVE_PRICE_CHANGE</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">WEI_UNIT</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WEI_UNIT</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;futureTargetPrice_ is too large&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span></code></pre>\n<p>I believe the dev would spot this mistake if there’s a more relaxed timeline.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/143\">chickenpie347 (Boot Finance) confirmed</a></strong> </p>\n<h2 id=\"h-03-swaputilssol-wrong-implementation\" style=\"position:relative;\"><a href=\"#h-03-swaputilssol-wrong-implementation\" aria-label=\"h 03 swaputilssol wrong implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/252\">[H-03] <code>SwapUtils.sol</code> Wrong implementation</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>Based on the context, the <code>tokenPrecisionMultipliers</code> used in price calculation should be calculated in realtime based on <code>initialTargetPrice</code>, <code>futureTargetPrice</code>, <code>futureTargetPriceTime</code> and current time, just like <code>getA()</code> and <code>getA2()</code>.</p>\n<p>However, in the current implementation, <code>tokenPrecisionMultipliers</code> used in price calculation is the stored value, it will only be changed when the owner called <code>rampTargetPrice()</code> and <code>stopRampTargetPrice()</code>.</p>\n<p>As a result, the <code>targetPrice</code> set by the owner will not be effective until another <code>targetPrice</code> is being set or <code>stopRampTargetPrice()</code> is called.</p>\n<h4 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Consider adding <code>Swap.targetPrice</code> and changing the <code>_xp()</code> at L661 from:</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/f102ee73eb320532c5a7c1e833f225c479577e39/customswap/contracts/SwapUtils.sol#L661-L667\">https://github.com/code-423n4/2021-11-bootfinance/blob/f102ee73eb320532c5a7c1e833f225c479577e39/customswap/contracts/SwapUtils.sol#L661-L667</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_xp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Swap</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balances</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_xp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">balances</span><span class=\"mtk1\">, </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenPrecisionMultipliers</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>To:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_xp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Swap</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balances</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[</span><span class=\"mtk7\">2</span><span class=\"mtk1\">] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenPrecisionMultipliers</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenPrecisionMultipliers</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">tokenPrecisionMultipliers</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">targetPrice</span><span class=\"mtk1\">.</span><span class=\"mtk12\">originalPrecisionMultipliers</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">].</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_getTargetPricePrecise</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WEI_UNIT</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_xp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">balances</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenPrecisionMultipliers</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/252\">chickenpie347 (Boot Finance) confirmed</a></strong></p>\n<h2 id=\"h-04-swaps-are-not-split-when-trade-crosses-target-price\" style=\"position:relative;\"><a href=\"#h-04-swaps-are-not-split-when-trade-crosses-target-price\" aria-label=\"h 04 swaps are not split when trade crosses target price permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/216\">[H-04] Swaps are not split when trade crosses target price</a></h2>\n<p><em>Submitted by cmichel, also found by gzeon</em></p>\n<p>The protocol uses two amplifier values A1 and A2 for the swap, depending on the target price, see <code>SwapUtils.determineA</code>.\nThe swap curve is therefore a join of two different curves at the target price.\nWhen doing a trade that crosses the target price, it should first perform the trade partially with A1 up to the target price, and then the rest of the trade order with A2.</p>\n<p>However, the <code>SwapUtils.swap / _calculateSwap</code> function does not do this, it only uses the “new A”, see <code>getYC</code> step 5.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// 5. Check if we switched A&#39;s during the swap</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">aNew</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">a</span><span class=\"mtk1\">){     </span><span class=\"mtk3\">// We have used the correct A</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">y</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {    </span><span class=\"mtk3\">// We have switched A&#39;s, do it again with the new A</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getY</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenIndexFrom</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenIndexTo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">x</span><span class=\"mtk1\">, </span><span class=\"mtk12\">xp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">aNew</span><span class=\"mtk1\">, </span><span class=\"mtk12\">d</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Trades that cross the target price and would lead to a new amplifier being used are not split up and use the new amplifier for the <em>entire trade</em>.\nThis can lead to a worse (better) average execution price than manually splitting the trade into two transactions, first up to but below the target price, and a second one with the rest of the trader order size, using both A1 and A2 values.</p>\n<p>In the worst case, it could even be possible to make the entire trade with one amplifier and then sell the swap result again using the other amplifier making a profit.</p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Trades that lead to a change in amplifier value need to be split up into two trades using both amplifiers to correctly calculate the swap result.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/216\">chickenpie347 (Boot Finance) confirmed</a></strong></p>\n<h2 id=\"h-05-claim-airdrop-repeatedly\" style=\"position:relative;\"><a href=\"#h-05-claim-airdrop-repeatedly\" aria-label=\"h 05 claim airdrop repeatedly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/129\">[H-05] Claim airdrop repeatedly</a></h2>\n<p><em>Submitted by gpersoon, also found by elprofesor, fr0zn, and pauliax</em></p>\n<h4 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Suppose someone claims the last part of his airdrop via <code>claimExact()</code> of <code>AirdropDistribution.sol</code>\nThen <code>airdrop\\[msg.sender].amount</code> will be set to 0.</p>\n<p>Suppose you then call validate() again.\nThe check <code>airdrop\\[msg.sender].amount == 0</code> will allow you to continue, because amount has just be set to 0.\nIn the next part of the function, <code>airdrop\\[msg.sender]</code> is overwritten with fresh values and <code>airdrop\\[msg.sender]</code>.claimed will be reset to 0.</p>\n<p>Now you can claim your airdrop again (as long as there are tokens present in the contract)</p>\n<p>Note: The function <code>claim()</code> prevents this from happening via <code>assert(airdrop\\[msg.sender].amount - claimable != 0);</code>, which has its own problems, see other reported issues.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>// <a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/vesting/contracts/AirdropDistribution.sol#L555-L563\">https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/vesting/contracts/AirdropDistribution.sol#L555-L563</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">claimExact</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> \\</span><span class=\"mtk12\">_value</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">airdrop</span><span class=\"mtk1\">\\[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span><span class=\"mtk8\">`</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">    uint256 avail = _available_supply();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">    uint256 claimable = avail * airdrop[msg.sender].fraction / 10**18; //</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">    if (airdrop[msg.sender].claimed != 0){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">        claimable -= airdrop[msg.sender].claimed;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">    require(airdrop[msg.sender].amount &gt;= claimable); // amount can be equal to claimable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">    require(_value &lt;= claimable);                       // _value can be equal to claimable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">    airdrop[msg.sender].amount -= _value;      // amount will be set to 0 with the last claim</span></span></span></code></pre>\n<p>// <a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/vesting/contracts/AirdropDistribution.sol#L504-L517\">https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/vesting/contracts/AirdropDistribution.sol#L504-L517</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">validate</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">airdrop</span><span class=\"mtk1\">\\[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Already validated.&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">Airdrop</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newAirdrop</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">Airdrop</span><span class=\"mtk1\">(</span><span class=\"mtk12\">airdroppable</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">airdroppable</span><span class=\"mtk1\">, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">\\*\\*</span><span class=\"mtk7\">18</span><span class=\"mtk1\"> \\* </span><span class=\"mtk12\">airdroppable</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">airdrop_supply</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">airdrop</span><span class=\"mtk1\">\\[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">newAirdrop</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">validated</span><span class=\"mtk1\">\\[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;   </span><span class=\"mtk3\">// this is set, but isn&#39;t checked on entry of this function</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add the following to <code>validate() : require(validated\\[msg.sender]== 0, \"Already validated.\");</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/129#issuecomment-964720927\">chickenpie347 (Boot Finance) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p>Addressed in issue #101 </p>\n</blockquote>\n<h2 id=\"h-06-ideal-balance-is-not-calculated-correctly-when-providing-imbalanced-liquidity\" style=\"position:relative;\"><a href=\"#h-06-ideal-balance-is-not-calculated-correctly-when-providing-imbalanced-liquidity\" aria-label=\"h 06 ideal balance is not calculated correctly when providing imbalanced liquidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/150\">[H-06] Ideal balance is not calculated correctly when providing imbalanced liquidity</a></h2>\n<p><em>Submitted by jonah1005</em></p>\n<h4 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>When a user provides imbalanced liquidity, the fee is calculated according to the ideal balance. In saddle finance, the optimal balance should be the same ratio as in the Pool.</p>\n<p>Take, for example, if there’s 10000 USD and 10000 DAI in the saddle’s USD/DAI pool, the user should get the optimal lp if he provides lp with ratio = 1.</p>\n<p>However, if the <code>customSwap</code> pool is created with a target price = 2. The user would get 2 times more lp if he deposits DAI.\n<a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/customswap/contracts/SwapUtils.sol#L1227-L1245\">SwapUtils.sol#L1227-L1245</a>\nThe current implementation does not calculates ideal balance correctly.</p>\n<p>If the target price is set to be 10, the ideal balance deviates by 10.\nThe fee deviates a lot. I consider this is a high-risk issues.</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>We can observe the issue if we initiates two pools DAI/LINK pool and set the target price to be 4.</p>\n<p>For the first pool, we deposit more DAI.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"python\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    swap = deploy_contract(</span><span class=\"mtk8\">&#39;Swap&#39;</span><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        [dai.address, link.address], [</span><span class=\"mtk7\">18</span><span class=\"mtk1\">, </span><span class=\"mtk7\">18</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&#39;lp&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;lp&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">85</span><span class=\"mtk1\">, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">7</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\">* </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">18</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    link.functions.approve(swap.address, deposit_amount).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    dai.functions.approve(swap.address, deposit_amount).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    previous_lp = lptoken.functions.balanceOf(user).call()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    swap.functions.addLiquidity([deposit_amount, deposit_amount // </span><span class=\"mtk7\">10</span><span class=\"mtk1\">], </span><span class=\"mtk7\">10</span><span class=\"mtk1\">, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">18</span><span class=\"mtk1\">).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    post_lp = lptoken.functions.balanceOf(user).call()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">print</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;get lp&#39;</span><span class=\"mtk1\">, post_lp - previous_lp)</span></span></span></code></pre>\n<p>For the second pool, one we deposit more DAI.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"python\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    swap = deploy_contract(</span><span class=\"mtk8\">&#39;Swap&#39;</span><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        [dai.address, link.address], [</span><span class=\"mtk7\">18</span><span class=\"mtk1\">, </span><span class=\"mtk7\">18</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&#39;lp&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;lp&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">85</span><span class=\"mtk1\">, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">7</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\">* </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">18</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    link.functions.approve(swap.address, deposit_amount).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    dai.functions.approve(swap.address, deposit_amount).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    previous_lp = lptoken.functions.balanceOf(user).call()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    swap.functions.addLiquidity([deposit_amount, deposit_amount // </span><span class=\"mtk7\">10</span><span class=\"mtk1\">], </span><span class=\"mtk7\">10</span><span class=\"mtk1\">, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">18</span><span class=\"mtk1\">).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    post_lp = lptoken.functions.balanceOf(user).call()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">print</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;get lp&#39;</span><span class=\"mtk1\">, post_lp - previous_lp)</span></span></span></code></pre>\n<p>We can get roughly 4x more lp in the first case</p>\n<h4 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The current implementation uses <code>self.balances</code></p>\n<p><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/customswap/contracts/SwapUtils.sol#L1231-L1236\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/customswap/contracts/SwapUtils.sol#L1231-L1236</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">pooledTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">idealBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">v</span><span class=\"mtk1\">.</span><span class=\"mtk12\">d1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">v</span><span class=\"mtk1\">.</span><span class=\"mtk12\">d0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">fees</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">feePerToken</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">idealBalance</span><span class=\"mtk1\">.</span><span class=\"mtk11\">difference</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newBalances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">FEE_DENOMINATOR</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">newBalances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">fees</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">adminFee</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">FEE_DENOMINATOR</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">newBalances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">newBalances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">fees</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Replaces <code>self.balances</code> with <code>_xp(self, newBalances)</code> would be a simple fix.\nI consider the team can take balance’s weighted pool as a reference. <a href=\"https://github.com/balancer-labs/balancer-v2-monorepo/blob/7ff72a23bae6ce0eb5b134953cc7d5b79a19d099/pkg/pool-weighted/contracts/WeightedMath.sol#L149-L179\">WeightedMath.sol#L149-L179</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/150\">chickenpie347 (Boot Finance) confirmed</a></strong></p>\n<h2 id=\"h-07-customprecisionmultipliers-would-be-rounded-to-zero-and-break-the-pool\" style=\"position:relative;\"><a href=\"#h-07-customprecisionmultipliers-would-be-rounded-to-zero-and-break-the-pool\" aria-label=\"h 07 customprecisionmultipliers would be rounded to zero and break the pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/183\">[H-07] <code>customPrecisionMultipliers</code> would be rounded to zero and break the pool</a></h2>\n<p><em>Submitted by jonah1005</em></p>\n<h4 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p><code>CustomPrecisionMultipliers</code> are set in the constructor:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">customPrecisionMultipliers</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">targetPriceStorage</span><span class=\"mtk1\">.</span><span class=\"mtk12\">originalPrecisionMultipliers</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">].</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_targetPrice</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\"> ** </span><span class=\"mtk7\">18</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><code>originalPrecisionMultipliers</code> equal to 1 if the token’s decimal = 18. The targe price could only be an integer.</p>\n<p>If the target price is bigger than 10**18, the user can deposit and trade in the pool. Though, the functionality would be far from the spec.</p>\n<p>If the target price is set to be smaller than 10**18, the pool would be broken and all funds would be stuck.</p>\n<p>I consider this is a high-risk issue.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Please refer to the implementation.\n<a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/customswap/contracts/Swap.sol#L184-L187\">Swap.sol#L184-L187</a></p>\n<p>We can also trigger the bug by setting a pool with target price = 0.5. (0.5 * 10**18)</p>\n<h4 id=\"tools-used-3\" style=\"position:relative;\"><a href=\"#tools-used-3\" aria-label=\"tools used 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>I recommend providing extra 10**18 in both multipliers.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">customPrecisionMultipliers</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">targetPriceStorage</span><span class=\"mtk1\">.</span><span class=\"mtk12\">originalPrecisionMultipliers</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">].</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_targetPrice</span><span class=\"mtk1\">).</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">18</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\"> ** </span><span class=\"mtk7\">18</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">customPrecisionMultipliers</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">targetPriceStorage</span><span class=\"mtk1\">.</span><span class=\"mtk12\">originalPrecisionMultipliers</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">].</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">18</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The customswap only supports two tokens in a pool, there’s should be enough space. Recommend the devs to go through the trade-off saddle finance has paid to support multiple tokens. The code could be more clean and efficient if the pools’ not support multiple tokens.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/183\">chickenpie347 (Boot Finance) confirmed</a></strong></p>\n<h2 id=\"h-08-unable-to-claim-vesting-due-to-unbounded-timelock-loop\" style=\"position:relative;\"><a href=\"#h-08-unable-to-claim-vesting-due-to-unbounded-timelock-loop\" aria-label=\"h 08 unable to claim vesting due to unbounded timelock loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/120\">[H-08] Unable to claim vesting due to unbounded timelock loop</a></h2>\n<p><em>Submitted by nathaniel, also found by WatchPug, leastwood, and pauliax</em></p>\n<h4 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The timelocks for any <em>beneficiary</em> are unbounded, and can be vested by someone who is not the <em>beneficiary</em>. When the array becomes significantly big enough, the vestments will no longer be claimable for the <em>beneficiary</em>.</p>\n<p>The <code>vest()</code> function in Vesting.sol does not check the <em>beneficiary</em>, hence anyone can vest for anyone else, pushing a new timelock to the <code>timelocks[_beneficiary]</code>.\nThe <code>_claimableAmount()</code> function (used by <code>claim()</code> function), then loops through the <code>timelocks[_beneficiary]</code> to determine the amount to be claimed.\nA malicious actor can easy repeatedly call the <code>vest()</code> function with minute amounts to make the array large enough, such that when it comes to claiming, it will exceed the gas limit and revert, rendering the vestment for the beneficiary unclaimable.\nThe malicious actor could do this to each <em>beneficiary</em>, locking up all the vestments.</p>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/Vesting.sol#L81\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/Vesting.sol#L81</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/Vesting.sol#L195\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/Vesting.sol#L195</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/Vesting.sol#L148\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/Vesting.sol#L148</a></li>\n</ul>\n<h4 id=\"tools-used-4\" style=\"position:relative;\"><a href=\"#tools-used-4\" aria-label=\"tools used 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review</p>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<ul>\n<li>Create a minimum on the vestment amounts, such that it won’t be feasible for a malicious actor to create a large amount of vestments.</li>\n<li>Restrict the vestment contribution of a <em>beneficiary</em> where <code>require(beneficiary == msg.sender)</code></li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/120\">chickenpie347 (Boot Finance) confirmed</a></strong></p>\n<h2 id=\"h-09-addinvestor-does-not-check-availability-of-investors_supply\" style=\"position:relative;\"><a href=\"#h-09-addinvestor-does-not-check-availability-of-investors_supply\" aria-label=\"h 09 addinvestor does not check availability of investors_supply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/201\">[H-09] addInvestor() Does Not Check Availability of investors_supply</a></h2>\n<p><em>Submitted by Meta0xNull</em></p>\n<h4 id=\"impact-7\" style=\"position:relative;\"><a href=\"#impact-7\" aria-label=\"impact 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>When add investor, <code>addInvestor()</code> does not check how many tokens is available from <code>investors_supply</code>. The total tokens allocated for Investors could more than <code>investors_supply</code>.</p>\n<p>Possible Attack Scenario:</p>\n<ol>\n<li>Attacker who have Admin Private key call <code>addInvestor()</code> and <code>Input \\_amount >= investors_supply</code>.</li>\n<li>Attacker can Claim All Available Tokens Now.</li>\n</ol>\n<h4 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/InvestorDistribution.sol#L85-L94\">https://github.com/code-423n4/2021-11-bootfinance/blob/main/vesting/contracts/InvestorDistribution.sol#L85-L94</a></p>\n<h4 id=\"tools-used-5\" style=\"position:relative;\"><a href=\"#tools-used-5\" aria-label=\"tools used 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual Review</p>\n<h4 id=\"recommended\" style=\"position:relative;\"><a href=\"#recommended\" aria-label=\"recommended permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended</h4>\n<ol>\n<li>Add <code>require(\\_amount &#x3C;= (investors_supply - Allocated_Amount))</code></li>\n<li>When Add an Investor add the amount to <code>Allocated_Amount</code> with SafeMath</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/201#issuecomment-970317628\">chickenpie347 (Boot Finance) acknowledged</a>:</strong></p>\n<blockquote>\n<p>While this is true, the addInvestor would be a one-time routine at deployment which would precisely send the allocated number of tokens to the contract as per to the allocatations.</p>\n</blockquote>\n<h1 id=\"medium-risk-findings-12\" style=\"position:relative;\"><a href=\"#medium-risk-findings-12\" aria-label=\"medium risk findings 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (12)</h1>\n<h2 id=\"m-01-unchecked-transfers\" style=\"position:relative;\"><a href=\"#m-01-unchecked-transfers\" aria-label=\"m 01 unchecked transfers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/31\">[M-01] Unchecked transfers</a></h2>\n<p><em>Submitted by Reigada, also found by Ruhum, loop, cmichel, defsec, pauliax, WatchPug, and 0v3rf10w</em></p>\n<h4 id=\"impact-8\" style=\"position:relative;\"><a href=\"#impact-8\" aria-label=\"impact 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Multiple calls to <code>transferFrom</code> and transfer are frequently done without checking the results. For certain ERC20 tokens, if insufficient tokens are present, no revert occurs but a result of “false” is returned. It’s important to check this. If you don’t, in this concrete case, some airdrop eligible participants could be left without their tokens. It is also a best practice to check this.</p>\n<h4 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">AirdropDistributionMock.sol:132:        mainToken.transfer(msg.sender, claimable_to_send);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">AirdropDistributionMock.sol:157:        mainToken.transfer(msg.sender, claimable_to_send);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">AirdropDistribution.sol:542:        mainToken.transfer(msg.sender, claimable_to_send);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">AirdropDistribution.sol:567:        mainToken.transfer(msg.sender, claimable_to_send);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">InvestorDistribution.sol:132:        mainToken.transfer(msg.sender, claimable_to_send);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">InvestorDistribution.sol:156:        mainToken.transfer(msg.sender, claimable_to_send);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">InvestorDistribution.sol:207:        mainToken.transfer(msg.sender, bal);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Vesting.sol:95:        vestingToken.transferFrom(msg.sender, address(this), \\_amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">PublicSale.sol:224:            mainToken.transfer(\\_member, v_value);</span></span></code></pre>\n<h4 id=\"tools-used-6\" style=\"position:relative;\"><a href=\"#tools-used-6\" aria-label=\"tools used 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual testing</p>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Check the result of <code>transferFrom</code> and transfer. Although if this is done, the contracts will not be compatible with non standard ERC20 tokens like USDT. For that reason, I would rather recommend making use of SafeERC20 library: <code>safeTransfer</code> and <code>safeTransferFrom</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/31\">chickenpie347 (Boot Finance) confirmed</a></strong></p>\n<h2 id=\"m-02-unchecked-low-level-calls\" style=\"position:relative;\"><a href=\"#m-02-unchecked-low-level-calls\" aria-label=\"m 02 unchecked low level calls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/145\">[M-02] Unchecked low-level calls</a></h2>\n<p><em>Submitted by 0v3rf10w, also found by Reigada</em></p>\n<h4 id=\"impact-9\" style=\"position:relative;\"><a href=\"#impact-9\" aria-label=\"impact 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Unchecked low-level calls</p>\n<h4 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Unchecked cases at 2 places :-\n<code>BasicSale.receive()</code> (2021-11-bootfinance/tge/contracts/PublicSale.sol#148-156) ignores return value by <code>burnAddress.call{value: msg.value}()</code> (2021-11-bootfinance/tge/contracts/PublicSale.sol#154)</p>\n<p>BasicSale.burnEtherForMember(address) (2021-11-bootfinance/tge/contracts/PublicSale.sol#158-166) ignores return value by <code>burnAddress.call{value: msg.value}()</code> (2021-11-bootfinance/tge/contracts/PublicSale.sol#164)</p>\n<h4 id=\"tools-used-7\" style=\"position:relative;\"><a href=\"#tools-used-7\" aria-label=\"tools used 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual</p>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The return value of the low-level call is not checked, so if the call fails, the Ether will be locked in the contract. If the low level is used to prevent blocking operations, consider logging failed calls.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/145\">chickenpie347 (Boot Finance) confirmed</a></strong></p>\n<h2 id=\"m-03-investor-cant-claim-the-last-tokens-via-claim-\" style=\"position:relative;\"><a href=\"#m-03-investor-cant-claim-the-last-tokens-via-claim-\" aria-label=\"m 03 investor cant claim the last tokens via claim  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/131\">[M-03] Investor can’t claim the last tokens (via claim() )</a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<h4 id=\"impact-10\" style=\"position:relative;\"><a href=\"#impact-10\" aria-label=\"impact 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Suppose you are an investor and want to claim the last part of your claimable tokens (or your entire set of claimable tokens if you haven’t claimed anything yet).\nThen you call the function <code>claim()</code> of <code>InvestorDistribution.sol</code>, which has the following statement:\n<code>require(investors\\[msg.sender].amount - claimable != 0);</code>\nThis statement will prevent you from claiming your tokens because it will stop execution.</p>\n<p>Note: with the function <code>claimExact()</code> it is possible to claim the last part.</p>\n<h4 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>// <a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/vesting/contracts/InvestorDistribution.sol#L113-L128\">https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/vesting/contracts/InvestorDistribution.sol#L113-L128</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">claim</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">investors</span><span class=\"mtk1\">\\[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">claimable</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">investors</span><span class=\"mtk1\">\\[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">claimable</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h4 id=\"tools-used-8\" style=\"position:relative;\"><a href=\"#tools-used-8\" aria-label=\"tools used 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<h4 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Remove the require statement.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/131#issuecomment-964723021\">chickenpie347 (Boot Finance) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate of issue #130 </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/131#issuecomment-964723644\">chickenpie347 (Boot Finance) commented</a>:</strong></p>\n<blockquote>\n<p>I just noticed it’s different files. The AirdropDistrbution.sol and InvestorDistribution.sol contracts were built on the same base, with slight changes.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/131#issuecomment-1007869122\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Downgrading to medium risk as an alternative path does exist for claiming the drop. Funds are not lost, but the availability of them is compromised. Per Docs:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).</span></span></code></pre>\n</blockquote>\n<h2 id=\"m-04-get-virtual-price-is-not-monotonically-increasing-\" style=\"position:relative;\"><a href=\"#m-04-get-virtual-price-is-not-monotonically-increasing-\" aria-label=\"m 04 get virtual price is not monotonically increasing  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/185\">[M-04] Get virtual price is not monotonically increasing </a></h2>\n<p><em>Submitted by jonah1005</em></p>\n<h4 id=\"impact-11\" style=\"position:relative;\"><a href=\"#impact-11\" aria-label=\"impact 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>There’s a feature of <code>virtualPrice</code> that is monotonically increasing regardless of the market. This function is heavily used in multiple protocols. e.g.(curve metapool, mim, …) This is not held in the current implementation of customSwap since <code>customPrecisionMultipliers</code> can be changed by changing the target price.</p>\n<p>There are two issues here:\nThe meaning of <code>virtualPrice</code> would be vague.\nThis may damage the lp providers as the protocol that adopts it may be hacked.</p>\n<p>I consider this is a medium-risk issue.</p>\n<h4 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>We can set up a mockSwap with extra <code>setPrecisionMultiplier</code> to check the issue.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setPrecisionMultiplier</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">multipliers</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">swapStorage</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenPrecisionMultipliers</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">multipliers</span><span class=\"mtk1\">; </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"python\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">print</span><span class=\"mtk1\">(swap.functions.getVirtualPrice().call())</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    swap.functions.setPrecisionMultiplier(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">print</span><span class=\"mtk1\">(swap.functions.getVirtualPrice().call())</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># output log:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   1000000000000000000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#   1499889859738721606</span></span></span></code></pre>\n<h4 id=\"tools-used-9\" style=\"position:relative;\"><a href=\"#tools-used-9\" aria-label=\"tools used 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Dealing with the target price with multiplier precision seems clever as we can reuse most of the existing code. However, the precision multiplier should be an immutable parameter. Changing it after the pool is set up would create multiple issues. This function could be implemented in a safer way IMHO.</p>\n<p>The quick fix would be to remove the <code>getVirtualPrice</code> function. I can’t come up with a safe way if other protocol wants to use this function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/185\">chickenpie347 (Boot Finance) confirmed</a></strong></p>\n<h2 id=\"m-05-stop-ramp-target-price-would-create-huge-arbitrage-space\" style=\"position:relative;\"><a href=\"#m-05-stop-ramp-target-price-would-create-huge-arbitrage-space\" aria-label=\"m 05 stop ramp target price would create huge arbitrage space permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/208\">[M-05] Stop ramp target price would create huge arbitrage space.</a></h2>\n<p><em>Submitted by jonah1005</em></p>\n<h3 id=\"stop-ramp-target-price-would-create-huge-arbitrage-space\" style=\"position:relative;\"><a href=\"#stop-ramp-target-price-would-create-huge-arbitrage-space\" aria-label=\"stop ramp target price would create huge arbitrage space permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stop ramp target price would create huge arbitrage space.</h3>\n<h4 id=\"impact-12\" style=\"position:relative;\"><a href=\"#impact-12\" aria-label=\"impact 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p><code>stopRampTargetPrice</code> would set the <code>tokenPrecisionMultipliers</code> to <code>originalPrecisionMultipliers[0].mul(currentTargetPrice).div(WEI_UNIT);</code>\nOnce the <code>tokenPrecisionMultipliers</code> is changed, the price in the AMM pool would change. Arbitrager can sandwich <code>stopRampTargetPrice</code> to gain profit.</p>\n<p>Assume the decision is made in the DAO, an attacker can set up the bot once the proposal to <code>stopRampTargetPrice</code> has passed. I consider this is a medium-risk issue.</p>\n<h4 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The <code>precisionMultiplier</code> is set here:\n<a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/customswap/contracts/Swap.sol#L661-L666\">Swap.sol#L661-L666</a></p>\n<p>We can set up a mockSwap with extra <code>setPrecisionMultiplier</code> to check the issue.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setPrecisionMultiplier</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">multipliers</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">swapStorage</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenPrecisionMultipliers</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">multipliers</span><span class=\"mtk1\">; </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"python\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">print</span><span class=\"mtk1\">(swap.functions.getVirtualPrice().call())</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">swap.functions.setPrecisionMultiplier(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">print</span><span class=\"mtk1\">(swap.functions.getVirtualPrice().call())</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># output log:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#     1000000000000000000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#     1499889859738721606</span></span></span></code></pre>\n<h4 id=\"tools-used-10\" style=\"position:relative;\"><a href=\"#tools-used-10\" aria-label=\"tools used 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Dealing with the target price with multiplier precision seems clever as we can reuse most of the existing code. However, the precision multiplier should be an immutable parameter. Changing it after the pool is setup would create multiple issues. This function could be implemented in a safer way IMHO.</p>\n<p>A quick fix I would come up with is to ramp the <code>tokenPrecisionMultipliers</code> as the <code>aPrecise</code> is ramped. As the <code>tokenPrecision</code> is slowly increased/decreased, the arbitrage space would be slower and the profit would (probably) distribute evenly to lpers.</p>\n<p>Please refer to <code>_getAPreceise</code>’s implementation\n<a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/main/customswap/contracts/SwapUtils.sol#L227-L250\">SwapUtils.sol#L227-L250</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/208\">chickenpie347 (Boot Finance) confirmed</a></strong></p>\n<h2 id=\"m-07-maintokenset_mint_multisig-doesnt-check-that-_minting_multisig-doesnt-equal-zero\" style=\"position:relative;\"><a href=\"#m-07-maintokenset_mint_multisig-doesnt-check-that-_minting_multisig-doesnt-equal-zero\" aria-label=\"m 07 maintokenset_mint_multisig doesnt check that _minting_multisig doesnt equal zero permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/66\">[M-07] <code>MainToken.set_mint_multisig()</code> doesn’t check that <code>_minting_multisig</code> doesn’t equal zero</a></h2>\n<p><em>Submitted by pants</em></p>\n<p>The function <code>MainToken.set_mint_multisig()</code> doesn’t check that <code>_minting_multisig</code> doesn’t equal zero before it sets it as the new <code>minting_multisig</code>.</p>\n<h4 id=\"impact-13\" style=\"position:relative;\"><a href=\"#impact-13\" aria-label=\"impact 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>This function can be invoked by mistake with the zero address as <code>_minting_multisig</code>, causing the system to lose its <code>minting_multisig</code> forever, without the option to set a new <code>minting_multisig</code>.</p>\n<h4 id=\"tool-used\" style=\"position:relative;\"><a href=\"#tool-used\" aria-label=\"tool used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tool Used</h4>\n<p>Manual code review.</p>\n<h4 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Check that <code>_minting_multisig</code> doesn’t equal zero before setting it as the new <code>minting_multisig</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/66\">chickenpie347 (Boot Finance) confirmed</a></strong> </p>\n<h2 id=\"m-08-lptokenset_minter-doesnt-check-that-_minter-doesnt-equal-zero\" style=\"position:relative;\"><a href=\"#m-08-lptokenset_minter-doesnt-check-that-_minter-doesnt-equal-zero\" aria-label=\"m 08 lptokenset_minter doesnt check that _minter doesnt equal zero permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/69\">[M-08] <code>LPToken.set_minter()</code> doesn’t check that <code>_minter</code> doesn’t equal zero</a></h2>\n<p><em>Submitted by pants</em></p>\n<p>The function <code>LPToken.set_minter()</code> doesn’t check that <code>_minter</code> doesn’t equal zero before it sets it as the new minter.</p>\n<h4 id=\"impact-14\" style=\"position:relative;\"><a href=\"#impact-14\" aria-label=\"impact 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>This function can be invoked by mistake with the zero address as <code>_minter</code>, causing the system to lose its minter forever, without the option to set a new minter.</p>\n<h4 id=\"tool-used-1\" style=\"position:relative;\"><a href=\"#tool-used-1\" aria-label=\"tool used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tool Used</h4>\n<p>Manual code review.</p>\n<h4 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Check that <code>_minter</code> doesn’t equal zero before setting it as the new minter.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/69\">chickenpie347 (Boot Finance) confirmed)</a></strong></p>\n<h2 id=\"m-09-nft-flashloans-can-bypass-sale-constraints\" style=\"position:relative;\"><a href=\"#m-09-nft-flashloans-can-bypass-sale-constraints\" aria-label=\"m 09 nft flashloans can bypass sale constraints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/276\">[M-09] NFT flashloans can bypass sale constraints</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<h4 id=\"impact-15\" style=\"position:relative;\"><a href=\"#impact-15\" aria-label=\"impact 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Public sale has a constraint that for the first 4 weeks only NFT holders can access the sale:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">currentEra</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">firstPublicEra</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">) &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;You need NFT to participate in the sale.&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>However, this check can be easily bypassed with the help of flash loans. You can borrow the NFT, participate in the sale and then return this NFT in one transaction. It takes only 1 NFT that could be flashloaned again and again to give access to the sale for everyone (<code>burnEtherForMember</code>).</p>\n<h4 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>I am not sure what could be the most elegant solution to this problem. You may consider transferring and locking this NFT for at least 1 block but then the user will need to do an extra tx to retrieve it back. You may consider taking a snapshot of user balances so the same NFT can be used by one address only but then this NFT will lose its extra benefit of selling it during the pre-sale when it acts as a pre-sale token. You may consider checking that the caller is EOA but again there are ways to bypass that too.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/276\">chickenpie347 (Boot Finance) acknowledged</a></strong></p>\n<h2 id=\"m-10-cant-claim-last-part-of-airdrop\" style=\"position:relative;\"><a href=\"#m-10-cant-claim-last-part-of-airdrop\" aria-label=\"m 10 cant claim last part of airdrop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/130\">[M-10] Can’t claim last part of airdrop</a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<h4 id=\"impact-16\" style=\"position:relative;\"><a href=\"#impact-16\" aria-label=\"impact 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Suppose you are eligible for the last part of your airdrop (or your entire airdrop if you haven’t claimed anything yet).\nThen you call the function claim() of AirdropDistribution.sol, which has the following statement:\n<code>assert(airdrop\\[msg.sender].amount - claimable != 0);</code>\nThis statement will prevent you from claiming your airdrop because it will stop execution.</p>\n<p>Note: with the function <code>claimExact()</code> it is possible to claim the last part.</p>\n<h4 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>// <a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/vesting/contracts/AirdropDistribution.sol#L522-L536\">https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/vesting/contracts/AirdropDistribution.sol#L522-L536</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">claim</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">airdrop</span><span class=\"mtk1\">\\[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">claimable</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">airdrop</span><span class=\"mtk1\">\\[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">claimable</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-15\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-15\" aria-label=\"recommended mitigation steps 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Remove the assert statement.\nAlso add the following to <code>validate()</code> , to prevent claiming the airdrop again:\n<code>require(validated\\[msg.sender]== 0, \"Already validated.\");</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/130#issuecomment-965227983\">chickenpie347 (Boot Finance) confirmed</a>:</strong></p>\n<blockquote>\n<p>Patched it with <code>assert(airdrop[msg.sender].amount - claimable >= 0);</code> the >=0 check is just to ensure the claimant does not end up claiming more than allocated due to any fringe case.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/130#issuecomment-1007869115\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Downgrading to medium risk as an alternative path does exist for claiming the drop. Funds are not lost, but the availability of them is compromised. Per Docs:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).</span></span></code></pre>\n</blockquote>\n<h2 id=\"m-11-overwrite-benrevocable\" style=\"position:relative;\"><a href=\"#m-11-overwrite-benrevocable\" aria-label=\"m 11 overwrite benrevocable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/132\">[M-11] Overwrite benRevocable</a></h2>\n<p><em>Submitted by gpersoon, also found by pauliax, WatchPug, cmichel, hyh, and leastwood</em></p>\n<h4 id=\"impact-17\" style=\"position:relative;\"><a href=\"#impact-17\" aria-label=\"impact 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Anyone can call the function <code>vest()</code> of <code>Vesting.sol</code>, for example with a smail <code>\\_amount</code> of tokens, for any <code>\\_beneficiary</code>.</p>\n<p>The function overwrites the value of <code>benRevocable\\[\\_beneficiary]</code>, effectively erasing any previous value.</p>\n<p>So you can set any <code>\\_beneficiary</code> to Revocable.\nAlthough <code>revoke()</code> is only callable by the owner, this is circumventing the entire mechanism of <code>benRevocable</code>.</p>\n<h4 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>// <a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/vesting/contracts/Vesting.sol#L73-L98\">https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/vesting/contracts/Vesting.sol#L73-L98</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">vest</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> \\</span><span class=\"mtk12\">_beneficiary</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> \\</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> \\</span><span class=\"mtk12\">_isRevocable</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">whenNotPaused</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\">(\\</span><span class=\"mtk12\">_isRevocable</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">benRevocable</span><span class=\"mtk1\">\\[\\</span><span class=\"mtk12\">_beneficiary</span><span class=\"mtk1\">] = \\[</span><span class=\"mtk4\">false</span><span class=\"mtk1\">,</span><span class=\"mtk4\">false</span><span class=\"mtk1\">];  </span><span class=\"mtk3\">// just overwrites the value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(\\</span><span class=\"mtk12\">_isRevocable</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">1</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">benRevocable</span><span class=\"mtk1\">\\[\\</span><span class=\"mtk12\">_beneficiary</span><span class=\"mtk1\">] = \\[</span><span class=\"mtk4\">true</span><span class=\"mtk1\">,</span><span class=\"mtk4\">false</span><span class=\"mtk1\">]; </span><span class=\"mtk3\">// just overwrites the value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-16\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-16\" aria-label=\"recommended mitigation steps 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Whitelist the calling of <code>vest()</code>\nOr check if values for <code>benRevocable</code> are already set.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/132\">chickenpie347 (Boot Finance) confirmed</a></strong></p>\n<h2 id=\"m-12-no-transfer-ownership-pattern\" style=\"position:relative;\"><a href=\"#m-12-no-transfer-ownership-pattern\" aria-label=\"m 12 no transfer ownership pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/35\">[M-12] No Transfer Ownership Pattern</a></h2>\n<p><em>Submitted by defsec, also found by Ruhum, elprofesor, pauliax, Reigada, and mics</em></p>\n<h4 id=\"impact-18\" style=\"position:relative;\"><a href=\"#impact-18\" aria-label=\"impact 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The current ownership transfer process involves the current owner calling <code>Swap.transferOwnership()</code>. This function checks the new owner is not the zero address and proceeds to write the new owner’s address into the owner’s state variable. If the nominated EOA account is not a valid account, it is entirely possible the owner may accidentally transfer ownership to an uncontrolled account, breaking all functions with the <code>onlyOwner()</code> modifier.</p>\n<h4 id=\"proof-of-concept-14\" style=\"position:relative;\"><a href=\"#proof-of-concept-14\" aria-label=\"proof of concept 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Navigate to ”<a href=\"https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/customswap/contracts/Swap.sol#L30\">https://github.com/code-423n4/2021-11-bootfinance/blob/7c457b2b5ba6b2c887dafdf7428fd577e405d652/customswap/contracts/Swap.sol#L30</a>”</li>\n<li>The contract has many <code>onlyOwner</code> function.</li>\n<li>The contract is inherited from the Ownable which includes <code>transferOwnership</code>.</li>\n</ol>\n<h4 id=\"tools-used-11\" style=\"position:relative;\"><a href=\"#tools-used-11\" aria-label=\"tools used 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-17\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-17\" aria-label=\"recommended mitigation steps 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Implement zero address check and consider implementing a two step process where the owner nominates an account and the nominated account needs to call an <code>acceptOwnership()</code> function for the transfer of ownership to fully succeed. This ensures the nominated EOA account is a valid and active account.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/35\">chickenpie347 (Boot Finance) confirmed</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/35#issuecomment-1007872687\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>upgrading to med severity as this could impact availability of protocol </p>\n<p>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</p>\n</blockquote>\n<h1 id=\"low-risk-findings-34\" style=\"position:relative;\"><a href=\"#low-risk-findings-34\" aria-label=\"low risk findings 34 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (34)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/146\">[L-01] Missing Zero-check</a> <em>Submitted by 0v3rf10w, also found by Reigada</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/148\">[L-02] Reentrancy</a> <em>Submitted by 0v3rf10w, also found by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/127\">[L-03] No checking of admin<em>fee, wether it is &#x3C;= max</em>admin_fee </a> <em>Submitted by JMukesh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/128\">[L-04] No event was emitted while setting fees and admin_fees in constructor</a> <em>Submitted by JMukesh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/254\">[L-05] wrong operator used in checking the fees, adminfee, withdrawfee</a> <em>Submitted by JMukesh, also found by loop and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/202\">[L-06] revoke() Does Not Check Zero Address for _addr</a> <em>Submitted by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/105\">[L-07] Incorrect event parameter used in emit</a> <em>Submitted by Reigada</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/108\">[L-08] Tokens not recoverable</a> <em>Submitted by Reigada</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/116\">[L-09] Vesting.revoke is missing a require statement</a> <em>Submitted by Reigada</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/137\">[L-10] Require statement missing in fallback and burnEtherForMember() functions</a> <em>Submitted by Reigada</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/109\">[L-11] Check ERC20 token <code>approve()</code> function return value</a> <em>Submitted by Ruhum</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/82\">[L-12] Vesting contract locks tokens for less time than expected</a> <em>Submitted by TomFrench, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/221\">[L-13] Tokens with decimals larger than 18 are not supported</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/237\">[L-14] <code>SwapUtils.sol</code> Inconsistent parameter value of <code>lpTokenSupply</code> among <code>Liquidity</code> related events</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/209\">[L-15] # Missing parameter validation</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/210\">[L-16] <code>BasicSale</code> has unused ERC20 code</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/211\">[L-17] <code>BasicSale</code> uses inaccurate <code>secondsPerDay</code> value</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/215\">[L-18] can withdraw shares on behalf of anyone</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/32\">[L-19] Lack of maximum and minimum vesting amount check on the vesting function</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/99\">[L-20] Airdrop Supply differs</a> <em>Submitted by fr0zn, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/186\">[L-21] Vesting.benVested storage variable can be simplified, while <em>claimableAmount’s “s &#x3C;= benTotal[</em>addr]” check is redundant and to be removed</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/306\">[L-22] Incorrect <code>require</code> Statement in <code>Vesting.claim()</code></a> <em>Submitted by leastwood</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/166\">[L-23] Usage of deprecated safeApprove</a> <em>Submitted by mics</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/126\">[L-24] claimExact does not check claimable amount</a> <em>Submitted by nathaniel, also found by fr0zn</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/11\">[L-25] admin can override investor and stuck its funds in the system </a> <em>Submitted by pants, also found by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/37\">[L-26] Array out-of-bounds errors in <code>BTCPoolDelegator</code></a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/38\">[L-27] Array out-of-bounds errors in <code>ETHPoolDelegator</code></a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/39\">[L-28] Array out-of-bounds errors in <code>USDPoolDelegator</code></a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/273\">[L-29] payable vest</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/274\">[L-30] _recordBurn does not handle 0 _eth appropriately</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/279\">[L-31] Usage of assert</a> <em>Submitted by pauliax, also found by leastwood</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/301\">[L-32] Validations</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/140\">[L-33] Unclear Commented Out Code</a> <em>Submitted by ye0lde, also found by loop</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/89\">[L-34] Don’t allow swapping the same token</a> <em>Submitted by Ruhum, also found by rfa</em></li>\n</ul>\n<h1 id=\"non-critical-findings-39\" style=\"position:relative;\"><a href=\"#non-critical-findings-39\" aria-label=\"non critical findings 39 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (39)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/194\">[N-01] claimExact() Missing Validation As In claim()</a> <em>Submitted by Meta0xNull, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/248\">[N-02] <code>Vesting.sol#calcClaimableAmount()</code> Claimed amount should be excluded in claimable amount</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/92\">[N-03] Invalid return value when calculating claimable amount </a> <em>Submitted by fr0zn</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/168\">[N-04] Missing revert message</a> <em>Submitted by mics</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/43\">[N-05] <code>Token.transfer()</code> and <code>Token.transferFrom()</code> emit <code>Transfer</code> events when the transferred amount is zero</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/44\">[N-06] <code>Token.transferFrom()</code> emits <code>Transfer</code> events when <code>_from</code> equals <code>_to</code></a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/46\">[N-07] <code>Token.approve()</code> emits <code>Approval</code> events when the allowence hasn’t changed</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/48\">[N-08] <code>PoolGauge.deposit()</code> emits <code>Deposit</code> events when the deposited amount is zero</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/49\">[N-09] <code>PoolGauge.withdraw()</code> emits <code>Withdraw</code> events when the withdrawn amount is zero</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/51\">[N-10] <code>MainToken.transfer()</code> and <code>MainToken.transferFrom()</code> emit <code>Transfer</code> events when the transferred amount is zero</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/52\">[N-11] <code>MainToken.transferFrom()</code> emits <code>Transfer</code> events when <code>_from</code> equals <code>_to</code></a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/54\">[N-12] <code>MainToken.approve()</code> emits <code>Approval</code> events when the allowance hasn’t changed</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/60\">[N-13] <code>MainToken.mint()</code> and <code>MainToken.mint_dev()</code> emit <code>Transfer</code> events when the minted amount is zero</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/61\">[N-14] <code>MainToken.burn()</code> emits <code>Transfer</code> events when the burned amount is zero</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/62\">[N-15] <code>MainToken.set_minter()</code> emits <code>SetMinter</code> events when the minter hasn’t changed</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/63\">[N-16] <code>MainToken.set_admin()</code> emits <code>SetAdmin</code> events when the admin hasn’t changed</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/64\">[N-17] <code>MainToken.set_mint_multisig()</code> emits <code>SetMintMultisig</code> events when <code>minting_multisig</code> hasn’t changed</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/67\">[N-18] <code>MainToken.__init__()</code> emits <code>Transfer</code> events when the amount minted for <code>msg.sender</code> is zero (and it is always the case)</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/68\">[N-19] <code>LPToken.__init__()</code> emits <code>Transfer</code> events when the amount minted for <code>msg.sender</code> is zero</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/70\">[N-20] <code>LPToken.transfer()</code> and <code>LPToken.transferFrom()</code> emit <code>Transfer</code> events when the transferred amount is zero</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/71\">[N-21] <code>LPToken.transferFrom()</code> emits <code>Transfer</code> events when <code>_from</code> equals <code>_to</code></a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/73\">[N-22] <code>LPToken.approve()</code> emits <code>Approval</code> events when the allowance hasn’t changed</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/78\">[N-23] Missing emit of initial <code>SetAdmin</code> event in <code>MainToken.__init__()</code></a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/79\">[N-24] Missing emit of initial <code>ApplyOwnership</code> event in <code>GaugeController.__init__()</code></a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/80\">[N-25] <code>GaugeController.apply_transfer_ownership()</code> emits <code>ApplyOwnership</code> events when the admin hasn’t changed</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/81\">[N-26] <code>GaugeController.commit_transfer_ownership()</code> emits <code>CommitOwnership</code> events when the future admin hasn’t changed</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/147\">[N-27] block timestamp</a> <em>Submitted by 0v3rf10w</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/91\">[N-28] Unnecessary imports</a> <em>Submitted by PranavG</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/228\">[N-29] Code Style: consistency</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/230\">[N-30] Typos</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/247\">[N-31] Missing error messages in require statements</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/125\">[N-32] Renaming variables for clarity</a> <em>Submitted by nathaniel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/275\">[N-33] burnAddress is not actually meant to burn anything</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/162\">[N-34] Events should be written in CapWords</a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/163\">[N-35] Functions should be written in mixedCase</a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/164\">[N-36] Contract <code>Vesting</code> should inherit from interface <code>IVesting</code></a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/165\">[N-37] Constants should be written in UPPER_CASE</a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/118\">[N-38] Function _getDayEmission can be simplified (PublicSale.sol)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/257\">[N-39] use of floating pragma</a> <em>Submitted by JMukesh, also found by loop</em></li>\n</ul>\n<h1 id=\"gas-optimizations-62\" style=\"position:relative;\"><a href=\"#gas-optimizations-62\" aria-label=\"gas optimizations 62 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (62)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/115\">[G-01] Unnecessary require statement in vesting.claim()</a> <em>Submitted by Reigada, also found by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/133\">[G-02] uint256 is always >= 0</a> <em>Submitted by 0x0x0x, also found by Reigada, WatchPug, loop, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/258\">[G-03] Packing of state variable </a> <em>Submitted by JMukesh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/195\">[G-04] validate() to Verify Airdrop Address On Chain is Unnecessary</a> <em>Submitted by Meta0xNull, also found by cmichel and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/88\">[G-05] State variables could be declared constant</a> <em>Submitted by PranavG, also found by defsec, ye0lde, WatchPug, nathaniel, and pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/112\">[G-06] Use of uint256 parameter instead of bool</a> <em>Submitted by Reigada, also found by fr0zn</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/34\">[G-07] If statement in _updateEmission() can be removed</a> <em>Submitted by Reigada, also found by cmichel and fr0zn</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/1\">[G-08] No usage of immutable keyword leaves free gas savings on the table</a> <em>Submitted by TomFrench, also found by WatchPug, jah, PranavG, Reigada, nathaniel, pants, pauliax, and pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/223\">[G-09] Remove unnecessary variables can save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/233\">[G-10] <code>SwapUtils.sol#getYD()</code> Remove redundant code can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/236\">[G-11] External call can be done later to save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/238\">[G-12] <code>SwapUtils.sol#getD()</code> Remove unnecessary variable and internal call can make the code simpler and save some gas</a> <em>Submitted by WatchPug, also found by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/241\">[G-13] Use literal <code>2</code> instead of read from storage for <code>pooledTokens.length</code> can save gas</a> <em>Submitted by WatchPug, also found by ye0lde, 0x0x0x, JMukesh, Ruhum, WatchPug, pauliax, gzeon, and loop</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/242\">[G-14] Cache external call results can save gas</a> <em>Submitted by WatchPug, also found by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/246\">[G-15] <code>Vesting.sol#_claimableAmount()</code> Remove unnecessary storage variables can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/217\">[G-16] Gas: Unnecessary length check in <code>Swap.constructor</code></a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/218\">[G-17] Gas: Unnecessary msg.sender != 0 check</a> <em>Submitted by cmichel, also found by rfa, WatchPug, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/261\">[G-18] Adding unchecked directive can save gas</a> <em>Submitted by defsec, also found by mics, pants, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/29\">[G-19] Upgrade pragma to at least 0.8.4</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/94\">[G-20] Gas optimization on InvestorDistribution.sol</a> <em>Submitted by fr0zn</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/96\">[G-21] Duplicated code and usage of assert</a> <em>Submitted by fr0zn, also found by nathaniel and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/97\">[G-22] Redundant check on claim</a> <em>Submitted by fr0zn</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/193\">[G-23] SwapUtils.getVirtualPrice double calling to storage reading function _xp(self)</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/197\">[G-24] SwapUtils’s addLiquidity does multiple LP token total supply calls</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/200\">[G-25] SwapUtils.calculateTokenAmount does repetitive checks of static condition</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/207\">[G-26] SwapUtils’s getD, getY, getYD functions do repetitive calculations of contant expression within the cycles</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/5\">[G-27] No need to initialize variables with default values</a> <em>Submitted by jah, also found by ye0lde, Meta0xNull, Reigada, WatchPug, pants, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/307\">[G-28] <code>Timelock</code> Struct Packing in <code>Vesting.sol</code></a> <em>Submitted by leastwood</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/154\">[G-29] safeERC20 library imported but not used</a> <em>Submitted by loop</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/170\">[G-30] unnecessary variable y in getYD </a> <em>Submitted by mics</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/172\">[G-31] Use calldata instead of memory for function parameters</a> <em>Submitted by mics</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/121\">[G-32] Public functions can be external</a> <em>Submitted by nathaniel, also found by pants, Reigada, hyh, leastwood, and defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/13\">[G-33] double reading of memory inside a loop without caching</a> <em>Submitted by pants, also found by Ruhum, WatchPug, and mics</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/138\">[G-34] Rearrange state variables</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/14\">[G-63] optimizing for loops by caching array length</a> <em>Submitted by pants, also found by pauliax, WatchPug, and hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/18\">[G-36] internal functions could be set private</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/47\">[G-37] <code>PoolGauge.withdraw()</code> can be optimized when <code>_value</code> equals zero</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/7\">[G-38] Unnecessary use of safeMath</a> <em>Submitted by pants, also found by Ruhum, Reigada, TomFrench, loop, pauliax, and defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/8\">[G-39] too many bits to describe small quantities </a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/9\">[G-40] multiple reading of state variables without caching</a> <em>Submitted by pants, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/281\">[G-41] modifyInvestor does not need to check if _investor is not empty</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/283\">[G-42] function claim optimizations</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/285\">[G-43] Itteration over all the timelocks when revoking the user</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/290\">[G-44] Optimize structs</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/293\">[G-45] Useless nonReentrant</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/300\">[G-46] _recordBurn _payer</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/161\">[G-47] Remove unused variables</a> <em>Submitted by pmerkleplant, also found by Reigada and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/2\">[G-48] Redundant check</a> <em>Submitted by tqts</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/6\">[G-49] Numerous gas optimizations in SwapUtils.sol</a> <em>Submitted by tqts</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/117\">[G-50] Cache Reference To State Variables “currentDay, currentEra, emission” in _updateEmission (PublicSale.sol)</a> <em>Submitted by ye0lde, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/22\">[G-51] Unnecessary “else if” in function vest (Vesting.sol)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/23\">[G-52] Long Revert Strings</a> <em>Submitted by ye0lde, also found by WatchPug and pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/25\">[G-53] Unused Named Returns (PublicSale.sol)</a> <em>Submitted by ye0lde, also found by WatchPug and pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/26\">[G-56] _withdrawShare Can Be Rewritten To Be More Efficient (PublicSale.sol)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/27\">[G-57] _processWithdrawal Can Be Rewritten To Be More Efficient (PublicSale.sol)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/28\">[G-58] getEmissionShare Can Be Rewritten To Be More Efficient (PublicSale.sol)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/190\">[G-59] From’ and ‘to’ tokens are read from storage multiple times in SwapUtils’s swap function</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/191\">[G-60] Multiple double storage reading _xp(self) function calls</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/173\">[G-61] Redundant hardhat console import </a> <em>Submitted by pants, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/175\">[G-62] Use of uint8 for counter in for loop increases gas costs</a> <em>Submitted by pants, also found by Reigada and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/176\">[G-64] Use bytes32 instead of string when possible</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-bootfinance-findings/issues/104\">[G-65] Using ++i consumes less gas than i++</a> <em>Submitted by Reigada</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-9\">High Risk Findings (9)</a></p>\n<ul>\n<li><a href=\"#h-01-contract-basicsale-is-missing-an-approveaddressvestlock-2256-1-call\">[H-01] Contract BasicSale is missing an approve(address(vestLock), 2**256-1) call</a></li>\n<li><a href=\"#h-02-can-not-update-target-price\">[H-02] Can not update target price</a></li>\n<li><a href=\"#h-03-swaputilssol-wrong-implementation\">[H-03] <code>SwapUtils.sol</code> Wrong implementation</a></li>\n<li><a href=\"#h-04-swaps-are-not-split-when-trade-crosses-target-price\">[H-04] Swaps are not split when trade crosses target price</a></li>\n<li><a href=\"#h-05-claim-airdrop-repeatedly\">[H-05] Claim airdrop repeatedly</a></li>\n<li><a href=\"#h-06-ideal-balance-is-not-calculated-correctly-when-providing-imbalanced-liquidity\">[H-06] Ideal balance is not calculated correctly when providing imbalanced liquidity</a></li>\n<li><a href=\"#h-07-customprecisionmultipliers-would-be-rounded-to-zero-and-break-the-pool\">[H-07] <code>customPrecisionMultipliers</code> would be rounded to zero and break the pool</a></li>\n<li><a href=\"#h-08-unable-to-claim-vesting-due-to-unbounded-timelock-loop\">[H-08] Unable to claim vesting due to unbounded timelock loop</a></li>\n<li><a href=\"#h-09-addinvestor-does-not-check-availability-of-investors_supply\">[H-09] addInvestor() Does Not Check Availability of investors_supply</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-12\">Medium Risk Findings (12)</a></p>\n<ul>\n<li><a href=\"#m-01-unchecked-transfers\">[M-01] Unchecked transfers</a></li>\n<li><a href=\"#m-02-unchecked-low-level-calls\">[M-02] Unchecked low-level calls</a></li>\n<li><a href=\"#m-03-investor-cant-claim-the-last-tokens-via-claim-\">[M-03] Investor can’t claim the last tokens (via claim() )</a></li>\n<li><a href=\"#m-04-get-virtual-price-is-not-monotonically-increasing-\">[M-04] Get virtual price is not monotonically increasing </a></li>\n<li><a href=\"#m-05-stop-ramp-target-price-would-create-huge-arbitrage-space\">[M-05] Stop ramp target price would create huge arbitrage space.</a></li>\n<li><a href=\"#m-07-maintokenset_mint_multisig-doesnt-check-that-_minting_multisig-doesnt-equal-zero\">[M-07] <code>MainToken.set_mint_multisig()</code> doesn’t check that <code>_minting_multisig</code> doesn’t equal zero</a></li>\n<li><a href=\"#m-08-lptokenset_minter-doesnt-check-that-_minter-doesnt-equal-zero\">[M-08] <code>LPToken.set_minter()</code> doesn’t check that <code>_minter</code> doesn’t equal zero</a></li>\n<li><a href=\"#m-09-nft-flashloans-can-bypass-sale-constraints\">[M-09] NFT flashloans can bypass sale constraints</a></li>\n<li><a href=\"#m-10-cant-claim-last-part-of-airdrop\">[M-10] Can’t claim last part of airdrop</a></li>\n<li><a href=\"#m-11-overwrite-benrevocable\">[M-11] Overwrite benRevocable</a></li>\n<li><a href=\"#m-12-no-transfer-ownership-pattern\">[M-12] No Transfer Ownership Pattern</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-34\">Low Risk Findings (34)</a></li>\n<li><a href=\"#non-critical-findings-39\">Non-Critical Findings (39)</a></li>\n<li><a href=\"#gas-optimizations-62\">Gas Optimizations (62)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}