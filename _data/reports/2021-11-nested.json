{
  "circa": {
    "title": "Nested Finance contest",
    "sponsor": "Nested Finance",
    "slug": "2021-11-nested",
    "date": "2021-01-12",
    "findings": "https://github.com/code-423n4/2021-11-nested-findings/issues",
    "contest": 53
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Nested Finance  smart contract system written in Solidity. The code contest took place between November 11—November 17 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>29 Wardens contributed reports to the Nested Finance contest:</p>\n<ol>\n<li>GreyArt (<a href=\"https://twitter.com/HickupH\">hickuphh3</a> and <a href=\"https://twitter.com/itsmeSTYJ\">itsmeSTYJ</a>)</li>\n<li>jayjonah8</li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/PalinaTolmach\">palina</a></li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li>hyh</li>\n<li>pants</li>\n<li><a href=\"https://github.com/TomAFrench\">TomFrench</a></li>\n<li>fatima_naz</li>\n<li><a href=\"https://twitter.com/hack3r_0m\">hack3r-0m</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/ngndev\">0xngndev</a></li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/GiveMeTestEther\">GiveMeTestEther</a></li>\n<li><a href=\"https://twitter.com/PierrickGT\">PierrickGT</a></li>\n<li><a href=\"https://twitter.com/xYrYuYx\">xYrYuYx</a></li>\n<li><a href=\"https://twitter.com/loop_225\">loop</a></li>\n<li><a href=\"https://twitter.com/Meta0xNull\">Meta0xNull</a></li>\n<li>0x0x0x</li>\n<li><a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a></li>\n<li>harleythedog</li>\n<li>elprofesor</li>\n<li><a href=\"https://twitter.com/qwertyuiop_eth\">MaCree</a></li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://twitter.com/n4th4n131?t=ZXGbALC3q6JMMoolZddgHg&#x26;s=09\">nathaniel</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/alcueca\" title=\"judge\">Alberto Cuesta Cañada</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/money_lego\">moneylegobatman</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 31 unique vulnerabilities and 101 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 1 received a risk rating in the category of HIGH severity, 8 received a risk rating in the category of MEDIUM severity, and 22 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 20 non-critical recommendations and 50 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-11-nested\">C4 Nested Finance contest repository</a>, and is composed of 29 smart contracts written in the Solidity programming language and includes 1960 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-1\" style=\"position:relative;\"><a href=\"#high-risk-findings-1\" aria-label=\"high risk findings 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (1)</h1>\n<h2 id=\"h-01-copy-your-own-portfolio-to-keep-earning-royalties-\" style=\"position:relative;\"><a href=\"#h-01-copy-your-own-portfolio-to-keep-earning-royalties-\" aria-label=\"h 01 copy your own portfolio to keep earning royalties  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/30\">[H-01] Copy your own portfolio to keep earning royalties </a></h2>\n<p><em>Submitted by jayjonah8</em></p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>In <code>NestedFactory.sol</code> going through the <code>create()</code> function which leads to the <code>sendFeesWithRoyalties()</code> => <code>addShares()</code> function,  Im not seeing any checks preventing someone from copying their own portfolio and receiving royalty shares for it and simply repeating the process over and over again.</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested/blob/main/contracts/FeeSplitter.sol#L152\"><code>FeeSplitter.sol</code> L152</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested/blob/main/contracts/FeeSplitter.sol#L220\"><code>FeeSplitter.sol</code> L220</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L103\"><code>NestedFactory.sol</code> L103</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedAsset.sol#L69\"><code>NestedAsset.sol</code> L69</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L103\"><code>NestedFactory.sol</code> L103</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L491\"><code>NestedFactory.sol</code> L491</a></li>\n</ul>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>A require statement should be added not allowing users to copy their own portfolios.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/30#issuecomment-970388713\">maximebrugel (Nested) disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Indeed, a user can copy his own portfolio to reduce the fees, however a require statement won’t fix this issue…</p>\n<p>This problem cannot be corrected but only mitigated, since the user can use two different wallets.\nCurrently the front-end doesn’t allow to duplicate a portfolio with the same address.</p>\n<p>I don’t consider this a “High Risk” since the assets are not really stolen. Maybe “Med Risk” ? This is by design an issue and we tolerate that users can do this (with multiple wallets).</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/30#issuecomment-985642915\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m reading that the vulnerability actually lowers fees to zero for a dedicated attacker, since creating a arbitrarily large number of wallets and bypassing the frontend is easy. In theory leaking protocol value would be a severity 2, but since this is effectively disabling a core feature of the protocol (fees), the severity 3 is sustained.</p>\n</blockquote>\n<h1 id=\"medium-risk-findings-8\" style=\"position:relative;\"><a href=\"#medium-risk-findings-8\" aria-label=\"medium risk findings 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (8)</h1>\n<h2 id=\"m-01-setreserve-can-be-front-run\" style=\"position:relative;\"><a href=\"#m-01-setreserve-can-be-front-run\" aria-label=\"m 01 setreserve can be front run permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/82\">[M-01] <code>setReserve()</code> can be front-run</a></h2>\n<p><em>Submitted by palina</em></p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>reserve</code> address variable in NestedFactory.sol remains equal to 0 before the <code>setReserve()</code> function is called by an owner. This may lead to incorrect transfers of tokens or invalid comparison with e.g., the asset reserve (nestedRecords.getAssetReserve(_nftId) == address(reserve)), should they occur before the value for <code>reserve</code> was set.\nIn addition, the immutabiliy of the <code>reserve</code> variable requires extra caution when setting the value.</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><code>setReserve()</code>: <a href=\"https://github.com/code-423n4/2021-11-nested/blob/5d113967cdf7c9ee29802e1ecb176c656386fe9b/contracts/NestedFactory.sol#L89\"><code>NestedFactory.sol</code> L89</a></p>\n<h4 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual Analysis</p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider initializing the value for the <code>reserve</code> variable in the constructor.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/82#issuecomment-970327769\">maximebrugel (Nested) commented</a>:</strong></p>\n<blockquote>\n<p>The main issue is duplicated : #60</p>\n<p>The following comment can be considered as a duplicate of #83 if the extra caution is checking the zero address.</p>\n<blockquote>\n<p>In addition, the immutabiliy of the reserve variable requires extra caution when setting the value.</p>\n</blockquote>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/82#issuecomment-985410734\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The fact that the call to <code>setReserve</code> can be front-run is not being taken into account by the sponsor. I’m marking this one as not a duplicate.</p>\n</blockquote>\n<h2 id=\"m-02-feesplitter-no-sanity-check-to-prevent-shareholder-from-being-added-twice\" style=\"position:relative;\"><a href=\"#m-02-feesplitter-no-sanity-check-to-prevent-shareholder-from-being-added-twice\" aria-label=\"m 02 feesplitter no sanity check to prevent shareholder from being added twice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/135\">[M-02] FeeSplitter: No sanity check to prevent shareholder from being added twice.</a></h2>\n<p><em>Submitted by GreyArt, also found by hack3r-0m</em></p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>It is possible for duplicate shareholders to be added. These shareholders will get more than intended when <code>_sendFee()</code> is called.</p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Ensure that the <code>_accounts</code> array is sorted in <code>setShareholders()</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_accounts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_accounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">] &lt; </span><span class=\"mtk12\">_accounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot;FeeSplitter: ACCOUNTS_NOT_SORTED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">_addShareholder</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_accounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk12\">_weights</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/135#issuecomment-975351632\">adrien-supizet (Nested) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate #231</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/135#issuecomment-975352623\">adrien-supizet (Nested) commented</a>:</strong></p>\n<blockquote>\n<p>Indeed there is a fix to do here, we’ll prevent adding the same shareholders instead as suggested in #231</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/135#issuecomment-985366841\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Taking this issue as the principal, and raising #231 to medium severity.</p>\n</blockquote>\n<h2 id=\"m-03-nestedfactory-ensure-zero-msgvalue-if-transferring-from-user-and-inputtoken-is-not-eth-\" style=\"position:relative;\"><a href=\"#m-03-nestedfactory-ensure-zero-msgvalue-if-transferring-from-user-and-inputtoken-is-not-eth-\" aria-label=\"m 03 nestedfactory ensure zero msgvalue if transferring from user and inputtoken is not eth  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/136\">[M-03] NestedFactory: Ensure zero msg.value if transferring from user and <code>inputToken</code> is not ETH </a></h2>\n<p><em>Submitted by GreyArt</em></p>\n<h4 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>A user that mistakenly calls either <code>create()</code> or <code>addToken()</code> with WETH (or another ERC20) as the input token, but includes native ETH with the function call will have his native ETH permanently locked in the contract.</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>It is best to ensure that <code>msg.value = 0</code> in <code>_transferInputTokens()</code> for the scenario mentioned above.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">ETH</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NestedFactory::_transferInputTokens: ETH sent for non-ETH transfer&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">(), </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/136\">adrien-supizet (Nested) confirmed</a></strong></p>\n<h2 id=\"m-04-feesplitter-unbounded-number-of-shareholders-can-cause-dos\" style=\"position:relative;\"><a href=\"#m-04-feesplitter-unbounded-number-of-shareholders-can-cause-dos\" aria-label=\"m 04 feesplitter unbounded number of shareholders can cause dos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/137\">[M-04] FeeSplitter: Unbounded number of shareholders can cause DOS</a></h2>\n<p><em>Submitted by GreyArt</em></p>\n<h4 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>There is no limit to the number of shareholders. It is therefore possible to set a large number of shareholders such that <code>_sendFees()</code> will run out of gas when adding shares to each shareholder.\nThis will cause denial of service to all NestedFactory functions, especially the ones that will remove funds like <code>withdraw()</code> and <code>destroy()</code>.</p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>It would be best to set a sanity maximum number of shareholders that can be added.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/137\">adrien-supizet (Nested) acknowledged</a></strong></p>\n<h2 id=\"m-05-isresolvercached-will-always-return-false-after-removing-operator\" style=\"position:relative;\"><a href=\"#m-05-isresolvercached-will-always-return-false-after-removing-operator\" aria-label=\"m 05 isresolvercached will always return false after removing operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/139\">[M-05] isResolverCached() will always return false after removing operator</a></h2>\n<p><em>Submitted by GreyArt, also found by WatchPug</em></p>\n<h4 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>While there is no loss of funds, removing an operator will cause the cache functionality to be permanently broken. If there was a function that had a modifier which requires the cache to be synced before the function can be called, it would not be callable as well.</p>\n<p>The underlying issue is how the <code>bytes32</code> operator is removed from the array when <code>removeOperator()</code> is called. Its value gets deleted (set to 0x0), but isn’t taken out of the array.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>For ease of reading, we use abbreviated strings like <code>0xA</code>, <code>0xB</code> for <code>bytes32</code> and <code>address</code> types.</p>\n<ol>\n<li>Import 3 operators by calling <code>OperatorResolver.importOperators([0xA, 0xB, 0xC], [0x1, 0x2, 0x3)</code>.</li>\n<li>Call <code>NestedFactory.addOperator()</code> 3 times to push these 3 operators into the <code>operators</code> state variable.</li>\n<li>Call <code>NestedFactory.rebuildCache()</code> to build the cache.</li>\n<li>Let’s say the second operator <code>0xB</code> is to be removed. Taking reference from the <code>removeOperator.ts</code> script, <code>OperatorResolver.importOperators([0xA, 0xB, 0xC], [0x1, 0x2, 0x3)</code> is called first. This works because OperatorResolver uses a mapping(bytes32 ⇒ address) to represent the operators. Hence, by setting <code>0xB</code>’s destination address to be the null address, it is like as if he was never an operator.</li>\n<li>Call <code>NestedFactory.rebuildCache()</code> to rebuild the cache. <code>resolverAddressesRequired()</code> will return <code>[0xA, 0xB, 0xC]</code>. <code>0xB</code> will be removed from <code>addressCache</code> because <code>resolver.getAddress(0xB)</code> returns 0x000 since it has been deleted from the OperatorResolver.</li>\n<li>Call <code>NestedFactory.removeOperator(0xB)</code>. The <code>operators</code> array now looks like this: <code>[0xA, 0x0, 0xC]</code>.</li>\n<li>When you try to call <code>NestedFactory.isResolverCached</code>, it will always return false because of the null <code>bytes32</code> value, where <code>addressCache[0x0]</code> will always return the null address.</li>\n</ol>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Instead of doing an element deletion, it should be replaced with the last element, then have the last element popped in <code>removeOperator()</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">removeOperator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operator</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">operators</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] == </span><span class=\"mtk12\">operator</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t\t</span><span class=\"mtk12\">operators</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operators</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t\t</span><span class=\"mtk12\">operators</span><span class=\"mtk1\">.</span><span class=\"mtk11\">pop</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t\t</span><span class=\"mtk15\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/139#issuecomment-975378231\">maximebrugel (Nested) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicated : #58</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/139#issuecomment-985431604\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Taking this issue apart as a non-duplicate, for finding the most severe consequence of the incorrect implementation.</p>\n</blockquote>\n<h2 id=\"m-06-nestedfactorysol_submitinorders-wrong-implementation-cause-users-to-be-overcharged\" style=\"position:relative;\"><a href=\"#m-06-nestedfactorysol_submitinorders-wrong-implementation-cause-users-to-be-overcharged\" aria-label=\"m 06 nestedfactorysol_submitinorders wrong implementation cause users to be overcharged permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/160\">[M-06] <code>NestedFactory.sol#_submitInOrders()</code> Wrong implementation cause users to be overcharged</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>When executing orders, the actual <code>amountSpent + feesAmount</code> can be lower than <code>_inputTokenAmount</code>, the unspent amount should be returned to the user.</p>\n<p>However, in the current implementation, the unspent amount will be taken as part of the fee.\n<a href=\"https://github.com/code-423n4/2021-11-nested/blob/f646002b692ca5fa3631acfff87dda897541cf41/contracts/NestedFactory.sol#L285-L309\"><code>NestedFactory.sol</code> L285-L309</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_submitInOrders</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Order</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_reserved</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_fromReserve</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenSold</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_transferInputTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_fromReserve</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\"> += </span><span class=\"mtk11\">_submitOrder</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk12\">_reserved</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_calculateFees</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// overspent</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If input is from the reserve, update the records</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_fromReserve</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_decreaseHoldingAmount</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_handleUnderSpending</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">tokenSold</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h5 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h5>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_submitInOrders</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Order</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_reserved</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_fromReserve</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenSold</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_transferInputTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_fromReserve</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\"> += </span><span class=\"mtk11\">_submitOrder</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk12\">_reserved</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_calculateFees</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// overspent</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If input is from the reserve, update the records</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_fromReserve</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_decreaseHoldingAmount</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nftId</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\">+</span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ExchangeHelpers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setMaxAllowance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feeSplitter</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">feeSplitter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sendFees</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_fromReserve</span><span class=\"mtk1\"> ? </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">reserve</span><span class=\"mtk1\">) : </span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">_inputTokenAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">amountSpent</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">feesAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">tokenSold</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_inputToken</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/160#issuecomment-976658334\">adrien-supizet (Nested) disputed and then confirmed</a>:</strong></p>\n<blockquote>\n<h2 id=\"rationale\" style=\"position:relative;\"><a href=\"#rationale\" aria-label=\"rationale permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rationale</h2>\n<p>We don’t consider this an issue as this was done on purpose. We wanted to treat the positive slippage as regular fees.\nMost times, the dust of positive slippage will cost more to the user if they are transferred rather than passed along fees.</p>\n<p>We made it possible for us to retrieve overcharged amounts in case of mistakes to give them back to users.</p>\n<h2 id=\"new-behavior\" style=\"position:relative;\"><a href=\"#new-behavior\" aria-label=\"new behavior permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New behavior</h2>\n<p>But for the sake of transparency, and in the spirit of DeFi, we have reviewed the business model of the protocol and decided to transfer back any amount that was unspent and which exceeds the 1% fixed fee.</p>\n<h2 id=\"resolution\" style=\"position:relative;\"><a href=\"#resolution\" aria-label=\"resolution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolution</h2>\n<p>Selecting “disputed” for now but I’ll let a judge review if this should be included in the report, and if the severity was correct, as we were able to give back tokens to users if they made a mistake calling the protocol.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/160#issuecomment-985607076\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>If stated in the README or comments, the issue would be invalid. The sponsor can choose whichever behaviour suits their business model. When not stated in the README, any asset loss to users or protocol is a valid issue. User losses are expected to be a severity 3, but in this case, and given that those losses are inferior to the gas, the issue is downgraded to severity 2.</p>\n<p>In the future, please state in the code any asset losses that are accepted by the protocol.</p>\n</blockquote>\n<h2 id=\"m-07-ensure-on-chain-that-cache-is-synced\" style=\"position:relative;\"><a href=\"#m-07-ensure-on-chain-that-cache-is-synced\" aria-label=\"m 07 ensure on chain that cache is synced permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/217\">[M-07] Ensure on-chain that cache is synced</a></h2>\n<p><em>Submitted by GreyArt, also found by WatchPug</em></p>\n<h4 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Currently, many core operations (like <code>NestedFactory.create()</code>, <code>NestedFactory.swapTokenForTokens()</code>) are dependent on the assumption that the cache is synced before these functions are executed however this may not necessarily be the case.</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li><code>OperatorResolver.importOperators()</code> is called to remove an operator.</li>\n<li>A user calls <code>NestedFactory.create()</code> that uses the operator that was being removed / updated.</li>\n<li><code>NestedFactory.rebuildCache()</code> is called to rebuild cache.</li>\n</ol>\n<p>This flow is not aware that the cache is not in synced.</p>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a modifier to require that the cache is synced to all functions that interact with the operators.</p>\n<h2 id=\"m-08-passing-multiple-eth-deposits-in-orders-array-will-use-the-same-msgvalue-many-times\" style=\"position:relative;\"><a href=\"#m-08-passing-multiple-eth-deposits-in-orders-array-will-use-the-same-msgvalue-many-times\" aria-label=\"m 08 passing multiple eth deposits in orders array will use the same msgvalue many times permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/226\">[M-08] Passing multiple ETH deposits in orders array will use the same <code>msg.value</code> many times</a></h2>\n<p><em>Submitted by hyh, also found by jayjonah8</em></p>\n<h4 id=\"impact-7\" style=\"position:relative;\"><a href=\"#impact-7\" aria-label=\"impact 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Contract holdings can be emptied as malicious user will do deposit/withdraw to extract value. This is possible because after <code>transferInputTokens</code> system uses contract balance for user’s operations, assuming that equivalent value was transferred.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><code>msg.value</code> persist over calls, so passing <code>'Order[] calldata _orders'</code> holding multiple ETH deposits will use the same msg.value in each of them, resulting in multiple deposits, that sums up to much bigger accounted value than actually deposited value, up to contract’s ETH holdings.</p>\n<p>create / <code>addTokens</code> -> <code>submitInOrders</code> -> <code>transferInputTokens</code></p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L103\"><code>NestedFactory.sol</code> L103</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L119\"><code>NestedFactory.sol</code> L119</a></li>\n</ul>\n<p><code>sellTokensToWallet</code> -> <code>submitOutOrders</code> -> <code>transferInputTokens</code></p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L172\"><code>NestedFactory.sol</code> L172</a></li>\n</ul>\n<p><code>sellTokensToNft</code> -> <code>submitOutOrders</code> -> <code>transferInputTokens</code></p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L152\"><code>NestedFactory.sol</code> L152</a>\n<code>transferInputTokens</code> uses msg.value:</li>\n</ul>\n<p><a href=\"https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L462\"><code>NestedFactory.sol</code> L462</a></p>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Controlling ETH to be only once in orders will not help, as <code>NestedFactory</code> inherits from <code>Multicall</code>, which<code>multicall(bytes\\[] calldata data)</code> function allows same reusage of msg.value, which will persist over calls.</p>\n<p>So, it is recommended to treat ETH exclusively, not allowing ETH operations to be batched at all.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/226#issuecomment-972785893\">adrien-supizet (Nested) disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Multicall is not currently used, and the funds exposed would be the NestedFactory’s which should hold no funds.</p>\n<p>To avoid future bugs, we’re going to remove the multicall library, but we don’t think this is a high severity issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/226#issuecomment-985376568\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Downgrading severity to 2 because the NestedFactory is not expected to hold funds, and therefore there is no risk of a loss. You can’t deposit the same Ether twice in the WETH contract.</p>\n<p>Also keeping this as the main over #13.</p>\n</blockquote>\n<h1 id=\"low-risk-findings-22\" style=\"position:relative;\"><a href=\"#low-risk-findings-22\" aria-label=\"low risk findings 22 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (22)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/32\">[L-01] 1:1 linkage between factory and reserve prevents desired upgradability path.</a> <em>Submitted by TomFrench</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/39\">[L-02] <code>claimFees</code> may end up locking user funds</a> <em>Submitted by 0xngndev</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/41\">[L-03] Use SafeERC20 instead of IERC20 in contracts/mocks/DummyRouter.sol </a> <em>Submitted by fatima</em>naz_</li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/43\">[L-04] FeeSplitter:<code>totalWeights</code> can be set to 0 by <code>onlyOwner</code></a> <em>Submitted by GiveMeTestEther, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/50\">[L-05] <code>ExchangeHelpers</code>: in <code>setMaxAllowance</code>, <code>safeApprove</code> shouldn’t be used</a> <em>Submitted by PierrickGT, also found by harleythedog, pants, gzeon, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/76\">[L-06] Unchecked return value in <code>triggerForToken()</code></a> <em>Submitted by palina, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/78\">[L-07] <code>NestedFactory.unlockTokens</code> fails to use safe transfer</a> <em>Submitted by elprofesor, also found by loop, palina, WatchPug, cmichel, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/108\">[L-08] Add zero-address checkers</a> <em>Submitted by xYrYuYx, also found by PierrickGT, loop, palina, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/92\">[L-09] DummyRouter.sol .transfer isn’t safe</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/101\">[L-10] <code>transferOwnership</code> should be two step process</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/103\">[L-11] Missing input validation on array lengths </a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/134\">[L-12] FeeSplitter: <code>ETH_ADDR</code> isn’t supported</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/167\">[L-13] Consider making <code>_calculateFees</code> inline to save gas</a> <em>Submitted by WatchPug, also found by PierrickGT, loop, palina, ye0lde, hyh, and hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/178\">[L-14] Missing parameter validation</a> <em>Submitted by cmichel, also found by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/179\">[L-15] Cannot change <code>tokenUri</code></a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/180\">[L-16] Can add duplicate operators</a> <em>Submitted by cmichel, also found by GreyArt and gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/182\">[L-17] Function using <code>msg.value</code> called in loop</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/183\">[L-18] <code>_handleUnderSpending</code> reverts if condition is false</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/199\">[L-19] <code>NestedFactory.addTokens</code> and withdraw functions require NFT reserve check</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/203\">[L-20] Can’t revoke factory in NestedRecrods</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/220\">[L-21] <code>NestedFactory.removeOperator</code> code doesn’t correspond to it’s logic</a> <em>Submitted by hyh, also found by loop, MaCree, pmerkleplant, palina, elprofesor, fatima</em>naz, fatima<em>naz, ye0lde, xYrYuYx, gzeon, gpersoon, WatchPug, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/166\">[L-22] Use of <code>assert()</code> instead of <code>require()</code></a> <em>Submitted by WatchPug, also found by fatima</em>naz_</li>\n</ul>\n<h1 id=\"non-critical-findings-20\" style=\"position:relative;\"><a href=\"#non-critical-findings-20\" aria-label=\"non critical findings 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (20)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/3\">[N-01] <code>ZeroExOperator</code></a> <em>Submitted by TomFrench</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/4\">[N-02] Weak guarantees on `ZeroExOperator using correct create2 salt to recompute storage address</a> <em>Submitted by TomFrench</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/22\">[N-03] Multiple Solidity pragma</a> <em>Submitted by fatima</em>naz_</li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/33\">[N-04] NestedBuybacker sends NST to NestedReserve with no proper way to retrieve it.</a> <em>Submitted by TomFrench</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/37\">[N-05] Typo</a> <em>Submitted by 0xngndev, also found by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/40\">[N-06] Indexing parameters of your events</a> <em>Submitted by 0xngndev</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/42\">[N-07] Missing events for critical privileged functions</a> <em>Submitted by GiveMeTestEther, also found by 0x0x0x, elprofesor, pants, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/44\">[N-08] Comment for PaymentReceived event should state “received” instead of “released”</a> <em>Submitted by GiveMeTestEther</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/45\">[N-09] Different coding style for same pattern: x += y and sometimes x = x + y</a> <em>Submitted by GiveMeTestEther</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/47\">[N-10] Remove empty file OwnableOperator.so</a> <em>Submitted by GiveMeTestEther, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/48\">[N-11] OperatorHelpers.sol: function decodeDataAndRequire state mutability can be restricted to pure</a> <em>Submitted by GiveMeTestEther, also found by palina and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/53\">[N-12] Wrong Error Message in _transferInputTokens()</a> <em>Submitted by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/84\">[N-13] Missing events on changes</a> <em>Submitted by palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/105\">[N-14] Unused Named Return</a> <em>Submitted by ye0lde, also found by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/223\">[N-15] NestedFactory._decreaseHoldingAmount needs explicit amount control for spending reserve</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/114\">[N-16] No used library added</a> <em>Submitted by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/161\">[N-17] Misleading error message</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/204\">[N-18] NestedAsset.setFactory should be named addFactory</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/206\">[N-19] INestedToken interface</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/210\">[N-20] OperatorResolver.areAddressesImported doesn’t check lengths of argument arrays</a> <em>Submitted by hyh</em></li>\n</ul>\n<h1 id=\"gas-optimizations-50\" style=\"position:relative;\"><a href=\"#gas-optimizations-50\" aria-label=\"gas optimizations 50 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (50)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/1\">[G-01] use msg.sender rather than _msgSender() in FeeSplitter.receive</a> <em>Submitted by TomFrench</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/5\">[G-02] NestedFactory: _transferToReserveAndStore can be simplified to save on gas</a> <em>Submitted by PierrickGT</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/7\">[G-03] Save gas by caching array length used in for loops</a> <em>Submitted by 0x0x0x, also found by pants, xYrYuYx, gzeon, WatchPug, defsec, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/8\">[G-04] For <code>uint</code> replace <code>> 0</code> with <code>!= 0</code></a> <em>Submitted by 0x0x0x, also found by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/11\">[G-05] <code>updateShareholder</code> in <code>FeeSplitter.sol</code> can be implemented more efficiently</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/14\">[G-06] Reduce require messages length to save contract size</a> <em>Submitted by 0xngndev, also found by GiveMeTestEther, gzeon, WatchPug, pauliax, and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/25\">[G-07] unchecked { ++i }  is more gas efficient than i++ for loops</a> <em>Submitted by GiveMeTestEther, also found and pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/26\">[G-08] FlatOperator can be inlined into NestedFactory to save gas</a> <em>Submitted by TomFrench</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/27\">[G-09] <code>NestedReserve.transferFromFactory</code> function increases deployment gas costs unnecessarily</a> <em>Submitted by TomFrench</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/28\">[G-10] More gas efficient calculation of weights</a> <em>Submitted by GiveMeTestEther, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/29\">[G-11] Mix of external and public function visibility with the same access modifier</a> <em>Submitted by GiveMeTestEther, also found by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/34\">[G-12] Move from a pull to a push pattern for sending fees to the FeeSplitter</a> <em>Submitted by TomFrench, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/35\">[G-13] Store hash of <code>type(ZeroExStorage).creationCode</code> rather than recalculating it on each call</a> <em>Submitted by TomFrench</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/38\">[G-14] Adding an if check to avoid unnecessary call</a> <em>Submitted by 0xngndev</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/46\">[G-15] Subtraction from<code>totalWeights</code> can be done unchecked to save gas</a> <em>Submitted by GiveMeTestEther, also found by WatchPug, defsec, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/49\">[G-16] NestedFactory: in deleteAsset and freeToken, tokens should only be declared once </a> <em>Submitted by PierrickGT</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/55\">[G-17] function mintWithMetadata() Unused</a> <em>Submitted by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/57\">[G-18] _sendFees() Repeat SLOAD shareholders In Loop</a> <em>Submitted by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/63\">[G-19] <code>removeFactory</code> has <code>==true</code> comparison in require statement</a> <em>Submitted by loop, also found by palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/65\">[G-20] Remove unnecessary <code>balanceOf</code> call in <code>NestedBuybacker::triggerForToken</code></a> <em>Submitted by pmerkleplant, also found by palina, nathaniel, WatchPug, and cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/68\">[G-21] Refactor <code>FeeSplitter::getAmountDue</code> to save one variable slot</a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/72\">[G-22] Public functions can be declared external</a> <em>Submitted by palina, also found by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/81\">[G-23] Gas-consuming way to add shareholders</a> <em>Submitted by palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/90\">[G-24] WETHMock withdraw function unnecessary safe math</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/96\">[G-25] reordering struct fields</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/98\">[G-26] double reading of state variable inside a loop</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/102\">[G-27] Use existing memory version of state variables</a> <em>Submitted by ye0lde, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/107\">[G-28] Use <code>calldata</code> keyword instead of <code>memory</code> keyword in function arguments</a> <em>Submitted by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/115\">[G-29] Add index param to remove in function argument to reduce gas.</a> <em>Submitted by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/119\">[G-30] OperatorResolver: importOperators() function redeclares local variable multiple times</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/121\">[G-31] NestedRecords: Unnecessary variable in the Holding struct</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/122\">[G-32] MixinOperatorResolver: variables are declared multiple times in rebuildCache()</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/123\">[G-33] NestedReserve: Redundant valid token address checks</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/124\">[G-34] NestedRecords: createRecord() can be made internal</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/125\">[G-35] NestedRecords: createRecord()‘s isActive check is redundant</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/126\">[G-36] NestedRecords: createRecord() can have modifier check removed</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/128\">[G-37] NestedFactory: _fromReserve param in _submitOutOrders() is redundant</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/146\">[G-38] Gas Optimization: Pack struct in FeeSplitter.sol</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/151\">[G-39] Gas Optimization: Set allowance only when needed</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/162\">[G-40] Avoid unnecessary storage writes can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/170\">[G-41] <code>NestedFactory#removeOperator()</code> Avoid empty items can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/173\">[G-42] Adding unchecked directive can save gas</a> <em>Submitted by WatchPug, also found by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/175\">[G-43] Cache and read storage variables from the stack can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/185\">[G-44] Unnecessary Use of _msgSender()</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/193\">[G-45] Small refactor for functions to save some gas</a> <em>Submitted by 0xngndev</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/198\">[G-46] Check condition before calling NestedFactory._handleUnderSpending</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/207\">[G-47] index + 1 can be simplified</a> <em>Submitted by pauliax, also found by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/208\">[G-48] _burnNST</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/213\">[G-49] mintWithMetadata onlyFactory </a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-nested-findings/issues/195\">[G-50] Unused local variables </a> <em>Submitted by ye0lde, also found by PierrickGT, pmerkleplant, WatchPug, and hack3r-0m</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-1\">High Risk Findings (1)</a></p>\n<ul>\n<li><a href=\"#h-01-copy-your-own-portfolio-to-keep-earning-royalties-\">[H-01] Copy your own portfolio to keep earning royalties </a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-8\">Medium Risk Findings (8)</a></p>\n<ul>\n<li><a href=\"#m-01-setreserve-can-be-front-run\">[M-01] <code>setReserve()</code> can be front-run</a></li>\n<li><a href=\"#m-02-feesplitter-no-sanity-check-to-prevent-shareholder-from-being-added-twice\">[M-02] FeeSplitter: No sanity check to prevent shareholder from being added twice.</a></li>\n<li><a href=\"#m-03-nestedfactory-ensure-zero-msgvalue-if-transferring-from-user-and-inputtoken-is-not-eth-\">[M-03] NestedFactory: Ensure zero msg.value if transferring from user and <code>inputToken</code> is not ETH </a></li>\n<li><a href=\"#m-04-feesplitter-unbounded-number-of-shareholders-can-cause-dos\">[M-04] FeeSplitter: Unbounded number of shareholders can cause DOS</a></li>\n<li><a href=\"#m-05-isresolvercached-will-always-return-false-after-removing-operator\">[M-05] isResolverCached() will always return false after removing operator</a></li>\n<li><a href=\"#m-06-nestedfactorysol_submitinorders-wrong-implementation-cause-users-to-be-overcharged\">[M-06] <code>NestedFactory.sol#_submitInOrders()</code> Wrong implementation cause users to be overcharged</a></li>\n<li><a href=\"#m-07-ensure-on-chain-that-cache-is-synced\">[M-07] Ensure on-chain that cache is synced</a></li>\n<li><a href=\"#m-08-passing-multiple-eth-deposits-in-orders-array-will-use-the-same-msgvalue-many-times\">[M-08] Passing multiple ETH deposits in orders array will use the same <code>msg.value</code> many times</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-22\">Low Risk Findings (22)</a></li>\n<li><a href=\"#non-critical-findings-20\">Non-Critical Findings (20)</a></li>\n<li><a href=\"#gas-optimizations-50\">Gas Optimizations (50)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of Nested Finance  smart contract system written in Solidity. The code contest took place between November 11—November 17 2021.\n\n## Wardens\n\n29 Wardens contributed reports to the Nested Finance contest:\n\n1. GreyArt ([hickuphh3](https://twitter.com/HickupH) and [itsmeSTYJ](https://twitter.com/itsmeSTYJ))\n2. jayjonah8\n3. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n4. [palina](https://twitter.com/PalinaTolmach)\n5. [cmichel](https://twitter.com/cmichelio)\n6. [pauliax](https://twitter.com/SolidityDev)\n7. hyh\n8. pants\n9. [TomFrench](https://github.com/TomAFrench)\n10. fatima_naz\n11. [hack3r-0m](https://twitter.com/hack3r_0m)\n12. [defsec](https://twitter.com/defsec_)\n13. [0xngndev](https://twitter.com/ngndev)\n14. [ye0lde](https://twitter.com/_ye0lde)\n15. [gzeon](https://twitter.com/gzeon)\n16. [GiveMeTestEther](https://twitter.com/GiveMeTestEther)\n17. [PierrickGT](https://twitter.com/PierrickGT)\n18. [xYrYuYx](https://twitter.com/xYrYuYx)\n19. [loop](https://twitter.com/loop_225)\n20. [Meta0xNull](https://twitter.com/Meta0xNull)\n21. 0x0x0x\n22. [pmerkleplant](https://twitter.com/merkleplant_eth)\n23. harleythedog\n24. elprofesor\n25. [MaCree](https://twitter.com/qwertyuiop_eth)\n26. [gpersoon](https://twitter.com/gpersoon)\n27. [nathaniel](https://twitter.com/n4th4n131?t&#x3D;ZXGbALC3q6JMMoolZddgHg&amp;s&#x3D;09)\n\nThis contest was judged by [Alberto Cuesta Cañada](https://twitter.com/alcueca (judge)).\n\nFinal report assembled by [moneylegobatman](https://twitter.com/money_lego) and [CloudEllie](https://twitter.com/CloudEllie1).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 31 unique vulnerabilities and 101 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 1 received a risk rating in the category of HIGH severity, 8 received a risk rating in the category of MEDIUM severity, and 22 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 20 non-critical recommendations and 50 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 Nested Finance contest repository](https://github.com/code-423n4/2021-11-nested), and is composed of 29 smart contracts written in the Solidity programming language and includes 1960 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (1)\n## [[H-01] Copy your own portfolio to keep earning royalties ](https://github.com/code-423n4/2021-11-nested-findings/issues/30)\n_Submitted by jayjonah8_\n\n#### Impact\nIn `NestedFactory.sol` going through the `create()` function which leads to the `sendFeesWithRoyalties()` => `addShares()` function,  Im not seeing any checks preventing someone from copying their own portfolio and receiving royalty shares for it and simply repeating the process over and over again.\n\n#### Proof of Concept\n- [`FeeSplitter.sol` L152](https://github.com/code-423n4/2021-11-nested/blob/main/contracts/FeeSplitter.sol#L152)\n- [`FeeSplitter.sol` L220](https://github.com/code-423n4/2021-11-nested/blob/main/contracts/FeeSplitter.sol#L220)\n- [`NestedFactory.sol` L103](https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L103)\n- [`NestedAsset.sol` L69](https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedAsset.sol#L69)\n- [`NestedFactory.sol` L103](https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L103)\n- [`NestedFactory.sol` L491](https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L491)\n\n#### Tools Used\nManual code review\n\n#### Recommended Mitigation Steps\nA require statement should be added not allowing users to copy their own portfolios.\n\n**[maximebrugel (Nested) disagreed with severity](https://github.com/code-423n4/2021-11-nested-findings/issues/30#issuecomment-970388713):**\n > Indeed, a user can copy his own portfolio to reduce the fees, however a require statement won't fix this issue...\n>\n> This problem cannot be corrected but only mitigated, since the user can use two different wallets.\n> Currently the front-end doesn't allow to duplicate a portfolio with the same address.\n>\n> I don't consider this a \"High Risk\" since the assets are not really stolen. Maybe \"Med Risk\" ? This is by design an issue and we tolerate that users can do this (with multiple wallets).\n>\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-11-nested-findings/issues/30#issuecomment-985642915):**\n > I'm reading that the vulnerability actually lowers fees to zero for a dedicated attacker, since creating a arbitrarily large number of wallets and bypassing the frontend is easy. In theory leaking protocol value would be a severity 2, but since this is effectively disabling a core feature of the protocol (fees), the severity 3 is sustained.\n\n# Medium Risk Findings (8)\n## [[M-01] `setReserve()` can be front-run](https://github.com/code-423n4/2021-11-nested-findings/issues/82)\n_Submitted by palina_\n\n#### Impact\nThe `reserve` address variable in NestedFactory.sol remains equal to 0 before the `setReserve()` function is called by an owner. This may lead to incorrect transfers of tokens or invalid comparison with e.g., the asset reserve (nestedRecords.getAssetReserve(\\_nftId) == address(reserve)), should they occur before the value for `reserve` was set.\nIn addition, the immutabiliy of the `reserve` variable requires extra caution when setting the value.\n\n#### Proof of Concept\n`setReserve()`: [`NestedFactory.sol` L89](https://github.com/code-423n4/2021-11-nested/blob/5d113967cdf7c9ee29802e1ecb176c656386fe9b/contracts/NestedFactory.sol#L89)\n\n#### Tools Used\nManual Analysis\n\n#### Recommended Mitigation Steps\nConsider initializing the value for the `reserve` variable in the constructor.\n\n**[maximebrugel (Nested) commented](https://github.com/code-423n4/2021-11-nested-findings/issues/82#issuecomment-970327769):**\n > The main issue is duplicated : #60\n>\n> The following comment can be considered as a duplicate of #83 if the extra caution is checking the zero address.\n> > In addition, the immutabiliy of the reserve variable requires extra caution when setting the value.\n>\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-11-nested-findings/issues/82#issuecomment-985410734):**\n > The fact that the call to `setReserve` can be front-run is not being taken into account by the sponsor. I'm marking this one as not a duplicate.\n\n## [[M-02] FeeSplitter: No sanity check to prevent shareholder from being added twice.](https://github.com/code-423n4/2021-11-nested-findings/issues/135)\n_Submitted by GreyArt, also found by hack3r-0m_\n\n#### Impact\nIt is possible for duplicate shareholders to be added. These shareholders will get more than intended when `_sendFee()` is called.\n\n#### Recommended Mitigation Steps\nEnsure that the `_accounts` array is sorted in `setShareholders()`.\n\n```jsx\nfor (uint256 i = 0; i < _accounts.length; i++) {\n\tif (i > 0) {\n\t\trequire(_accounts[i - 1] < _accounts[i], \"FeeSplitter: ACCOUNTS_NOT_SORTED\");\n\t}\n\t_addShareholder(_accounts[i], _weights[i]);\n}\n```\n\n**[adrien-supizet (Nested) commented](https://github.com/code-423n4/2021-11-nested-findings/issues/135#issuecomment-975351632):**\n > Duplicate #231\n\n**[adrien-supizet (Nested) commented](https://github.com/code-423n4/2021-11-nested-findings/issues/135#issuecomment-975352623):**\n > Indeed there is a fix to do here, we'll prevent adding the same shareholders instead as suggested in #231\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-11-nested-findings/issues/135#issuecomment-985366841):**\n > Taking this issue as the principal, and raising #231 to medium severity.\n\n## [[M-03] NestedFactory: Ensure zero msg.value if transferring from user and `inputToken` is not ETH ](https://github.com/code-423n4/2021-11-nested-findings/issues/136)\n_Submitted by GreyArt_\n\n#### Impact\nA user that mistakenly calls either `create()` or `addToken()` with WETH (or another ERC20) as the input token, but includes native ETH with the function call will have his native ETH permanently locked in the contract.\n\n#### Recommended Mitigation Steps\nIt is best to ensure that `msg.value = 0` in `_transferInputTokens()` for the scenario mentioned above.\n\n```jsx\n} else if (address(_inputToken) == ETH) {\n\t...\n} else {\n\trequire(msg.value == 0, \"NestedFactory::_transferInputTokens: ETH sent for non-ETH transfer\");\n  _inputToken.safeTransferFrom(_msgSender(), address(this), _inputTokenAmount);\n}\n```\n\n**[adrien-supizet (Nested) confirmed](https://github.com/code-423n4/2021-11-nested-findings/issues/136)**\n\n## [[M-04] FeeSplitter: Unbounded number of shareholders can cause DOS](https://github.com/code-423n4/2021-11-nested-findings/issues/137)\n_Submitted by GreyArt_\n\n#### Impact\nThere is no limit to the number of shareholders. It is therefore possible to set a large number of shareholders such that `_sendFees()` will run out of gas when adding shares to each shareholder.\nThis will cause denial of service to all NestedFactory functions, especially the ones that will remove funds like `withdraw()` and `destroy()`.\n\n#### Recommended Mitigation Steps\nIt would be best to set a sanity maximum number of shareholders that can be added.\n\n**[adrien-supizet (Nested) acknowledged](https://github.com/code-423n4/2021-11-nested-findings/issues/137)**\n\n## [[M-05] isResolverCached() will always return false after removing operator](https://github.com/code-423n4/2021-11-nested-findings/issues/139)\n_Submitted by GreyArt, also found by WatchPug_\n\n#### Impact\nWhile there is no loss of funds, removing an operator will cause the cache functionality to be permanently broken. If there was a function that had a modifier which requires the cache to be synced before the function can be called, it would not be callable as well.\n\nThe underlying issue is how the `bytes32` operator is removed from the array when `removeOperator()` is called. Its value gets deleted (set to 0x0), but isn't taken out of the array.\n\n#### Proof of Concept\nFor ease of reading, we use abbreviated strings like `0xA`, `0xB` for `bytes32` and `address` types.\n\n1.  Import 3 operators by calling `OperatorResolver.importOperators([0xA, 0xB, 0xC], [0x1, 0x2, 0x3)`.\n2.  Call `NestedFactory.addOperator()` 3 times to push these 3 operators into the `operators` state variable.\n3.  Call `NestedFactory.rebuildCache()` to build the cache.\n4.  Let's say the second operator `0xB` is to be removed. Taking reference from the `removeOperator.ts` script, `OperatorResolver.importOperators([0xA, 0xB, 0xC], [0x1, 0x2, 0x3)` is called first. This works because OperatorResolver uses a mapping(bytes32 ⇒ address) to represent the operators. Hence, by setting `0xB`'s destination address to be the null address, it is like as if he was never an operator.\n5.  Call `NestedFactory.rebuildCache()` to rebuild the cache. `resolverAddressesRequired()` will return `[0xA, 0xB, 0xC]`. `0xB` will be removed from `addressCache` because `resolver.getAddress(0xB)` returns 0x000 since it has been deleted from the OperatorResolver.\n6.  Call `NestedFactory.removeOperator(0xB)`. The `operators` array now looks like this: `[0xA, 0x0, 0xC]`.\n7.  When you try to call `NestedFactory.isResolverCached`, it will always return false because of the null `bytes32` value, where `addressCache[0x0]` will always return the null address.\n\n#### Recommended Mitigation Steps\nInstead of doing an element deletion, it should be replaced with the last element, then have the last element popped in `removeOperator()`.\n\n```jsx\nfunction removeOperator(bytes32 operator) external override onlyOwner {\n\tfor (uint256 i = 0; i < operators.length; i++) {\n\t\tif (operators[i] == operator) {\n\t\t\toperators[i] = operators[operators.length - 1];\n\t\t\toperators.pop();\n\t\t\tbreak;\n\t\t}\n\t}\n}\n```\n\n**[maximebrugel (Nested) commented](https://github.com/code-423n4/2021-11-nested-findings/issues/139#issuecomment-975378231):**\n > Duplicated : #58\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-11-nested-findings/issues/139#issuecomment-985431604):**\n > Taking this issue apart as a non-duplicate, for finding the most severe consequence of the incorrect implementation.\n\n## [[M-06] `NestedFactory.sol#_submitInOrders()` Wrong implementation cause users to be overcharged](https://github.com/code-423n4/2021-11-nested-findings/issues/160)\n_Submitted by WatchPug_\n\nWhen executing orders, the actual `amountSpent + feesAmount` can be lower than `_inputTokenAmount`, the unspent amount should be returned to the user.\n\nHowever, in the current implementation, the unspent amount will be taken as part of the fee.\n[`NestedFactory.sol` L285-L309](https://github.com/code-423n4/2021-11-nested/blob/f646002b692ca5fa3631acfff87dda897541cf41/contracts/NestedFactory.sol#L285-L309)\n\n```solidity\nfunction _submitInOrders(\n    uint256 _nftId,\n    IERC20 _inputToken,\n    uint256 _inputTokenAmount,\n    Order[] calldata _orders,\n    bool _reserved,\n    bool _fromReserve\n) private returns (uint256 feesAmount, IERC20 tokenSold) {\n    _inputToken = _transferInputTokens(_nftId, _inputToken, _inputTokenAmount, _fromReserve);\n    uint256 amountSpent;\n    for (uint256 i = 0; i < _orders.length; i++) {\n        amountSpent += _submitOrder(address(_inputToken), _orders[i].token, _nftId, _orders[i], _reserved);\n    }\n    feesAmount = _calculateFees(_msgSender(), amountSpent);\n    assert(amountSpent <= _inputTokenAmount - feesAmount); // overspent\n\n    // If input is from the reserve, update the records\n    if (_fromReserve) {\n        _decreaseHoldingAmount(_nftId, address(_inputToken), _inputTokenAmount);\n    }\n\n    _handleUnderSpending(_inputTokenAmount - feesAmount, amountSpent, _inputToken);\n\n    tokenSold = _inputToken;\n}\n```\n\n##### Recommendation\n\nChange to:\n\n```solidity\nfunction _submitInOrders(\n    uint256 _nftId,\n    IERC20 _inputToken,\n    uint256 _inputTokenAmount,\n    Order[] calldata _orders,\n    bool _reserved,\n    bool _fromReserve\n) private returns (uint256 feesAmount, IERC20 tokenSold) {\n    _inputToken = _transferInputTokens(_nftId, _inputToken, _inputTokenAmount, _fromReserve);\n    uint256 amountSpent;\n    for (uint256 i = 0; i < _orders.length; i++) {\n        amountSpent += _submitOrder(address(_inputToken), _orders[i].token, _nftId, _orders[i], _reserved);\n    }\n    feesAmount = _calculateFees(_msgSender(), amountSpent);\n    assert(amountSpent <= _inputTokenAmount - feesAmount); // overspent\n\n    // If input is from the reserve, update the records\n    if (_fromReserve) {\n        _decreaseHoldingAmount(_nftId, address(_inputToken), amountSpent+feesAmount);\n    }\n\n    ExchangeHelpers.setMaxAllowance(_token, address(feeSplitter));\n    feeSplitter.sendFees(_token, feesAmount);\n\n    if (_inputTokenAmount > amountSpent + feesAmount) {\n        _inputToken.transfer(_fromReserve ? address(reserve) : _msgSender(), _inputTokenAmount - amountSpent - feesAmount);\n    }\n\n    tokenSold = _inputToken;\n}\n```\n\n**[adrien-supizet (Nested) disputed and then confirmed](https://github.com/code-423n4/2021-11-nested-findings/issues/160#issuecomment-976658334):**\n > ## Rationale\n> We don't consider this an issue as this was done on purpose. We wanted to treat the positive slippage as regular fees.\n> Most times, the dust of positive slippage will cost more to the user if they are transferred rather than passed along fees.\n>\n> We made it possible for us to retrieve overcharged amounts in case of mistakes to give them back to users.\n>\n> ## New behavior\n> But for the sake of transparency, and in the spirit of DeFi, we have reviewed the business model of the protocol and decided to transfer back any amount that was unspent and which exceeds the 1% fixed fee.\n>\n> ## Resolution\n> Selecting \"disputed\" for now but I'll let a judge review if this should be included in the report, and if the severity was correct, as we were able to give back tokens to users if they made a mistake calling the protocol.\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-11-nested-findings/issues/160#issuecomment-985607076):**\n > If stated in the README or comments, the issue would be invalid. The sponsor can choose whichever behaviour suits their business model. When not stated in the README, any asset loss to users or protocol is a valid issue. User losses are expected to be a severity 3, but in this case, and given that those losses are inferior to the gas, the issue is downgraded to severity 2.\n>\n> In the future, please state in the code any asset losses that are accepted by the protocol.\n\n## [[M-07] Ensure on-chain that cache is synced](https://github.com/code-423n4/2021-11-nested-findings/issues/217)\n_Submitted by GreyArt, also found by WatchPug_\n\n#### Impact\nCurrently, many core operations (like `NestedFactory.create()`, `NestedFactory.swapTokenForTokens()`) are dependent on the assumption that the cache is synced before these functions are executed however this may not necessarily be the case.\n\n#### Proof of Concept\n1.  `OperatorResolver.importOperators()` is called to remove an operator.\n2.  A user calls `NestedFactory.create()` that uses the operator that was being removed / updated.\n3.  `NestedFactory.rebuildCache()` is called to rebuild cache.\n\nThis flow is not aware that the cache is not in synced.\n\n#### Recommended Mitigation Steps\nAdd a modifier to require that the cache is synced to all functions that interact with the operators.\n\n## [[M-08] Passing multiple ETH deposits in orders array will use the same `msg.value` many times](https://github.com/code-423n4/2021-11-nested-findings/issues/226)\n_Submitted by hyh, also found by jayjonah8_\n\n#### Impact\nContract holdings can be emptied as malicious user will do deposit/withdraw to extract value. This is possible because after `transferInputTokens` system uses contract balance for user's operations, assuming that equivalent value was transferred.\n\n#### Proof of Concept\n`msg.value` persist over calls, so passing `'Order[] calldata _orders'` holding multiple ETH deposits will use the same msg.value in each of them, resulting in multiple deposits, that sums up to much bigger accounted value than actually deposited value, up to contract's ETH holdings.\n\ncreate / `addTokens` -> `submitInOrders` -> `transferInputTokens`\n- [`NestedFactory.sol` L103](https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L103)\n- [`NestedFactory.sol` L119](https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L119)\n\n`sellTokensToWallet` -> `submitOutOrders` -> `transferInputTokens`\n- [`NestedFactory.sol` L172](https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L172)\n\n`sellTokensToNft` -> `submitOutOrders` -> `transferInputTokens`\n- [`NestedFactory.sol` L152](https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L152)\n`transferInputTokens` uses msg.value:\n\n[`NestedFactory.sol` L462](https://github.com/code-423n4/2021-11-nested/blob/main/contracts/NestedFactory.sol#L462)\n#### Recommended Mitigation Steps\n\nControlling ETH to be only once in orders will not help, as `NestedFactory` inherits from `Multicall`, which` multicall(bytes\\[] calldata data)` function allows same reusage of msg.value, which will persist over calls.\n\nSo, it is recommended to treat ETH exclusively, not allowing ETH operations to be batched at all.\n\n**[adrien-supizet (Nested) disagreed with severity](https://github.com/code-423n4/2021-11-nested-findings/issues/226#issuecomment-972785893):**\n > Multicall is not currently used, and the funds exposed would be the NestedFactory's which should hold no funds.\n>\n> To avoid future bugs, we're going to remove the multicall library, but we don't think this is a high severity issue.\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-11-nested-findings/issues/226#issuecomment-985376568):**\n > Downgrading severity to 2 because the NestedFactory is not expected to hold funds, and therefore there is no risk of a loss. You can't deposit the same Ether twice in the WETH contract.\n>\n> Also keeping this as the main over #13.\n\n# Low Risk Findings (22)\n- [[L-01] 1:1 linkage between factory and reserve prevents desired upgradability path.](https://github.com/code-423n4/2021-11-nested-findings/issues/32) _Submitted by TomFrench_\n- [[L-02] `claimFees` may end up locking user funds](https://github.com/code-423n4/2021-11-nested-findings/issues/39) _Submitted by 0xngndev_\n- [[L-03] Use SafeERC20 instead of IERC20 in contracts/mocks/DummyRouter.sol ](https://github.com/code-423n4/2021-11-nested-findings/issues/41) _Submitted by fatima_naz_\n- [[L-04] FeeSplitter:` totalWeights` can be set to 0 by `onlyOwner`](https://github.com/code-423n4/2021-11-nested-findings/issues/43) _Submitted by GiveMeTestEther, also found by pauliax_\n- [[L-05] `ExchangeHelpers`: in `setMaxAllowance`, `safeApprove` shouldn't be used](https://github.com/code-423n4/2021-11-nested-findings/issues/50) _Submitted by PierrickGT, also found by harleythedog, pants, gzeon, and WatchPug_\n- [[L-06] Unchecked return value in `triggerForToken()`](https://github.com/code-423n4/2021-11-nested-findings/issues/76) _Submitted by palina, also found by pauliax_\n- [[L-07] `NestedFactory.unlockTokens` fails to use safe transfer](https://github.com/code-423n4/2021-11-nested-findings/issues/78) _Submitted by elprofesor, also found by loop, palina, WatchPug, cmichel, and pauliax_\n- [[L-08] Add zero-address checkers](https://github.com/code-423n4/2021-11-nested-findings/issues/108) _Submitted by xYrYuYx, also found by PierrickGT, loop, palina, and pauliax_\n- [[L-09] DummyRouter.sol .transfer isn't safe](https://github.com/code-423n4/2021-11-nested-findings/issues/92) _Submitted by pants_\n- [[L-10] `transferOwnership` should be two step process](https://github.com/code-423n4/2021-11-nested-findings/issues/101) _Submitted by defsec_\n- [[L-11] Missing input validation on array lengths ](https://github.com/code-423n4/2021-11-nested-findings/issues/103) _Submitted by ye0lde_\n- [[L-12] FeeSplitter: `ETH_ADDR` isn't supported](https://github.com/code-423n4/2021-11-nested-findings/issues/134) _Submitted by GreyArt_\n- [[L-13] Consider making `_calculateFees` inline to save gas](https://github.com/code-423n4/2021-11-nested-findings/issues/167) _Submitted by WatchPug, also found by PierrickGT, loop, palina, ye0lde, hyh, and hack3r-0m_\n- [[L-14] Missing parameter validation](https://github.com/code-423n4/2021-11-nested-findings/issues/178) _Submitted by cmichel, also found by GreyArt_\n- [[L-15] Cannot change `tokenUri`](https://github.com/code-423n4/2021-11-nested-findings/issues/179) _Submitted by cmichel_\n- [[L-16] Can add duplicate operators](https://github.com/code-423n4/2021-11-nested-findings/issues/180) _Submitted by cmichel, also found by GreyArt and gzeon_\n- [[L-17] Function using `msg.value` called in loop](https://github.com/code-423n4/2021-11-nested-findings/issues/182) _Submitted by cmichel_\n- [[L-18] `_handleUnderSpending` reverts if condition is false](https://github.com/code-423n4/2021-11-nested-findings/issues/183) _Submitted by cmichel_\n- [[L-19] `NestedFactory.addTokens` and withdraw functions require NFT reserve check](https://github.com/code-423n4/2021-11-nested-findings/issues/199) _Submitted by hyh_\n- [[L-20] Can't revoke factory in NestedRecrods](https://github.com/code-423n4/2021-11-nested-findings/issues/203) _Submitted by pauliax_\n- [[L-21] `NestedFactory.removeOperator` code doesn't correspond to it's logic](https://github.com/code-423n4/2021-11-nested-findings/issues/220) _Submitted by hyh, also found by loop, MaCree, pmerkleplant, palina, elprofesor, fatima_naz, fatima_naz, ye0lde, xYrYuYx, gzeon, gpersoon, WatchPug, and pauliax_\n- [[L-22] Use of `assert()` instead of `require()`](https://github.com/code-423n4/2021-11-nested-findings/issues/166) _Submitted by WatchPug, also found by fatima_naz_\n\n# Non-Critical Findings (20)\n- [[N-01] `ZeroExOperator`](https://github.com/code-423n4/2021-11-nested-findings/issues/3) _Submitted by TomFrench_\n- [[N-02] Weak guarantees on `ZeroExOperator using correct create2 salt to recompute storage address](https://github.com/code-423n4/2021-11-nested-findings/issues/4) _Submitted by TomFrench_\n- [[N-03] Multiple Solidity pragma](https://github.com/code-423n4/2021-11-nested-findings/issues/22) _Submitted by fatima_naz_\n- [[N-04] NestedBuybacker sends NST to NestedReserve with no proper way to retrieve it.](https://github.com/code-423n4/2021-11-nested-findings/issues/33) _Submitted by TomFrench_\n- [[N-05] Typo](https://github.com/code-423n4/2021-11-nested-findings/issues/37) _Submitted by 0xngndev, also found by GreyArt_\n- [[N-06] Indexing parameters of your events](https://github.com/code-423n4/2021-11-nested-findings/issues/40) _Submitted by 0xngndev_\n- [[N-07] Missing events for critical privileged functions](https://github.com/code-423n4/2021-11-nested-findings/issues/42) _Submitted by GiveMeTestEther, also found by 0x0x0x, elprofesor, pants, and WatchPug_\n- [[N-08] Comment for PaymentReceived event should state \"received\" instead of \"released\"](https://github.com/code-423n4/2021-11-nested-findings/issues/44) _Submitted by GiveMeTestEther_\n- [[N-09] Different coding style for same pattern: x += y and sometimes x = x + y](https://github.com/code-423n4/2021-11-nested-findings/issues/45) _Submitted by GiveMeTestEther_\n- [[N-10] Remove empty file OwnableOperator.so](https://github.com/code-423n4/2021-11-nested-findings/issues/47) _Submitted by GiveMeTestEther, also found by WatchPug_\n- [[N-11] OperatorHelpers.sol: function decodeDataAndRequire state mutability can be restricted to pure](https://github.com/code-423n4/2021-11-nested-findings/issues/48) _Submitted by GiveMeTestEther, also found by palina and WatchPug_\n- [[N-12] Wrong Error Message in _transferInputTokens()](https://github.com/code-423n4/2021-11-nested-findings/issues/53) _Submitted by Meta0xNull_\n- [[N-13] Missing events on changes](https://github.com/code-423n4/2021-11-nested-findings/issues/84) _Submitted by palina_\n- [[N-14] Unused Named Return](https://github.com/code-423n4/2021-11-nested-findings/issues/105) _Submitted by ye0lde, also found by pants_\n- [[N-15] NestedFactory._decreaseHoldingAmount needs explicit amount control for spending reserve](https://github.com/code-423n4/2021-11-nested-findings/issues/223) _Submitted by hyh_\n- [[N-16] No used library added](https://github.com/code-423n4/2021-11-nested-findings/issues/114) _Submitted by xYrYuYx_\n- [[N-17] Misleading error message](https://github.com/code-423n4/2021-11-nested-findings/issues/161) _Submitted by WatchPug_\n- [[N-18] NestedAsset.setFactory should be named addFactory](https://github.com/code-423n4/2021-11-nested-findings/issues/204) _Submitted by hyh_\n- [[N-19] INestedToken interface](https://github.com/code-423n4/2021-11-nested-findings/issues/206) _Submitted by pauliax_\n- [[N-20] OperatorResolver.areAddressesImported doesn't check lengths of argument arrays](https://github.com/code-423n4/2021-11-nested-findings/issues/210) _Submitted by hyh_\n\n# Gas Optimizations (50)\n- [[G-01] use msg.sender rather than _msgSender() in FeeSplitter.receive](https://github.com/code-423n4/2021-11-nested-findings/issues/1) _Submitted by TomFrench_\n- [[G-02] NestedFactory: _transferToReserveAndStore can be simplified to save on gas](https://github.com/code-423n4/2021-11-nested-findings/issues/5) _Submitted by PierrickGT_\n- [[G-03] Save gas by caching array length used in for loops](https://github.com/code-423n4/2021-11-nested-findings/issues/7) _Submitted by 0x0x0x, also found by pants, xYrYuYx, gzeon, WatchPug, defsec, and pauliax_\n- [[G-04] For `uint` replace `> 0` with `!= 0`](https://github.com/code-423n4/2021-11-nested-findings/issues/8) _Submitted by 0x0x0x, also found by defsec_\n- [[G-05] `updateShareholder` in `FeeSplitter.sol` can be implemented more efficiently](https://github.com/code-423n4/2021-11-nested-findings/issues/11) _Submitted by 0x0x0x_\n- [[G-06] Reduce require messages length to save contract size](https://github.com/code-423n4/2021-11-nested-findings/issues/14) _Submitted by 0xngndev, also found by GiveMeTestEther, gzeon, WatchPug, pauliax, and ye0lde_\n- [[G-07] unchecked { ++i }  is more gas efficient than i++ for loops](https://github.com/code-423n4/2021-11-nested-findings/issues/25) _Submitted by GiveMeTestEther, also found and pants_\n- [[G-08] FlatOperator can be inlined into NestedFactory to save gas](https://github.com/code-423n4/2021-11-nested-findings/issues/26) _Submitted by TomFrench_\n- [[G-09] `NestedReserve.transferFromFactory` function increases deployment gas costs unnecessarily](https://github.com/code-423n4/2021-11-nested-findings/issues/27) _Submitted by TomFrench_\n- [[G-10] More gas efficient calculation of weights](https://github.com/code-423n4/2021-11-nested-findings/issues/28) _Submitted by GiveMeTestEther, also found by WatchPug_\n- [[G-11] Mix of external and public function visibility with the same access modifier](https://github.com/code-423n4/2021-11-nested-findings/issues/29) _Submitted by GiveMeTestEther, also found by defsec_\n- [[G-12] Move from a pull to a push pattern for sending fees to the FeeSplitter](https://github.com/code-423n4/2021-11-nested-findings/issues/34) _Submitted by TomFrench, also found by pauliax_\n- [[G-13] Store hash of `type(ZeroExStorage).creationCode` rather than recalculating it on each call](https://github.com/code-423n4/2021-11-nested-findings/issues/35) _Submitted by TomFrench_\n- [[G-14] Adding an if check to avoid unnecessary call](https://github.com/code-423n4/2021-11-nested-findings/issues/38) _Submitted by 0xngndev_\n- [[G-15] Subtraction from` totalWeights` can be done unchecked to save gas](https://github.com/code-423n4/2021-11-nested-findings/issues/46) _Submitted by GiveMeTestEther, also found by WatchPug, defsec, and pauliax_\n- [[G-16] NestedFactory: in deleteAsset and freeToken, tokens should only be declared once ](https://github.com/code-423n4/2021-11-nested-findings/issues/49) _Submitted by PierrickGT_\n- [[G-17] function mintWithMetadata() Unused](https://github.com/code-423n4/2021-11-nested-findings/issues/55) _Submitted by Meta0xNull_\n- [[G-18] _sendFees() Repeat SLOAD shareholders In Loop](https://github.com/code-423n4/2021-11-nested-findings/issues/57) _Submitted by Meta0xNull_\n- [[G-19] `removeFactory` has `==true` comparison in require statement](https://github.com/code-423n4/2021-11-nested-findings/issues/63) _Submitted by loop, also found by palina_\n- [[G-20] Remove unnecessary `balanceOf` call in `NestedBuybacker::triggerForToken`](https://github.com/code-423n4/2021-11-nested-findings/issues/65) _Submitted by pmerkleplant, also found by palina, nathaniel, WatchPug, and cmichel_\n- [[G-21] Refactor `FeeSplitter::getAmountDue` to save one variable slot](https://github.com/code-423n4/2021-11-nested-findings/issues/68) _Submitted by pmerkleplant_\n- [[G-22] Public functions can be declared external](https://github.com/code-423n4/2021-11-nested-findings/issues/72) _Submitted by palina, also found by xYrYuYx_\n- [[G-23] Gas-consuming way to add shareholders](https://github.com/code-423n4/2021-11-nested-findings/issues/81) _Submitted by palina_\n- [[G-24] WETHMock withdraw function unnecessary safe math](https://github.com/code-423n4/2021-11-nested-findings/issues/90) _Submitted by pants_\n- [[G-25] reordering struct fields](https://github.com/code-423n4/2021-11-nested-findings/issues/96) _Submitted by pants_\n- [[G-26] double reading of state variable inside a loop](https://github.com/code-423n4/2021-11-nested-findings/issues/98) _Submitted by pants_\n- [[G-27] Use existing memory version of state variables](https://github.com/code-423n4/2021-11-nested-findings/issues/102) _Submitted by ye0lde, also found by pauliax_\n- [[G-28] Use `calldata` keyword instead of `memory` keyword in function arguments](https://github.com/code-423n4/2021-11-nested-findings/issues/107) _Submitted by xYrYuYx_\n- [[G-29] Add index param to remove in function argument to reduce gas.](https://github.com/code-423n4/2021-11-nested-findings/issues/115) _Submitted by xYrYuYx_\n- [[G-30] OperatorResolver: importOperators() function redeclares local variable multiple times](https://github.com/code-423n4/2021-11-nested-findings/issues/119) _Submitted by GreyArt_\n- [[G-31] NestedRecords: Unnecessary variable in the Holding struct](https://github.com/code-423n4/2021-11-nested-findings/issues/121) _Submitted by GreyArt_\n- [[G-32] MixinOperatorResolver: variables are declared multiple times in rebuildCache()](https://github.com/code-423n4/2021-11-nested-findings/issues/122) _Submitted by GreyArt_\n- [[G-33] NestedReserve: Redundant valid token address checks](https://github.com/code-423n4/2021-11-nested-findings/issues/123) _Submitted by GreyArt_\n- [[G-34] NestedRecords: createRecord() can be made internal](https://github.com/code-423n4/2021-11-nested-findings/issues/124) _Submitted by GreyArt_\n- [[G-35] NestedRecords: createRecord()'s isActive check is redundant](https://github.com/code-423n4/2021-11-nested-findings/issues/125) _Submitted by GreyArt_\n- [[G-36] NestedRecords: createRecord() can have modifier check removed](https://github.com/code-423n4/2021-11-nested-findings/issues/126) _Submitted by GreyArt_\n- [[G-37] NestedFactory: _fromReserve param in _submitOutOrders() is redundant](https://github.com/code-423n4/2021-11-nested-findings/issues/128) _Submitted by GreyArt_\n- [[G-38] Gas Optimization: Pack struct in FeeSplitter.sol](https://github.com/code-423n4/2021-11-nested-findings/issues/146) _Submitted by gzeon_\n- [[G-39] Gas Optimization: Set allowance only when needed](https://github.com/code-423n4/2021-11-nested-findings/issues/151) _Submitted by gzeon_\n- [[G-40] Avoid unnecessary storage writes can save gas](https://github.com/code-423n4/2021-11-nested-findings/issues/162) _Submitted by WatchPug_\n- [[G-41] `NestedFactory#removeOperator()` Avoid empty items can save gas](https://github.com/code-423n4/2021-11-nested-findings/issues/170) _Submitted by WatchPug_\n- [[G-42] Adding unchecked directive can save gas](https://github.com/code-423n4/2021-11-nested-findings/issues/173) _Submitted by WatchPug, also found by xYrYuYx_\n- [[G-43] Cache and read storage variables from the stack can save gas](https://github.com/code-423n4/2021-11-nested-findings/issues/175) _Submitted by WatchPug_\n- [[G-44] Unnecessary Use of _msgSender()](https://github.com/code-423n4/2021-11-nested-findings/issues/185) _Submitted by defsec_\n- [[G-45] Small refactor for functions to save some gas](https://github.com/code-423n4/2021-11-nested-findings/issues/193) _Submitted by 0xngndev_\n- [[G-46] Check condition before calling NestedFactory._handleUnderSpending](https://github.com/code-423n4/2021-11-nested-findings/issues/198) _Submitted by hyh_\n- [[G-47] index + 1 can be simplified](https://github.com/code-423n4/2021-11-nested-findings/issues/207) _Submitted by pauliax, also found by GreyArt_\n- [[G-48] _burnNST](https://github.com/code-423n4/2021-11-nested-findings/issues/208) _Submitted by pauliax_\n- [[G-49] mintWithMetadata onlyFactory ](https://github.com/code-423n4/2021-11-nested-findings/issues/213) _Submitted by pauliax_\n- [[G-50] Unused local variables ](https://github.com/code-423n4/2021-11-nested-findings/issues/195) _Submitted by ye0lde, also found by PierrickGT, pmerkleplant, WatchPug, and hack3r-0m_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}