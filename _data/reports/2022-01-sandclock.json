{
  "circa": {
    "title": "Sandclock contest",
    "sponsor": "Sandclock",
    "slug": "2022-01-sandclock",
    "date": "2022-02-23",
    "findings": "https://github.com/code-423n4/2022-01-sandclock-findings/issues",
    "contest": 67
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Sandclock contest smart contract system written in Solidity. The code contest took place between January 6—January 12 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>36 Wardens contributed reports to the Sandclock contest:</p>\n<ol>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://camden.codes\">camden</a></li>\n<li>jayjonah8</li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/JustDravee\">Dravee</a></li>\n<li>harleythedog</li>\n<li><a href=\"https://twitter.com/KenzoAgada\">kenzo</a></li>\n<li><a href=\"https://twitter.com/liam_eastwood13\">leastwood</a></li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/HickupH\">hickuphh3</a></li>\n<li><a href=\"https://twitter.com/PalinaTolmach\">palina</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/danbinnun\">danb</a></li>\n<li><a href=\"https://twitter.com/SirH4shalot\">sirhashalot</a></li>\n<li>pedroais</li>\n<li>0x1f8b</li>\n<li>hyh</li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li><a href=\"https://twitter.com/meidhiwirara\">Tomio</a></li>\n<li>bugwriter001</li>\n<li><a href=\"https://twitter.com/shenwilly_\">shenwilly</a></li>\n<li>cccz</li>\n<li>p4st13r4 (0xb4bb4 and <a href=\"https://github.com/0x69e8\">0x69e8</a>)</li>\n<li>hubble (ksk2345 and shri4net)</li>\n<li>ACai</li>\n<li><a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a></li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/fitraldys\">Fitraldys</a></li>\n<li><a href=\"https://twitter.com/onewayfunction\">onewayfunction</a></li>\n<li>certora</li>\n<li>robee</li>\n<li><a href=\"https://tqts.ar/\">tqts</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/lsdan_defi\">LSDan</a> (ElasticDAO).</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a>, <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>, and <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 41 unique vulnerabilities and 58 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 5 received a risk rating in the category of HIGH severity, 15 received a risk rating in the category of MEDIUM severity, and 21 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 17 non-critical recommendations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-01-sandclock\">C4 Sandclock contest repository</a>, and is composed of 9 smart contracts written in the Solidity programming language and includes 1400 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-5\" style=\"position:relative;\"><a href=\"#high-risk-findings-5\" aria-label=\"high risk findings 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (5)</h1>\n<h2 id=\"h-01-forceunsponsor-may-open-a-window-for-attackers-to-manipulate-the-_totalshares-and-freeze-users-funds-at-a-certain-deposit-amount\" style=\"position:relative;\"><a href=\"#h-01-forceunsponsor-may-open-a-window-for-attackers-to-manipulate-the-_totalshares-and-freeze-users-funds-at-a-certain-deposit-amount\" aria-label=\"h 01 forceunsponsor may open a window for attackers to manipulate the _totalshares and freeze users funds at a certain deposit amount permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/168\">[H-01] <code>forceUnsponsor()</code> may open a window for attackers to manipulate the <code>_totalShares</code> and freeze users’ funds at a certain deposit amount</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L390-L401\">https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L390-L401</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_force</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">sponsorAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk11\">totalUnderlying</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">sponsorToTransfer</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">totalUnderlying</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">_force</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">sponsorToTransfer</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk11\">totalUnderlying</span><span class=\"mtk1\">(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&quot;Vault: not enough funds to unsponsor&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">totalSponsored</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">sponsorAmount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">underlying</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sponsorToTransfer</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>When <code>sponsorAmount > totalUnderlying()</code>, the contract will transfer <code>totalUnderlying()</code> to <code>sponsorToTransfer</code>, even if there are other depositors and <code>totalShares</code> > 0.</p>\n<p>After that, and before others despoiting into the Vault, the Attacker can send <code>1 wei</code> underlying token, then cal <code>deposit()</code> with 0.1 * 1e18 , since <code>newShares = (_amount * _totalShares) / _totalUnderlyingMinusSponsored</code> and <code>_totalUnderlyingMinusSponsored</code> is <code>1</code>, with a tiny amount of underlying token, <code>newShares</code> will become extremly large.</p>\n<p>As we stated in issue <a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/166\">#166</a>, when the value of <code>totalShares</code> is manipulated precisely, the attacker can plant a bomb, and the contract will not work when the deposit/withdraw amount reaches a certain value, freezing the user’s funds.</p>\n<p>However, this issue is not caused by lack of reentrancy protection, therefore it cant be solved by the same solution in issue <a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/166\">#166</a>.</p>\n<h4 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Consider adding a minimum balance reserve (eg. 1e18 Wei) that cannot be withdrawn by anyone in any case. It can be transferred in alongside with the deployment by the deployer.</p>\n<p>This should make it safe or at least make it extremely hard or expensive for the attacker to initiate such an attack.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/168#issuecomment-1012115367\">naps62 (Sandclock) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>@gabrielpoca @ryuheimat is this new?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/168#issuecomment-1012116458\">ryuheimat (Sandclock) commented</a>:</strong></p>\n<blockquote>\n<p>it’s new</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/168#issuecomment-1012269148\">gabrielpoca (Sandclock) commented</a>:</strong></p>\n<blockquote>\n<p>yap, it’s interesting. The sponsor really is an issue</p>\n</blockquote>\n<h2 id=\"h-02-withdrawers-can-get-more-value-returned-than-expected-with-reentrant-call\" style=\"position:relative;\"><a href=\"#h-02-withdrawers-can-get-more-value-returned-than-expected-with-reentrant-call\" aria-label=\"h 02 withdrawers can get more value returned than expected with reentrant call permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/32\">[H-02] Withdrawers can get more value returned than expected with reentrant call</a></h2>\n<p><em>Submitted by camden, also found by cmichel and harleythedog</em></p>\n<p>The impact of this is that users can get significantly more UST withdrawn than they would be alotted if they had done non-reentrant withdraw calls.</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Here’s an outline of the attack:</p>\n<p>Assume the vault has 100 UST in it.\nThe attacker makes two deposits of 100UST and waits for them to be withdrawable.\nThe attacker triggers a withdraw one of their deposit positions.\nThe vault code executes until it reaches this point: <a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L565\">https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L565</a>\nSince the attacker is the claimer, the vault will call back to the attacker.\nInside <code>onDepositBurned</code>, trigger another 100 UST deposit.\nSince <code>claimers.onWithdraw</code> has already been called, reducing the amount of shares, but the UST hasn’t been transferred yet, the vault will compute the amount of UST to be withdrawn based on an unexpected value for <code>_totalUnderlyingMinusSponsored</code> (300).\n<a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L618\">https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L618</a></p>\n<p>After the attack, the attacker will have significantly more than if they had withdrawn without reentrancy.</p>\n<p>Here’s my proof of concept showing a very similar exploit with <code>deposit</code>, but I think it’s enough to illustrate the point. I have a forge repo if you want to see it, just ping me on discord.\n<a href=\"https://gist.github.com/CamdenClark/abc67bc1b387c15600549f6dfd5cb27a\">https://gist.github.com/CamdenClark/abc67bc1b387c15600549f6dfd5cb27a</a></p>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Forge</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Reentrancy guards.</p>\n<p>Also, consider simplifying some of the shares logic.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/32\">ryuheimat (Sandclock) confirmed</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/32#issuecomment-1012049324\">naps62 (Sandclock) resolved</a>:</strong></p>\n<blockquote>\n<p>Fixed in <a href=\"https://github.com/sandclock-org/solidity-contracts/pull/75\">https://github.com/sandclock-org/solidity-contracts/pull/75</a></p>\n</blockquote>\n<h2 id=\"h-03-vaults-with-non-ust-underlying-asset-vulnerable-to-flash-loan-attack-on-curve-pool\" style=\"position:relative;\"><a href=\"#h-03-vaults-with-non-ust-underlying-asset-vulnerable-to-flash-loan-attack-on-curve-pool\" aria-label=\"h 03 vaults with non ust underlying asset vulnerable to flash loan attack on curve pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/7\">[H-03] Vaults with non-UST underlying asset vulnerable to flash loan attack on curve pool</a></h2>\n<p><em>Submitted by camden, also found by cccz, cmichel, danb, defsec, harleythedog, hyh, kenzo, leastwood, palina, pauliax, pmerkleplant, Ruhum, WatchPug, and ye0lde</em></p>\n<p>In short, the <code>NonUSTStrategy</code> is vulnerable to attacks by flash loans on curve pools.</p>\n<p>Here’s an outline of the attack:</p>\n<ul>\n<li>Assume there is a vault with DAI underlying and a <code>NonUSTStrategy</code> with a DAI / UST curve pool</li>\n<li>Take out a flash loan of DAI</li>\n<li>Exchange a ton of DAI for UST</li>\n<li>The exchange rate from DAI to UST has gone up (!!)</li>\n<li>Withdraw or deposit from vault with more favorable terms than market</li>\n<li>Transfer back UST to DAI</li>\n<li>Repay flash loan</li>\n</ul>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Here is my proof of concept:\n<a href=\"https://gist.github.com/CamdenClark/932d5fbeecb963d0917cb1321f754132\">https://gist.github.com/CamdenClark/932d5fbeecb963d0917cb1321f754132</a></p>\n<p>I can provide a full forge repo. Just ping me on discord.</p>\n<p>Exploiting this line: <a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/NonUSTStrategy.sol#L135\">https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/NonUSTStrategy.sol#L135</a></p>\n<h4 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Forge</p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use an oracle</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/7\">naps62 (Sandclock) confirmed</a></strong> </p>\n<h2 id=\"h-04-deposit-function-is-open-to-reentrancy-attacks\" style=\"position:relative;\"><a href=\"#h-04-deposit-function-is-open-to-reentrancy-attacks\" aria-label=\"h 04 deposit function is open to reentrancy attacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/3\">[H-04] deposit() function is open to reentrancy attacks</a></h2>\n<p><em>Submitted by jayjonah8, also found by bugwriter001, camden, cccz, cmichel, danb, defsec, Fitraldys, harleythedog, hickuphh3, jayjonah8, kenzo, leastwood, onewayfunction, pedroais, and WatchPug</em></p>\n<p>In <code>Vault.sol</code> the <code>deposit()</code> function is left wide open to reentrancy attacks.  The function eventually calls <code>\\_createDeposit() => \\_createClaim()</code> which calls <code>depositors.mint()</code> which will then mint an NFT.  When the NFT is minted the sender will receive a callback which can then be used to call the <code>deposit()</code> function again before execution is finished.  An attacker can do this minting multiple NFT’s for themselves.  <code>claimers.mint()</code> is also called in the same function which can also be used to call back into the deposit function before execution is complete.  Since there are several state updates before and after NFT’s are minted this can be used to further manipulate the protocol like with <code>newShares</code> which is called before minting.  This is not counting what an attacker can do with cross function reentrancy entering into several other protocol functions (like withdraw) before code execution is complete further manipulating the system.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L160\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L160</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L470\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L470</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L476\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L476</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Reentrancy guard modifiers should be placed on the <code>deposit()</code>, <code>withdraw()</code> and all other important protocol functions to prevent devastating attacks.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/3\">ryuheimat (Sandclock) confirmed</a></strong></p>\n<h2 id=\"h-05-sponsor-function-in-open-to-reentrancy-attacks\" style=\"position:relative;\"><a href=\"#h-05-sponsor-function-in-open-to-reentrancy-attacks\" aria-label=\"h 05 sponsor function in open to reentrancy attacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/4\">[H-05] sponsor() function in open to reentrancy attacks</a></h2>\n<p><em>Submitted by jayjonah8, also found by camden</em></p>\n<p>In <code>Vault.sol</code> the <code>sponsor()</code> function does not have a reentrancy guard allowing an attacker to reenter the function because the <code>depositors.mint()</code> function has as callback to the msg.sender.  Since there are state updates after the call to <code>depositors.mint()</code> function this is especially dangerous.  An attacker can make it so the totalSponsored amount is only updated once after calling <code>mint()</code> several times since the update takes place after the callback.  The same will be true for the Sponsored event that is emitted.</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L244\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L244</a></p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>A reentrancy guard modifier should be added to the sponsor() function in Vault.sol</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/4#issuecomment-1012049429\">naps62 (Sandclock) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p>Fixed in <a href=\"https://github.com/sandclock-org/solidity-contracts/pull/75\">https://github.com/sandclock-org/solidity-contracts/pull/75</a></p>\n</blockquote>\n<h1 id=\"medium-risk-findings-15\" style=\"position:relative;\"><a href=\"#medium-risk-findings-15\" aria-label=\"medium risk findings 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (15)</h1>\n<h2 id=\"m-01-late-users-will-take-more-losses-than-expected-when-the-underlying-contract-ethanchor-suffers-investment-losses\" style=\"position:relative;\"><a href=\"#m-01-late-users-will-take-more-losses-than-expected-when-the-underlying-contract-ethanchor-suffers-investment-losses\" aria-label=\"m 01 late users will take more losses than expected when the underlying contract ethanchor suffers investment losses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/156\">[M-01] Late users will take more losses than expected when the underlying contract (<code>EthAnchor</code>) suffers investment losses</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>Even though it’s unlikely in practice, but in theory, the underlying contract (<code>EthAnchor</code>) may suffer investment losses and causing decreasing of the PPS of AUST token. (There are codes that considered this situation in the codebase. eg. handling of <code>depositShares > claimerShares</code>).</p>\n<p>However, when this happens, the late users will suffer more losses than expected than the users that withdraw earlier. The last few users may lose all their funds while the first users can get back 100% of their deposits.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// ### for deposits: d1, d2, d3, the beneficiary are: c1, c2, c2</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    depositAmount          claimerShares</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">d1: + 100e18           c1: + 100e36</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">d2: + 100e18           c2: + 100e36</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">d3: + 100e18           c2: + 100e36</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">depositAmount of d1, d2, d3 = 100e18</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">c1 claimerShares: 100e36</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">c2 claimerShares: 200e36</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">total shares: 300e36</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// ### when the PPS of AUST drop by 50% </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">totalUnderlyingMinusSponsored: 300e18 -&gt; 150e18</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// ### d2 withdraw</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">c2 claimerShares: 200e36</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">d2 depositAmount: 100e18</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">d2 depositShares: 300e36 * 100e18 / 150e18 = 200e36</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Shares to reduce: 200e36</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">c2 claimerShares: 200e36 -&gt; 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">c2 totalPrincipal: 200e18 -&gt; 100e18</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">totalShares: 300e36 -&gt; 100e36</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">underlying.safeTransfer(d2, 100e18)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">totalUnderlyingMinusSponsored: 150e18 -&gt; 50e18</span></span></code></pre>\n<h4 id=\"root-cause\" style=\"position:relative;\"><a href=\"#root-cause\" aria-label=\"root cause permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Cause</h4>\n<p>When the strategy is losing money, <code>share / underlying</code> increases, therefore the computed <code>depositShares</code>: <code>depositAmount * share / underlying</code> will increase unexpectedly.</p>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L544-L548\">https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L544-L548</a></p>\n<p>While <code>totalShares</code> remain unchanged, but the computed <code>depositShares</code> is increasing, causing distortion of <code>depositShares / totalShares</code>, eg, <code>∑ depositShares > totalShares</code>.</p>\n<h4 id=\"recommendation-1\" style=\"position:relative;\"><a href=\"#recommendation-1\" aria-label=\"recommendation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>In order to properly handle the investment loss of the strategy, consider adding a new storage variable called <code>totalLoss</code> to maintain a stable value of <code>share / adjustedUnderlying</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">adjustedUnderlying</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">underlying</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">totalLoss</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/156\">CrisBRM (Sandclock) confirmed and disagreed with severity</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/156#issuecomment-1023095624\">dmvt (judge) changed severity and commented</a>:</strong></p>\n<blockquote>\n<p>This is a classic medium risk when using the definition provided by Code4rena:</p>\n<p><code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<h2 id=\"m-02-nonuststrategysol-improper-handling-of-swap-fees-allows-attacker-to-steal-funds-from-other-users\" style=\"position:relative;\"><a href=\"#m-02-nonuststrategysol-improper-handling-of-swap-fees-allows-attacker-to-steal-funds-from-other-users\" aria-label=\"m 02 nonuststrategysol improper handling of swap fees allows attacker to steal funds from other users permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/158\">[M-02] <code>NonUSTStrategy.sol</code> Improper handling of swap fees allows attacker to steal funds from other users</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/NonUSTStrategy.sol#L66-L69\">https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/NonUSTStrategy.sol#L66-L69</a></p>\n<p><code>NonUSTStrategy</code> will swap the deposited non-UST assets into UST before depositing to EthAnchor. However, the swap fee is not attributed to the depositor correctly like many other yield farming vaults involving swaps (<code>ZapIn</code>).</p>\n<p>An attacker can exploit it for the swap fees paid by other users by taking a majority share of the liquidity pool.</p>\n<h4 id=\"root-cause-1\" style=\"position:relative;\"><a href=\"#root-cause-1\" aria-label=\"root cause 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Root Cause</h4>\n<p>The swap fee of depositing is not paid by the depositor but evenly distributed among all users.</p>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Given:</p>\n<ul>\n<li>A NonUST vault and strategy is created for <code>FRAX</code>;</li>\n<li>The liquidity in FRAX-UST curve pool is relatively small (&#x3C;$1M).</li>\n</ul>\n<p>The attacker can do the following:</p>\n<ol>\n<li>Add $1M worth of liquidity to the FRAX-UST curve pool, get >50% share of the pool;</li>\n<li>Deposit 1M FRAX to the vault, get a <code>depositAmount</code> of 1M;</li>\n<li>The strategy will swap 1M FRAX to UST via the curve pool, paying a certain amount of swap fee;</li>\n<li>Withdraw all the funds from the vault.</li>\n<li>Remove the liquidity added in step 1, profit from the swap fee. (A majority portion of the swap fee paid in step 3 can be retrieved by the attacker as the attacker is the majority liquidity provider.)</li>\n</ol>\n<p>If the vault happens to have enough balance (from a recent depositor), the attacker can now receive 1M of FRAX.</p>\n<p>A more associated attacker may combine this with issue <a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/160\">#160</a> and initiate a sandwich attack in step 3 to get even higher profits.</p>\n<p>As a result, all other users will suffer fund loss as the swap fee is essentially covered by other users.</p>\n<h4 id=\"recommendation-2\" style=\"position:relative;\"><a href=\"#recommendation-2\" aria-label=\"recommendation 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Consider changing the way new shares are issued:</p>\n<ol>\n<li>Swap from Vault asset (eg. FRAX) to UST in <code>deposit()</code>;</li>\n<li>Using the UST amount out / total underlying UST for the amount of new shares issued to the depositor.</li>\n</ol>\n<p>In essence, the depositor should be paying for the swap fee and slippage.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/158#issuecomment-1012221473\">CrisBRM (Sandclock) confirmed and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>This is only an issue if we support low liquidity Curve pools\nWe are also adding slippage control as per some other issue which would cause massive transfers using low liquidity pools to revert, fully mitigating this.\nLikelihood of this happening would also be quite low given that profitability would go down tremendously as curve LPs would move to that pool in order to capture higher base fees, dissuading the attacker from continuing.</p>\n<p>That being said, I do agree that the curve swap fee (0.04%) should be paid by each individual depositor.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/158#issuecomment-1023099964\">dmvt (judge) changed severity and commented</a>:</strong></p>\n<blockquote>\n<p>This requires a number of external factors to line up just right. It is a medium risk according to the definition provided by Code4rena.</p>\n<p><code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<h2 id=\"m-03-centralization-risk-funds-can-be-frozen-when-critical-key-holders-lose-access-to-their-keys\" style=\"position:relative;\"><a href=\"#m-03-centralization-risk-funds-can-be-frozen-when-critical-key-holders-lose-access-to-their-keys\" aria-label=\"m 03 centralization risk funds can be frozen when critical key holders lose access to their keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/165\">[M-03] Centralization Risk: Funds can be frozen when critical key holders lose access to their keys</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>The current implementation requires trusted key holders (<code>isTrusted[msg.sender]</code>) to send transactions (<code>initRedeemStable()</code>) to initialize withdrawals from <code>EthAnchor</code> before the users can withdraw funds from the contract.</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/BaseStrategy.sol#L214-L223\">https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/BaseStrategy.sol#L214-L223</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/BaseStrategy.sol#L163-L170\">https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/BaseStrategy.sol#L163-L170</a></li>\n</ul>\n<p>This introduces a high centralization risk, which can cause funds to be frozen in the contract if the key holders lose access to their keys.</p>\n<h4 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Given:</p>\n<ul>\n<li><code>investPerc</code> = 80%</li>\n<li>1,000 users deposited 1M UST in total ($1000 each user in avg), 800k invested into AUST (<code>EthAnchor</code>)</li>\n</ul>\n<p>If the key holders lose access to their keys (“hit by a bus”). The 800k will be frozen in <code>EthAnchor</code> as no one can <code>initRedeemStable()</code>.</p>\n<h4 id=\"recommendation-3\" style=\"position:relative;\"><a href=\"#recommendation-3\" aria-label=\"recommendation 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>See the recommendation on issue <a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/157\">#157</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/165#issuecomment-1012218046\">CrisBRM (Sandclock) confirmed and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Agree that there should be a way for users to call the uninvest functions themselves, subject to certain rules. Again, not sure I agree with the severity given the likelihood of the event transpiring.</p>\n<p>Consensus is for UST vaults, allow depositors to call uninvest. For nonUST vaults that pay per curve swap, add trusted multisig instead of just the backend’s EOA.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/165#issuecomment-1023107965\">dmvt (judge) changed severity and commented</a>:</strong></p>\n<blockquote>\n<p>This issue requires external factors to align in a very negative way, but it would result in a potentially significant loss of funds. Because there is no direct attack path, it doesn’t qualify as a high risk issue, but a medium risk per Code4rena definitions.</p>\n<p><code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<h2 id=\"m-04-unsponsor-claimyield-and-withdraw-might-fail-unexpectedly\" style=\"position:relative;\"><a href=\"#m-04-unsponsor-claimyield-and-withdraw-might-fail-unexpectedly\" aria-label=\"m 04 unsponsor claimyield and withdraw might fail unexpectedly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/76\">[M-04] unsponsor, claimYield and withdraw might fail unexpectedly</a></h2>\n<p><em>Submitted by danb, also found by ACai, cmichel, harleythedog, leastwood, palina, pedroais, and WatchPug</em></p>\n<p><code>totalUnderlying()</code> includes the invested assets, they are not in the contract balance.</p>\n<p>when a user calls withdraw, claimYield or unsponsor, the system might not have enough assets in the balance and the transfer would fail.</p>\n<p>especially, force unsponsor will always fail, because it tries to transfer the entire <code>totalUnderlying()</code>, which the system doesn’t have:</p>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L391\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L391</a></p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>when the system doesn’t have enough balance to make the transfer, withdraw from the strategy.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/76#issuecomment-1010881903\">gabrielpoca (Sandclock) confirmed</a>:</strong></p>\n<blockquote>\n<p>I’m not sure this is an issue. We are aware of it, and redeeming from the strategy won’t fix it because it is asynchronous. This is why we have an investment percentage.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/76#issuecomment-1023191389\">dmvt (judge) changed severity and commented</a>:</strong></p>\n<blockquote>\n<p>This one is a hard issue to size, but I’m going to go with the medium risk rating provided by other wardens reporting this issue. This seems to amount to a bank run like issue similar to what can happen with DeFi lending protocols.</p>\n<p><code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n<p>If the invested assets are compromised or locked, this could result in a loss of funds. Users of the protocol should be made aware of the risk. This risk exists with many DeFi protocols and probably shouldn’t be a surprise to most users.</p>\n</blockquote>\n<h2 id=\"m-05-add-a-timelock-to-basestrategysetperffeepct\" style=\"position:relative;\"><a href=\"#m-05-add-a-timelock-to-basestrategysetperffeepct\" aria-label=\"m 05 add a timelock to basestrategysetperffeepct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/178\">[M-05] Add a timelock to <code>BaseStrategy:setPerfFeePct</code></a></h2>\n<p><em>Submitted by Dravee</em></p>\n<p>To give more trust to users: functions that set key/critical variables should be put behind a timelock.</p>\n<h4 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L249-L253\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L249-L253</a></p>\n<h4 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>VS Code</p>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a timelock to setter functions of key/critical variables.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/178#issuecomment-1015430589\">naps62 (Sandclock) acknowledged</a>:</strong></p>\n<blockquote>\n<p>While this is a valid suggestion, it doesn’t necessarily indicate a vulnerability in the existing approach. A timelock can indeed increase trust, but it never truly eliminates the same risk (i.e.: once the timelock finishes, the same theoretical attacks from a malicious operator could happen anyway)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/178#issuecomment-1024395152\">ryuheimat (Sandclock) commented</a>:</strong></p>\n<blockquote>\n<p>We will set admin as a timelock</p>\n</blockquote>\n<h2 id=\"m-06-totalunderlyingminussponsored-may-revert-on-underflow-and-malfunction-the-contract\" style=\"position:relative;\"><a href=\"#m-06-totalunderlyingminussponsored-may-revert-on-underflow-and-malfunction-the-contract\" aria-label=\"m 06 totalunderlyingminussponsored may revert on underflow and malfunction the contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/164\">[M-06] <code>totalUnderlyingMinusSponsored()</code> may revert on underflow and malfunction the contract</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L290-L293\">https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L290-L293</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">totalUnderlyingMinusSponsored</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// TODO no invested amount yet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">totalUnderlying</span><span class=\"mtk1\">() - </span><span class=\"mtk12\">totalSponsored</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>As a function that many other functions depended on, <code>totalUnderlyingMinusSponsored()</code> can revert on underflow when  <code>sponsorAmount > totalUnderlying()</code> which is possible and has been considered elsewhere in this contract:</p>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L390-L392\">https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L390-L392</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_force</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">sponsorAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk11\">totalUnderlying</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">sponsorToTransfer</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">totalUnderlying</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li>Underlying token = USDT</li>\n<li>Swap Fee = 0.04%</li>\n<li>Sponsor call <code>sponsor()</code> and send 10,000 USDT</li>\n<li>totalSponsored = 10,000</li>\n<li><code>NonUSTStrategy.sol#doHardWork()</code> swapped USDT for UST</li>\n<li>pendingDeposits = 9,996</li>\n<li>totalUnderlying() = 9,996</li>\n<li>Alice tries to call <code>deposit()</code>, the tx will revet due to underflow in <code>totalUnderlyingMinusSponsored()</code>.</li>\n</ul>\n<h4 id=\"recommendation-4\" style=\"position:relative;\"><a href=\"#recommendation-4\" aria-label=\"recommendation 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">totalUnderlyingMinusSponsored</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_totalUnderlying</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">totalUnderlying</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">totalSponsored</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">_totalUnderlying</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_totalUnderlying</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">totalSponsored</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/164\">naps62 (Sandclock) confirmed</a></strong></p>\n<h2 id=\"m-07-vault-cant-receive-deposits-if-underlying-token-charges-fees-on-transfer\" style=\"position:relative;\"><a href=\"#m-07-vault-cant-receive-deposits-if-underlying-token-charges-fees-on-transfer\" aria-label=\"m 07 vault cant receive deposits if underlying token charges fees on transfer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/55\">[M-07] Vault can’t receive deposits if underlying token charges fees on transfer</a></h2>\n<p><em>Submitted by Ruhum, also found by harleythedog, Tomio, and WatchPug</em></p>\n<p>Some ERC20 tokens charge a fee for every transfer. If the underlying token of a vault is such a token any deposit to the protocol will fail.</p>\n<p>Some tokens have the possibility of adding fees later on, e.g. USDT. So those have to be covered too.</p>\n<p>Generally, the user would also receive fewer tokens on withdrawing in such a scenario but that’s not the protocol’s fault.</p>\n<p>I rated the issue as medium since part of the protocol become unavailable in such a situation.</p>\n<h4 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L583-L585\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L583-L585</a></p>\n<p><code>_transferAndCheckUnderlying()</code> is used to deposit and sponsor the vault. It checks that after a <code>safeTransferFrom()</code> the same exact amount is sent to the balance of the vault. But, if fees are enabled the values won’t match, causing the function to revert. Thus, it won’t be able to deposit or sponsor the vault in any way.</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L162\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L162</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L266\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L266</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>One possibility would be to simply not use ERC20 tokens with fees.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/55#issuecomment-1010086346\">ryuheimat (Sandclock) disputed</a>:</strong></p>\n<blockquote>\n<p>We don’t use tokens with fees</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/55#issuecomment-1010244557\">naps62 (Sandclock) commented</a>:</strong></p>\n<blockquote>\n<p>The only place where we mention USDT is on an old pitch deck (not up to date anymore). The codebase itself doesn’t mention it, and all tests are done with USDC and DAI as examples</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/55#issuecomment-1023697029\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m going to let this issue stand given that #164 is also valid. Supported or not, fee on transfer tokens would cause a loss of funds in the scenario described. As the USDT example shows (in both issues), many stables can be upgraded and add a fee later.</p>\n</blockquote>\n<h2 id=\"m-08-medium-consider-alternative-price-feed--ensure-_minlockperiod--0-to-prevent-flash-loan-attacks\" style=\"position:relative;\"><a href=\"#m-08-medium-consider-alternative-price-feed--ensure-_minlockperiod--0-to-prevent-flash-loan-attacks\" aria-label=\"m 08 medium consider alternative price feed  ensure _minlockperiod  0 to prevent flash loan attacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/150\">[M-08] Medium: Consider alternative price feed + ensure _minLockPeriod > 0 to prevent flash loan attacks</a></h2>\n<p><em>Submitted by hickuphh3, also found by 0x1f8b</em></p>\n<p>It is critical to ensure that <code>_minLockPeriod > 0</code> because it is immutable and cannot be changed once set. A zero <code>minLockPeriod</code> will allow for flash loan attacks to occur. Vaults utilising the nonUST strategy are especially susceptible to this attack vector since the strategy utilises the spot price of the pool to calculate the total asset value.</p>\n<h4 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Assume the vault’s underlying token is MIM, and the curve pool to be used is the MIM-UST pool. Further assume that both the vault and the strategy holds substantial funds in MIM and UST respectively.</p>\n<ol>\n<li>Flash loan MIM from the <a href=\"https://etherscan.io/address/0x298b7c5e0770d151e4c5cf6cca4dae3a3ffc8e27\">Uniswap V3 MIM-USDC pool</a> (currently has ~$3.5M in MIM at the time of writing).</li>\n<li>Convert half of the loaned MIM to UST to inflate and deflate their prices respectively.</li>\n<li>Deposit the other half of the loaned MIM into the vault. We expect <code>curvePool.get_dy_underlying(ustI, underlyingI, ustAssets);</code> to return a smaller amount than expected because of the previous step. As a result, the attacker is allocated more shares than expected.</li>\n<li>Exchange UST back to MIM, bringing back the spot price of MIM-UST to a normal level.</li>\n<li>Withdraw funds from the vault. The number of shares to be deducted is lower as a result of (4), with the profit being accounted for as yield.</li>\n<li>Claim yield and repay the flash loan.</li>\n</ol>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Ensure that <code>_minLockPeriod</code> is non-zero in the constructor. Also, given how manipulatable the spot price of the pool can be, it would be wise to consider an alternative price feed.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// in Vault#constructor</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_minLockPeriod</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;zero minLockPeriod&#39;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/65#issuecomment-1011081419\">ryuheimat (Sandclock) disputed</a>:</strong></p>\n<blockquote>\n<p>we don’t think it’s an issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/65#issuecomment-1023663287\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>This does potentially open assets up to flash loan risk. It is probably a good idea to have this variable guarded.</p>\n</blockquote>\n<h2 id=\"m-09-no-use-of-safemint-as-safe-guard-for-users-\" style=\"position:relative;\"><a href=\"#m-09-no-use-of-safemint-as-safe-guard-for-users-\" aria-label=\"m 09 no use of safemint as safe guard for users  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/29\">[M-09] no use of safeMint() as safe guard for users </a></h2>\n<p><em>Submitted by jayjonah8, also found by bugwriter001, camden, palina, and sirhashalot</em></p>\n<p>In <code>Vault.sol</code> the <code>deposit()</code> function eventually calls claimers.mint() and depositers.mint().  Calling mint this way does not ensure that the receiver of the NFT is able to accept them.  <code>\\_safeMint()</code> should be used with reentrancy guards as a guard to protect the user as it checks to see if a user can properly accept an NFT and reverts otherwise.</p>\n<h4 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L470\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L470</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L256\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L256</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L248\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L248</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use <code>\\_safeMint()</code> instead of <code>mint()</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/29#issuecomment-1007534909\">ryuheimat (Sandclock) disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>I think _safeMint check if the recipient contract is able to accept NFT, it does not involves any issues.\nHowever we will use _safeMint.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/29#issuecomment-1010895318\">gabrielpoca (Sandclock) commented</a>:</strong></p>\n<blockquote>\n<p>@ryuheimat this is a non-issue. The mint functions called in the Vault’s deposit function are implemented by us, they just happen to be called mint.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/29#issuecomment-1024220647\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The Depositors contract does use <code>_safeMint</code>, but the Claimers contract does not.</p>\n<p>See:\n<a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/vault/Claimers.sol#L63\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/vault/Claimers.sol#L63</a>\n<a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/vault/Depositors.sol#L53\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/vault/Depositors.sol#L53</a></p>\n<p>The <code>deposit</code> function on Vault also appears to lack reentrancy guards. The issue is valid and should be addressed, despite the fact that the warden clearly did not look at the Depositors contract to see that it already used <code>_safeMint</code>. </p>\n</blockquote>\n<h2 id=\"m-10-no-setter-for-exchangeratefeeder-whose-address-might-change-in-future\" style=\"position:relative;\"><a href=\"#m-10-no-setter-for-exchangeratefeeder-whose-address-might-change-in-future\" aria-label=\"m 10 no setter for exchangeratefeeder whose address might change in future permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/71\">[M-10] No setter for exchangeRateFeeder, whose address might change in future</a></h2>\n<p><em>Submitted by kenzo</em></p>\n<p>EthAnchor’s docs state that “the contract address of ExchangeRateFeeder may change as adjustments occur”.\nBaseStrategy does not have a setter to change exchangeRateFeeder after deployment.</p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Inaccurate/unupdated values from exchangeRateFeeder when calculating vault’s total invested assets.</p>\n<p>While the strategy’s funds could be withdrawn from EthAnchor and migrated to a new strategy with correct exchangeRateFeeder, during this process (which might take time due to EthAnchor’s async model) the wrong exchangeRateFeeder will be used to calculate the vault’s total invested assets. (The vault’s various actions (deposit, claim, withdraw) can not be paused.)</p>\n<h4 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The exchangeRateFeeder is being used to calculate the vault’s invested assets, which is used extensively to calculate the correct amount of shares and amounts: <a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L275\">(Code ref)</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">investedAssets</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IStrategy</span><span class=\"mtk1\">) </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">underlyingBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getUnderlyingBalance</span><span class=\"mtk1\">() + </span><span class=\"mtk12\">pendingDeposits</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">aUstBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getAUstBalance</span><span class=\"mtk1\">() + </span><span class=\"mtk12\">pendingRedeems</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">underlyingBalance</span><span class=\"mtk1\"> + ((</span><span class=\"mtk12\">exchangeRateFeeder</span><span class=\"mtk1\">.</span><span class=\"mtk11\">exchangeRateOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">aUstToken</span><span class=\"mtk1\">), </span><span class=\"mtk4\">true</span><span class=\"mtk1\">) </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            * </span><span class=\"mtk12\">aUstBalance</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>EthAnchor documentation states that unlike other contracts, exchangeRateFeeder is not proxied and it’s address may change in future: “the contract address of ExchangeRateFeeder may change as adjustments occur.\n” <a href=\"https://docs.anchorprotocol.com/ethanchor/ethanchor-contracts/deployed-contracts#core-contracts\">(ref)</a></p>\n<h4 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a setter for exchangeRateFeeder.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/71\">ryuheimat (Sandclock) confirmed</a></strong> </p>\n<h2 id=\"m-11-changing-a-strategy-can-be-bricked\" style=\"position:relative;\"><a href=\"#m-11-changing-a-strategy-can-be-bricked\" aria-label=\"m 11 changing a strategy can be bricked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/91\">[M-11] Changing a strategy can be bricked</a></h2>\n<p><em>Submitted by kenzo, also found by danb and harleythedog</em></p>\n<p>A vault wouldn’t let the strategy be changed unless the strategy holds no funds.</p>\n<p>Since anybody can send funds to the strategy, a griefing attack is possible.</p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Strategy couldn’t be changed.</p>\n<h4 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><code>setStrategy</code> requires <code>strategy.investedAssets() == 0</code>. <a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L113:#L116\">(Code ref)</a>\n<code>investedAssets</code> contains the aUST balance and the pending redeems: <a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L271\">(Code ref)</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 aUstBalance = _getAUstBalance() + pendingRedeems;</span></span></code></pre>\n<p>So if a griefer sends 1 wei of aUST to the strategy before it is to be replaced, it would not be able to be replaced. The protocol would then need to redeem the aUST and wait for the process to finish - and the griefer can repeat his griefing. As they say, griefers gonna grief.</p>\n<h4 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider keeping an internal aUST balance of the strategy, which will be updated upon deposit and redeem, and use it (instead of raw aUST balance) to check if the strategy holds no aUST funds.</p>\n<p>Another option is to add capability for the strategy to send the aUST to the vault.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/91\">ryuheimat (Sandclock) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/91#issuecomment-1008980524\">CloudEllie (C4) commented</a>:</strong></p>\n<blockquote>\n<p>Warden kenzo requested that I add the following: </p>\n<p>“Additionally, impact-wise: EthAnchor does not accept redeems of less than 10 aUST. This means that if a griefer only sends 1 wei aUST, the protocol would have to repeatedly send additional aUST to the strategy to be able to redeem the griefer’s aUST.”</p>\n</blockquote>\n<h2 id=\"m-12-investedassets-does-not-take-into-consideration-the-performance-fee-charged-on-strategy-withdrawals\" style=\"position:relative;\"><a href=\"#m-12-investedassets-does-not-take-into-consideration-the-performance-fee-charged-on-strategy-withdrawals\" aria-label=\"m 12 investedassets does not take into consideration the performance fee charged on strategy withdrawals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/66\">[M-12] <code>investedAssets()</code> Does Not Take Into Consideration The Performance Fee Charged On Strategy Withdrawals</a></h2>\n<p><em>Submitted by leastwood, also found by danb</em></p>\n<p>The <code>investedAssets()</code> function is implemented by the vault’s strategy contracts as a way to express a vault’s investments in terms of the underlying currency. While the implementation of this function in <code>BaseStrategy.sol</code> and <code>NonUSTStrategy.sol</code> is mostly correct. It does not account for the performance fee charged by the treasury as shown in <code>finishRedeemStable()</code>.</p>\n<p>Therefore, an attacker could avoid paying their fair share of the performance fee by withdrawing their assets before several calls to <code>finishRedeemStable()</code> are made and reenter the vault once the fee is charged.</p>\n<h4 id=\"proof-of-concept-14\" style=\"position:relative;\"><a href=\"#proof-of-concept-14\" aria-label=\"proof of concept 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L180-L204\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L180-L204</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">finishRedeemStable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">idx</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">redeemOperations</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">idx</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;not running&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Operation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operation</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">redeemOperations</span><span class=\"mtk1\">[</span><span class=\"mtk12\">idx</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">aUstBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getAUstBalance</span><span class=\"mtk1\">() + </span><span class=\"mtk12\">pendingRedeems</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">originalUst</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">convertedUst</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">aUstBalance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ustBalanceBefore</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getUstBalance</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ethAnchorRouter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">finishRedeemStable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">operation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">redeemedAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getUstBalance</span><span class=\"mtk1\">() - </span><span class=\"mtk12\">ustBalanceBefore</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">perfFee</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">redeemedAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">originalUst</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ? (</span><span class=\"mtk12\">redeemedAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">originalUst</span><span class=\"mtk1\">).</span><span class=\"mtk11\">percOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">perfFeePct</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        : </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">perfFee</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">ustToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">treasury</span><span class=\"mtk1\">, </span><span class=\"mtk12\">perfFee</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">PerfFeeClaimed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">perfFee</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">convertedUst</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">originalUst</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pendingRedeems</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">operator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">redeemOperations</span><span class=\"mtk1\">[</span><span class=\"mtk12\">redeemOperations</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .</span><span class=\"mtk12\">operator</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">redeemOperations</span><span class=\"mtk1\">[</span><span class=\"mtk12\">redeemOperations</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">redeemOperations</span><span class=\"mtk1\">.</span><span class=\"mtk11\">pop</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L263-L277\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L263-L277</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">investedAssets</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">virtual</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">override</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IStrategy</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">underlyingBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getUnderlyingBalance</span><span class=\"mtk1\">() + </span><span class=\"mtk12\">pendingDeposits</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">aUstBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getAUstBalance</span><span class=\"mtk1\">() + </span><span class=\"mtk12\">pendingRedeems</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">underlyingBalance</span><span class=\"mtk1\"> +</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ((</span><span class=\"mtk12\">exchangeRateFeeder</span><span class=\"mtk1\">.</span><span class=\"mtk11\">exchangeRateOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">aUstToken</span><span class=\"mtk1\">), </span><span class=\"mtk4\">true</span><span class=\"mtk1\">) *</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">aUstBalance</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/NonUSTStrategy.sol#L120-L136\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/NonUSTStrategy.sol#L120-L136</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">investedAssets</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">override</span><span class=\"mtk1\">(</span><span class=\"mtk12\">BaseStrategy</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">underlyingBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getUnderlyingBalance</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">aUstBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getAUstBalance</span><span class=\"mtk1\">() + </span><span class=\"mtk12\">pendingRedeems</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ustAssets</span><span class=\"mtk1\"> = ((</span><span class=\"mtk12\">exchangeRateFeeder</span><span class=\"mtk1\">.</span><span class=\"mtk11\">exchangeRateOf</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">aUstToken</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) * </span><span class=\"mtk12\">aUstBalance</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">) + </span><span class=\"mtk12\">pendingDeposits</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">underlyingBalance</span><span class=\"mtk1\"> +</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">curvePool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">get_dy_underlying</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ustI</span><span class=\"mtk1\">, </span><span class=\"mtk12\">underlyingI</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ustAssets</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"tools-used-3\" style=\"position:relative;\"><a href=\"#tools-used-3\" aria-label=\"tools used 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.\nDiscussions with the Sandclock team (mostly Ryuhei).</p>\n<h4 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>When calculating the <code>investedAssets()</code> amount (expressed in the underlying currency), consider calculating the expected performance fee to be charged if all the strategy’s assets are withdrawn from the Anchor protocol. This should ensure that <code>investedAssets()</code> returns the most accurate amount, preventing users from gaming the protocol.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/66\">ryuheimat (Sandclock) confirmed</a></strong> </p>\n<h2 id=\"m-13-incompatibility-with-rebasingdeflationaryinflationary-tokens\" style=\"position:relative;\"><a href=\"#m-13-incompatibility-with-rebasingdeflationaryinflationary-tokens\" aria-label=\"m 13 incompatibility with rebasingdeflationaryinflationary tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/179\">[M-13] Incompatibility With Rebasing/Deflationary/Inflationary tokens</a></h2>\n<p><em>Submitted by defsec</em></p>\n<p>The Strategy contracts do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.</p>\n<h4 id=\"proof-of-concept-15\" style=\"position:relative;\"><a href=\"#proof-of-concept-15\" aria-label=\"proof of concept 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L239\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L239</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L221\">https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L221</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<ul>\n<li>Make sure token vault accounts for any rebasing/inflation/deflation</li>\n<li>Add support in contracts for such tokens before accepting user-supplied tokens</li>\n<li>Consider to check before/after balance on the vault.</li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/179#issuecomment-1012485483\">naps62 (Sandclock) disputed</a>:</strong></p>\n<blockquote>\n<p>we did not intend to support those currencies in the first place</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/179#issuecomment-1024341741\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>As with issues #55 and #164, this oversight can cause a loss of funds and therefor constitutes a medium risk. Simply saying you don’t support something does not mean that thing doesn’t exist or won’t cause a vulnerability in the future.</p>\n</blockquote>\n<h2 id=\"m-14-a-single-malicious-trusted-account-can-takeover-parent-contract\" style=\"position:relative;\"><a href=\"#m-14-a-single-malicious-trusted-account-can-takeover-parent-contract\" aria-label=\"m 14 a single malicious trusted account can takeover parent contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/132\">[M-14] A Single Malicious Trusted Account Can Takeover Parent Contract</a></h2>\n<p><em>Submitted by leastwood, also found by hickuphh3</em></p>\n<p>The <code>requiresTrust()</code> modifier is used on the strategy, vault and factory contracts to prevent unauthorised accounts from calling restricted functions. Once an account is considered trusted, they are allowed to add and remove accounts by calling <code>setIsTrusted()</code> as they see fit.</p>\n<p>However, if any single account has its private keys compromised or decides to become malicious on their own, they can remove all other trusted accounts from the <code>isTrusted</code> mapping. As a result, they are effectively able to take over the trusted group that controls all restricted functions in the parent contract.</p>\n<h4 id=\"proof-of-concept-16\" style=\"position:relative;\"><a href=\"#proof-of-concept-16\" aria-label=\"proof of concept 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">abstract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Trust</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">UserTrustUpdated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">trusted</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isTrusted</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">initialUser</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">isTrusted</span><span class=\"mtk1\">[</span><span class=\"mtk12\">initialUser</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">UserTrustUpdated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">initialUser</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setIsTrusted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">trusted</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">requiresTrust</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">isTrusted</span><span class=\"mtk1\">[</span><span class=\"mtk12\">user</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">trusted</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">UserTrustUpdated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">trusted</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">modifier</span><span class=\"mtk1\"> </span><span class=\"mtk11\">requiresTrust</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">isTrusted</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot;UNTRUSTED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider utilising Rari Capital’s updated <code>Auth.sol</code> contract found <a href=\"https://github.com/Rari-Capital/solmate/blob/main/src/auth/Auth.sol\">here</a>. This updated contract gives the <code>owner</code> account authority over its underlying trusted accounts, preventing any single account from taking over the trusted group. The <code>owner</code> account should point to a multisig managed by the Sandclock team or by a community DAO.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/132\">naps62 (Sandclock) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/132#issuecomment-1024609919\">dmvt (judge) changed severity and commented</a>:</strong></p>\n<blockquote>\n<p>If this were to happen, funds would definitely be lost. Accordingly, this is a medium risk issue.</p>\n<p><code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<h2 id=\"m-15-check-_to-is-not-empty\" style=\"position:relative;\"><a href=\"#m-15-check-_to-is-not-empty\" aria-label=\"m 15 check _to is not empty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/183\">[M-15] Check _to is not empty</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p>functions <code>claimYield</code>, <code>\\_withdraw</code>, and <code>\\_unsponsor</code> should validate that <code>\\_to</code> is not an empty 0x0 address to prevent accidental burns.</p>\n<h4 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider implementing the proposed validation:\nrequire <code>\\_to != address(0)</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/183\">gabrielpoca (Sandclock) confirmed</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/183#issuecomment-1024626171\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>In this case assets are at risk due to external factors. A zero address check makes sense.</p>\n</blockquote>\n<h1 id=\"low-risk-findings-21\" style=\"position:relative;\"><a href=\"#low-risk-findings-21\" aria-label=\"low risk findings 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (21)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/159\">[L-01] <code>NonUSTStrategy.sol</code> A malicious user/attacker can game the system by <code>claimYield()</code> or <code>withdraw()</code> based on price changes</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/192\">[L-02] Incorrect share accounting </a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/103\">[L-03] Some Strategy functions can’t be called from the Vault</a> <em>Submitted by palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/64\">[L-04] Lack of checks</a> <em>Submitted by 0x1f8b, also found by hubble, leastwood, and pedroais</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/180\">[L-05] Unclear require statement</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/182\">[L-06] <code>BaseStrategy:perfFeePct</code> can be 100%</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/96\">[L-07] Open TODOs</a> <em>Submitted by Dravee, also found by 0x1f8b, camden, cccz, certora, defsec, jayjonah8, kenzo, p4st13r4, palina, pauliax, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/9\">[L-08] Incorrect comment in BaseStrategy</a> <em>Submitted by camden</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/137\">[L-09] NonUST strategies lose value with swap fees</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/152\">[L-10] NonUSTStrategy: Ensure correct UST index</a> <em>Submitted by hickuphh3</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/79\">[L-11] IVault underlying() description is wrong</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/1\">[L-12] Use of floating pragma statement </a> <em>Submitted by jayjonah8, also found by palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/145\">[L-13] <code>Vault.sponsor()</code> Does Not Prevent Sponsoring The Zero Amount </a> <em>Submitted by leastwood</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/107\">[L-14] Missing validation in constructors</a> <em>Submitted by palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/175\">[L-15] _lockedUntil is not deterministic and does not have an upper boundary</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/177\">[L-16] A precision loss when creating deposits</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/187\">[L-17] No input check : claim.pct = 0</a> <em>Submitted by pedroais</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/41\">[L-18] Wrong comment on <code>IVault.sol</code></a> <em>Submitted by shenwilly, also found by pedroais</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/81\">[L-19] Incorrect require message</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/82\">[L-20] Inaccurate comment in Depositors.sol</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/72\">[L-21] Wrong revert message at Depositors’ onlyVault modifier</a> <em>Submitted by kenzo, also found by p4st13r4 and palina</em></li>\n</ul>\n<h1 id=\"non-critical-findings-17\" style=\"position:relative;\"><a href=\"#non-critical-findings-17\" aria-label=\"non critical findings 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (17)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/106\">[N-01] BaseStrategy implements USTStrategy and is risky to inherit from</a> <em>Submitted by palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/162\">[N-02] Critical operations should emit events</a> <em>Submitted by WatchPug, also found by palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/45\">[N-03] redundant variable</a> <em>Submitted by danb, also found by hyh and palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/95\">[N-04] BaseStrategy.finishRedeemStable can produce a low-level division revert</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/109\">[N-05] <code>Depositor</code> and <code>Sponsor</code> are used interchangeably</a> <em>Submitted by palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/11\">[N-06] Unused imports</a> <em>Submitted by robee, also found by shenwilly and tqts</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/24\">[N-07] safeApprove of openZeppelin is deprecated</a> <em>Submitted by robee, also found by sirhashalot and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/61\">[N-08] Lack of inputs</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/89\">[N-09] Incorrect use of modifier</a> <em>Submitted by ACai</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/129\">[N-10] typo miskate in comment</a> <em>Submitted by certora, also found by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/153\">[N-11] Vault: Spelling Error in comment</a> <em>Submitted by hickuphh3</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/70\">[N-12] Incomplete natspec comments</a> <em>Submitted by kenzo</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/73\">[N-13] Inconvenient retrieval of depositors token IDs</a> <em>Submitted by kenzo</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/56\">[N-14] Account for future reentrancy attacks</a> <em>Submitted by p4st13r4</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/111\">[N-15] Event ProfitShared in IStrategy is never used</a> <em>Submitted by palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/116\">[N-16] Missing topic in Unsponsored event</a> <em>Submitted by palina</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-sandclock-findings/issues/84\">[N-17] Deprecated Trust.sol dependency</a> <em>Submitted by sirhashalot</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-5\">High Risk Findings (5)</a></p>\n<ul>\n<li><a href=\"#h-01-forceunsponsor-may-open-a-window-for-attackers-to-manipulate-the-_totalshares-and-freeze-users-funds-at-a-certain-deposit-amount\">[H-01] <code>forceUnsponsor()</code> may open a window for attackers to manipulate the <code>_totalShares</code> and freeze users’ funds at a certain deposit amount</a></li>\n<li><a href=\"#h-02-withdrawers-can-get-more-value-returned-than-expected-with-reentrant-call\">[H-02] Withdrawers can get more value returned than expected with reentrant call</a></li>\n<li><a href=\"#h-03-vaults-with-non-ust-underlying-asset-vulnerable-to-flash-loan-attack-on-curve-pool\">[H-03] Vaults with non-UST underlying asset vulnerable to flash loan attack on curve pool</a></li>\n<li><a href=\"#h-04-deposit-function-is-open-to-reentrancy-attacks\">[H-04] deposit() function is open to reentrancy attacks</a></li>\n<li><a href=\"#h-05-sponsor-function-in-open-to-reentrancy-attacks\">[H-05] sponsor() function in open to reentrancy attacks</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-15\">Medium Risk Findings (15)</a></p>\n<ul>\n<li><a href=\"#m-01-late-users-will-take-more-losses-than-expected-when-the-underlying-contract-ethanchor-suffers-investment-losses\">[M-01] Late users will take more losses than expected when the underlying contract (<code>EthAnchor</code>) suffers investment losses</a></li>\n<li><a href=\"#m-02-nonuststrategysol-improper-handling-of-swap-fees-allows-attacker-to-steal-funds-from-other-users\">[M-02] <code>NonUSTStrategy.sol</code> Improper handling of swap fees allows attacker to steal funds from other users</a></li>\n<li><a href=\"#m-03-centralization-risk-funds-can-be-frozen-when-critical-key-holders-lose-access-to-their-keys\">[M-03] Centralization Risk: Funds can be frozen when critical key holders lose access to their keys</a></li>\n<li><a href=\"#m-04-unsponsor-claimyield-and-withdraw-might-fail-unexpectedly\">[M-04] unsponsor, claimYield and withdraw might fail unexpectedly</a></li>\n<li><a href=\"#m-05-add-a-timelock-to-basestrategysetperffeepct\">[M-05] Add a timelock to <code>BaseStrategy:setPerfFeePct</code></a></li>\n<li><a href=\"#m-06-totalunderlyingminussponsored-may-revert-on-underflow-and-malfunction-the-contract\">[M-06] <code>totalUnderlyingMinusSponsored()</code> may revert on underflow and malfunction the contract</a></li>\n<li><a href=\"#m-07-vault-cant-receive-deposits-if-underlying-token-charges-fees-on-transfer\">[M-07] Vault can’t receive deposits if underlying token charges fees on transfer</a></li>\n<li><a href=\"#m-08-medium-consider-alternative-price-feed--ensure-_minlockperiod--0-to-prevent-flash-loan-attacks\">[M-08] Medium: Consider alternative price feed + ensure _minLockPeriod > 0 to prevent flash loan attacks</a></li>\n<li><a href=\"#m-09-no-use-of-safemint-as-safe-guard-for-users-\">[M-09] no use of safeMint() as safe guard for users </a></li>\n<li><a href=\"#m-10-no-setter-for-exchangeratefeeder-whose-address-might-change-in-future\">[M-10] No setter for exchangeRateFeeder, whose address might change in future</a></li>\n<li><a href=\"#m-11-changing-a-strategy-can-be-bricked\">[M-11] Changing a strategy can be bricked</a></li>\n<li><a href=\"#m-12-investedassets-does-not-take-into-consideration-the-performance-fee-charged-on-strategy-withdrawals\">[M-12] <code>investedAssets()</code> Does Not Take Into Consideration The Performance Fee Charged On Strategy Withdrawals</a></li>\n<li><a href=\"#m-13-incompatibility-with-rebasingdeflationaryinflationary-tokens\">[M-13] Incompatibility With Rebasing/Deflationary/Inflationary tokens</a></li>\n<li><a href=\"#m-14-a-single-malicious-trusted-account-can-takeover-parent-contract\">[M-14] A Single Malicious Trusted Account Can Takeover Parent Contract</a></li>\n<li><a href=\"#m-15-check-_to-is-not-empty\">[M-15] Check _to is not empty</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-21\">Low Risk Findings (21)</a></li>\n<li><a href=\"#non-critical-findings-17\">Non-Critical Findings (17)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of Sandclock contest smart contract system written in Solidity. The code contest took place between January 6—January 12 2022.\n\n## Wardens\n\n36 Wardens contributed reports to the Sandclock contest:\n\n1. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n1. [camden](https://camden.codes)\n1. jayjonah8\n1. [pauliax](https://twitter.com/SolidityDev)\n1. [Dravee](https://twitter.com/JustDravee)\n1. harleythedog\n1. [kenzo](https://twitter.com/KenzoAgada)\n1. [leastwood](https://twitter.com/liam_eastwood13)\n1. [cmichel](https://twitter.com/cmichelio)\n1. [hickuphh3](https://twitter.com/HickupH)\n1. [palina](https://twitter.com/PalinaTolmach)\n1. [defsec](https://twitter.com/defsec_)\n1. [danb](https://twitter.com/danbinnun)\n1. [sirhashalot](https://twitter.com/SirH4shalot)\n1. pedroais\n1. 0x1f8b\n1. hyh\n1. [gzeon](https://twitter.com/gzeon)\n1. [Ruhum](https://twitter.com/0xruhum)\n1. [Tomio](https://twitter.com/meidhiwirara)\n1. bugwriter001\n1. [shenwilly](https://twitter.com/shenwilly_)\n1. cccz\n1. p4st13r4 (0xb4bb4 and [0x69e8](https://github.com/0x69e8))\n1. hubble (ksk2345 and shri4net)\n1. ACai\n1. [pmerkleplant](https://twitter.com/merkleplant_eth)\n1. [ye0lde](https://twitter.com/_ye0lde)\n1. [Fitraldys](https://twitter.com/fitraldys)\n1. [onewayfunction](https://twitter.com/onewayfunction)\n1. certora\n1. robee\n1. [tqts](https://tqts.ar/)\n\nThis contest was judged by [LSDan](https://twitter.com/lsdan_defi) (ElasticDAO).\n\nFinal report assembled by [itsmetechjay](https://twitter.com/itsmetechjay), [CloudEllie](https://twitter.com/CloudEllie1), and [liveactionllama](https://twitter.com/liveactionllama).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 41 unique vulnerabilities and 58 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 5 received a risk rating in the category of HIGH severity, 15 received a risk rating in the category of MEDIUM severity, and 21 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 17 non-critical recommendations.\n\n# Scope\n\nThe code under review can be found within the [C4 Sandclock contest repository](https://github.com/code-423n4/2022-01-sandclock), and is composed of 9 smart contracts written in the Solidity programming language and includes 1400 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (5)\n## [[H-01] `forceUnsponsor()` may open a window for attackers to manipulate the `_totalShares` and freeze users' funds at a certain deposit amount](https://github.com/code-423n4/2022-01-sandclock-findings/issues/168)\n_Submitted by WatchPug_\n\n<https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L390-L401>\n\n```solidity\nif (_force && sponsorAmount > totalUnderlying()) {\n    sponsorToTransfer = totalUnderlying();\n} else if (!_force) {\n    require(\n        sponsorToTransfer <= totalUnderlying(),\n        \"Vault: not enough funds to unsponsor\"\n    );\n}\n\ntotalSponsored -= sponsorAmount;\n\nunderlying.safeTransfer(_to, sponsorToTransfer);\n```\n\nWhen `sponsorAmount > totalUnderlying()`, the contract will transfer `totalUnderlying()` to `sponsorToTransfer`, even if there are other depositors and `totalShares` > 0.\n\nAfter that, and before others despoiting into the Vault, the Attacker can send `1 wei` underlying token, then cal `deposit()` with 0.1 \\* 1e18 , since `newShares  = (_amount * _totalShares) / _totalUnderlyingMinusSponsored` and `_totalUnderlyingMinusSponsored` is `1`, with a tiny amount of underlying token, `newShares` will become extremly large.\n\nAs we stated in issue [#166](https://github.com/code-423n4/2022-01-sandclock-findings/issues/166), when the value of `totalShares` is manipulated precisely, the attacker can plant a bomb, and the contract will not work when the deposit/withdraw amount reaches a certain value, freezing the user's funds.\n\nHowever, this issue is not caused by lack of reentrancy protection, therefore it cant be solved by the same solution in issue [#166](https://github.com/code-423n4/2022-01-sandclock-findings/issues/166).\n\n#### Recommendation\n\nConsider adding a minimum balance reserve (eg. 1e18 Wei) that cannot be withdrawn by anyone in any case. It can be transferred in alongside with the deployment by the deployer.\n\nThis should make it safe or at least make it extremely hard or expensive for the attacker to initiate such an attack.\n\n**[naps62 (Sandclock) confirmed and commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/168#issuecomment-1012115367):**\n > @gabrielpoca @ryuheimat is this new?\n\n**[ryuheimat (Sandclock) commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/168#issuecomment-1012116458):**\n > it's new\n\n**[gabrielpoca (Sandclock) commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/168#issuecomment-1012269148):**\n > yap, it's interesting. The sponsor really is an issue\n\n\n\n## [[H-02] Withdrawers can get more value returned than expected with reentrant call](https://github.com/code-423n4/2022-01-sandclock-findings/issues/32)\n_Submitted by camden, also found by cmichel and harleythedog_\n\nThe impact of this is that users can get significantly more UST withdrawn than they would be alotted if they had done non-reentrant withdraw calls.\n\n#### Proof of Concept\n\nHere's an outline of the attack:\n\nAssume the vault has 100 UST in it.\nThe attacker makes two deposits of 100UST and waits for them to be withdrawable.\nThe attacker triggers a withdraw one of their deposit positions.\nThe vault code executes until it reaches this point: <https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L565>\nSince the attacker is the claimer, the vault will call back to the attacker.\nInside `onDepositBurned`, trigger another 100 UST deposit.\nSince `claimers.onWithdraw` has already been called, reducing the amount of shares, but the UST hasn't been transferred yet, the vault will compute the amount of UST to be withdrawn based on an unexpected value for `_totalUnderlyingMinusSponsored` (300).\n<https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L618>\n\nAfter the attack, the attacker will have significantly more than if they had withdrawn without reentrancy.\n\nHere's my proof of concept showing a very similar exploit with `deposit`, but I think it's enough to illustrate the point. I have a forge repo if you want to see it, just ping me on discord.\n<https://gist.github.com/CamdenClark/abc67bc1b387c15600549f6dfd5cb27a>\n\n#### Tools Used\n\nForge\n\n#### Recommended Mitigation Steps\n\nReentrancy guards.\n\nAlso, consider simplifying some of the shares logic.\n\n**[ryuheimat (Sandclock) confirmed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/32)** \n\n**[naps62 (Sandclock) resolved](https://github.com/code-423n4/2022-01-sandclock-findings/issues/32#issuecomment-1012049324):**\n > Fixed in https://github.com/sandclock-org/solidity-contracts/pull/75\n\n\n\n## [[H-03] Vaults with non-UST underlying asset vulnerable to flash loan attack on curve pool](https://github.com/code-423n4/2022-01-sandclock-findings/issues/7)\n_Submitted by camden, also found by cccz, cmichel, danb, defsec, harleythedog, hyh, kenzo, leastwood, palina, pauliax, pmerkleplant, Ruhum, WatchPug, and ye0lde_\n\nIn short, the `NonUSTStrategy` is vulnerable to attacks by flash loans on curve pools.\n\nHere's an outline of the attack:\n\n*   Assume there is a vault with DAI underlying and a `NonUSTStrategy` with a DAI / UST curve pool\n*   Take out a flash loan of DAI\n*   Exchange a ton of DAI for UST\n*   The exchange rate from DAI to UST has gone up (!!)\n*   Withdraw or deposit from vault with more favorable terms than market\n*   Transfer back UST to DAI\n*   Repay flash loan\n\n#### Proof of Concept\n\nHere is my proof of concept:\n<https://gist.github.com/CamdenClark/932d5fbeecb963d0917cb1321f754132>\n\nI can provide a full forge repo. Just ping me on discord.\n\nExploiting this line: <https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/NonUSTStrategy.sol#L135>\n\n#### Tools Used\n\nForge\n\n#### Recommended Mitigation Steps\n\nUse an oracle\n\n**[naps62 (Sandclock) confirmed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/7)** \n\n## [[H-04] deposit() function is open to reentrancy attacks](https://github.com/code-423n4/2022-01-sandclock-findings/issues/3)\n_Submitted by jayjonah8, also found by bugwriter001, camden, cccz, cmichel, danb, defsec, Fitraldys, harleythedog, hickuphh3, jayjonah8, kenzo, leastwood, onewayfunction, pedroais, and WatchPug_\n\nIn `Vault.sol` the `deposit()` function is left wide open to reentrancy attacks.  The function eventually calls `\\_createDeposit() => \\_createClaim()` which calls `depositors.mint()` which will then mint an NFT.  When the NFT is minted the sender will receive a callback which can then be used to call the `deposit()` function again before execution is finished.  An attacker can do this minting multiple NFT's for themselves.  `claimers.mint()` is also called in the same function which can also be used to call back into the deposit function before execution is complete.  Since there are several state updates before and after NFT's are minted this can be used to further manipulate the protocol like with `newShares` which is called before minting.  This is not counting what an attacker can do with cross function reentrancy entering into several other protocol functions (like withdraw) before code execution is complete further manipulating the system.\n\n#### Proof of Concept\n\n- <https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L160>\n\n- <https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L470>\n\n- <https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L476>\n\n#### Recommended Mitigation Steps\n\nReentrancy guard modifiers should be placed on the `deposit()`, `withdraw()` and all other important protocol functions to prevent devastating attacks.\n\n**[ryuheimat (Sandclock) confirmed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/3)**\n\n## [[H-05] sponsor() function in open to reentrancy attacks](https://github.com/code-423n4/2022-01-sandclock-findings/issues/4)\n_Submitted by jayjonah8, also found by camden_\n\nIn `Vault.sol` the `sponsor()` function does not have a reentrancy guard allowing an attacker to reenter the function because the `depositors.mint()` function has as callback to the msg.sender.  Since there are state updates after the call to `depositors.mint()` function this is especially dangerous.  An attacker can make it so the totalSponsored amount is only updated once after calling `mint()` several times since the update takes place after the callback.  The same will be true for the Sponsored event that is emitted.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L244>\n\n#### Recommended Mitigation Steps\n\nA reentrancy guard modifier should be added to the sponsor() function in Vault.sol\n\n**[naps62 (Sandclock) confirmed and resolved](https://github.com/code-423n4/2022-01-sandclock-findings/issues/4#issuecomment-1012049429):**\n > Fixed in https://github.com/sandclock-org/solidity-contracts/pull/75\n\n\n\n \n# Medium Risk Findings (15)\n## [[M-01] Late users will take more losses than expected when the underlying contract (`EthAnchor`) suffers investment losses](https://github.com/code-423n4/2022-01-sandclock-findings/issues/156)\n_Submitted by WatchPug_\n\nEven though it's unlikely in practice, but in theory, the underlying contract (`EthAnchor`) may suffer investment losses and causing decreasing of the PPS of AUST token. (There are codes that considered this situation in the codebase. eg. handling of `depositShares > claimerShares`).\n\nHowever, when this happens, the late users will suffer more losses than expected than the users that withdraw earlier. The last few users may lose all their funds while the first users can get back 100% of their deposits.\n\n#### Proof of Concept\n\n    // ### for deposits: d1, d2, d3, the beneficiary are: c1, c2, c2\n        depositAmount          claimerShares\n    d1: + 100e18           c1: + 100e36\n    d2: + 100e18           c2: + 100e36\n    d3: + 100e18           c2: + 100e36\n\n    depositAmount of d1, d2, d3 = 100e18\n    c1 claimerShares: 100e36\n    c2 claimerShares: 200e36\n    total shares: 300e36\n\n\n    // ### when the PPS of AUST drop by 50% \n    totalUnderlyingMinusSponsored: 300e18 -> 150e18\n\n    // ### d2 withdraw\n    c2 claimerShares: 200e36\n    d2 depositAmount: 100e18\n    d2 depositShares: 300e36 * 100e18 / 150e18 = 200e36\n\n    Shares to reduce: 200e36\n    c2 claimerShares: 200e36 -> 0\n    c2 totalPrincipal: 200e18 -> 100e18\n    totalShares: 300e36 -> 100e36\n\n    underlying.safeTransfer(d2, 100e18)\n    totalUnderlyingMinusSponsored: 150e18 -> 50e18\n\n#### Root Cause\n\nWhen the strategy is losing money, `share / underlying` increases, therefore the computed `depositShares`: `depositAmount * share / underlying` will increase unexpectedly.\n\n<https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L544-L548>\n\nWhile `totalShares` remain unchanged, but the computed `depositShares` is increasing, causing distortion of `depositShares / totalShares`, eg, `∑ depositShares > totalShares`.\n\n#### Recommendation\n\nIn order to properly handle the investment loss of the strategy, consider adding a new storage variable called `totalLoss` to maintain a stable value of `share / adjustedUnderlying`.\n\n```solidity\nadjustedUnderlying = underlying + totalLoss\n```\n\n**[CrisBRM (Sandclock) confirmed and disagreed with severity](https://github.com/code-423n4/2022-01-sandclock-findings/issues/156)**\n\n**[dmvt (judge) changed severity and commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/156#issuecomment-1023095624):**\n > This is a classic medium risk when using the definition provided by Code4rena:\n> \n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n\n\n## [[M-02] `NonUSTStrategy.sol` Improper handling of swap fees allows attacker to steal funds from other users](https://github.com/code-423n4/2022-01-sandclock-findings/issues/158)\n_Submitted by WatchPug_\n\n<https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/NonUSTStrategy.sol#L66-L69>\n\n`NonUSTStrategy` will swap the deposited non-UST assets into UST before depositing to EthAnchor. However, the swap fee is not attributed to the depositor correctly like many other yield farming vaults involving swaps (`ZapIn`).\n\nAn attacker can exploit it for the swap fees paid by other users by taking a majority share of the liquidity pool.\n\n#### Root Cause\n\nThe swap fee of depositing is not paid by the depositor but evenly distributed among all users.\n\n#### Proof of Concept\n\nGiven:\n\n*   A NonUST vault and strategy is created for `FRAX`;\n*   The liquidity in FRAX-UST curve pool is relatively small (<\\$1M).\n\nThe attacker can do the following:\n\n1.  Add \\$1M worth of liquidity to the FRAX-UST curve pool, get >50% share of the pool;\n2.  Deposit 1M FRAX to the vault, get a `depositAmount` of 1M;\n3.  The strategy will swap 1M FRAX to UST via the curve pool, paying a certain amount of swap fee;\n4.  Withdraw all the funds from the vault.\n5.  Remove the liquidity added in step 1, profit from the swap fee. (A majority portion of the swap fee paid in step 3 can be retrieved by the attacker as the attacker is the majority liquidity provider.)\n\nIf the vault happens to have enough balance (from a recent depositor), the attacker can now receive 1M of FRAX.\n\nA more associated attacker may combine this with issue [#160](https://github.com/code-423n4/2022-01-sandclock-findings/issues/160) and initiate a sandwich attack in step 3 to get even higher profits.\n\nAs a result, all other users will suffer fund loss as the swap fee is essentially covered by other users.\n\n#### Recommendation\n\nConsider changing the way new shares are issued:\n\n1.  Swap from Vault asset (eg. FRAX) to UST in `deposit()`;\n2.  Using the UST amount out / total underlying UST for the amount of new shares issued to the depositor.\n\nIn essence, the depositor should be paying for the swap fee and slippage.\n\n**[CrisBRM (Sandclock) confirmed and disagreed with severity](https://github.com/code-423n4/2022-01-sandclock-findings/issues/158#issuecomment-1012221473):**\n > This is only an issue if we support low liquidity Curve pools\n> We are also adding slippage control as per some other issue which would cause massive transfers using low liquidity pools to revert, fully mitigating this.\n> Likelihood of this happening would also be quite low given that profitability would go down tremendously as curve LPs would move to that pool in order to capture higher base fees, dissuading the attacker from continuing.\n> \n> That being said, I do agree that the curve swap fee (0.04%) should be paid by each individual depositor.\n\n**[dmvt (judge) changed severity and commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/158#issuecomment-1023099964):**\n > This requires a number of external factors to line up just right. It is a medium risk according to the definition provided by Code4rena.\n> \n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n\n\n## [[M-03] Centralization Risk: Funds can be frozen when critical key holders lose access to their keys](https://github.com/code-423n4/2022-01-sandclock-findings/issues/165)\n_Submitted by WatchPug_\n\nThe current implementation requires trusted key holders (`isTrusted[msg.sender]`) to send transactions (`initRedeemStable()`) to initialize withdrawals from `EthAnchor` before the users can withdraw funds from the contract.\n\n- <https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/BaseStrategy.sol#L214-L223>\n\n- <https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/strategy/BaseStrategy.sol#L163-L170>\n\nThis introduces a high centralization risk, which can cause funds to be frozen in the contract if the key holders lose access to their keys.\n\n#### Proof of Concept\n\nGiven:\n\n*   `investPerc` = 80%\n*   1,000 users deposited 1M UST in total (\\$1000 each user in avg), 800k invested into AUST (`EthAnchor`)\n\nIf the key holders lose access to their keys (\"hit by a bus\"). The 800k will be frozen in `EthAnchor` as no one can `initRedeemStable()`.\n\n#### Recommendation\n\nSee the recommendation on issue [#157](https://github.com/code-423n4/2022-01-sandclock-findings/issues/157).\n\n**[CrisBRM (Sandclock) confirmed and disagreed with severity](https://github.com/code-423n4/2022-01-sandclock-findings/issues/165#issuecomment-1012218046):**\n > Agree that there should be a way for users to call the uninvest functions themselves, subject to certain rules. Again, not sure I agree with the severity given the likelihood of the event transpiring.\n> \n> Consensus is for UST vaults, allow depositors to call uninvest. For nonUST vaults that pay per curve swap, add trusted multisig instead of just the backend's EOA.\n\n**[dmvt (judge) changed severity and commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/165#issuecomment-1023107965):**\n > This issue requires external factors to align in a very negative way, but it would result in a potentially significant loss of funds. Because there is no direct attack path, it doesn't qualify as a high risk issue, but a medium risk per Code4rena definitions.\n> \n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n\n\n## [[M-04] unsponsor, claimYield and withdraw might fail unexpectedly](https://github.com/code-423n4/2022-01-sandclock-findings/issues/76)\n_Submitted by danb, also found by ACai, cmichel, harleythedog, leastwood, palina, pedroais, and WatchPug_\n\n`totalUnderlying()` includes the invested assets, they are not in the contract balance.\n\nwhen a user calls withdraw, claimYield or unsponsor, the system might not have enough assets in the balance and the transfer would fail.\n\nespecially, force unsponsor will always fail, because it tries to transfer the entire `totalUnderlying()`, which the system doesn't have:\n\n<https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L391>\n\n#### Recommended Mitigation Steps\n\nwhen the system doesn't have enough balance to make the transfer, withdraw from the strategy.\n\n**[gabrielpoca (Sandclock) confirmed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/76#issuecomment-1010881903):**\n > I'm not sure this is an issue. We are aware of it, and redeeming from the strategy won't fix it because it is asynchronous. This is why we have an investment percentage.\n\n**[dmvt (judge) changed severity and commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/76#issuecomment-1023191389):**\n > This one is a hard issue to size, but I'm going to go with the medium risk rating provided by other wardens reporting this issue. This seems to amount to a bank run like issue similar to what can happen with DeFi lending protocols.\n> \n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n> \n> If the invested assets are compromised or locked, this could result in a loss of funds. Users of the protocol should be made aware of the risk. This risk exists with many DeFi protocols and probably shouldn't be a surprise to most users.\n\n\n\n## [[M-05] Add a timelock to `BaseStrategy:setPerfFeePct`](https://github.com/code-423n4/2022-01-sandclock-findings/issues/178)\n_Submitted by Dravee_\n\nTo give more trust to users: functions that set key/critical variables should be put behind a timelock.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L249-L253>\n\n#### Tools Used\n\nVS Code\n\n#### Recommended Mitigation Steps\n\nAdd a timelock to setter functions of key/critical variables.\n\n**[naps62 (Sandclock) acknowledged](https://github.com/code-423n4/2022-01-sandclock-findings/issues/178#issuecomment-1015430589):**\n > While this is a valid suggestion, it doesn't necessarily indicate a vulnerability in the existing approach. A timelock can indeed increase trust, but it never truly eliminates the same risk (i.e.: once the timelock finishes, the same theoretical attacks from a malicious operator could happen anyway)\n\n**[ryuheimat (Sandclock) commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/178#issuecomment-1024395152):**\n > We will set admin as a timelock\n\n\n\n## [[M-06] `totalUnderlyingMinusSponsored()` may revert on underflow and malfunction the contract](https://github.com/code-423n4/2022-01-sandclock-findings/issues/164)\n_Submitted by WatchPug_\n\n<https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L290-L293>\n\n```solidity\nfunction totalUnderlyingMinusSponsored() public view returns (uint256) {\n    // TODO no invested amount yet\n    return totalUnderlying() - totalSponsored;\n}\n```\n\nAs a function that many other functions depended on, `totalUnderlyingMinusSponsored()` can revert on underflow when  `sponsorAmount > totalUnderlying()` which is possible and has been considered elsewhere in this contract:\n\n<https://github.com/code-423n4/2022-01-sandclock/blob/a90ad3824955327597be00bb0bd183a9c228a4fb/sandclock/contracts/Vault.sol#L390-L392>\n\n```solidity\nif (_force && sponsorAmount > totalUnderlying()) {\n    sponsorToTransfer = totalUnderlying();\n}\n```\n\n#### Proof of Concept\n\n*   Underlying token = USDT\n*   Swap Fee = 0.04%\n\n1.  Sponsor call `sponsor()` and send 10,000 USDT\n\n*   totalSponsored = 10,000\n\n2.  `NonUSTStrategy.sol#doHardWork()` swapped USDT for UST\n\n*   pendingDeposits = 9,996\n*   totalUnderlying() = 9,996\n\n3.  Alice tries to call `deposit()`, the tx will revet due to underflow in `totalUnderlyingMinusSponsored()`.\n\n#### Recommendation\n\nChange to:\n\n```solidity\nfunction totalUnderlyingMinusSponsored() public view returns (uint256) {\n    uint256 _totalUnderlying = totalUnderlying();\n    if (totalSponsored > _totalUnderlying) {\n        return 0;\n    }\n    return _totalUnderlying - totalSponsored;\n}\n```\n\n**[naps62 (Sandclock) confirmed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/164)**\n\n## [[M-07] Vault can't receive deposits if underlying token charges fees on transfer](https://github.com/code-423n4/2022-01-sandclock-findings/issues/55)\n_Submitted by Ruhum, also found by harleythedog, Tomio, and WatchPug_\n\nSome ERC20 tokens charge a fee for every transfer. If the underlying token of a vault is such a token any deposit to the protocol will fail.\n\nSome tokens have the possibility of adding fees later on, e.g. USDT. So those have to be covered too.\n\nGenerally, the user would also receive fewer tokens on withdrawing in such a scenario but that's not the protocol's fault.\n\nI rated the issue as medium since part of the protocol become unavailable in such a situation.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L583-L585>\n\n`_transferAndCheckUnderlying()` is used to deposit and sponsor the vault. It checks that after a `safeTransferFrom()` the same exact amount is sent to the balance of the vault. But, if fees are enabled the values won't match, causing the function to revert. Thus, it won't be able to deposit or sponsor the vault in any way.\n\n- <https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L162>\n\n- <https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L266>\n\n#### Recommended Mitigation Steps\n\nOne possibility would be to simply not use ERC20 tokens with fees.\n\n**[ryuheimat (Sandclock) disputed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/55#issuecomment-1010086346):**\n > We don't use tokens with fees\n\n**[naps62 (Sandclock) commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/55#issuecomment-1010244557):**\n > The only place where we mention USDT is on an old pitch deck (not up to date anymore). The codebase itself doesn't mention it, and all tests are done with USDC and DAI as examples\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/55#issuecomment-1023697029):**\n > I'm going to let this issue stand given that #164 is also valid. Supported or not, fee on transfer tokens would cause a loss of funds in the scenario described. As the USDT example shows (in both issues), many stables can be upgraded and add a fee later.\n\n\n\n## [[M-08] Medium: Consider alternative price feed + ensure _minLockPeriod > 0 to prevent flash loan attacks](https://github.com/code-423n4/2022-01-sandclock-findings/issues/150)\n_Submitted by hickuphh3, also found by 0x1f8b_\n\nIt is critical to ensure that `_minLockPeriod > 0` because it is immutable and cannot be changed once set. A zero `minLockPeriod` will allow for flash loan attacks to occur. Vaults utilising the nonUST strategy are especially susceptible to this attack vector since the strategy utilises the spot price of the pool to calculate the total asset value.\n\n#### Proof of Concept\n\nAssume the vault’s underlying token is MIM, and the curve pool to be used is the MIM-UST pool. Further assume that both the vault and the strategy holds substantial funds in MIM and UST respectively.\n\n1.  Flash loan MIM from the [Uniswap V3 MIM-USDC pool](https://etherscan.io/address/0x298b7c5e0770d151e4c5cf6cca4dae3a3ffc8e27) (currently has \\~\\$3.5M in MIM at the time of writing).\n2.  Convert half of the loaned MIM to UST to inflate and deflate their prices respectively.\n3.  Deposit the other half of the loaned MIM into the vault. We expect `curvePool.get_dy_underlying(ustI, underlyingI, ustAssets);` to return a smaller amount than expected because of the previous step. As a result, the attacker is allocated more shares than expected.\n4.  Exchange UST back to MIM, bringing back the spot price of MIM-UST to a normal level.\n5.  Withdraw funds from the vault. The number of shares to be deducted is lower as a result of (4), with the profit being accounted for as yield.\n6.  Claim yield and repay the flash loan.\n\n#### Recommended Mitigation Steps\n\nEnsure that `_minLockPeriod` is non-zero in the constructor. Also, given how manipulatable the spot price of the pool can be, it would be wise to consider an alternative price feed.\n\n```jsx\n// in Vault#constructor\nrequire(_minLockPeriod > 0, 'zero minLockPeriod');\n```\n**[ryuheimat (Sandclock) disputed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/65#issuecomment-1011081419):**\n > we don't think it's an issue.\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/65#issuecomment-1023663287):**\n > This does potentially open assets up to flash loan risk. It is probably a good idea to have this variable guarded.\n\n\n\n## [[M-09] no use of safeMint() as safe guard for users ](https://github.com/code-423n4/2022-01-sandclock-findings/issues/29)\n_Submitted by jayjonah8, also found by bugwriter001, camden, palina, and sirhashalot_\n\nIn `Vault.sol` the `deposit()` function eventually calls claimers.mint() and depositers.mint().  Calling mint this way does not ensure that the receiver of the NFT is able to accept them.  `\\_safeMint()` should be used with reentrancy guards as a guard to protect the user as it checks to see if a user can properly accept an NFT and reverts otherwise.\n\n#### Proof of Concept\n\n- <https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L470>\n\n- <https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L256>\n\n- <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L248>\n\n#### Recommended Mitigation Steps\n\nUse `\\_safeMint()` instead of `mint()`\n\n**[ryuheimat (Sandclock) disagreed with severity](https://github.com/code-423n4/2022-01-sandclock-findings/issues/29#issuecomment-1007534909):**\n > I think _safeMint check if the recipient contract is able to accept NFT, it does not involves any issues.\n> However we will use _safeMint.\n\n**[gabrielpoca (Sandclock) commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/29#issuecomment-1010895318):**\n > @ryuheimat this is a non-issue. The mint functions called in the Vault's deposit function are implemented by us, they just happen to be called mint.\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/29#issuecomment-1024220647):**\n > The Depositors contract does use `_safeMint`, but the Claimers contract does not.\n> \n> See:\n> https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/vault/Claimers.sol#L63\n> https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/vault/Depositors.sol#L53\n> \n> The `deposit` function on Vault also appears to lack reentrancy guards. The issue is valid and should be addressed, despite the fact that the warden clearly did not look at the Depositors contract to see that it already used `_safeMint`. \n\n\n\n## [[M-10] No setter for exchangeRateFeeder, whose address might change in future](https://github.com/code-423n4/2022-01-sandclock-findings/issues/71)\n_Submitted by kenzo_\n\nEthAnchor's docs state that \"the contract address of ExchangeRateFeeder may change as adjustments occur\".\nBaseStrategy does not have a setter to change exchangeRateFeeder after deployment.\n\n#### Impact\n\nInaccurate/unupdated values from exchangeRateFeeder when calculating vault's total invested assets.\n\nWhile the strategy's funds could be withdrawn from EthAnchor and migrated to a new strategy with correct exchangeRateFeeder, during this process (which might take time due to EthAnchor's async model) the wrong exchangeRateFeeder will be used to calculate the vault's total invested assets. (The vault's various actions (deposit, claim, withdraw) can not be paused.)\n\n#### Proof of Concept\n\nThe exchangeRateFeeder is being used to calculate the vault's invested assets, which is used extensively to calculate the correct amount of shares and amounts: [(Code ref)](https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L275)\n```solidity\nfunction investedAssets() external view virtual override(IStrategy) returns (uint256) {\n    uint256 underlyingBalance = _getUnderlyingBalance() + pendingDeposits;\n    uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\n\n    return underlyingBalance + ((exchangeRateFeeder.exchangeRateOf(address(aUstToken), true) \n            * aUstBalance) / 1e18);\n}\n```\n\nEthAnchor documentation states that unlike other contracts, exchangeRateFeeder is not proxied and it's address may change in future: \"the contract address of ExchangeRateFeeder may change as adjustments occur.\n\" [(ref)](https://docs.anchorprotocol.com/ethanchor/ethanchor-contracts/deployed-contracts#core-contracts)\n\n#### Recommended Mitigation Steps\n\nAdd a setter for exchangeRateFeeder.\n\n**[ryuheimat (Sandclock) confirmed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/71)** \n\n## [[M-11] Changing a strategy can be bricked](https://github.com/code-423n4/2022-01-sandclock-findings/issues/91)\n_Submitted by kenzo, also found by danb and harleythedog_\n\nA vault wouldn't let the strategy be changed unless the strategy holds no funds.\n\nSince anybody can send funds to the strategy, a griefing attack is possible.\n\n#### Impact\n\nStrategy couldn't be changed.\n\n#### Proof of Concept\n\n`setStrategy` requires `strategy.investedAssets() == 0`. [(Code ref)](https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/Vault.sol#L113:#L116)\n`investedAssets` contains the aUST balance and the pending redeems: [(Code ref)](https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L271)\n\n    uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\n\nSo if a griefer sends 1 wei of aUST to the strategy before it is to be replaced, it would not be able to be replaced. The protocol would then need to redeem the aUST and wait for the process to finish - and the griefer can repeat his griefing. As they say, griefers gonna grief.\n\n#### Recommended Mitigation Steps\n\nConsider keeping an internal aUST balance of the strategy, which will be updated upon deposit and redeem, and use it (instead of raw aUST balance) to check if the strategy holds no aUST funds.\n\nAnother option is to add capability for the strategy to send the aUST to the vault.\n\n**[ryuheimat (Sandclock) confirmed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/91)**\n\n**[CloudEllie (C4) commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/91#issuecomment-1008980524):**\n > Warden kenzo requested that I add the following: \n> \n> \"Additionally, impact-wise: EthAnchor does not accept redeems of less than 10 aUST. This means that if a griefer only sends 1 wei aUST, the protocol would have to repeatedly send additional aUST to the strategy to be able to redeem the griefer's aUST.\"\n\n\n\n## [[M-12] `investedAssets()` Does Not Take Into Consideration The Performance Fee Charged On Strategy Withdrawals](https://github.com/code-423n4/2022-01-sandclock-findings/issues/66)\n_Submitted by leastwood, also found by danb_\n\nThe `investedAssets()` function is implemented by the vault's strategy contracts as a way to express a vault's investments in terms of the underlying currency. While the implementation of this function in `BaseStrategy.sol` and `NonUSTStrategy.sol` is mostly correct. It does not account for the performance fee charged by the treasury as shown in `finishRedeemStable()`.\n\nTherefore, an attacker could avoid paying their fair share of the performance fee by withdrawing their assets before several calls to `finishRedeemStable()` are made and reenter the vault once the fee is charged.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L180-L204>\n```solidity\nfunction finishRedeemStable(uint256 idx) public virtual {\n    require(redeemOperations.length > idx, \"not running\");\n    Operation storage operation = redeemOperations[idx];\n    uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\n    uint256 originalUst = (convertedUst * operation.amount) / aUstBalance;\n    uint256 ustBalanceBefore = _getUstBalance();\n\n    ethAnchorRouter.finishRedeemStable(operation.operator);\n\n    uint256 redeemedAmount = _getUstBalance() - ustBalanceBefore;\n    uint256 perfFee = redeemedAmount > originalUst\n        ? (redeemedAmount - originalUst).percOf(perfFeePct)\n        : 0;\n    if (perfFee > 0) {\n        ustToken.safeTransfer(treasury, perfFee);\n        emit PerfFeeClaimed(perfFee);\n    }\n    convertedUst -= originalUst;\n    pendingRedeems -= operation.amount;\n\n    operation.operator = redeemOperations[redeemOperations.length - 1]\n        .operator;\n    operation.amount = redeemOperations[redeemOperations.length - 1].amount;\n    redeemOperations.pop();\n}\n```\n<https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L263-L277>\n```solidity\nfunction investedAssets()\n    external\n    view\n    virtual\n    override(IStrategy)\n    returns (uint256)\n{\n    uint256 underlyingBalance = _getUnderlyingBalance() + pendingDeposits;\n    uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\n\n    return\n        underlyingBalance +\n        ((exchangeRateFeeder.exchangeRateOf(address(aUstToken), true) *\n            aUstBalance) / 1e18);\n}\n```\n\n<https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/NonUSTStrategy.sol#L120-L136>\n```solidity\nfunction investedAssets()\n    external\n    view\n    override(BaseStrategy)\n    returns (uint256)\n{\n    uint256 underlyingBalance = _getUnderlyingBalance();\n    uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\n\n    uint256 ustAssets = ((exchangeRateFeeder.exchangeRateOf(\n        address(aUstToken),\n        true\n    ) * aUstBalance) / 1e18) + pendingDeposits;\n    return\n        underlyingBalance +\n        curvePool.get_dy_underlying(ustI, underlyingI, ustAssets);\n}\n```\n\n#### Tools Used\n\nManual code review.\nDiscussions with the Sandclock team (mostly Ryuhei).\n\n#### Recommended Mitigation Steps\n\nWhen calculating the `investedAssets()` amount (expressed in the underlying currency), consider calculating the expected performance fee to be charged if all the strategy's assets are withdrawn from the Anchor protocol. This should ensure that `investedAssets()` returns the most accurate amount, preventing users from gaming the protocol.\n\n**[ryuheimat (Sandclock) confirmed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/66)** \n\n## [[M-13] Incompatibility With Rebasing/Deflationary/Inflationary tokens](https://github.com/code-423n4/2022-01-sandclock-findings/issues/179)\n_Submitted by defsec_\n\nThe Strategy contracts do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n#### Proof of Concept\n\n- <https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L239>\n\n- <https://github.com/code-423n4/2022-01-sandclock/blob/main/sandclock/contracts/strategy/BaseStrategy.sol#L221>\n\n#### Recommended Mitigation Steps\n\n- Make sure token vault accounts for any rebasing/inflation/deflation\n- Add support in contracts for such tokens before accepting user-supplied tokens\n- Consider to check before/after balance on the vault.\n\n**[naps62 (Sandclock) disputed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/179#issuecomment-1012485483):**\n > we did not intend to support those currencies in the first place\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/179#issuecomment-1024341741):**\n > As with issues #55 and #164, this oversight can cause a loss of funds and therefor constitutes a medium risk. Simply saying you don't support something does not mean that thing doesn't exist or won't cause a vulnerability in the future.\n\n\n\n## [[M-14] A Single Malicious Trusted Account Can Takeover Parent Contract](https://github.com/code-423n4/2022-01-sandclock-findings/issues/132)\n_Submitted by leastwood, also found by hickuphh3_\n\nThe `requiresTrust()` modifier is used on the strategy, vault and factory contracts to prevent unauthorised accounts from calling restricted functions. Once an account is considered trusted, they are allowed to add and remove accounts by calling `setIsTrusted()` as they see fit.\n\nHowever, if any single account has its private keys compromised or decides to become malicious on their own, they can remove all other trusted accounts from the `isTrusted` mapping. As a result, they are effectively able to take over the trusted group that controls all restricted functions in the parent contract.\n\n#### Proof of Concept\n```solidity\nabstract contract Trust {\n    event UserTrustUpdated(address indexed user, bool trusted);\n\n    mapping(address => bool) public isTrusted;\n\n    constructor(address initialUser) {\n        isTrusted[initialUser] = true;\n\n        emit UserTrustUpdated(initialUser, true);\n    }\n\n    function setIsTrusted(address user, bool trusted) public virtual requiresTrust {\n        isTrusted[user] = trusted;\n\n        emit UserTrustUpdated(user, trusted);\n    }\n\n    modifier requiresTrust() {\n        require(isTrusted[msg.sender], \"UNTRUSTED\");\n\n        _;\n    }\n}\n```\n\n#### Recommended Mitigation Steps\n\nConsider utilising Rari Capital's updated `Auth.sol` contract found [here](https://github.com/Rari-Capital/solmate/blob/main/src/auth/Auth.sol). This updated contract gives the `owner` account authority over its underlying trusted accounts, preventing any single account from taking over the trusted group. The `owner` account should point to a multisig managed by the Sandclock team or by a community DAO.\n\n**[naps62 (Sandclock) confirmed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/132)**\n\n**[dmvt (judge) changed severity and commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/132#issuecomment-1024609919):**\n > If this were to happen, funds would definitely be lost. Accordingly, this is a medium risk issue.\n> \n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n\n\n## [[M-15] Check _to is not empty](https://github.com/code-423n4/2022-01-sandclock-findings/issues/183)\n_Submitted by pauliax_\n\nfunctions `claimYield`, `\\_withdraw`, and `\\_unsponsor` should validate that `\\_to` is not an empty 0x0 address to prevent accidental burns.\n\n#### Recommended Mitigation Steps\n\nConsider implementing the proposed validation:\nrequire `\\_to != address(0)`\n\n**[gabrielpoca (Sandclock) confirmed](https://github.com/code-423n4/2022-01-sandclock-findings/issues/183)** \n\n**[dmvt (judge) commented](https://github.com/code-423n4/2022-01-sandclock-findings/issues/183#issuecomment-1024626171):**\n > In this case assets are at risk due to external factors. A zero address check makes sense.\n\n# Low Risk Findings (21)\n- [[L-01] `NonUSTStrategy.sol` A malicious user/attacker can game the system by `claimYield()` or `withdraw()` based on price changes](https://github.com/code-423n4/2022-01-sandclock-findings/issues/159) _Submitted by WatchPug_\n- [[L-02] Incorrect share accounting ](https://github.com/code-423n4/2022-01-sandclock-findings/issues/192) _Submitted by gzeon_\n- [[L-03] Some Strategy functions can't be called from the Vault](https://github.com/code-423n4/2022-01-sandclock-findings/issues/103) _Submitted by palina_\n- [[L-04] Lack of checks](https://github.com/code-423n4/2022-01-sandclock-findings/issues/64) _Submitted by 0x1f8b, also found by hubble, leastwood, and pedroais_\n- [[L-05] Unclear require statement](https://github.com/code-423n4/2022-01-sandclock-findings/issues/180) _Submitted by Dravee_\n- [[L-06] `BaseStrategy:perfFeePct` can be 100%](https://github.com/code-423n4/2022-01-sandclock-findings/issues/182) _Submitted by Dravee_\n- [[L-07] Open TODOs](https://github.com/code-423n4/2022-01-sandclock-findings/issues/96) _Submitted by Dravee, also found by 0x1f8b, camden, cccz, certora, defsec, jayjonah8, kenzo, p4st13r4, palina, pauliax, and robee_\n- [[L-08] Incorrect comment in BaseStrategy](https://github.com/code-423n4/2022-01-sandclock-findings/issues/9) _Submitted by camden_\n- [[L-09] NonUST strategies lose value with swap fees](https://github.com/code-423n4/2022-01-sandclock-findings/issues/137) _Submitted by cmichel_\n- [[L-10] NonUSTStrategy: Ensure correct UST index](https://github.com/code-423n4/2022-01-sandclock-findings/issues/152) _Submitted by hickuphh3_\n- [[L-11] IVault underlying() description is wrong](https://github.com/code-423n4/2022-01-sandclock-findings/issues/79) _Submitted by hyh_\n- [[L-12] Use of floating pragma statement ](https://github.com/code-423n4/2022-01-sandclock-findings/issues/1) _Submitted by jayjonah8, also found by palina_\n- [[L-13] `Vault.sponsor()` Does Not Prevent Sponsoring The Zero Amount ](https://github.com/code-423n4/2022-01-sandclock-findings/issues/145) _Submitted by leastwood_\n- [[L-14] Missing validation in constructors](https://github.com/code-423n4/2022-01-sandclock-findings/issues/107) _Submitted by palina_\n- [[L-15] _lockedUntil is not deterministic and does not have an upper boundary](https://github.com/code-423n4/2022-01-sandclock-findings/issues/175) _Submitted by pauliax_\n- [[L-16] A precision loss when creating deposits](https://github.com/code-423n4/2022-01-sandclock-findings/issues/177) _Submitted by pauliax_\n- [[L-17] No input check : claim.pct = 0](https://github.com/code-423n4/2022-01-sandclock-findings/issues/187) _Submitted by pedroais_\n- [[L-18] Wrong comment on `IVault.sol`](https://github.com/code-423n4/2022-01-sandclock-findings/issues/41) _Submitted by shenwilly, also found by pedroais_\n- [[L-19] Incorrect require message](https://github.com/code-423n4/2022-01-sandclock-findings/issues/81) _Submitted by sirhashalot_\n- [[L-20] Inaccurate comment in Depositors.sol](https://github.com/code-423n4/2022-01-sandclock-findings/issues/82) _Submitted by sirhashalot_\n- [[L-21] Wrong revert message at Depositors' onlyVault modifier](https://github.com/code-423n4/2022-01-sandclock-findings/issues/72) _Submitted by kenzo, also found by p4st13r4 and palina_\n\n# Non-Critical Findings (17)\n- [[N-01] BaseStrategy implements USTStrategy and is risky to inherit from](https://github.com/code-423n4/2022-01-sandclock-findings/issues/106) _Submitted by palina_\n- [[N-02] Critical operations should emit events](https://github.com/code-423n4/2022-01-sandclock-findings/issues/162) _Submitted by WatchPug, also found by palina_\n- [[N-03] redundant variable](https://github.com/code-423n4/2022-01-sandclock-findings/issues/45) _Submitted by danb, also found by hyh and palina_\n- [[N-04] BaseStrategy.finishRedeemStable can produce a low-level division revert](https://github.com/code-423n4/2022-01-sandclock-findings/issues/95) _Submitted by hyh_\n- [[N-05] `Depositor` and `Sponsor` are used interchangeably](https://github.com/code-423n4/2022-01-sandclock-findings/issues/109) _Submitted by palina_\n- [[N-06] Unused imports](https://github.com/code-423n4/2022-01-sandclock-findings/issues/11) _Submitted by robee, also found by shenwilly and tqts_\n- [[N-07] safeApprove of openZeppelin is deprecated](https://github.com/code-423n4/2022-01-sandclock-findings/issues/24) _Submitted by robee, also found by sirhashalot and WatchPug_\n- [[N-08] Lack of inputs](https://github.com/code-423n4/2022-01-sandclock-findings/issues/61) _Submitted by 0x1f8b_\n- [[N-09] Incorrect use of modifier](https://github.com/code-423n4/2022-01-sandclock-findings/issues/89) _Submitted by ACai_\n- [[N-10] typo miskate in comment](https://github.com/code-423n4/2022-01-sandclock-findings/issues/129) _Submitted by certora, also found by ye0lde_\n- [[N-11] Vault: Spelling Error in comment](https://github.com/code-423n4/2022-01-sandclock-findings/issues/153) _Submitted by hickuphh3_\n- [[N-12] Incomplete natspec comments](https://github.com/code-423n4/2022-01-sandclock-findings/issues/70) _Submitted by kenzo_\n- [[N-13] Inconvenient retrieval of depositors token IDs](https://github.com/code-423n4/2022-01-sandclock-findings/issues/73) _Submitted by kenzo_\n- [[N-14] Account for future reentrancy attacks](https://github.com/code-423n4/2022-01-sandclock-findings/issues/56) _Submitted by p4st13r4_\n- [[N-15] Event ProfitShared in IStrategy is never used](https://github.com/code-423n4/2022-01-sandclock-findings/issues/111) _Submitted by palina_\n- [[N-16] Missing topic in Unsponsored event](https://github.com/code-423n4/2022-01-sandclock-findings/issues/116) _Submitted by palina_\n- [[N-17] Deprecated Trust.sol dependency](https://github.com/code-423n4/2022-01-sandclock-findings/issues/84) _Submitted by sirhashalot_\n\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}