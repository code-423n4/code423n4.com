{
  "circa": {
    "title": "Axelar Network v2 contest",
    "sponsor": "Axelar Network",
    "slug": "2022-07-axelar",
    "date": "2022-10-06",
    "findings": "https://github.com/code-423n4/2022-07-axelar-findings/issues",
    "contest": 149
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Axelar Network v2 smart contract system written in Solidity. The audit contest took place between July 29—August 3 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>80 Wardens contributed reports to the Axelar Network v2 contest:</p>\n<ol>\n<li><a href=\"https://chom.dev\">Chom</a></li>\n<li>xiaoming90</li>\n<li>__141345__</li>\n<li>Lambda</li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li><a href=\"https://twitter.com/RespxR\">Respx</a></li>\n<li>0x52</li>\n<li>cryptphi</li>\n<li><a href=\"https://twitter.com/andyfeili\">oyc_109</a></li>\n<li>IllIllI</li>\n<li>rbserver</li>\n<li><a href=\"https://twitter.com/sm4rtcontr4ct\">JC</a></li>\n<li>Bnke0x0</li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/BowTiedDravee\">Dravee</a></li>\n<li>0x1f8b</li>\n<li><a href=\"https://twitter.com/father0fBl0cks\">fatherOfBlocks</a></li>\n<li><a href=\"https://twitter.com/Deivitto\">Deivitto</a></li>\n<li>ajtra</li>\n<li>robee</li>\n<li>mics</li>\n<li><a href=\"https://github.com/Aymen1001\">Aymen0909</a></li>\n<li><a href=\"https://mobile.twitter.com/tomj_bb\">TomJ</a></li>\n<li>horsefacts</li>\n<li><a href=\"https://twitter.com/Sm4rty_\">Sm4rty</a></li>\n<li>lucacez</li>\n<li><a href=\"https://twitter.com/c3ph_\">c3phas</a></li>\n<li>kyteg</li>\n<li>Rolezn</li>\n<li>simon135</li>\n<li><a href=\"https://twitter.com/0xNazgul\">0xNazgul</a></li>\n<li><a href=\"https://benbaessler.com\">benbaessler</a></li>\n<li>RedOneN</li>\n<li><a href=\"https://twitter.com/ROHANJH56009256\">Rohan16</a></li>\n<li>Waze</li>\n<li>apostle0x01</li>\n<li>djxploit</li>\n<li><a href=\"https://www.linkedin.com/in/georgi-nikolaev-georgiev-978253219\">gogo</a></li>\n<li><a href=\"https://twitter.com/dediranTofunmi\">tofunmi</a></li>\n<li>NoamYakov</li>\n<li>ReyAdmirado</li>\n<li><a href=\"https://twitter.com/Bharg4v\">bharg4v</a></li>\n<li>asutorufos</li>\n<li>bulej93</li>\n<li>CodingNameKiki</li>\n<li><a href=\"https://github.com/lyciumlee\">durianSausage</a></li>\n<li>sashik_eth</li>\n<li><a href=\"https://twitter.com/8olidity\">8olidity</a></li>\n<li><a href=\"https://twitter.com/ElKu_crypto\">ElKu</a></li>\n<li>Noah3o6</li>\n<li><a href=\"https://twitter.com/berndartmueller\">berndartmueller</a></li>\n<li><a href=\"https://twitter.com/hansfriese\">hansfriese</a></li>\n<li>cccz</li>\n<li><a href=\"https://twitter.com/CertoraInc\">CertoraInc</a> (egjlmn1, <a href=\"https://twitter.com/ori_dabush\">OriDabush</a>, ItayG, shakedwinder, and RoiEvenHaim)</li>\n<li><a href=\"http://seanseefried.org/blog\">sseefried</a></li>\n<li>cryptonue</li>\n<li>0xf15ers (remora and twojoy)</li>\n<li><a href=\"https://twitter.com/0xSmartContract\">0xSmartContract</a></li>\n<li>ashiq0x01</li>\n<li>bardamu</li>\n<li>codexploder</li>\n<li><a href=\"https://twitter.com/0xheynacho\">ignacio</a></li>\n<li>Twpony</li>\n<li><a href=\"https://twitter.com/ch13fd357r0y3r\">ch13fd357r0y3r</a></li>\n<li>Yiko</li>\n<li><a href=\"https://milotruck.github.io/\">MiloTruck</a></li>\n<li>0xsam</li>\n<li><a href=\"https://twitter.com/GerdusM\">gerdusx</a></li>\n<li><a href=\"https://twitter.com/mehmeddukov\">medikko</a></li>\n<li><a href=\"https://twitter.com/meidhiwirara\">Tomio</a></li>\n<li><a href=\"guardianaudits.com\">owenthurm</a></li>\n<li><a href=\"https://twitter.com/a12jmx\">a12jmx</a></li>\n<li><a href=\"https://twitter.com/fitraldys\">Fitraldys</a></li>\n<li>ak1</li>\n<li>erictee</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/GalloDaSballo\">Alex the Entreprenerd</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 6 unique vulnerabilities. Of these vulnerabilities, 0 received a risk rating in the category of HIGH severity and 6 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 65 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 56 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-07-axelar\">C4 Axelar Network v2 contest repository</a>, and is composed of 15 smart contracts written in the Solidity programming language and includes 1,813 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"medium-risk-findings-6\" style=\"position:relative;\"><a href=\"#medium-risk-findings-6\" aria-label=\"medium risk findings 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (6)</h1>\n<h2 id=\"m-01-removewrapping-can-be-called-when-there-are-still-wrapped-tokens\" style=\"position:relative;\"><a href=\"#m-01-removewrapping-can-be-called-when-there-are-still-wrapped-tokens\" aria-label=\"m 01 removewrapping can be called when there are still wrapped tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/23\">[M-01] <code>removeWrapping</code> can be called when there are still wrapped tokens</a></h2>\n<p><em>Submitted by Lambda, also found by 0x52 and cryptphi</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/a1205d2ba78e0db583d136f8563e8097860a110f/xc20/contracts/XC20Wrapper.sol#L66\">XC20Wrapper.sol#L66</a><br></p>\n<p>An owner can call <code>removeWrapping</code>, even if there are still circulating wrapped tokens. This will cause the unwrapping of those tokens to fail, as <code>unwrapped[wrappedToken]</code> will be <code>addres(0)</code>.</p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Track how many wrapped tokens are in circulation, only allow the removal of a wrapped tokens when there are 0 to ensure for users that they will always be able to unwrap.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/23#issuecomment-1205933537\">re1ro (Axelar) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Valid observation. We will consider a different approach.</p>\n<p><strong>Mitigation</strong><br>\n<code>removeWrapping</code> method was removed<br>\n<a href=\"https://github.com/axelarnetwork/axelar-xc20-wrapper/pull/4\">https://github.com/axelarnetwork/axelar-xc20-wrapper/pull/4</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/23#issuecomment-1229574297\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The warden has shown how the Admin can remove the mapping that allows to redeem bridged tokens, because this will cause the inability to unwrap, and can be operated by the admin, I agree with Medium Severity.</p>\n<p>The sponsor has confirmed and they have mitigated by removing the function.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-xc20wrapper-may-lose-received-token-forever-if-localassetxc20mint-is-reverted-indefinitely\" style=\"position:relative;\"><a href=\"#m-02-xc20wrapper-may-lose-received-token-forever-if-localassetxc20mint-is-reverted-indefinitely\" aria-label=\"m 02 xc20wrapper may lose received token forever if localassetxc20mint is reverted indefinitely permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/176\">[M-02] <code>XC20Wrapper</code> may lose received token forever if <code>LocalAsset(xc20).mint</code> is reverted indefinitely</a></h2>\n<p><em>Submitted by Chom</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/xc20/contracts/XC20Wrapper.sol#L124-L126\">XC20Wrapper.sol#L124-L126</a><br></p>\n<p>XC20Wrapper may lose received token forever if LocalAsset(xc20).mint is reverted indefinitely.</p>\n<p>Similar to ERC20, the spec said that if mint returns false it means minting is failed. But it is commonly revert instead of returning false which is also a minting failure. XC20 may revert on minting as well and common sense also guiding programmers to use the revert pattern instead of returning false.</p>\n<p>This case is not handled if SC20 minting is reverted indefinitely. No matter how hard you retry the GMP message execution, it always fail thus the token get locked forever.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _executeWithToken(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string calldata,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string calldata,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes calldata payload,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string calldata tokenSymbol,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal override {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address receiver = abi.decode(payload, (address));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address tokenAddress = gateway().tokenAddresses(tokenSymbol);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address xc20 = wrapped[tokenAddress];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (xc20 == address(0) || !LocalAsset(xc20).mint(receiver, amount)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _safeTransfer(tokenAddress, receiver, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<ul>\n<li>Token is sent to gateway before executing the message on the destination chain.</li>\n<li>If <code>_executeWithToken</code> fail, the token remain inside gateway. The only way to use that token is to execute the <code>_executeWithToken</code> succesfully.</li>\n<li>Assume LocalAsset(xc20).mint(…) revert indefinitely, _executeWithToken also revert indefinitely.</li>\n<li>As a result, <code>_executeWithToken</code> never success thus the tokens remain inside gateway forever.</li>\n</ul>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use try catch</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _executeWithToken(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string calldata,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string calldata,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes calldata payload,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string calldata tokenSymbol,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal override {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address receiver = abi.decode(payload, (address));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address tokenAddress = gateway().tokenAddresses(tokenSymbol);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address xc20 = wrapped[tokenAddress];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (xc20 == address(0)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _safeTransfer(tokenAddress, receiver, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        try LocalAsset(xc20).mint(receiver, amount) returns (bool success) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            if (!success) _safeTransfer(tokenAddress, receiver, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        } catch { _safeTransfer(tokenAddress, receiver, amount); }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/176#issuecomment-1206266860\">re1ro (Axelar) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p><strong>Mitigation</strong><br>\nWe addressed the issue with introducing <code>_safeMint</code> function<br>\n<a href=\"https://github.com/axelarnetwork/axelar-xc20-wrapper/pull/4\">https://github.com/axelarnetwork/axelar-xc20-wrapper/pull/4</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/176#issuecomment-1236396995\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The warden states that <code>mint()</code> may fail and cause a revert instead of returning false.</p>\n<p>With the code in scope we can check the used ERC20 implementation and we find:</p>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/xc20/contracts/ERC20.sol#L187-L188\">ERC20.sol#L187-L188</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">account</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidAccount</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p>Because a revert can happen, the scenario, which hypothetically would brick the functionality can actually happen.</p>\n<p>We may also have reverts due to overflow and underflow.</p>\n<p>Because the code is built to assume that no revert can happen, but the warden demonstrated how a revert could factually happen, I do agree with Medium Severity.</p>\n<p>The sponsor has mitigated by using <code>_safeMint</code>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-system-will-not-work-anymore-after-eip-4758\" style=\"position:relative;\"><a href=\"#m-03-system-will-not-work-anymore-after-eip-4758\" aria-label=\"m 03 system will not work anymore after eip 4758 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/20\">[M-03] System will not work anymore after EIP-4758</a></h2>\n<p><em>Submitted by Lambda, also found by Chom</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/a46fa61e73dd0f3469c0263bc6818e682d62fb5f/contracts/deposit-service/DepositReceiver.sol#L25\">DepositReceiver.sol#L25</a><br></p>\n<p>After <a href=\"https://eips.ethereum.org/EIPS/eip-4758\">EIP-4758</a>, the <code>SELFDESTRUCT</code> op code will no longer be available. According to the EIP, “The only use that breaks is where a contract is re-created at the same address using CREATE2 (after a SELFDESTRUCT)“. Axelar is exactly such an application, the current deposit system will no longer work.</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>To avoid that Axelar simply stops working one day, the architecture should be changed. Instead of generating addresses for every user, the user could directly interact with the deposit service and the deposit service would need to keep track of funds and provide refunds directly.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/20#issuecomment-1205926507\">re1ro (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>Very good spot. We will address this.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/20\">re1ro (Axelar) acknowledged</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/20#issuecomment-1236399840\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The warden has shown a plausible upgrade path for Ethereum that will remove the <code>SELFDESTRUCT</code> opcode, bricking the <code>DepositReceiver</code> functionality.</p>\n<p>If the fork was in place today, the code would be broken, and the finding should be of high severity.</p>\n<p>Because the fork is not in place, and no clear timeline is defined for “The Purge”, I think Medium Severity to be correct.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-previous-operatorsweightsthreshold-are-still-able-to-sign-off-new-commands-after-operatorship-is-transferred\" style=\"position:relative;\"><a href=\"#m-04-previous-operatorsweightsthreshold-are-still-able-to-sign-off-new-commands-after-operatorship-is-transferred\" aria-label=\"m 04 previous operatorsweightsthreshold are still able to sign off new commands after operatorship is transferred permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/156\">[M-04] Previous {Operators/Weights/Threshold} Are Still Able To Sign Off New Commands After Operatorship Is Transferred</a></h2>\n<p><em>Submitted by xiaoming90</em></p>\n<p>The administrator will call <code>AxelarAuthWeighted.transferOperatorship</code> function to transfer the operatorship to a new set of {Operators/Weights/Threshold}.</p>\n<p>However, it was observed that after transferring the operatorship to a new set of {Operators/Weights/Threshold}, the previous sets of {Operators/Weights/Threshold} are still able to generate a valid proof, and subsequently execute the command.</p>\n<p>The following piece of code shows that as long as valid proof is submitted, the commands will be executed by the system.</p>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/3729dd4aeff8dc2b8b9c3670a1c792c81fc60e7c/contracts/AxelarGateway.sol#L262\">AxelarGateway.sol#L262</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">input</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proof</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">input</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">messageHash</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ECDSA</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toEthSignedMessageHash</span><span class=\"mtk1\">(</span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// TEST auth and getaway separately</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentOperators</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IAxelarAuth</span><span class=\"mtk1\">(</span><span class=\"mtk12\">AUTH_MODULE</span><span class=\"mtk1\">).</span><span class=\"mtk11\">validateProof</span><span class=\"mtk1\">(</span><span class=\"mtk12\">messageHash</span><span class=\"mtk1\">, </span><span class=\"mtk12\">proof</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t..</span><span class=\"mtk12\">SNIP</span><span class=\"mtk1\">..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The following piece of code shows that the past 16 sets of {Operators/Weights/Threshold} are considered valid and can be used within the <a href=\"https://github.com/code-423n4/2022-07-axelar/blob/3729dd4aeff8dc2b8b9c3670a1c792c81fc60e7c/contracts/auth/AxelarAuthWeighted.sol#L86\"><code>AxelarAuthWeighted._validateSignatures</code></a> function. Thus, the past 16 sets of {Operators/Weights/Threshold} are able to sign and submit a valid proof, and the proof will be accepted by the <code>AxelarAuthWeighted.validateProof</code> that allows them to execute the commands.</p>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L36\">AxelarAuthWeighted.sol#L36</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">OLD_KEY_RETENTION</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">16</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">validateProof</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">messageHash</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">proof</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentOperators</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">weights</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">threshold</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">signatures</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">proof</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[], </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[], </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operatorsHash</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">operators</span><span class=\"mtk1\">, </span><span class=\"mtk12\">weights</span><span class=\"mtk1\">, </span><span class=\"mtk12\">threshold</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operatorsEpoch</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">epochForHash</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operatorsHash</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">epoch</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">currentEpoch</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">operatorsEpoch</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">epoch</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">operatorsEpoch</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">OLD_KEY_RETENTION</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidOperators</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">_validateSignatures</span><span class=\"mtk1\">(</span><span class=\"mtk12\">messageHash</span><span class=\"mtk1\">, </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">, </span><span class=\"mtk12\">weights</span><span class=\"mtk1\">, </span><span class=\"mtk12\">threshold</span><span class=\"mtk1\">, </span><span class=\"mtk12\">signatures</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">currentOperators</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">operatorsEpoch</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">epoch</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Understood from the team that the reason for allowing past 16 sets of {Operators/Weights/Threshold} is that after a transfer of operatorship, the commands that were signed recently but have not been executed yet will not become invalid. Further understood from the team the operatorship transfer is performed when there is a significant change in stake distribution on the Axelar network.</p>\n<p>It makes sense for commands that were already signed recently by past operators before the operatorship transfer to be executable. However, based on the current design, it is also possible for the past 16 sets of {Operators/Weights/Threshold} to submit a new valid proof/signature for new commands to be executed after the operatorship transfer, and the <code>AxelarAuthWeighted._validateSignatures</code> function will happily accept the proof/signature, which should not be allowed.</p>\n<p>It was understood that the operatorship transfer is performed when there is a significant change in stake distribution on the Axelar network, therefore, it does not make sense for all the past 16 sets of {Operators/Weights/Threshold} to be still able to sign and execute new commands after the operatorship transfer, because they follow the old stake distribution that is no longer considered as valid.</p>\n<p>Only the current set of operators and its stake distribution should be used to verify any new command signed and issued after the operatorship transfer.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof-of-Concept</h3>\n<p>Assuming that there are 3 validators (Alice, Bob and Charles)</p>\n<h4 id=\"operation-at-time-1-t1\" style=\"position:relative;\"><a href=\"#operation-at-time-1-t1\" aria-label=\"operation at time 1 t1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operation at Time 1 (T1)</h4>\n<p>At T1, the following is the state:</p>\n<blockquote>\n<p>currentEpoch = 1</p>\n<p>hashForEpoch[Epoch 1] = {operators: [Alice, Bob, Charles], weights: [0.5, 0.25, 0.25], threshold: 0.5} convert to hash</p>\n</blockquote>\n<p>At T1, Alice could submit the following input to <code>AxelarGateway.execute(bytes calldata input)</code> function to execute the commands:</p>\n<blockquote>\n<p>input = {</p>\n<p>​\tbytes memory data = commands to be executed</p>\n<p>​\tbytes memory proof = {operators: [Alice, Bob, Charles], weights: [0.5, 0.25, 0.25], threshold: 0.5, signatures: [Alice’s signature]}</p>\n<p>}</p>\n</blockquote>\n<p>Since Alice’s signature weight is 0.5, having Alice’s signature alone is sufficient to meet the threshold of 0.5 and the commands will be executed.</p>\n<h4 id=\"operation-at-time-2-t2\" style=\"position:relative;\"><a href=\"#operation-at-time-2-t2\" aria-label=\"operation at time 2 t2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operation at Time 2 (T2)</h4>\n<p>At T2, the Axelar administrator decided to change the stake distribution. The admin called the <code>AxelarAuthWeighted.transferOperatorship</code> and change the state to as follows:</p>\n<blockquote>\n<p>currentEpoch = 2</p>\n<p>hashForEpoch[Epoch 2] = {operators: [Alice, Bob, Charles], weights: [0.25, 0.4, 0.4], threshold: 0.5} convert to hash &#x3C;== newly added</p>\n<p>hashForEpoch[Epoch 1] = {operators: [Alice, Bob, Charles], weights: [0.5, 0.25, 0.25], threshold: 0.5} convert to hash</p>\n</blockquote>\n<p>At T2, Alice’s weight has reduced from <code>0.5</code> to <code>0.25</code>. As per the current stake distribution, Alice’s signature alone is not sufficient to meet the threshold of <code>0.5</code>. Thus, she is not able to execute any new command without an additional signature from Bob or Charles.</p>\n<p>However, note that the past 16 sets of {operators/weights/threshold} are considered valid by the system, so in another word, all the past 16 stake distributions are considered valid too.</p>\n<p>Thus, Alice simply needs to re-use back to the previous set of {operators/weights/threshold} in Epoch 1 and she can continue to execute new commands without the signature of Bob or Charles, thus bypassing the current stake distribution.</p>\n<p>At T2, Alice could still submit the following input to <code>AxelarGateway.execute(bytes calldata input)</code> function with only Alice’s signature to execute the command:</p>\n<blockquote>\n<p>input = {</p>\n<p>​\tbytes memory data = commands to be executed</p>\n<p>​\tbytes memory proof = {operators: [Alice, Bob, Charles], weights: [0.5, 0.25, 0.25], threshold: 0.5, signatures: [Alice’s signature]}</p>\n<p>}</p>\n</blockquote>\n<p>No additional signature from Bob or Charles is needed.</p>\n<p>Following is from Epoch 1</p>\n<blockquote>\n<p>{operators: [Alice, Bob, Charles], weights: [0.5, 0.25, 0.25], threshold: 0.5</p>\n</blockquote>\n<h4 id=\"operator-address-changed-after-operatorship-is-being-transferred\" style=\"position:relative;\"><a href=\"#operator-address-changed-after-operatorship-is-being-transferred\" aria-label=\"operator address changed after operatorship is being transferred permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operator Address Changed After Operatorship Is Being Transferred</h4>\n<p>Noted from the discord channel the following clarification from the team.</p>\n<blockquote>\n<p>Based on couple of questions I have received, I’d like to clarify one assumption we are making for the contracts (which is enforced at the axelar proof of stake network):\nOperators correspond to validators on the Axelar network. However, the operator address for a given epoch is derived from the validator key along with a nonce that is unique for each operator epoch.\ni.e Whenever operatorship is being transferred, an honest validator will always generate a new operator address (and not reuse their old one) due to a nonce.</p>\n</blockquote>\n<p>With this control in place, even if the validator has generated a new operator address after the operatorship has been transferred, it is still possible for the validator to re-use back the old operator address and sign the command as the validator is aware of the private key needed to sign on behalf of the old operator address. Thus, the above issue still exists.</p>\n<p>Additionally, there is always a risk of a “dishonest” validator not generating a new operator address after operatorship is being transferred if the new stake distribution does not benefit them. In the above example, Alice who has its weightage reduced from 0.5 to 0.25 do not see the benefit of the new stake distribution can decide not to generate a new operator address and continue to use the old operator address that allowed her to sign and execute any command without an additional signature from Bob or Charles.</p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Current stake distribution can be bypassed.</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider updating the system to ensure that the following requirements are followed:</p>\n<ul>\n<li>Command signed by the past 16 sets of {operators/weights/threshold} AFTER the operatorship transfer should not be executable and should be rejected. Only commands signed by the current set of {operators/weights/threshold} AFTER the operatorship transfer should be accepted and executable.</li>\n<li>Commands signed by the past 16 sets of {operators/weights/threshold} BEFORE the operatorship transfer should be accepted and executable.</li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/156#issuecomment-1206201357\">re1ro (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>Good spot.<br>\nI think we could include the timestamps to prevent old operators to sing any new commands.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/156#issuecomment-1236421534\">Alex the Entreprenerd (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Per the Warden POC - Stake Distribution from past epochs is not changed, meaning a <code>transferOperatorship</code> called by the <code>owner</code> with the goal of reducing weights for a specific operator will be circumventable.</p>\n<p>This implies:</p>\n<ul>\n<li>Ability to sidestep coded logic and code intent -> Broken Invariants</li>\n<li>Inability to kick a malicious operator (unless you use the 16 times transferOperatorship exploit shown from other reports)</li>\n</ul>\n<p>The “need to remove a bad operator” is definitely contingent on setup, so Medium Severity is definitely fair.</p>\n<p>I’ll think about raising or keeping as Med.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/156#issuecomment-1238533547\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>In contrast to other reports, this submission shows a reasonable path forward to invalidate old operators, while allowing them to re-try old commands.</p>\n<p>For this reason I think this is distinct from <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/19\">#19</a> etc.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-change-of-operators-possible-from-old-operators\" style=\"position:relative;\"><a href=\"#m-05-change-of-operators-possible-from-old-operators\" aria-label=\"m 05 change of operators possible from old operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/19\">[M-05] Change of operators possible from old operators</a></h2>\n<p><em>Submitted by Lambda, also found by Respx and Ruhum</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/3373c48a71c07cfce856b53afc02ef4fc2357f8c/contracts/AxelarGateway.sol#L268\">AxelarGateway.sol#L268</a><br>\n<a href=\"https://github.com/code-423n4/2022-07-axelar/blob/3373c48a71c07cfce856b53afc02ef4fc2357f8c/contracts/AxelarGateway.sol#L311\">AxelarGateway.sol#L311</a><br></p>\n<p>According to the specifications, only the current operators should be able to transfer operatorship. However, there is one way to circumvent this. Because currentOperators is not updated in the loop, when multiple <code>transferOperatorship</code> commands are submitted in the same <code>execute</code> call, all will succeed. After the first one, the operators that signed these commands are no longer the current operators, but the call will still succeed.</p>\n<p>This also means that one set of operators could submit so many <code>transferOperatorship</code> commands in one <code>execute</code> call that <code>OLD_KEY_RETENTION</code> is reached for all other ones, meaning they would control complete set of currently valid operators.</p>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Set <code>currentOperators</code> to <code>false</code> when the operators were changed.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/19#issuecomment-1205925612\">re1ro (Axelar) confirmed, but disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>This case would never occur in practice because our command batches are produced and signed by the Axelar nerwork.\nSo there would be never 2 <code>transferOperatorship</code> commands in the same batch. </p>\n<p>In general if the recent operators turn malicious they can overtake the gateway disregarding this finding.</p>\n<p><strong>Mitigation</strong><br>\nWe still have added the sanity check to set <code>currentOperators</code> to <code>false</code>.<br>\n<a href=\"https://github.com/axelarnetwork/axelar-cgp-solidity/pull/138\">https://github.com/axelarnetwork/axelar-cgp-solidity/pull/138</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/19#issuecomment-1226049092\">milapsheth (Axelar) commented</a>:</strong></p>\n<blockquote>\n<p>For more context, the current operators could just easily transfer the operatorship in multiple txs instead. We heavily rely on the assumption the majority of the operators by weight are not malicious.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/19#issuecomment-1236399493\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Very interesting find.</p>\n<p>Per the warden submission: the operators can sign a <code>transferOperatorship</code> and then still act as if they are the current operator while their calls are being executed.</p>\n<p>This can be further extended to perform more than <code>OLD_KEY_RETENTION</code> to invalidate all old keys, which may be desirable or a malicious attack depending on context.</p>\n<p>The sponsor disagrees with severity, citing that the main assumption of the code is that operators by weight are non malicious</p>\n<p>Personally I think the finding:</p>\n<ul>\n<li>Breaks an assumption of the code (current operators exclusively can <code>transferOperatorship</code>)</li>\n<li>Allows the operators to kick old operators in one tx instead of <code>OLD_KEY_RETENTION</code> txs</li>\n</ul>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/19#issuecomment-1236440077\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>With the information that I have, considering that:</p>\n<ul>\n<li>Breaks an assumption of the code (current operators exclusively can transferOperatorship)</li>\n<li>Allows the operators to kick old operators in one tx instead of OLD<em>KEY</em>RETENTION txs</li>\n</ul>\n<p>Because this is contingent on a malicious majority, and considering that a malicious majority can perform even worse attacks (DOS, TX Censoring, Shutting down the chain)</p>\n<p>I believe that Medium Severity is correct.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-06-add-cancel-and-refund-option-for-transaction-recovery\" style=\"position:relative;\"><a href=\"#m-06-add-cancel-and-refund-option-for-transaction-recovery\" aria-label=\"m 06 add cancel and refund option for transaction recovery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/139\">[M-06] Add cancel and refund option for Transaction Recovery</a></h2>\n<p><em>Submitted by __141345__</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L262\">AxelarGateway.sol#L262</a><br>\n<a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L98\">AxelarGasService.sol#L98</a><br>\n<a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L110\">AxelarGasService.sol#L110</a><br></p>\n<p>Transactions could fail or get stuck, according to the documentation:</p>\n<blockquote>\n<p>Occasionally, transactions can get “stuck” in the pipeline from a source to destination chain (e.g. due to one-off issues that arise with relayers that operate on top of the network).</p>\n<p>Transactions have typically gotten “stuck” in the pipeline due to: (A) The transaction failing to relay from the source chain into the Axelar network for processing. (B) The transaction failing to get executed on the destination chain.</p>\n</blockquote>\n<p>And there are several options provided:</p>\n<ul>\n<li>manual approve</li>\n<li>manual execute</li>\n<li>add gas</li>\n</ul>\n<p>However, some transactions’ execution depend on the time or certain condition. For example, some transaction has a deadline, it the deadline is passed, the transaction will be invalid. Or some conditions may be temporary, for example, some certain price difference for some token pair. In this case, the failed transactions will be meaningless to redo, the appropriate method is to cancel the transaction and refund. If no such option is provided, users’ fund for this transaction would be lock or loss.</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">approveContractCall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">input</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGasService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addGas</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addNativeGas</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {}</span></span></span></code></pre>\n<p>The options are <code>approveContractCall()</code>, <code>execute</code>, <code>addGas()</code> and <code>addNativeGas()</code> are available, but no cancel and refund option.</p>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Provide a cancel option if the transaction failed, from the source chain or destination chain, and allow the user to get the gas refund.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/139#issuecomment-1206146400\">re1ro (Axelar) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>At this point this functionality can be implemented by the user in their Executable contract by the application. Axelar is providing a ground level cross-chain communication protocol. </p>\n<p>Refunds and deadline based cancel are very application specific cases and shouldn’t be implemented on the protocol level. Some refunds could require manual intervention and it won’t be scaleable for us to provide such support of all the applications built on top of Axelar. Especially considering that data related to expiration or price difference will be encoded inside of the payload and Axelar is not aware of the payload encoding.</p>\n<p>It shouldn’t be too difficult to implement. In this example we will send it back to the original chain: </p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _executeWithToken(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string memory sourceChain,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string memory sourceAddress,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes calldata payload,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string memory tokenSymbol,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal override {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (price difference for some token pair &gt; limit) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            IERC20(token).approve(address(gateway), amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            gateway.sendToken(sourceChain, sourceAddress, tokenSymbol, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            return;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       . . .     </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   }</span></span></code></pre>\n<p>We will consider adding basic implementation of such methods to our <code>AxelarExecutable</code> so it can be adapted by the applications. We will have a better idea of the requirements when there will be more applications built on top. Good spot.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/139#issuecomment-1236442434\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The warden has shown that the system in scope has no way to “cancel and refund” a transaction, while the details for impact are implementation dependent, allowing canceling tx that are failing to be relayed will help integrators in the worst case.</p>\n<p>While impact is hard to quantify because the expected value of the operation by the caller should be higher than the gas paid, the actual loss in the stated case is that of the gas cost of the transaction.</p>\n<p>While minor, given the fact that it is not recoverable, given the value of the submission and the acknowledgment by the sponsor, I think Medium Severity to be appropriate.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/139#issuecomment-1247489061\">re1ro (Axelar) disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>We disagree with severity.<br>\nTransactions are recoverable/refundable. There is nothing preventing it to be recovered from our protocol perspective. It’s just that we don’t suggest any default mechanism for this.</p>\n<p>Refund and cancel methods are up to the cross-chain app developer to implement. It very application specific and it’s not up for us to decide how and what should be recovered/refunded. For some application execution deadline could be a trigger to refund, for others - price slippage. Even if transaction reverts it will restore the gateway approval and can be retried or refunded.</p>\n<p>Again it is not responsibility of the protocol but rather an application specific logic. We marked it as acknowledged because we agree we should provide some guidelines and examples for this in our docs. But there is no outstanding issue in this regard.</p>\n</blockquote>\n<p><strong>Please note: the following took place after judging and awarding were finalized.</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/139#issuecomment-1268881479\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I believe the Sponsor’s counterargument to be valid and invite end users to make up their own opinion.</p>\n<p>Ultimately the presence or absence of an app-specific refund is dependent on the implementation.</p>\n<p>I chose to give Medium Severity in view of the risk for end-users, however, I could have rated with QA given a different context.</p>\n<p>I invite end-users to make up their own opinion and thank the sponsor for their insight.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 65 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/8\">report highlighted below</a> by <strong>oyc_109</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/116\">rbserver</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/121\">IllIllI</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/53\">Bnke0x0</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/182\">defsec</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/168\">xiaoming90</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/187\">horsefacts</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/232\">JC</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/16\">robee</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/88\">0x52</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/226\">Dravee</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/27\">mics</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/185\">Chom</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/120\">0x1f8b</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/138\">berndartmueller</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/52\">fatherOfBlocks</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/198\">Sm4rty</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/129\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/184\">Aymen0909</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/213\">c3phas</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/150\">Deivitto</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/70\">lucacez</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/146\">__141345__</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/207\">Rohan16</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/205\">Waze</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/103\">kyteg</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/3\">Rolezn</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/160\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/196\">CertoraInc</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/21\">Lambda</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/172\">simon135</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/131\">Respx</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/73\">0xNazgul</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/200\">ajtra</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/46\">Ruhum</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/153\">benbaessler</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/97\">sseefried</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/217\">bharg4v</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/180\">cryptonue</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/83\">RedOneN</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/189\">0xf15ers</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/84\">0xSmartContract</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/12\">8olidity</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/169\">apostle0x01</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/95\">ashiq0x01</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/230\">bardamu</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/107\">bulej93</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/123\">codexploder</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/81\">CodingNameKiki</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/136\">cryptphi</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/183\">djxploit</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/15\">durianSausage</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/93\">ElKu</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/209\">gogo</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/4\">ignacio</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/66\">Noah3o6</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/192\">sashik_eth</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/60\">tofunmi</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/75\">TomJ</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/188\">Twpony</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/6\">ch13fd357r0y3r</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/218\">NoamYakov</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/48\">ReyAdmirado</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/215\">asutorufos</a>, and <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/118\">Yiko</a>.</em></p>\n<h2 id=\"l-01-unused-receive-function\" style=\"position:relative;\"><a href=\"#l-01-unused-receive-function\" aria-label=\"l 01 unused receive function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-01] Unused receive() function</h2>\n<p>If the intention is for the Ether to be used, the function should call another function, otherwise it should revert</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">AxelarDepositServiceProxy.sol::13 =&gt; receive() external payable override {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">DepositReceiver.sol::29 =&gt; receive() external payable {}</span></span></code></pre>\n<h2 id=\"l-02-decimals-not-part-of-erc20-standard\" style=\"position:relative;\"><a href=\"#l-02-decimals-not-part-of-erc20-standard\" aria-label=\"l 02 decimals not part of erc20 standard permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-02] decimals() not part of ERC20 standard</h2>\n<p>decimals() is not part of the official ERC20 standard and might fail for tokens that do not implement it. While in practice it is very unlikely, as usually most of the tokens implement it, this should still be considered as a potential issue.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">XC20Wrapper.sol::62 =&gt; if (!LocalAsset(xc20Token).set_metadata(newName, newSymbol, IERC20(axelarToken).decimals())) revert(&#39;CannotSetMetadata()&#39;);</span></span></code></pre>\n<h2 id=\"l-03-unsafe-use-of-transfertransferfrom-with-ierc20\" style=\"position:relative;\"><a href=\"#l-03-unsafe-use-of-transfertransferfrom-with-ierc20\" aria-label=\"l 03 unsafe use of transfertransferfrom with ierc20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-03] Unsafe use of transfer()/transferFrom() with IERC20</h2>\n<p>Some tokens do not implement the ERC20 standard properly but are still accepted by most code that accepts ERC20 tokens. For example Tether (USDT)‘s transfer() and transferFrom() functions do not return booleans as the specification requires, and instead have no return value. When these sorts of tokens are cast to IERC20, their function signatures do not match and therefore the calls made, revert. Use OpenZeppelin’s SafeERC20’s safeTransfer()/safeTransferFrom() instead</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">AxelarGasService.sol::128 =&gt; if (amount &gt; 0) receiver.transfer(amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">AxelarGasService.sol::144 =&gt; receiver.transfer(amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ReceiverImplementation.sol::23 =&gt; if (address(this).balance &gt; 0) refundAddress.transfer(address(this).balance);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ReceiverImplementation.sol::51 =&gt; if (address(this).balance &gt; 0) refundAddress.transfer(address(this).balance);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ReceiverImplementation.sol::71 =&gt; if (address(this).balance &gt; 0) refundAddress.transfer(address(this).balance);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ReceiverImplementation.sol::86 =&gt; recipient.transfer(amount);</span></span></code></pre>\n<h2 id=\"l-04-missing-checks-for-zero-address\" style=\"position:relative;\"><a href=\"#l-04-missing-checks-for-zero-address\" aria-label=\"l 04 missing checks for zero address permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-04] Missing checks for zero address</h2>\n<p>Checking addresses against zero-address during initialization or during setting is a security best-practice. However, such checks are missing in address variable initializations/changes in many places.</p>\n<p>Impact: Allowing zero-addresses will lead to contract reverts and force redeployments if there are no setters for such address variables.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"229\"></span><span class=\"grvsc-source\">https:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"19\"></span><span class=\"grvsc-source\">https:</span></span></code></pre>\n<h2 id=\"n-01-use-a-more-recent-version-of-solidity\" style=\"position:relative;\"><a href=\"#n-01-use-a-more-recent-version-of-solidity\" aria-label=\"n 01 use a more recent version of solidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-01] Use a more recent version of solidity</h2>\n<p>Use a solidity version of at least 0.8.4 to get bytes.concat() instead of abi.encodePacked(<bytes>,<bytes>)\nUse a solidity version of at least 0.8.12 to get string.concat() instead of abi.encodePacked(<str>,<str>)\nUse a solidity version of at least 0.8.13 to get the ability to use using for with a list of free functions</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">AxelarAuthWeighted.sol::3 =&gt; pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">AxelarDepositServiceProxy.sol::3 =&gt; pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">AxelarDepositService.sol::3 =&gt; pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">AxelarGasServiceProxy.sol::3 =&gt; pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">AxelarGasService.sol::3 =&gt; pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">AxelarGateway.sol::3 =&gt; pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">DepositBase.sol::3 =&gt; pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">DepositReceiver.sol::3 =&gt; pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">IAxelarAuth.sol::3 =&gt; pragma solidity ^0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">IAxelarAuthWeighted.sol::3 =&gt; pragma solidity ^0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">IAxelarDepositService.sol::3 =&gt; pragma solidity ^0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">IAxelarGasService.sol::3 =&gt; pragma solidity ^0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">IDepositBase.sol::3 =&gt; pragma solidity ^0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">ReceiverImplementation.sol::3 =&gt; pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">XC20Wrapper.sol::3 =&gt; pragma solidity 0.8.9;</span></span></code></pre>\n<h2 id=\"n-02-unspecific-compiler-version-pragma\" style=\"position:relative;\"><a href=\"#n-02-unspecific-compiler-version-pragma\" aria-label=\"n 02 unspecific compiler version pragma permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-02] Unspecific Compiler Version Pragma</h2>\n<p>Avoid floating pragmas for non-library contracts.</p>\n<p>While floating pragmas make sense for libraries to allow them to be included with multiple different versions of applications, it may be a security risk for application implementations.</p>\n<p>A known vulnerable compiler version may accidentally be selected or security tools might fall-back to an older compiler version ending up checking a different EVM compilation that is ultimately deployed on the blockchain.</p>\n<p>It is recommended to pin to a concrete compiler version.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">IAxelarAuth.sol::3 =&gt; pragma solidity ^0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">IAxelarAuthWeighted.sol::3 =&gt; pragma solidity ^0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">IAxelarDepositService.sol::3 =&gt; pragma solidity ^0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">IAxelarGasService.sol::3 =&gt; pragma solidity ^0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">IDepositBase.sol::3 =&gt; pragma solidity ^0.8.9;</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/8#issuecomment-1205893984\">re1ro (Axelar) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p><strong>[L-01]</strong><br>\nNot applicable. We need <code>receive</code> to receive ether from <code>WETH</code> contract.</p>\n<p><strong>[L-02]</strong><br>\nNot applicable. <code>axelarToken</code> is our own implementation in this context and it implements <code>decimals</code></p>\n<p><strong>[L-03]</strong><br>\nNope.</p>\n<p><strong>[L-04]</strong><br>\nYes.</p>\n<p><strong>[N-01]</strong><br>\nWe allow Unspecific Compiler version for our interfaces, so they can be imported by other projects</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/8#issuecomment-1233585799\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p><strong>[L-01] Unused receive() function</strong><br>\nFor the proxy<br>\nLow</p>\n<p><strong>[L-02] decimals() not part of ERC20 standard</strong><br>\nLow</p>\n<p><strong>[L-03] Unsafe use of transfer()/transferFrom() with IERC20</strong><br>\nLow</p>\n<p><strong>[L-04] Missing checks for zero address</strong><br>\nLow</p>\n<p><strong>[N-01] Use a more recent version of solidity</strong><br>\nNon-critical</p>\n<p><strong>[N-02] Unspecific Compiler Version Pragma</strong><br>\nNon-critical</p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 56 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/122\">report highlighted below</a> by <strong>IllIllI</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/231\">JC</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/211\">Dravee</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/113\">0x1f8b</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/177\">ajtra</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/13\">Bnke0x0</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/225\">defsec</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/149\">Deivitto</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/51\">fatherOfBlocks</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/7\">oyc_109</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/173\">Aymen0909</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/174\">MiloTruck</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/181\">TomJ</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/45\">Ruhum</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/148\">__141345__</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/72\">0xNazgul</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/64\">0xsam</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/170\">apostle0x01</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/151\">benbaessler</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/179\">djxploit</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/154\">gerdusx</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/191\">gogo</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/104\">kyteg</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/18\">Lambda</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/69\">lucacez</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/234\">medikko</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/221\">NoamYakov</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/126\">rbserver</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/82\">RedOneN</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/47\">ReyAdmirado</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/17\">robee</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/2\">Rolezn</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/171\">simon135</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/59\">tofunmi</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/115\">Tomio</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/86\">Respx</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/222\">asutorufos</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/223\">bharg4v</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/106\">bulej93</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/204\">Chom</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/57\">CodingNameKiki</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/14\">durianSausage</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/28\">mics</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/92\">owenthurm</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/208\">Rohan16</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/202\">sashik_eth</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/199\">Sm4rty</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/197\">Waze</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/233\">a12jmx</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/224\">Fitraldys</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/11\">8olidity</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/190\">ak1</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/214\">c3phas</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/94\">ElKu</a>, <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/49\">erictee</a>, and <a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/67\">Noah3o6</a>.</em></p>\n<h2 id=\"summary-1\" style=\"position:relative;\"><a href=\"#summary-1\" aria-label=\"summary 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[G‑01]</td>\n<td align=\"left\">Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</td>\n<td align=\"center\">7</td>\n</tr>\n<tr>\n<td>[G‑02]</td>\n<td align=\"left\">Avoid contract existence checks by using solidity version 0.8.10 or later</td>\n<td align=\"center\">25</td>\n</tr>\n<tr>\n<td>[G‑03]</td>\n<td align=\"left\"><code>internal</code> functions only called once can be inlined to save gas</td>\n<td align=\"center\">7</td>\n</tr>\n<tr>\n<td>[G‑04]</td>\n<td align=\"left\"><code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</td>\n<td align=\"center\">7</td>\n</tr>\n<tr>\n<td>[G‑05]</td>\n<td align=\"left\"><code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>[G‑06]</td>\n<td align=\"left\"><code>keccak256()</code> should only need to be called on a specific string literal once</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>[G‑07]</td>\n<td align=\"left\">Optimize names to save gas</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td>[G‑08]</td>\n<td align=\"left\"><code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>[G‑09]</td>\n<td align=\"left\">Empty blocks should be removed or emit something</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[G‑10]</td>\n<td align=\"left\">Functions guaranteed to revert when called by normal users can be marked <code>payable</code></td>\n<td align=\"center\">11</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 90 instances over 10 issues</p>\n<h2 id=\"g01--using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" style=\"position:relative;\"><a href=\"#g01--using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" aria-label=\"g01  using calldata instead of memory for read only arguments in external functions saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑01]  Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</h2>\n<p>When a function with a <code>memory</code> array is called externally, the <code>abi.decode()</code> step has to use a for-loop to copy each index of the <code>calldata</code> to the <code>memory</code> index. <strong>Each iteration of this for-loop costs at least 60 gas</strong> (i.e. <code>60 * &#x3C;mem_array>.length</code>). Using <code>calldata</code> directly, obliviates the need for such a loop in the contract code and runtime execution. Note that even if an interface defines a function as having <code>memory</code> arguments, it’s still valid for implementation contracs to use <code>calldata</code> arguments instead.</p>\n<p>If the array is passed to an <code>internal</code> function which passes the array to another internal function where the array is modified and therefore <code>memory</code> is used in the <code>external</code> call, it’s still more gass-efficient to use <code>calldata</code> when the <code>external</code> function uses modifiers, since the modifiers may prevent the internal functions from being called. Structs have the same overhead as an array of length one</p>\n<p>Note that I’ve also flagged instances where the function is <code>public</code> but can be marked as <code>external</code> since it’s not called by the contract, and cases where a constructor is involved</p>\n<p><em>There are 7 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">auth</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarAuthWeighted</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit recentOperators</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">16</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">recentOperators</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L16\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L16</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">172</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tokenFrozen</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit executeData</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">447</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_unpackLegacyCommands</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">executeData</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">448           </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">449           </span><span class=\"mtk11\">pure</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">450           </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">451               </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">chainId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">452               </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">commandIds</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">453               </span><span class=\"mtk12\">string</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">commands</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">454:              </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">params</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L172\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L172</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarDepositService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit wrappedSymbol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">18</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">, </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wrappedSymbol</span><span class=\"mtk1\">) </span><span class=\"mtk11\">DepositBase</span><span class=\"mtk1\">(</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">, </span><span class=\"mtk12\">wrappedSymbol</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L18\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L18</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">DepositReceiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit delegateData</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">8</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">delegateData</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/DepositReceiver.sol#L8\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/DepositReceiver.sol#L8</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ReceiverImplementation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit wrappedSymbol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">12</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">, </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wrappedSymbol</span><span class=\"mtk1\">) </span><span class=\"mtk11\">DepositBase</span><span class=\"mtk1\">(</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">, </span><span class=\"mtk12\">wrappedSymbol</span><span class=\"mtk1\">) {}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/ReceiverImplementation.sol#L12\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/ReceiverImplementation.sol#L12</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGasService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit symbol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">35</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payGasForContractCallWithToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">36            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">37            </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">38            </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destinationAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">39            </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">40            </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">41            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">42            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gasToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">43            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gasFeeAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">44:           </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">refundAddress</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L35-L44\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L35-L44</a></p>\n<h2 id=\"g02--avoid-contract-existence-checks-by-using-solidity-version-0810-or-later\" style=\"position:relative;\"><a href=\"#g02--avoid-contract-existence-checks-by-using-solidity-version-0810-or-later\" aria-label=\"g02  avoid contract existence checks by using solidity version 0810 or later permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑02]  Avoid contract existence checks by using solidity version 0.8.10 or later</h2>\n<p>Prior to 0.8.10 the compiler inserted extra code, including <code>EXTCODESIZE</code> (<strong>100 gas</strong>), to check for contract existence for external calls. In more recent solidity versions, the compiler will not insert these checks if the external call has a return value</p>\n<p><em>There are 25 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit validateProof()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">268</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentOperators</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IAxelarAuth</span><span class=\"mtk1\">(</span><span class=\"mtk12\">AUTH_MODULE</span><span class=\"mtk1\">).</span><span class=\"mtk11\">validateProof</span><span class=\"mtk1\">(</span><span class=\"mtk12\">messageHash</span><span class=\"mtk1\">, </span><span class=\"mtk12\">proof</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit _unpackLegacyCommands()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">275</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> </span><span class=\"mtk11\">AxelarGateway</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk11\">_unpackLegacyCommands</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">) </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit call()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">320</span><span class=\"mtk1\">:              (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">commandSelector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit balanceOf()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">385</span><span class=\"mtk1\">:                  </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">transfer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">depositHandler</span><span class=\"mtk1\">)))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit burn()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">393</span><span class=\"mtk1\">:              </span><span class=\"mtk11\">IBurnableMintableCappedERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">salt</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit mint()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">481</span><span class=\"mtk1\">:              </span><span class=\"mtk11\">IBurnableMintableCappedERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit depositAddress()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">525</span><span class=\"mtk1\">:                  </span><span class=\"mtk11\">IBurnableMintableCappedERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">depositAddress</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit burn()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">532</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">IBurnableMintableCappedERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L268\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L268</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarDepositService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit approve()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">30</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wrappedTokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit tokenAddresses()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">115</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gatewayToken</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IAxelarGateway</span><span class=\"mtk1\">(</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">).</span><span class=\"mtk11\">tokenAddresses</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenSymbol</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L30\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L30</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">DepositReceiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit delegatecall()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit receiverImplementation()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">12</span><span class=\"mtk1\">:           (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk11\">IAxelarDepositService</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">).</span><span class=\"mtk11\">receiverImplementation</span><span class=\"mtk1\">().</span><span class=\"mtk11\">delegatecall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">delegateData</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/DepositReceiver.sol#L12\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/DepositReceiver.sol#L12</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ReceiverImplementation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit tokenAddresses()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">25</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IAxelarGateway</span><span class=\"mtk1\">(</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">).</span><span class=\"mtk11\">tokenAddresses</span><span class=\"mtk1\">(</span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit refundToken()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">27</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">refund</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">DepositBase</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">).</span><span class=\"mtk11\">refundToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit balanceOf()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">29</span><span class=\"mtk1\">:               </span><span class=\"mtk11\">_safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">refund</span><span class=\"mtk1\">, </span><span class=\"mtk12\">refundAddress</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">refund</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit balanceOf()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">33</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit approve()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">38</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit refundToken()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">49</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">refund</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">DepositBase</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">).</span><span class=\"mtk11\">refundToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit balanceOf()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">53</span><span class=\"mtk1\">:               </span><span class=\"mtk11\">_safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">refund</span><span class=\"mtk1\">, </span><span class=\"mtk12\">refundAddress</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">refund</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit approve()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">64</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wrappedTokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">gateway</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit refundToken()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">74</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">refund</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">DepositBase</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">).</span><span class=\"mtk11\">refundToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit balanceOf()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">76</span><span class=\"mtk1\">:               </span><span class=\"mtk11\">_safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">refund</span><span class=\"mtk1\">, </span><span class=\"mtk12\">refundAddress</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">refund</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit balanceOf()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">80</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wrappedTokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit withdraw()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">85</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">IWETH9</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wrappedTokenAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/ReceiverImplementation.sol#L25\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/ReceiverImplementation.sol#L25</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGasService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit balanceOf()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">130</span><span class=\"mtk1\">:                  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L130\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L130</a></p>\n<h2 id=\"g03--internal-functions-only-called-once-can-be-inlined-to-save-gas\" style=\"position:relative;\"><a href=\"#g03--internal-functions-only-called-once-can-be-inlined-to-save-gas\" aria-label=\"g03  internal functions only called once can be inlined to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑03]  <code>internal</code> functions only called once can be inlined to save gas</h2>\n<p>Not inlining costs <strong>20 to 40 gas</strong> because of two extra <code>JUMP</code> instructions and additional stack operations needed for function calls.</p>\n<p><em>There are 7 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">auth</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarAuthWeighted</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">86</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_validateSignatures</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">87            </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">messageHash</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">88            </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">89            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">weights</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">90            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">threshold</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">91:           </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">signatures</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">115</span><span class=\"mtk1\">:      </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_isSortedAscAndContainsNoDuplicate</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">accounts</span><span class=\"mtk1\">) </span><span class=\"mtk10\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk10\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">bool</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L86-L91\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L86-L91</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">611</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_setTokenDailyMintAmount</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">622</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_setTokenAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">630</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_setContractCallApproved</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">631           </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">632           </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sourceChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">633           </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sourceAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">634           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contractAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">635:          </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">payloadHash</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">640</span><span class=\"mtk1\">       </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_setContractCallApprovedWithMint</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">641</span><span class=\"mtk1\">           </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">commandId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">642</span><span class=\"mtk1\">           </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sourceChain</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">643</span><span class=\"mtk1\">           </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">sourceAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">644</span><span class=\"mtk1\">           </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">contractAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">645</span><span class=\"mtk1\">           </span><span class=\"mtk10\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk10\">payloadHash</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">646</span><span class=\"mtk1\">           </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">symbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">647</span><span class=\"mtk1\">:          </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">655</span><span class=\"mtk1\">:      </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_setImplementation</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">newImplementation</span><span class=\"mtk1\">) </span><span class=\"mtk10\">internal</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L611\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L611</a></p>\n<h2 id=\"g04--arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\" style=\"position:relative;\"><a href=\"#g04--arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\" aria-label=\"g04  arraylength should not be looked up in every loop of a for loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑04]  <code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</h2>\n<p>The overheads outlined below are <em>PER LOOP</em>, excluding the first loop</p>\n<ul>\n<li>storage arrays incur a Gwarmaccess (<strong>100 gas</strong>)</li>\n<li>memory arrays use <code>MLOAD</code> (<strong>3 gas</strong>)</li>\n<li>calldata arrays use <code>CALLDATALOAD</code> (<strong>3 gas</strong>)</li>\n</ul>\n<p>Caching the length changes each of these to a <code>DUP&#x3C;N></code> (<strong>3 gas</strong>), and gets rid of the extra <code>DUP&#x3C;N></code> needed to store the stack offset</p>\n<p><em>There are 7 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">auth</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarAuthWeighted</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">17</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">recentOperators</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">98</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">signatures</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L17\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L17</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">207</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">symbols</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L207\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L207</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarDepositService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">114</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">refundTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">168</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">refundTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">204</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">refundTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L114\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L114</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGasService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">123</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L123\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L123</a></p>\n<h2 id=\"g05--ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" style=\"position:relative;\"><a href=\"#g05--ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" aria-label=\"g05  ii should be uncheckediuncheckedi when it is not possible for them to overflow as is the case when used in for  and while loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑05]  <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</h2>\n<p>The <code>unchecked</code> keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves <strong>30-40 gas <a href=\"https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#the-increment-in-for-loop-post-condition-can-be-made-unchecked\">per loop</a></strong></p>\n<p><em>There are 12 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">auth</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarAuthWeighted</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">17</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">recentOperators</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">69</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">weightsLength</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">98</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">signatures</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">101</span><span class=\"mtk1\">:              </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (; </span><span class=\"mtk12\">operatorIndex</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">operatorsLength</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">signer</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">operators</span><span class=\"mtk1\">[</span><span class=\"mtk12\">operatorIndex</span><span class=\"mtk1\">]; ++</span><span class=\"mtk12\">operatorIndex</span><span class=\"mtk1\">) {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">116</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">accounts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L17\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L17</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">195</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">adminCount</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">207</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">symbols</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">292</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">commandsLength</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L195\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L195</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarDepositService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">114</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">refundTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">168</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">refundTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">204</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">refundTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L114\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L114</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGasService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">123</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L123\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L123</a></p>\n<h2 id=\"g06--keccak256-should-only-need-to-be-called-on-a-specific-string-literal-once\" style=\"position:relative;\"><a href=\"#g06--keccak256-should-only-need-to-be-called-on-a-specific-string-literal-once\" aria-label=\"g06  keccak256 should only need to be called on a specific string literal once permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑06]  <code>keccak256()</code> should only need to be called on a specific string literal once</h2>\n<p>It should be saved to an immutable variable, and the variable used instead. If the hash is being used as a part of a function selector, the cast to <code>bytes4</code> should also only be done once</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarDepositServiceProxy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">9</span><span class=\"mtk1\">:            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;axelar-deposit-service&#39;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositServiceProxy.sol#L9\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositServiceProxy.sol#L9</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarDepositService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">242</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;axelar-deposit-service&#39;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L242\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L242</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGasServiceProxy</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">10</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;axelar-gas-service&#39;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasServiceProxy.sol#L10\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasServiceProxy.sol#L10</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGasService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">181</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;axelar-gas-service&#39;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L181\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L181</a></p>\n<h2 id=\"g07--optimize-names-to-save-gas\" style=\"position:relative;\"><a href=\"#g07--optimize-names-to-save-gas\" aria-label=\"g07  optimize names to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑07]  Optimize names to save gas</h2>\n<p><code>public</code>/<code>external</code> function names and <code>public</code> member variable names can be optimized to save gas. See <a href=\"https://gist.github.com/IllIllI000/a5d8b486a8259f9f77891a919febd1a9\">this</a> link for an example of how it works. Below are the interfaces/abstract contracts that can be optimized so that the most frequently-called functions use the least amount of gas possible during method lookup. Method IDs that have two leading zero bytes can save <strong>128 gas</strong> each during deployment, and renaming functions to have lower method IDs will save <strong>22 gas</strong> per call, <a href=\"https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92\">per sorted position shifted</a></p>\n<p><em>There are 10 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">auth</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarAuthWeighted</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit validateProof(), transferOperatorship()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">9</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">AxelarAuthWeighted</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Ownable</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IAxelarAuthWeighted</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L9\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L9</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit sendToken(), callContract(), callContractWithToken(), deployToken(), mintToken(), burnToken(), approveContractCall(), approveContractCallWithMint(), transferOperatorship(), _unpackLegacyCommands()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">15</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IAxelarGateway</span><span class=\"mtk1\">, </span><span class=\"mtk12\">AdminMultisigBase</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L15\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L15</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarDepositService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit sendNative(), addressForTokenDeposit(), addressForNativeDeposit(), addressForNativeUnwrap(), sendTokenDeposit(), refundTokenDeposit(), sendNativeDeposit(), refundNativeDeposit(), nativeUnwrap(), refundNativeUnwrap(), contractId()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">15</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">AxelarDepositService</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Upgradable</span><span class=\"mtk1\">, </span><span class=\"mtk12\">DepositBase</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IAxelarDepositService</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L15\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L15</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ReceiverImplementation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit receiveAndSendToken(), receiveAndSendNative(), receiveAndUnwrapNative()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">11</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ReceiverImplementation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">DepositBase</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/ReceiverImplementation.sol#L11\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/ReceiverImplementation.sol#L11</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGasService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit collectFees(), refund(), contractId()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">10</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">AxelarGasService</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Upgradable</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IAxelarGasService</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L10\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L10</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">IAxelarAuth</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit validateProof(), transferOperatorship()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">7</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IAxelarAuth</span><span class=\"mtk1\"> </span><span class=\"mtk10\">is</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IOwnable</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarAuth.sol#L7\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarAuth.sol#L7</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">IAxelarAuthWeighted</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit currentEpoch(), hashForEpoch(), epochForHash()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">7</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IAxelarAuthWeighted</span><span class=\"mtk1\"> </span><span class=\"mtk10\">is</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IAxelarAuth</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarAuthWeighted.sol#L7\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarAuthWeighted.sol#L7</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">IAxelarDepositService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit sendNative(), addressForTokenDeposit(), addressForNativeDeposit(), addressForNativeUnwrap(), sendTokenDeposit(), refundTokenDeposit(), sendNativeDeposit(), refundNativeDeposit(), nativeUnwrap(), refundNativeUnwrap(), receiverImplementation()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">9</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IAxelarDepositService</span><span class=\"mtk1\"> </span><span class=\"mtk10\">is</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IUpgradable</span><span class=\"mtk1\">, </span><span class=\"mtk10\">IDepositBase</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarDepositService.sol#L9\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarDepositService.sol#L9</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">IAxelarExecutable</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit execute(), executeWithToken()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">7</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">abstract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IAxelarExecutable</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarExecutable.sol#L7\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarExecutable.sol#L7</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">IAxelarGasService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit payGasForContractCall(), payGasForContractCallWithToken(), payNativeGasForContractCall(), payNativeGasForContractCallWithToken(), addGas(), addNativeGas(), collectFees(), refund()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">8</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IAxelarGasService</span><span class=\"mtk1\"> </span><span class=\"mtk10\">is</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IUpgradable</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarGasService.sol#L8\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarGasService.sol#L8</a></p>\n<h2 id=\"g08--i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" style=\"position:relative;\"><a href=\"#g08--i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" aria-label=\"g08  i costs less gas than i especially when its used in for loops   ii   too permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑08]  <code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</h2>\n<p>Saves <strong>5 gas per loop</strong></p>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">207</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">symbols</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L207\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L207</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarDepositService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">114</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">refundTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">168</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">refundTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">204</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">refundTokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L114\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L114</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"50\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGasService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">123</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L123\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L123</a></p>\n<h2 id=\"g09--empty-blocks-should-be-removed-or-emit-something\" style=\"position:relative;\"><a href=\"#g09--empty-blocks-should-be-removed-or-emit-something\" aria-label=\"g09  empty blocks should be removed or emit something permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑09]  Empty blocks should be removed or emit something</h2>\n<p>The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting. If the contract is meant to be extended, the contract should be <code>abstract</code> and the function signatures be added without any default implementation. If the block is an empty <code>if</code>-statement block to avoid doing subsequent checks in the else-if/else conditions, the else-if/else conditions should be nested under the negation of the if-statement, because they involve different classes of checks, which may lead to the introduction of errors when the code is later modified (<code>if(x){}else if(y){...}else{...}</code> => <code>if(!x){if(y){...}else{...}}</code>). Empty <code>receive()</code>/<code>fallback() payable</code> functions that are not used, can be removed to save deployment gas.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"51\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">IAxelarExecutable</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">46</span><span class=\"mtk1\">:       ) </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">virtual</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">54</span><span class=\"mtk1\">:       ) </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">virtual</span><span class=\"mtk1\"> {}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarExecutable.sol#L46\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarExecutable.sol#L46</a></p>\n<h2 id=\"g10--functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" style=\"position:relative;\"><a href=\"#g10--functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" aria-label=\"g10  functions guaranteed to revert when called by normal users can be marked payable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑10]  Functions guaranteed to revert when called by normal users can be marked <code>payable</code></h2>\n<p>If a function modifier such as <code>onlyOwner</code> is used, the function will revert if a normal user tries to pay the function. Marking the function as <code>payable</code> will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are\n<code>CALLVALUE</code>(2),<code>DUP1</code>(3),<code>ISZERO</code>(3),<code>PUSH2</code>(3),<code>JUMPI</code>(10),<code>PUSH1</code>(3),<code>DUP1</code>(3),<code>REVERT</code>(0),<code>JUMPDEST</code>(1),<code>POP</code>(2), which costs an average of about <strong>21 gas per call</strong> to the function, in addition to the extra deployment cost</p>\n<p><em>There are 11 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"52\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">auth</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarAuthWeighted</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">47</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transferOperatorship</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L47\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L47</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"53\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGateway</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">204</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setTokenDailyMintLimits</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">symbols</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">limits</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyAdmin</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">217</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">upgrade</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">218           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newImplementation</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">219           </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newImplementationCodeHash</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">220           </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">setupParams</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">221:      ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyAdmin</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">331</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">367</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mintToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">373</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">burnToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">397</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">approveContractCall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">411</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">approveContractCallWithMint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">params</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">commandId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">437</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transferOperatorship</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newOperatorsData</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlySelf</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L204\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L204</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"54\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">-</span><span class=\"mtk12\">service</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AxelarGasService</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">120</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">collectFees</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">136</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">refund</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">137           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">138           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">139           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">140:      ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L120\">https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L120</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-07-axelar-findings/issues/122#issuecomment-1226666802\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p><strong>[G‑01] Using calldata instead of memory for read-only arguments in external functions saves gas</strong><br>\n60 for the array of bytes</p>\n<p><strong>[G‑02] Avoid contract existence checks by using solidity version 0.8.10 or later</strong><br>\n100 gas per instance<br>\n2500</p>\n<p><strong>[G‑03] internal functions only called once can be inlined to save gas</strong><br>\n20 per instance<br>\n140</p>\n<p><strong>[G‑04] <array>.length should not be looked up in every loop of a for-loop + [G-05]</strong><br>\nGiving 300 consistently with rest of submissions</p>\n<p><strong>[G‑06] keccak256() should only need to be called on a specific string literal once</strong><br>\n30 gas per instance<br>\n120</p>\n<p>Rest is too opinionated for me :P</p>\n<p>Great report as usual, would love to see a couple customized suggestion (packing or similar) and benchmarks, but still really good.</p>\n<p>3120 gas saved</p>\n</blockquote>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#medium-risk-findings-6\">Medium Risk Findings (6)</a></p>\n<ul>\n<li><a href=\"#m-01-removewrapping-can-be-called-when-there-are-still-wrapped-tokens\">[M-01] <code>removeWrapping</code> can be called when there are still wrapped tokens</a></li>\n<li><a href=\"#m-02-xc20wrapper-may-lose-received-token-forever-if-localassetxc20mint-is-reverted-indefinitely\">[M-02] <code>XC20Wrapper</code> may lose received token forever if <code>LocalAsset(xc20).mint</code> is reverted indefinitely</a></li>\n<li><a href=\"#m-03-system-will-not-work-anymore-after-eip-4758\">[M-03] System will not work anymore after EIP-4758</a></li>\n<li><a href=\"#m-04-previous-operatorsweightsthreshold-are-still-able-to-sign-off-new-commands-after-operatorship-is-transferred\">[M-04] Previous {Operators/Weights/Threshold} Are Still Able To Sign Off New Commands After Operatorship Is Transferred</a></li>\n<li><a href=\"#m-05-change-of-operators-possible-from-old-operators\">[M-05] Change of operators possible from old operators</a></li>\n<li><a href=\"#m-06-add-cancel-and-refund-option-for-transaction-recovery\">[M-06] Add cancel and refund option for Transaction Recovery</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#l-01-unused-receive-function\">L-01 Unused receive() function</a></li>\n<li><a href=\"#l-02-decimals-not-part-of-erc20-standard\">L-02 decimals() not part of ERC20 standard</a></li>\n<li><a href=\"#l-03-unsafe-use-of-transfertransferfrom-with-ierc20\">L-03 Unsafe use of transfer()/transferFrom() with IERC20</a></li>\n<li><a href=\"#l-04-missing-checks-for-zero-address\">L-04 Missing checks for zero address</a></li>\n<li><a href=\"#n-01-use-a-more-recent-version-of-solidity\">N-01 Use a more recent version of solidity</a></li>\n<li><a href=\"#n-02-unspecific-compiler-version-pragma\">N-02 Unspecific Compiler Version Pragma</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#summary-1\">Summary</a></li>\n<li><a href=\"#g01--using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\">G‑01  Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</a></li>\n<li><a href=\"#g02--avoid-contract-existence-checks-by-using-solidity-version-0810-or-later\">G‑02  Avoid contract existence checks by using solidity version 0.8.10 or later</a></li>\n<li><a href=\"#g03--internal-functions-only-called-once-can-be-inlined-to-save-gas\">G‑03  <code>internal</code> functions only called once can be inlined to save gas</a></li>\n<li><a href=\"#g04--arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\">G‑04  <code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</a></li>\n<li><a href=\"#g05--ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\">G‑05  <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</a></li>\n<li><a href=\"#g06--keccak256-should-only-need-to-be-called-on-a-specific-string-literal-once\">G‑06  <code>keccak256()</code> should only need to be called on a specific string literal once</a></li>\n<li><a href=\"#g07--optimize-names-to-save-gas\">G‑07  Optimize names to save gas</a></li>\n<li><a href=\"#g08--i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\">G‑08  <code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</a></li>\n<li><a href=\"#g09--empty-blocks-should-be-removed-or-emit-something\">G‑09  Empty blocks should be removed or emit something</a></li>\n<li><a href=\"#g10--functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\">G‑10  Functions guaranteed to revert when called by normal users can be marked <code>payable</code></a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the audit contest outlined in this document, C4 conducted an analysis of the Axelar Network v2 smart contract system written in Solidity. The audit contest took place between July 29—August 3 2022.\n\n## Wardens\n\n80 Wardens contributed reports to the Axelar Network v2 contest:\n\n  1. [Chom](https://chom.dev)\n  1. xiaoming90\n  1. &#95;&#95;141345&#95;&#95;\n  1. Lambda\n  1. [Ruhum](https://twitter.com/0xruhum)\n  1. [Respx](https://twitter.com/RespxR)\n  1. 0x52\n  1. cryptphi\n  1. [oyc&#95;109](https://twitter.com/andyfeili)\n  1. IllIllI\n  1. rbserver\n  1. [JC](https://twitter.com/sm4rtcontr4ct)\n  1. Bnke0x0\n  1. [defsec](https://twitter.com/defsec_)\n  1. [Dravee](https://twitter.com/BowTiedDravee)\n  1. 0x1f8b\n  1. [fatherOfBlocks](https://twitter.com/father0fBl0cks)\n  1. [Deivitto](https://twitter.com/Deivitto)\n  1. ajtra\n  1. robee\n  1. mics\n  1. [Aymen0909](https://github.com/Aymen1001)\n  1. [TomJ](https://mobile.twitter.com/tomj_bb)\n  1. horsefacts\n  1. [Sm4rty](https://twitter.com/Sm4rty_)\n  1. lucacez\n  1. [c3phas](https://twitter.com/c3ph_)\n  1. kyteg\n  1. Rolezn\n  1. simon135\n  1. [0xNazgul](https://twitter.com/0xNazgul)\n  1. [benbaessler](https://benbaessler.com)\n  1. RedOneN\n  1. [Rohan16](https://twitter.com/ROHANJH56009256)\n  1. Waze\n  1. apostle0x01\n  1. djxploit\n  1. [gogo](https://www.linkedin.com/in/georgi-nikolaev-georgiev-978253219)\n  1. [tofunmi](https://twitter.com/dediranTofunmi)\n  1. NoamYakov\n  1. ReyAdmirado\n  1. [bharg4v](https://twitter.com/Bharg4v)\n  1. asutorufos\n  1. bulej93\n  1. CodingNameKiki\n  1. [durianSausage](https://github.com/lyciumlee)\n  1. sashik&#95;eth\n  1. [8olidity](https://twitter.com/8olidity)\n  1. [ElKu](https://twitter.com/ElKu_crypto)\n  1. Noah3o6\n  1. [berndartmueller](https://twitter.com/berndartmueller)\n  1. [hansfriese](https://twitter.com/hansfriese)\n  1. cccz\n  1. [CertoraInc](https://twitter.com/CertoraInc) (egjlmn1, [OriDabush](https://twitter.com/ori_dabush), ItayG, shakedwinder, and RoiEvenHaim)\n  1. [sseefried](http://seanseefried.org/blog)\n  1. cryptonue\n  1. 0xf15ers (remora and twojoy)\n  1. [0xSmartContract](https://twitter.com/0xSmartContract)\n  1. ashiq0x01\n  1. bardamu\n  1. codexploder\n  1. [ignacio](https://twitter.com/0xheynacho)\n  1. Twpony\n  1. [ch13fd357r0y3r](https://twitter.com/ch13fd357r0y3r)\n  1. Yiko\n  1. [MiloTruck](https://milotruck.github.io/)\n  1. 0xsam\n  1. [gerdusx](https://twitter.com/GerdusM)\n  1. [medikko](https://twitter.com/mehmeddukov)\n  1. [Tomio](https://twitter.com/meidhiwirara)\n  1. [owenthurm](guardianaudits.com)\n  1. [a12jmx](https://twitter.com/a12jmx)\n  1. [Fitraldys](https://twitter.com/fitraldys)\n  1. ak1\n  1. erictee\n\nThis contest was judged by [Alex the Entreprenerd](https://twitter.com/GalloDaSballo).\n\nFinal report assembled by [liveactionllama](https://twitter.com/liveactionllama).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 6 unique vulnerabilities. Of these vulnerabilities, 0 received a risk rating in the category of HIGH severity and 6 received a risk rating in the category of MEDIUM severity.\n\nAdditionally, C4 analysis included 65 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 56 reports recommending gas optimizations.\n\nAll of the issues presented here are linked back to their original finding.\n\n# Scope\n\nThe code under review can be found within the [C4 Axelar Network v2 contest repository](https://github.com/code-423n4/2022-07-axelar), and is composed of 15 smart contracts written in the Solidity programming language and includes 1,813 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code4rena.com).\n\n# Medium Risk Findings (6)\n## [[M-01] `removeWrapping` can be called when there are still wrapped tokens](https://github.com/code-423n4/2022-07-axelar-findings/issues/23)\n_Submitted by Lambda, also found by 0x52 and cryptphi_\n\n[XC20Wrapper.sol#L66](https://github.com/code-423n4/2022-07-axelar/blob/a1205d2ba78e0db583d136f8563e8097860a110f/xc20/contracts/XC20Wrapper.sol#L66)<br>\n\nAn owner can call `removeWrapping`, even if there are still circulating wrapped tokens. This will cause the unwrapping of those tokens to fail, as `unwrapped[wrappedToken]` will be `addres(0)`.\n\n### Recommended Mitigation Steps\n\nTrack how many wrapped tokens are in circulation, only allow the removal of a wrapped tokens when there are 0 to ensure for users that they will always be able to unwrap.\n\n**[re1ro (Axelar) confirmed and commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/23#issuecomment-1205933537):**\n > Valid observation. We will consider a different approach.\n> \n> **Mitigation**<br>\n> `removeWrapping` method was removed<br>\n> https://github.com/axelarnetwork/axelar-xc20-wrapper/pull/4\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/23#issuecomment-1229574297):**\n > The warden has shown how the Admin can remove the mapping that allows to redeem bridged tokens, because this will cause the inability to unwrap, and can be operated by the admin, I agree with Medium Severity.\n> \n> The sponsor has confirmed and they have mitigated by removing the function.\n\n\n\n***\n\n## [[M-02] `XC20Wrapper` may lose received token forever if `LocalAsset(xc20).mint` is reverted indefinitely](https://github.com/code-423n4/2022-07-axelar-findings/issues/176)\n_Submitted by Chom_\n\n[XC20Wrapper.sol#L124-L126](https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/xc20/contracts/XC20Wrapper.sol#L124-L126)<br>\n\nXC20Wrapper may lose received token forever if LocalAsset(xc20).mint is reverted indefinitely.\n\nSimilar to ERC20, the spec said that if mint returns false it means minting is failed. But it is commonly revert instead of returning false which is also a minting failure. XC20 may revert on minting as well and common sense also guiding programmers to use the revert pattern instead of returning false.\n\nThis case is not handled if SC20 minting is reverted indefinitely. No matter how hard you retry the GMP message execution, it always fail thus the token get locked forever.\n\n### Proof of Concept\n\n        function _executeWithToken(\n            string calldata,\n            string calldata,\n            bytes calldata payload,\n            string calldata tokenSymbol,\n            uint256 amount\n        ) internal override {\n            address receiver = abi.decode(payload, (address));\n            address tokenAddress = gateway().tokenAddresses(tokenSymbol);\n            address xc20 = wrapped[tokenAddress];\n            if (xc20 == address(0) || !LocalAsset(xc20).mint(receiver, amount)) {\n                _safeTransfer(tokenAddress, receiver, amount);\n            }\n        }\n\n*   Token is sent to gateway before executing the message on the destination chain.\n*   If `_executeWithToken` fail, the token remain inside gateway. The only way to use that token is to execute the `_executeWithToken` succesfully.\n*   Assume LocalAsset(xc20).mint(...) revert indefinitely, \\_executeWithToken also revert indefinitely.\n*   As a result, `_executeWithToken` never success thus the tokens remain inside gateway forever.\n\n### Recommended Mitigation Steps\n\nUse try catch\n\n        function _executeWithToken(\n            string calldata,\n            string calldata,\n            bytes calldata payload,\n            string calldata tokenSymbol,\n            uint256 amount\n        ) internal override {\n            address receiver = abi.decode(payload, (address));\n            address tokenAddress = gateway().tokenAddresses(tokenSymbol);\n            address xc20 = wrapped[tokenAddress];\n            if (xc20 == address(0)) {\n                _safeTransfer(tokenAddress, receiver, amount);\n            }\n\n            try LocalAsset(xc20).mint(receiver, amount) returns (bool success) {\n                if (!success) _safeTransfer(tokenAddress, receiver, amount);\n            } catch { _safeTransfer(tokenAddress, receiver, amount); }\n        }\n\n**[re1ro (Axelar) acknowledged and commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/176#issuecomment-1206266860):**\n > **Mitigation**<br>\n> We addressed the issue with introducing `_safeMint` function<br>\n> https://github.com/axelarnetwork/axelar-xc20-wrapper/pull/4\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/176#issuecomment-1236396995):**\n > The warden states that `mint()` may fail and cause a revert instead of returning false.\n> \n> With the code in scope we can check the used ERC20 implementation and we find:\n> \n> [ERC20.sol#L187-L188](https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/xc20/contracts/ERC20.sol#L187-L188)<br>\n> \n> ```solidity\n>         if (account == address(0)) revert InvalidAccount();\n> \n> ```\n> \n> Because a revert can happen, the scenario, which hypothetically would brick the functionality can actually happen.\n> \n> We may also have reverts due to overflow and underflow.\n> \n> Because the code is built to assume that no revert can happen, but the warden demonstrated how a revert could factually happen, I do agree with Medium Severity.\n> \n> The sponsor has mitigated by using `_safeMint`.\n\n\n\n***\n\n## [[M-03] System will not work anymore after EIP-4758](https://github.com/code-423n4/2022-07-axelar-findings/issues/20)\n_Submitted by Lambda, also found by Chom_\n\n[DepositReceiver.sol#L25](https://github.com/code-423n4/2022-07-axelar/blob/a46fa61e73dd0f3469c0263bc6818e682d62fb5f/contracts/deposit-service/DepositReceiver.sol#L25)<br>\n\nAfter [EIP-4758](https://eips.ethereum.org/EIPS/eip-4758), the `SELFDESTRUCT` op code will no longer be available. According to the EIP, \"The only use that breaks is where a contract is re-created at the same address using CREATE2 (after a SELFDESTRUCT)\". Axelar is exactly such an application, the current deposit system will no longer work.\n\n### Recommended Mitigation Steps\n\nTo avoid that Axelar simply stops working one day, the architecture should be changed. Instead of generating addresses for every user, the user could directly interact with the deposit service and the deposit service would need to keep track of funds and provide refunds directly.\n\n**[re1ro (Axelar) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/20#issuecomment-1205926507):**\n > Very good spot. We will address this.\n\n**[re1ro (Axelar) acknowledged](https://github.com/code-423n4/2022-07-axelar-findings/issues/20)**\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/20#issuecomment-1236399840):**\n > The warden has shown a plausible upgrade path for Ethereum that will remove the `SELFDESTRUCT` opcode, bricking the `DepositReceiver` functionality.\n> \n> If the fork was in place today, the code would be broken, and the finding should be of high severity.\n> \n> Because the fork is not in place, and no clear timeline is defined for \"The Purge\", I think Medium Severity to be correct.\n\n\n\n***\n\n## [[M-04] Previous {Operators/Weights/Threshold} Are Still Able To Sign Off New Commands After Operatorship Is Transferred](https://github.com/code-423n4/2022-07-axelar-findings/issues/156)\n_Submitted by xiaoming90_\n\nThe administrator will call `AxelarAuthWeighted.transferOperatorship` function to transfer the operatorship to a new set of {Operators/Weights/Threshold}.\n\nHowever, it was observed that after transferring the operatorship to a new set of {Operators/Weights/Threshold}, the previous sets of {Operators/Weights/Threshold} are still able to generate a valid proof, and subsequently execute the command.\n\nThe following piece of code shows that as long as valid proof is submitted, the commands will be executed by the system.\n\n[AxelarGateway.sol#L262](https://github.com/code-423n4/2022-07-axelar/blob/3729dd4aeff8dc2b8b9c3670a1c792c81fc60e7c/contracts/AxelarGateway.sol#L262)<br>\n\n```solidity\nfunction execute(bytes calldata input) external override {\n    (bytes memory data, bytes memory proof) = abi.decode(input, (bytes, bytes));\n\n    bytes32 messageHash = ECDSA.toEthSignedMessageHash(keccak256(data));\n\n    // TEST auth and getaway separately\n    bool currentOperators = IAxelarAuth(AUTH_MODULE).validateProof(messageHash, proof);\n\t..SNIP..\n}\n```\n\nThe following piece of code shows that the past 16 sets of {Operators/Weights/Threshold} are considered valid and can be used within the [`AxelarAuthWeighted._validateSignatures`](https://github.com/code-423n4/2022-07-axelar/blob/3729dd4aeff8dc2b8b9c3670a1c792c81fc60e7c/contracts/auth/AxelarAuthWeighted.sol#L86) function. Thus, the past 16 sets of {Operators/Weights/Threshold} are able to sign and submit a valid proof, and the proof will be accepted by the `AxelarAuthWeighted.validateProof` that allows them to execute the commands.\n\n[AxelarAuthWeighted.sol#L36](https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L36)<br>\n\n```solidity\nuint8 internal constant OLD_KEY_RETENTION = 16;\n\nfunction validateProof(bytes32 messageHash, bytes calldata proof) external view returns (bool currentOperators) {\n\t(address[] memory operators, uint256[] memory weights, uint256 threshold, bytes[] memory signatures) = abi.decode(\n\t\tproof,\n\t\t(address[], uint256[], uint256, bytes[])\n\t);\n\n\tbytes32 operatorsHash = keccak256(abi.encode(operators, weights, threshold));\n\tuint256 operatorsEpoch = epochForHash[operatorsHash];\n\tuint256 epoch = currentEpoch;\n\n\tif (operatorsEpoch == 0 || epoch - operatorsEpoch >= OLD_KEY_RETENTION) revert InvalidOperators();\n\n\t_validateSignatures(messageHash, operators, weights, threshold, signatures);\n\n\tcurrentOperators = operatorsEpoch == epoch;\n}\n```\n\nUnderstood from the team that the reason for allowing past 16 sets of {Operators/Weights/Threshold} is that after a transfer of operatorship, the commands that were signed recently but have not been executed yet will not become invalid. Further understood from the team the operatorship transfer is performed when there is a significant change in stake distribution on the Axelar network.\n\nIt makes sense for commands that were already signed recently by past operators before the operatorship transfer to be executable. However, based on the current design, it is also possible for the past 16 sets of {Operators/Weights/Threshold} to submit a new valid proof/signature for new commands to be executed after the operatorship transfer, and the `AxelarAuthWeighted._validateSignatures` function will happily accept the proof/signature, which should not be allowed.\n\nIt was understood that the operatorship transfer is performed when there is a significant change in stake distribution on the Axelar network, therefore, it does not make sense for all the past 16 sets of {Operators/Weights/Threshold} to be still able to sign and execute new commands after the operatorship transfer, because they follow the old stake distribution that is no longer considered as valid.\n\nOnly the current set of operators and its stake distribution should be used to verify any new command signed and issued after the operatorship transfer.\n\n### Proof-of-Concept\n\nAssuming that there are 3 validators (Alice, Bob and Charles)\n\n#### Operation at Time 1 (T1)\n\nAt T1, the following is the state:\n\n> currentEpoch = 1\n>\n> hashForEpoch\\[Epoch 1] = {operators: \\[Alice, Bob, Charles], weights: \\[0.5, 0.25, 0.25], threshold: 0.5} convert to hash\n\nAt T1, Alice could submit the following input to `AxelarGateway.execute(bytes calldata input)` function to execute the commands:\n\n> input = {\n>\n> ​\tbytes memory data = commands to be executed\n>\n> ​\tbytes memory proof = {operators: \\[Alice, Bob, Charles], weights: \\[0.5, 0.25, 0.25], threshold: 0.5, signatures: \\[Alice's signature]}\n>\n> }\n\nSince Alice's signature weight is 0.5, having Alice's signature alone is sufficient to meet the threshold of 0.5 and the commands will be executed.\n\n#### Operation at Time 2 (T2)\n\nAt T2, the Axelar administrator decided to change the stake distribution. The admin called the `AxelarAuthWeighted.transferOperatorship` and change the state to as follows:\n\n> currentEpoch = 2\n>\n> hashForEpoch\\[Epoch 2] = {operators: \\[Alice, Bob, Charles], weights: \\[0.25, 0.4, 0.4], threshold: 0.5} convert to hash <== newly added\n>\n> hashForEpoch\\[Epoch 1] = {operators: \\[Alice, Bob, Charles], weights: \\[0.5, 0.25, 0.25], threshold: 0.5} convert to hash\n\nAt T2, Alice's weight has reduced from `0.5` to `0.25`. As per the current stake distribution, Alice's signature alone is not sufficient to meet the threshold of `0.5`. Thus, she is not able to execute any new command without an additional signature from Bob or Charles.\n\nHowever, note that the past 16 sets of {operators/weights/threshold} are considered valid by the system, so in another word, all the past 16 stake distributions are considered valid too.\n\nThus, Alice simply needs to re-use back to the previous set of {operators/weights/threshold} in Epoch 1 and she can continue to execute new commands without the signature of Bob or Charles, thus bypassing the current stake distribution.\n\nAt T2, Alice could still submit the following input to `AxelarGateway.execute(bytes calldata input)` function with only Alice's signature to execute the command:\n\n> input = {\n>\n> ​\tbytes memory data = commands to be executed\n>\n> ​\tbytes memory proof = {operators: \\[Alice, Bob, Charles], weights: \\[0.5, 0.25, 0.25], threshold: 0.5, signatures: \\[Alice's signature]}\n>\n> }\n\nNo additional signature from Bob or Charles is needed.\n\nFollowing is from Epoch 1\n\n> {operators: \\[Alice, Bob, Charles], weights: \\[0.5, 0.25, 0.25], threshold: 0.5\n\n#### Operator Address Changed After Operatorship Is Being Transferred\n\nNoted from the discord channel the following clarification from the team.\n\n> Based on couple of questions I have received, I'd like to clarify one assumption we are making for the contracts (which is enforced at the axelar proof of stake network):\n> Operators correspond to validators on the Axelar network. However, the operator address for a given epoch is derived from the validator key along with a nonce that is unique for each operator epoch.\n> i.e Whenever operatorship is being transferred, an honest validator will always generate a new operator address (and not reuse their old one) due to a nonce.\n\nWith this control in place, even if the validator has generated a new operator address after the operatorship has been transferred, it is still possible for the validator to re-use back the old operator address and sign the command as the validator is aware of the private key needed to sign on behalf of the old operator address. Thus, the above issue still exists.\n\nAdditionally, there is always a risk of a \"dishonest\" validator not generating a new operator address after operatorship is being transferred if the new stake distribution does not benefit them. In the above example, Alice who has its weightage reduced from 0.5 to 0.25 do not see the benefit of the new stake distribution can decide not to generate a new operator address and continue to use the old operator address that allowed her to sign and execute any command without an additional signature from Bob or Charles.\n\n### Impact\n\nCurrent stake distribution can be bypassed.\n\n### Recommended Mitigation Steps\n\nConsider updating the system to ensure that the following requirements are followed:\n\n*   Command signed by the past 16 sets of {operators/weights/threshold} AFTER the operatorship transfer should not be executable and should be rejected. Only commands signed by the current set of {operators/weights/threshold} AFTER the operatorship transfer should be accepted and executable.\n*   Commands signed by the past 16 sets of {operators/weights/threshold} BEFORE the operatorship transfer should be accepted and executable.\n\n**[re1ro (Axelar) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/156#issuecomment-1206201357):**\n > Good spot.<br>\n> I think we could include the timestamps to prevent old operators to sing any new commands.\n\n**[Alex the Entreprenerd (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/156#issuecomment-1236421534):**\n > Per the Warden POC - Stake Distribution from past epochs is not changed, meaning a `transferOperatorship` called by the `owner` with the goal of reducing weights for a specific operator will be circumventable.\n> \n> This implies:\n> - Ability to sidestep coded logic and code intent -> Broken Invariants\n> - Inability to kick a malicious operator (unless you use the 16 times transferOperatorship exploit shown from other reports)\n> \n> The \"need to remove a bad operator\" is definitely contingent on setup, so Medium Severity is definitely fair.\n> \n> I'll think about raising or keeping as Med.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/156#issuecomment-1238533547):**\n > In contrast to other reports, this submission shows a reasonable path forward to invalidate old operators, while allowing them to re-try old commands.\n> \n> For this reason I think this is distinct from [#19](https://github.com/code-423n4/2022-07-axelar-findings/issues/19) etc.\n\n\n\n***\n\n## [[M-05] Change of operators possible from old operators](https://github.com/code-423n4/2022-07-axelar-findings/issues/19)\n_Submitted by Lambda, also found by Respx and Ruhum_\n\n[AxelarGateway.sol#L268](https://github.com/code-423n4/2022-07-axelar/blob/3373c48a71c07cfce856b53afc02ef4fc2357f8c/contracts/AxelarGateway.sol#L268)<br>\n[AxelarGateway.sol#L311](https://github.com/code-423n4/2022-07-axelar/blob/3373c48a71c07cfce856b53afc02ef4fc2357f8c/contracts/AxelarGateway.sol#L311)<br>\n\nAccording to the specifications, only the current operators should be able to transfer operatorship. However, there is one way to circumvent this. Because currentOperators is not updated in the loop, when multiple `transferOperatorship` commands are submitted in the same `execute` call, all will succeed. After the first one, the operators that signed these commands are no longer the current operators, but the call will still succeed.\n\nThis also means that one set of operators could submit so many `transferOperatorship` commands in one `execute` call that `OLD_KEY_RETENTION` is reached for all other ones, meaning they would control complete set of currently valid operators.\n\n### Recommended Mitigation Steps\n\nSet `currentOperators` to `false` when the operators were changed.\n\n**[re1ro (Axelar) confirmed, but disagreed with severity and commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/19#issuecomment-1205925612):**\n > This case would never occur in practice because our command batches are produced and signed by the Axelar nerwork.\n> So there would be never 2 `transferOperatorship` commands in the same batch. \n> \n> In general if the recent operators turn malicious they can overtake the gateway disregarding this finding.\n> \n> **Mitigation**<br>\n> We still have added the sanity check to set `currentOperators` to `false`.<br>\n> https://github.com/axelarnetwork/axelar-cgp-solidity/pull/138\n\n**[milapsheth (Axelar) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/19#issuecomment-1226049092):**\n > For more context, the current operators could just easily transfer the operatorship in multiple txs instead. We heavily rely on the assumption the majority of the operators by weight are not malicious.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/19#issuecomment-1236399493):**\n > Very interesting find.\n> \n> Per the warden submission: the operators can sign a `transferOperatorship` and then still act as if they are the current operator while their calls are being executed.\n> \n> This can be further extended to perform more than `OLD_KEY_RETENTION` to invalidate all old keys, which may be desirable or a malicious attack depending on context.\n> \n> The sponsor disagrees with severity, citing that the main assumption of the code is that operators by weight are non malicious\n> \n> Personally I think the finding:\n> - Breaks an assumption of the code (current operators exclusively can `transferOperatorship`)\n> - Allows the operators to kick old operators in one tx instead of `OLD_KEY_RETENTION` txs\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/19#issuecomment-1236440077):**\n > With the information that I have, considering that:\n> - Breaks an assumption of the code (current operators exclusively can transferOperatorship)\n> - Allows the operators to kick old operators in one tx instead of OLD_KEY_RETENTION txs\n> \n> Because this is contingent on a malicious majority, and considering that a malicious majority can perform even worse attacks (DOS, TX Censoring, Shutting down the chain)\n> \n> I believe that Medium Severity is correct.\n\n\n\n***\n\n## [[M-06] Add cancel and refund option for Transaction Recovery](https://github.com/code-423n4/2022-07-axelar-findings/issues/139)\n_Submitted by &#95;&#95;141345&#95;&#95;_\n\n[AxelarGateway.sol#L262](https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L262)<br>\n[AxelarGasService.sol#L98](https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L98)<br>\n[AxelarGasService.sol#L110](https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L110)<br>\n\nTransactions could fail or get stuck, according to the documentation:\n\n> Occasionally, transactions can get \"stuck\" in the pipeline from a source to destination chain (e.g. due to one-off issues that arise with relayers that operate on top of the network).\n>\n> Transactions have typically gotten \"stuck\" in the pipeline due to: (A) The transaction failing to relay from the source chain into the Axelar network for processing. (B) The transaction failing to get executed on the destination chain.\n\nAnd there are several options provided:\n\n*   manual approve\n*   manual execute\n*   add gas\n\nHowever, some transactions' execution depend on the time or certain condition. For example, some transaction has a deadline, it the deadline is passed, the transaction will be invalid. Or some conditions may be temporary, for example, some certain price difference for some token pair. In this case, the failed transactions will be meaningless to redo, the appropriate method is to cancel the transaction and refund. If no such option is provided, users' fund for this transaction would be lock or loss.\n\n### Proof of Concept\n\n```solidity\ncontracts/AxelarGateway.sol\n    function approveContractCall(bytes calldata params, bytes32 commandId) external onlySelf {}\n    function execute(bytes calldata input) external override {}\n\ncontracts/gas-service/AxelarGasService.sol\n    function addGas() external override {}\n    function addNativeGas() external payable override {}\n```\n\nThe options are `approveContractCall()`, `execute`, `addGas()` and `addNativeGas()` are available, but no cancel and refund option.\n\n### Recommended Mitigation Steps\n\nProvide a cancel option if the transaction failed, from the source chain or destination chain, and allow the user to get the gas refund.\n\n**[re1ro (Axelar) acknowledged and commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/139#issuecomment-1206146400):**\n > At this point this functionality can be implemented by the user in their Executable contract by the application. Axelar is providing a ground level cross-chain communication protocol. \n> \n> Refunds and deadline based cancel are very application specific cases and shouldn't be implemented on the protocol level. Some refunds could require manual intervention and it won't be scaleable for us to provide such support of all the applications built on top of Axelar. Especially considering that data related to expiration or price difference will be encoded inside of the payload and Axelar is not aware of the payload encoding.\n> \n> It shouldn't be too difficult to implement. In this example we will send it back to the original chain: \n> ```\n>     function _executeWithToken(\n>         string memory sourceChain,\n>         string memory sourceAddress,\n>         bytes calldata payload,\n>         string memory tokenSymbol,\n>         uint256 amount\n>     ) internal override {\n>         if (price difference for some token pair > limit) {\n>             IERC20(token).approve(address(gateway), amount);\n>             gateway.sendToken(sourceChain, sourceAddress, tokenSymbol, amount);\n>             return;\n>         }\n>        . . .     \n>    }\n> ```\n> \n> We will consider adding basic implementation of such methods to our `AxelarExecutable` so it can be adapted by the applications. We will have a better idea of the requirements when there will be more applications built on top. Good spot.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/139#issuecomment-1236442434):**\n > The warden has shown that the system in scope has no way to \"cancel and refund\" a transaction, while the details for impact are implementation dependent, allowing canceling tx that are failing to be relayed will help integrators in the worst case.\n> \n> While impact is hard to quantify because the expected value of the operation by the caller should be higher than the gas paid, the actual loss in the stated case is that of the gas cost of the transaction.\n> \n> While minor, given the fact that it is not recoverable, given the value of the submission and the acknowledgment by the sponsor, I think Medium Severity to be appropriate.\n\n**[re1ro (Axelar) disagreed with severity and commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/139#issuecomment-1247489061):**\n > We disagree with severity.<br>\n> Transactions are recoverable/refundable. There is nothing preventing it to be recovered from our protocol perspective. It's just that we don't suggest any default mechanism for this.\n> \n> Refund and cancel methods are up to the cross-chain app developer to implement. It very application specific and it's not up for us to decide how and what should be recovered/refunded. For some application execution deadline could be a trigger to refund, for others - price slippage. Even if transaction reverts it will restore the gateway approval and can be retried or refunded.\n> \n> Again it is not responsibility of the protocol but rather an application specific logic. We marked it as acknowledged because we agree we should provide some guidelines and examples for this in our docs. But there is no outstanding issue in this regard.\n\n**Please note: the following took place after judging and awarding were finalized.**\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/139#issuecomment-1268881479):**\n > I believe the Sponsor's counterargument to be valid and invite end users to make up their own opinion.\n>\n> Ultimately the presence or absence of an app-specific refund is dependent on the implementation.\n>\n> I chose to give Medium Severity in view of the risk for end-users, however, I could have rated with QA given a different context.\n>\n> I invite end-users to make up their own opinion and thank the sponsor for their insight.\n\n\n\n***\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 65 reports were submitted by wardens detailing low risk and non-critical issues. The [report highlighted below](https://github.com/code-423n4/2022-07-axelar-findings/issues/8) by **oyc&#95;109** received the top score from the judge.\n\n*The following wardens also submitted reports: [rbserver](https://github.com/code-423n4/2022-07-axelar-findings/issues/116), [IllIllI](https://github.com/code-423n4/2022-07-axelar-findings/issues/121), [Bnke0x0](https://github.com/code-423n4/2022-07-axelar-findings/issues/53), [defsec](https://github.com/code-423n4/2022-07-axelar-findings/issues/182), [xiaoming90](https://github.com/code-423n4/2022-07-axelar-findings/issues/168), [horsefacts](https://github.com/code-423n4/2022-07-axelar-findings/issues/187), [JC](https://github.com/code-423n4/2022-07-axelar-findings/issues/232), [robee](https://github.com/code-423n4/2022-07-axelar-findings/issues/16), [0x52](https://github.com/code-423n4/2022-07-axelar-findings/issues/88), [Dravee](https://github.com/code-423n4/2022-07-axelar-findings/issues/226), [mics](https://github.com/code-423n4/2022-07-axelar-findings/issues/27), [Chom](https://github.com/code-423n4/2022-07-axelar-findings/issues/185), [0x1f8b](https://github.com/code-423n4/2022-07-axelar-findings/issues/120), [berndartmueller](https://github.com/code-423n4/2022-07-axelar-findings/issues/138), [fatherOfBlocks](https://github.com/code-423n4/2022-07-axelar-findings/issues/52), [Sm4rty](https://github.com/code-423n4/2022-07-axelar-findings/issues/198), [hansfriese](https://github.com/code-423n4/2022-07-axelar-findings/issues/129), [Aymen0909](https://github.com/code-423n4/2022-07-axelar-findings/issues/184), [c3phas](https://github.com/code-423n4/2022-07-axelar-findings/issues/213), [Deivitto](https://github.com/code-423n4/2022-07-axelar-findings/issues/150), [lucacez](https://github.com/code-423n4/2022-07-axelar-findings/issues/70), [&#95;&#95;141345&#95;&#95;](https://github.com/code-423n4/2022-07-axelar-findings/issues/146), [Rohan16](https://github.com/code-423n4/2022-07-axelar-findings/issues/207), [Waze](https://github.com/code-423n4/2022-07-axelar-findings/issues/205), [kyteg](https://github.com/code-423n4/2022-07-axelar-findings/issues/103), [Rolezn](https://github.com/code-423n4/2022-07-axelar-findings/issues/3), [cccz](https://github.com/code-423n4/2022-07-axelar-findings/issues/160), [CertoraInc](https://github.com/code-423n4/2022-07-axelar-findings/issues/196), [Lambda](https://github.com/code-423n4/2022-07-axelar-findings/issues/21), [simon135](https://github.com/code-423n4/2022-07-axelar-findings/issues/172), [Respx](https://github.com/code-423n4/2022-07-axelar-findings/issues/131), [0xNazgul](https://github.com/code-423n4/2022-07-axelar-findings/issues/73), [ajtra](https://github.com/code-423n4/2022-07-axelar-findings/issues/200), [Ruhum](https://github.com/code-423n4/2022-07-axelar-findings/issues/46), [benbaessler](https://github.com/code-423n4/2022-07-axelar-findings/issues/153), [sseefried](https://github.com/code-423n4/2022-07-axelar-findings/issues/97), [bharg4v](https://github.com/code-423n4/2022-07-axelar-findings/issues/217), [cryptonue](https://github.com/code-423n4/2022-07-axelar-findings/issues/180), [RedOneN](https://github.com/code-423n4/2022-07-axelar-findings/issues/83), [0xf15ers](https://github.com/code-423n4/2022-07-axelar-findings/issues/189), [0xSmartContract](https://github.com/code-423n4/2022-07-axelar-findings/issues/84), [8olidity](https://github.com/code-423n4/2022-07-axelar-findings/issues/12), [apostle0x01](https://github.com/code-423n4/2022-07-axelar-findings/issues/169), [ashiq0x01](https://github.com/code-423n4/2022-07-axelar-findings/issues/95), [bardamu](https://github.com/code-423n4/2022-07-axelar-findings/issues/230), [bulej93](https://github.com/code-423n4/2022-07-axelar-findings/issues/107), [codexploder](https://github.com/code-423n4/2022-07-axelar-findings/issues/123), [CodingNameKiki](https://github.com/code-423n4/2022-07-axelar-findings/issues/81), [cryptphi](https://github.com/code-423n4/2022-07-axelar-findings/issues/136), [djxploit](https://github.com/code-423n4/2022-07-axelar-findings/issues/183), [durianSausage](https://github.com/code-423n4/2022-07-axelar-findings/issues/15), [ElKu](https://github.com/code-423n4/2022-07-axelar-findings/issues/93), [gogo](https://github.com/code-423n4/2022-07-axelar-findings/issues/209), [ignacio](https://github.com/code-423n4/2022-07-axelar-findings/issues/4), [Noah3o6](https://github.com/code-423n4/2022-07-axelar-findings/issues/66), [sashik&#95;eth](https://github.com/code-423n4/2022-07-axelar-findings/issues/192), [tofunmi](https://github.com/code-423n4/2022-07-axelar-findings/issues/60), [TomJ](https://github.com/code-423n4/2022-07-axelar-findings/issues/75), [Twpony](https://github.com/code-423n4/2022-07-axelar-findings/issues/188), [ch13fd357r0y3r](https://github.com/code-423n4/2022-07-axelar-findings/issues/6), [NoamYakov](https://github.com/code-423n4/2022-07-axelar-findings/issues/218), [ReyAdmirado](https://github.com/code-423n4/2022-07-axelar-findings/issues/48), [asutorufos](https://github.com/code-423n4/2022-07-axelar-findings/issues/215), and [Yiko](https://github.com/code-423n4/2022-07-axelar-findings/issues/118).*\n\n## [L-01] Unused receive() function\n\nIf the intention is for the Ether to be used, the function should call another function, otherwise it should revert\n\n    AxelarDepositServiceProxy.sol::13 => receive() external payable override {}\n    DepositReceiver.sol::29 => receive() external payable {}\n\n## [L-02] decimals() not part of ERC20 standard\n\ndecimals() is not part of the official ERC20 standard and might fail for tokens that do not implement it. While in practice it is very unlikely, as usually most of the tokens implement it, this should still be considered as a potential issue.\n\n    XC20Wrapper.sol::62 => if (!LocalAsset(xc20Token).set_metadata(newName, newSymbol, IERC20(axelarToken).decimals())) revert('CannotSetMetadata()');\n\n## [L-03] Unsafe use of transfer()/transferFrom() with IERC20\n\nSome tokens do not implement the ERC20 standard properly but are still accepted by most code that accepts ERC20 tokens. For example Tether (USDT)'s transfer() and transferFrom() functions do not return booleans as the specification requires, and instead have no return value. When these sorts of tokens are cast to IERC20, their function signatures do not match and therefore the calls made, revert. Use OpenZeppelin’s SafeERC20's safeTransfer()/safeTransferFrom() instead\n\n    AxelarGasService.sol::128 => if (amount > 0) receiver.transfer(amount);\n    AxelarGasService.sol::144 => receiver.transfer(amount);\n    ReceiverImplementation.sol::23 => if (address(this).balance > 0) refundAddress.transfer(address(this).balance);\n    ReceiverImplementation.sol::51 => if (address(this).balance > 0) refundAddress.transfer(address(this).balance);\n    ReceiverImplementation.sol::71 => if (address(this).balance > 0) refundAddress.transfer(address(this).balance);\n    ReceiverImplementation.sol::86 => recipient.transfer(amount);\n\n## [L-04] Missing checks for zero address\n\nChecking addresses against zero-address during initialization or during setting is a security best-practice. However, such checks are missing in address variable initializations/changes in many places.\n\nImpact: Allowing zero-addresses will lead to contract reverts and force redeployments if there are no setters for such address variables.\n\n    https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L229\n    https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L19\n\n## [N-01] Use a more recent version of solidity\n\nUse a solidity version of at least 0.8.4 to get bytes.concat() instead of abi.encodePacked(<bytes>,<bytes>)\nUse a solidity version of at least 0.8.12 to get string.concat() instead of abi.encodePacked(<str>,<str>)\nUse a solidity version of at least 0.8.13 to get the ability to use using for with a list of free functions\n\n    AxelarAuthWeighted.sol::3 => pragma solidity 0.8.9;\n    AxelarDepositServiceProxy.sol::3 => pragma solidity 0.8.9;\n    AxelarDepositService.sol::3 => pragma solidity 0.8.9;\n    AxelarGasServiceProxy.sol::3 => pragma solidity 0.8.9;\n    AxelarGasService.sol::3 => pragma solidity 0.8.9;\n    AxelarGateway.sol::3 => pragma solidity 0.8.9;\n    DepositBase.sol::3 => pragma solidity 0.8.9;\n    DepositReceiver.sol::3 => pragma solidity 0.8.9;\n    IAxelarAuth.sol::3 => pragma solidity ^0.8.9;\n    IAxelarAuthWeighted.sol::3 => pragma solidity ^0.8.9;\n    IAxelarDepositService.sol::3 => pragma solidity ^0.8.9;\n    IAxelarGasService.sol::3 => pragma solidity ^0.8.9;\n    IDepositBase.sol::3 => pragma solidity ^0.8.9;\n    ReceiverImplementation.sol::3 => pragma solidity 0.8.9;\n    XC20Wrapper.sol::3 => pragma solidity 0.8.9;\n\n## [N-02] Unspecific Compiler Version Pragma\n\nAvoid floating pragmas for non-library contracts.\n\nWhile floating pragmas make sense for libraries to allow them to be included with multiple different versions of applications, it may be a security risk for application implementations.\n\nA known vulnerable compiler version may accidentally be selected or security tools might fall-back to an older compiler version ending up checking a different EVM compilation that is ultimately deployed on the blockchain.\n\nIt is recommended to pin to a concrete compiler version.\n\n    IAxelarAuth.sol::3 => pragma solidity ^0.8.9;\n    IAxelarAuthWeighted.sol::3 => pragma solidity ^0.8.9;\n    IAxelarDepositService.sol::3 => pragma solidity ^0.8.9;\n    IAxelarGasService.sol::3 => pragma solidity ^0.8.9;\n    IDepositBase.sol::3 => pragma solidity ^0.8.9;\n\n**[re1ro (Axelar) acknowledged and commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/8#issuecomment-1205893984):**\n > **[L-01]**<br>\n> Not applicable. We need `receive` to receive ether from `WETH` contract.\n> \n> **[L-02]**<br>\n> Not applicable. `axelarToken` is our own implementation in this context and it implements `decimals`\n> \n> **[L-03]**<br>\n> Nope.\n> \n> **[L-04]**<br>\n> Yes.\n> \n> **[N-01]**<br>\n> We allow Unspecific Compiler version for our interfaces, so they can be imported by other projects\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/8#issuecomment-1233585799):**\n > **[L-01] Unused receive() function**<br>\n> For the proxy<br>\n> Low\n> \n> **[L-02] decimals() not part of ERC20 standard**<br>\n> Low\n> \n> **[L-03] Unsafe use of transfer()/transferFrom() with IERC20**<br>\n> Low\n> \n> **[L-04] Missing checks for zero address**<br>\n> Low\n> \n> **[N-01] Use a more recent version of solidity**<br>\n> Non-critical\n> \n> **[N-02] Unspecific Compiler Version Pragma**<br>\n> Non-critical\n\n\n\n***\n\n# Gas Optimizations\n\nFor this contest, 56 reports were submitted by wardens detailing gas optimizations. The [report highlighted below](https://github.com/code-423n4/2022-07-axelar-findings/issues/122) by **IllIllI** received the top score from the judge.\n\n*The following wardens also submitted reports: [JC](https://github.com/code-423n4/2022-07-axelar-findings/issues/231), [Dravee](https://github.com/code-423n4/2022-07-axelar-findings/issues/211), [0x1f8b](https://github.com/code-423n4/2022-07-axelar-findings/issues/113), [ajtra](https://github.com/code-423n4/2022-07-axelar-findings/issues/177), [Bnke0x0](https://github.com/code-423n4/2022-07-axelar-findings/issues/13), [defsec](https://github.com/code-423n4/2022-07-axelar-findings/issues/225), [Deivitto](https://github.com/code-423n4/2022-07-axelar-findings/issues/149), [fatherOfBlocks](https://github.com/code-423n4/2022-07-axelar-findings/issues/51), [oyc&#95;109](https://github.com/code-423n4/2022-07-axelar-findings/issues/7), [Aymen0909](https://github.com/code-423n4/2022-07-axelar-findings/issues/173), [MiloTruck](https://github.com/code-423n4/2022-07-axelar-findings/issues/174), [TomJ](https://github.com/code-423n4/2022-07-axelar-findings/issues/181), [Ruhum](https://github.com/code-423n4/2022-07-axelar-findings/issues/45), [&#95;&#95;141345&#95;&#95;](https://github.com/code-423n4/2022-07-axelar-findings/issues/148), [0xNazgul](https://github.com/code-423n4/2022-07-axelar-findings/issues/72), [0xsam](https://github.com/code-423n4/2022-07-axelar-findings/issues/64), [apostle0x01](https://github.com/code-423n4/2022-07-axelar-findings/issues/170), [benbaessler](https://github.com/code-423n4/2022-07-axelar-findings/issues/151), [djxploit](https://github.com/code-423n4/2022-07-axelar-findings/issues/179), [gerdusx](https://github.com/code-423n4/2022-07-axelar-findings/issues/154), [gogo](https://github.com/code-423n4/2022-07-axelar-findings/issues/191), [kyteg](https://github.com/code-423n4/2022-07-axelar-findings/issues/104), [Lambda](https://github.com/code-423n4/2022-07-axelar-findings/issues/18), [lucacez](https://github.com/code-423n4/2022-07-axelar-findings/issues/69), [medikko](https://github.com/code-423n4/2022-07-axelar-findings/issues/234), [NoamYakov](https://github.com/code-423n4/2022-07-axelar-findings/issues/221), [rbserver](https://github.com/code-423n4/2022-07-axelar-findings/issues/126), [RedOneN](https://github.com/code-423n4/2022-07-axelar-findings/issues/82), [ReyAdmirado](https://github.com/code-423n4/2022-07-axelar-findings/issues/47), [robee](https://github.com/code-423n4/2022-07-axelar-findings/issues/17), [Rolezn](https://github.com/code-423n4/2022-07-axelar-findings/issues/2), [simon135](https://github.com/code-423n4/2022-07-axelar-findings/issues/171), [tofunmi](https://github.com/code-423n4/2022-07-axelar-findings/issues/59), [Tomio](https://github.com/code-423n4/2022-07-axelar-findings/issues/115), [Respx](https://github.com/code-423n4/2022-07-axelar-findings/issues/86), [asutorufos](https://github.com/code-423n4/2022-07-axelar-findings/issues/222), [bharg4v](https://github.com/code-423n4/2022-07-axelar-findings/issues/223), [bulej93](https://github.com/code-423n4/2022-07-axelar-findings/issues/106), [Chom](https://github.com/code-423n4/2022-07-axelar-findings/issues/204), [CodingNameKiki](https://github.com/code-423n4/2022-07-axelar-findings/issues/57), [durianSausage](https://github.com/code-423n4/2022-07-axelar-findings/issues/14), [mics](https://github.com/code-423n4/2022-07-axelar-findings/issues/28), [owenthurm](https://github.com/code-423n4/2022-07-axelar-findings/issues/92), [Rohan16](https://github.com/code-423n4/2022-07-axelar-findings/issues/208), [sashik&#95;eth](https://github.com/code-423n4/2022-07-axelar-findings/issues/202), [Sm4rty](https://github.com/code-423n4/2022-07-axelar-findings/issues/199), [Waze](https://github.com/code-423n4/2022-07-axelar-findings/issues/197), [a12jmx](https://github.com/code-423n4/2022-07-axelar-findings/issues/233), [Fitraldys](https://github.com/code-423n4/2022-07-axelar-findings/issues/224), [8olidity](https://github.com/code-423n4/2022-07-axelar-findings/issues/11), [ak1](https://github.com/code-423n4/2022-07-axelar-findings/issues/190), [c3phas](https://github.com/code-423n4/2022-07-axelar-findings/issues/214), [ElKu](https://github.com/code-423n4/2022-07-axelar-findings/issues/94), [erictee](https://github.com/code-423n4/2022-07-axelar-findings/issues/49), and [Noah3o6](https://github.com/code-423n4/2022-07-axelar-findings/issues/67).*\n\n## Summary\n\n|        | Issue                                                                                                                                                      | Instances |\n| ------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------- | :-------: |\n| [G‑01] | Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas                                                             |     7     |\n| [G‑02] | Avoid contract existence checks by using solidity version 0.8.10 or later                                                                                  |     25    |\n| [G‑03] | `internal` functions only called once can be inlined to save gas                                                                                           |     7     |\n| [G‑04] | `<array>.length` should not be looked up in every loop of a `for`-loop                                                                                     |     7     |\n| [G‑05] | `++i`/`i++` should be `unchecked{++i}`/`unchecked{i++}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops |     12    |\n| [G‑06] | `keccak256()` should only need to be called on a specific string literal once                                                                              |     4     |\n| [G‑07] | Optimize names to save gas                                                                                                                                 |     10    |\n| [G‑08] | `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too)                                                                |     5     |\n| [G‑09] | Empty blocks should be removed or emit something                                                                                                           |     2     |\n| [G‑10] | Functions guaranteed to revert when called by normal users can be marked `payable`                                                                         |     11    |\n\nTotal: 90 instances over 10 issues\n\n## [G‑01]  Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas\n\nWhen a function with a `memory` array is called externally, the `abi.decode()` step has to use a for-loop to copy each index of the `calldata` to the `memory` index. **Each iteration of this for-loop costs at least 60 gas** (i.e. `60 * <mem_array>.length`). Using `calldata` directly, obliviates the need for such a loop in the contract code and runtime execution. Note that even if an interface defines a function as having `memory` arguments, it's still valid for implementation contracs to use `calldata` arguments instead.\n\nIf the array is passed to an `internal` function which passes the array to another internal function where the array is modified and therefore `memory` is used in the `external` call, it's still more gass-efficient to use `calldata` when the `external` function uses modifiers, since the modifiers may prevent the internal functions from being called. Structs have the same overhead as an array of length one\n\nNote that I've also flagged instances where the function is `public` but can be marked as `external` since it's not called by the contract, and cases where a constructor is involved\n\n*There are 7 instances of this issue:*\n\n```solidity\nFile: contracts/auth/AxelarAuthWeighted.sol\n\n/// @audit recentOperators\n16:       constructor(bytes[] memory recentOperators) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L16>\n\n```solidity\nFile: contracts/AxelarGateway.sol\n\n172:      function tokenFrozen(string memory) external pure override returns (bool) {\n\n/// @audit executeData\n447       function _unpackLegacyCommands(bytes memory executeData)\n448           external\n449           pure\n450           returns (\n451               uint256 chainId,\n452               bytes32[] memory commandIds,\n453               string[] memory commands,\n454:              bytes[] memory params\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L172>\n\n```solidity\nFile: contracts/deposit-service/AxelarDepositService.sol\n\n/// @audit wrappedSymbol\n18:       constructor(address gateway, string memory wrappedSymbol) DepositBase(gateway, wrappedSymbol) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L18>\n\n```solidity\nFile: contracts/deposit-service/DepositReceiver.sol\n\n/// @audit delegateData\n8:        constructor(bytes memory delegateData) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/DepositReceiver.sol#L8>\n\n```solidity\nFile: contracts/deposit-service/ReceiverImplementation.sol\n\n/// @audit wrappedSymbol\n12:       constructor(address gateway, string memory wrappedSymbol) DepositBase(gateway, wrappedSymbol) {}\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/ReceiverImplementation.sol#L12>\n\n```solidity\nFile: contracts/gas-service/AxelarGasService.sol\n\n/// @audit symbol\n35        function payGasForContractCallWithToken(\n36            address sender,\n37            string calldata destinationChain,\n38            string calldata destinationAddress,\n39            bytes calldata payload,\n40            string memory symbol,\n41            uint256 amount,\n42            address gasToken,\n43            uint256 gasFeeAmount,\n44:           address refundAddress\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L35-L44>\n\n## [G‑02]  Avoid contract existence checks by using solidity version 0.8.10 or later\n\nPrior to 0.8.10 the compiler inserted extra code, including `EXTCODESIZE` (**100 gas**), to check for contract existence for external calls. In more recent solidity versions, the compiler will not insert these checks if the external call has a return value\n\n*There are 25 instances of this issue:*\n\n```solidity\nFile: contracts/AxelarGateway.sol\n\n/// @audit validateProof()\n268:          bool currentOperators = IAxelarAuth(AUTH_MODULE).validateProof(messageHash, proof);\n\n/// @audit _unpackLegacyCommands()\n275:          try AxelarGateway(this)._unpackLegacyCommands(data) returns (\n\n/// @audit call()\n320:              (bool success, ) = address(this).call(abi.encodeWithSelector(commandSelector, params[i], commandId));\n\n/// @audit balanceOf()\n385:                  abi.encodeWithSelector(IERC20.transfer.selector, address(this), IERC20(tokenAddress).balanceOf(address(depositHandler)))\n\n/// @audit burn()\n393:              IBurnableMintableCappedERC20(tokenAddress).burn(salt);\n\n/// @audit mint()\n481:              IBurnableMintableCappedERC20(tokenAddress).mint(account, amount);\n\n/// @audit depositAddress()\n525:                  IBurnableMintableCappedERC20(tokenAddress).depositAddress(bytes32(0)),\n\n/// @audit burn()\n532:          IBurnableMintableCappedERC20(tokenAddress).burn(bytes32(0));\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L268>\n\n```solidity\nFile: contracts/deposit-service/AxelarDepositService.sol\n\n/// @audit approve()\n30:           IERC20(wrappedTokenAddress).approve(gateway, amount);\n\n/// @audit tokenAddresses()\n115:              address gatewayToken = IAxelarGateway(gateway).tokenAddresses(tokenSymbol);\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L30>\n\n```solidity\nFile: contracts/deposit-service/DepositReceiver.sol\n\n/// @audit delegatecall()\n/// @audit receiverImplementation()\n12:           (bool success, ) = IAxelarDepositService(msg.sender).receiverImplementation().delegatecall(delegateData);\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/DepositReceiver.sol#L12>\n\n```solidity\nFile: contracts/deposit-service/ReceiverImplementation.sol\n\n/// @audit tokenAddresses()\n25:           address tokenAddress = IAxelarGateway(gateway).tokenAddresses(symbol);\n\n/// @audit refundToken()\n27:           address refund = DepositBase(msg.sender).refundToken();\n\n/// @audit balanceOf()\n29:               _safeTransfer(refund, refundAddress, IERC20(refund).balanceOf(address(this)));\n\n/// @audit balanceOf()\n33:           uint256 amount = IERC20(tokenAddress).balanceOf(address(this));\n\n/// @audit approve()\n38:           IERC20(tokenAddress).approve(gateway, amount);\n\n/// @audit refundToken()\n49:           address refund = DepositBase(msg.sender).refundToken();\n\n/// @audit balanceOf()\n53:               _safeTransfer(refund, refundAddress, IERC20(refund).balanceOf(address(this)));\n\n/// @audit approve()\n64:           IERC20(wrappedTokenAddress).approve(gateway, amount);\n\n/// @audit refundToken()\n74:           address refund = DepositBase(msg.sender).refundToken();\n\n/// @audit balanceOf()\n76:               _safeTransfer(refund, refundAddress, IERC20(refund).balanceOf(address(this)));\n\n/// @audit balanceOf()\n80:           uint256 amount = IERC20(wrappedTokenAddress).balanceOf(address(this));\n\n/// @audit withdraw()\n85:           IWETH9(wrappedTokenAddress).withdraw(amount);\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/ReceiverImplementation.sol#L25>\n\n```solidity\nFile: contracts/gas-service/AxelarGasService.sol\n\n/// @audit balanceOf()\n130:                  uint256 amount = IERC20(token).balanceOf(address(this));\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L130>\n\n## [G‑03]  `internal` functions only called once can be inlined to save gas\n\nNot inlining costs **20 to 40 gas** because of two extra `JUMP` instructions and additional stack operations needed for function calls.\n\n*There are 7 instances of this issue:*\n\n```solidity\nFile: contracts/auth/AxelarAuthWeighted.sol\n\n86        function _validateSignatures(\n87            bytes32 messageHash,\n88            address[] memory operators,\n89            uint256[] memory weights,\n90            uint256 threshold,\n91:           bytes[] memory signatures\n\n115:      function _isSortedAscAndContainsNoDuplicate(address[] memory accounts) internal pure returns (bool) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L86-L91>\n\n```solidity\nFile: contracts/AxelarGateway.sol\n\n611:      function _setTokenDailyMintAmount(string memory symbol, uint256 amount) internal {\n\n622:      function _setTokenAddress(string memory symbol, address tokenAddress) internal {\n\n630       function _setContractCallApproved(\n631           bytes32 commandId,\n632           string memory sourceChain,\n633           string memory sourceAddress,\n634           address contractAddress,\n635:          bytes32 payloadHash\n\n640       function _setContractCallApprovedWithMint(\n641           bytes32 commandId,\n642           string memory sourceChain,\n643           string memory sourceAddress,\n644           address contractAddress,\n645           bytes32 payloadHash,\n646           string memory symbol,\n647:          uint256 amount\n\n655:      function _setImplementation(address newImplementation) internal {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L611>\n\n## [G‑04]  `<array>.length` should not be looked up in every loop of a `for`-loop\n\nThe overheads outlined below are *PER LOOP*, excluding the first loop\n\n*   storage arrays incur a Gwarmaccess (**100 gas**)\n*   memory arrays use `MLOAD` (**3 gas**)\n*   calldata arrays use `CALLDATALOAD` (**3 gas**)\n\nCaching the length changes each of these to a `DUP<N>` (**3 gas**), and gets rid of the extra `DUP<N>` needed to store the stack offset\n\n*There are 7 instances of this issue:*\n\n```solidity\nFile: contracts/auth/AxelarAuthWeighted.sol\n\n17:           for (uint256 i; i < recentOperators.length; ++i) {\n\n98:           for (uint256 i = 0; i < signatures.length; ++i) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L17>\n\n```solidity\nFile: contracts/AxelarGateway.sol\n\n207:          for (uint256 i = 0; i < symbols.length; i++) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L207>\n\n```solidity\nFile: contracts/deposit-service/AxelarDepositService.sol\n\n114:          for (uint256 i; i < refundTokens.length; i++) {\n\n168:          for (uint256 i; i < refundTokens.length; i++) {\n\n204:          for (uint256 i; i < refundTokens.length; i++) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L114>\n\n```solidity\nFile: contracts/gas-service/AxelarGasService.sol\n\n123:          for (uint256 i; i < tokens.length; i++) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L123>\n\n## [G‑05]  `++i`/`i++` should be `unchecked{++i}`/`unchecked{i++}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops\n\nThe `unchecked` keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves **30-40 gas [per loop](https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#the-increment-in-for-loop-post-condition-can-be-made-unchecked)**\n\n*There are 12 instances of this issue:*\n\n```solidity\nFile: contracts/auth/AxelarAuthWeighted.sol\n\n17:           for (uint256 i; i < recentOperators.length; ++i) {\n\n69:           for (uint256 i = 0; i < weightsLength; ++i) {\n\n98:           for (uint256 i = 0; i < signatures.length; ++i) {\n\n101:              for (; operatorIndex < operatorsLength && signer != operators[operatorIndex]; ++operatorIndex) {}\n\n116:          for (uint256 i; i < accounts.length - 1; ++i) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L17>\n\n```solidity\nFile: contracts/AxelarGateway.sol\n\n195:          for (uint256 i; i < adminCount; ++i) {\n\n207:          for (uint256 i = 0; i < symbols.length; i++) {\n\n292:          for (uint256 i; i < commandsLength; ++i) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L195>\n\n```solidity\nFile: contracts/deposit-service/AxelarDepositService.sol\n\n114:          for (uint256 i; i < refundTokens.length; i++) {\n\n168:          for (uint256 i; i < refundTokens.length; i++) {\n\n204:          for (uint256 i; i < refundTokens.length; i++) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L114>\n\n```solidity\nFile: contracts/gas-service/AxelarGasService.sol\n\n123:          for (uint256 i; i < tokens.length; i++) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L123>\n\n## [G‑06]  `keccak256()` should only need to be called on a specific string literal once\n\nIt should be saved to an immutable variable, and the variable used instead. If the hash is being used as a part of a function selector, the cast to `bytes4` should also only be done once\n\n*There are 4 instances of this issue:*\n\n```solidity\nFile: contracts/deposit-service/AxelarDepositServiceProxy.sol\n\n9:            return keccak256('axelar-deposit-service');\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositServiceProxy.sol#L9>\n\n```solidity\nFile: contracts/deposit-service/AxelarDepositService.sol\n\n242:          return keccak256('axelar-deposit-service');\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L242>\n\n```solidity\nFile: contracts/gas-service/AxelarGasServiceProxy.sol\n\n10:           return keccak256('axelar-gas-service');\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasServiceProxy.sol#L10>\n\n```solidity\nFile: contracts/gas-service/AxelarGasService.sol\n\n181:          return keccak256('axelar-gas-service');\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L181>\n\n## [G‑07]  Optimize names to save gas\n\n`public`/`external` function names and `public` member variable names can be optimized to save gas. See [this](https://gist.github.com/IllIllI000/a5d8b486a8259f9f77891a919febd1a9) link for an example of how it works. Below are the interfaces/abstract contracts that can be optimized so that the most frequently-called functions use the least amount of gas possible during method lookup. Method IDs that have two leading zero bytes can save **128 gas** each during deployment, and renaming functions to have lower method IDs will save **22 gas** per call, [per sorted position shifted](https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92)\n\n*There are 10 instances of this issue:*\n\n```solidity\nFile: contracts/auth/AxelarAuthWeighted.sol\n\n/// @audit validateProof(), transferOperatorship()\n9:    contract AxelarAuthWeighted is Ownable, IAxelarAuthWeighted {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L9>\n\n```solidity\nFile: contracts/AxelarGateway.sol\n\n/// @audit sendToken(), callContract(), callContractWithToken(), deployToken(), mintToken(), burnToken(), approveContractCall(), approveContractCallWithMint(), transferOperatorship(), _unpackLegacyCommands()\n15:   contract AxelarGateway is IAxelarGateway, AdminMultisigBase {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L15>\n\n```solidity\nFile: contracts/deposit-service/AxelarDepositService.sol\n\n/// @audit sendNative(), addressForTokenDeposit(), addressForNativeDeposit(), addressForNativeUnwrap(), sendTokenDeposit(), refundTokenDeposit(), sendNativeDeposit(), refundNativeDeposit(), nativeUnwrap(), refundNativeUnwrap(), contractId()\n15:   contract AxelarDepositService is Upgradable, DepositBase, IAxelarDepositService {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L15>\n\n```solidity\nFile: contracts/deposit-service/ReceiverImplementation.sol\n\n/// @audit receiveAndSendToken(), receiveAndSendNative(), receiveAndUnwrapNative()\n11:   contract ReceiverImplementation is DepositBase {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/ReceiverImplementation.sol#L11>\n\n```solidity\nFile: contracts/gas-service/AxelarGasService.sol\n\n/// @audit collectFees(), refund(), contractId()\n10:   contract AxelarGasService is Upgradable, IAxelarGasService {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L10>\n\n```solidity\nFile: contracts/interfaces/IAxelarAuth.sol\n\n/// @audit validateProof(), transferOperatorship()\n7:    interface IAxelarAuth is IOwnable {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarAuth.sol#L7>\n\n```solidity\nFile: contracts/interfaces/IAxelarAuthWeighted.sol\n\n/// @audit currentEpoch(), hashForEpoch(), epochForHash()\n7:    interface IAxelarAuthWeighted is IAxelarAuth {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarAuthWeighted.sol#L7>\n\n```solidity\nFile: contracts/interfaces/IAxelarDepositService.sol\n\n/// @audit sendNative(), addressForTokenDeposit(), addressForNativeDeposit(), addressForNativeUnwrap(), sendTokenDeposit(), refundTokenDeposit(), sendNativeDeposit(), refundNativeDeposit(), nativeUnwrap(), refundNativeUnwrap(), receiverImplementation()\n9:    interface IAxelarDepositService is IUpgradable, IDepositBase {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarDepositService.sol#L9>\n\n```solidity\nFile: contracts/interfaces/IAxelarExecutable.sol\n\n/// @audit execute(), executeWithToken()\n7:    abstract contract IAxelarExecutable {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarExecutable.sol#L7>\n\n```solidity\nFile: contracts/interfaces/IAxelarGasService.sol\n\n/// @audit payGasForContractCall(), payGasForContractCallWithToken(), payNativeGasForContractCall(), payNativeGasForContractCallWithToken(), addGas(), addNativeGas(), collectFees(), refund()\n8:    interface IAxelarGasService is IUpgradable {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarGasService.sol#L8>\n\n## [G‑08]  `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too)\n\nSaves **5 gas per loop**\n\n*There are 5 instances of this issue:*\n\n```solidity\nFile: contracts/AxelarGateway.sol\n\n207:          for (uint256 i = 0; i < symbols.length; i++) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L207>\n\n```solidity\nFile: contracts/deposit-service/AxelarDepositService.sol\n\n114:          for (uint256 i; i < refundTokens.length; i++) {\n\n168:          for (uint256 i; i < refundTokens.length; i++) {\n\n204:          for (uint256 i; i < refundTokens.length; i++) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/deposit-service/AxelarDepositService.sol#L114>\n\n```solidity\nFile: contracts/gas-service/AxelarGasService.sol\n\n123:          for (uint256 i; i < tokens.length; i++) {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L123>\n\n## [G‑09]  Empty blocks should be removed or emit something\n\nThe code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting. If the contract is meant to be extended, the contract should be `abstract` and the function signatures be added without any default implementation. If the block is an empty `if`-statement block to avoid doing subsequent checks in the else-if/else conditions, the else-if/else conditions should be nested under the negation of the if-statement, because they involve different classes of checks, which may lead to the introduction of errors when the code is later modified (`if(x){}else if(y){...}else{...}` => `if(!x){if(y){...}else{...}}`). Empty `receive()`/`fallback() payable` functions that are not used, can be removed to save deployment gas.\n\n*There are 2 instances of this issue:*\n\n```solidity\nFile: contracts/interfaces/IAxelarExecutable.sol\n\n46:       ) internal virtual {}\n\n54:       ) internal virtual {}\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/interfaces/IAxelarExecutable.sol#L46>\n\n## [G‑10]  Functions guaranteed to revert when called by normal users can be marked `payable`\n\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are\n`CALLVALUE`(2),`DUP1`(3),`ISZERO`(3),`PUSH2`(3),`JUMPI`(10),`PUSH1`(3),`DUP1`(3),`REVERT`(0),`JUMPDEST`(1),`POP`(2), which costs an average of about **21 gas per call** to the function, in addition to the extra deployment cost\n\n*There are 11 instances of this issue:*\n\n```solidity\nFile: contracts/auth/AxelarAuthWeighted.sol\n\n47:       function transferOperatorship(bytes calldata params) external onlyOwner {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/auth/AxelarAuthWeighted.sol#L47>\n\n```solidity\nFile: contracts/AxelarGateway.sol\n\n204:      function setTokenDailyMintLimits(string[] calldata symbols, uint256[] calldata limits) external override onlyAdmin {\n\n217       function upgrade(\n218           address newImplementation,\n219           bytes32 newImplementationCodeHash,\n220           bytes calldata setupParams\n221:      ) external override onlyAdmin {\n\n331:      function deployToken(bytes calldata params, bytes32) external onlySelf {\n\n367:      function mintToken(bytes calldata params, bytes32) external onlySelf {\n\n373:      function burnToken(bytes calldata params, bytes32) external onlySelf {\n\n397:      function approveContractCall(bytes calldata params, bytes32 commandId) external onlySelf {\n\n411:      function approveContractCallWithMint(bytes calldata params, bytes32 commandId) external onlySelf {\n\n437:      function transferOperatorship(bytes calldata newOperatorsData, bytes32) external onlySelf {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/AxelarGateway.sol#L204>\n\n```solidity\nFile: contracts/gas-service/AxelarGasService.sol\n\n120:      function collectFees(address payable receiver, address[] calldata tokens) external onlyOwner {\n\n136       function refund(\n137           address payable receiver,\n138           address token,\n139           uint256 amount\n140:      ) external onlyOwner {\n\n```\n\n<https://github.com/code-423n4/2022-07-axelar/blob/9c4c44b94cddbd48b9baae30051a4e13cbe39539/contracts/gas-service/AxelarGasService.sol#L120>\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-07-axelar-findings/issues/122#issuecomment-1226666802):**\n > **[G‑01] Using calldata instead of memory for read-only arguments in external functions saves gas**<br>\n> 60 for the array of bytes\n> \n> **[G‑02] Avoid contract existence checks by using solidity version 0.8.10 or later**<br>\n> 100 gas per instance<br>\n> 2500\n> \n> **[G‑03] internal functions only called once can be inlined to save gas**<br>\n> 20 per instance<br>\n> 140\n> \n> **[G‑04] <array>.length should not be looked up in every loop of a for-loop + [G-05]**<br>\n> Giving 300 consistently with rest of submissions\n> \n> **[G‑06] keccak256() should only need to be called on a specific string literal once**<br>\n> 30 gas per instance<br>\n> 120\n> \n> Rest is too opinionated for me :P\n> \n> Great report as usual, would love to see a couple customized suggestion (packing or similar) and benchmarks, but still really good.\n> \n> 3120 gas saved\n\n\n\n***\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}