{
  "circa": {
    "title": "Sushi Miso contest",
    "sponsor": "Sushi",
    "slug": "2021-09-sushimiso",
    "date": "2021-11-05",
    "findings": "https://github.com/code-423n4/2021-09-sushimiso-findings",
    "contest": 28
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of the Sushi Miso contest smart contract system written in Solidity. The code contest took place between September 9—September 15 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>11 Wardens contributed reports to the Sushi Miso contest code contest:</p>\n<ul>\n<li><a href=\"https://twitter.com/WatchPug_\">WatchPug</a></li>\n<li><a href=\"https://twitter.com/0xRajeev\">0xRajeev</a></li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://twitter.com/MukeshJ_eth\">JMukesh</a></li>\n<li><a href=\"https://twitter.com/liam_eastwood13\">leastwood</a></li>\n<li><a href=\"https://twitter.com/_hrkrshnn\">hrkrshnn</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/itsmeSTYJ\">itsmeSTYJ</a></li>\n<li><a href=\"https://twitter.com/loop_225\">loop</a></li>\n</ul>\n<p>This contest was judged by <a href=\"https://twitter.com/ghoulsol\">ghoul.sol</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 25 unique vulnerabilities and 101 total findings.  All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 3 received a risk rating in the category of HIGH severity, 1 received a risk rating in the category of MEDIUM severity, and 21 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 47 non-critical recommendations and 29 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-09-sushimiso\">C4 Sushi Miso contest repository</a> and is composed of 106 smart contracts written in the Solidity programming language, and includes 4,040 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-3\" style=\"position:relative;\"><a href=\"#high-risk-findings-3\" aria-label=\"high risk findings 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (3)</h1>\n<h2 id=\"h-01-postauctionlaunchersolfinalize-adding-liquidity-to-an-existing-pool-may-allows-the-attacker-to-steal-most-of-the-tokens\" style=\"position:relative;\"><a href=\"#h-01-postauctionlaunchersolfinalize-adding-liquidity-to-an-existing-pool-may-allows-the-attacker-to-steal-most-of-the-tokens\" aria-label=\"h 01 postauctionlaunchersolfinalize adding liquidity to an existing pool may allows the attacker to steal most of the tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/14\">[H-01] <code>PostAuctionLauncher.sol#finalize()</code> Adding liquidity to an existing pool may allows the attacker to steal most of the tokens</a></h2>\n<p><em>Submitted by WatchPug, also found by 0xRajeev and cmichel.</em></p>\n<p><code>PostAuctionLauncher.finalize()</code> can be called by anyone, and it sends tokens directly to the pair pool to mint liquidity, even when the pair pool exists.</p>\n<p>An attacker may control the LP price by creating the pool and then call <code>finalize()</code> to mint LP token with unfair price (pay huge amounts of tokens and get few amounts of LP token), and then remove the initial liquidity they acquired when creating the pool and take out huge amounts of tokens.</p>\n<p><a href=\"https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/Liquidity/PostAuctionLauncher.sol#L257\">https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/Liquidity/PostAuctionLauncher.sol#L257</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> Finalizes Token sale and launches LP.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> liquidity Number of LPs.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"> */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">finalize</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// GP: Can we remove admin, let anyone can finalise and launch?</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// require(hasAdminRole(msg.sender) || hasOperatorRole(msg.sender), &quot;PostAuction: Sender must be operator&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">marketConnected</span><span class=\"mtk1\">(), </span><span class=\"mtk8\">&quot;PostAuction: Auction must have this launcher address set as the destination wallet&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk12\">launcherInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">launched</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">market</span><span class=\"mtk1\">.</span><span class=\"mtk11\">finalized</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">market</span><span class=\"mtk1\">.</span><span class=\"mtk11\">finalize</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">market</span><span class=\"mtk1\">.</span><span class=\"mtk11\">finalized</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">launcherInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">launched</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">market</span><span class=\"mtk1\">.</span><span class=\"mtk11\">auctionSuccessful</span><span class=\"mtk1\">() ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev if the auction is settled in weth, wrap any contract balance </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">launcherBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">launcherBalance</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IWETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">weth</span><span class=\"mtk1\">).</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">{value : </span><span class=\"mtk12\">launcherBalance</span><span class=\"mtk1\">}();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token1Amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token2Amount</span><span class=\"mtk1\">) =  </span><span class=\"mtk11\">getTokenAmounts</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev cannot start a liquidity pool with no tokens on either side</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">token1Amount</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">token2Amount</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pair</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getPair</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token1</span><span class=\"mtk1\">), </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token2</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pair</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">createPool</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev add liquidity to pool via the pair directly</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token1</span><span class=\"mtk1\">), </span><span class=\"mtk12\">tokenPair</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token1Amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token2</span><span class=\"mtk1\">), </span><span class=\"mtk12\">tokenPair</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token2Amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IUniswapV2Pair</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenPair</span><span class=\"mtk1\">).</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">launcherInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">liquidityAdded</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BoringMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">to128</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">launcherInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">liquidityAdded</span><span class=\"mtk1\">).</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev if unlock time not yet set, add it.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">launcherInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unlock</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">launcherInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unlock</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BoringMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">to64</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">launcherInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">locktime</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LiquidityAdded</span><span class=\"mtk1\">(</span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>In line 257, <code>PostAuctionLauncher</code> will mint LP with <code>token1Amount</code> and <code>token2Amount</code>. The amounts (<code>token1Amount</code> and <code>token2Amount</code>) are computed according to the auction result, without considering the current price (reserves) of the existing <code>tokenPair</code>.</p>\n<p>See <a href=\"https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/Liquidity/PostAuctionLauncher.sol#L268\">PostAuctionLauncher.getTokenAmounts()</a></p>\n<p><code>PostAuctionLauncher</code> will receive an unfairly low amount of lp token because the amounts sent to <code>tokenPair</code> didn’t match the current price of the pair.</p>\n<p>See <a href=\"https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/UniswapV2/UniswapV2Pair.sol#L135\">UniswapV2Pair.mint(…)</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">MathUniswap</span><span class=\"mtk1\">.</span><span class=\"mtk11\">min</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount0</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_totalSupply</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">_reserve0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_totalSupply</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">_reserve1</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Lose a majority share of the tokens.</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>The attacker creates LP with 0.0000001 token1 and 1000 token2, receives 0.01 LP token;</li>\n<li>Call <code>PostAuctionLauncher.finalize()</code>. PostAuctionLauncher will mint liquidity with 2000 token1 and 1000 token2 for example, receives only  0.01 LP token;</li>\n<li>The attacker removes all his LP, receives 1000 token1 (most of which come from <code>PostAuctionLauncher</code>).</li>\n</ol>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>To only support tokenPair created by <code>PostAuctionLauncher</code> or check for the token price before mint liquidity.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/14#issuecomment-934641852\">Clearwood (Sushi Miso) confirmed and patched</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/sushiswap/miso/pull/21\">https://github.com/sushiswap/miso/pull/21</a></p>\n</blockquote>\n<h2 id=\"h-02-sushitoken-transfers-are-broken-due-to-wrong-delegates-accounting-on-transfers\" style=\"position:relative;\"><a href=\"#h-02-sushitoken-transfers-are-broken-due-to-wrong-delegates-accounting-on-transfers\" aria-label=\"h 02 sushitoken transfers are broken due to wrong delegates accounting on transfers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/117\">[H-02] SushiToken transfers are broken due to wrong delegates accounting on transfers</a></h2>\n<p><em>Submitted by cmichel</em>.</p>\n<p>When minting / transferring / burning tokens, the <code>SushiToken._beforeTokenTransfer</code> function is called and supposed to correctly shift the voting power due to the increase/decrease in tokens for the <code>from</code> and <code>to</code> accounts.\nHowever, it does not correctly do that, it tries to shift the votes from the <code>from</code> account, instead of the <strong><code>_delegates[from]</code></strong> account.\nThis can lead to transfers reverting.</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h4>\n<p>Imagine the following transactions on the <code>SushiToken</code> contract.\nWe’ll illustrate the corresponding <code>_moveDelegates</code> calls and written checkpoints for each.</p>\n<ul>\n<li><code>mint(A, 1000) = transfer(0, A, 1000)</code> => <code>_moveDelegates(0, delegates[A]=0)</code> => no checkpoints are written to anyone because delegatees are still zero</li>\n<li>A delegates to A’ => <code>_moveDelegates(0, A')</code> => <code>writeCheckpoint(A', 1000)</code></li>\n<li>B delegates to B’ => no checkpoints are written as B has a zero balance</li>\n<li><code>transfer(A, B, 1000)</code> => <code>_moveDelegates(A, delegates[B] = B')</code> => underflows when subtracting <code>amount=1000</code> from A’s non-existent checkpoint (defaults to 0 votes)</li>\n</ul>\n<p>It should subtract from A’s delegatee <code>A'</code>’s checkpoint instead.</p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Users that delegated votes will be unable to transfer any of their tokens.</p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>In <code>SushiToken._beforeTokenTransfer</code>, change the <code>_moveDelegates</code> call to be from <code>_delegates[from]</code> instead:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_beforeTokenTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> { </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_moveDelegates</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_delegates</span><span class=\"mtk1\">[</span><span class=\"mtk12\">from</span><span class=\"mtk1\">], </span><span class=\"mtk12\">_delegates</span><span class=\"mtk1\">[</span><span class=\"mtk12\">to</span><span class=\"mtk1\">], </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">super</span><span class=\"mtk1\">.</span><span class=\"mtk11\">_beforeTokenTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>This is also how the <a href=\"https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol#L241\">original code from Compound</a> does it.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/117#issuecomment-920570459\">maxsam4 (Sushi Miso) acknowledged</a>:</strong></p>\n<blockquote>\n<p>This is a known issue in Sushi token but was kept unchanged in MISO for “preservation of history :)“. That was not necessarily a wise choice lol. I think 1 severity should be fine for this as this was an intentional thing. The delegate feature is not supposed to be used in these tokens. We might create a new token type with this bug fixed.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/117#issuecomment-934637612\">ghoul-sol (judge) commented</a>:</strong></p>\n<blockquote>\n<p>We have crazy wallets on the blockchain that will call every possible function available to them and that’s why I’m keeping this as is. Even intentional, the issue stands so the warden should get credit for it.</p>\n</blockquote>\n<h2 id=\"h-03-last-person-to-withdraw-his-tokens-might-not-be-able-to-do-this-in-crowdsale-edge-case\" style=\"position:relative;\"><a href=\"#h-03-last-person-to-withdraw-his-tokens-might-not-be-able-to-do-this-in-crowdsale-edge-case\" aria-label=\"h 03 last person to withdraw his tokens might not be able to do this in crowdsale edge case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/15\">[H-03] Last person to withdraw his tokens might not be able to do this, in Crowdsale (edge case)</a></h2>\n<p><em>Submitted by gpersoon</em>.</p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Suppose a Crowdsale is successful and enough commitments are made before the <code>marketInfo.endTime</code>.\nSuppose marketStatus.commitmentsTotal  == marketInfo.totalTokens -1      // note this is an edge case, but can be constructed by an attacker\nThen the function <code>auctionEnded()</code> returns true\nAssume <code>auctionSuccessful()</code> is also true (might depend on the config of <code>marketPrice.goal</code> and <code>marketInfo.totalTokens</code>)\nThen an admin can call <code>finalize()</code> to finalize the Crowdsale.\nThe function finalize distributes the funds and the unsold tokens and sets <code>status.finalized = true</code> so that finalized cannot be called again.\nNow we have “marketInfo.totalTokens -1” tokens left in the contract</p>\n<p>However <code>commitEth()</code> or <code>commitTokens()</code> can still be called (they give no error message that the auction has ended)\nThen functions call <code>calculateCommitment</code>, which luckily prevent from buying too much, however 1 token can still be bought\nThese functions also call <code>\\_addCommitment()</code>, which only checks for <code>marketInfo.endTime</code>, which hasn’t passed yet.</p>\n<p>Now an extra token is sold and the contract has 1 token short. So the last person to withdraw his tokens cannot withdraw them (because you cannot specify how much you want to withdraw)</p>\n<p>Also the revenues for the last token cannot be retrieved as <code>finalize()</code> cannot be called again.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/sushiswap/miso/blob/master/contracts/Auctions/Crowdsale.sol#L374\">https://github.com/sushiswap/miso/blob/master/contracts/Auctions/Crowdsale.sol#L374</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">finalize</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">hasAdminRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">) || </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> || </span><span class=\"mtk11\">hasSmartContractRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">) || </span><span class=\"mtk11\">finalizeTimeExpired</span><span class=\"mtk1\">(),</span><span class=\"mtk8\">&quot;Crowdsale: sender must be an admin&quot;</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// can be called by admin</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">MarketStatus</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">status</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">marketStatus</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk12\">status</span><span class=\"mtk1\">.</span><span class=\"mtk12\">finalized</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Crowdsale: already finalized&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">MarketInfo</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">info</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">marketInfo</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">auctionEnded</span><span class=\"mtk1\">(), </span><span class=\"mtk8\">&quot;Crowdsale: Has not finished yet&quot;</span><span class=\"mtk1\">);    </span><span class=\"mtk3\">// is true if enough sold, even if this is before marketInfo.endTime</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">auctionSuccessful</span><span class=\"mtk1\">()) {          </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">/// @dev Transfer contributed tokens to wallet.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">/// @dev Transfer unsold tokens to wallet.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">/// @dev Return auction tokens back to wallet.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">status</span><span class=\"mtk1\">.</span><span class=\"mtk12\">finalized</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">auctionEnded</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">endTime</span><span class=\"mtk1\">) || </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_getTokenAmount</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketStatus</span><span class=\"mtk1\">.</span><span class=\"mtk12\">commitmentsTotal</span><span class=\"mtk1\">) + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) &gt;= </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalTokens</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// is true if enough sold, even if this is before marketInfo.endTime</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">auctionSuccessful</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketStatus</span><span class=\"mtk1\">.</span><span class=\"mtk12\">commitmentsTotal</span><span class=\"mtk1\">) &gt;= </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketPrice</span><span class=\"mtk1\">.</span><span class=\"mtk12\">goal</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">commitEth</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_beneficiary</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">readAndAgreedToMarketParticipationAgreement</span><span class=\"mtk1\"> ) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\">  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethToTransfer</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">calculateCommitment</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk11\">_addCommitment</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_beneficiary</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ethToTransfer</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">calculateCommitment</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_commitment</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">committed</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">// this prevents buying too much</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getTokenAmount</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_commitment</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokensCommited</span><span class=\"mtk1\"> =</span><span class=\"mtk11\">_getTokenAmount</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketStatus</span><span class=\"mtk1\">.</span><span class=\"mtk12\">commitmentsTotal</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> ( </span><span class=\"mtk12\">tokensCommited</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\">) &gt; </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalTokens</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_getTokenPrice</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalTokens</span><span class=\"mtk1\">).</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokensCommited</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_commitment</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_addCommitment</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_addr</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_commitment</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">startTime</span><span class=\"mtk1\">) &amp;&amp; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">endTime</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Crowdsale: outside auction hours&quot;</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// doesn&#39;t check auctionEnded() nor status.finalized</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newCommitment</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">commitments</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_addr</span><span class=\"mtk1\">].</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_commitment</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">commitments</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_addr</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">newCommitment</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\">   </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\">  {    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">auctionSuccessful</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokensToClaim</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">tokensClaimable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\">].</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokensToClaim</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_safeTokenPayment</span><span class=\"mtk1\">(</span><span class=\"mtk12\">auctionToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokensToClaim</span><span class=\"mtk1\">);    </span><span class=\"mtk3\">// will fail is last token is missing</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">## </span><span class=\"mtk12\">Tools</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Used</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">## </span><span class=\"mtk12\">Recommended</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Mitigation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Steps</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">In</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_addCommitment</span><span class=\"mtk1\">, </span><span class=\"mtk11\">add</span><span class=\"mtk1\"> </span><span class=\"mtk11\">a</span><span class=\"mtk1\"> </span><span class=\"mtk11\">check</span><span class=\"mtk1\"> </span><span class=\"mtk11\">on</span><span class=\"mtk1\"> </span><span class=\"mtk11\">auctionEnded</span><span class=\"mtk1\">() </span><span class=\"mtk11\">or</span><span class=\"mtk1\"> </span><span class=\"mtk11\">status</span><span class=\"mtk1\">.</span><span class=\"mtk11\">finalized</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/15#issuecomment-934641167\">Clearwood (Sushi Miso) confirmed and patched</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/sushiswap/miso/pull/20\">https://github.com/sushiswap/miso/pull/20</a></p>\n</blockquote>\n<h1 id=\"medium-risk-findings-1\" style=\"position:relative;\"><a href=\"#medium-risk-findings-1\" aria-label=\"medium risk findings 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (1)</h1>\n<h2 id=\"m-01-use-of-transfer-instead-of-call--to-send-eth\" style=\"position:relative;\"><a href=\"#m-01-use-of-transfer-instead-of-call--to-send-eth\" aria-label=\"m 01 use of transfer instead of call  to send eth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/87\">[M-01] use of transfer() instead of call()  to send eth</a></h2>\n<p><em>Submitted by JMukesh</em>.</p>\n<h4 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Use of <code>transfer()</code> might render ETH impossible to withdraw because after istanbul hardfork, there is an increase in the gas cost of the SLOAD operation and therefore breaks some existing smart contracts.Those contracts will break because their fallback functions used to consume less than 2300 gas, and they’ll now consume more, since 2300 the amount of gas a contract’s fallback function receives if it’s called via Solidity’s <code>transfer()</code> or <code>send()</code> methods.\nAny smart contract that uses <code>transfer()</code> or <code>send()</code> is taking a hard dependency on gas costs by forwarding a fixed amount of gas: 2300.</p>\n<ul>\n<li><a href=\"https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/\">https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/</a></li>\n<li><a href=\"https://blog.openzeppelin.com/opyn-gamma-protocol-audit/\">https://blog.openzeppelin.com/opyn-gamma-protocol-audit/</a></li>\n</ul>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOTokenFactory.sol#L242\">https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOTokenFactory.sol#L242</a></li>\n<li><a href=\"https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOMarket.sol#L256\">https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOMarket.sol#L256</a></li>\n<li><a href=\"https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOLauncher.sol#L251\">https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOLauncher.sol#L251</a></li>\n<li><a href=\"https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOFarmFactory.sol#L244\">https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOFarmFactory.sol#L244</a></li>\n</ul>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>manual review</p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>use <code>call()</code> to send eth</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/87#issuecomment-920589153\">maxsam4 (Sushi Miso) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>This is intentional, not a risk. The contract does not want to give any gas stipend to the destination.</p>\n<p>Even if the user messes up, <code>misoDev</code> address can be changed to a proper address later.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/87#issuecomment-934654221\">ghoul-sol (judge) commented</a>:</strong></p>\n<blockquote>\n<p>using <code>.transfer</code> can make ETH transfer to a smart contract impossible. User can always change the address however I agree with warden that this is an issue.</p>\n</blockquote>\n<h1 id=\"low-risk-findings-21\" style=\"position:relative;\"><a href=\"#low-risk-findings-21\" aria-label=\"low risk findings 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (21)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/24\">[L-01] Outdated and Vulnerable <code>TimelockController.sol</code> Contract</a>\n<em>Submitted by leastwood, also found by JMukesh</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/19\">[L-02] Frontrunning Initialization of Contracts</a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/73\">[L-03] Event parameters interchanged for emit of access control template addition</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/114\">[L-04] <code>TokenVault</code> incorrectly tracks <code>userIndex</code></a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/23\">[L-05] funds will get lost in deployAccessControl if devaddr isn’t set</a>\n<em>Submitted by gpersoon</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/137\">[L-06] An adversarial attacker can initialize ListFactory</a>\n<em>Submitted by hrkrshnn</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/110\">[L-07] The first escrow index underflows</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/116\">[L-08] MISORecipe01 uses outdated interfaces</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/142\">[L-09] Certain view functions should be used only by UI and not by the code</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/43\">[L-10] Front-running cancelAuction can prevent auction cancellation</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/96\">[L-11] Usage of address.transfer</a>\n_Submitted by cmichel, also found by 0xRajeev.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/61\">[L-12] deployMarket may revert due to integer underflow from missing threshold check</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/64\">[L-13] Init functions are susceptible to front-running</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/108\">[L-14] Loss of price precision</a>\n<em>Submitted by cmichel, also found by itsmeSTYJ and leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/94\">[L-15] <code>MISOMasterChef</code> may not be used with fee-on-transfer tokens</a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/97\">[L-16] No ERC20 safe* versions called in MisoRecipe</a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/99\">[L-17] No ERC20 <code>safeApprove</code> versions called</a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/16\">[L-18] finalize() can be succesfully called before initMarket()</a>\n<em>Submitted by gpersoon</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/32\">[L-19] <code>currentTemplateId</code> is Not Actively Removed by <code>MISOLauncher.removeLiquidityLauncherTemplate()</code></a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/92\">[L-20] lockTokens should validate withdrawer</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/53\">[L-21] Payable external init is redundant and may allow unaccounted token claims or DoS</a>\n<em>Submitted by 0xRajeev</em>.</li>\n</ul>\n<h1 id=\"non-critical-findings-47\" style=\"position:relative;\"><a href=\"#non-critical-findings-47\" aria-label=\"non critical findings 47 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (47)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/59\">[N-01] Missing useful isOpen() function could save gas</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/149\">[N-02] Inaccurate Function Name <code>enableList()</code></a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/120\">[N-03] Unused imports</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/41\">[N-04] Missing zero-address check on beneficiary may lead to loss of funds</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/52\">[N-05] Single-step wallet address change is risky</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/76\">[N-06] Same LP token can be added more than once to affect reward calculations</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/86\">[N-07] excessive eth is not transfered back to the deployer if msg.value is greater than minimum fees </a>\n<em>Submitted by JMukesh</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/35\">[N-08] Lack of Factory Contract for <code>TokenList.sol</code></a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/38\">[N-09] Tokens without 18 decimals are unhandled</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/44\">[N-10] Critical withdrawTokens function is missing an event</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/45\">[N-11] Missing zero-address checks</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/31\">[N-12] Missing Events on State Changing Functions</a>\n<em>Submitted by leastwood, also found by pauliax and 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/63\">[N-13] Missing contract existence check may cause silent failures of token transfers</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/70\">[N-14] Relying on setters for initialisation of critical parameters is risky</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/71\">[N-15] Lack of indexed event parameters will affect offchain monitoring</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/72\">[N-16] Unused event may be unused code or indicative of missed emit/logic</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/29\">[N-17] Lack of Input Validation</a>\n<em>Submitted by leastwood, also found by 0xRajeev, cmichel, and JMukesh</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/106\">[N-18] TokenInitialized token parameter is always empty</a>\n<em>Submitted by pauliax, also found by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/78\">[N-19] Unconventional use of basis points for integratorFeePct could cause undefined behavior</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/79\">[N-20] Old Solidity compiler version</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/100\">[N-21] <code>AccessControlTemplateRemoved</code> event not used</a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/101\">[N-22] Should <code>TokenList</code> implement <code>IPointList</code>?</a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/103\">[N-23] Use constant named variable for auction decimals</a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/109\">[N-24] <code>HyperbolicAuction.initAuction</code> ’s <code>_factor</code> argument is never used</a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/111\">[N-25] <code>MISOMasterChef.setDevPercentage</code> should be capped</a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/115\">[N-26] Commitments can happen after already finalized</a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/93\">[N-27] Unused event <code>StrategyCvxHelper.HarvestState</code></a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/136\">[N-28] Requiring a decimals method for ERC-20 tokens is non-standard</a>\n<em>Submitted by hrkrshnn</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/11\">[N-29] Teams should be warned not to accept rebasing tokens as payment currencies</a>\n<em>Submitted by itsmeSTYJ</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/30\">[N-30] Divide Before Multiply</a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/33\">[N-31] <code>_safeApprove()</code> is Not Used Instead of <code>approve()</code></a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/74\">[N-32] Unchecked <code>fundsCommitted</code> in Token Withdrawal</a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/13\">[N-33] PostAuctionLauncher _deposit require condition contradicts error message</a>\n<em>Submitted by loop</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/128\">[N-34] _addCommitment should check that address is not empty</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/138\">[N-35] Consider using a solidity version >= 0.8.0</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/141\">[N-36] Add input validation on some methods</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/143\">[N-37] Use a struct for raw data.</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/91\">[N-38] use of floating pragma</a>\n<em>Submitted by JMukesh</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/21\">[N-39] comment copy paste error</a>\n<em>Submitted by gpersoon, also found by itsmeSTYJ, leastwood, and loop</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/10\">[N-40] Typo in comment in PointList.sol</a>\n<em>Submitted by itsmeSTYJ</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/144\">[N-41] Improper Boolean Comparison</a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/148\">[N-42] Missing <code>uint256</code> Cast</a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/151\">[N-43] Inconsistent Template Deletion</a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/26\">[N-44] Missing SPDX Identifier</a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/113\">[N-45] Inclusive checks</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/130\">[N-46] Style issues</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/98\">[N-47] getTokenTemplate should check boundaries</a>\n<em>Submitted by pauliax</em>.</li>\n</ul>\n<h1 id=\"gas-optimizations-29\" style=\"position:relative;\"><a href=\"#gas-optimizations-29\" aria-label=\"gas optimizations 29 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (29)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/36\">[G-01] Slot packing saves slots but increases runtime gas consumption due to masking</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/42\">[G-02] Caching state variables in local/memory variables avoids SLOADs to save gas</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/60\">[G-03] Avoiding initialization of loop index can save a little gas</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/62\">[G-04] Check for zero msg.value can save gas</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/65\">[G-05] Using function parameters in emits saves gas</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/66\">[G-06] Avoiding unnecessary external call will save > 2600 gas</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/68\">[G-07] Unnecessary zero check on variable which is never initialized earlier</a>\n<em>Submitted by 0xRajeev</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/90\">[G-08] unused local variable</a>\n<em>Submitted by JMukesh</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/105\">[G-09] Gas: Cache auction prices</a>\n<em>Submitted by cmichel, also found by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/107\">[G-10] Gas:  Remove nonce from parameter list</a>\n<em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/17\">[G-11] gas improvement in isInList </a>\n<em>Submitted by gpersoon</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/131\">[G-12] Upgrade to at least 0.8.4</a>\n<em>Submitted by hrkrshnn</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/132\">[G-13] ## Caching the length in for loops</a>\n<em>Submitted by hrkrshnn</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/133\">[G-14]  Use <code>calldata</code> instead of <code>memory</code> for function parameters</a>\n<em>Submitted by hrkrshnn</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/134\">[G-15] Consider having short revert strings</a>\n<em>Submitted by hrkrshnn</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/135\">[G-16] Caching <code>totalPoints</code> during <code>setPoints</code> method</a>\n<em>Submitted by hrkrshnn</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/4\">[G-17] Redundant _newAddress parameter for deprecateFactory</a>\n<em>Submitted by itsmeSTYJ</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/5\">[G-18] Unnecessary addition in finalize() function</a>\n<em>Submitted by itsmeSTYJ</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/6\">[G-19] Redundant liquidityAdded check</a>\n<em>Submitted by itsmeSTYJ</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/81\">[G-20] Lack of <code>Immutable</code> Keyword</a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/84\">[G-21] Consolidation of Storage Slots</a>\n<em>Submitted by leastwood</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/2\">[G-22] cancelAuction function is public, but not called internally</a>\n<em>Submitted by loop</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/25\">[G-23] Require statement in PostAuctionLauncher finalize() function will never be reached.</a>\n<em>Submitted by loop</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/118\">[G-24] Separate minter roles are not really necessary</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/122\">[G-25] Useless initialization to default value</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/123\">[G-26] Dead code</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/125\">[G-27] allDepositIds is pretty much useless</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/126\">[G-28] Pack structs tightly</a>\n<em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushimiso-findings/issues/127\">[G-29] <em>startTime is always &#x3C; 10000000000 when _endTime &#x3C; 10000000000 (</em>endTime > _startTime)</a>\n<em>Submitted by pauliax</em>.</li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-3\">High Risk Findings (3)</a></p>\n<ul>\n<li><a href=\"#h-01-postauctionlaunchersolfinalize-adding-liquidity-to-an-existing-pool-may-allows-the-attacker-to-steal-most-of-the-tokens\">[H-01] <code>PostAuctionLauncher.sol#finalize()</code> Adding liquidity to an existing pool may allows the attacker to steal most of the tokens</a></li>\n<li><a href=\"#h-02-sushitoken-transfers-are-broken-due-to-wrong-delegates-accounting-on-transfers\">[H-02] SushiToken transfers are broken due to wrong delegates accounting on transfers</a></li>\n<li><a href=\"#h-03-last-person-to-withdraw-his-tokens-might-not-be-able-to-do-this-in-crowdsale-edge-case\">[H-03] Last person to withdraw his tokens might not be able to do this, in Crowdsale (edge case)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-1\">Medium Risk Findings (1)</a></p>\n<ul>\n<li><a href=\"#m-01-use-of-transfer-instead-of-call--to-send-eth\">[M-01] use of transfer() instead of call()  to send eth</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-21\">Low Risk Findings (21)</a></li>\n<li><a href=\"#non-critical-findings-47\">Non-Critical Findings (47)</a></li>\n<li><a href=\"#gas-optimizations-29\">Gas Optimizations (29)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of the Sushi Miso contest smart contract system written in Solidity. The code contest took place between September 9—September 15 2021.\n\n## Wardens\n\n11 Wardens contributed reports to the Sushi Miso contest code contest:\n\n- [WatchPug](https://twitter.com/WatchPug_)\n- [0xRajeev](https://twitter.com/0xRajeev)\n- [cmichel](https://twitter.com/cmichelio)\n- [gpersoon](https://twitter.com/gpersoon)\n- [JMukesh](https://twitter.com/MukeshJ_eth)\n- [leastwood](https://twitter.com/liam_eastwood13)\n- [hrkrshnn](https://twitter.com/_hrkrshnn)\n- [pauliax](https://twitter.com/SolidityDev)\n- [itsmeSTYJ](https://twitter.com/itsmeSTYJ)\n- [loop](https://twitter.com/loop_225)\n\nThis contest was judged by [ghoul.sol](https://twitter.com/ghoulsol).\n\nFinal report assembled by [itsmetechjay](https://twitter.com/itsmetechjay) and [CloudEllie](https://twitter.com/CloudEllie1).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 25 unique vulnerabilities and 101 total findings.  All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 3 received a risk rating in the category of HIGH severity, 1 received a risk rating in the category of MEDIUM severity, and 21 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 47 non-critical recommendations and 29 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 Sushi Miso contest repository](https://github.com/code-423n4/2021-09-sushimiso) and is composed of 106 smart contracts written in the Solidity programming language, and includes 4,040 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n\n# High Risk Findings (3)\n## [[H-01] `PostAuctionLauncher.sol#finalize()` Adding liquidity to an existing pool may allows the attacker to steal most of the tokens](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/14)\n_Submitted by WatchPug, also found by 0xRajeev and cmichel._\n\n`PostAuctionLauncher.finalize()` can be called by anyone, and it sends tokens directly to the pair pool to mint liquidity, even when the pair pool exists.\n\nAn attacker may control the LP price by creating the pool and then call `finalize()` to mint LP token with unfair price (pay huge amounts of tokens and get few amounts of LP token), and then remove the initial liquidity they acquired when creating the pool and take out huge amounts of tokens.\n\n<https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/Liquidity/PostAuctionLauncher.sol#L257>\n\n```solidity\n/**\n * @notice Finalizes Token sale and launches LP.\n * @return liquidity Number of LPs.\n */\nfunction finalize() external nonReentrant returns (uint256 liquidity) {\n    // GP: Can we remove admin, let anyone can finalise and launch?\n    // require(hasAdminRole(msg.sender) || hasOperatorRole(msg.sender), \"PostAuction: Sender must be operator\");\n    require(marketConnected(), \"PostAuction: Auction must have this launcher address set as the destination wallet\");\n    require(!launcherInfo.launched);\n\n    if (!market.finalized()) {\n        market.finalize();\n    }\n    require(market.finalized());\n\n    launcherInfo.launched = true;\n    if (!market.auctionSuccessful() ) {\n        return 0;\n    }\n\n    /// @dev if the auction is settled in weth, wrap any contract balance \n    uint256 launcherBalance = address(this).balance;\n    if (launcherBalance > 0 ) {\n        IWETH(weth).deposit{value : launcherBalance}();\n    }\n    \n    (uint256 token1Amount, uint256 token2Amount) =  getTokenAmounts();\n\n    /// @dev cannot start a liquidity pool with no tokens on either side\n    if (token1Amount == 0 || token2Amount == 0 ) {\n        return 0;\n    }\n\n    address pair = factory.getPair(address(token1), address(token2));\n    if(pair == address(0)) {\n        createPool();\n    }\n\n    /// @dev add liquidity to pool via the pair directly\n    _safeTransfer(address(token1), tokenPair, token1Amount);\n    _safeTransfer(address(token2), tokenPair, token2Amount);\n    liquidity = IUniswapV2Pair(tokenPair).mint(address(this));\n    launcherInfo.liquidityAdded = BoringMath.to128(uint256(launcherInfo.liquidityAdded).add(liquidity));\n\n    /// @dev if unlock time not yet set, add it.\n    if (launcherInfo.unlock == 0 ) {\n        launcherInfo.unlock = BoringMath.to64(block.timestamp + uint256(launcherInfo.locktime));\n    }\n    emit LiquidityAdded(liquidity);\n}\n```\n\nIn line 257, `PostAuctionLauncher` will mint LP with `token1Amount` and `token2Amount`. The amounts (`token1Amount` and `token2Amount`) are computed according to the auction result, without considering the current price (reserves) of the existing `tokenPair`.\n\nSee [PostAuctionLauncher.getTokenAmounts()](https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/Liquidity/PostAuctionLauncher.sol#L268)\n\n`PostAuctionLauncher` will receive an unfairly low amount of lp token because the amounts sent to `tokenPair` didn't match the current price of the pair.\n\nSee [UniswapV2Pair.mint(...)](https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/UniswapV2/UniswapV2Pair.sol#L135)\n\n```solidity\nliquidity = MathUniswap.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n```\n\n#### Impact\n\nLose a majority share of the tokens.\n\n#### Proof of Concept\n\n1.  The attacker creates LP with 0.0000001 token1 and 1000 token2, receives 0.01 LP token;\n2.  Call `PostAuctionLauncher.finalize()`. PostAuctionLauncher will mint liquidity with 2000 token1 and 1000 token2 for example, receives only  0.01 LP token;\n3.  The attacker removes all his LP, receives 1000 token1 (most of which come from `PostAuctionLauncher`).\n\n#### Recommended Mitigation Steps\n\nTo only support tokenPair created by `PostAuctionLauncher` or check for the token price before mint liquidity.\n\n**[Clearwood (Sushi Miso) confirmed and patched](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/14#issuecomment-934641852):**\n > https://github.com/sushiswap/miso/pull/21\n\n\n\n## [[H-02] SushiToken transfers are broken due to wrong delegates accounting on transfers](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/117)\n_Submitted by cmichel_.\n\nWhen minting / transferring / burning tokens, the `SushiToken._beforeTokenTransfer` function is called and supposed to correctly shift the voting power due to the increase/decrease in tokens for the `from` and `to` accounts.\nHowever, it does not correctly do that, it tries to shift the votes from the `from` account, instead of the **`_delegates[from]`** account.\nThis can lead to transfers reverting.\n\n#### Proof Of Concept\n\nImagine the following transactions on the `SushiToken` contract.\nWe'll illustrate the corresponding `_moveDelegates` calls and written checkpoints for each.\n\n*   `mint(A, 1000) = transfer(0, A, 1000)` => ` _moveDelegates(0, delegates[A]=0)  ` => no checkpoints are written to anyone because delegatees are still zero\n*   A delegates to A' => `_moveDelegates(0, A')` => `writeCheckpoint(A', 1000)`\n*   B delegates to B' => no checkpoints are written as B has a zero balance\n*   `transfer(A, B, 1000)` => `_moveDelegates(A, delegates[B] = B')` => underflows when subtracting `amount=1000` from A's non-existent checkpoint (defaults to 0 votes)\n\nIt should subtract from A's delegatee `A'`'s checkpoint instead.\n\n#### Impact\n\nUsers that delegated votes will be unable to transfer any of their tokens.\n\n#### Recommended Mitigation Steps\n\nIn `SushiToken._beforeTokenTransfer`, change the `_moveDelegates` call to be from `_delegates[from]` instead:\n\n```solidity\nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal override { \n    _moveDelegates(_delegates[from], _delegates[to], amount);\n    super._beforeTokenTransfer(from, to, amount);\n}\n```\n\nThis is also how the [original code from Compound](https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol#L241) does it.\n\n**[maxsam4 (Sushi Miso) acknowledged](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/117#issuecomment-920570459):**\n > This is a known issue in Sushi token but was kept unchanged in MISO for \"preservation of history :)\". That was not necessarily a wise choice lol. I think 1 severity should be fine for this as this was an intentional thing. The delegate feature is not supposed to be used in these tokens. We might create a new token type with this bug fixed.\n\n**[ghoul-sol (judge) commented](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/117#issuecomment-934637612):**\n > We have crazy wallets on the blockchain that will call every possible function available to them and that's why I'm keeping this as is. Even intentional, the issue stands so the warden should get credit for it.\n\n\n\n## [[H-03] Last person to withdraw his tokens might not be able to do this, in Crowdsale (edge case)](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/15)\n_Submitted by gpersoon_.\n\n#### Impact\n\nSuppose a Crowdsale is successful and enough commitments are made before the `marketInfo.endTime`.\nSuppose marketStatus.commitmentsTotal  == marketInfo.totalTokens -1      // note this is an edge case, but can be constructed by an attacker\nThen the function `auctionEnded()` returns true\nAssume `auctionSuccessful()` is also true (might depend on the config of `marketPrice.goal` and `marketInfo.totalTokens`)\nThen an admin can call `finalize()` to finalize the Crowdsale.\nThe function finalize distributes the funds and the unsold tokens and sets `status.finalized = true` so that finalized cannot be called again.\nNow we have \"marketInfo.totalTokens -1\" tokens left in the contract\n\nHowever `commitEth()` or `commitTokens()` can still be called (they give no error message that the auction has ended)\nThen functions call `calculateCommitment`, which luckily prevent from buying too much, however 1 token can still be bought\nThese functions also call `\\_addCommitment()`, which only checks for `marketInfo.endTime`, which hasn't passed yet.\n\nNow an extra token is sold and the contract has 1 token short. So the last person to withdraw his tokens cannot withdraw them (because you cannot specify how much you want to withdraw)\n\nAlso the revenues for the last token cannot be retrieved as `finalize()` cannot be called again.\n\n#### Proof of Concept\n\n<https://github.com/sushiswap/miso/blob/master/contracts/Auctions/Crowdsale.sol#L374>\n\n```js\n function finalize() public nonReentrant {\n        require(hasAdminRole(msg.sender) || wallet == msg.sender || hasSmartContractRole(msg.sender) || finalizeTimeExpired(),\"Crowdsale: sender must be an admin\"); // can be called by admin\n        MarketStatus storage status = marketStatus;\n        require(!status.finalized, \"Crowdsale: already finalized\");\n        MarketInfo storage info = marketInfo;\n        require(auctionEnded(), \"Crowdsale: Has not finished yet\");    // is true if enough sold, even if this is before marketInfo.endTime\n\n        if (auctionSuccessful()) {          \n            /// @dev Transfer contributed tokens to wallet.\n            /// @dev Transfer unsold tokens to wallet.\n        } else {\n            /// @dev Return auction tokens back to wallet.\n        }\n        status.finalized = true;\n\nfunction auctionEnded() public view returns (bool) {\n        return block.timestamp > uint256(marketInfo.endTime) || \n        _getTokenAmount(uint256(marketStatus.commitmentsTotal) + 1) >= uint256(marketInfo.totalTokens); // is true if enough sold, even if this is before marketInfo.endTime\n    }\n\nfunction auctionSuccessful() public view returns (bool) {\n        return uint256(marketStatus.commitmentsTotal) >= uint256(marketPrice.goal);\n}\n\nfunction commitEth(address payable _beneficiary, bool readAndAgreedToMarketParticipationAgreement ) public payable nonReentrant  {\n       ...\n        uint256 ethToTransfer = calculateCommitment(msg.value);\n       ...\n       _addCommitment(_beneficiary, ethToTransfer);\n   \n function calculateCommitment(uint256 _commitment) public view returns (uint256 committed) { // this prevents buying too much\n        uint256 tokens = _getTokenAmount(_commitment);\n        uint256 tokensCommited =_getTokenAmount(uint256(marketStatus.commitmentsTotal));\n        if ( tokensCommited.add(tokens) > uint256(marketInfo.totalTokens)) {\n            return _getTokenPrice(uint256(marketInfo.totalTokens).sub(tokensCommited));\n        }\n        return _commitment;\n    }\n\nfunction _addCommitment(address _addr, uint256 _commitment) internal {\n        require(block.timestamp >= uint256(marketInfo.startTime) && block.timestamp <= uint256(marketInfo.endTime), \"Crowdsale: outside auction hours\"); // doesn't check auctionEnded() nor status.finalized\n        ...\n        uint256 newCommitment = commitments[_addr].add(_commitment);\n        ...\n        commitments[_addr] = newCommitment;\n\nfunction withdrawTokens(address payable beneficiary) public   nonReentrant  {    \n        if (auctionSuccessful()) {\n            ...\n            uint256 tokensToClaim = tokensClaimable(beneficiary);\n            ...\n            claimed[beneficiary] = claimed[beneficiary].add(tokensToClaim);\n            _safeTokenPayment(auctionToken, beneficiary, tokensToClaim);    // will fail is last token is missing\n        } else {\n\n\n\n## Tools Used\n\n## Recommended Mitigation Steps\nIn the function _addCommitment, add a check on auctionEnded() or status.finalized\n```\n\n**[Clearwood (Sushi Miso) confirmed and patched](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/15#issuecomment-934641167):**\n > https://github.com/sushiswap/miso/pull/20\n\n\n\n \n# Medium Risk Findings (1)\n## [[M-01] use of transfer() instead of call()  to send eth](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/87)\n_Submitted by JMukesh_.\n\n#### Impact\n\nUse of `transfer()` might render ETH impossible to withdraw because after istanbul hardfork, there is an increase in the gas cost of the SLOAD operation and therefore breaks some existing smart contracts.Those contracts will break because their fallback functions used to consume less than 2300 gas, and they’ll now consume more, since 2300 the amount of gas a contract’s fallback function receives if it’s called via Solidity’s `transfer()` or `send()` methods.\nAny smart contract that uses `transfer()` or `send()` is taking a hard dependency on gas costs by forwarding a fixed amount of gas: 2300.\n\n- <https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/>\n\n- <https://blog.openzeppelin.com/opyn-gamma-protocol-audit/>\n\n#### Proof of Concept\n\n- <https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOTokenFactory.sol#L242>\n\n- <https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOMarket.sol#L256>\n\n- <https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOLauncher.sol#L251>\n\n- <https://github.com/sushiswap/miso/blob/2cdb1486a55ded55c81898b7be8811cb68cfda9e/contracts/MISOFarmFactory.sol#L244>\n\n#### Tools Used\n\nmanual review\n\n#### Recommended Mitigation Steps\n\nuse `call()` to send eth\n\n**[maxsam4 (Sushi Miso) disputed and commented](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/87#issuecomment-920589153):**\n > This is intentional, not a risk. The contract does not want to give any gas stipend to the destination.\n> \n> Even if the user messes up, `misoDev` address can be changed to a proper address later.\n\n**[ghoul-sol (judge) commented](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/87#issuecomment-934654221):**\n > using `.transfer` can make ETH transfer to a smart contract impossible. User can always change the address however I agree with warden that this is an issue.\n\n\n\n \n# Low Risk Findings (21)\n- [[L-01] Outdated and Vulnerable `TimelockController.sol` Contract](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/24)\n_Submitted by leastwood, also found by JMukesh_.\n- [[L-02] Frontrunning Initialization of Contracts](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/19)\n_Submitted by leastwood_.\n- [[L-03] Event parameters interchanged for emit of access control template addition](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/73)\n_Submitted by 0xRajeev_.\n- [[L-04] `TokenVault` incorrectly tracks `userIndex`](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/114)\n_Submitted by cmichel_.\n- [[L-05] funds will get lost in deployAccessControl if devaddr isn't set](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/23)\n_Submitted by gpersoon_.\n- [[L-06] An adversarial attacker can initialize ListFactory](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/137)\n_Submitted by hrkrshnn_.\n- [[L-07] The first escrow index underflows](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/110)\n_Submitted by pauliax_.\n- [[L-08] MISORecipe01 uses outdated interfaces](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/116)\n_Submitted by pauliax_.\n- [[L-09] Certain view functions should be used only by UI and not by the code](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/142)\n- [[L-10] Front-running cancelAuction can prevent auction cancellation](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/43)\n_Submitted by 0xRajeev_.\n- [[L-11] Usage of address.transfer](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/96)\n_Submitted by cmichel, also found by 0xRajeev.\n- [[L-12] deployMarket may revert due to integer underflow from missing threshold check](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/61)\n_Submitted by 0xRajeev_.\n- [[L-13] Init functions are susceptible to front-running](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/64)\n_Submitted by 0xRajeev_.\n- [[L-14] Loss of price precision](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/108)\n_Submitted by cmichel, also found by itsmeSTYJ and leastwood_.\n- [[L-15] `MISOMasterChef` may not be used with fee-on-transfer tokens](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/94)\n_Submitted by cmichel_.\n- [[L-16] No ERC20 safe* versions called in MisoRecipe](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/97)\n_Submitted by cmichel_.\n- [[L-17] No ERC20 `safeApprove` versions called](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/99)\n_Submitted by cmichel_.\n- [[L-18] finalize() can be succesfully called before initMarket()](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/16)\n_Submitted by gpersoon_.\n- [[L-19] `currentTemplateId` is Not Actively Removed by `MISOLauncher.removeLiquidityLauncherTemplate()`](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/32)\n_Submitted by leastwood_.\n- [[L-20] lockTokens should validate withdrawer](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/92)\n_Submitted by pauliax_.\n- [[L-21] Payable external init is redundant and may allow unaccounted token claims or DoS](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/53)\n_Submitted by 0xRajeev_.\n\n\n \n# Non-Critical Findings (47)\n- [[N-01] Missing useful isOpen() function could save gas](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/59)\n_Submitted by 0xRajeev_.\n- [[N-02] Inaccurate Function Name `enableList()`](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/149)\n_Submitted by leastwood_.\n- [[N-03] Unused imports](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/120)\n_Submitted by pauliax_.\n- [[N-04] Missing zero-address check on beneficiary may lead to loss of funds](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/41)\n_Submitted by 0xRajeev_.\n- [[N-05] Single-step wallet address change is risky](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/52)\n_Submitted by 0xRajeev_.\n- [[N-06] Same LP token can be added more than once to affect reward calculations](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/76)\n_Submitted by 0xRajeev_.\n- [[N-07] excessive eth is not transfered back to the deployer if msg.value is greater than minimum fees ](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/86)\n_Submitted by JMukesh_.\n- [[N-08] Lack of Factory Contract for `TokenList.sol`](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/35)\n_Submitted by leastwood_.\n- [[N-09] Tokens without 18 decimals are unhandled](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/38)\n_Submitted by 0xRajeev_.\n- [[N-10] Critical withdrawTokens function is missing an event](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/44)\n_Submitted by 0xRajeev_.\n- [[N-11] Missing zero-address checks](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/45)\n_Submitted by 0xRajeev_.\n- [[N-12] Missing Events on State Changing Functions](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/31)\n_Submitted by leastwood, also found by pauliax and 0xRajeev_.\n- [[N-13] Missing contract existence check may cause silent failures of token transfers](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/63)\n_Submitted by 0xRajeev_.\n- [[N-14] Relying on setters for initialisation of critical parameters is risky](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/70)\n_Submitted by 0xRajeev_.\n- [[N-15] Lack of indexed event parameters will affect offchain monitoring](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/71)\n_Submitted by 0xRajeev_.\n- [[N-16] Unused event may be unused code or indicative of missed emit/logic](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/72)\n_Submitted by 0xRajeev_.\n- [[N-17] Lack of Input Validation](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/29)\n_Submitted by leastwood, also found by 0xRajeev, cmichel, and JMukesh_.\n- [[N-18] TokenInitialized token parameter is always empty](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/106)\n_Submitted by pauliax, also found by 0xRajeev_.\n- [[N-19] Unconventional use of basis points for integratorFeePct could cause undefined behavior](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/78)\n_Submitted by 0xRajeev_.\n- [[N-20] Old Solidity compiler version](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/79)\n_Submitted by 0xRajeev_.\n- [[N-21] `AccessControlTemplateRemoved` event not used](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/100)\n_Submitted by cmichel_.\n- [[N-22] Should `TokenList` implement `IPointList`?](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/101)\n_Submitted by cmichel_.\n- [[N-23] Use constant named variable for auction decimals](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/103)\n_Submitted by cmichel_.\n- [[N-24] `HyperbolicAuction.initAuction` 's `_factor` argument is never used](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/109)\n_Submitted by cmichel_.\n- [[N-25] `MISOMasterChef.setDevPercentage` should be capped](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/111)\n_Submitted by cmichel_.\n- [[N-26] Commitments can happen after already finalized](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/115)\n_Submitted by cmichel_.\n- [[N-27] Unused event `StrategyCvxHelper.HarvestState`](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/93)\n_Submitted by cmichel_.\n- [[N-28] Requiring a decimals method for ERC-20 tokens is non-standard](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/136)\n_Submitted by hrkrshnn_.\n- [[N-29] Teams should be warned not to accept rebasing tokens as payment currencies](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/11)\n_Submitted by itsmeSTYJ_.\n- [[N-30] Divide Before Multiply](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/30)\n_Submitted by leastwood_.\n- [[N-31] `_safeApprove()` is Not Used Instead of `approve()`](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/33)\n_Submitted by leastwood_.\n- [[N-32] Unchecked `fundsCommitted` in Token Withdrawal](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/74)\n_Submitted by leastwood_.\n- [[N-33] PostAuctionLauncher _deposit require condition contradicts error message](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/13)\n_Submitted by loop_.\n- [[N-34] _addCommitment should check that address is not empty](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/128)\n_Submitted by pauliax_.\n- [[N-35] Consider using a solidity version >= 0.8.0](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/138)\n- [[N-36] Add input validation on some methods](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/141)\n- [[N-37] Use a struct for raw data.](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/143)\n- [[N-38] use of floating pragma](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/91)\n_Submitted by JMukesh_.\n- [[N-39] comment copy paste error](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/21)\n_Submitted by gpersoon, also found by itsmeSTYJ, leastwood, and loop_.\n- [[N-40] Typo in comment in PointList.sol](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/10)\n_Submitted by itsmeSTYJ_.\n- [[N-41] Improper Boolean Comparison](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/144)\n_Submitted by leastwood_.\n- [[N-42] Missing `uint256` Cast](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/148)\n_Submitted by leastwood_.\n- [[N-43] Inconsistent Template Deletion](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/151)\n_Submitted by leastwood_.\n- [[N-44] Missing SPDX Identifier](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/26)\n_Submitted by leastwood_.\n- [[N-45] Inclusive checks](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/113)\n_Submitted by pauliax_.\n- [[N-46] Style issues](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/130)\n_Submitted by pauliax_.\n- [[N-47] getTokenTemplate should check boundaries](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/98)\n_Submitted by pauliax_.\n\n\n \n# Gas Optimizations (29)\n- [[G-01] Slot packing saves slots but increases runtime gas consumption due to masking](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/36)\n_Submitted by 0xRajeev_.\n- [[G-02] Caching state variables in local/memory variables avoids SLOADs to save gas](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/42)\n_Submitted by 0xRajeev_.\n- [[G-03] Avoiding initialization of loop index can save a little gas](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/60)\n_Submitted by 0xRajeev_.\n- [[G-04] Check for zero msg.value can save gas](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/62)\n_Submitted by 0xRajeev_.\n- [[G-05] Using function parameters in emits saves gas](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/65)\n_Submitted by 0xRajeev_.\n- [[G-06] Avoiding unnecessary external call will save > 2600 gas](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/66)\n_Submitted by 0xRajeev_.\n- [[G-07] Unnecessary zero check on variable which is never initialized earlier](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/68)\n_Submitted by 0xRajeev_.\n- [[G-08] unused local variable](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/90)\n_Submitted by JMukesh_.\n- [[G-09] Gas: Cache auction prices](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/105)\n_Submitted by cmichel, also found by leastwood_.\n- [[G-10] Gas:  Remove nonce from parameter list](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/107)\n_Submitted by cmichel_.\n- [[G-11] gas improvement in isInList ](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/17)\n_Submitted by gpersoon_.\n- [[G-12] Upgrade to at least 0.8.4](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/131)\n_Submitted by hrkrshnn_.\n- [[G-13] ## Caching the length in for loops](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/132)\n_Submitted by hrkrshnn_.\n- [[G-14]  Use `calldata` instead of `memory` for function parameters](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/133)\n_Submitted by hrkrshnn_.\n- [[G-15] Consider having short revert strings](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/134)\n_Submitted by hrkrshnn_.\n- [[G-16] Caching `totalPoints` during `setPoints` method](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/135)\n_Submitted by hrkrshnn_.\n- [[G-17] Redundant _newAddress parameter for deprecateFactory](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/4)\n_Submitted by itsmeSTYJ_.\n- [[G-18] Unnecessary addition in finalize() function](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/5)\n_Submitted by itsmeSTYJ_.\n- [[G-19] Redundant liquidityAdded check](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/6)\n_Submitted by itsmeSTYJ_.\n- [[G-20] Lack of `Immutable` Keyword](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/81)\n_Submitted by leastwood_.\n- [[G-21] Consolidation of Storage Slots](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/84)\n_Submitted by leastwood_.\n- [[G-22] cancelAuction function is public, but not called internally](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/2)\n_Submitted by loop_.\n- [[G-23] Require statement in PostAuctionLauncher finalize() function will never be reached.](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/25)\n_Submitted by loop_.\n- [[G-24] Separate minter roles are not really necessary](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/118)\n_Submitted by pauliax_.\n- [[G-25] Useless initialization to default value](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/122)\n_Submitted by pauliax_.\n- [[G-26] Dead code](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/123)\n_Submitted by pauliax_.\n- [[G-27] allDepositIds is pretty much useless](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/125)\n_Submitted by pauliax_.\n- [[G-28] Pack structs tightly](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/126)\n_Submitted by pauliax_.\n- [[G-29] _startTime is always < 10000000000 when _endTime < 10000000000 (_endTime > _startTime)](https://github.com/code-423n4/2021-09-sushimiso-findings/issues/127)\n_Submitted by pauliax_.\n\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}