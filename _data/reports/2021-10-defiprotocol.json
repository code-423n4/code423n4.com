{
  "circa": {
    "title": "Kuiper contest",
    "sponsor": "Kuiper",
    "slug": "2021-10-defiprotocol",
    "date": "2022-01-26",
    "findings": "https://github.com/code-423n4/2021-10-defiprotocol-findings/issues",
    "contest": 41
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Kuiper contest smart contract system written in Solidity. The code contest took place between October 8—October 10 2021.</p>\n<p><em>Note: this audit contest originally ran under the name <code>defiProtocol</code>.</em></p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>9 Wardens contributed reports to the Kuiper contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/KenzoAgada\">kenzo</a></li>\n<li>pants</li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/loop_225\">loop</a></li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/ngndev\">0xngndev</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/GalloDaSballo\">Alex the Entreprenerd</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 21 unique vulnerabilities and 71 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 1 received a risk rating in the category of HIGH severity, 8 received a risk rating in the category of MEDIUM severity, and 12 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 16 non-critical recommendations and 34 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-10-defiProtocol\">C4 Kuiper contest repository</a>, and is composed of 11 smart contracts written in the Solidity programming language and includes 552 lines of Solidity code and 460 lines of JavaScript.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-1\" style=\"position:relative;\"><a href=\"#high-risk-findings-1\" aria-label=\"high risk findings 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (1)</h1>\n<h2 id=\"h-01-bonding-mechanism-allows-malicious-user-to-dos-auctions\" style=\"position:relative;\"><a href=\"#h-01-bonding-mechanism-allows-malicious-user-to-dos-auctions\" aria-label=\"h 01 bonding mechanism allows malicious user to dos auctions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/48\">[H-01] Bonding mechanism allows malicious user to DOS auctions</a></h2>\n<p><em>Submitted by kenzo</em>.</p>\n<p>A malicious user can listen to the mempool and immediately bond when an auction starts, without aim of settling the auction. As no one can cancel his bond in less than 24h, this will freeze user funds and auction settlement for 24h until his bond is burned and the new index is deleted. The malicious user can then repeat this when a new auction starts.</p>\n<p>While the malicious user will have to pay by having his bond burned, it might not be enough of a detriment for the DOS of the basket.</p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Denial of service of the auction mechanism. The malicious user can hold the basket “hostage” and postpone or prevent implementing new index.\nThe only way to mitigate it would be to try to front-run the malicious user, obviously not ideal.</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>publishAllIndex:\n<a href=\"https://github.com/code-423n4/2021-09-defiProtocol/blob/52b74824c42acbcd64248f68c40128fe3a82caf6/contracts/contracts/Basket.sol#L170\">https://github.com/code-423n4/2021-09-defiProtocol/blob/52b74824c42acbcd64248f68c40128fe3a82caf6/contracts/contracts/Basket.sol#L170</a></p>\n<ul>\n<li>The attacker would listen to this function / PublishedNewIndex event and upon catching it, immediately bond the auction.</li>\n<li>The publisher has no way to burn a bond before 24h has passed. But even if he could, it would not really help as the attacker could just bond again (though losing funds in the process).</li>\n</ul>\n<p><code>settleAuction</code>:\n<a href=\"https://github.com/code-423n4/2021-09-defiProtocol/blob/52b74824c42acbcd64248f68c40128fe3a82caf6/contracts/contracts/Auction.sol#L79\">https://github.com/code-423n4/2021-09-defiProtocol/blob/52b74824c42acbcd64248f68c40128fe3a82caf6/contracts/contracts/Auction.sol#L79</a></p>\n<ul>\n<li>Only the bonder can settle.</li>\n</ul>\n<p><code>bondBurn</code>:\n<a href=\"https://github.com/code-423n4/2021-09-defiProtocol/blob/52b74824c42acbcd64248f68c40128fe3a82caf6/contracts/contracts/Auction.sol#L111\">https://github.com/code-423n4/2021-09-defiProtocol/blob/52b74824c42acbcd64248f68c40128fe3a82caf6/contracts/contracts/Auction.sol#L111</a></p>\n<ul>\n<li>Can only burn 24h after bond.</li>\n</ul>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual analysis, hardhat.</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>If we only allow one user to bond, I see no real way to mitigate this attack, because the malicious user could always listen to the mempool and immediately bond when an auction starts and thus lock it.</p>\n<p>So we can change to a mechanism that allows many people to bond and only one to settle;\nbut at that point, I see no point to the bond mechanism any more. So we might as well remove it and let anybody settle the auction.</p>\n<p>With the bond mechanism, a potential settler would have 2 options:</p>\n<ul>\n<li>Bond early: no one else will be able to bond and settle, but the user would need to leave more tokens in the basket (as newRatio starts large and decreases in time)</li>\n<li>Bond late: the settler might make more money as he will need to leave less tokens in the basket, but he risks that somebody else will bond and settle before him.</li>\n</ul>\n<p>Without a bond mechanism, the potential settler would still have these equivalent 2 options:</p>\n<ul>\n<li>Settle early: take from basket less tokens, but make sure you win the auction</li>\n<li>Settle late: take from basket more tokens, but risk that somebody settles before you</li>\n</ul>\n<p>So that’s really equivalent to the bonding scenario.</p>\n<p>I might be missing something but at the moment I see no detriment to removing the bonding mechanism.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/48\">frank-beard (Kuiper) acknowledged</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/48#issuecomment-940068100\">itsmetechjay (organizer) commented</a>:</strong></p>\n<blockquote>\n<p>Warden apologizes for linking the code of the previous defiProtocol contest, however, these lines are not changed in the new contest.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/48#issuecomment-997466956\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I fully agree with this, anyone can grief the rest of the funds by bonding.</p>\n<p>Personally, this is so easy to execute that I have to raise the severity to High, as it means that every single time there’s a benefit to performing a DOS, any malicious actor just has to bond to do it</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/48#issuecomment-1001269680\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The sponsor may want to consider de-prioritizing bonding to rebalance, by allowing multiple users to bond and rebalance at the same time (or by having bond and rebalance happen at the same time)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/48#issuecomment-1008431122\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>After thinking about it, I had put into question the high severity because of the “extractability of value”.\nHowever because this finding allows to effectively DOS the auction, at any time, I still believe High Risk to be the correct severity</p>\n</blockquote>\n<h1 id=\"medium-risk-findings-8\" style=\"position:relative;\"><a href=\"#medium-risk-findings-8\" aria-label=\"medium risk findings 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (8)</h1>\n<h2 id=\"m-01-basketsolmint-malfunction-due-to-extra-nonreentrant-modifier\" style=\"position:relative;\"><a href=\"#m-01-basketsolmint-malfunction-due-to-extra-nonreentrant-modifier\" aria-label=\"m 01 basketsolmint malfunction due to extra nonreentrant modifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/59\">[M-01] <code>Basket.sol#mint()</code> Malfunction due to extra <code>nonReentrant</code> modifier</a></h2>\n<p><em>Submitted by WatchPug, also found by kenzo, pants, and pauliax</em>.</p>\n<p><a href=\"https://github.com/code-423n4/2021-10-defiprotocol/blob/7ca848f2779e2e64ed0b4756c02f0137ecd73e50/contracts/contracts/Basket.sol#L83-L88\">https://github.com/code-423n4/2021-10-defiprotocol/blob/7ca848f2779e2e64ed0b4756c02f0137ecd73e50/contracts/contracts/Basket.sol#L83-L88</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">mintTo</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mintTo</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk11\">auctionOngoing</span><span class=\"mtk1\">() == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The <code>mint()</code> method is malfunction because of the extra <code>nonReentrant</code> modifier, as <code>mintTo</code> already has a <code>nonReentrant</code> modifier.</p>\n<h4 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">mintTo</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/59\">frank-beard (Kuiper) confirmed </a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/59#issuecomment-997438174\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Mint is factually broken, definitely an oversight.\nI don’t think high severity is correct here though as since no-one can mint, no funds are at risk.\nI’ll go with medium severity as per the docs:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2 — Med: Assets not at direct risk, but the function of the **protocol or its availability could be impacted**, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</span></span></code></pre>\n</blockquote>\n<h2 id=\"m-02-setting-factoryauctiondecrement-to-zero-causes-denial-of-service-in-auctionsettleauction\" style=\"position:relative;\"><a href=\"#m-02-setting-factoryauctiondecrement-to-zero-causes-denial-of-service-in-auctionsettleauction\" aria-label=\"m 02 setting factoryauctiondecrement to zero causes denial of service in auctionsettleauction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/24\">[M-02] Setting <code>Factory.auctionDecrement</code> to zero causes Denial of Service in <code>Auction.settleAuction()</code></a></h2>\n<p><em>Submitted by pants</em>.</p>\n<p>The function <code>Factory.setAuctionDecrement()</code> allows the owner to set the state variable <code>Factory.auctionDecrement</code> to zero.</p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>If <code>Factory.auctionDecrement</code> equals zero then the function <code>Auction.settleAuction()</code> will always revert due to a division by zero:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 b = (bondBlock - auctionStart) * BASE / factory.auctionDecrement();</span></span></code></pre>\n<h4 id=\"tool-used\" style=\"position:relative;\"><a href=\"#tool-used\" aria-label=\"tool used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tool Used</h4>\n<p>Manual code review.</p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add an appropriate require statement to the function <code>Factory.setAuctionDecrement()</code> to disallow setting <code>Factory.auctionDecrement</code> to zero.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/24\">frank-beard (Kuiper) acknowledged</a></strong>  </p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/24#issuecomment-997440110\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I agree with the finding, because this shows a way to DOS the protocol, given specific conditions, I will raise the severity to medium</p>\n</blockquote>\n<h2 id=\"m-03-setting-factorybondpercentdiv-to-zero-cause-denial-of-service-in-auctionbondforrebalance\" style=\"position:relative;\"><a href=\"#m-03-setting-factorybondpercentdiv-to-zero-cause-denial-of-service-in-auctionbondforrebalance\" aria-label=\"m 03 setting factorybondpercentdiv to zero cause denial of service in auctionbondforrebalance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/23\">[M-03] Setting <code>Factory.bondPercentDiv</code> to zero cause Denial of Service in <code>Auction.bondForRebalance()</code></a></h2>\n<p><em>Submitted by pants</em>.</p>\n<p>The function <code>Factory.setBondPercentDiv()</code> allows the owner to set the state variable <code>Factory.bondPercentDiv</code> to zero.</p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>If <code>Factory.bondPercentDiv</code> equals zero then the function <code>Auction.bondForRebalance()</code> will always revert due to a division by zero:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">bondAmount = basketToken.totalSupply() / factory.bondPercentDiv();</span></span></code></pre>\n<h4 id=\"tool-used-1\" style=\"position:relative;\"><a href=\"#tool-used-1\" aria-label=\"tool used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tool Used</h4>\n<p>Manual code review.</p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add an appropriate require statement to the function <code>Factory.setBondPercentDiv()</code> to disallow setting <code>Factory.bondPercentDiv</code> to zero.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/23\">frank-beard (Kuiper) acknowledged</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/23#issuecomment-997440190\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Similarly to #24 agree with finding and raising to medium</p>\n</blockquote>\n<h2 id=\"m-04-fee-on-transfer-tokens-do-not-work-within-the-protocol\" style=\"position:relative;\"><a href=\"#m-04-fee-on-transfer-tokens-do-not-work-within-the-protocol\" aria-label=\"m 04 fee on transfer tokens do not work within the protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/78\">[M-04] Fee on transfer tokens do not work within the protocol</a></h2>\n<p><em>Submitted by anon</em>.</p>\n<p>Fee on transfer tokens transfer less tokens in than what would be expect.\nThis means that the protocol request incorrect amounts when dealing with these tokens.</p>\n<p><a href=\"https://github.com/code-423n4/2021-10-defiprotocol/blob/7ca848f2779e2e64ed0b4756c02f0137ecd73e50/contracts/contracts/Basket.sol#L256\">https://github.com/code-423n4/2021-10-defiprotocol/blob/7ca848f2779e2e64ed0b4756c02f0137ecd73e50/contracts/contracts/Basket.sol#L256</a></p>\n<p>The protocol should use stored token balances instead of transfer for calculating amounts.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/78\">frank-beard (Kuiper) acknowledged</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/78#issuecomment-997464504\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I agree with the finding and the severity.\nGiven a <code>feeOnTransferToken</code>, the accounting of the protocol will break.</p>\n<p>because this is dependent on an external condition (using <code>feeOnTransferToken</code>) this is a medium severity finding</p>\n</blockquote>\n<h2 id=\"m-05-createbasket-re-entrancy\" style=\"position:relative;\"><a href=\"#m-05-createbasket-re-entrancy\" aria-label=\"m 05 createbasket re entrancy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/85\">[M-05] createBasket re-entrancy</a></h2>\n<p><em>Submitted by pauliax</em>.</p>\n<h4 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>function <code>createBasket</code> in Factory should also be <code>nonReentrant</code> as it interacts with various tokens inside the loop and these tokens may contain callback hooks.</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add <code>nonReentrant</code> modifier to the declaration of createBasket.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/85\">frank-beard (Kuiper) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/85#issuecomment-997464699\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I agree that since the function can potentially interact with any ERC20like token, the function is vulnerable to re-entrancy, because we don’t have any specific POC for an attack, this is a medium severity finding</p>\n</blockquote>\n<h2 id=\"m-06-validations\" style=\"position:relative;\"><a href=\"#m-06-validations\" aria-label=\"m 06 validations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/84\">[M-06] Validations</a></h2>\n<p><em>Submitted by pauliax</em>.</p>\n<h4 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>function <code>setBondPercentDiv</code> should validate that <code>newBondPercentDiv</code> is not 0, or <code>bondForRebalance</code> will experience division by zero error otherwise. If you want to allow 0 values, then <code>bondForRebalance</code> should accommodate for such a possibility.</p>\n<p>function <code>addBounty</code> should check that <code>amount > 0</code> to prevent empty bounties.</p>\n<p>function <code>setMinLicenseFee</code> should validate that it is not over 100%: <code>newMinLicenseFee &#x3C;= BASE</code>.</p>\n<p>function <code>mintTo</code> should validate that ‘to’ is not an empty address (0x0) to prevent accidental loss of tokens.</p>\n<p>function <code>validateWeights</code> should validate that token is not this <code>basket erc20: require(\\_tokens\\[i] != address(this));</code></p>\n<p>function <code>proposeBasketLicense</code> could validate that <code>tokenName</code> and <code>tokenSymbol</code> are not empty.</p>\n<p>function <code>setBondPercentDiv</code> should validate that <code>newBondPercentDiv > 1</code>, otherwise it may become impossible to <code>bondBurn</code> because then <code>bondAmount = totalSupply</code> and calculation of newIbRatio will produce division by zero runtime error. Of course, this value is very unlikely but still would be nice to enforce this algorithmically.</p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider applying suggested validations to make the protocol more robust.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/84\">frank-beard (Kuiper) acknowledged and disagreed with severity</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/84#issuecomment-997464902\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I agree with the warden, adding these checks will provide additional safety guarantees to protocol users (by limiting owner privileges)</p>\n<p>Additionally, some of these setters can be used to DOS the protocol, as such this is a valid medium severity finding</p>\n</blockquote>\n<h2 id=\"m-07-basket-becomes-unusable-if-everybody-burns-their-shares\" style=\"position:relative;\"><a href=\"#m-07-basket-becomes-unusable-if-everybody-burns-their-shares\" aria-label=\"m 07 basket becomes unusable if everybody burns their shares permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/49\">[M-07] Basket becomes unusable if everybody burns their shares</a></h2>\n<p><em>Submitted by kenzo</em>.</p>\n<p>While handling the fees, the contract calculates the new <code>ibRatio</code> by dividing by <code>totalSupply</code>. This can be 0 leading to a division by 0.</p>\n<h4 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>If everybody burns their shares, in the next mint, <code>totalSupply</code> will be 0, <code>handleFees</code> will revert, and so nobody will be able to use the basket anymore.</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Vulnerable line:\n<a href=\"https://github.com/code-423n4/2021-09-defiProtocol/blob/52b74824c42acbcd64248f68c40128fe3a82caf6/contracts/contracts/Basket.sol#L124\">https://github.com/code-423n4/2021-09-defiProtocol/blob/52b74824c42acbcd64248f68c40128fe3a82caf6/contracts/contracts/Basket.sol#L124</a>\nYou can add the following test to Basket.test.js and see that it reverts (..after you remove “nonReentrant” from “mint”, see other issue):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">it</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;should divide by 0&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">addr1</span><span class=\"mtk1\">).</span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">addr1</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">addr2</span><span class=\"mtk1\">).</span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">addr2</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">UNI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">addr1</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk12\">BigNumber</span><span class=\"mtk1\">.</span><span class=\"mtk11\">from</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">COMP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">addr1</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk12\">BigNumber</span><span class=\"mtk1\">.</span><span class=\"mtk11\">from</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">AAVE</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">addr1</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk12\">BigNumber</span><span class=\"mtk1\">.</span><span class=\"mtk11\">from</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">addr1</span><span class=\"mtk1\">).</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk12\">BigNumber</span><span class=\"mtk1\">.</span><span class=\"mtk11\">from</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">});</span></span></span></code></pre>\n<h4 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual analysis, hardhat.</p>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a check to <code>handleFees: if totalSupply= 0</code>, you can just return, no need to calculate new <code>ibRatio</code> / fees.\nYou might want to reset <code>ibRatio</code> to BASE at this point.</p>\n<p><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/49\">frank-beard (Kuiper) confirmed</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/49#issuecomment-940068525\">itsmetechjay (organizer) commented</a>:</strong></p>\n<blockquote>\n<p>Warden apologizes for linking the code of the previous Kuiper contest, however these lines are not changed in the new contest.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/49#issuecomment-997467248\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Burning all shares will bring <code>totalSupply</code> to 0, which will cause <code>handleFees</code> to revert.\nThe finding is valid and I agree with the severity as this can happen if every share holder decides to burn</p>\n<p>Personally I think moving <code>handleFees</code> to a separate external call would be a simple mitigation (which also reduces gas cost for all users)\nAlternatively, the sponsor could always mint a few shares for each basket, to ensure <code>totalSupply</code> never reaches 0</p>\n</blockquote>\n<h2 id=\"m-08-auction-bonder-can-steal-user-funds-if-bond-block-is-high-enough\" style=\"position:relative;\"><a href=\"#m-08-auction-bonder-can-steal-user-funds-if-bond-block-is-high-enough\" aria-label=\"m 08 auction bonder can steal user funds if bond block is high enough permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/51\">[M-08] Auction bonder can steal user funds if bond block is high enough</a></h2>\n<p><em>Submitted by kenzo</em>.</p>\n<p>After an auction has started, as time passes and according to the <code>bondBlock</code>, <code>newRatio</code> (which starts at 2*ibRatio) gets smaller and smaller and therefore less and less tokens need to remain in the basket.\nThis is not capped, and after a while, <code>newRatio</code> can become smaller than current <code>ibRatio</code>.</p>\n<h4 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>If for some reason nobody has bonded and settled an auction and the publisher didn’t stop it, a malicious user can wait until <code>newRatio</code> &#x3C; <code>ibRatio</code>, or even until <code>newRatio</code> ~= 0 (for an initial <code>ibRatio</code> of ~1e18 this happens after less than 3.5 days after auction started), and then bond and settle and steal user funds.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>These are the vulnerable lines:\n<a href=\"https://github.com/code-423n4/2021-10-defiprotocol/blob/main/contracts/contracts/Auction.sol#L95:#L105\">https://github.com/code-423n4/2021-10-defiprotocol/blob/main/contracts/contracts/Auction.sol#L95:#L105</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">auctionMultiplier</span><span class=\"mtk1\">() * </span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ibRatio</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">bondBlock</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">auctionStart</span><span class=\"mtk1\">) * </span><span class=\"mtk12\">BASE</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">auctionDecrement</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newRatio</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">b</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pendingTokens</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pendingWeights</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getPendingWeights</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">basketAsERC20</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">basket</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">pendingWeights</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokensNeeded</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">basketAsERC20</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() * </span><span class=\"mtk12\">pendingWeights</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] * </span><span class=\"mtk12\">newRatio</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">BASE</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">BASE</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pendingTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">basket</span><span class=\"mtk1\">)) &gt;= </span><span class=\"mtk12\">tokensNeeded</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The function verifies that <code>pendingTokens[i].balanceOf(basket) >= basketAsERC20.totalSupply() * pendingWeights[i] * newRatio / BASE / BASE</code>. This is the formula that will be used later to mint/burn/withdraw user funds.\nAs bondBlock increases, newRatio will get smaller, and there is no check on this.\nAfter a while we’ll arrive at a point where <code>newRatio ~= 0</code>, so <code>tokensNeeded = newRatio*(...) ~= 0</code>, so the attacker could withdraw nearly all the tokens using outputTokens and outputWeights, and leave just scraps in the basket.</p>\n<h4 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual analysis, hardhat.</p>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Your needed condition/math might be different, and you might also choose to burn the bond while you’re at it, but I think at the minimum you should add a sanity check in <code>settleAuction</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">newRatio</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">basket</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ibRatio</span><span class=\"mtk1\">());</span></span></span></code></pre>\n<p>Maybe you would require <code>newRatio</code> to be > BASE but not sure.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/51\">frank-beard (Kuiper) confirmed</a></strong>  </p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/51#issuecomment-997466418\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Would need to confirm with sponsor:\nIsn’t the point of <code>settleAuction</code> to be incentivized by offering a discount over time?\nIf you’re offering a discount, then by definition <code>newRatio</code> will be less than <code>basket.ibRatio</code></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/51#issuecomment-999134839\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Have yet to hear back from the sponsor.</p>\n<p>The more I think about it, the more this is a property of the discounted auction, the basket token can be bought for less, and that creates MEV opportunities. This is the economic incentive for bonding and settling the auction (else why do it?)</p>\n<p>On the other hand there may be situation where the price decay is so aggressive, and the bonding gives a 24hrs privilege for settling which could create a situation where the bonder is incentivized to wait.</p>\n<p>Locking the discount at the time of bonding, or forcing to bond and settle at the same time may mitigate this (creating effectively a dutch auction for the discounted basket tokens).</p>\n<p>Given what I understand about the system, I would argue that:</p>\n<ul>\n<li>Given a specific <code>auctionDecrement</code> and a basket big enough, the bonder has a 24 hour window to maximize the value they can extract, which can end up being too much from what the developer / users may expect.</li>\n</ul>\n<p>What do you think @frank-beard ?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/51#issuecomment-999259347\">frank-beard (Kuiper) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with @Alex the Entreprenerd. The purpose of the auction is to create an opportunity for participants to rebalance a basket if it is in their interest. However the warden is correct that there can be issues if the <code>ibRatio</code> drops too low, or even to 0, which would effectively allow someone to steal funds. We plan to mitigate this by having the auction have a minimum <code>ibRatio</code> at which it can be settled.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/51#issuecomment-1001265064\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The vulnerability is reliant on <code>auctionDecrement</code> being impactful enough on a 24 hr window (time in which bonder has privileged ability to settle or just stall)</p>\n<p>If <code>auctionDecrement</code> gives a steep enough discount then it can creates scenarios where the bonder can get access to the underlying at no price. This can be taken to the extreme of rebalancing the entire basket (taking all funds)</p>\n<p>Because of the openness of the protocol am inclined to rate this a medium severity, however, the sponsor needs to be aware that every single time this scenario shows itself it will be abused against the protocol users.</p>\n<p>Mitigation can happen by either setting a minimum <code>ibRatio</code> or by allowing multiple entities to bond and settle at the same, creating a “prisoners dilemma” dutch auction that effectively motivates actors to rebalance as early as economically feasible</p>\n</blockquote>\n<h1 id=\"low-risk-findings-12\" style=\"position:relative;\"><a href=\"#low-risk-findings-12\" aria-label=\"low risk findings 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (12)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/80\">[L-01] Sensitive variables should not be able to be changed easily</a> <em>Submitted by anon</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/75\">[L-02] Input Validation on Factory.sol</a> <em>Submitted by anon</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/86\">[L-03] How much to approve before calling mintTo</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/31\">[L-04] Array out-of-bounds error in <code>Auction</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/30\">[L-05] Array out-of-bounds errors in <code>Factory</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/58\">[L-06] Tests are broken</a> <em>Submitted by kenzo</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/50\">[L-07] Inaccurate log emitted at deleteNewIndex</a> <em>Submitted by kenzo</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/68\">[L-08] <code>Basket.sol</code> should use the Upgradeable variant of OpenZeppelin Contracts</a> <em>Submitted by WatchPug</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/61\">[L-09] <code>Basket.sol#changePublisher()</code> Insufficient input validation</a> <em>Submitted by WatchPug</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/43\">[L-10] <code>Factory.proposeBasketLicense()</code> and <code>IFactory.proposeBasketLicense()</code> accept arguments with different data locations</a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/41\">[L-11] <code>Auction.settleAuction()</code> and <code>IAuction.settleAuction()</code> accept arguments with different data locations</a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/42\">[L-12] <code>Basket.publishNewIndex()</code> and <code>IBasket.publishNewIndex()</code> accept arguments with different data locations</a> <em>Submitted by pants</em>.</li>\n</ul>\n<h1 id=\"non-critical-findings-16\" style=\"position:relative;\"><a href=\"#non-critical-findings-16\" aria-label=\"non critical findings 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (16)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/73\">[N-01] Remove hardhat import</a> <em>Submitted by anon, also found by WatchPug</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/45\">[N-02] <code>nonReentrant</code> modifier should be used before any other modifier</a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/44\">[N-03] Events in <code>IAuction</code> don’t use the <code>indexed</code> keyword</a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/32\">[N-04] Inconsistent naming of a function’s argument in <code>Factory</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/77\">[N-05] Lack of Documentation on key functions</a> <em>Submitted by anon</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/9\">[N-06] Open TODOs in <code>Basket</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/8\">[N-07] Open TODOs in <code>Auction</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/7\">[N-08] Open TODOs in <code>IFactory</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/6\">[N-09] Open TODOs in <code>IBasket</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/18\">[N-10] Require statements without messages in <code>Factory</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/17\">[N-11] Require statements without messages in <code>Basket</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/16\">[N-12] Require statements without messages in <code>Auction</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/10\">[N-13] Open TODOs in <code>Factory</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/82\">[N-14] Missing events for owner only functions that change critical parameters</a> <em>Submitted by defsec</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/81\">[N-15]  Missing events for basket only functions that change critical parameters</a> <em>Submitted by defsec</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/60\">[N-16] <code>Basket.sol</code> should have methods to cancel pending changes</a> <em>Submitted by WatchPug</em>.</li>\n</ul>\n<h1 id=\"gas-optimizations-34\" style=\"position:relative;\"><a href=\"#gas-optimizations-34\" aria-label=\"gas optimizations 34 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (34)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/46\">[G-01] Minimize Storage Slots (Auction.sol)</a> <em>Submitted by ye0lde, also found by 0xngndev and kenzo</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/4\">[G-02] Unused Named Returns Can Be Removed</a> <em>Submitted by ye0lde, also found by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/74\">[G-03] Increase optimizer runs</a> <em>Submitted by anon</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/72\">[G-04] uint256 can be lowered to unitX with X &#x3C; 256 in some cases</a> <em>Submitted by anon</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/71\">[G-05] Unchecked modifiers should be used when over/under-flow isnt an issue to save gas</a> <em>Submitted by anon</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/70\">[G-06] Uninitialized variables are automatically set to 0</a> <em>Submitted by anon, also found by kenzo, pauliax, and WatchPug</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/91\">[G-07] Set initial value for lastFee</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/89\">[G-08] Cache factory.ownerSplit()</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/88\">[G-09] Cache basketAsERC20.totalSupply()</a> <em>Submitted by pauliax, also found by kenzo</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/87\">[G-10] There may be no bounties or user is not interested in any of them</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/38\">[G-11] Empty <code>else if</code> block in <code>Basket.publishNewIndex()</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/36\">[G-12] Unnecessary <code>SLOAD</code>s and <code>MLOAD</code>s in for-each loops</a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/35\">[G-13] Unnecessary <code>SLOAD</code>s in <code>Factory</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/34\">[G-14] Unnecessary <code>SLOAD</code>s in <code>Basket</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/33\">[G-15] Unnecessary <code>SLOAD</code>s in <code>Auction</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/29\">[G-16] Unnecessary require statement in <code>Auction.initialize()</code> and <code>Basket.initialize()</code></a> <em>Submitted by pants, also found by WatchPug</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/28\">[G-17] Unnecessary checked arithmetic in for loops</a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/27\">[G-18] Unnecessary checked arithmetic in <code>Basket.handleFees()</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/26\">[G-19] Unnecessary checked arithmetic in <code>Auction.addBounty()</code> and <code>Factory.proposeBasketLicense()</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/25\">[G-20] Unnecessary checked arithmetic in <code>Auction.settleAuction()</code>, <code>Auction.bondBurn()</code>, <code>Basket.changePublisher()</code>, <code>Basket.changeLicenseFee()</code> and <code>Basket.publishNewIndex()</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/22\">[G-21] Prefix increament is cheaper than postfix increament</a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/21\">[G-22] Unnecessary cast in <code>Basket.onlyPublisher()</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/20\">[G-23] Unnecessary cast in <code>Factory.proposeBasketLicense()</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/15\">[G-24] <code>internal</code> function in <code>Auction</code> can be <code>private</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/14\">[G-25] <code>public</code> functions in <code>Factory</code> can be <code>external</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/13\">[G-26] <code>public</code> functions in <code>Basket</code> can be <code>external</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/12\">[G-27] <code>public</code> functions in <code>Auction</code> can be <code>external</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/11\">[G-28] State variables in <code>Factory</code> can be <code>immutable</code></a> <em>Submitted by pants</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/47\">[G-29] Comparisons to boolean constant</a> <em>Submitted by loop</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/63\">[G-30] Basket: No need for initialized variable</a> <em>Submitted by kenzo</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/56\">[G-31] Unnecessary new list in Basket’s validateWeights()</a> <em>Submitted by kenzo</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/53\">[G-32] Restore state to 0 if not needed anymore</a> <em>Submitted by kenzo</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/64\">[G-33] <code>Basket.sol#changePublisher()</code> Remove redundant assertion can save gas</a> <em>Submitted by WatchPug</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/62\">[G-34] <code>Basket.sol#changeLicenseFee()</code> Remove redundant check can save gas</a> <em>Submitted by WatchPug</em>.</li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-1\">High Risk Findings (1)</a></p>\n<ul>\n<li><a href=\"#h-01-bonding-mechanism-allows-malicious-user-to-dos-auctions\">[H-01] Bonding mechanism allows malicious user to DOS auctions</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-8\">Medium Risk Findings (8)</a></p>\n<ul>\n<li><a href=\"#m-01-basketsolmint-malfunction-due-to-extra-nonreentrant-modifier\">[M-01] <code>Basket.sol#mint()</code> Malfunction due to extra <code>nonReentrant</code> modifier</a></li>\n<li><a href=\"#m-02-setting-factoryauctiondecrement-to-zero-causes-denial-of-service-in-auctionsettleauction\">[M-02] Setting <code>Factory.auctionDecrement</code> to zero causes Denial of Service in <code>Auction.settleAuction()</code></a></li>\n<li><a href=\"#m-03-setting-factorybondpercentdiv-to-zero-cause-denial-of-service-in-auctionbondforrebalance\">[M-03] Setting <code>Factory.bondPercentDiv</code> to zero cause Denial of Service in <code>Auction.bondForRebalance()</code></a></li>\n<li><a href=\"#m-04-fee-on-transfer-tokens-do-not-work-within-the-protocol\">[M-04] Fee on transfer tokens do not work within the protocol</a></li>\n<li><a href=\"#m-05-createbasket-re-entrancy\">[M-05] createBasket re-entrancy</a></li>\n<li><a href=\"#m-06-validations\">[M-06] Validations</a></li>\n<li><a href=\"#m-07-basket-becomes-unusable-if-everybody-burns-their-shares\">[M-07] Basket becomes unusable if everybody burns their shares</a></li>\n<li><a href=\"#m-08-auction-bonder-can-steal-user-funds-if-bond-block-is-high-enough\">[M-08] Auction bonder can steal user funds if bond block is high enough</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-12\">Low Risk Findings (12)</a></li>\n<li><a href=\"#non-critical-findings-16\">Non-Critical Findings (16)</a></li>\n<li><a href=\"#gas-optimizations-34\">Gas Optimizations (34)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}