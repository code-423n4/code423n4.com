{
  "circa": {
    "title": "Trader Joe contest",
    "sponsor": "Trader Joe",
    "slug": "2022-01-trader-joe",
    "date": "2022-03-07",
    "findings": "https://github.com/code-423n4/2022-01-trader-joe-findings/issues",
    "contest": 79
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Trader Joe contest smart contract system written in Solidity. The code contest took place between January 25—January 27 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>43 Wardens contributed reports to the Trader Joe contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li>static</li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/JustDravee\">Dravee</a></li>\n<li><a href=\"https://twitter.com/SirH4shalot\">sirhashalot</a></li>\n<li>jayjonah8</li>\n<li>kirk-baird</li>\n<li>robee</li>\n<li>Jujic</li>\n<li>pedroais</li>\n<li><a href=\"https://github.com/TomAFrench\">TomFrenchBlockchain</a></li>\n<li>hubble (ksk2345 and shri4net)</li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li>0x1f8b</li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li>harleythedog</li>\n<li>cccz</li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li>p4st13r4 (<a href=\"https://github.com/0x69e8\">0x69e8</a> and 0xb4bb4)</li>\n<li><a href=\"https://instagram.com/vanensurya\">Funen</a></li>\n<li><a href=\"https://twitter.com/wuwe19\">wuwe1</a></li>\n<li><a href=\"https://twitter.com/_0v3rf10w\">0v3rf10w</a></li>\n<li>UncleGrandpa925</li>\n<li>Czar102</li>\n<li>hyh</li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li><a href=\"https://twitter.com/hack3r_0m\">hack3r-0m</a></li>\n<li><a href=\"https://twitter.com/meidhiwirara\">Tomio</a></li>\n<li><a href=\"https://twitter.com/VladToie/\">bobi</a></li>\n<li><a href=\"https://www.instagram.com/riyan_rfa/\">rfa</a></li>\n<li>byterocket (<a href=\"https://binbash.sh\">pseudorandom</a> and <a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a>)</li>\n<li>saian</li>\n<li><a href=\"https://twitter.com/Meta0xNull\">Meta0xNull</a></li>\n<li>0x0x0x</li>\n<li><a href=\"https://twitter.com/rhynorater\">Rhynorater</a></li>\n<li>d4rk</li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/ssolgryn\">solgryn</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/lsdan_defi\">LSDan</a> (ElasticDAO).</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a> and <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 43 unique vulnerabilities and 117 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 2 received a risk rating in the category of HIGH severity, 15 received a risk rating in the category of MEDIUM severity, and 26 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 6 non-critical recommendations and 68 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-01-trader-joe\">C4 Trader Joe contest repository</a>, and is composed of 4 smart contracts written in the Solidity programming language and includes 1111 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-2\" style=\"position:relative;\"><a href=\"#high-risk-findings-2\" aria-label=\"high risk findings 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (2)</h1>\n<h2 id=\"h-01-users-can-lose-value-in-emergency-state\" style=\"position:relative;\"><a href=\"#h-01-users-can-lose-value-in-emergency-state\" aria-label=\"h 01 users can lose value in emergency state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/199\">[H-01] Users can lose value in emergency state</a></h2>\n<p><em>Submitted by cmichel, also found by static</em></p>\n<p>Imagine the following sequence of events:</p>\n<ul>\n<li><code>LaunchEvent.createPair()</code> is called which sets <code>wavaxReserve = 0</code>, adds liquidity to the pair and receives <code>lpSupply</code> LP tokens.</li>\n<li><code>LaunchEvent.allowEmergencyWithdraw()</code> is called which enters emergency / paused mode and disallows normal withdrawals.</li>\n<li>Users can only call <code>LaunchEvent.emergencyWithdraw</code> which reverts as the WAVAX reserve was already used to provide liquidity and cannot be paid out. Users don’t receive their LP tokens either. The users lost their entire deposit in this case.</li>\n</ul>\n<h4 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Consider paying out LP tokens in <code>emergencyWithdraw</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/199#issuecomment-1035418911\">cryptofish7 (Trader Joe) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fix: <a href=\"https://github.com/traderjoe-xyz/rocket-joe/pull/99\">https://github.com/traderjoe-xyz/rocket-joe/pull/99</a></p>\n</blockquote>\n<hr>\n<h2 id=\"h-02-wrong-token-allocation-computation-for-token-decimals--18-if-floor-price-not-reached\" style=\"position:relative;\"><a href=\"#h-02-wrong-token-allocation-computation-for-token-decimals--18-if-floor-price-not-reached\" aria-label=\"h 02 wrong token allocation computation for token decimals  18 if floor price not reached permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/193\">[H-02] Wrong token allocation computation for token decimals != 18 if floor price not reached</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>In <code>LaunchEvent.createPair</code>, when the floor price is not reached (<code>floorPrice > wavaxReserve * 1e18 / tokenAllocated</code>), the tokens to be sent to the pool are lowered to match the raised WAVAX at the floor price.</p>\n<p>Note that the <code>floorPrice</code> is supposed to have a precision of 18:</p>\n<blockquote>\n<p>/// @param _floorPrice Price of each token in AVAX, scaled to 1e18</p>\n</blockquote>\n<p>The <code>floorPrice > (wavaxReserve * 1e18) / tokenAllocated</code> check is correct but the <code>tokenAllocated</code> computation involves the <code>token</code> decimals:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// @audit should be wavaxReserve * 1e18 / floorPrice</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">tokenAllocated</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">wavaxReserve</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decimals</span><span class=\"mtk1\">()) / </span><span class=\"mtk12\">floorPrice</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>This computation does not work for <code>token</code>s that don’t have 18 decimals.</p>\n<h4 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h4>\n<p>Assume I want to sell <code>1.0 wBTC = 1e8 wBTC</code> (8 decimals) at <code>2,000.0 AVAX = 2,000 * 1e18 AVAX</code>.\nThe <code>floorPrice</code> is <code>2000e18 * 1e18 / 1e8 = 2e31</code></p>\n<p>Assume the Launch event only raised <code>1,000.0 AVAX</code> - half of the floor price for the issued token amount of <code>1.0 WBTC</code> (it should therefore allocate only half a WBTC) - and the token amount will be reduced as: <code>floorPrice = 2e31 > 1000e18 * 1e18 / 1e8 = 1e31 = actualPrice</code>.\nThen, <code>tokenAllocated = 1000e18 * 1e8 / 2e31 = 1e29 / 2e31 = 0</code> and no tokens would be allocated, instead of <code>0.5 WBTC = 0.5e8 WBTC</code>.</p>\n<p>The computation should be <code>tokenAllocated = wavaxReserve * 1e18 / floorPrice = 1000e18 * 1e18 / 2e31 = 1e39 / 2e31 = 10e38 / 2e31 = 5e7 = 0.5e8</code>.</p>\n<h4 id=\"recommendation-1\" style=\"position:relative;\"><a href=\"#recommendation-1\" aria-label=\"recommendation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>The new <code>tokenAllocated</code> computation should be <code>tokenAllocated = wavaxReserve * 1e18 / floorPrice;</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/193#issuecomment-1035433466\">cryptofish7 (Trader Joe) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fix: <a href=\"https://github.com/traderjoe-xyz/rocket-joe/pull/76\">https://github.com/traderjoe-xyz/rocket-joe/pull/76</a></p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-15\" style=\"position:relative;\"><a href=\"#medium-risk-findings-15\" aria-label=\"medium risk findings 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (15)</h1>\n<h2 id=\"m-01-improper-upper-bound-definition-on-the-fee\" style=\"position:relative;\"><a href=\"#m-01-improper-upper-bound-definition-on-the-fee\" aria-label=\"m 01 improper upper bound definition on the fee permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/255\">[M-01] Improper Upper Bound Definition on the Fee</a></h2>\n<p><em>Submitted by Jujic</em></p>\n<p>The <code>rJoePerSec</code> does not have any upper or lower bounds. Values that are too large will lead to reversions in several critical functions.</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/a1579f6453bc4bf9fb0db9c627beaa41135438ed/contracts/RocketJoeStaking.sol#L151\">https://github.com/code-423n4/2022-01-trader-joe/blob/a1579f6453bc4bf9fb0db9c627beaa41135438ed/contracts/RocketJoeStaking.sol#L151</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateEmissionRate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_rJoePerSec</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">updatePool</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">rJoePerSec</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_rJoePerSec</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">UpdateEmissionRate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_rJoePerSec</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Remix</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider define  upper and lower bounds on the <code>_rJoePerSec</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/255#issuecomment-1026262137\">cryptofish7 (Trader Joe) confirmed, but disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Confirming issue but disagree with severity.</p>\n<p>Fix: <a href=\"https://github.com/traderjoe-xyz/rocket-joe/pull/112\">https://github.com/traderjoe-xyz/rocket-joe/pull/112</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-owner-of-launchevent-token-has-the-ability-to-dos-attack-the-event\" style=\"position:relative;\"><a href=\"#m-02-owner-of-launchevent-token-has-the-ability-to-dos-attack-the-event\" aria-label=\"m 02 owner of launchevent token has the ability to dos attack the event permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/121\">[M-02] Owner of LaunchEvent token has the ability to DOS attack the event</a></h2>\n<p><em>Submitted by Ruhum, also found by TomFrenchBlockchain</em></p>\n<p>The owner of the token for which the LaunchEvent was created, has the ability to DOS attack the event. They can prevent the LaunchEvent from creating a JoePair which in turn limits the access to the following two functions: <code>withdrawLiquidity()</code> &#x26; <code>withdrawIncentives()</code>. Thus, stopping anybody from withdrawing their LP tokens.</p>\n<p>The owner of the RocketJoe platform has the ability to enable the emergency withdrawal allowing the depositors to take back their AVAX. But, they lose their burned rJOE tokens and the gas fees.</p>\n<p>The dev team might use this attack vector if they think the price of their token is too low. In that case, they can DOS attack the LaunchEvent. If the RocketJoe owner enables the emergency withdrawal, the dev team is able to take back their initial deposit. Thus, they don’t lose anything but their reputation.</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>When <code>createPair()</code> is called, the function checks whether a pair already exists. If it does, the transaction is reverted: <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L382-L389\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L382-L389</a></p>\n<p>Anybody is able to create a new JoePair using the existing TraderJoe contracts. If someone owns both AVAX and the LaunchEvent token, they are able to create a new pair and deposit a small amount of liquidity. Thus, the <code>totalSupply</code> will be <code>> 0</code>. Meaning, at that point, the call to <code>createPair()</code> fails. Per design, the LaunchEvent will be used to issue a token to the public market. So only the dev team and its trusted parties have access to the necessary tokens to create a pair and provide liquidity.</p>\n<p><a href=\"https://github.com/traderjoe-xyz/joe-core/blob/main/contracts/traderjoe/JoeFactory.sol#L30\">https://github.com/traderjoe-xyz/joe-core/blob/main/contracts/traderjoe/JoeFactory.sol#L30</a></p>\n<p><a href=\"https://github.com/traderjoe-xyz/joe-core/blob/main/contracts/traderjoe/JoePair.sol#L133\">https://github.com/traderjoe-xyz/joe-core/blob/main/contracts/traderjoe/JoePair.sol#L133</a></p>\n<p>Since <code>createPair()</code> can’t be executed the <code>pair</code> state variable is never initialized: <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L422\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L422</a></p>\n<p>Thus, the following two functions are not reachable any more: <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L439\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L439</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L469\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L469</a></p>\n<p>If the emergency withdrawal is enabled, the token issuer can take back their deposit: <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L510-L516\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L510-L516</a></p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>If a LaunchEvent for a token has started, only the LaunchEvent contract should be able to create a JoePair for that token. But, this change has to be made to the contracts that are not in the scope of this audit. I don’t think there’s a possibility to fix this issue within the RocketJoe contracts.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/121\">cryptofish7 (Trader Joe) acknowledged</a></strong></p>\n<hr>\n<h2 id=\"m-03-createrjlaunchevent-can-be-called-by-anyone-with-1-wei-of-_token-and-stop-others-from-creating-rjlaunchevent-with-the-same-token-anymore\" style=\"position:relative;\"><a href=\"#m-03-createrjlaunchevent-can-be-called-by-anyone-with-1-wei-of-_token-and-stop-others-from-creating-rjlaunchevent-with-the-same-token-anymore\" aria-label=\"m 03 createrjlaunchevent can be called by anyone with 1 wei of _token and stop others from creating rjlaunchevent with the same token anymore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/247\">[M-03] <code>createRJLaunchEvent()</code> can be called by anyone with 1 Wei of <code>_token</code> and stop others from creating RJLaunchEvent with the same token anymore</a></h2>\n<p><em>Submitted by WatchPug, also found by p4st13r4</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/119e12d715ececc31478e833297f124cc15d27c2/contracts/RocketJoeFactory.sol#L97-L132\">https://github.com/code-423n4/2022-01-trader-joe/blob/119e12d715ececc31478e833297f124cc15d27c2/contracts/RocketJoeFactory.sol#L97-L132</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">createRJLaunchEvent</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_issuer</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_phaseOneStartTime</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenIncentivesPercent</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_floorPrice</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_maxWithdrawPenalty</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_fixedWithdrawPenalty</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_maxAllocation</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_userTimelock</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_issuerTimelock</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">getRJLaunchEvent</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">] == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&quot;RJFactory: token has already been issued&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_issuer</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;RJFactory: issuer can&#39;t be 0 address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;RJFactory: token can&#39;t be 0 address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">wavax</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;RJFactory: token can&#39;t be wavax&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_tokenAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&quot;RJFactory: token amount needs to be greater than 0&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IJoeFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getPair</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">wavax</span><span class=\"mtk1\">) == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) ||</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">IJoePair</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IJoeFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getPair</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">wavax</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                .</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() ==</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&quot;RJFactory: liquid pair already exists&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">launchEvent</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Clones</span><span class=\"mtk1\">.</span><span class=\"mtk11\">clone</span><span class=\"mtk1\">(</span><span class=\"mtk12\">eventImplementation</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// msg.sender needs to approve RocketJoeFactory</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">launchEvent</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_tokenAmount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>In the current implementation, <code>RocketJoeFactory.sol#createRJLaunchEvent()</code> can be called by anyone with at least 1 Wei of <code>_token</code>.</p>\n<p>This allows a malicious user or attacker to call <code>createRJLaunchEvent()</code> with minimal cost and stop others, especially the platform itself or the rightful issuer of the token from creating the RJLaunchEvent.</p>\n<h4 id=\"recommendation-2\" style=\"position:relative;\"><a href=\"#recommendation-2\" aria-label=\"recommendation 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Consider making <code>createRJLaunchEvent()</code> only callable by the owner of <code>RocketJoeFactory</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/247#issuecomment-1034972822\">cryptofish7 (Trader Joe) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>That’s the spirit, not a single token should be in circulation.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-uninitialized-rocketjoestakinglastrewardtimestamp-can-inflate-rjoe-supply\" style=\"position:relative;\"><a href=\"#m-04-uninitialized-rocketjoestakinglastrewardtimestamp-can-inflate-rjoe-supply\" aria-label=\"m 04 uninitialized rocketjoestakinglastrewardtimestamp can inflate rjoe supply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/202\">[M-04] Uninitialized <code>RocketJoeStaking.lastRewardTimestamp</code> can inflate <code>rJoe</code> supply</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>RocketJoeStaking.lastRewardTimestamp</code> is initialized to zero. Usually, this does not matter as <code>updatePool</code> is called before the first deposit and when <code>joeSupply = joe.balanceOf(address(this)) == 0</code>, it is set to the current time.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updatePool</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">lastRewardTimestamp</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">joeSupply</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">joe</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// @audit lastRewardTimestamp is not initialized. can send 1 Joe to this contract directly =&gt; lots of rJoe minted to this contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">joeSupply</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">lastRewardTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">multiplier</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">lastRewardTimestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rJoeReward</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">multiplier</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">rJoePerSec</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">accRJoePerShare</span><span class=\"mtk1\"> =</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">accRJoePerShare</span><span class=\"mtk1\"> +</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">rJoeReward</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">PRECISION</span><span class=\"mtk1\">) /</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">joeSupply</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">lastRewardTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">rJoe</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">rJoeReward</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>However, if a user first directly transfers <code>Joe</code> tokens to the contract before the first <code>updatePool</code> call, the <code>block.timestamp - lastRewardTimestamp = block.timestamp</code> will be a large timestamp value and lots of <code>rJoe</code> will be minted (but not distributed to users).\nEven though they are not distributed to the users, inflating the <code>rJoe</code> total supply might not be desired.</p>\n<h4 id=\"recommendation-3\" style=\"position:relative;\"><a href=\"#recommendation-3\" aria-label=\"recommendation 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Consider tracking the actual total deposits in a storage variable and using this value instead of the current balance for <code>joeSupply</code>.\nThis way, transferring tokens to the contract has no influence and depositing through <code>deposit</code> first calls <code>updatePool</code> and initializes <code>lastRewardTimestamp</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/202#issuecomment-1035413421\">cryptofish7 (Trader Joe) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fix: <a href=\"https://github.com/traderjoe-xyz/rocket-joe/pull/76\">https://github.com/traderjoe-xyz/rocket-joe/pull/76</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-failed-transfer-with-low-level-call-could-be-overlooked\" style=\"position:relative;\"><a href=\"#m-05-failed-transfer-with-low-level-call-could-be-overlooked\" aria-label=\"m 05 failed transfer with low level call could be overlooked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/170\">[M-05] Failed transfer with low level call could be overlooked</a></h2>\n<p><em>Submitted by harleythedog, also found by sirhashalot</em></p>\n<p>In <code>LaunchEvent.sol</code>, the function <code>_safeTransferAVAX</code> is as follows:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_safeTransferAVAX</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_value</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">_value</span><span class=\"mtk1\">}(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;LaunchEvent: avax transfer failed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>This function is utilized in a few different places in the contract. According to the <a href=\"https://docs.soliditylang.org/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions\">Solidity docs</a>), “The low-level functions <code>call</code>, <code>delegatecall</code> and <code>staticcall</code> return <code>true</code> as their first return value if the account called is non-existent, as part of the design of the EVM. Account existence must be checked prior to calling if needed”.</p>\n<p>As a result, it is possible that this call will fail, but <code>_safeTransferAVAX</code> will not notice anything went wrong. In particular, it is possible that the address <code>rocketJoeFactory.penaltyCollector()</code> is a deleted contract (perhaps a security flaw was found and <code>selfdestruct</code> was called so that users know to use an updated smart contract), but <code>_safeTransferAVAX</code> will not revert. If <code>rocketJoeFactory.penaltyCollector()</code> is indeed a non-existent contract, it would be better for <code>_safeTransferAVAX</code> to revert until an admin can manually correct the <code>penaltyCollector</code> in the factory.</p>\n<p>For reference, see a similar high severity reported in a Uniswap audit here (report # 9): <a href=\"https://github.com/Uniswap/v3-core/blob/main/audits/tob/audit.pdf\">https://github.com/Uniswap/v3-core/blob/main/audits/tob/audit.pdf</a></p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>See <code>_safeTransferAVAX</code> <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/a1579f6453bc4bf9fb0db9c627beaa41135438ed/contracts/LaunchEvent.sol#L620\">here</a>. See how this function is called with <code>_to</code> as <code>rocketJoeFactory.penaltyCollector()</code> <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/a1579f6453bc4bf9fb0db9c627beaa41135438ed/contracts/LaunchEvent.sol#L371\">here</a>, but this contract’s existence is not verified, which is a problem as described above.</p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Check for contract existence on low-level calls, so that failures are not missed.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/170\">cryptofish7 (Trader Joe) acknowledged</a></strong></p>\n<hr>\n<h2 id=\"m-06-possibility-of-minting-rjoe-tokens-before-ownership--is-changed-to-rocketjoestaking\" style=\"position:relative;\"><a href=\"#m-06-possibility-of-minting-rjoe-tokens-before-ownership--is-changed-to-rocketjoestaking\" aria-label=\"m 06 possibility of minting rjoe tokens before ownership  is changed to rocketjoestaking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/261\">[M-06] possibility of minting rJOE tokens before ownership  is changed to RocketJoeStaking</a></h2>\n<p><em>Submitted by hubble</em></p>\n<p>There is a possibility of the rJOE tokens in RocketJoeToken.sol to be minted by original owner without staking any JOE, before the ownership is transferred to  RocketJoeStaking</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Contract : RocketJoeToken.sol\nLine : 37\nfunction mint(address _to, uint256 _amount) external onlyOwner {\n_mint(_to, _amount);\n}</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The transferOwnership(address) function inherited from Ownable.sol is used to change to a new owner i.e., RocketJoeStaking.\nIn the RocketJoeToken.sol contract, define and override this function with an additional check that the totalSupply &#x3C;= 0</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/261\">cryptofish7 (Trader Joe) acknowledged</a></strong></p>\n<hr>\n<h2 id=\"m-07-withdrawavax-function-has-call-to-sender-without-reentrancy-protection-\" style=\"position:relative;\"><a href=\"#m-07-withdrawavax-function-has-call-to-sender-without-reentrancy-protection-\" aria-label=\"m 07 withdrawavax function has call to sender without reentrancy protection  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/32\">[M-07] withdrawAVAX() function has call to sender without reentrancy protection </a></h2>\n<p><em>Submitted by jayjonah8</em></p>\n<p>In LauchEvent.sol the withdrawAVAX() function makes an external call to the msg.sender by way of _safeTransferAVAX.  This allows the caller to reenter this and other functions in this and other protocol files.  To prevent reentrancy and cross function reentrancy there should be reentrancy guard modifiers placed on the withdrawAVAX() function and any other function that makes external calls to the caller.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L368\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L368</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L370\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L370</a></p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add reentrancy guard modifier to withdrawAVAX() function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/32#issuecomment-1026347427\">cryptofish7 (Trader Joe) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Resolved using CEI: <a href=\"https://github.com/traderjoe-xyz/rocket-joe/commit/dbd19cc400abb5863edfc0443dd408ba5ae3e99a\">https://github.com/traderjoe-xyz/rocket-joe/commit/dbd19cc400abb5863edfc0443dd408ba5ae3e99a</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-lp-tokens-may-be-locked-in-contract-due-to-allowemergencywithdraw-in-stage-3\" style=\"position:relative;\"><a href=\"#m-08-lp-tokens-may-be-locked-in-contract-due-to-allowemergencywithdraw-in-stage-3\" aria-label=\"m 08 lp tokens may be locked in contract due to allowemergencywithdraw in stage 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/169\">[M-08] LP Tokens May Be Locked in Contract Due to <code>allowEmergencyWithdraw()</code> in Stage 3</a></h2>\n<p><em>Submitted by kirk-baird</em></p>\n<p>The function <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L520\">allowEmergencyWithdraw()</a> may be called by the <code>rocketJoeFactory.owner()</code> at any time. If it is called while the protocol is in Stage 3 and a pair has been created then the LP tokens will be locked and both issues and depositors will be unable to withdraw.</p>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>If <code>allowEmergencyWithdraw()</code>  is called <code>stopped</code> is set to <code>true</code>. As a result functions <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L468\">withdrawIncentives()</a> and <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L438\">withdrawLiquidity()</a> will revert due to the <code>isStopped(false)</code> modifier reverting.</p>\n<p>Additionally, <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L494\">emergencyWithdraw()</a> will revert since all the <code>WAVAX</code> and <code>token</code> balances have been transferred to the liquidity pool.</p>\n<p>Thus, depositors and issuers will have no methods of removing their LP tokens or incentives.</p>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider adding the requirement <code>require(address(pair) != address(0), \"LaunchEvent: pair not created\");</code> to the function <code>allowEmergencyWithdraw()</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/169#issuecomment-1026365132\">cryptofish7 (Trader Joe) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>To fix, we allow withdrawal of LP in <code>emergencyWithdraw()</code>: <a href=\"https://github.com/traderjoe-xyz/rocket-joe/commit/8a93c43e9972a2cf7c8ee04ccf263a405ecfcecc\">https://github.com/traderjoe-xyz/rocket-joe/commit/8a93c43e9972a2cf7c8ee04ccf263a405ecfcecc</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-09-createpair-expects-zero-slippage\" style=\"position:relative;\"><a href=\"#m-09-createpair-expects-zero-slippage\" aria-label=\"m 09 createpair expects zero slippage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/146\">[M-09] <code>createPair()</code> expects zero slippage</a></h2>\n<p><em>Submitted by sirhashalot</em></p>\n<p>The LaunchEvent.sol <code>createPair()</code> function calls router.addLiquidity() with a amountADesired == amountAMin and amountBDesired == amountBMin. Because there is no allowance for slippage, if the zero slippage requirement is not met then the addLiquidity() function <a href=\"https://github.com/traderjoe-xyz/joe-core/blob/5c2ca96c3835e7f2660f2904a1224bb7c8f3b7a7/contracts/traderjoe/JoeRouter02.sol#L52-L57\">will revert</a> and prevent users from using the createPair() function. This could be caused either by frontrunning the createPair call or in a situation where the liquidity pool exists but does not allow for zero slippage with the assets it is holding.</p>\n<h4 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The zero slippage addLiquidity call is found <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/a1579f6453bc4bf9fb0db9c627beaa41135438ed/contracts/LaunchEvent.sol#L411\">in LaunchEvent.sol</a>. This code may have been written with the assumption that only Rocket Joe will have a balance of the new token, so no other user could call the addLiquidity function with both assets, since the whitepaper states “Rocket Joe liquidity launch will complete before launchpad public sale release any tokens to the public”. However, the new token contract should be considered untrusted and Rocket Joe cannot guarantee where all the new tokens are before phase 3 of the Rocket Joe launch event, which is when <code>createPair()</code> is called. The token creator who has control over the token allocation is not controlled by Trader Joe, so an attacker who has early access to the new token can break the outlined assumptions.</p>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider how the launch event functions may break if the new token is launched by an attacker who doesn’t follow the assumptions outlined. One solution for this <code>createPair()</code> issue is to add an input parameter to the function to handle a slippage allowance.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/146\">cryptofish7 (Trader Joe) acknowledged</a></strong></p>\n<hr>\n<h2 id=\"m-10-use-safetransfersafetransferfrom-consistently-instead-of-transfertransferfrom\" style=\"position:relative;\"><a href=\"#m-10-use-safetransfersafetransferfrom-consistently-instead-of-transfertransferfrom\" aria-label=\"m 10 use safetransfersafetransferfrom consistently instead of transfertransferfrom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/12\">[M-10] Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom</a></h2>\n<p><em>Submitted by cccz, also found by 0x1f8b, bobi, byterocket, Dravee, hack3r-0m, sirhashalot, TomFrenchBlockchain, UncleGrandpa925, and WatchPug</em></p>\n<p>It is good to add a require() statement that checks the return value of token transfers or to use something like OpenZeppelin’s safeTransfer/safeTransferFrom unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures of transfers and affect token accounting in contract.</p>\n<h4 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L457\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L457</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L463\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L463</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L489\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L489</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L513\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L513</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L537\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L537</a></p>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider using safeTransfer/safeTransferFrom or require() consistently.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/12#issuecomment-1026367336\">cryptofish7 (Trader Joe) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fix: <a href=\"https://github.com/traderjoe-xyz/rocket-joe/commit/9e11786ffbfe71f324bc67411270900ec21355fc\">https://github.com/traderjoe-xyz/rocket-joe/commit/9e11786ffbfe71f324bc67411270900ec21355fc</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/12#issuecomment-1046823599\">LSDan (judge) increased severity from Low to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>This could result in a loss of funds given the right external conditions.</p>\n<p><code>2 — Med (M): vulns have a risk of 2 and are considered “Medium” severity when assets are not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<hr>\n<h2 id=\"m-11-re-enterable-code-when-making-a-deposit-to-stake\" style=\"position:relative;\"><a href=\"#m-11-re-enterable-code-when-making-a-deposit-to-stake\" aria-label=\"m 11 re enterable code when making a deposit to stake permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/127\">[M-11] Re-enterable Code When Making a Deposit to Stake</a></h2>\n<p><em>Submitted by kirk-baird, also found by 0v3rf10w and static</em></p>\n<p>Note: this attack requires <code>rJoe</code> to relinquish control during <code>tranfer()</code> which under the current <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/RocketJoeToken.sol\">RocketJoeToken</a> it does not. Thus this vulnerability is raised as medium rather than high. Although it’s not exploitable currently, it is a highly risky code pattern that should be avoided.</p>\n<p>This vulnerability would allow the entire rJoe balance to be drained from the contract.</p>\n<h4 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The function <a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/RocketJoeStaking.sol#L96\">deposit()</a> would be vulnerable to reentrancy if rJoe relinquished control flow.</p>\n<p>The following lines show the reward calculations in variable <code>pending</code>. These calculations use two state variables <code>user.amount</code> and <code>user.rewardDebt</code>. Each of these are updated after <code>_safeRJoeTransfer()</code>.</p>\n<p>Thus if an attacker was able to get control flow during the <code>rJoe::tranfer()</code> function they would be able to reenter <code>deposit()</code> and the value calculated for <code>pending</code>would be the same as the previous iteration hence they would again be transferred <code>pending</code> rJoe tokens. During the rJoe transfer the would again gain control of the execution and call <code>deposit()</code> again. The process could be repeated until the entire rJoe balance of the contract has been transferred to the attacker.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pending</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">accRJoePerShare</span><span class=\"mtk1\">) /</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">PRECISION</span><span class=\"mtk1\"> -</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span><span class=\"mtk12\">rewardDebt</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_safeRJoeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pending</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span><span class=\"mtk12\">rewardDebt</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">user</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">accRJoePerShare</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">PRECISION</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>There are two possible mitigations. First is to use the <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol\">openzeppelin reentrancy guard</a> over the <code>deposit()</code> function which will prevent multiple deposits being made simultaneously.</p>\n<p>The second mitigation is to follow the <a href=\"https://docs.soliditylang.org/en/v0.8.11/security-considerations.html#re-entrancy\">checks-effects-interactions</a> pattern. This would involve updating all state variables before making any external calls.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/127#issuecomment-1026161071\">cryptofish7 (Trader Joe) confirmed, but disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Disagree with severity</p>\n<p>Fix: <a href=\"https://github.com/traderjoe-xyz/rocket-joe/pull/142\">https://github.com/traderjoe-xyz/rocket-joe/pull/142</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/127#issuecomment-1047788682\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I agree with the warden’s assessment of risk on this one. Leaving it unaddressed would represent a potential future compromise if it was forgotten about by the team.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-12-pair-creation-can-be-denied\" style=\"position:relative;\"><a href=\"#m-12-pair-creation-can-be-denied\" aria-label=\"m 12 pair creation can be denied permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/197\">[M-12] Pair creation can be denied</a></h2>\n<p><em>Submitted by cmichel, also found by harleythedog, UncleGrandpa925, and WatchPug</em></p>\n<p>The <code>LaunchEvent.createPair</code> requires that no previous pool was created for the <code>WAVAX &#x3C;> _token</code> pair.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">createPair</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isStopped</span><span class=\"mtk1\">(</span><span class=\"mtk12\">false</span><span class=\"mtk1\">) </span><span class=\"mtk11\">atPhase</span><span class=\"mtk1\">(Phase.PhaseThree) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wavaxAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">) = (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WAVAX</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// @audit grief: anyone can create pair</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getPair</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wavaxAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenAddress</span><span class=\"mtk1\">) == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&quot;LaunchEvent: pair already created&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>A griefer can create a pool for the <code>WAVAX &#x3C;> _token</code> pair by calling <a href=\"https://snowtrace.io/address/0x9ad6c38be94206ca50bb0d90783181662f0cfa10#contracts\"><code>JoeFactory.createPair(WAVAX, _token)</code></a> while the launch event phase 1 or 2 is running.\nNo liquidity can then be provided and an emergency state must be triggered for users and the issuer to be able to withdraw again.</p>\n<h4 id=\"recommendation-4\" style=\"position:relative;\"><a href=\"#recommendation-4\" aria-label=\"recommendation 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>It must be assumed that the pool is already created and even initialized as pool creation and liquidity provisioning is permissionless.\nSpecial attention must be paid if the pool is already initialized with liquidity at a different price than the launch event price.</p>\n<p>It would be enough to have a standard min. LP return “slippage” check (using parameter values for <code>amountAMin/amountBMin</code> instead of the hardcoded ones in <code>router.addLiquidity</code>) in <code>LaunchEvent.createPair()</code>.\nThe function must then be callable with special privileges only, for example, by the issuer.\nAlternatively, the slippage check can be hardcoded as a percentage of the raised amounts (<code>amountADesired = 0.95 * wavaxReserve, amountBDesired = 0.95 * tokenAllocated</code>).</p>\n<p>This will prevent attacks that try to provide LP at a bad pool price as the transaction will revert when receiving less than the slippage parameter.\nIf the pool is already initialized, it should just get arbitraged to the auction token price and liquidity can then be provided at the expected rate again.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/197#issuecomment-1035423645\">cryptofish7 (Trader Joe) confirmed, but disagreed with High severity and commented</a>:</strong></p>\n<blockquote>\n<p>Fix: <a href=\"https://github.com/traderjoe-xyz/rocket-joe/pull/81\">https://github.com/traderjoe-xyz/rocket-joe/pull/81</a></p>\n<p>Should be 2 (Medium).</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/197#issuecomment-1047839788\">LSDan (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>This issue would not put assets at risk. but would impact the availability of the protocol for certain pairs.</p>\n<p><code>2 — Med (M): vulns have a risk of 2 and are considered “Medium” severity when assets are not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<hr>\n<h2 id=\"m-13-erc20-return-values-not-checked\" style=\"position:relative;\"><a href=\"#m-13-erc20-return-values-not-checked\" aria-label=\"m 13 erc20 return values not checked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/198\">[M-13] ERC20 return values not checked</a></h2>\n<p><em>Submitted by cmichel, also found by Czar102, defsec, hack3r-0m, hyh, Ruhum, saian, Tomio, and WatchPug</em></p>\n<p>The <code>ERC20.transfer()</code> and <code>ERC20.transferFrom()</code> functions return a boolean value indicating success. This parameter needs to be checked for success.\nSome tokens do <strong>not</strong> revert if the transfer failed but return <code>false</code> instead.\nTokens that don’t actually perform the transfer and return <code>false</code> are still counted as a correct transfer.</p>\n<h4 id=\"recommendation-5\" style=\"position:relative;\"><a href=\"#recommendation-5\" aria-label=\"recommendation 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>As the Launch event token can be any token, all interactions with it should follow correct EIP20 checks.\nWe recommend checking the <code>success</code> boolean of all <code>.transfer</code> and <code>.transferFrom</code> calls for the unknown <code>token</code> contract.</p>\n<ul>\n<li><code>LaunchEvent.withdrawLiquidity</code>: <code>token.transfer(msg.sender, amount);</code></li>\n<li><code>LaunchEvent.withdrawIncentives</code>: <code>token.transfer(msg.sender, amount);</code></li>\n<li><code>LaunchEvent.emergencyWithdraw</code>: <code>token.transfer(msg.sender, amount);</code></li>\n<li><code>LaunchEvent.skim</code>: <code>token.transfer(msg.sender, amount);</code></li>\n<li><code>RocketJoeFactory.createRJLaunchEvent</code>: <code>IERC20(_token).transferFrom(msg.sender, launchEvent, _tokenAmount);</code></li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/198\">cryptofish7 (Trader Joe) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fix: <a href=\"https://github.com/traderjoe-xyz/rocket-joe/commit/dbd19cc4\">https://github.com/traderjoe-xyz/rocket-joe/commit/dbd19cc4</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/198#issuecomment-1048134672\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Given external factors, this could result in a loss of funds.</p>\n<p><code>2 — Med (M): vulns have a risk of 2 and are considered “Medium” severity when assets are not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<hr>\n<h2 id=\"m-14-incompatibility-with-rebasingdeflationaryinflationary-tokens\" style=\"position:relative;\"><a href=\"#m-14-incompatibility-with-rebasingdeflationaryinflationary-tokens\" aria-label=\"m 14 incompatibility with rebasingdeflationaryinflationary tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/18\">[M-14] Incompatibility With Rebasing/Deflationary/Inflationary tokens</a></h2>\n<p><em>Submitted by defsec</em></p>\n<p>The TraderJOE protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.</p>\n<h4 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/RocketJoeStaking.sol#L133\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/RocketJoeStaking.sol#L133</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/RocketJoeFactory.sol#L132\">https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/RocketJoeFactory.sol#L132</a></p>\n<h4 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<ul>\n<li>Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation</li>\n<li>Add support in contracts for such tokens before accepting user-supplied tokens</li>\n<li>Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don’t want to lose them.</li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/18#issuecomment-1026943303\">cryptofish7 (Trader Joe) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>It won’t revert as long as token’s balance doesn’t decrease (this never happens).</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/18#issuecomment-1048747093\">LSDan (judge) increased severity from Low to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>It is possible for someone to unknowingly use this functionality with a token that rebases down during the launch event. Just because you don’t support a token type, doesn’t mean that the design doesn’t exist. This is a medium risk, not a low risk, because there is the potential for external interaction to cause a loss of funds.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-15-lack-of-input-checks-withrawal-penalties-should-always-be-greater-than-0\" style=\"position:relative;\"><a href=\"#m-15-lack-of-input-checks-withrawal-penalties-should-always-be-greater-than-0\" aria-label=\"m 15 lack of input checks withrawal penalties should always be greater than 0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/314\">[M-15] Lack of input checks (withrawal penalties should always be greater than 0)</a></h2>\n<p><em>Submitted by pedroais</em></p>\n<p>If penalties are set to 0 the protocol would be vulnerable to price manipulations like the one described in the contest documentation.</p>\n<h4 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The protocol uses economic penalties to punish withdraws to protect against economic price manipulation attacks. If these penalties are set to 0 in the creation of a token launch the sale would be vulnerable to this kind of attack. The penalties should never be 0 for any token sale.</p>\n<p>The economic attack that could be done with 0 penalties is detailed on page 7 of the whitepaper.</p>\n<p><a href=\"https://github.com/traderjoe-xyz/research/blob/main/RocketJoe_Launch_Platform_for_Bootstrapping_Protocol-Owned_Liquidity.pdf\">https://github.com/traderjoe-xyz/research/blob/main/RocketJoe_Launch_Platform_for_Bootstrapping_Protocol-Owned_Liquidity.pdf</a></p>\n<p>I consider this to be a medium risk since it could completely invalidate a token launch but it’s still unlikely (but possible) the creators will set penalties to 0. This could be done by mistake or by the creators of the launch event to exploit it themselves.</p>\n<h4 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Require penalties to be greater than 0 either in the initializer function or in the factory.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/314#issuecomment-1034970150\">cryptofish7 (Trader Joe) acknowledged, but disagreed with Medium severity and commented</a>:</strong></p>\n<blockquote>\n<p>Disagree with severity, should be 1 (Low).</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/314#issuecomment-1048763650\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I agree with the warden on risk here.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-findings-26\" style=\"position:relative;\"><a href=\"#low-risk-findings-26\" aria-label=\"low risk findings 26 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (26)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/27\">[L-01] Lack of ownership check</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/140\">[L-02] Missing divide by 0 check on tokenAllocated</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/157\">[L-03] Inclusive checks in LaunchEvent.sol for time-management</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/164\">[L-04] Missing inheritances</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/266\">[L-05] RocketJoeStaking.initialize arguments need to be checked</a> <em>Submitted by hyh, also found by Funen and wuwe1</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/248\">[L-06] <code>createRJLaunchEvent()</code> Multiple <code>launchEvent</code> can be created unexpectedly by reentrancy</a> <em>Submitted by WatchPug, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/201\">[L-07] <code>rJoeAmount</code> can never be less than the <code>_avaxAmount</code></a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/64\">[L-08] Initialization Function Is Missing If Token is Equals To WAVAX On the LaunchEvent</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/291\">[L-09] Unsafe call to decimals()</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/43\">[L-10] Not verified function inputs of public / external functions</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/44\">[L-11] safeApprove of openZeppelin is deprecated</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/46\">[L-12] Mult instead div in compares</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/206\">[L-13] Penalty Collector must be trusted</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/8\">[L-14] FRONT-RUNNABLE INITIALIZERS</a> <em>Submitted by cccz, also found by Czar102, defsec, jayjonah8, Jujic, kirk-baird, Meta0xNull, p4st13r4, pauliax, robee, Ruhum, and wuwe1</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/10\">[L-15] No Transfer Ownership Pattern</a> <em>Submitted by cccz, also found by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/22\">[L-16] Must approve 0 first</a> <em>Submitted by cccz, also found by csanuragjain, defsec, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/5\">[L-17] rJoe rewards can be manipulated for all users </a> <em>Submitted by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/154\">[L-18] <code>LaunchEvent.sol</code>: Use <code>SafeERC20.safeApprove</code> in <code>createPair()</code></a> <em>Submitted by Dravee, also found by 0x1f8b, bobi, defsec, pauliax, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/263\">[L-19] Missing consistent zero address checks</a> <em>Submitted by sirhashalot, also found by 0v3rf10w, 0x1f8b, cccz, defsec, Dravee, gzeon, and UncleGrandpa925</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/186\">[L-20] Incorecct calculation between actual code and comment</a> <em>Submitted by Funen</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/23\">[L-21] RocketJoeFactory assume the input address is WAVAX</a> <em>Submitted by cccz</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/208\">[L-22] <code>LaunchEvent.tokenIncentivesPercent</code> wrong docs</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/209\">[L-23] Misleading comment in <code>LaunchEvent.getReserves</code></a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/149\">[L-24] Wrong comment</a> <em>Submitted by wuwe1</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/25\">[L-25] Admin Deny of Service</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/82\">[L-26] LaunchEvent pays out fewer incentives then expected</a> <em>Submitted by TomFrenchBlockchain</em></li>\n</ul>\n<h1 id=\"non-critical-findings-6\" style=\"position:relative;\"><a href=\"#non-critical-findings-6\" aria-label=\"non critical findings 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (6)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/230\">[N-01] Code Style: non-constant should not be named in all caps</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/39\">[N-02] Missing commenting</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/303\">[N-03] Reasonable upper limits for phase durations</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/148\">[N-04] Missing event emitting</a> <em>Submitted by wuwe1, also found by cmichel, defsec, and pedroais</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/115\">[N-05] Unused variable _amount</a> <em>Submitted by p4st13r4</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/109\">[N-06] The staking contract should have pause/unpause functionality.</a> <em>Submitted by defsec</em></li>\n</ul>\n<h1 id=\"gas-optimizations-68\" style=\"position:relative;\"><a href=\"#gas-optimizations-68\" aria-label=\"gas optimizations 68 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (68)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/160\">[G-01] <code>RocketJoeStaking.sol#withdraw</code> has an unneeded require statement</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/240\">[G-02] ”> 0” is less efficient than “!= 0” for unsigned integers</a> <em>Submitted by WatchPug, also found by 0x0x0x, byterocket, Czar102, defsec, Dravee, gzeon, Jujic, Meta0xNull, pedroais, robee, Ruhum, and solgryn</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/284\">[G-03] Gas Optimization: Variables that could be set immutable</a> <em>Submitted by gzeon, also found by 0x1f8b, bobi, csanuragjain, Ruhum, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/242\">[G-04] Use short reason strings can save gas</a> <em>Submitted by WatchPug, also found by byterocket, Czar102, defsec, Dravee, Jujic, Meta0xNull, p4st13r4, pauliax, robee, and sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/271\">[G-05] Use Shift Right/Left instead of Division/Multiplication if possible</a> <em>Submitted by Czar102, also found by byterocket, d4rk, and Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/162\">[G-06] Gas Optimisation - Simplify <code>_atPhase()</code> Logic</a> <em>Submitted by kirk-baird, also found by Czar102, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/278\">[G-07] Error never thrown</a> <em>Submitted by Czar102</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/282\">[G-08] Use constructors</a> <em>Submitted by Czar102</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/128\">[G-09] Gas Optimisation - Reduce storage loads</a> <em>Submitted by kirk-baird, also found by Czar102</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/132\">[G-10] Gas: Mark functions as payable when users can’t mistakenly send ETH</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/233\">[G-11] Adding unchecked directive can save gas</a> <em>Submitted by WatchPug, also found by defsec, Dravee, hyh, Jujic, Rhynorater, TomFrenchBlockchain, and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/159\">[G-12] Gas: Tight variable packing in <code>LaunchEvent.sol</code></a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/262\">[G-13] Functions can be external</a> <em>Submitted by sirhashalot, also found by Dravee, Rhynorater, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/166\">[G-14] Gas: Missing checks for non-zero transfer value calls</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/178\">[G-15] Gas: Non-strict inequalities are cheaper than strict ones</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/179\">[G-16] Gas in <code>LaunchEvent.sol:createPair()</code>: calculation should get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/180\">[G-17] Gas in <code>LaunchEvent.sol:withdrawLiquidity()</code>: <code>address(pair)</code> should get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/182\">[G-18] Gas in <code>LaunchEvent.sol:emergencyWithdraw()</code>: <code>user.balance</code> should get cached earlier</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/184\">[G-19] Gas in <code>RocketJoeFactory.sol:_emitLaunchedEvent()</code>: a value used only once shouldn’t get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/185\">[G-20] Gas in <code>RocketJoeStaking.sol:deposit()</code>: <code>user.amount</code> should get cached and used for calculation</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/187\">[G-21] Gas in <code>RocketJoeStaking.sol:withdraw()</code>: <code>user.amount</code> should get cached and used for calculation</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/192\">[G-22] Gas in <code>RocketJoeStaking.sol:withdraw()</code>: <code>accRJoePerShare</code> should get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/196\">[G-23] Gas in <code>RocketJoeStaking.sol:deposit()</code>: <code>accRJoePerShare</code> should get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/207\">[G-24] Gas in <code>RocketJoeStaking.sol:updatePool()</code>: <code>lastRewardTimestamp</code> should get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/211\">[G-25] Gas in <code>RocketJoeFactory.sol:createRJLaunchEvent()</code>: <code>wavax</code> should get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/214\">[G-26] Gas in <code>LaunchEvent.sol:currentPhase()</code>: <code>auctionStart</code> and <code>PHASE_ONE_DURATION</code> should get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/215\">[G-27] Gas in <code>LaunchEvent.sol:createPair()</code>: <code>wavaxReserve</code> should get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/216\">[G-28] Gas in <code>LaunchEvent.sol:withdrawLiquidity()</code>: <code>tokenReserve</code> should get cached earlier</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/217\">[G-29] Gas in <code>LaunchEvent.sol:emergencyWithdraw()</code>: <code>issuer</code> should get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/218\">[G-30] Gas in <code>LaunchEvent.sol:getPenalty()</code>: <code>PHASE_ONE_DURATION</code> and <code>PHASE_ONE_NO_FEE_DURATION</code> should get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/219\">[G-31] Gas in <code>LaunchEvent.sol:pairBalance()</code>: <code>wavaxAllocated</code> should get cached</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/229\">[G-32] Saving more gas by using <code>immutable phase</code></a> <em>Submitted by Funen</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/227\">[G-33] Caching <code>rJoe</code> variable</a> <em>Submitted by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/223\">[G-34] Mint() by OnlyOwner Lack of Zero Address Check for Address _to</a> <em>Submitted by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/236\">[G-35] Cache external call results can save gas</a> <em>Submitted by WatchPug, also found by byterocket, hyh, kirk-baird, Ruhum, TomFrenchBlockchain, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/234\">[G-36] Cache and read storage variables from the stack can save gas</a> <em>Submitted by WatchPug, also found by robee, Ruhum, and TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/59\">[G-37] Storing phase durations rather than start times duplicates calculations</a> <em>Submitted by TomFrenchBlockchain, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/73\">[G-38] Timestamps/durations held in storage can be packed</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/74\">[G-39] maxWithdrawPenalty and fixedWithdrawPenalty can be packed together</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/78\">[G-40] Free gas savings for using solidity 0.8.10+</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/79\">[G-41] Use clones with immutable variables to reduce costs from SLOADs</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/87\">[G-42] Explicit initialisation variable wastes gas.</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/88\">[G-43] UserData struct can be packed into a single slot.</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/260\">[G-44] using <code>unchecked</code> can save gas</a> <em>Submitted by Tomio</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/245\">[G-45] <code>RocketJoeFactory.sol#createRJLaunchEvent()</code> Check of <code>_issuer != address(0)</code>, <code>_token != address(0)</code>, <code>_tokenAmount > 0</code> can be done earlier to save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/210\">[G-46] Gas: <code>RocketJoeStaking.withdraw</code></a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/174\">[G-47] Gas savings</a> <em>Submitted by csanuragjain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/290\">[G-48] Gas Optimization: fmul optimization</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/309\">[G-49] Gas Optimization: Use type(uint256).max instead of block.timestamp</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/310\">[G-50] Gas Optimziation: Unnecessary pairBalance call</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/158\">[G-51] Gas Optimisation - Unnecessary External Calls in <code>LaunchEvent.initialize()</code></a> <em>Submitted by kirk-baird</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/294\">[G-52] Separate issuer functions from regular users</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/295\">[G-53] Unchecked math operations</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/296\">[G-54] Unchecked math operations</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/300\">[G-55] Repeated storage access</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/319\">[G-56] Cheaper operation should be done first in an if statement</a> <em>Submitted by pedroais</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/103\">[G-57] instead of using &#x26;&#x26; in require. just use require multiple time</a> <em>Submitted by rfa</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/265\">[G-58] using += to save gas</a> <em>Submitted by rfa</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/48\">[G-59] Check if amount is not zero to save gas</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/49\">[G-60] Cache powers of 10 used several times</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/52\">[G-61] Internal functions to private</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/274\">[G-62] Mark unchanging variables immutable</a> <em>Submitted by Czar102</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/71\">[G-63] Missing Sanity Checks Will Cause To Revert On the Function</a> <em>Submitted by defsec, also found by Tomio</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/181\">[G-64] The contracts use unlocked pragma</a> <em>Submitted by hyh, also found by bobi, byterocket, Czar102, defsec, Dravee, jayjonah8, Jujic, and p4st13r4</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/235\">[G-65] Redundant type casting</a> <em>Submitted by WatchPug, also found by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/241\">[G-66] <code>Ownable</code> library is redundant</a> <em>Submitted by WatchPug, also found by Dravee, TomFrenchBlockchain, and wuwe1</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/238\">[G-67] Check if amount > 0 before token transfer can save gas</a> <em>Submitted by WatchPug, also found by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-trader-joe-findings/issues/116\">[G-68] Useless storage variable</a> <em>Submitted by p4st13r4, also found by 0x1f8b</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-2\">High Risk Findings (2)</a></p>\n<ul>\n<li><a href=\"#h-01-users-can-lose-value-in-emergency-state\">[H-01] Users can lose value in emergency state</a></li>\n<li><a href=\"#h-02-wrong-token-allocation-computation-for-token-decimals--18-if-floor-price-not-reached\">[H-02] Wrong token allocation computation for token decimals != 18 if floor price not reached</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-15\">Medium Risk Findings (15)</a></p>\n<ul>\n<li><a href=\"#m-01-improper-upper-bound-definition-on-the-fee\">[M-01] Improper Upper Bound Definition on the Fee</a></li>\n<li><a href=\"#m-02-owner-of-launchevent-token-has-the-ability-to-dos-attack-the-event\">[M-02] Owner of LaunchEvent token has the ability to DOS attack the event</a></li>\n<li><a href=\"#m-03-createrjlaunchevent-can-be-called-by-anyone-with-1-wei-of-_token-and-stop-others-from-creating-rjlaunchevent-with-the-same-token-anymore\">[M-03] <code>createRJLaunchEvent()</code> can be called by anyone with 1 Wei of <code>_token</code> and stop others from creating RJLaunchEvent with the same token anymore</a></li>\n<li><a href=\"#m-04-uninitialized-rocketjoestakinglastrewardtimestamp-can-inflate-rjoe-supply\">[M-04] Uninitialized <code>RocketJoeStaking.lastRewardTimestamp</code> can inflate <code>rJoe</code> supply</a></li>\n<li><a href=\"#m-05-failed-transfer-with-low-level-call-could-be-overlooked\">[M-05] Failed transfer with low level call could be overlooked</a></li>\n<li><a href=\"#m-06-possibility-of-minting-rjoe-tokens-before-ownership--is-changed-to-rocketjoestaking\">[M-06] possibility of minting rJOE tokens before ownership  is changed to RocketJoeStaking</a></li>\n<li><a href=\"#m-07-withdrawavax-function-has-call-to-sender-without-reentrancy-protection-\">[M-07] withdrawAVAX() function has call to sender without reentrancy protection </a></li>\n<li><a href=\"#m-08-lp-tokens-may-be-locked-in-contract-due-to-allowemergencywithdraw-in-stage-3\">[M-08] LP Tokens May Be Locked in Contract Due to <code>allowEmergencyWithdraw()</code> in Stage 3</a></li>\n<li><a href=\"#m-09-createpair-expects-zero-slippage\">[M-09] <code>createPair()</code> expects zero slippage</a></li>\n<li><a href=\"#m-10-use-safetransfersafetransferfrom-consistently-instead-of-transfertransferfrom\">[M-10] Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom</a></li>\n<li><a href=\"#m-11-re-enterable-code-when-making-a-deposit-to-stake\">[M-11] Re-enterable Code When Making a Deposit to Stake</a></li>\n<li><a href=\"#m-12-pair-creation-can-be-denied\">[M-12] Pair creation can be denied</a></li>\n<li><a href=\"#m-13-erc20-return-values-not-checked\">[M-13] ERC20 return values not checked</a></li>\n<li><a href=\"#m-14-incompatibility-with-rebasingdeflationaryinflationary-tokens\">[M-14] Incompatibility With Rebasing/Deflationary/Inflationary tokens</a></li>\n<li><a href=\"#m-15-lack-of-input-checks-withrawal-penalties-should-always-be-greater-than-0\">[M-15] Lack of input checks (withrawal penalties should always be greater than 0)</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-26\">Low Risk Findings (26)</a></li>\n<li><a href=\"#non-critical-findings-6\">Non-Critical Findings (6)</a></li>\n<li><a href=\"#gas-optimizations-68\">Gas Optimizations (68)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of Trader Joe contest smart contract system written in Solidity. The code contest took place between January 25—January 27 2022.\n\n## Wardens\n\n43 Wardens contributed reports to the Trader Joe contest:\n\n  1. [cmichel](https://twitter.com/cmichelio)\n  1. static\n  1. [defsec](https://twitter.com/defsec_)\n  1. [Dravee](https://twitter.com/JustDravee)\n  1. [sirhashalot](https://twitter.com/SirH4shalot)\n  1. jayjonah8\n  1. kirk-baird\n  1. robee\n  1. Jujic\n  1. pedroais\n  1. [TomFrenchBlockchain](https://github.com/TomAFrench)\n  1. hubble (ksk2345 and shri4net)\n  1. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n  1. 0x1f8b\n  1. [pauliax](https://twitter.com/SolidityDev)\n  1. harleythedog\n  1. cccz\n  1. [Ruhum](https://twitter.com/0xruhum)\n  1. p4st13r4 ([0x69e8](https://github.com/0x69e8) and 0xb4bb4)\n  1. [Funen](https://instagram.com/vanensurya)\n  1. [wuwe1](https://twitter.com/wuwe19)\n  1. [0v3rf10w](https://twitter.com/_0v3rf10w)\n  1. UncleGrandpa925\n  1. Czar102\n  1. hyh\n  1. [gzeon](https://twitter.com/gzeon)\n  1. [csanuragjain](https://twitter.com/csanuragjain)\n  1. [hack3r-0m](https://twitter.com/hack3r_0m)\n  1. [Tomio](https://twitter.com/meidhiwirara)\n  1. [bobi](https://twitter.com/VladToie/)\n  1. [rfa](https://www.instagram.com/riyan_rfa/)\n  1. byterocket ([pseudorandom](https://binbash.sh) and [pmerkleplant](https://twitter.com/merkleplant_eth))\n  1. saian\n  1. [Meta0xNull](https://twitter.com/Meta0xNull)\n  1. 0x0x0x\n  1. [Rhynorater](https://twitter.com/rhynorater)\n  1. d4rk\n  1. [ye0lde](https://twitter.com/_ye0lde)\n  1. [solgryn](https://twitter.com/ssolgryn)\n\nThis contest was judged by [LSDan](https://twitter.com/lsdan_defi) (ElasticDAO).\n\nFinal report assembled by [liveactionllama](https://twitter.com/liveactionllama) and [itsmetechjay](https://twitter.com/itsmetechjay).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 43 unique vulnerabilities and 117 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 2 received a risk rating in the category of HIGH severity, 15 received a risk rating in the category of MEDIUM severity, and 26 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 6 non-critical recommendations and 68 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 Trader Joe contest repository](https://github.com/code-423n4/2022-01-trader-joe), and is composed of 4 smart contracts written in the Solidity programming language and includes 1111 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (2)\n## [[H-01] Users can lose value in emergency state](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/199)\n_Submitted by cmichel, also found by static_\n\nImagine the following sequence of events:\n\n*   `LaunchEvent.createPair()` is called which sets `wavaxReserve = 0`, adds liquidity to the pair and receives `lpSupply` LP tokens.\n*   `LaunchEvent.allowEmergencyWithdraw()` is called which enters emergency / paused mode and disallows normal withdrawals.\n*   Users can only call `LaunchEvent.emergencyWithdraw` which reverts as the WAVAX reserve was already used to provide liquidity and cannot be paid out. Users don't receive their LP tokens either. The users lost their entire deposit in this case.\n\n#### Recommendation\n\nConsider paying out LP tokens in `emergencyWithdraw`.\n\n**[cryptofish7 (Trader Joe) confirmed and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/199#issuecomment-1035418911):**\n > Fix: https://github.com/traderjoe-xyz/rocket-joe/pull/99\n\n\n\n***\n\n## [[H-02] Wrong token allocation computation for token decimals != 18 if floor price not reached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/193)\n_Submitted by cmichel_\n\nIn `LaunchEvent.createPair`, when the floor price is not reached (`floorPrice > wavaxReserve * 1e18 / tokenAllocated`), the tokens to be sent to the pool are lowered to match the raised WAVAX at the floor price.\n\nNote that the `floorPrice` is supposed to have a precision of 18:\n\n> /// @param \\_floorPrice Price of each token in AVAX, scaled to 1e18\n\nThe `floorPrice > (wavaxReserve * 1e18) / tokenAllocated` check is correct but the `tokenAllocated` computation involves the `token` decimals:\n\n```solidity\n// @audit should be wavaxReserve * 1e18 / floorPrice\ntokenAllocated = (wavaxReserve * 10**token.decimals()) / floorPrice;\n```\n\nThis computation does not work for `token`s that don't have 18 decimals.\n\n#### Example\n\nAssume I want to sell `1.0 wBTC = 1e8 wBTC` (8 decimals) at `2,000.0 AVAX = 2,000 * 1e18 AVAX`.\nThe `floorPrice` is `2000e18 * 1e18 / 1e8 = 2e31`\n\nAssume the Launch event only raised `1,000.0 AVAX` - half of the floor price for the issued token amount of `1.0 WBTC` (it should therefore allocate only half a WBTC) - and the token amount will be reduced as: `floorPrice = 2e31 > 1000e18 * 1e18 / 1e8 = 1e31 = actualPrice`.\nThen, `tokenAllocated = 1000e18 * 1e8 / 2e31 = 1e29 / 2e31 = 0` and no tokens would be allocated, instead of `0.5 WBTC = 0.5e8 WBTC`.\n\nThe computation should be `tokenAllocated = wavaxReserve * 1e18 / floorPrice = 1000e18 * 1e18 / 2e31 = 1e39 / 2e31 = 10e38 / 2e31 = 5e7 = 0.5e8`.\n\n#### Recommendation\n\nThe new `tokenAllocated` computation should be `tokenAllocated = wavaxReserve * 1e18 / floorPrice;`.\n\n**[cryptofish7 (Trader Joe) confirmed and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/193#issuecomment-1035433466):**\n > Fix: https://github.com/traderjoe-xyz/rocket-joe/pull/76\n\n\n\n***\n\n \n# Medium Risk Findings (15)\n## [[M-01] Improper Upper Bound Definition on the Fee](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/255)\n_Submitted by Jujic_\n\nThe `rJoePerSec` does not have any upper or lower bounds. Values that are too large will lead to reversions in several critical functions.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/a1579f6453bc4bf9fb0db9c627beaa41135438ed/contracts/RocketJoeStaking.sol#L151>\n```solidity\nfunction updateEmissionRate(uint256 _rJoePerSec) external onlyOwner {\n    updatePool();\n    rJoePerSec = _rJoePerSec;\n    emit UpdateEmissionRate(msg.sender, _rJoePerSec);\n}\n```\n\n#### Tools Used\n\nRemix\n\n#### Recommended Mitigation Steps\n\nConsider define  upper and lower bounds on the `_rJoePerSec`.\n\n**[cryptofish7 (Trader Joe) confirmed, but disagreed with severity and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/255#issuecomment-1026262137):**\n > Confirming issue but disagree with severity.\n> \n> Fix: https://github.com/traderjoe-xyz/rocket-joe/pull/112\n\n\n\n***\n\n## [[M-02] Owner of LaunchEvent token has the ability to DOS attack the event](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/121)\n_Submitted by Ruhum, also found by TomFrenchBlockchain_\n\nThe owner of the token for which the LaunchEvent was created, has the ability to DOS attack the event. They can prevent the LaunchEvent from creating a JoePair which in turn limits the access to the following two functions: `withdrawLiquidity()` & `withdrawIncentives()`. Thus, stopping anybody from withdrawing their LP tokens.\n\nThe owner of the RocketJoe platform has the ability to enable the emergency withdrawal allowing the depositors to take back their AVAX. But, they lose their burned rJOE tokens and the gas fees.\n\nThe dev team might use this attack vector if they think the price of their token is too low. In that case, they can DOS attack the LaunchEvent. If the RocketJoe owner enables the emergency withdrawal, the dev team is able to take back their initial deposit. Thus, they don't lose anything but their reputation.\n\n#### Proof of Concept\n\nWhen `createPair()` is called, the function checks whether a pair already exists. If it does, the transaction is reverted: <https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L382-L389>\n\nAnybody is able to create a new JoePair using the existing TraderJoe contracts. If someone owns both AVAX and the LaunchEvent token, they are able to create a new pair and deposit a small amount of liquidity. Thus, the `totalSupply` will be `> 0`. Meaning, at that point, the call to `createPair()` fails. Per design, the LaunchEvent will be used to issue a token to the public market. So only the dev team and its trusted parties have access to the necessary tokens to create a pair and provide liquidity.\n\n<https://github.com/traderjoe-xyz/joe-core/blob/main/contracts/traderjoe/JoeFactory.sol#L30>\n\n<https://github.com/traderjoe-xyz/joe-core/blob/main/contracts/traderjoe/JoePair.sol#L133>\n\nSince `createPair()` can't be executed the `pair` state variable is never initialized: <https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L422>\n\nThus, the following two functions are not reachable any more: <https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L439>\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L469>\n\nIf the emergency withdrawal is enabled, the token issuer can take back their deposit: <https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L510-L516>\n\n#### Recommended Mitigation Steps\n\nIf a LaunchEvent for a token has started, only the LaunchEvent contract should be able to create a JoePair for that token. But, this change has to be made to the contracts that are not in the scope of this audit. I don't think there's a possibility to fix this issue within the RocketJoe contracts.\n\n**[cryptofish7 (Trader Joe) acknowledged](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/121)**\n\n\n\n***\n\n## [[M-03] `createRJLaunchEvent()` can be called by anyone with 1 Wei of `_token` and stop others from creating RJLaunchEvent with the same token anymore](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/247)\n_Submitted by WatchPug, also found by p4st13r4_\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/119e12d715ececc31478e833297f124cc15d27c2/contracts/RocketJoeFactory.sol#L97-L132>\n\n```solidity\nfunction createRJLaunchEvent(\n    address _issuer,\n    uint256 _phaseOneStartTime,\n    address _token,\n    uint256 _tokenAmount,\n    uint256 _tokenIncentivesPercent,\n    uint256 _floorPrice,\n    uint256 _maxWithdrawPenalty,\n    uint256 _fixedWithdrawPenalty,\n    uint256 _maxAllocation,\n    uint256 _userTimelock,\n    uint256 _issuerTimelock\n) external override returns (address) {\n    require(\n        getRJLaunchEvent[_token] == address(0),\n        \"RJFactory: token has already been issued\"\n    );\n    require(_issuer != address(0), \"RJFactory: issuer can't be 0 address\");\n    require(_token != address(0), \"RJFactory: token can't be 0 address\");\n    require(_token != wavax, \"RJFactory: token can't be wavax\");\n    require(\n        _tokenAmount > 0,\n        \"RJFactory: token amount needs to be greater than 0\"\n    );\n    require(\n        IJoeFactory(factory).getPair(_token, wavax) == address(0) ||\n            IJoePair(IJoeFactory(factory).getPair(_token, wavax))\n                .totalSupply() ==\n            0,\n        \"RJFactory: liquid pair already exists\"\n    );\n\n    address launchEvent = Clones.clone(eventImplementation);\n\n    // msg.sender needs to approve RocketJoeFactory\n    IERC20(_token).transferFrom(msg.sender, launchEvent, _tokenAmount);\n```\n\nIn the current implementation, `RocketJoeFactory.sol#createRJLaunchEvent()` can be called by anyone with at least 1 Wei of `_token`.\n\nThis allows a malicious user or attacker to call `createRJLaunchEvent()` with minimal cost and stop others, especially the platform itself or the rightful issuer of the token from creating the RJLaunchEvent.\n\n#### Recommendation\n\nConsider making `createRJLaunchEvent()` only callable by the owner of `RocketJoeFactory`.\n\n**[cryptofish7 (Trader Joe) acknowledged and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/247#issuecomment-1034972822):**\n > That’s the spirit, not a single token should be in circulation.\n\n\n\n***\n\n## [[M-04] Uninitialized `RocketJoeStaking.lastRewardTimestamp` can inflate `rJoe` supply](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/202)\n_Submitted by cmichel_\n\nThe `RocketJoeStaking.lastRewardTimestamp` is initialized to zero. Usually, this does not matter as `updatePool` is called before the first deposit and when `joeSupply = joe.balanceOf(address(this)) == 0`, it is set to the current time.\n\n```solidity\nfunction updatePool() public {\n    if (block.timestamp <= lastRewardTimestamp) {\n        return;\n    }\n    uint256 joeSupply = joe.balanceOf(address(this));\n\n    // @audit lastRewardTimestamp is not initialized. can send 1 Joe to this contract directly => lots of rJoe minted to this contract\n    if (joeSupply == 0) {\n        lastRewardTimestamp = block.timestamp;\n        return;\n    }\n    uint256 multiplier = block.timestamp - lastRewardTimestamp;\n    uint256 rJoeReward = multiplier * rJoePerSec;\n    accRJoePerShare =\n        accRJoePerShare +\n        (rJoeReward * PRECISION) /\n        joeSupply;\n    lastRewardTimestamp = block.timestamp;\n\n    rJoe.mint(address(this), rJoeReward);\n}\n```\n\nHowever, if a user first directly transfers `Joe` tokens to the contract before the first `updatePool` call, the `block.timestamp - lastRewardTimestamp = block.timestamp` will be a large timestamp value and lots of `rJoe` will be minted (but not distributed to users).\nEven though they are not distributed to the users, inflating the `rJoe` total supply might not be desired.\n\n#### Recommendation\n\nConsider tracking the actual total deposits in a storage variable and using this value instead of the current balance for `joeSupply`.\nThis way, transferring tokens to the contract has no influence and depositing through `deposit` first calls `updatePool` and initializes `lastRewardTimestamp`.\n\n**[cryptofish7 (Trader Joe) confirmed and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/202#issuecomment-1035413421):**\n > Fix: https://github.com/traderjoe-xyz/rocket-joe/pull/76\n\n\n\n***\n\n## [[M-05] Failed transfer with low level call could be overlooked](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/170)\n_Submitted by harleythedog, also found by sirhashalot_\n\nIn `LaunchEvent.sol`, the function `_safeTransferAVAX` is as follows:\n```solidity\nfunction _safeTransferAVAX(address _to, uint256 _value) internal {\n    (bool success, ) = _to.call{value: _value}(new bytes(0));\n    require(success, \"LaunchEvent: avax transfer failed\");\n}\n```\n\nThis function is utilized in a few different places in the contract. According to the [Solidity docs](https://docs.soliditylang.org/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions)), \"The low-level functions `call`, `delegatecall` and `staticcall` return `true` as their first return value if the account called is non-existent, as part of the design of the EVM. Account existence must be checked prior to calling if needed\".\n\nAs a result, it is possible that this call will fail, but `_safeTransferAVAX` will not notice anything went wrong. In particular, it is possible that the address `rocketJoeFactory.penaltyCollector()` is a deleted contract (perhaps a security flaw was found and `selfdestruct` was called so that users know to use an updated smart contract), but `_safeTransferAVAX` will not revert. If `rocketJoeFactory.penaltyCollector()` is indeed a non-existent contract, it would be better for `_safeTransferAVAX` to revert until an admin can manually correct the `penaltyCollector` in the factory.\n\nFor reference, see a similar high severity reported in a Uniswap audit here (report # 9): <https://github.com/Uniswap/v3-core/blob/main/audits/tob/audit.pdf>\n\n#### Proof of Concept\n\nSee `_safeTransferAVAX` [here](https://github.com/code-423n4/2022-01-trader-joe/blob/a1579f6453bc4bf9fb0db9c627beaa41135438ed/contracts/LaunchEvent.sol#L620). See how this function is called with `_to` as `rocketJoeFactory.penaltyCollector()` [here](https://github.com/code-423n4/2022-01-trader-joe/blob/a1579f6453bc4bf9fb0db9c627beaa41135438ed/contracts/LaunchEvent.sol#L371), but this contract's existence is not verified, which is a problem as described above.\n\n#### Recommended Mitigation Steps\n\nCheck for contract existence on low-level calls, so that failures are not missed.\n\n**[cryptofish7 (Trader Joe) acknowledged](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/170)**\n\n\n\n***\n\n## [[M-06] possibility of minting rJOE tokens before ownership  is changed to RocketJoeStaking](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/261)\n_Submitted by hubble_\n\nThere is a possibility of the rJOE tokens in RocketJoeToken.sol to be minted by original owner without staking any JOE, before the ownership is transferred to  RocketJoeStaking\n\n#### Proof of Concept\n\nContract : RocketJoeToken.sol\nLine : 37\nfunction mint(address \\_to, uint256 \\_amount) external onlyOwner {\n\\_mint(\\_to, \\_amount);\n}\n\n#### Recommended Mitigation Steps\n\nThe transferOwnership(address) function inherited from Ownable.sol is used to change to a new owner i.e., RocketJoeStaking.\nIn the RocketJoeToken.sol contract, define and override this function with an additional check that the totalSupply <= 0\n\n**[cryptofish7 (Trader Joe) acknowledged](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/261)**\n\n\n\n***\n\n## [[M-07] withdrawAVAX() function has call to sender without reentrancy protection ](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/32)\n_Submitted by jayjonah8_\n\nIn LauchEvent.sol the withdrawAVAX() function makes an external call to the msg.sender by way of \\_safeTransferAVAX.  This allows the caller to reenter this and other functions in this and other protocol files.  To prevent reentrancy and cross function reentrancy there should be reentrancy guard modifiers placed on the withdrawAVAX() function and any other function that makes external calls to the caller.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L368>\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L370>\n\n#### Recommended Mitigation Steps\n\nAdd reentrancy guard modifier to withdrawAVAX() function.\n\n**[cryptofish7 (Trader Joe) confirmed and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/32#issuecomment-1026347427):**\n > Resolved using CEI: https://github.com/traderjoe-xyz/rocket-joe/commit/dbd19cc400abb5863edfc0443dd408ba5ae3e99a\n\n\n\n***\n\n## [[M-08] LP Tokens May Be Locked in Contract Due to `allowEmergencyWithdraw()` in Stage 3](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/169)\n_Submitted by kirk-baird_\n\nThe function [allowEmergencyWithdraw()](https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L520) may be called by the `rocketJoeFactory.owner()` at any time. If it is called while the protocol is in Stage 3 and a pair has been created then the LP tokens will be locked and both issues and depositors will be unable to withdraw.\n\n#### Proof of Concept\n\nIf `allowEmergencyWithdraw()`  is called `stopped` is set to `true`. As a result functions [withdrawIncentives()](https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L468) and [withdrawLiquidity()](https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L438) will revert due to the `isStopped(false)` modifier reverting.\n\nAdditionally, [emergencyWithdraw()](https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L494) will revert since all the `WAVAX` and `token` balances have been transferred to the liquidity pool.\n\nThus, depositors and issuers will have no methods of removing their LP tokens or incentives.\n\n#### Recommended Mitigation Steps\n\nConsider adding the requirement `require(address(pair) != address(0), \"LaunchEvent: pair not created\");` to the function `allowEmergencyWithdraw()`.\n\n**[cryptofish7 (Trader Joe) confirmed and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/169#issuecomment-1026365132):**\n > To fix, we allow withdrawal of LP in `emergencyWithdraw()`: https://github.com/traderjoe-xyz/rocket-joe/commit/8a93c43e9972a2cf7c8ee04ccf263a405ecfcecc\n\n\n\n***\n\n## [[M-09] `createPair()` expects zero slippage](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/146)\n_Submitted by sirhashalot_\n\nThe LaunchEvent.sol `createPair()` function calls router.addLiquidity() with a amountADesired == amountAMin and amountBDesired == amountBMin. Because there is no allowance for slippage, if the zero slippage requirement is not met then the addLiquidity() function [will revert](https://github.com/traderjoe-xyz/joe-core/blob/5c2ca96c3835e7f2660f2904a1224bb7c8f3b7a7/contracts/traderjoe/JoeRouter02.sol#L52-L57) and prevent users from using the createPair() function. This could be caused either by frontrunning the createPair call or in a situation where the liquidity pool exists but does not allow for zero slippage with the assets it is holding.\n\n#### Proof of Concept\n\nThe zero slippage addLiquidity call is found [in LaunchEvent.sol](https://github.com/code-423n4/2022-01-trader-joe/blob/a1579f6453bc4bf9fb0db9c627beaa41135438ed/contracts/LaunchEvent.sol#L411). This code may have been written with the assumption that only Rocket Joe will have a balance of the new token, so no other user could call the addLiquidity function with both assets, since the whitepaper states \"Rocket Joe liquidity launch will complete before launchpad public sale release any tokens to the public\". However, the new token contract should be considered untrusted and Rocket Joe cannot guarantee where all the new tokens are before phase 3 of the Rocket Joe launch event, which is when `createPair()` is called. The token creator who has control over the token allocation is not controlled by Trader Joe, so an attacker who has early access to the new token can break the outlined assumptions.\n\n#### Recommended Mitigation Steps\n\nConsider how the launch event functions may break if the new token is launched by an attacker who doesn't follow the assumptions outlined. One solution for this `createPair()` issue is to add an input parameter to the function to handle a slippage allowance.\n\n**[cryptofish7 (Trader Joe) acknowledged](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/146)**\n\n\n\n***\n\n## [[M-10] Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/12)\n_Submitted by cccz, also found by 0x1f8b, bobi, byterocket, Dravee, hack3r-0m, sirhashalot, TomFrenchBlockchain, UncleGrandpa925, and WatchPug_\n\nIt is good to add a require() statement that checks the return value of token transfers or to use something like OpenZeppelin’s safeTransfer/safeTransferFrom unless one is sure the given token reverts in case of a failure. Failure to do so will cause silent failures of transfers and affect token accounting in contract.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L457>\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L463>\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L489>\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L513>\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/LaunchEvent.sol#L537>\n\n#### Recommended Mitigation Steps\n\nConsider using safeTransfer/safeTransferFrom or require() consistently.\n\n**[cryptofish7 (Trader Joe) confirmed and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/12#issuecomment-1026367336):**\n > Fix: https://github.com/traderjoe-xyz/rocket-joe/commit/9e11786ffbfe71f324bc67411270900ec21355fc\n\n**[LSDan (judge) increased severity from Low to Medium and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/12#issuecomment-1046823599):**\n > This could result in a loss of funds given the right external conditions.\n> \n> `\n> 2 — Med (M): vulns have a risk of 2 and are considered “Medium” severity when assets are not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n\n\n***\n\n## [[M-11] Re-enterable Code When Making a Deposit to Stake](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/127)\n_Submitted by kirk-baird, also found by 0v3rf10w and static_\n\nNote: this attack requires `rJoe` to relinquish control during `tranfer()` which under the current [RocketJoeToken](https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/RocketJoeToken.sol) it does not. Thus this vulnerability is raised as medium rather than high. Although it's not exploitable currently, it is a highly risky code pattern that should be avoided.\n\nThis vulnerability would allow the entire rJoe balance to be drained from the contract.\n\n#### Proof of Concept\n\nThe function [deposit()](https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/RocketJoeStaking.sol#L96) would be vulnerable to reentrancy if rJoe relinquished control flow.\n\nThe following lines show the reward calculations in variable `pending`. These calculations use two state variables `user.amount` and `user.rewardDebt`. Each of these are updated after `_safeRJoeTransfer()`.\n\nThus if an attacker was able to get control flow during the `rJoe::tranfer()` function they would be able to reenter `deposit()` and the value calculated for `pending`would be the same as the previous iteration hence they would again be transferred `pending` rJoe tokens. During the rJoe transfer the would again gain control of the execution and call `deposit()` again. The process could be repeated until the entire rJoe balance of the contract has been transferred to the attacker.\n\n```solidity\nif (user.amount > 0) {\n    uint256 pending = (user.amount * accRJoePerShare) /\n        PRECISION -\n        user.rewardDebt;\n    _safeRJoeTransfer(msg.sender, pending);\n}\nuser.amount = user.amount + _amount;\nuser.rewardDebt = (user.amount * accRJoePerShare) / PRECISION;\n```\n\n#### Recommended Mitigation Steps\n\nThere are two possible mitigations. First is to use the [openzeppelin reentrancy guard](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol) over the `deposit()` function which will prevent multiple deposits being made simultaneously.\n\nThe second mitigation is to follow the [checks-effects-interactions](https://docs.soliditylang.org/en/v0.8.11/security-considerations.html#re-entrancy) pattern. This would involve updating all state variables before making any external calls.\n\n**[cryptofish7 (Trader Joe) confirmed, but disagreed with severity and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/127#issuecomment-1026161071):**\n > Disagree with severity\n> \n> Fix: https://github.com/traderjoe-xyz/rocket-joe/pull/142\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/127#issuecomment-1047788682):**\n > I agree with the warden's assessment of risk on this one. Leaving it unaddressed would represent a potential future compromise if it was forgotten about by the team.\n\n\n\n***\n\n## [[M-12] Pair creation can be denied](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/197)\n_Submitted by cmichel, also found by harleythedog, UncleGrandpa925, and WatchPug_\n\nThe `LaunchEvent.createPair` requires that no previous pool was created for the `WAVAX <> _token` pair.\n\n```solidity\nfunction createPair() external isStopped(false) atPhase(Phase.PhaseThree) {\n    (address wavaxAddress, address tokenAddress) = (\n        address(WAVAX),\n        address(token)\n    );\n    // @audit grief: anyone can create pair\n    require(\n        factory.getPair(wavaxAddress, tokenAddress) == address(0),\n        \"LaunchEvent: pair already created\"\n    );\n\n    // ...\n}\n```\n\nA griefer can create a pool for the `WAVAX <> _token` pair by calling [`JoeFactory.createPair(WAVAX, _token)`](https://snowtrace.io/address/0x9ad6c38be94206ca50bb0d90783181662f0cfa10#contracts) while the launch event phase 1 or 2 is running.\nNo liquidity can then be provided and an emergency state must be triggered for users and the issuer to be able to withdraw again.\n\n#### Recommendation\n\nIt must be assumed that the pool is already created and even initialized as pool creation and liquidity provisioning is permissionless.\nSpecial attention must be paid if the pool is already initialized with liquidity at a different price than the launch event price.\n\nIt would be enough to have a standard min. LP return \"slippage\" check (using parameter values for `amountAMin/amountBMin` instead of the hardcoded ones in `router.addLiquidity`) in `LaunchEvent.createPair()`.\nThe function must then be callable with special privileges only, for example, by the issuer.\nAlternatively, the slippage check can be hardcoded as a percentage of the raised amounts (`amountADesired = 0.95 * wavaxReserve, amountBDesired = 0.95 * tokenAllocated`).\n\nThis will prevent attacks that try to provide LP at a bad pool price as the transaction will revert when receiving less than the slippage parameter.\nIf the pool is already initialized, it should just get arbitraged to the auction token price and liquidity can then be provided at the expected rate again.\n\n**[cryptofish7 (Trader Joe) confirmed, but disagreed with High severity and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/197#issuecomment-1035423645):**\n > Fix: https://github.com/traderjoe-xyz/rocket-joe/pull/81\n> \n> \n> Should be 2 (Medium).\n\n**[LSDan (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/197#issuecomment-1047839788):**\n > This issue would not put assets at risk. but would impact the availability of the protocol for certain pairs.\n> \n> `\n> 2 — Med (M): vulns have a risk of 2 and are considered “Medium” severity when assets are not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n\n\n***\n\n## [[M-13] ERC20 return values not checked](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/198)\n_Submitted by cmichel, also found by Czar102, defsec, hack3r-0m, hyh, Ruhum, saian, Tomio, and WatchPug_\n\nThe `ERC20.transfer()` and `ERC20.transferFrom()` functions return a boolean value indicating success. This parameter needs to be checked for success.\nSome tokens do **not** revert if the transfer failed but return `false` instead.\nTokens that don't actually perform the transfer and return `false` are still counted as a correct transfer.\n\n#### Recommendation\n\nAs the Launch event token can be any token, all interactions with it should follow correct EIP20 checks.\nWe recommend checking the `success` boolean of all `.transfer` and `.transferFrom` calls for the unknown `token` contract.\n\n*   `LaunchEvent.withdrawLiquidity`: `token.transfer(msg.sender, amount);`\n*   `LaunchEvent.withdrawIncentives`: `token.transfer(msg.sender, amount);`\n*   `LaunchEvent.emergencyWithdraw`: `token.transfer(msg.sender, amount);`\n*   `LaunchEvent.skim`: `token.transfer(msg.sender, amount);`\n*   `RocketJoeFactory.createRJLaunchEvent`: `IERC20(_token).transferFrom(msg.sender, launchEvent, _tokenAmount);`\n\n**[cryptofish7 (Trader Joe) confirmed and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/198):**\n > Fix: https://github.com/traderjoe-xyz/rocket-joe/commit/dbd19cc4\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/198#issuecomment-1048134672):**\n > Given external factors, this could result in a loss of funds.\n> \n> `\n> 2 — Med (M): vulns have a risk of 2 and are considered “Medium” severity when assets are not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n\n\n***\n\n## [[M-14] Incompatibility With Rebasing/Deflationary/Inflationary tokens](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/18)\n_Submitted by defsec_\n\nThe TraderJOE protocol do not appear to support rebasing/deflationary/inflationary tokens whose balance changes during transfers or over time. The necessary checks include at least verifying the amount of tokens transferred to contracts before and after the actual transfer to infer any fees/interest.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/RocketJoeStaking.sol#L133>\n\n<https://github.com/code-423n4/2022-01-trader-joe/blob/main/contracts/RocketJoeFactory.sol#L132>\n\n#### Recommended Mitigation Steps\n\n*   Ensure that to check previous balance/after balance  equals to amount for any rebasing/inflation/deflation\n*   Add support in contracts for such tokens before accepting user-supplied tokens\n*   Consider supporting deflationary / rebasing / etc tokens by extra checking the balances before/after or strictly inform your users not to use such tokens if they don't want to lose them.\n\n**[cryptofish7 (Trader Joe) disputed and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/18#issuecomment-1026943303):**\n > It won’t revert as long as token’s balance doesn’t decrease (this never happens).\n\n**[LSDan (judge) increased severity from Low to Medium and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/18#issuecomment-1048747093):**\n > It is possible for someone to unknowingly use this functionality with a token that rebases down during the launch event. Just because you don't support a token type, doesn't mean that the design doesn't exist. This is a medium risk, not a low risk, because there is the potential for external interaction to cause a loss of funds.\n\n\n\n***\n\n## [[M-15] Lack of input checks (withrawal penalties should always be greater than 0)](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/314)\n_Submitted by pedroais_\n\nIf penalties are set to 0 the protocol would be vulnerable to price manipulations like the one described in the contest documentation.\n\n#### Proof of Concept\n\nThe protocol uses economic penalties to punish withdraws to protect against economic price manipulation attacks. If these penalties are set to 0 in the creation of a token launch the sale would be vulnerable to this kind of attack. The penalties should never be 0 for any token sale.\n\nThe economic attack that could be done with 0 penalties is detailed on page 7 of the whitepaper.\n\n<https://github.com/traderjoe-xyz/research/blob/main/RocketJoe_Launch_Platform_for_Bootstrapping_Protocol-Owned_Liquidity.pdf>\n\nI consider this to be a medium risk since it could completely invalidate a token launch but it's still unlikely (but possible) the creators will set penalties to 0. This could be done by mistake or by the creators of the launch event to exploit it themselves.\n\n#### Recommended Mitigation Steps\n\nRequire penalties to be greater than 0 either in the initializer function or in the factory.\n\n**[cryptofish7 (Trader Joe) acknowledged, but disagreed with Medium severity and commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/314#issuecomment-1034970150):**\n > Disagree with severity, should be 1 (Low).\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/314#issuecomment-1048763650):**\n > I agree with the warden on risk here.\n\n\n\n***\n\n# Low Risk Findings (26)\n- [[L-01] Lack of ownership check](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/27) _Submitted by 0x1f8b_\n- [[L-02] Missing divide by 0 check on tokenAllocated](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/140) _Submitted by Dravee_\n- [[L-03] Inclusive checks in LaunchEvent.sol for time-management](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/157) _Submitted by Dravee_\n- [[L-04] Missing inheritances](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/164) _Submitted by Dravee_\n- [[L-05] RocketJoeStaking.initialize arguments need to be checked](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/266) _Submitted by hyh, also found by Funen and wuwe1_\n- [[L-06] `createRJLaunchEvent()` Multiple `launchEvent` can be created unexpectedly by reentrancy](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/248) _Submitted by WatchPug, also found by pauliax_\n- [[L-07] `rJoeAmount` can never be less than the `_avaxAmount`](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/201) _Submitted by cmichel_\n- [[L-08] Initialization Function Is Missing If Token is Equals To WAVAX On the LaunchEvent](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/64) _Submitted by defsec_\n- [[L-09] Unsafe call to decimals()](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/291) _Submitted by pauliax_\n- [[L-10] Not verified function inputs of public / external functions](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/43) _Submitted by robee_\n- [[L-11] safeApprove of openZeppelin is deprecated](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/44) _Submitted by robee_\n- [[L-12] Mult instead div in compares](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/46) _Submitted by robee_\n- [[L-13] Penalty Collector must be trusted](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/206) _Submitted by cmichel_\n- [[L-14] FRONT-RUNNABLE INITIALIZERS](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/8) _Submitted by cccz, also found by Czar102, defsec, jayjonah8, Jujic, kirk-baird, Meta0xNull, p4st13r4, pauliax, robee, Ruhum, and wuwe1_\n- [[L-15] No Transfer Ownership Pattern](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/10) _Submitted by cccz, also found by defsec_\n- [[L-16] Must approve 0 first](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/22) _Submitted by cccz, also found by csanuragjain, defsec, and robee_\n- [[L-17] rJoe rewards can be manipulated for all users ](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/5) _Submitted by jayjonah8_\n- [[L-18] `LaunchEvent.sol`: Use `SafeERC20.safeApprove` in `createPair()`](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/154) _Submitted by Dravee, also found by 0x1f8b, bobi, defsec, pauliax, and WatchPug_\n- [[L-19] Missing consistent zero address checks](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/263) _Submitted by sirhashalot, also found by 0v3rf10w, 0x1f8b, cccz, defsec, Dravee, gzeon, and UncleGrandpa925_\n- [[L-20] Incorecct calculation between actual code and comment](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/186) _Submitted by Funen_\n- [[L-21] RocketJoeFactory assume the input address is WAVAX](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/23) _Submitted by cccz_\n- [[L-22] `LaunchEvent.tokenIncentivesPercent` wrong docs](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/208) _Submitted by cmichel_\n- [[L-23] Misleading comment in `LaunchEvent.getReserves`](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/209) _Submitted by cmichel_\n- [[L-24] Wrong comment](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/149) _Submitted by wuwe1_\n- [[L-25] Admin Deny of Service](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/25) _Submitted by 0x1f8b_\n- [[L-26] LaunchEvent pays out fewer incentives then expected](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/82) _Submitted by TomFrenchBlockchain_\n\n# Non-Critical Findings (6)\n- [[N-01] Code Style: non-constant should not be named in all caps](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/230) _Submitted by WatchPug_\n- [[N-02] Missing commenting](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/39) _Submitted by robee_\n- [[N-03] Reasonable upper limits for phase durations](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/303) _Submitted by pauliax_\n- [[N-04] Missing event emitting](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/148) _Submitted by wuwe1, also found by cmichel, defsec, and pedroais_\n- [[N-05] Unused variable _amount](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/115) _Submitted by p4st13r4_\n- [[N-06] The staking contract should have pause/unpause functionality.](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/109) _Submitted by defsec_\n\n# Gas Optimizations (68)\n- [[G-01] `RocketJoeStaking.sol#withdraw` has an unneeded require statement](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/160) _Submitted by 0x0x0x_\n- [[G-02] \"> 0\" is less efficient than \"!= 0\" for unsigned integers](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/240) _Submitted by WatchPug, also found by 0x0x0x, byterocket, Czar102, defsec, Dravee, gzeon, Jujic, Meta0xNull, pedroais, robee, Ruhum, and solgryn_\n- [[G-03] Gas Optimization: Variables that could be set immutable](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/284) _Submitted by gzeon, also found by 0x1f8b, bobi, csanuragjain, Ruhum, and WatchPug_\n- [[G-04] Use short reason strings can save gas](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/242) _Submitted by WatchPug, also found by byterocket, Czar102, defsec, Dravee, Jujic, Meta0xNull, p4st13r4, pauliax, robee, and sirhashalot_\n- [[G-05] Use Shift Right/Left instead of Division/Multiplication if possible](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/271) _Submitted by Czar102, also found by byterocket, d4rk, and Dravee_\n- [[G-06] Gas Optimisation - Simplify `_atPhase()` Logic](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/162) _Submitted by kirk-baird, also found by Czar102, and pauliax_\n- [[G-07] Error never thrown](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/278) _Submitted by Czar102_\n- [[G-08] Use constructors](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/282) _Submitted by Czar102_\n- [[G-09] Gas Optimisation - Reduce storage loads](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/128) _Submitted by kirk-baird, also found by Czar102_\n- [[G-10] Gas: Mark functions as payable when users can't mistakenly send ETH](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/132) _Submitted by Dravee_\n- [[G-11] Adding unchecked directive can save gas](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/233) _Submitted by WatchPug, also found by defsec, Dravee, hyh, Jujic, Rhynorater, TomFrenchBlockchain, and ye0lde_\n- [[G-12] Gas: Tight variable packing in `LaunchEvent.sol`](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/159) _Submitted by Dravee_\n- [[G-13] Functions can be external](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/262) _Submitted by sirhashalot, also found by Dravee, Rhynorater, and robee_\n- [[G-14] Gas: Missing checks for non-zero transfer value calls](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/166) _Submitted by Dravee_\n- [[G-15] Gas: Non-strict inequalities are cheaper than strict ones](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/178) _Submitted by Dravee_\n- [[G-16] Gas in `LaunchEvent.sol:createPair()`: calculation should get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/179) _Submitted by Dravee_\n- [[G-17] Gas in `LaunchEvent.sol:withdrawLiquidity()`: `address(pair)` should get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/180) _Submitted by Dravee_\n- [[G-18] Gas in `LaunchEvent.sol:emergencyWithdraw()`: `user.balance` should get cached earlier](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/182) _Submitted by Dravee_\n- [[G-19] Gas in `RocketJoeFactory.sol:_emitLaunchedEvent()`: a value used only once shouldn't get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/184) _Submitted by Dravee_\n- [[G-20] Gas in `RocketJoeStaking.sol:deposit()`: `user.amount` should get cached and used for calculation](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/185) _Submitted by Dravee_\n- [[G-21] Gas in `RocketJoeStaking.sol:withdraw()`: `user.amount` should get cached and used for calculation](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/187) _Submitted by Dravee_\n- [[G-22] Gas in `RocketJoeStaking.sol:withdraw()`: `accRJoePerShare` should get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/192) _Submitted by Dravee_\n- [[G-23] Gas in `RocketJoeStaking.sol:deposit()`: `accRJoePerShare` should get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/196) _Submitted by Dravee_\n- [[G-24] Gas in `RocketJoeStaking.sol:updatePool()`: `lastRewardTimestamp` should get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/207) _Submitted by Dravee_\n- [[G-25] Gas in `RocketJoeFactory.sol:createRJLaunchEvent()`: `wavax` should get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/211) _Submitted by Dravee_\n- [[G-26] Gas in `LaunchEvent.sol:currentPhase()`: `auctionStart` and `PHASE_ONE_DURATION` should get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/214) _Submitted by Dravee_\n- [[G-27] Gas in `LaunchEvent.sol:createPair()`: `wavaxReserve` should get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/215) _Submitted by Dravee_\n- [[G-28] Gas in `LaunchEvent.sol:withdrawLiquidity()`: `tokenReserve` should get cached earlier](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/216) _Submitted by Dravee_\n- [[G-29] Gas in `LaunchEvent.sol:emergencyWithdraw()`: `issuer` should get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/217) _Submitted by Dravee_\n- [[G-30] Gas in `LaunchEvent.sol:getPenalty()`: `PHASE_ONE_DURATION` and `PHASE_ONE_NO_FEE_DURATION` should get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/218) _Submitted by Dravee_\n- [[G-31] Gas in `LaunchEvent.sol:pairBalance()`: `wavaxAllocated` should get cached](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/219) _Submitted by Dravee_\n- [[G-32] Saving more gas by using `immutable phase`](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/229) _Submitted by Funen_\n- [[G-33] Caching `rJoe` variable](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/227) _Submitted by Jujic_\n- [[G-34] Mint() by OnlyOwner Lack of Zero Address Check for Address _to](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/223) _Submitted by Meta0xNull_\n- [[G-35] Cache external call results can save gas](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/236) _Submitted by WatchPug, also found by byterocket, hyh, kirk-baird, Ruhum, TomFrenchBlockchain, and WatchPug_\n- [[G-36] Cache and read storage variables from the stack can save gas](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/234) _Submitted by WatchPug, also found by robee, Ruhum, and TomFrenchBlockchain_\n- [[G-37] Storing phase durations rather than start times duplicates calculations](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/59) _Submitted by TomFrenchBlockchain, also found by pauliax_\n- [[G-38] Timestamps/durations held in storage can be packed](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/73) _Submitted by TomFrenchBlockchain_\n- [[G-39] maxWithdrawPenalty and fixedWithdrawPenalty can be packed together](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/74) _Submitted by TomFrenchBlockchain_\n- [[G-40] Free gas savings for using solidity 0.8.10+](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/78) _Submitted by TomFrenchBlockchain_\n- [[G-41] Use clones with immutable variables to reduce costs from SLOADs](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/79) _Submitted by TomFrenchBlockchain_\n- [[G-42] Explicit initialisation variable wastes gas.](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/87) _Submitted by TomFrenchBlockchain_\n- [[G-43] UserData struct can be packed into a single slot.](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/88) _Submitted by TomFrenchBlockchain_\n- [[G-44] using `unchecked` can save gas](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/260) _Submitted by Tomio_\n- [[G-45] `RocketJoeFactory.sol#createRJLaunchEvent()` Check of `_issuer != address(0)`, `_token != address(0)`, `_tokenAmount > 0` can be done earlier to save gas](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/245) _Submitted by WatchPug_\n- [[G-46] Gas: `RocketJoeStaking.withdraw`](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/210) _Submitted by cmichel_\n- [[G-47] Gas savings](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/174) _Submitted by csanuragjain_\n- [[G-48] Gas Optimization: fmul optimization](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/290) _Submitted by gzeon_\n- [[G-49] Gas Optimization: Use type(uint256).max instead of block.timestamp](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/309) _Submitted by gzeon_\n- [[G-50] Gas Optimziation: Unnecessary pairBalance call](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/310) _Submitted by gzeon_\n- [[G-51] Gas Optimisation - Unnecessary External Calls in `LaunchEvent.initialize()`](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/158) _Submitted by kirk-baird_\n- [[G-52] Separate issuer functions from regular users](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/294) _Submitted by pauliax_\n- [[G-53] Unchecked math operations](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/295) _Submitted by pauliax_\n- [[G-54] Unchecked math operations](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/296) _Submitted by pauliax_\n- [[G-55] Repeated storage access](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/300) _Submitted by pauliax_\n- [[G-56] Cheaper operation should be done first in an if statement](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/319) _Submitted by pedroais_\n- [[G-57] instead of using && in require. just use require multiple time](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/103) _Submitted by rfa_\n- [[G-58] using += to save gas](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/265) _Submitted by rfa_\n- [[G-59] Check if amount is not zero to save gas](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/48) _Submitted by robee_\n- [[G-60] Cache powers of 10 used several times](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/49) _Submitted by robee_\n- [[G-61] Internal functions to private](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/52) _Submitted by robee_\n- [[G-62] Mark unchanging variables immutable](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/274) _Submitted by Czar102_\n- [[G-63] Missing Sanity Checks Will Cause To Revert On the Function](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/71) _Submitted by defsec, also found by Tomio_\n- [[G-64] The contracts use unlocked pragma](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/181) _Submitted by hyh, also found by bobi, byterocket, Czar102, defsec, Dravee, jayjonah8, Jujic, and p4st13r4_\n- [[G-65] Redundant type casting](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/235) _Submitted by WatchPug, also found by 0x1f8b_\n- [[G-66] `Ownable` library is redundant](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/241) _Submitted by WatchPug, also found by Dravee, TomFrenchBlockchain, and wuwe1_\n- [[G-67] Check if amount > 0 before token transfer can save gas](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/238) _Submitted by WatchPug, also found by jayjonah8_\n- [[G-68] Useless storage variable](https://github.com/code-423n4/2022-01-trader-joe-findings/issues/116) _Submitted by p4st13r4, also found by 0x1f8b_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}