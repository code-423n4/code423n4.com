{
  "circa": {
    "title": "Visor Finance",
    "sponsor": "Visor",
    "slug": "2021-05-visorfinance",
    "date": "2021-08-30",
    "findings": "https://github.com/code-423n4/2021-05-visorfinance-findings/issues",
    "contest": 10
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis o the Visor Finance smart contract system written in Solidity. The code contest took place between May 12 — May 19, 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>12 Wardens contributed reports to the Visor Finance code contest:</p>\n<ul>\n<li><a href=\"https://twitter.com/0xRajeev\">0xRajeev</a></li>\n<li><a href=\"https://github.com/x9453\">shw</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://twitter.com/sherlock_defi\">Sherlock</a> (team of 4)</li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/AshiqAmien\">toastedsteaksandwich</a></li>\n<li><a href=\"https://twitter.com/MukeshJ_eth\">Jmukesh</a></li>\n<li><a href=\"https://twitter.com/a_delamo\">a_delamo</a></li>\n</ul>\n<p>This contest was judged by <a href=\"https://twitter.com/Ghoulsol\">ghoulsol</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/_ninek_\">ninek</a> and <a href=\"https://twitter.com/money_lego\">moneylegobatman</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 30 unique vulnerabilities. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 4 received a risk rating in the category of HIGH severity, 3 received a risk rating in the category of MEDIUM severity, and 8 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 15 non-critical recommendations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-05-visorfinance\">C4 Visor Finance code contest repository</a> and is comprised of 24 smart contracts written in the Solidity programming language.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings\" style=\"position:relative;\"><a href=\"#high-risk-findings\" aria-label=\"high risk findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings</h1>\n<h2 id=\"h-01-a-previously-timelocked-nft-token-becomes-permanently-stuck-in-vault-if-its-ever-moved-back-into-the-vault\" style=\"position:relative;\"><a href=\"#h-01-a-previously-timelocked-nft-token-becomes-permanently-stuck-in-vault-if-its-ever-moved-back-into-the-vault\" aria-label=\"h 01 a previously timelocked nft token becomes permanently stuck in vault if its ever moved back into the vault permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/35\">[H-01] A previously timelocked NFT token becomes permanently stuck in vault if it’s ever moved back into the vault</a></h2>\n<p><em>Submitted by 0xRajeev, also found by pauliax</em></p>\n<p>Let’s consider a scenario where a particular NFT token was timelocked for a certain duration by the owner using <code>timeLockERC721()</code> with a delegate as the recipient and then transferred out of the vault by the delegate via <code>transferERC721()</code> but without unlocking it explicitly using <code>timeUnlockERC721()</code>.</p>\n<p>This is possible because <code>transferERC721()</code> does all the timelock checks on <code>expires/block.timestamp</code> and <code>recipient/msg.sender</code> as is done in <code>timeUnlockERC721()</code>. But it misses deleting <code>timelockERC721s[key]</code> for that NFT <code>tokenID</code> (as done in L572 of <code>timeUnlockERC721()</code>).</p>\n<p>Because of this missing deletion, if that same NFT is ever put back into the vault later but this time without a timelock, the vault logic still thinks it is a timelocked NFT with the older/stale recipient from earlier because of the missing deletion. So now the owner who makes the <code>transferERC721()</code> call will not match the older/stale recipient address and will fail the check on L510 (unless they control that stale recipient address from the earlier timelock).</p>\n<p>The impact is that, without access/control to the earlier timelock recipient, this NFT token is now locked in the vault forever.</p>\n<ol>\n<li>Alice time locks a particular NFT token with delegate Eve as recipient using <code>timeLockERC721()</code></li>\n<li>Eve transfers NFT to Bob using <code>transferERC721()</code> but without calling <code>timeUnlockERC721()</code> first</li>\n<li>Alice buys the same NFT back from Bob (e.g. because it is now considered rare and more valuable) and again puts it back in her vault but this time without locking/delegating it to any recipient i.e. intending to control it herself.</li>\n<li>Because this NFT’s timelock data and delegate approval for Eve is never removed after Step 2, the NFT is still treated as timelocked in the vault with previous delegate Eve as the recipient (because of stale data in <code>timelockERC721s</code> and <code>nftApprovals</code>)</li>\n<li>Alice now cannot withdraw her own NFT without Eve’s help because the check on L510 will only allow Eve to transfer this NFT out of the vault.</li>\n<li>If Eve is no longer trusted/accessible then the NFT is locked in the vault forever.</li>\n</ol>\n<p>Recommend adding <code>delete timelockERC721s [timelockERC721Keys[nftContract][i]];</code> after L510.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/35#issuecomment-857003620\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/35#issuecomment-889188488\">ztcrypto (Visor) patched</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/71797204108fee8375bfb99a435c0e379bbcbd84#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"h-02-nft-transfer-approvals-are-not-removed-and-cannot-be-revoked-thus-leading-to-loss-of-nft-tokens\" style=\"position:relative;\"><a href=\"#h-02-nft-transfer-approvals-are-not-removed-and-cannot-be-revoked-thus-leading-to-loss-of-nft-tokens\" aria-label=\"h 02 nft transfer approvals are not removed and cannot be revoked thus leading to loss of nft tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/34\">[H-02] NFT transfer approvals are not removed and cannot be revoked thus leading to loss of NFT tokens</a></h2>\n<p><em>Submitted by 0xRajeev, also found by shw</em></p>\n<p>NFT transfer approvals that are set to true in <code>approveTransferERC721()</code> are never set to false and there is no way to remove such an nft approval.</p>\n<p><strong>Impact 1</strong>: The approval is not removed (set to false) after a transfer in <code>transferERC721()</code>. So if the NFT is ever moved back into the owner’s vault again, then the previous/compromised delegate can again transfer it to any address of choice without requiring a new approval.</p>\n<p><strong>Impact 2</strong>: If a delegate becomes compromised/untrustworthy after granting approval but before transfer then the owner will lose its NFT because there is no mechanism to revoke the approval that was granted earlier.</p>\n<p><a href=\"https://github.com/code-423n4/2021-05-visorfinance/blob/e0f15162a017130aa66910d46c70ee074b64dd40/contracts/contracts/visor/Visor.sol#L477-L487\">PoC-1</a>:</p>\n<ul>\n<li>Alice grants Eve approval to transfer a particular NFT out of its vault using <code>approveTransferERC721()</code></li>\n<li>Eve, who has transfer rights to that NFT from Alice’s vault,  transfers that NFT to Bob using <code>transferERC721()</code></li>\n<li>Alice decides to buy back that NFT (e.g. because it is now considered rare and more valuable) from Bob and transfers it back to its vault</li>\n<li>Eve, who continues to have transfer rights to that NFT from Alice’s vault, can steal that NFT and transfer to anyone</li>\n</ul>\n<p><a href=\"https://github.com/code-423n4/2021-05-visorfinance/blob/e0f15162a017130aa66910d46c70ee074b64dd40/contracts/contracts/visor/Visor.sol#L489-L522\">PoC-2</a>:</p>\n<ul>\n<li>Alice grants Eve approval to transfer a particular NFT out of its vault using <code>approveTransferERC721()</code></li>\n<li>Alice learns that Eve’s keys are compromises or that Eve is malicious and wants to revoke the approval but there is no mechanism to do so</li>\n<li>Eve (or whoever stole her credentials) has transfer rights to that NFT from Alice’s vault and can steal that NFT and transfer to anyone</li>\n</ul>\n<p>Recommend adding a boolean parameter to <code>approveTransferERC721()</code> and set the <code>nftApprovals</code>  to that parameter which can be true for giving approval and false for removing/revoking approval\nIf <code>msg.sender != _getOwner()</code>, call <code>approveTransferERC721()</code> with the boolean false to remove approval before making a transfer in <code>transferERC721()</code> on L515.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/34#issuecomment-862438325\">xyz-ctrl (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>duplicate\n<a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/35\">https://github.com/code-423n4/2021-05-visorfinance-findings/issues/35</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/34#issuecomment-873475636\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<h1 id=\"35-is-about-token-being-stuck-in-the-vault-this-issue-is-about-not-being-able-to-revoke-approval-marking-this-as-separate\" style=\"position:relative;\"><a href=\"#35-is-about-token-being-stuck-in-the-vault-this-issue-is-about-not-being-able-to-revoke-approval-marking-this-as-separate\" aria-label=\"35 is about token being stuck in the vault this issue is about not being able to revoke approval marking this as separate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>35 is about token being stuck in the vault. This issue is about not being able to revoke approval. Marking this as separate.</h1>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/34#issuecomment-889187960\">ztcrypto (Visor) patched</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/71797204108fee8375bfb99a435c0e379bbcbd84#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"h-03-approval-for-nft-transfers-is-not-removed-after-transfer\" style=\"position:relative;\"><a href=\"#h-03-approval-for-nft-transfers-is-not-removed-after-transfer\" aria-label=\"h 03 approval for nft transfers is not removed after transfer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/48\">[H-03] Approval for NFT transfers is not removed after transfer</a></h2>\n<p><em>Submitted by cmichel, also found by gpersoon, and pauliax</em></p>\n<p>The <code>Visor.transferERC721</code> does not reset the approval for the NFT.</p>\n<p>An approved delegatee can move the NFT out of the contract once.\nIt could be moved to a market and bought by someone else who then deposits it again to the same vault.\nThe first delegatee can steal the NFT and move it out of the contract a second time.</p>\n<p>Recommend resetting the approval on transfer.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/48#issuecomment-856953219\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<blockquote>\n<p>We will be mitigating this issue for our next release and before these experimental features are introduced in platform.\nPR pending</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/48#issuecomment-889192312\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>duplicate of above ones and fixed</p>\n</blockquote>\n<h2 id=\"h-04-unbounded-loop-in-_removenft-could-lead-to-a-griefingdos-attack\" style=\"position:relative;\"><a href=\"#h-04-unbounded-loop-in-_removenft-could-lead-to-a-griefingdos-attack\" aria-label=\"h 04 unbounded loop in _removenft could lead to a griefingdos attack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80\">[H-04] Unbounded loop in <code>_removeNft</code> could lead to a griefing/DOS attack</a></h2>\n<p><em>Submitted by shw, also found by cmichel, gpersoon, pauliax, Sherlock, and toastedsteaksandwhich</em></p>\n<p>Griefing/DOS attack is possible when a malicious NFT contract sends many NFTs to the vault, which could cause excessive gas consumed and even transactions reverted when other users are trying to unlock or transfer NFTs.</p>\n<p>The function <code>_removeNft</code> uses an unbounded loop, which iterates the array nfts until a specific one is found. If the NFT to be removed is at the very end of the nfts array, this function could consume a large amount of gas.\nThe function <code>onERC721Received</code> is permission-less. The vault accepts any NFTs from any NFT contract and pushes the received NFT into the array nfts.\nA malicious user could write an NFT contract, which calls <code>onERC721Received</code> of the vault many times to make the array nfts grow to a large size. Besides, the malicious NFT contract reverts when anyone tries to transfer (e.g., <code>safeTransferFrom</code>) its NFT.\nThe vault then has no way to remove the transferred NFT from the malicious NFT contract. The two only functions to remove NFTs, <code>transferERC721</code> and <code>timeUnlockERC721</code>, fail since the malicious NFT contract reverts all <code>safeTransferFrom</code> calls.\nAs a result, benign users who unlock or transfer NFTs would suffer from large and unnecessary gas consumption. The consumed gas could even exceed the block gas limit and cause the transaction to fail every time.</p>\n<p>Recommend using a mapping (e.g., <code>mapping(address=>Nft[]) nfts</code>) to store the received NFTs into separate arrays according to <code>nftContract</code> instead of putting them into the same one. Or, add a method specifically for the owner to remove NFTs from the nfts array directly.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80#issuecomment-856368771\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<blockquote>\n<p>sponsor confirmed\nWe are working to mitigate this issue in our next upgrade</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80#issuecomment-873481532\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m making this high severity because it doesn’t need a malicious actor to happen. This can happen by simply being very successful</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80#issuecomment-856368771\">xyz-ctrl (Visor) commented</a>:</strong></p>\n<blockquote>\n<p> Agreed. We merged a pr with mitigations a few weeks ago here <a href=\"https://github.com/VisorFinance/visor-core/pull/2\">VisorFinance/visor-core#2</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80#issuecomment-873524863\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate of <a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/66\">#66</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80#issuecomment-889198308\">ztcrypto (Visor) patched</a>:</strong></p>\n<blockquote>\n<p>duplicated and patched\n<a href=\"https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h1 id=\"medium-risk-findings\" style=\"position:relative;\"><a href=\"#medium-risk-findings\" aria-label=\"medium risk findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings</h1>\n<h2 id=\"m-01-unhandled-return-value-of-transferfrom-in-timelockerc20-could-lead-to-fund-loss-for-recipients\" style=\"position:relative;\"><a href=\"#m-01-unhandled-return-value-of-transferfrom-in-timelockerc20-could-lead-to-fund-loss-for-recipients\" aria-label=\"m 01 unhandled return value of transferfrom in timelockerc20 could lead to fund loss for recipients permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/39\">[M-01] Unhandled return value of <code>transferFrom</code> in <code>timeLockERC20()</code> could lead to fund loss for recipients</a></h2>\n<p><em>Submitted by 0xRajeev, also found by Sherlock, pauliax, shw, and JMukesh</em></p>\n<p>ERC20 implementations are not always consistent. Some implementations of <code>transfer</code> and <code>transferFrom</code> could return ‘false’ on failure instead of reverting. It is safer to wrap such calls into <code>require()</code> statements or use safe wrapper functions implementing return value/data checks to handle these failures. For reference, see similar Medium-severity finding from <a href=\"https://consensys.net/diligence/audits/2020/09/aave-protocol-v2/#unhandled-return-values-of-transfer-and-transferfrom\">Consensys Diligence Audit of Aave Protocol V2</a>.</p>\n<p>While the contract uses Uniswap’s <code>TransferHelper</code> library function <code>safeTransfer</code> in other places for ERC20 tokens, or OpenZeppelin’s <code>saferTransferFrom</code> for ERC721 tokens (both of which call the token’s <code>transfer</code>/<code>transferFrom</code> functions and check return value for success and return data), it misses using <code>TransferHelper.safeTransferFrom</code> in this one case on L610 in <code>timeLockERC20()</code> when tokens are transferred from owner to the vault and instead directly uses the token’s <code>transferFrom()</code> call without checking for its return value.</p>\n<p>The impact can be that for an arbitrary ERC20 token, this <code>transferFrom()</code> call may return failure but the vault logic misses that, assumes it was successfully transferred into the vault and updates the <code>timelockERC20Balances</code> accounting accordingly. The <code>timeUnlockERC20()</code>, <code>transferERC20()</code> or <code>delegatedTransferERC20()</code> calls for that token will fail because the vault contract balance would have less tokens than accounted for in <code>timelockERC20Balances</code> because of the previously failed (but ignored) <code>transferFrom()</code> call.</p>\n<ol>\n<li>Let’s say Alice owes Bob 100 USD after a week, for which they agree that Alice will pay in 100 tokens of USD stablecoin tokenA.</li>\n<li>Alice, the vault owner, calls <code>timeLockERC20()</code> for recipient=Bob, token=tokenA, amount=100 and expiry=1-week-from-then (corresponding Unix timestamp) but tokenA’s implementation does not revert on failure but instead returns true/false. If the <code>transferFrom</code> failed, say because Alice did not have those 100 tokenAs, the return value is ignored on L610 in <code>timeLockERC20()</code> and vault logic considers that it indeed has 100 tokenAs locked for Bob.</li>\n<li>Bob looks at the <code>TimeLockERC20</code> event emitted in the successful <code>timeLockERC20()</code> transaction from Alice and assumes 100 tokenAs are indeed locked by Alice in the vault for him which can be withdrawn after expiry.</li>\n<li>After timelock expiry, Bob tries to transfer the 100 tokenAs Alice locked in the vault for him. The <code>TransferHelper</code>.<code>safeTransfer()</code> call on L637 in <code>timeUnlockERC20()</code> fails because the vault has 0 tokenAs because they were never successfully transferred in Step 2.</li>\n<li>Bob could thus be tricked into thinking that 100 tokenAs are locked in the vault for him by Alice but they never were. This leads to loss of funds for Bob.</li>\n</ol>\n<p>Recommend replacing use of</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>with</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">TransferHelper</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>This will revert on transfer failure for e.g. if <code>msg.sender</code> does not have a token balance >= amount.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/39#issuecomment-862446159\">xyz-ctrl (Visor) acknowledged</a>:</strong></p>\n<blockquote>\n<p>sponsor acknowledged\ndisagree with severity 0\nWhile we may include refactor in next version, this is all foreseen behavior and is component of many stable ethereum project.\nThe onus here is on client</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/39#issuecomment-873477796\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m going to make it medium as the risk is there but it could be mitigated by UI and tokens that are used.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/39#issuecomment-889172980\">ztcrypto (Visor) patched</a>:</strong></p>\n<blockquote>\n<p>fixed patch <a href=\"https://github.com/VisorFinance/visor-core/commit/71797204108fee8375bfb99a435c0e379bbcbd84#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"m-02-transfererc721-doesnt-clean-timelockerc721s\" style=\"position:relative;\"><a href=\"#m-02-transfererc721-doesnt-clean-timelockerc721s\" aria-label=\"m 02 transfererc721 doesnt clean timelockerc721s permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/19\">[M-02] <code>transferERC721</code> doesn’t clean <code>timelockERC721s</code></a></h2>\n<p><em>Submitted by gpersoon, also found by shw</em></p>\n<p>The function <code>transferERC721</code> works similar to the functions <code>timeUnlockERC721</code> with timelocked NFT’s.\nHowever <code>timeUnlockERC721</code> cleans <code>timelockERC721s</code> (delete <code>timelockERC721s[key]</code>;), while <code>transferERC721</code> doesn’t clean <code>timelockERC721s</code></p>\n<p>This could mean that timelock keys could be used later on (when the NFT would have been transferred to the contract on a later moment in time). Also, the administration doesn’t correspond to the available NFT’s. Additionally doing a delete gives backs some gas (at least for now).</p>\n<p>See <a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/19\">Issue #19</a> for code referenced in proof of concept</p>\n<p>Recommend checking if the <code>timelockERC721s</code> mapping should also be cleaned from <code>transferERC721</code>, if so adapt the code accordingly.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/19#issuecomment-862433933\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/19#issuecomment-889177823\">ztcrypto (Visor) patched</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/cc22d6e450e16aaa9eb3af1ee4d9e6ac8afe43da#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"m-03-timelockerc721keys-could-exceed-the-block-size-limit\" style=\"position:relative;\"><a href=\"#m-03-timelockerc721keys-could-exceed-the-block-size-limit\" aria-label=\"m 03 timelockerc721keys could exceed the block size limit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/65\">[M-03] <code>timelockERC721Keys</code> could exceed the block size limit</a></h2>\n<p><em>Submitted by Sherlock, also found by shw</em></p>\n<p>On line 504 of <code>Visor.sol</code>, looping through the <code>timelockERC721Keys</code> could exceed the block size limit</p>\n<p>Recommend transfer by index instead of token ID</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/65#issuecomment-862604018\">xyz-ctrl (Visor) acknowledged</a>:</strong></p>\n<blockquote>\n<p>sponsor acknowledged\nWe will be significantly refactoring experimental nft functionality in our next version before exposing to users of platform.\nIn this refactor we will cap size of nft collection</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/65#issuecomment-873558427\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m going to bump it to medium severity because this may happen if project is very successful</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/65#issuecomment-889198875\">ztcrypto (Visor) patched</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n<p>By using EnumerableSets</p>\n</blockquote>\n<h1 id=\"low-risk-findings\" style=\"position:relative;\"><a href=\"#low-risk-findings\" aria-label=\"low risk findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings</h1>\n<h2 id=\"l-01-sandwich-approvetransfererc20\" style=\"position:relative;\"><a href=\"#l-01-sandwich-approvetransfererc20\" aria-label=\"l 01 sandwich approvetransfererc20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/10\">[L-01] sandwich <code>approveTransferERC20</code></a></h2>\n<p><em>Submitted by pauliax, also found by 0xRajeev, and shw</em></p>\n<p>Function <code>approveTransferERC20</code> is vulnerable to the sandwich attack. Similar to the ERC20 approve issue described <a href=\"https://blog.smartdec.net/erc20-approve-issue-in-simple-words-a41aaf47bca6\">here</a>. A malicious delegate can scout for a <code>approveTransferERC20</code> change and sandwich that (<code>delegatedTransferERC20</code> amount A, <code>approveTransferERC20</code> amount A->B, <code>delegatedTransferERC20</code> amount B). It is more of a theoretical issue and mostly depends on the honesty of the delegators. If we can assume that delegators are trustable actors, then this is very unlikely to happen.</p>\n<p>Possible mitigation could be to replace <code>approveTransferERC20</code> with increasing/decreasing functions.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/10#issuecomment-862439285\">xyz-ctrl (Visor) acknowledged</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/10#issuecomment-889209630\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>this is skiped for now</p>\n</blockquote>\n<h2 id=\"l-02-wrong-timelockerc20-event-emitted\" style=\"position:relative;\"><a href=\"#l-02-wrong-timelockerc20-event-emitted\" aria-label=\"l 02 wrong timelockerc20 event emitted permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/45\">[L-02] Wrong <code>TimeLockERC20</code> event emitted</a></h2>\n<p><em>Submitted by cmichel, also found by 0xRajeev, pauliax</em></p>\n<p>The <code>Visor.timeLockERC721</code> function emits the <code>TimeLockERC20</code> event but should emit <code>TimeLockERC721</code> instead.</p>\n<p>It allows tricking the backend into registering ERC20 token transfers that never happened which could lead to serious issues when something like an accounting app uses this data.</p>\n<p>Recommend emitting the correct event.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/45#issuecomment-857003014\">xyz-ctrl (Visor) confirmed but disputed severity</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/45#issuecomment-873475888\">ghoul-sol (Judge) comment</a>:</strong></p>\n<blockquote>\n<p>Agree with sponsor. Even though it’s obviously wrong event, there is no obvious high security risk here.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/45#issuecomment-889191821\">ztcrypto (Visor) patched</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/cc22d6e450e16aaa9eb3af1ee4d9e6ac8afe43da#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"l-03-timelock-keys-are-never-removed-after-unlocks\" style=\"position:relative;\"><a href=\"#l-03-timelock-keys-are-never-removed-after-unlocks\" aria-label=\"l 03 timelock keys are never removed after unlocks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/37\">[L-03] Timelock keys are never removed after unlocks</a></h2>\n<p><em>Submitted by 0xRajeev, also found by shw</em></p>\n<p><code>timelockERC20Keys</code> and <code>timelockERC721Keys</code> are used to keep track of number of timelocks for ERC20 and ERC721 tokens. While <code>timelockERC20()</code> and <code>timelockERC721()</code> functions update these data structures to add the new timelocks, the corresponding unlock functions do not remove the expired timelocks.</p>\n<p>This results in their getter functions <code>getTimeLockCount()</code> and <code>getTimeLockERC721Count()</code> returning the number of all timelocks ever held instead of the expected number of timelocks that are currently active.</p>\n<p>Let’s say 5 timelocks are created for a specific ERC20 token of which 3 have been unlocked after expiry. The getter function <code>getTimeLockCount()</code> incorrectly reports 5 instead of 2.</p>\n<p>Recommend removing unlocked keys from <code>timelockERC20Keys</code> and <code>timelockERC721Keys</code> in <code>timeUnlockERC20()</code> and <code>timeUnlockERC721()</code> functions.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/37#issuecomment-862613150\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/37#issuecomment-889189232\">ztcrypto patched</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"l-04-the-function-onerc721received-allows-writing-duplicates-in-the-array-nfts-another-functions-dealing-with-this-array-do-not-expect-duplicates-met\" style=\"position:relative;\"><a href=\"#l-04-the-function-onerc721received-allows-writing-duplicates-in-the-array-nfts-another-functions-dealing-with-this-array-do-not-expect-duplicates-met\" aria-label=\"l 04 the function onerc721received allows writing duplicates in the array nfts another functions dealing with this array do not expect duplicates met permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/67\">[L-04] The function <code>onERC721Received()</code> allows writing duplicates in the array “nfts”. Another functions dealing with this array do not expect duplicates met.</a></h2>\n<p><em>Submitted by Sherlock</em></p>\n<p>Duplicates can be written accidentally. <code>If_removeNft()</code> function is running, it will break when meeting the first match, not trying to remove other duplicates. Thus a caller should call removing a few times.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC721Received</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">operator</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">_addNft</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_addNft</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nftContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">nfts</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">Nft</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">tokenId:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">nftContract:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nftContract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span></code></pre>\n<p>Recommend that <code>In _addNft()</code> to check if an inputted nft is existing in the “nfts” array. Do not push inputted nft if already added.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/67#issuecomment-862594044\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/37#issuecomment-889189232\">ztcrypto (Visor) patched</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"l-05-delegatedtransfererc20-can-revert-when-called-by-owner\" style=\"position:relative;\"><a href=\"#l-05-delegatedtransfererc20-can-revert-when-called-by-owner\" aria-label=\"l 05 delegatedtransfererc20 can revert when called by owner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/21\">[L-05] <code>delegatedTransferERC20</code> can revert when called by owner</a></h2>\n<p><em>Submitted by gpersoon, also found by cmichel and pauliax</em></p>\n<p>If the function <code>delegatedTransferERC20</code> is called from the owner  (e.g. msg.sender == _getOwner ) then\n<code>erc20Approvals[keccak256(abi.encodePacked(msg.sender, token))]</code> doesn’t have to set, so it can have the value of 0.</p>\n<p>If you then subtract the amount, you will get an error and the code will revert:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">erc20Approvals</span><span class=\"mtk1\">[</span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">))] = </span><span class=\"mtk12\">erc20Approvals</span><span class=\"mtk1\">[</span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">))].</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>A workaround would be to call <code>approveTransferERC20</code> also for the owner.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">delegatedTransferERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">,</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">_getOwner</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">erc20Approvals</span><span class=\"mtk1\">[</span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">))] &gt;= </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;Account not approved to transfer amount&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// check for sufficient balance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) &gt;= (</span><span class=\"mtk11\">getBalanceLocked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">timelockERC20Balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">]),</span><span class=\"mtk8\">&quot;UniversalVault: insufficient balance&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">erc20Approvals</span><span class=\"mtk1\">[</span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">))] = </span><span class=\"mtk12\">erc20Approvals</span><span class=\"mtk1\">[</span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">))].</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// perform transfer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">TransferHelper</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend also adding <code>if(msg.sender != _getOwner())</code> before</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk12\">erc20Approvals</span><span class=\"mtk1\">[</span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">))] = </span><span class=\"mtk12\">erc20Approvals</span><span class=\"mtk1\">[</span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">))].</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/21#issuecomment-862586741\">xyz-ctrl (Visor) acknowledged</a>:</strong></p>\n<blockquote>\n<p>dispute severity 0\nThe owner does not need to call this function to transferERC20. These does not occur in our platforms context.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/21#issuecomment-873521937\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>If owner doesn’t call this function it should be refactored. I’m going to stick with warden on this one because code explicitly suggests it’s going to be used by owner.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/21#issuecomment-889179986\">ztcrypto (Visor) patched</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"l-06-locking-the-same-funds-twice-in-lock-on-line-269-of-visorsol\" style=\"position:relative;\"><a href=\"#l-06-locking-the-same-funds-twice-in-lock-on-line-269-of-visorsol\" aria-label=\"l 06 locking the same funds twice in lock on line 269 of visorsol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/61\">[L-06] Locking the same funds twice in <code>lock()</code> on line 269 of <code>Visor.sol</code></a></h2>\n<p><em>Submitted by Sherlock</em></p>\n<p>Two different addresses (Alice and Bob) could get credit for locking up the same funds because a user is able to lock without depositing.</p>\n<p>Recommend implementing additional checks to force users to have deposited before they are able to lock tokens</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/61#issuecomment-856950126\">xyz-ctrl (Visor) disputed</a>:</strong></p>\n<blockquote>\n<p>disagree with severity 0\nThese locks are meant to be operated by 3rd party contract and the locks are only as meaningful as this 3rd party contract context allows them to be. The unit test is well put together but exhibits expected behavior</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/61#issuecomment-873530236\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>In context with 3rd contract this is a non-critical issue but I’ll keep low severity because this is extremely confusing and not well documented</p>\n</blockquote>\n<h2 id=\"l-07-deflationary-tokens-are-not-considered-in-time-locked-erc20-functions\" style=\"position:relative;\"><a href=\"#l-07-deflationary-tokens-are-not-considered-in-time-locked-erc20-functions\" aria-label=\"l 07 deflationary tokens are not considered in time locked erc20 functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/78\">[L-07] Deflationary tokens are not considered in time-locked ERC20 functions</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The functions <code>timeLockERC20</code> and <code>timeUnlockERC20</code> do not consider deflationary tokens, which burn a percentage of the transferred amount during transfers. In that case, time-locked deflationary ERC20 tokens cannot be unlocked (by <code>timeUnlockERC20</code>) nor transferred out of the vault (by <code>transferERC20</code>), since the transferred amount exceeds the vault’s balance.</p>\n<p>Recommend that in function <code>timeLockERC20</code>, after the function <code>transferFrom</code>, the vault should get the actual received amount by <code>token.balanceOf(address(this)).sub(tokenAmountBeforeTransfer)</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/78#issuecomment-862426362\">xyz-ctrl (Visor) acknowledged</a>:</strong></p>\n<blockquote>\n<p>sponsor acknowledged\nTrue. We are not planning on serving rebasing tokens in this case</p>\n</blockquote>\n<h2 id=\"l-08-missing-condition-in-addtemplatebytes32-name-address-template-visorfactorysol\" style=\"position:relative;\"><a href=\"#l-08-missing-condition-in-addtemplatebytes32-name-address-template-visorfactorysol\" aria-label=\"l 08 missing condition in addtemplatebytes32 name address template visorfactorysol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/24\">[L-08] missing condition in <code>addTemplate(bytes32 name, address template)</code>, <code>visorFactory.sol</code></a></h2>\n<p><em>Submitted by JMukesh, also found by 0xRajeev</em></p>\n<p>In <code>require()</code> of function <code>addTemplate(bytes32 name, address template)</code>, we check if a given name has been allotted or not. But, it misses checking the second parameter of function that is template. Without checking template address, an unintended address can be set for given name.</p>\n<p>Recommend adding one more condition in <code>require()</code> for checking of template address.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/24#issuecomment-862436837\">xyz-ctrl (Visor) acknowledged</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/24#issuecomment-889199937\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>this address check is not critical for now which is only called by the owner</p>\n</blockquote>\n<h1 id=\"non-critical-findings\" style=\"position:relative;\"><a href=\"#non-critical-findings\" aria-label=\"non critical findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings</h1>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<h2 id=\"g-01-change-function-visibility-from-public-to-external\" style=\"position:relative;\"><a href=\"#g-01-change-function-visibility-from-public-to-external\" aria-label=\"g 01 change function visibility from public to external permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/27\">[G-01] Change function visibility from public to external</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>Functions <code>getTimeLockCount()</code>, <code>getTimeLockERC721Count()</code>, <code>timeLockERC721()</code>, <code>timeUnlockERC721()</code>, <code>timeLockERC20()</code> and <code>timeUnlockERC20()</code> are never called from within contracts but yet declared public. Their visibility can be made external to save gas.</p>\n<p>As described in <a href=\"https://mudit.blog/solidity-gas-optimization-tips/\">https://mudit.blog/solidity-gas-optimization-tips/</a>:</p>\n<blockquote>\n<p>“For all the public functions, the input parameters are copied to memory automatically, and it costs gas. If your function is only called externally, then you should explicitly mark it as external. External function’s parameters are not copied into memory but are read from <code>calldata</code> directly. This small optimization in your solidity code can save you a lot of gas when the function input parameters are huge.”</p>\n</blockquote>\n<p>Recommend changing function visibility from public to external.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/27#issuecomment-862599172\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/27#issuecomment-889183960\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"g-02-unused-state-variable-and-associated-setter-function\" style=\"position:relative;\"><a href=\"#g-02-unused-state-variable-and-associated-setter-function\" aria-label=\"g 02 unused state variable and associated setter function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/28\">[G-02] Unused state variable and associated setter function</a></h2>\n<p><em>Submitted by 0xRajeev, also found by gpersoon</em></p>\n<p>The uri state variable is never used anywhere but has an associated setter function <code>setURI()</code>. Removing the state variable and its associated setter function will save both storage slot and contract deployment cost because of reduced size.</p>\n<p>Recommend removing unused state variable and associated setter function, or adding missing code to use them.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/28#issuecomment-862435014\">xyz-ctrl (Visor) disputed</a>:</strong></p>\n<blockquote>\n<p>sponsor disputed\nthis is a feature</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/28#issuecomment-873469180\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m guessing that this is going to be used in the future or in some other creative way, however warden is right and without more context I don’t see why this is needed.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/28#issuecomment-889185477\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>path <a href=\"https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"g-03-use-a-temporary-variable-to-cache-repetitive-complex-calculation\" style=\"position:relative;\"><a href=\"#g-03-use-a-temporary-variable-to-cache-repetitive-complex-calculation\" aria-label=\"g 03 use a temporary variable to cache repetitive complex calculation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/30\">[G-03] Use a temporary variable to cache repetitive complex calculation</a></h2>\n<p><em>Submitted by 0xRajeev, also found by gpersoon</em></p>\n<p>In function <code>delegatedTransferERC20()</code>, the complex calculation <code>keccak256(abi.encodePacked(msg.sender, token))</code> is performed three times in three different places in the function. This consumes a lot of unnecessary gas which can be saved by saving the calculation in a temporary bytes32 variable and using that instead.</p>\n<p>Recommend saving <code>keccak256(abi.encodePacked(msg.sender, token))</code> in a temporary bytes32 variable and use that in all places.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/30#issuecomment-862436179\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/30#issuecomment-889185895\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"g-04-use-a-temporary-variable-to-cache-repetitive-storage-reads\" style=\"position:relative;\"><a href=\"#g-04-use-a-temporary-variable-to-cache-repetitive-storage-reads\" aria-label=\"g 04 use a temporary variable to cache repetitive storage reads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/31\">[G-04] Use a temporary variable to cache repetitive storage reads</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>In function <code>transferERC721()</code>, the array value stored in a mapping <code>timelockERC721Keys[nftContract][i]</code> is read three times in three different places within the loop iteration. This consumes a lot of unnecessary gas because SLOADs are expensive. This can be prevented by saving the value <code>timelockERC721Keys[nftContract][i]</code> in a temporary bytes32 variable at the beginning of the iteration and using that instead.</p>\n<p>See <a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/31\">issue page</a> for proof of concept</p>\n<p>Recommend saving the value <code>timelockERC721Keys[nftContract][i]</code> in a temporary bytes32 variable at the beginning of the iteration and using that instead</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/31#issuecomment-862592530\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/31#issuecomment-889186687\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>path <a href=\"https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"g-05-breaking-out-of-loop-can-save-gas\" style=\"position:relative;\"><a href=\"#g-05-breaking-out-of-loop-can-save-gas\" aria-label=\"g 05 breaking out of loop can save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/32\">[G-05] Breaking out of loop can save gas</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>In function <code>transferERC721()</code>, the for loop iterates over all the time locked keys for the nftContract <code>timelockERC721Keys[nftContract].length</code> times. Given that there will only be a maximum of one <code>tokenID</code> that will match (because of unique NFT tokenIDs), if any, we can break from iterating the rest of the loop after a match on L505 and the checks within the if body. This will prevent iterating the rest of the loop and trying to match the if condition on L505 after a match has already happened.</p>\n<p>Recommend adding a break statement after L510 within the if body.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/32#issuecomment-862599074\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/32#issuecomment-889186914\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>path <a href=\"https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"g-06-gas-optimizations-by-using-external-over-public-\" style=\"position:relative;\"><a href=\"#g-06-gas-optimizations-by-using-external-over-public-\" aria-label=\"g 06 gas optimizations by using external over public  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/51\">[G-06] Gas optimizations by using external over public </a></h2>\n<p><em>Submitted by a</em>delamo_</p>\n<p>Using public over external has an impact on execution cost.</p>\n<p>If we run the following methods on Remix, we can see the difference</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//  transaction cost\t21448 gas</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//  execution cost\t176 gas</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tt</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//  transaction cost\t21558 gas</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//  execution cost\t286 gas</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tt_public</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>See <a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/51\">issue page</a> for list of methods currently using public that should be declared external.</p>\n<p>Recommend just changing from public to external if possible.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/51#issuecomment-862599094\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/51#issuecomment-889193479\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>duplicate of <a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/27\">#27</a> and fixed</p>\n</blockquote>\n<h2 id=\"g-07-gas-optimization-storage-nfts\" style=\"position:relative;\"><a href=\"#g-07-gas-optimization-storage-nfts\" aria-label=\"g 07 gas optimization storage nfts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/52\">[G-07] Gas optimization storage NFTs</a></h2>\n<p><em>Submitted by a</em>delamo_</p>\n<p>In <code>Visor.sol</code>, NFTs are being stored using an array <code>Nft[] public nfts;</code></p>\n<p>This seems an optimal structure, but when needing to remove an NFT or look for an NFT by contract and id,\nwe need to do <code>O(n)</code> iterations.</p>\n<p>See <a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/52\">issue page</a> for referenced code.</p>\n<p>Checking the function <code>getNftById</code>, seems like a lookup by id (mapping(uint=> NFT)) should be fine.\nIn case we need more, we could do mapping(uint => mapping(address => NFT)), but doesn’t seems necessary.</p>\n<p>Recommend providing direct links to all referenced code in GitHub. Add screenshots, logs, or any other relevant proof that illustrates the concept.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/52#issuecomment-862610664\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/52#issuecomment-889194730\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"g-08-gas-optimizations---storage-over-memory\" style=\"position:relative;\"><a href=\"#g-08-gas-optimizations---storage-over-memory\" aria-label=\"g 08 gas optimizations   storage over memory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/53\">[G-08] Gas optimizations - storage over memory</a></h2>\n<p><em>Submitted by a</em>delamo_</p>\n<p>In <code>Visor.sol</code>, the functions are using memory keyword, but using storage would reduce the gas cost.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_removeNft</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nftContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">len</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">nfts</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">len</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Nft</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nftInfo</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">nfts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">nftContract</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">nftInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">nftContract</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">nftInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenId</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">i</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">len</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">nfts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">nfts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">len</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">nfts</span><span class=\"mtk1\">.</span><span class=\"mtk11\">pop</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">RemoveNftToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/53#issuecomment-862599131\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/53#issuecomment-889195145\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"g-09-gas-optimizations---calculation-getbalancelocked\" style=\"position:relative;\"><a href=\"#g-09-gas-optimizations---calculation-getbalancelocked\" aria-label=\"g 09 gas optimizations   calculation getbalancelocked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/55\">[G-09] Gas optimizations - calculation <code>getBalanceLocked</code></a></h2>\n<p><em>Submitted by a</em>delamo_</p>\n<p>In <code>Visor.sol</code>, the function <code>getBalanceLocked</code> returns the amount locked.\nDoing this method will cause O(n) to return the highest locked value.</p>\n<p>But this method is only being used to verify that there is an X amount of tokens locked. (See <a href=\"https://github.com/code-423n4/reports/blob/visor/visorfinance/2021-05-visorfinance-DRAFT.md\">issue page</a> for referenced code)</p>\n<p>Recommend that instead of doing O(n), we could just exit when we found that balance >= amount requested. Something like:</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/55#issuecomment-862599204\">xyz-ctrl (Visor) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/55#issuecomment-889195783\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"g-10-missing-events\" style=\"position:relative;\"><a href=\"#g-10-missing-events\" aria-label=\"g 10 missing events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/44\">[G-10] Missing events</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The following events are not used:</p>\n<ul>\n<li><code>IInstanceRegistry.InstanceRemoved</code></li>\n</ul>\n<p>Unused code can hint at programming or architectural errors.  Recommend using it or removing it.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/44#issuecomment-862607014\">xyz-ctrl (Visor) acknowledged but disputed severity</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/44#issuecomment-873480513\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with sponsor, it doesn’t present a security issue it’s a non-critical issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/44#issuecomment-889191547\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/cc22d6e450e16aaa9eb3af1ee4d9e6ac8afe43da#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"g-11-getnftbyid-is-querying-against-the-index-not-id\" style=\"position:relative;\"><a href=\"#g-11-getnftbyid-is-querying-against-the-index-not-id\" aria-label=\"g 11 getnftbyid is querying against the index not id permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/8\">[G-11] <code>getNftById</code> is querying against the index not id</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p><code>getNftById</code> is actually ‘get NFT by index’ as it queries the element from the array by index, not by <code>tokenId</code>. The index may not always equal id as<code>_addNft</code> does not automatically assign index incrementally but rather use a parameter’s value. Same with <code>getNftIdByTokenIdAndAddr</code>, it returns index, not token id.</p>\n<p>Recommend either renaming functions to distinguish between id and index or refactoring the function to suit its name.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/8#issuecomment-862439485\">xyz-ctrl (Visor) acknowledged</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/8#issuecomment-873525818\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>This is very similar to #26 but I’ll keep it as sponsor finds it a valuable suggestion</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/8#issuecomment-889174169\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>fixed patch <a href=\"https://github.com/VisorFinance/visor-core/commit/71797204108fee8375bfb99a435c0e379bbcbd84#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"g-12-introduce-a-max-lock-time-limit\" style=\"position:relative;\"><a href=\"#g-12-introduce-a-max-lock-time-limit\" aria-label=\"g 12 introduce a max lock time limit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/14\">[G-12] introduce a max lock time limit</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p>I suggest introducing a max lock time limit, so it won’t be possible to accidentally lock tokens forever. As of right now there is no limit on when the timelock expires, so theoretically it is possible to set it to hundreds of years which I think in practice wouldn’t make sense.</p>\n<p>Even though this is more of a theoretical issue, I recommend introducing a reasonable upper limit for the timelock period.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/14#issuecomment-862437600\">xyz-ctrl (Visor) acknowledged</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/14#issuecomment-889208429\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>this is not critical for now by adding additional check</p>\n</blockquote>\n<h2 id=\"g-13-internal-getbalancelocked-call-can-exceed-block-size-limit\" style=\"position:relative;\"><a href=\"#g-13-internal-getbalancelocked-call-can-exceed-block-size-limit\" aria-label=\"g 13 internal getbalancelocked call can exceed block size limit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/63\">[G-13] Internal <code>GetBalanceLocked</code> call can exceed block size limit</a></h2>\n<p><em>Submitted by Sherlock</em></p>\n<p>On line 202 it loops over all the Lock sets. Transaction can run out of gas if this is an extreme size. Precautions have already been taken by restricting adding entries to this array.</p>\n<p>Recommend keeping an internal accounting of the <code>balanceLocked</code>, updating on every lock call.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/63#issuecomment-862604996\">xyz-ctrl (Visor) acknowledged</a>:</strong></p>\n<blockquote>\n<p>In practice of our platform context this will never grow large</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/63#issuecomment-889196777\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559\">link</a></p>\n</blockquote>\n<h2 id=\"g-14-events-are-not-indexed\" style=\"position:relative;\"><a href=\"#g-14-events-are-not-indexed\" aria-label=\"g 14 events are not indexed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/70\">[G-14] Events are not indexed</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The emitted events are not indexed, making off-chain scripts such as front-ends of dApps difficult to filter the events efficiently.</p>\n<p>Recommend adding the <code>indexed</code> keyword in each event, e.g., <code>event AddNftToken(address indexed nftContract, uint256 tokenId);</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/70#issuecomment-862596780\">xyz-ctrl (Visor) acknowledged</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/70#issuecomment-873559034\">ghoul-sol (Judge) changed severity</a>:</strong></p>\n<blockquote>\n<p>While true, it’s non-critical issue</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/70#issuecomment-889211422\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/37ca8c5e53ebba62a53ee78edb5415705d79cdc7\">link</a></p>\n</blockquote>\n<h2 id=\"g-15-unused-imported-interface-ivisorservice\" style=\"position:relative;\"><a href=\"#g-15-unused-imported-interface-ivisorservice\" aria-label=\"g 15 unused imported interface ivisorservice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/71\">[G-15] Unused imported interface <code>IVisorService</code></a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The imported interface <code>IVisorService</code> in the contract <code>Visor</code> is not used.</p>\n<p>Recommend considering removing this import.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/71#issuecomment-862608186\">xyz-ctrl (Visor) acknowledged</a>:</strong></p>\n<blockquote>\n<p>sponsor acknowledged, dispute severity 0</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/71#issuecomment-873559177\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agreed, non-critical issue</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-05-visorfinance-findings/issues/71#issuecomment-889211231\">ztcrypto (Visor) commented</a>:</strong></p>\n<blockquote>\n<p>patch <a href=\"https://github.com/VisorFinance/visor-core/commit/37ca8c5e53ebba62a53ee78edb5415705d79cdc7\">link</a></p>\n</blockquote>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings\">High Risk Findings</a></p>\n<ul>\n<li><a href=\"#h-01-a-previously-timelocked-nft-token-becomes-permanently-stuck-in-vault-if-its-ever-moved-back-into-the-vault\">[H-01] A previously timelocked NFT token becomes permanently stuck in vault if it’s ever moved back into the vault</a></li>\n<li><a href=\"#h-02-nft-transfer-approvals-are-not-removed-and-cannot-be-revoked-thus-leading-to-loss-of-nft-tokens\">[H-02] NFT transfer approvals are not removed and cannot be revoked thus leading to loss of NFT tokens</a></li>\n<li><a href=\"#h-03-approval-for-nft-transfers-is-not-removed-after-transfer\">[H-03] Approval for NFT transfers is not removed after transfer</a></li>\n<li><a href=\"#h-04-unbounded-loop-in-_removenft-could-lead-to-a-griefingdos-attack\">[H-04] Unbounded loop in <code>_removeNft</code> could lead to a griefing/DOS attack</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings\">Medium Risk Findings</a></p>\n<ul>\n<li><a href=\"#m-01-unhandled-return-value-of-transferfrom-in-timelockerc20-could-lead-to-fund-loss-for-recipients\">[M-01] Unhandled return value of <code>transferFrom</code> in <code>timeLockERC20()</code> could lead to fund loss for recipients</a></li>\n<li><a href=\"#m-02-transfererc721-doesnt-clean-timelockerc721s\">[M-02] <code>transferERC721</code> doesn’t clean <code>timelockERC721s</code></a></li>\n<li><a href=\"#m-03-timelockerc721keys-could-exceed-the-block-size-limit\">[M-03] <code>timelockERC721Keys</code> could exceed the block size limit</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-findings\">Low Risk Findings</a></p>\n<ul>\n<li><a href=\"#l-01-sandwich-approvetransfererc20\">[L-01] sandwich <code>approveTransferERC20</code></a></li>\n<li><a href=\"#l-02-wrong-timelockerc20-event-emitted\">[L-02] Wrong <code>TimeLockERC20</code> event emitted</a></li>\n<li><a href=\"#l-03-timelock-keys-are-never-removed-after-unlocks\">[L-03] Timelock keys are never removed after unlocks</a></li>\n<li><a href=\"#l-04-the-function-onerc721received-allows-writing-duplicates-in-the-array-nfts-another-functions-dealing-with-this-array-do-not-expect-duplicates-met\">[L-04] The function <code>onERC721Received()</code> allows writing duplicates in the array “nfts”. Another functions dealing with this array do not expect duplicates met.</a></li>\n<li><a href=\"#l-05-delegatedtransfererc20-can-revert-when-called-by-owner\">[L-05] <code>delegatedTransferERC20</code> can revert when called by owner</a></li>\n<li><a href=\"#l-06-locking-the-same-funds-twice-in-lock-on-line-269-of-visorsol\">[L-06] Locking the same funds twice in <code>lock()</code> on line 269 of <code>Visor.sol</code></a></li>\n<li><a href=\"#l-07-deflationary-tokens-are-not-considered-in-time-locked-erc20-functions\">[L-07] Deflationary tokens are not considered in time-locked ERC20 functions</a></li>\n<li><a href=\"#l-08-missing-condition-in-addtemplatebytes32-name-address-template-visorfactorysol\">[L-08] missing condition in <code>addTemplate(bytes32 name, address template)</code>, <code>visorFactory.sol</code></a></li>\n</ul>\n</li>\n<li><a href=\"#non-critical-findings\">Non-Critical Findings</a></li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#g-01-change-function-visibility-from-public-to-external\">[G-01] Change function visibility from public to external</a></li>\n<li><a href=\"#g-02-unused-state-variable-and-associated-setter-function\">[G-02] Unused state variable and associated setter function</a></li>\n<li><a href=\"#g-03-use-a-temporary-variable-to-cache-repetitive-complex-calculation\">[G-03] Use a temporary variable to cache repetitive complex calculation</a></li>\n<li><a href=\"#g-04-use-a-temporary-variable-to-cache-repetitive-storage-reads\">[G-04] Use a temporary variable to cache repetitive storage reads</a></li>\n<li><a href=\"#g-05-breaking-out-of-loop-can-save-gas\">[G-05] Breaking out of loop can save gas</a></li>\n<li><a href=\"#g-06-gas-optimizations-by-using-external-over-public-\">[G-06] Gas optimizations by using external over public </a></li>\n<li><a href=\"#g-07-gas-optimization-storage-nfts\">[G-07] Gas optimization storage NFTs</a></li>\n<li><a href=\"#g-08-gas-optimizations---storage-over-memory\">[G-08] Gas optimizations - storage over memory</a></li>\n<li><a href=\"#g-09-gas-optimizations---calculation-getbalancelocked\">[G-09] Gas optimizations - calculation <code>getBalanceLocked</code></a></li>\n<li><a href=\"#g-10-missing-events\">[G-10] Missing events</a></li>\n<li><a href=\"#g-11-getnftbyid-is-querying-against-the-index-not-id\">[G-11] <code>getNftById</code> is querying against the index not id</a></li>\n<li><a href=\"#g-12-introduce-a-max-lock-time-limit\">[G-12] introduce a max lock time limit</a></li>\n<li><a href=\"#g-13-internal-getbalancelocked-call-can-exceed-block-size-limit\">[G-13] Internal <code>GetBalanceLocked</code> call can exceed block size limit</a></li>\n<li><a href=\"#g-14-events-are-not-indexed\">[G-14] Events are not indexed</a></li>\n<li><a href=\"#g-15-unused-imported-interface-ivisorservice\">[G-15] Unused imported interface <code>IVisorService</code></a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis o the Visor Finance smart contract system written in Solidity. The code contest took place between May 12 — May 19, 2021.\n\n## Wardens\n\n12 Wardens contributed reports to the Visor Finance code contest:\n\n- [0xRajeev](https://twitter.com/0xRajeev)\n- [shw](https://github.com/x9453)\n- [pauliax](https://twitter.com/SolidityDev)\n- [gpersoon](https://twitter.com/gpersoon)\n- [Sherlock](https://twitter.com/sherlock_defi) (team of 4)\n- [cmichel](https://twitter.com/cmichelio)\n- [toastedsteaksandwich](https://twitter.com/AshiqAmien)\n- [Jmukesh](https://twitter.com/MukeshJ_eth)\n- [a_delamo](https://twitter.com/a_delamo)\n\nThis contest was judged by [ghoulsol](https://twitter.com/Ghoulsol).\n\nFinal report assembled by [ninek](https://twitter.com/_ninek_) and [moneylegobatman](https://twitter.com/money_lego).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 30 unique vulnerabilities. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 4 received a risk rating in the category of HIGH severity, 3 received a risk rating in the category of MEDIUM severity, and 8 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 15 non-critical recommendations.\n\n# Scope\n\nThe code under review can be found within the [C4 Visor Finance code contest repository](https://github.com/code-423n4/2021-05-visorfinance) and is comprised of 24 smart contracts written in the Solidity programming language.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings\n\n## [[H-01] A previously timelocked NFT token becomes permanently stuck in vault if it’s ever moved back into the vault](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/35)\n_Submitted by 0xRajeev, also found by pauliax_\n\nLet’s consider a scenario where a particular NFT token was timelocked for a certain duration by the owner using `timeLockERC721()` with a delegate as the recipient and then transferred out of the vault by the delegate via `transferERC721()` but without unlocking it explicitly using `timeUnlockERC721()`.\n\nThis is possible because `transferERC721()` does all the timelock checks on `expires/block.timestamp` and `recipient/msg.sender` as is done in `timeUnlockERC721()`. But it misses deleting `timelockERC721s[key]` for that NFT `tokenID` (as done in L572 of `timeUnlockERC721()`).\n\nBecause of this missing deletion, if that same NFT is ever put back into the vault later but this time without a timelock, the vault logic still thinks it is a timelocked NFT with the older/stale recipient from earlier because of the missing deletion. So now the owner who makes the `transferERC721()` call will not match the older/stale recipient address and will fail the check on L510 (unless they control that stale recipient address from the earlier timelock).\n\nThe impact is that, without access/control to the earlier timelock recipient, this NFT token is now locked in the vault forever.\n\n1. Alice time locks a particular NFT token with delegate Eve as recipient using `timeLockERC721()`\n2. Eve transfers NFT to Bob using `transferERC721()` but without calling `timeUnlockERC721()` first\n3. Alice buys the same NFT back from Bob (e.g. because it is now considered rare and more valuable) and again puts it back in her vault but this time without locking/delegating it to any recipient i.e. intending to control it herself.\n4. Because this NFT's timelock data and delegate approval for Eve is never removed after Step 2, the NFT is still treated as timelocked in the vault with previous delegate Eve as the recipient (because of stale data in `timelockERC721s` and `nftApprovals`)\n5. Alice now cannot withdraw her own NFT without Eve’s help because the check on L510 will only allow Eve to transfer this NFT out of the vault.\n6. If Eve is no longer trusted/accessible then the NFT is locked in the vault forever.\n\nRecommend adding `delete timelockERC721s [timelockERC721Keys[nftContract][i]];` after L510.\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/35#issuecomment-857003620):**\n\n**[ztcrypto (Visor) patched](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/35#issuecomment-889188488):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/71797204108fee8375bfb99a435c0e379bbcbd84#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[H-02] NFT transfer approvals are not removed and cannot be revoked thus leading to loss of NFT tokens](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/34)\n_Submitted by 0xRajeev, also found by shw_\n\nNFT transfer approvals that are set to true in `approveTransferERC721()` are never set to false and there is no way to remove such an nft approval.\n\n**Impact 1**: The approval is not removed (set to false) after a transfer in `transferERC721()`. So if the NFT is ever moved back into the owner's vault again, then the previous/compromised delegate can again transfer it to any address of choice without requiring a new approval.\n\n**Impact 2**: If a delegate becomes compromised/untrustworthy after granting approval but before transfer then the owner will lose its NFT because there is no mechanism to revoke the approval that was granted earlier.\n\n[PoC-1](https://github.com/code-423n4/2021-05-visorfinance/blob/e0f15162a017130aa66910d46c70ee074b64dd40/contracts/contracts/visor/Visor.sol#L477-L487):\n* Alice grants Eve approval to transfer a particular NFT out of its vault using `approveTransferERC721()`\n* Eve, who has transfer rights to that NFT from Alice’s vault,  transfers that NFT to Bob using `transferERC721()`\n* Alice decides to buy back that NFT (e.g. because it is now considered rare and more valuable) from Bob and transfers it back to its vault\n* Eve, who continues to have transfer rights to that NFT from Alice’s vault, can steal that NFT and transfer to anyone\n\n[PoC-2](https://github.com/code-423n4/2021-05-visorfinance/blob/e0f15162a017130aa66910d46c70ee074b64dd40/contracts/contracts/visor/Visor.sol#L489-L522):\n* Alice grants Eve approval to transfer a particular NFT out of its vault using `approveTransferERC721()`\n* Alice learns that Eve’s keys are compromises or that Eve is malicious and wants to revoke the approval but there is no mechanism to do so\n* Eve (or whoever stole her credentials) has transfer rights to that NFT from Alice’s vault and can steal that NFT and transfer to anyone\n\nRecommend adding a boolean parameter to `approveTransferERC721()` and set the `nftApprovals`  to that parameter which can be true for giving approval and false for removing/revoking approval\nIf ```msg.sender != _getOwner()```, call `approveTransferERC721()` with the boolean false to remove approval before making a transfer in `transferERC721()` on L515.\n\n**[xyz-ctrl (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/34#issuecomment-862438325):**\n> duplicate\n> https://github.com/code-423n4/2021-05-visorfinance-findings/issues/35\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/34#issuecomment-873475636):**\n> #35 is about token being stuck in the vault. This issue is about not being able to revoke approval. Marking this as separate.\n\n**[ztcrypto (Visor) patched](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/34#issuecomment-889187960):**\n > patch [link](https://github.com/VisorFinance/visor-core/commit/71797204108fee8375bfb99a435c0e379bbcbd84#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[H-03] Approval for NFT transfers is not removed after transfer](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/48)\n_Submitted by cmichel, also found by gpersoon, and pauliax_\n\nThe `Visor.transferERC721` does not reset the approval for the NFT.\n\nAn approved delegatee can move the NFT out of the contract once.\nIt could be moved to a market and bought by someone else who then deposits it again to the same vault.\nThe first delegatee can steal the NFT and move it out of the contract a second time.\n\nRecommend resetting the approval on transfer.\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/48#issuecomment-856953219):**\n> We will be mitigating this issue for our next release and before these experimental features are introduced in platform.\n> PR pending\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/48#issuecomment-889192312):**\n> duplicate of above ones and fixed\n\n## [[H-04] Unbounded loop in `_removeNft` could lead to a griefing/DOS attack](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80)\n_Submitted by shw, also found by cmichel, gpersoon, pauliax, Sherlock, and toastedsteaksandwhich_\n\nGriefing/DOS attack is possible when a malicious NFT contract sends many NFTs to the vault, which could cause excessive gas consumed and even transactions reverted when other users are trying to unlock or transfer NFTs.\n\nThe function `_removeNft` uses an unbounded loop, which iterates the array nfts until a specific one is found. If the NFT to be removed is at the very end of the nfts array, this function could consume a large amount of gas.\nThe function `onERC721Received` is permission-less. The vault accepts any NFTs from any NFT contract and pushes the received NFT into the array nfts.\nA malicious user could write an NFT contract, which calls `onERC721Received` of the vault many times to make the array nfts grow to a large size. Besides, the malicious NFT contract reverts when anyone tries to transfer (e.g., `safeTransferFrom`) its NFT.\nThe vault then has no way to remove the transferred NFT from the malicious NFT contract. The two only functions to remove NFTs, `transferERC721` and `timeUnlockERC721`, fail since the malicious NFT contract reverts all `safeTransferFrom` calls.\nAs a result, benign users who unlock or transfer NFTs would suffer from large and unnecessary gas consumption. The consumed gas could even exceed the block gas limit and cause the transaction to fail every time.\n\nRecommend using a mapping (e.g., `mapping(address=>Nft[]) nfts`) to store the received NFTs into separate arrays according to `nftContract` instead of putting them into the same one. Or, add a method specifically for the owner to remove NFTs from the nfts array directly.\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80#issuecomment-856368771):**\n> sponsor confirmed\n> We are working to mitigate this issue in our next upgrade\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80#issuecomment-873481532):**\n>I’m making this high severity because it doesn’t need a malicious actor to happen. This can happen by simply being very successful\n\n**[xyz-ctrl (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80#issuecomment-856368771):**\n>  Agreed. We merged a pr with mitigations a few weeks ago here [VisorFinance/visor-core#2](https://github.com/VisorFinance/visor-core/pull/2)\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80#issuecomment-873524863):**\n> Duplicate of [#66](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/66)\n\n**[ztcrypto (Visor) patched](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/80#issuecomment-889198308):**\n> duplicated and patched\n> [link](https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n# Medium Risk Findings\n\n## [[M-01] Unhandled return value of `transferFrom` in `timeLockERC20()` could lead to fund loss for recipients](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/39)\n_Submitted by 0xRajeev, also found by Sherlock, pauliax, shw, and JMukesh_\n\nERC20 implementations are not always consistent. Some implementations of `transfer` and `transferFrom` could return ‘false’ on failure instead of reverting. It is safer to wrap such calls into `require()` statements or use safe wrapper functions implementing return value/data checks to handle these failures. For reference, see similar Medium-severity finding from [Consensys Diligence Audit of Aave Protocol V2](https://consensys.net/diligence/audits/2020/09/aave-protocol-v2/#unhandled-return-values-of-transfer-and-transferfrom).\n\nWhile the contract uses Uniswap’s `TransferHelper` library function `safeTransfer` in other places for ERC20 tokens, or OpenZeppelin’s `saferTransferFrom` for ERC721 tokens (both of which call the token’s `transfer`/`transferFrom` functions and check return value for success and return data), it misses using `TransferHelper.safeTransferFrom` in this one case on L610 in `timeLockERC20()` when tokens are transferred from owner to the vault and instead directly uses the token’s `transferFrom()` call without checking for its return value.\n\nThe impact can be that for an arbitrary ERC20 token, this `transferFrom()` call may return failure but the vault logic misses that, assumes it was successfully transferred into the vault and updates the `timelockERC20Balances` accounting accordingly. The `timeUnlockERC20()`, `transferERC20()` or `delegatedTransferERC20()` calls for that token will fail because the vault contract balance would have less tokens than accounted for in `timelockERC20Balances` because of the previously failed (but ignored) `transferFrom()` call.\n\n1. Let’s say Alice owes Bob 100 USD after a week, for which they agree that Alice will pay in 100 tokens of USD stablecoin tokenA.\n2. Alice, the vault owner, calls `timeLockERC20()` for recipient=Bob, token=tokenA, amount=100 and expiry=1-week-from-then (corresponding Unix timestamp) but tokenA’s implementation does not revert on failure but instead returns true/false. If the `transferFrom` failed, say because Alice did not have those 100 tokenAs, the return value is ignored on L610 in `timeLockERC20()` and vault logic considers that it indeed has 100 tokenAs locked for Bob.\n3. Bob looks at the `TimeLockERC20` event emitted in the successful `timeLockERC20()` transaction from Alice and assumes 100 tokenAs are indeed locked by Alice in the vault for him which can be withdrawn after expiry.\n4. After timelock expiry, Bob tries to transfer the 100 tokenAs Alice locked in the vault for him. The `TransferHelper`.`safeTransfer()` call on L637 in `timeUnlockERC20()` fails because the vault has 0 tokenAs because they were never successfully transferred in Step 2.\n5. Bob could thus be tricked into thinking that 100 tokenAs are locked in the vault for him by Alice but they never were. This leads to loss of funds for Bob.\n\nRecommend replacing use of\n```solidity\nIERC20(token).transferFrom(msg.sender, address(this), amount);\n```\nwith\n```solidity\nTransferHelper.safeTransferFrom(token, msg.sender, address(this), amount);\n```\nThis will revert on transfer failure for e.g. if `msg.sender` does not have a token balance >= amount.\n\n**[xyz-ctrl (Visor) acknowledged](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/39#issuecomment-862446159):**\n> sponsor acknowledged\n> disagree with severity 0\n> While we may include refactor in next version, this is all foreseen behavior and is component of many stable ethereum project.\n> The onus here is on client\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/39#issuecomment-873477796):**\n> I’m going to make it medium as the risk is there but it could be mitigated by UI and tokens that are used.\n\n**[ztcrypto (Visor) patched](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/39#issuecomment-889172980):**\n> fixed patch [link](https://github.com/VisorFinance/visor-core/commit/71797204108fee8375bfb99a435c0e379bbcbd84#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[M-02] `transferERC721` doesn't clean `timelockERC721s`](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/19)\n_Submitted by gpersoon, also found by shw_\n\nThe function `transferERC721` works similar to the functions `timeUnlockERC721` with timelocked NFT's.\nHowever `timeUnlockERC721` cleans `timelockERC721s` (delete `timelockERC721s[key]`;), while `transferERC721` doesn't clean `timelockERC721s`\n\nThis could mean that timelock keys could be used later on (when the NFT would have been transferred to the contract on a later moment in time). Also, the administration doesn't correspond to the available NFT's. Additionally doing a delete gives backs some gas (at least for now).\n\nSee [Issue #19](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/19) for code referenced in proof of concept\n\nRecommend checking if the `timelockERC721s` mapping should also be cleaned from `transferERC721`, if so adapt the code accordingly.\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/19#issuecomment-862433933):**\n\n**[ztcrypto (Visor) patched](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/19#issuecomment-889177823):**\n > patch [link](https://github.com/VisorFinance/visor-core/commit/cc22d6e450e16aaa9eb3af1ee4d9e6ac8afe43da#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[M-03] `timelockERC721Keys` could exceed the block size limit](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/65)\n_Submitted by Sherlock, also found by shw_\n\nOn line 504 of `Visor.sol`, looping through the `timelockERC721Keys` could exceed the block size limit\n\nRecommend transfer by index instead of token ID\n\n**[xyz-ctrl (Visor) acknowledged](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/65#issuecomment-862604018):**\n> sponsor acknowledged\n> We will be significantly refactoring experimental nft functionality in our next version before exposing to users of platform.\n> In this refactor we will cap size of nft collection\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/65#issuecomment-873558427):**\n> I’m going to bump it to medium severity because this may happen if project is very successful\n\n**[ztcrypto (Visor) patched](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/65#issuecomment-889198875):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n>\n> By using EnumerableSets\n\n# Low Risk Findings\n\n## [[L-01] sandwich `approveTransferERC20`](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/10)\n_Submitted by pauliax, also found by 0xRajeev, and shw_\n\nFunction `approveTransferERC20` is vulnerable to the sandwich attack. Similar to the ERC20 approve issue described [here](https://blog.smartdec.net/erc20-approve-issue-in-simple-words-a41aaf47bca6). A malicious delegate can scout for a `approveTransferERC20` change and sandwich that (`delegatedTransferERC20` amount A, `approveTransferERC20` amount A->B, `delegatedTransferERC20` amount B). It is more of a theoretical issue and mostly depends on the honesty of the delegators. If we can assume that delegators are trustable actors, then this is very unlikely to happen.\n\nPossible mitigation could be to replace `approveTransferERC20` with increasing/decreasing functions.\n\n**[xyz-ctrl (Visor) acknowledged](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/10#issuecomment-862439285):**\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/10#issuecomment-889209630):**\n > this is skiped for now\n\n## [[L-02] Wrong `TimeLockERC20` event emitted](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/45)\n_Submitted by cmichel, also found by 0xRajeev, pauliax_\n\nThe `Visor.timeLockERC721` function emits the `TimeLockERC20` event but should emit `TimeLockERC721` instead.\n\nIt allows tricking the backend into registering ERC20 token transfers that never happened which could lead to serious issues when something like an accounting app uses this data.\n\nRecommend emitting the correct event.\n\n**[xyz-ctrl (Visor) confirmed but disputed severity](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/45#issuecomment-857003014):**\n\n**[ghoul-sol (Judge) comment](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/45#issuecomment-873475888):**\n> Agree with sponsor. Even though it’s obviously wrong event, there is no obvious high security risk here.\n\n**[ztcrypto (Visor) patched](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/45#issuecomment-889191821):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/cc22d6e450e16aaa9eb3af1ee4d9e6ac8afe43da#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[L-03] Timelock keys are never removed after unlocks](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/37)\n_Submitted by 0xRajeev, also found by shw_\n\n`timelockERC20Keys` and `timelockERC721Keys` are used to keep track of number of timelocks for ERC20 and ERC721 tokens. While `timelockERC20()` and `timelockERC721()` functions update these data structures to add the new timelocks, the corresponding unlock functions do not remove the expired timelocks.\n\nThis results in their getter functions `getTimeLockCount()` and `getTimeLockERC721Count()` returning the number of all timelocks ever held instead of the expected number of timelocks that are currently active.\n\nLet’s say 5 timelocks are created for a specific ERC20 token of which 3 have been unlocked after expiry. The getter function `getTimeLockCount()` incorrectly reports 5 instead of 2.\n\nRecommend removing unlocked keys from `timelockERC20Keys` and `timelockERC721Keys` in `timeUnlockERC20()` and `timeUnlockERC721()` functions.\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/37#issuecomment-862613150):**\n\n**[ztcrypto patched](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/37#issuecomment-889189232):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[L-04] The function `onERC721Received()` allows writing duplicates in the array \"nfts\". Another functions dealing with this array do not expect duplicates met.](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/67)\n_Submitted by Sherlock_\n\nDuplicates can be written accidentally. `If_removeNft()` function is running, it will break when meeting the first match, not trying to remove other duplicates. Thus a caller should call removing a few times.\n\n```solidity\nfunction onERC721Received(address operator, address from, uint256 tokenId, bytes calldata) external override returns (bytes4) {\n      _addNft(msg.sender, tokenId);\n\nfunction _addNft(address nftContract, uint256 tokenId) internal {\n    nfts.push(\n    Nft({\n        tokenId: tokenId,\n        nftContract: nftContract\n    })\n    );\n```\n\nRecommend that `In _addNft()` to check if an inputted nft is existing in the \"nfts\" array. Do not push inputted nft if already added.\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/67#issuecomment-862594044):**\n\n**[ztcrypto (Visor) patched](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/37#issuecomment-889189232):**\n > patch [link](https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[L-05] `delegatedTransferERC20` can revert when called by owner](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/21)\n_Submitted by gpersoon, also found by cmichel and pauliax_\n\nIf the function `delegatedTransferERC20` is called from the owner  (e.g. msg.sender == _getOwner ) then\n```erc20Approvals[keccak256(abi.encodePacked(msg.sender, token))]``` doesn't have to set, so it can have the value of 0.\n\nIf you then subtract the amount, you will get an error and the code will revert:\n```solidity\nerc20Approvals[keccak256(abi.encodePacked(msg.sender, token))] = erc20Approvals[keccak256(abi.encodePacked(msg.sender, token))].sub(amount);\n```\n\nA workaround would be to call `approveTransferERC20` also for the owner.\n\n```solidity\nfunction delegatedTransferERC20(address token,address to,uint256 amount) external {\n    if(msg.sender != _getOwner()) {\n        require(erc20Approvals[keccak256(abi.encodePacked(msg.sender, token))] >= amount,\"Account not approved to transfer amount\");\n    }\n    // check for sufficient balance\n    require(IERC20(token).balanceOf(address(this)) >= (getBalanceLocked(token).add(amount)).add(timelockERC20Balances[token]),\"UniversalVault: insufficient balance\");\n\n    erc20Approvals[keccak256(abi.encodePacked(msg.sender, token))] = erc20Approvals[keccak256(abi.encodePacked(msg.sender, token))].sub(amount);\n\n    // perform transfer\n    TransferHelper.safeTransfer(token, to, amount);\n}\n```\n\nRecommend also adding `if(msg.sender != _getOwner())` before\n```solidity\n   erc20Approvals[keccak256(abi.encodePacked(msg.sender, token))] = erc20Approvals[keccak256(abi.encodePacked(msg.sender, token))].sub(amount);\n```\n\n**[xyz-ctrl (Visor) acknowledged](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/21#issuecomment-862586741):**\n> dispute severity 0\n> The owner does not need to call this function to transferERC20. These does not occur in our platforms context.\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/21#issuecomment-873521937):**\n> If owner doesn’t call this function it should be refactored. I’m going to stick with warden on this one because code explicitly suggests it’s going to be used by owner.\n\n**[ztcrypto (Visor) patched](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/21#issuecomment-889179986):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[L-06] Locking the same funds twice in `lock()` on line 269 of `Visor.sol`](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/61)\n_Submitted by Sherlock_\n\nTwo different addresses (Alice and Bob) could get credit for locking up the same funds because a user is able to lock without depositing.\n\nRecommend implementing additional checks to force users to have deposited before they are able to lock tokens\n\n**[xyz-ctrl (Visor) disputed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/61#issuecomment-856950126):**\n> disagree with severity 0\n> These locks are meant to be operated by 3rd party contract and the locks are only as meaningful as this 3rd party contract context allows them to be. The unit test is well put together but exhibits expected behavior\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/61#issuecomment-873530236):**\n> In context with 3rd contract this is a non-critical issue but I’ll keep low severity because this is extremely confusing and not well documented\n\n## [[L-07] Deflationary tokens are not considered in time-locked ERC20 functions](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/78)\n_Submitted by shw_\n\nThe functions `timeLockERC20` and `timeUnlockERC20` do not consider deflationary tokens, which burn a percentage of the transferred amount during transfers. In that case, time-locked deflationary ERC20 tokens cannot be unlocked (by `timeUnlockERC20`) nor transferred out of the vault (by `transferERC20`), since the transferred amount exceeds the vault's balance.\n\nRecommend that in function `timeLockERC20`, after the function `transferFrom`, the vault should get the actual received amount by `token.balanceOf(address(this)).sub(tokenAmountBeforeTransfer)`.\n\n**[xyz-ctrl (Visor) acknowledged](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/78#issuecomment-862426362):**\n> sponsor acknowledged\n> True. We are not planning on serving rebasing tokens in this case\n\n## [[L-08] missing condition in `addTemplate(bytes32 name, address template)`, `visorFactory.sol`](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/24)\n_Submitted by JMukesh, also found by 0xRajeev_\n\nIn `require()` of function `addTemplate(bytes32 name, address template)`, we check if a given name has been allotted or not. But, it misses checking the second parameter of function that is template. Without checking template address, an unintended address can be set for given name.\n\nRecommend adding one more condition in `require()` for checking of template address.\n\n**[xyz-ctrl (Visor) acknowledged](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/24#issuecomment-862436837):**\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/24#issuecomment-889199937):**\n> this address check is not critical for now which is only called by the owner\n\n# Non-Critical Findings\n\n# Gas Optimizations\n\n## [[G-01] Change function visibility from public to external](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/27)\n_Submitted by 0xRajeev_\n\nFunctions `getTimeLockCount()`, `getTimeLockERC721Count()`, `timeLockERC721()`, `timeUnlockERC721()`, `timeLockERC20()` and `timeUnlockERC20()` are never called from within contracts but yet declared public. Their visibility can be made external to save gas.\n\nAs described in https://mudit.blog/solidity-gas-optimization-tips/:\n> “For all the public functions, the input parameters are copied to memory automatically, and it costs gas. If your function is only called externally, then you should explicitly mark it as external. External function’s parameters are not copied into memory but are read from `calldata` directly. This small optimization in your solidity code can save you a lot of gas when the function input parameters are huge.”\n\nRecommend changing function visibility from public to external.\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/27#issuecomment-862599172):**\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/27#issuecomment-889183960):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[G-02] Unused state variable and associated setter function](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/28)\n_Submitted by 0xRajeev, also found by gpersoon_\n\nThe uri state variable is never used anywhere but has an associated setter function `setURI()`. Removing the state variable and its associated setter function will save both storage slot and contract deployment cost because of reduced size.\n\nRecommend removing unused state variable and associated setter function, or adding missing code to use them.\n\n**[xyz-ctrl (Visor) disputed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/28#issuecomment-862435014):**\n> sponsor disputed\n> this is a feature\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/28#issuecomment-873469180):**\n> I’m guessing that this is going to be used in the future or in some other creative way, however warden is right and without more context I don’t see why this is needed.\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/28#issuecomment-889185477):**\n> path [link](https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[G-03] Use a temporary variable to cache repetitive complex calculation](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/30)\n_Submitted by 0xRajeev, also found by gpersoon_\n\nIn function `delegatedTransferERC20()`, the complex calculation `keccak256(abi.encodePacked(msg.sender, token))` is performed three times in three different places in the function. This consumes a lot of unnecessary gas which can be saved by saving the calculation in a temporary bytes32 variable and using that instead.\n\nRecommend saving `keccak256(abi.encodePacked(msg.sender, token))` in a temporary bytes32 variable and use that in all places.\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/30#issuecomment-862436179):**\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/30#issuecomment-889185895):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[G-04] Use a temporary variable to cache repetitive storage reads](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/31)\n_Submitted by 0xRajeev_\n\nIn function `transferERC721()`, the array value stored in a mapping `timelockERC721Keys[nftContract][i]` is read three times in three different places within the loop iteration. This consumes a lot of unnecessary gas because SLOADs are expensive. This can be prevented by saving the value `timelockERC721Keys[nftContract][i]` in a temporary bytes32 variable at the beginning of the iteration and using that instead.\n\nSee [issue page](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/31) for proof of concept\n\nRecommend saving the value `timelockERC721Keys[nftContract][i]` in a temporary bytes32 variable at the beginning of the iteration and using that instead\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/31#issuecomment-862592530):**\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/31#issuecomment-889186687):**\n> path [link](https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[G-05] Breaking out of loop can save gas](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/32)\n_Submitted by 0xRajeev_\n\nIn function `transferERC721()`, the for loop iterates over all the time locked keys for the nftContract `timelockERC721Keys[nftContract].length` times. Given that there will only be a maximum of one `tokenID` that will match (because of unique NFT tokenIDs), if any, we can break from iterating the rest of the loop after a match on L505 and the checks within the if body. This will prevent iterating the rest of the loop and trying to match the if condition on L505 after a match has already happened.\n\nRecommend adding a break statement after L510 within the if body.\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/32#issuecomment-862599074):**\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/32#issuecomment-889186914):**\n> path [link](https://github.com/VisorFinance/visor-core/commit/ff53331a1cd24275ff142f1065c3e0463a4d226b#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[G-06] Gas optimizations by using external over public ](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/51)\n_Submitted by a_delamo_\n\nUsing public over external has an impact on execution cost.\n\nIf we run the following methods on Remix, we can see the difference\n``` solidity\n//  transaction cost\t21448 gas\n//  execution cost\t176 gas\nfunction tt() external returns(uint256) {\n    return 0;\n}\n\n//  transaction cost\t21558 gas\n//  execution cost\t286 gas\nfunction tt_public() public returns(uint256) {\n    return 0;\n}\n```\nSee [issue page](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/51) for list of methods currently using public that should be declared external.\n\nRecommend just changing from public to external if possible.\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/51#issuecomment-862599094):**\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/51#issuecomment-889193479):**\n> duplicate of [#27](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/27) and fixed\n\n## [[G-07] Gas optimization storage NFTs](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/52)\n_Submitted by a_delamo_\n\nIn `Visor.sol`, NFTs are being stored using an array `Nft[] public nfts;`\n\nThis seems an optimal structure, but when needing to remove an NFT or look for an NFT by contract and id,\nwe need to do `O(n)` iterations.\n\nSee [issue page](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/52) for referenced code.\n\nChecking the function `getNftById`, seems like a lookup by id (mapping(uint=> NFT)) should be fine.\nIn case we need more, we could do mapping(uint => mapping(address => NFT)), but doesn't seems necessary.\n\nRecommend providing direct links to all referenced code in GitHub. Add screenshots, logs, or any other relevant proof that illustrates the concept.\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/52#issuecomment-862610664):**\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/52#issuecomment-889194730):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[G-08] Gas optimizations - storage over memory](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/53)\n_Submitted by a_delamo_\n\nIn `Visor.sol`, the functions are using memory keyword, but using storage would reduce the gas cost.\n\n```solidity\nfunction _removeNft(address nftContract, uint256 tokenId) internal {\n    uint256 len = nfts.length;\n    for (uint256 i = 0; i < len; i++) {\n        Nft memory nftInfo = nfts[i];\n        if (\n            nftContract == nftInfo.nftContract && tokenId == nftInfo.tokenId\n        ) {\n            if (i != len - 1) {\n                nfts[i] = nfts[len - 1];\n            }\n            nfts.pop();\n            emit RemoveNftToken(nftContract, tokenId);\n            break;\n        }\n    }\n}\n```\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/53#issuecomment-862599131):**\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/53#issuecomment-889195145):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[G-09] Gas optimizations - calculation `getBalanceLocked`](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/55)\n_Submitted by a_delamo_\n\nIn `Visor.sol`, the function `getBalanceLocked` returns the amount locked.\nDoing this method will cause O(n) to return the highest locked value.\n\nBut this method is only being used to verify that there is an X amount of tokens locked. (See [issue page](https://github.com/code-423n4/reports/blob/visor/visorfinance/2021-05-visorfinance-DRAFT.md) for referenced code)\n\nRecommend that instead of doing O(n), we could just exit when we found that balance >= amount requested. Something like:\n\n**[xyz-ctrl (Visor) confirmed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/55#issuecomment-862599204):**\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/55#issuecomment-889195783):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[G-10] Missing events](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/44)\n_Submitted by cmichel_\n\nThe following events are not used:\n- `IInstanceRegistry.InstanceRemoved`\n\nUnused code can hint at programming or architectural errors.  Recommend using it or removing it.\n\n**[xyz-ctrl (Visor) acknowledged but disputed severity](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/44#issuecomment-862607014):**\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/44#issuecomment-873480513):**\n> Agree with sponsor, it doesn’t present a security issue it’s a non-critical issue.\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/44#issuecomment-889191547):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/cc22d6e450e16aaa9eb3af1ee4d9e6ac8afe43da#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[G-11] `getNftById` is querying against the index not id](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/8)\n_Submitted by pauliax_\n\n`getNftById` is actually 'get NFT by index' as it queries the element from the array by index, not by `tokenId`. The index may not always equal id as` _addNft` does not automatically assign index incrementally but rather use a parameter's value. Same with `getNftIdByTokenIdAndAddr`, it returns index, not token id.\n\nRecommend either renaming functions to distinguish between id and index or refactoring the function to suit its name.\n\n**[xyz-ctrl (Visor) acknowledged](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/8#issuecomment-862439485):**\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/8#issuecomment-873525818):**\n > This is very similar to #26 but I’ll keep it as sponsor finds it a valuable suggestion\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/8#issuecomment-889174169):**\n > fixed patch [link](https://github.com/VisorFinance/visor-core/commit/71797204108fee8375bfb99a435c0e379bbcbd84#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[G-12] introduce a max lock time limit](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/14)\n_Submitted by pauliax_\n\nI suggest introducing a max lock time limit, so it won't be possible to accidentally lock tokens forever. As of right now there is no limit on when the timelock expires, so theoretically it is possible to set it to hundreds of years which I think in practice wouldn't make sense.\n\nEven though this is more of a theoretical issue, I recommend introducing a reasonable upper limit for the timelock period.\n\n**[xyz-ctrl (Visor) acknowledged](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/14#issuecomment-862437600):**\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/14#issuecomment-889208429):**\n> this is not critical for now by adding additional check\n\n## [[G-13] Internal `GetBalanceLocked` call can exceed block size limit](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/63)\n_Submitted by Sherlock_\n\nOn line 202 it loops over all the Lock sets. Transaction can run out of gas if this is an extreme size. Precautions have already been taken by restricting adding entries to this array.\n\nRecommend keeping an internal accounting of the `balanceLocked`, updating on every lock call.\n\n**[xyz-ctrl (Visor) acknowledged](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/63#issuecomment-862604996):**\n> In practice of our platform context this will never grow large\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/63#issuecomment-889196777):**\n > patch [link](https://github.com/VisorFinance/visor-core/commit/585bedc435c297af5c91be7f525acf0832885a09#diff-b094db7ce2f99cbcbde7ec178a6754bac666e2192f076807acbd70d49ddd0559)\n\n## [[G-14] Events are not indexed](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/70)\n_Submitted by shw_\n\nThe emitted events are not indexed, making off-chain scripts such as front-ends of dApps difficult to filter the events efficiently.\n\nRecommend adding the `indexed` keyword in each event, e.g., `event AddNftToken(address indexed nftContract, uint256 tokenId);`.\n\n**[xyz-ctrl (Visor) acknowledged](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/70#issuecomment-862596780):**\n\n**[ghoul-sol (Judge) changed severity](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/70#issuecomment-873559034):**\n> While true, it’s non-critical issue\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/70#issuecomment-889211422):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/37ca8c5e53ebba62a53ee78edb5415705d79cdc7)\n\n## [[G-15] Unused imported interface `IVisorService`](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/71)\n_Submitted by shw_\n\nThe imported interface `IVisorService` in the contract `Visor` is not used.\n\nRecommend considering removing this import.\n\n**[xyz-ctrl (Visor) acknowledged](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/71#issuecomment-862608186):**\n> sponsor acknowledged, dispute severity 0\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/71#issuecomment-873559177):**\n> Agreed, non-critical issue\n\n**[ztcrypto (Visor) commented](https://github.com/code-423n4/2021-05-visorfinance-findings/issues/71#issuecomment-889211231):**\n> patch [link](https://github.com/VisorFinance/visor-core/commit/37ca8c5e53ebba62a53ee78edb5415705d79cdc7)\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}