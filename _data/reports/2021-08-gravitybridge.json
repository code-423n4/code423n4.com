{
  "circa": {
    "title": "Gravity Bridge",
    "sponsor": "Althea Gravity Bridge",
    "slug": "2021-08-gravitybridge",
    "date": "2021-11-5",
    "findings": "https://github.com/code-423n4/2021-08-gravitybridge-findings/issues",
    "contest": 27
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of the Gravity Bridge smart contract system written in Solidity. The code contest took place between August 26—September 8 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>14 Wardens contributed reports to the Gravity Bridge code contest:</p>\n<ol>\n<li>\n<p>nascent</p>\n<ul>\n<li><a href=\"https://twitter.com/brockjelmore\">brock</a></li>\n<li><a href=\"https://twitter.com/andreasbigger\">0xAndreas</a></li>\n<li><a href=\"https://twitter.com/Chris_8086\">chris_nascent</a></li>\n</ul>\n</li>\n<li><a href=\"https://twitter.com/jonathanjmak\">jmak</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://github.com/x9453\">shw</a></li>\n<li><a href=\"https://twitter.com/_hrkrshnn\">hrkrshnn</a></li>\n<li>0xito</li>\n<li><a href=\"https://twitter.com/ElliotCryptoRev\">ElliotFriedman</a></li>\n<li><a href=\"https://twitter.com/hack3r_0m\">hack3r-0m</a></li>\n<li><a href=\"https://twitter.com/MukeshJ_eth\">JMukesh</a></li>\n<li><a href=\"https://twitter.com/HickupH\">hickuphh3</a></li>\n<li><a href=\"https://twitter.com/patitonar\">patitonar</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://github.com/albertchon\">Albert Chon</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/money_lego\">moneylegobatman</a> and <a href=\"https://twitter.com/_ninek_\">ninek</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 44 unique findings. All of the issues presented here are linked back to their original submission.</p>\n<p>Of these vulnerabilities, 4 received a risk rating in the category of HIGH severity, 4 received a risk rating in the category of MEDIUM severity, and 10 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 16 non-critical recommendations and 10 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-08-gravitybridge\">C4 Gravity Bridge code contest repository</a> and is composed of 12 smart contracts written in the Solidity programming language and includes 748 lines of Solidity, 9,540 lines of Rust, and 36,283 lines of Go code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-4\" style=\"position:relative;\"><a href=\"#high-risk-findings-4\" aria-label=\"high risk findings 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (4)</h1>\n<h2 id=\"h-01-cannot-actually-submit-evidence\" style=\"position:relative;\"><a href=\"#h-01-cannot-actually-submit-evidence\" aria-label=\"h 01 cannot actually submit evidence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/64\">[H-01] Cannot actually submit evidence</a></h2>\n<p><em>Submitted by jmak</em></p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The <code>SubmitBadSignatureEvidence</code> is not actually registered in the handler and hence no one can actually submit this message, rendering the message useless. This harms the security model of Gravity since validators have no disincentive to attempt to collude and take over the bridge.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <code>SubmitBadSignatureEvidence</code> handler is omitted from <code>module</code>/<code>x</code>/<code>gravity</code>/<code>handler.go</code></p>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Visual inspection</p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Handle the <code>MsgSubmitBadSignatureEvidence</code> in <code>module</code>/<code>x</code>/<code>gravity</code>/<code>handler.go</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/64#issuecomment-916884977\">jkilpatr (Althea) confirmed and patched</a>:</strong></p>\n<blockquote>\n<p>This was resolved here</p>\n<p><a href=\"https://github.com/althea-net/cosmos-gravity-bridge/commit/ad6bd78d4c968c3eef5a8ab7a38b42cd3269d186\">https://github.com/althea-net/cosmos-gravity-bridge/commit/ad6bd78d4c968c3eef5a8ab7a38b42cd3269d186</a></p>\n<p>This is a valid bug considering this fix is not included in the code hash up for review.</p>\n</blockquote>\n<h2 id=\"h-02-freeze-bridge-via-non-utf8-token-namesymboldenom\" style=\"position:relative;\"><a href=\"#h-02-freeze-bridge-via-non-utf8-token-namesymboldenom\" aria-label=\"h 02 freeze bridge via non utf8 token namesymboldenom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/4\">[H-02] Freeze Bridge via Non-UTF8 Token Name/Symbol/Denom</a></h2>\n<p><em>Submitted by nascent</em></p>\n<p>Manual insertion of non-utf8 characters in a token name will break parsing of logs and will always result in the oracle getting in a loop of failing and early returning an error. The fix is non-trivial and likely requires significant redesign.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Note the <code>c0</code> in the last argument of the call data (invalid UTF8).</p>\n<p>It can be triggered with:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">data</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">hex</span><span class=\"mtk8\">&quot;f7955637000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000461746f6d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e616d6500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000673796d626fc00000000000000000000000000000000000000000000000000000&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">gravity</span><span class=\"mtk1\">.</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The log output is as follows:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">ERC20DeployedEvent</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;atom&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;name&quot;</span><span class=\"mtk1\">, ❮</span><span class=\"mtk12\">utf8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">decode</span><span class=\"mtk1\"> </span><span class=\"mtk12\">failed</span><span class=\"mtk1\">❯: </span><span class=\"mtk7\">0x73796d626fc0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">18</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>Which hits <a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/orchestrator/gravity_utils/src/types/ethereum_events.rs#L431-L438\">this code path</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"rust\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> symbol = </span><span class=\"mtk4\">String</span><span class=\"mtk1\">::</span><span class=\"mtk11\">from_utf8</span><span class=\"mtk1\">(input.data[index_start..index_end].</span><span class=\"mtk11\">to_vec</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">trace!</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Symbol {:?}&quot;</span><span class=\"mtk1\">, symbol);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> symbol.</span><span class=\"mtk11\">is_err</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> Err(GravityError::</span><span class=\"mtk11\">InvalidEventLogError</span><span class=\"mtk1\">(</span><span class=\"mtk11\">format!</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&quot;{:?} is not valid utf8, probably incorrect parsing&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            symbol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        )));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>And would cause an early return <a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/orchestrator/orchestrator/src/ethereum_event_watcher.rs#L99\">here</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"rust\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> erc20_deploys = Erc20DeployedEvent::</span><span class=\"mtk11\">from_logs</span><span class=\"mtk1\">(&amp;deploys)?;</span></span></span></code></pre>\n<p>Never updating last checked block and therefore, this will freeze the bridge by disallowing any attestations to take place. This is an extremely low cost way to bring down the network.</p>\n<h4 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>This is a hard one. Re-syncing is permanently borked because, on the Go side, there is seemingly no way to ever process the event nonce because protobufs do not handle non-utf8 strings. The validator would report they need event nonce <code>N</code> from the orchestrator, but they can never parse the event <code>N</code>. Seemingly, validators &#x26; orchestrators would have to know to ignore that specific event nonce. But it is a permissionless function, so it can be used to effectively permanently stop attestations &#x26; the bridge until a new <code>Gravity.sol</code> is deployed.</p>\n<p>One potential fix is to check in the solidity contract if the name contains valid utf8 strings for denom, symbol and name. This likely will be expensive though. Alternatively, you could require that validators sign ERC20 creation requests and perform checks before the transaction is sent.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/4#issuecomment-917151454\">jkilpatr (Althea) confirmed</a>:</strong></p>\n<blockquote>\n<p>This is a valid and well considered bug.</p>\n<p>I do disagree about the difficulty of the fix though, if we fail to parse the token name as utf8 we can just encode the bytes themselves in hex and pass that along. The result will be perfectly valid if a little unergonomic.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/4#issuecomment-925867313\">albertchon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Clever, great catch</p>\n</blockquote>\n<h2 id=\"h-03-freeze-the-bridge-via-large-erc20-namessymbolsdenoms\" style=\"position:relative;\"><a href=\"#h-03-freeze-the-bridge-via-large-erc20-namessymbolsdenoms\" aria-label=\"h 03 freeze the bridge via large erc20 namessymbolsdenoms permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/5\">[H-03] Freeze The Bridge Via Large ERC20 Names/Symbols/Denoms</a></h2>\n<p><em>Submitted by nascent</em></p>\n<p>Ethereum Oracles watch for events on the <code>Gravity.sol</code> contract on the Ethereum blockchain. This is performed in the <a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/orchestrator/orchestrator/src/ethereum_event_watcher.rs#L23\"><code>check_for_events</code></a> function, and run in the <a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/orchestrator/orchestrator/src/main_loop.rs#L94\"><code>eth_oracle_main_loop</code></a>.</p>\n<p>In this function, there is <a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/orchestrator/orchestrator/src/ethereum_event_watcher.rs#L66-L73\">the following code snippet</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"rust\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> erc20_deployed = web3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    .</span><span class=\"mtk11\">check_for_events</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        starting_block.</span><span class=\"mtk11\">clone</span><span class=\"mtk1\">(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Some(latest_block.</span><span class=\"mtk11\">clone</span><span class=\"mtk1\">()),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">vec!</span><span class=\"mtk1\">[gravity_contract_address],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">vec!</span><span class=\"mtk1\">[ERC20_DEPLOYED_EVENT_SIG],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    .</span><span class=\"mtk15\">await</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>This snippet leverages the <code>web30</code> library to check for events from the <code>starting_block</code> to the <code>latest_block</code>. Inside the <code>web30</code> library this nets out to calling:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"rust\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk15\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">fn</span><span class=\"mtk1\"> </span><span class=\"mtk11\">eth_get_logs</span><span class=\"mtk1\">(&amp;</span><span class=\"mtk4\">self</span><span class=\"mtk1\">, new_filter: NewFilter) -&gt; </span><span class=\"mtk4\">Result</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">Vec</span><span class=\"mtk1\">&lt;Log&gt;, Web3Error&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">self</span><span class=\"mtk1\">.jsonrpc_client</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .</span><span class=\"mtk11\">request_method</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&quot;eth_getLogs&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">vec!</span><span class=\"mtk1\">[new_filter],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">self</span><span class=\"mtk1\">.timeout,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            Some(</span><span class=\"mtk7\">10_000_000</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        .</span><span class=\"mtk15\">await</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The <code>10_000_000</code> specifies the maximum size of the return in bytes and returns an error if the return is larger:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"rust\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> res: Response&lt;R&gt; = </span><span class=\"mtk15\">match</span><span class=\"mtk1\"> res.</span><span class=\"mtk11\">json</span><span class=\"mtk1\">().</span><span class=\"mtk11\">limit</span><span class=\"mtk1\">(limit).</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    Ok(val) =&gt; val,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    Err(e) =&gt; </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> Err(Web3Error::</span><span class=\"mtk11\">BadResponse</span><span class=\"mtk1\">(</span><span class=\"mtk11\">format!</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Web3 Error {}&quot;</span><span class=\"mtk1\">, e))),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p>This can be triggered at will and keep the loop in a perpetual state of returning the <code>GravityError::EthereumRestError(Web3Error::BadResponse( \"Failed to get logs!\".to_string()))</code> error. To force the node into this state, you just have to deploy ERC20s generated by the <a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/solidity/contracts/Gravity.sol#L546-L565\">public function in <code>Gravity.sol</code></a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployERC20</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_cosmosDenom</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_symbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Deploy an ERC20 with entire supply granted to Gravity.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">CosmosERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">erc20</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">CosmosERC20</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_symbol</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_decimals</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Fire an event to let the Cosmos module know</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">state_lastEventNonce</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">state_lastEventNonce</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ERC20DeployedEvent</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_cosmosDenom</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">erc20</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_symbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_decimals</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">state_lastEventNonce</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>And specify a large string as the denom, name, or symbol.</p>\n<p>If an attacker uses the denom as the attack vector, they save significant gas costing just 256 per additional 32 bytes. For other cases, to avoid gas overhead, you can have the string be mostly 0s resulting in just 584 gas per additional 32 bytes. This leaves it feasible to surpass the 10mb response data in the 6 block buffer. This would throw every ethereum oracle into a state of perpetual errors and all would fall out of sync with the ethereum blockchain. This would result in the batches, logic calls, deposits, ERC20 creations, and <code>valset</code> updates to never receive attestations from other validators because their ethereum oracles would be down; the bridge would be frozen and remain frozen until the bug is fixed due to <code>get_last_checked_block</code>.</p>\n<p>This will freeze the bridge by disallowing attestations to take place.</p>\n<p>This requires a patch to reenable the bridge.</p>\n<h4 id=\"recommendation-1\" style=\"position:relative;\"><a href=\"#recommendation-1\" aria-label=\"recommendation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Handle the error more concretely and check if you got a byte limit error. If you did, chunk the search size into 2 and try again. Repeat as necessary, and combine the results.</p>\n<p>Additionally, you could require that validators sign ERC20 creation requests.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/5#issuecomment-917150363\">jkilpatr (Althea) confirmed</a>:</strong></p>\n<blockquote>\n<p>Excellent bug report.</p>\n<p>I just ran into the buffer limit issue this morning with an Ethereum block. I agree handling this error correctly is essential to long term reliability.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/5#issuecomment-925869600\">albertchon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Nice :)</p>\n</blockquote>\n<h2 id=\"h-04-large-validator-setsrapid-validator-set-updates-may-freeze-the-bridge-or-relayers\" style=\"position:relative;\"><a href=\"#h-04-large-validator-setsrapid-validator-set-updates-may-freeze-the-bridge-or-relayers\" aria-label=\"h 04 large validator setsrapid validator set updates may freeze the bridge or relayers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/6\">[H-04] Large Validator Sets/Rapid Validator Set Updates May Freeze the Bridge or Relayers</a></h2>\n<p><em>Submitted by nascent</em></p>\n<p>In a similar vein to “Freeze The Bridge Via Large ERC20 Names/Symbols/Denoms”, a sufficiently large validator set or sufficiently rapid validator update, could cause both the <code>eth_oracle_main_loop</code> and <code>relayer_main_loop</code> to fall into a state of perpetual errors. In <code>find_latest_valset</code>, <a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/orchestrator/relayer/src/find_latest_valset.rs#L33-L40\">we call</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"rust\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">mut</span><span class=\"mtk1\"> all_valset_events = web3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    .</span><span class=\"mtk11\">check_for_events</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        end_search.</span><span class=\"mtk11\">clone</span><span class=\"mtk1\">(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Some(current_block.</span><span class=\"mtk11\">clone</span><span class=\"mtk1\">()),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">vec!</span><span class=\"mtk1\">[gravity_contract_address],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">vec!</span><span class=\"mtk1\">[VALSET_UPDATED_EVENT_SIG],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    .</span><span class=\"mtk15\">await</span><span class=\"mtk1\">?;</span></span></span></code></pre>\n<p>Which if the validator set is sufficiently large, or sufficiently rapidly updated, continuoussly return an error if the logs in a 5000 (see: <code>const BLOCKS_TO_SEARCH: u128 = 5_000u128;</code>) block range are in excess of 10mb. Cosmos hub says they will be pushing the number of validators up to 300 (currently 125). At 300, each log would produce 19328 bytes of data (4*32+64*300). Given this, there must be below 517 updates per 5000 block range otherwise the node will fall out of sync.</p>\n<p>This will freeze the bridge by disallowing attestations to take place.</p>\n<p>This requires a patch to reenable the bridge.</p>\n<h4 id=\"recommendation-2\" style=\"position:relative;\"><a href=\"#recommendation-2\" aria-label=\"recommendation 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Handle the error more concretely and check if you got a byte limit error. If you did, chunk the search size into 2 and try again. Repeat as necessary, and combine the results.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/6#issuecomment-916968683\">jkilpatr (Althea) confirmed</a>:</strong></p>\n<blockquote>\n<p>This is a solid report with detailed computations to back it up. I appreciate it and will take actions in our web3 library to prevent this exact scenario.</p>\n</blockquote>\n<h1 id=\"medium-risk-findings-4\" style=\"position:relative;\"><a href=\"#medium-risk-findings-4\" aria-label=\"medium risk findings 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (4)</h1>\n<h2 id=\"m-01-the-function-updatevalset-does-not-have-enough-sanity-checks\" style=\"position:relative;\"><a href=\"#m-01-the-function-updatevalset-does-not-have-enough-sanity-checks\" aria-label=\"m 01 the function updatevalset does not have enough sanity checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/51\">[M-01] The function <code>updateValset</code> does not have enough sanity checks</a></h2>\n<p><em>Submitted by hrkrshnn, also found by pauliax and shw</em></p>\n<p>In the <a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/solidity/contracts/Gravity.sol#L224\">updateValset</a> function, the current set of validators adds a new set.</p>\n<p>It is missing the check that the combined power of all new validators is above the <code>state_powerThreshold</code>. If this is false, then the contract is effectively stuck. Consider adding an on-chain check for this.</p>\n<p>It is also worth adding a that the size of the new validator check is less than a certain number.</p>\n<p>Here is a rough calculation explaining how 10000 validators (an extreme example) is too much:</p>\n<ol>\n<li>Let us say that the new set of validators have the property that at least, say, <code>N</code> validators are needed to get the total threshold above <code>state_powerThreshold</code>.</li>\n<li>Since each validating signature requires a call to <code>ecrecover</code>, costing at least <code>3000</code> gas, the minimum gas needed for getting a proposal over <code>state_powerThreshold</code> would be <code>N * 3000</code></li>\n<li><code>N * 3000</code> cannot be more than the <code>block.gaslimit</code> Currently, this puts <code>N</code> to be less than <code>10000</code></li>\n</ol>\n<p>Another approach to solve the above potential problems is to do the updating as a two step process:</p>\n<ol>\n<li>The current set of validators proposes a pending set of validators.</li>\n<li>And the pending set of validators need to do the transition to become the new set of validators. Going through the same threshold checks.</li>\n</ol>\n<p>This guarantees that the new set of validators has enough power to pass threshold and doesn’t have gas limit issues in doing so.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/51#issuecomment-916505723\">jkilpatr (Althea) confirmed</a>:</strong></p>\n<blockquote>\n<p>Semi duplicate of #63, #37 which describes the power sum issue</p>\n<p>Also a semi duplicate of #9 which describes the block size issue</p>\n<p>these are both valid and should be assigned congruent severity with the duplicates.</p>\n</blockquote>\n<h2 id=\"m-02-crash-eth-oracle-on-any-logiccallevent\" style=\"position:relative;\"><a href=\"#m-02-crash-eth-oracle-on-any-logiccallevent\" aria-label=\"m 02 crash eth oracle on any logiccallevent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/11\">[M-02] Crash Eth Oracle On Any <code>LogicCallEvent</code></a></h2>\n<p><em>Submitted by nascent</em></p>\n<p>Likelihood: high</p>\n<p>In <code>eth_oracle_main_loop</code>, <code>get_last_checked_block</code> is called. Followed by:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"rust\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> logic_call_executed_events = web3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    .</span><span class=\"mtk11\">check_for_events</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        end_search.</span><span class=\"mtk11\">clone</span><span class=\"mtk1\">(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Some(current_block.</span><span class=\"mtk11\">clone</span><span class=\"mtk1\">()),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">vec!</span><span class=\"mtk1\">[gravity_contract_address],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">vec!</span><span class=\"mtk1\">[LOGIC_CALL_EVENT_SIG],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    .</span><span class=\"mtk15\">await</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>and may hit the code path:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"rust\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> event </span><span class=\"mtk15\">in</span><span class=\"mtk1\"> logic_call_executed_events {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">match</span><span class=\"mtk1\"> LogicCallExecutedEvent::</span><span class=\"mtk11\">from_log</span><span class=\"mtk1\">(&amp;event) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Ok(call) =&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">trace!</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;{} LogicCall event nonce {} last event nonce&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                call.event_nonce,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                last_event_nonce</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> </span><span class=\"mtk11\">upcast</span><span class=\"mtk1\">(call.event_nonce) == last_event_nonce &amp;&amp; event.block_number.</span><span class=\"mtk11\">is_some</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> event.block_number.</span><span class=\"mtk11\">unwrap</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Err(e) =&gt; </span><span class=\"mtk11\">error!</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Got ERC20Deployed event that we can&#39;t parse {}&quot;</span><span class=\"mtk1\">, e),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>But will panic at <code>from_log</code> here:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"rust\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">impl</span><span class=\"mtk1\"> </span><span class=\"mtk10\">LogicCallExecutedEvent</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">pub</span><span class=\"mtk1\"> </span><span class=\"mtk4\">fn</span><span class=\"mtk1\"> </span><span class=\"mtk11\">from_log</span><span class=\"mtk1\">(_input: &amp;Log) -&gt; </span><span class=\"mtk4\">Result</span><span class=\"mtk1\">&lt;LogicCallExecutedEvent, GravityError&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">unimplemented!</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// snip...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>It can/will also be triggered here in <code>check_for_events</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"rust\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">let</span><span class=\"mtk1\"> logic_calls = LogicCallExecutedEvent::</span><span class=\"mtk11\">from_logs</span><span class=\"mtk1\">(&amp;logic_calls)?;</span></span></span></code></pre>\n<p>Attestations will be frozen until patched.</p>\n<h4 id=\"recommendation-3\" style=\"position:relative;\"><a href=\"#recommendation-3\" aria-label=\"recommendation 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Implement the method.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/11#issuecomment-917137570\">jkilpatr (Althea) confirmed</a>:</strong></p>\n<blockquote>\n<p>Valid issue, but with zero probability. Since there is nothing on the module side that currently triggers arbitrary logic.</p>\n<p>Despite the fact that it can’t currently happen this is still a good report.</p>\n</blockquote>\n<h2 id=\"m-03-win-all-relayer-rewards\" style=\"position:relative;\"><a href=\"#m-03-win-all-relayer-rewards\" aria-label=\"m 03 win all relayer rewards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/7\">[M-03] Win all relayer rewards</a></h2>\n<p><em>Submitted by nascent</em></p>\n<p>“Large Validator Sets/Rapid Validator Set Updates May Freeze the Bridge or Relayer” can affect just the relayers &#x26; not affect the oracle in certain circumstances. This could result in valid attestations, but prevent any of the other relayers from being able to participate in the execution. While the other relayers are down from the other attack, the attacker can win all batch, logic, and valset rewards as their node is the only relayer running. This is possible because <code>find_latest_valset</code> is run in the main relayer loop and everytime tries for 5000 blocks of logs.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/7#issuecomment-917140352\">jkilpatr (Althea) confirmed</a>:</strong></p>\n<blockquote>\n<p>This is a reasonable consequence of #6</p>\n<p>I consider it medium risk because it reduces the number of relayers active, not because of the reward assignment</p>\n</blockquote>\n<h2 id=\"m-04-incorrect-accounting-on-transfer-on-feedeflationary-tokens-in-gravity\" style=\"position:relative;\"><a href=\"#m-04-incorrect-accounting-on-transfer-on-feedeflationary-tokens-in-gravity\" aria-label=\"m 04 incorrect accounting on transfer on feedeflationary tokens in gravity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/62\">[M-04] Incorrect accounting on transfer-on-fee/deflationary tokens in <code>Gravity</code></a></h2>\n<p><em>Submitted by shw</em></p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>sendToCosmos</code> function of <code>Gravity</code> transfers <code>_amount</code> of <code>_tokenContract</code> from the sender using the function <code>transferFrom</code>. If the transferred token is a transfer-on-fee/deflationary token, the actually received amount could be less than <code>_amount</code>. However, since <code>_amount</code> is passed as a parameter of the <code>SendToCosmosEvent</code> event, the Cosmos side will think more tokens are locked on the Ethereum side.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Referenced code:</p>\n<ul>\n<li><a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/solidity/contracts/Gravity.sol#L535\">Gravity.sol#L535</a></li>\n<li><a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/solidity/contracts/Gravity.sol#L541\">Gravity.sol#L541</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider getting the received amount by calculating the difference of token balance (using <code>balanceOf</code>) before and after the <code>transferFrom</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/62#issuecomment-916196186\">jkilpatr (Althea) confirmed</a>:</strong></p>\n<blockquote>\n<p>This is a valid issue, it does present the ability to ‘steal’ tokens from the bridge, so I think that justifies the severity.</p>\n<p>If user (A) deposits a deflationary token and gets slightly more vouchers than where actually deposited into the bridge upon withdraw they could steal tokens from user (B) who had also deposited.</p>\n</blockquote>\n<h1 id=\"low-risk-findings-10\" style=\"position:relative;\"><a href=\"#low-risk-findings-10\" aria-label=\"low risk findings 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (10)</h1>\n<h2 id=\"l-01-direct-usage-of-ecrecover-allows-signature-malleability\" style=\"position:relative;\"><a href=\"#l-01-direct-usage-of-ecrecover-allows-signature-malleability\" aria-label=\"l 01 direct usage of ecrecover allows signature malleability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/61\">[L-01] Direct usage of <code>ecrecover</code> allows signature malleability</a></h2>\n<p><em>Submitted by shw, also found by 0xito, JMukesh and pauliax</em></p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>verifySig</code> function of <code>Gravity</code> calls the Solidity <code>ecrecover</code> function directly to verify the given signatures. However, the <code>ecrecover</code> EVM opcode allows malleable (non-unique) signatures and thus is susceptible to replay attacks.</p>\n<p>Although a replay attack seems not possible here since the nonce is increased each time, ensuring the signatures are not malleable is considered a best practice (and so is checking <code>_signer != address(0)</code>, where <code>address(0)</code> means an invalid signature).</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Referenced code:\n<a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/solidity/contracts/Gravity.sol#L153\">Gravity.sol#L153</a></p>\n<p><a href=\"https://swcregistry.io/docs/SWC-117\">SWC-117: Signature Malleability</a>\n<a href=\"https://swcregistry.io/docs/SWC-121\">SWC-121: Missing Protection against Signature Replay Attacks</a></p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use the <code>recover</code> function from <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol\">OpenZeppelin’s ECDSA library</a> for signature verification.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/61#issuecomment-916201977\">jkilpatr (Althea) confirmed</a>:</strong></p>\n<blockquote>\n<p>Best practicies advice may belong in category zero. But in general I agree with the advice here and that this is valid feedback despite lacking a specific attack vector.</p>\n<p>semi-duplicate of #43, #28 which mention the validation issue. #22 also mentions malleability.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/61#issuecomment-925816009\">albertchon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Marking <a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/61\">https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/61</a> as primary for the signature malleability issue.</p>\n<p>Duplicates:</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/21\">https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/21</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/22\">https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/22</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/43\">https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/43</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/28\">https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/28</a></li>\n</ul>\n</blockquote>\n<h2 id=\"l-02-why-nonces-are-not-incrementing-by-1-\" style=\"position:relative;\"><a href=\"#l-02-why-nonces-are-not-incrementing-by-1-\" aria-label=\"l 02 why nonces are not incrementing by 1  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/32\">[L-02] Why nonces are not incrementing by 1 ?</a></h2>\n<p><em>Submitted by pauliax, also found by 0xito</em></p>\n<h4 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>I am concerned why <code>invalidationId</code>, <code>invalidationNonce</code> or <code>valsetNonce</code> are only required to be greater than the previous value. Why did you choose this approach instead of just simply asking for an incremented value? While this may not be a problem if the validators are honest, but otherwise, they may submit a nonce of MAX UINT and thus block the whole system as it would be no longer possible to submit a greater value. Again, just wanted you to be aware of this issue, not sure how likely this to happen is in practice, it depends on the honesty of validators so you better know.</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>I didn’t receive an answer on Discord so decided to submit this FYI to decide if that’s a hazard or no.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/32#issuecomment-916965160\">jkilpatr (Althea) confirmed</a>:</strong></p>\n<blockquote>\n<p>This is frankly a good point. We need to be able to skip nonces because we may sometimes create batches that are not profitable or validator sets that we don’t want to bother submitting.</p>\n<p>A reasonable mitigation for this issue would be to limit how far ahead we can skip at any one time. Preventing error or hostile action from locking funds in the bridge forever by setting the maximum nonce.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/32#issuecomment-925823532\">albertchon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Well this actually isn’t an accurate attack since the nonce representation on the module side is uint64 whereas it’s a uint256 on the cosmos side.</p>\n<p>Still, I think this attack is quite hard to trigger naturally since the nonce is incremented by 1 on the module side and as sending 2^64 -1 transactions on a Cosmos chain (to trigger this overflow) would be cost prohibitive/</p>\n<p>And I think attacks that assume validators collude aren’t really attacks since that’s the natural trust assumption already.</p>\n<p>Marking this one as the primary.</p>\n</blockquote>\n<h2 id=\"l-03-logic-calls-can-steal-tokens\" style=\"position:relative;\"><a href=\"#l-03-logic-calls-can-steal-tokens\" aria-label=\"l 03 logic calls can steal tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/25\">[L-03] logic calls can steal tokens</a></h2>\n<p><em>Submitted by 0xito, also found by ElliotFriedman</em></p>\n<h4 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Attacker can send a logic call that performs a <code>token.approve(attackerAddress, type(uint256).max)</code> using the <code>submitLogicCall</code> function.</p>\n<p>Afterwards, they can steal all tokens from the bridge using <code>token.safetransferfrom(bridge, attacker, amount)</code>.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><code>submitLogicCall</code> with <code>token.approve(attackerAddress, type(uint256).max)</code></li>\n<li>call <code>token.safetransferfrom(bridge, attacker, amount)</code></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Disallow calls to the bridge contract, or to any token/NFT contracts that the bridge owns tokens of (<code>token.balanceOf(address(this)) > 0</code>).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/25#issuecomment-916986886\">jkilpatr (Althea) disputed</a>:</strong></p>\n<blockquote>\n<p>I would classify this as low risk at most. Arbitrary logic calls can only be triggered by the Cosmos module itself with full consensus, the ability of arbitrary logic to do unknown dangerous things is the design intent and any call actually deployed would have to have the upmost inspection before being used.</p>\n<p>duplicate of #1</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/25#issuecomment-925825644\">albertchon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agreed on the low risk classification. Perhaps the trust assumptions of the model should’ve been made more clear.</p>\n<p>Duplicate of <a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/1\">https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/1</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/25#issuecomment-927304902\">jkilpatr (Althea) commented</a>:</strong></p>\n<blockquote>\n<p>I agree, arbitrary logic could be better documented. But it’s also very clear in the existing code that there’s no way to create arbitrary logic transactions as a user.</p>\n</blockquote>\n<h2 id=\"l-04-large-valsets-potentially-freezes-gravitysol\" style=\"position:relative;\"><a href=\"#l-04-large-valsets-potentially-freezes-gravitysol\" aria-label=\"l 04 large valsets potentially freezes gravitysol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/9\">[L-04] Large <code>ValSets</code> potentially freezes <code>Gravity.sol</code></a></h2>\n<p><em>Submitted by nascent, also found by hack3r-0m, and pauliax</em></p>\n<p>Gas requirements of <code>makeCheckpoint</code>: If the size of the validator set grows large enough during a time of block-size expansion, it may be possible to make the validator set large enough that, when the block size shrinks, the gas required to perform <code>makeCheckpoint</code> may be larger than the amount of gas available in the block. In that case, the validator set could not be updated until the block size increased. If a reduction in upper gas limit for blocks occurs at the miner layer, it may be bricked permanently.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/9#issuecomment-916969315\">jkilpatr (Althea) acknowledged</a></strong></p>\n<h2 id=\"l-05-erc20s-that-block-transfer-to-particular-addresses-enable-doscensorship\" style=\"position:relative;\"><a href=\"#l-05-erc20s-that-block-transfer-to-particular-addresses-enable-doscensorship\" aria-label=\"l 05 erc20s that block transfer to particular addresses enable doscensorship permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/8\">[L-05] ERC20s that block transfer to particular addresses enable DoS/Censorship</a></h2>\n<p><em>Submitted by nascent</em></p>\n<p>Tokens that prevent transfers to particular addresses (most commonly <code>address(0)</code> as is the <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/aefcb3e8aa4ee8da8e2b7022ffe4dcb57fbb0fdf/contracts/token/ERC20/ERC20.sol#L226\">OpenZeppelin standard</a>) enables DoS against a batch. If the attacker submits the bad transaction, the relayer wont submit the batch. The attacker never has to worry about the transaction being submitted and paying the fee because the transaction will fail, leaving the relayer stuck with the bill. This can enable MEV between chains by disabling others’ ability to close arbitrage between chains by denying them their transfers off the chain.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/8#issuecomment-917142410\">jkilpatr (Althea) acknowledged</a>:</strong></p>\n<blockquote>\n<p>The relayer will not actually pay the bill, since we simulate the tx before submission. That being said this is a valid way to block a batch for long enough that it times out.</p>\n<p>I would describe this as low risk. Since it doesn’t compromise the bridge or lose tokens, just potential value from arbitrage.</p>\n<p>The correct solution here is to block invalid transactions from being added to batches on the Cosmos side. (which I just checked we do not block the zero address in MsgSendToEth)</p>\n</blockquote>\n<h2 id=\"l-06-downcasting-can-freeze-the-chain\" style=\"position:relative;\"><a href=\"#l-06-downcasting-can-freeze-the-chain\" aria-label=\"l 06 downcasting can freeze the chain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/19\">[L-06] Downcasting Can Freeze The Chain</a></h2>\n<p><em>Submitted by nascent</em></p>\n<p>The function <code>utils::downcast_uint256() -> Option&#x3C;u64></code> returns <code>None</code> if the input value is greater than <code>U64MAX</code>.  If the value being downcast is read from a contract (e.g. a nonce), and the contract could be put into such a state where a <code>Uint256</code> is set to higher value, this will cause all nodes to halt execution upon reading this value, requiring a patch to reenable the bridge.</p>\n<h4 id=\"recommendation-4\" style=\"position:relative;\"><a href=\"#recommendation-4\" aria-label=\"recommendation 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Change the signature of <code>downcast_uint256()</code> to return a <code>Result&#x3C;></code>, and/or remove any <code>unwrap()</code>s of the result.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/19#issuecomment-917029350\">jkilpatr (Althea) acknowledged</a>:</strong></p>\n<blockquote>\n<p>This is valid, dealing with nonces as big-ints is something of a pain and it’s reasonable to not expect these values to go over u64 max. I believe with nonce increase limitations as described in #32 this can be mitigated.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/19#issuecomment-925863611\">albertchon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Low risk since this is very costly/impractical to make happen</p>\n</blockquote>\n<h2 id=\"l-07-validations-of-parameters\" style=\"position:relative;\"><a href=\"#l-07-validations-of-parameters\" aria-label=\"l 07 validations of parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/31\">[L-07] Validations of parameters</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<h4 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>There are a few validations that could be added to the system:\nthe constructor could check that <code>_gravityId</code> is not empty. <code>state_powerThreshold</code> should always be greater than 0, otherwise, anyone will be available to execute actions.</p>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider implementing suggested validations.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/31#issuecomment-916965952\">jkilpatr (Althea) confirmed</a>:</strong></p>\n<blockquote>\n<p>These are good suggestions. In my opinion powerThreshold should probably just be hard coded at this point. GravityID being empty is not a vulnerability I had considered before.</p>\n</blockquote>\n<h2 id=\"l-08-safemath-library-is-not-always-used-in-gravity\" style=\"position:relative;\"><a href=\"#l-08-safemath-library-is-not-always-used-in-gravity\" aria-label=\"l 08 safemath library is not always used in gravity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/60\">[L-08] SafeMath library is not always used in <code>Gravity</code></a></h2>\n<p><em>Submitted by shw, also found by pauliax</em></p>\n<h4 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>SafeMath library functions are not always used in the <code>Gravity</code> contract’s arithmetic operations, which could cause integer underflow/overflows. Using SafeMath is considered a best practice that could completely prevent underflow/overflows and increase code consistency.</p>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Referenced code:</p>\n<ul>\n<li><a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/solidity/contracts/Gravity.sol#L202\">Gravity.sol#L202</a></li>\n<li><a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/92d0e12cea813305e6472851beeb80bd2eaf858d/solidity/contracts/Gravity.sol#L586\">Gravity.sol#L586</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider using the SafeMath library functions in the referenced lines of code.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/60#issuecomment-916204081\">jkilpatr (Althea) confirmed</a>:</strong></p>\n<blockquote>\n<p>An overflow in the powers would be a significant bug, while it would require some pretty dramatic issues no the go module side there is value in checking in. I agree with the severity</p>\n<p>duplicate of #38</p>\n</blockquote>\n<h2 id=\"l-09-possible-miner-incentive-for-chain-reorgs-if-ethblockdelay-is-too-small\" style=\"position:relative;\"><a href=\"#l-09-possible-miner-incentive-for-chain-reorgs-if-ethblockdelay-is-too-small\" aria-label=\"l 09 possible miner incentive for chain reorgs if ethblockdelay is too small permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/12\">[L-09] Possible miner incentive for chain reorgs if <code>ETHBlockDelay</code> is too small</a></h2>\n<h4 id=\"impact-7\" style=\"position:relative;\"><a href=\"#impact-7\" aria-label=\"impact 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>If <code>ETHBlockDelay</code> is too small and the incentive for miners is large enough, it would be profitable for miners to attempt\nto double spend by depositing assets, waiting for confirmation on the cosmos-SDK and then reorging the blockchain.</p>\n<p>Although an attack like this has never been done, it could potentially cost hundreds of millions of dollars in damages. With MEV at all time highs and miners regularly using custom geth implementations its not totally out of the question to see an attack similar to this happening soon.</p>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The best way to avoid something like this is to make sure to wait for a large number of blocks until a transaction is confirmed by the cosmos system.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/12#issuecomment-917136129\">jkilpatr (Althea) acknowledged</a>:</strong></p>\n<blockquote>\n<p>We currently wait 6 blocks, as noted <a href=\"https://github.com/althea-net/cosmos-gravity-bridge/blob/main/orchestrator/orchestrator/src/ethereum_event_watcher.rs#L222\">here</a> I’ve done some math on the subject. A 7 block deep reorg would actually halt the bridge so they could only pull this off once.</p>\n<p>I do agree it’s a moderate risk, but computing how probable (and therefore risky) this sort of attack is requires info that’s pretty hard to get.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/12#issuecomment-925879648\">albertchon (judge) commented</a>:</strong></p>\n<blockquote>\n<p>We did some investigation into this and concluded that 6 blocks was safe enough</p>\n</blockquote>\n<h2 id=\"l-10-cumulativepower-check-should-be-inclusive\" style=\"position:relative;\"><a href=\"#l-10-cumulativepower-check-should-be-inclusive\" aria-label=\"l 10 cumulativepower check should be inclusive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/26\">[L-10] <code>cumulativePower</code> check should be inclusive</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<h4 id=\"impact-8\" style=\"position:relative;\"><a href=\"#impact-8\" aria-label=\"impact 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Based on my understanding <code>cumulativePower</code> checks should be inclusive to indicate when the threshold is met. Otherwise, there might be impossible to reach it in certain cases (e.g. when 100% power is required). Replace <code>></code> with <code>>=</code> in constructor and function <code>checkValidatorSignatures</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">cumulativePower</span><span class=\"mtk1\"> &gt; \\</span><span class=\"mtk12\">_powerThreshold</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">cumulativePower</span><span class=\"mtk1\"> &gt; \\</span><span class=\"mtk12\">_powerThreshold</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;Submitted validator set signatures do not have enough power.&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p><code>cumulativePower >= \\_powerThreshold</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/26#issuecomment-916985214\">jkilpatr (Althea) acknowledged</a>:</strong></p>\n<blockquote>\n<p>I would classify this as low risk since the bridge would never in any sane situation be configured to require 100% of the power. It’s a valid report in the context that a slightly more permissive check could save the day in very specific situations.</p>\n</blockquote>\n<h1 id=\"non-critical-findings-16\" style=\"position:relative;\"><a href=\"#non-critical-findings-16\" aria-label=\"non critical findings 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (16)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/23\">[N-01] validator set can be updated with same set</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/56\">[N-02] Unhandled reverts from Cosmos to Eth batches can cause <em>Denial Of Service</em></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/58\">[N-03] Filter Logic calls to gravity cosmos at client level to avoid reverts</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/40\">[N-04] Gravity: Consider enforcing validation expiry on-chain</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/33\">[N-05] Actions can be frontrunned</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/53\">[N-06] Anyone can deploy ERC20 tokens</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/42\">[N-07] use of floating pragma </a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/16\">[N-08] Passing by ownership instead of borrowing</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/17\">[N-09] <code>Vec::new()</code> instead of <code>Iterator::collect()</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/18\">[N-10] Anti-pattern <code>is_err()</code>, <code>return</code>, then <code>.unwrap()</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/20\">[N-11] Panics as error-handling</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/39\">[N-12] Style issues</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/14\">[N-13] Does the cosmos-sdk listen to only 1 gravity.sol contract address?</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/55\">[N-14] Lack of Validation Check</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/54\">[N-15] Consider adding a token whitelist in <code>sendToCosmos</code> function</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/15\">[N-16] The gravity.sol router should have pause/unpause functionality.</a></li>\n</ul>\n<h1 id=\"gas-optimizations-10\" style=\"position:relative;\"><a href=\"#gas-optimizations-10\" aria-label=\"gas optimizations 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (10)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/3\">[G-01] Smart Contract Gas Optimization</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/49\">[G-02] Avoid long revert strings.</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/45\">[G-03] Upgrade to at least Solidity 0.8.4</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/46\">[G-04] Caching the length in for loops</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/47\">[G-05] Use <code>calldata</code> instead of <code>memory</code> for function parameters</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/48\">[G-06] State Variables that can be changed to <code>immutable</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/27\">[G-07] powers in a decreasing order</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/29\">[G-08] Skip functionCall when the payload is empty</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/35\">[G-09] Cache values</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-gravitybridge-findings/issues/36\">[G-10] Pack structs tightly</a></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-4\">High Risk Findings (4)</a></p>\n<ul>\n<li><a href=\"#h-01-cannot-actually-submit-evidence\">[H-01] Cannot actually submit evidence</a></li>\n<li><a href=\"#h-02-freeze-bridge-via-non-utf8-token-namesymboldenom\">[H-02] Freeze Bridge via Non-UTF8 Token Name/Symbol/Denom</a></li>\n<li><a href=\"#h-03-freeze-the-bridge-via-large-erc20-namessymbolsdenoms\">[H-03] Freeze The Bridge Via Large ERC20 Names/Symbols/Denoms</a></li>\n<li><a href=\"#h-04-large-validator-setsrapid-validator-set-updates-may-freeze-the-bridge-or-relayers\">[H-04] Large Validator Sets/Rapid Validator Set Updates May Freeze the Bridge or Relayers</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-4\">Medium Risk Findings (4)</a></p>\n<ul>\n<li><a href=\"#m-01-the-function-updatevalset-does-not-have-enough-sanity-checks\">[M-01] The function <code>updateValset</code> does not have enough sanity checks</a></li>\n<li><a href=\"#m-02-crash-eth-oracle-on-any-logiccallevent\">[M-02] Crash Eth Oracle On Any <code>LogicCallEvent</code></a></li>\n<li><a href=\"#m-03-win-all-relayer-rewards\">[M-03] Win all relayer rewards</a></li>\n<li><a href=\"#m-04-incorrect-accounting-on-transfer-on-feedeflationary-tokens-in-gravity\">[M-04] Incorrect accounting on transfer-on-fee/deflationary tokens in <code>Gravity</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-findings-10\">Low Risk Findings (10)</a></p>\n<ul>\n<li><a href=\"#l-01-direct-usage-of-ecrecover-allows-signature-malleability\">[L-01] Direct usage of <code>ecrecover</code> allows signature malleability</a></li>\n<li><a href=\"#l-02-why-nonces-are-not-incrementing-by-1-\">[L-02] Why nonces are not incrementing by 1 ?</a></li>\n<li><a href=\"#l-03-logic-calls-can-steal-tokens\">[L-03] logic calls can steal tokens</a></li>\n<li><a href=\"#l-04-large-valsets-potentially-freezes-gravitysol\">[L-04] Large <code>ValSets</code> potentially freezes <code>Gravity.sol</code></a></li>\n<li><a href=\"#l-05-erc20s-that-block-transfer-to-particular-addresses-enable-doscensorship\">[L-05] ERC20s that block transfer to particular addresses enable DoS/Censorship</a></li>\n<li><a href=\"#l-06-downcasting-can-freeze-the-chain\">[L-06] Downcasting Can Freeze The Chain</a></li>\n<li><a href=\"#l-07-validations-of-parameters\">[L-07] Validations of parameters</a></li>\n<li><a href=\"#l-08-safemath-library-is-not-always-used-in-gravity\">[L-08] SafeMath library is not always used in <code>Gravity</code></a></li>\n<li><a href=\"#l-09-possible-miner-incentive-for-chain-reorgs-if-ethblockdelay-is-too-small\">[L-09] Possible miner incentive for chain reorgs if <code>ETHBlockDelay</code> is too small</a></li>\n<li><a href=\"#l-10-cumulativepower-check-should-be-inclusive\">[L-10] <code>cumulativePower</code> check should be inclusive</a></li>\n</ul>\n</li>\n<li><a href=\"#non-critical-findings-16\">Non-Critical Findings (16)</a></li>\n<li><a href=\"#gas-optimizations-10\">Gas Optimizations (10)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}