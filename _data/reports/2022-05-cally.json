{
  "circa": {
    "title": "Cally contest",
    "sponsor": "Cally",
    "slug": "2022-05-cally",
    "date": "2022-07-01",
    "findings": "https://github.com/code-423n4/2022-05-cally-findings/issues",
    "contest": 122
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Cally smart contract system written in Solidity. The audit contest took place between May 10—May 14 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>115 Wardens contributed reports to the Cally contest:</p>\n<ol>\n<li><a href=\"https://github.com/SmilingHeretic\">smiling_heretic</a></li>\n<li>hubble (ksk2345 and shri4net)</li>\n<li><a href=\"http://seanseefried.org/blog\">sseefried</a></li>\n<li>IllIllI</li>\n<li>0xDjango</li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li>Hawkeye (0xwags and 0xmint)</li>\n<li>oyc_109</li>\n<li>GimelSec (<a href=\"https://twitter.com/rayn731\">rayn</a> and sces60107)</li>\n<li>BondiPestControl (<a href=\"https://twitter.com/0xleastwood\">leastwood</a> and <a href=\"https://twitter.com/kirkthebaird\">kirk-baird</a>)</li>\n<li><a href=\"https://twitter.com/WatchPug_\">WatchPug</a> (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://github.com/0xsanson\">0xsanson</a></li>\n<li><a href=\"https://github.com/antoncoding\">antonttc</a></li>\n<li>VAD37</li>\n<li>horsefacts</li>\n<li>TrungOre</li>\n<li>p4st13r4 (<a href=\"https://github.com/0x69e8\">0x69e8</a> and 0xb4bb4)</li>\n<li><a href=\"https://twitter.com/HickupH\">hickuphh3</a></li>\n<li><a href=\"https://twitter.com/shunduquar\">shung</a></li>\n<li><a href=\"https://milotruck.github.io/\">MiloTruck</a></li>\n<li>BowTiedWardens (BowTiedHeron and BowTiedPickle and <a href=\"BowTiedETHernal\">m4rio_eth</a> and <a href=\"https://twitter.com/JustDravee\">Dravee</a> and BowTiedFirefox)</li>\n<li><a href=\"https://twitter.com/MaratCerby\">MaratCerby</a></li>\n<li>hake</li>\n<li><a href=\"https://twitter.com/ellahinator\">ellahi</a></li>\n<li><a href=\"https://twitter.com/JoeStakey\">joestakey</a></li>\n<li>dipp</li>\n<li>0xf15ers (remora and twojoy)</li>\n<li><a href=\"https://twitter.com/shenwilly_\">shenwilly</a></li>\n<li><a href=\"https://twitter.com/nonfungiblenero\">Kenshin</a></li>\n<li>FSchmoede</li>\n<li>cccz</li>\n<li>minhquanym</li>\n<li>Bludya</li>\n<li><a href=\"https://twitter.com/catchup22\">catchup</a></li>\n<li><a href=\"https://www.instagram.com/riyan_rfa/\">rfa</a></li>\n<li>Cityscape</li>\n<li><a href=\"https://twitter.com/thePicodes\">Picodes</a></li>\n<li>reassor</li>\n<li><a href=\"https://twitter.com/Pedroais2/\">pedroais</a></li>\n<li>robee</li>\n<li><a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a></li>\n<li>rotcivegaf</li>\n<li><a href=\"https://github.com/TomAFrench\">TomFrenchBlockchain</a></li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li>djxploit</li>\n<li>0x4non</li>\n<li><a href=\"https://twitter.com/CertoraInc\">CertoraInc</a> (egjlmn1, <a href=\"https://twitter.com/ori_dabush\">OriDabush</a>, ItayG, and shakedwinder)</li>\n<li>0x1f8b</li>\n<li><a href=\"https://twitter.com/father0fBl0cks\">fatherOfBlocks</a></li>\n<li>sikorico</li>\n<li>Waze</li>\n<li><a href=\"https://github.com/z3s/\">z3s</a></li>\n<li>bobirichman</li>\n<li>delfin454000</li>\n<li><a href=\"https://twitter.com/hansfriese\">hansfriese</a></li>\n<li>mics</li>\n<li><a href=\"https://instagram.com/vanensurya\">Funen</a></li>\n<li>Kumpa</li>\n<li><a href=\"https://twitter.com/jah_s3\">jah</a></li>\n<li><a href=\"https://twitter.com/berndartmueller\">berndartmueller</a></li>\n<li>0x1337</li>\n<li><a href=\"https://twitter.com/_Czar102\">Czar102</a></li>\n<li>eccentricexit</li>\n<li><a href=\"https://twitter.com/wookiemad\">MadWookie</a></li>\n<li>hyh</li>\n<li><a href=\"https://twitter.com/SeanEmile\">seanamani</a></li>\n<li>dirk_y</li>\n<li>radoslav11</li>\n<li>sorrynotsorry</li>\n<li><a href=\"https://twitter.com/tamjid0x01\">Aits</a></li>\n<li>242</li>\n<li>cryptphi</li>\n<li><a href=\"https://twitter.com/BouSalman\">BouSalman</a></li>\n<li>AlleyCat</li>\n<li>JDeryl</li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li>RagePit</li>\n<li>jayjonah8</li>\n<li>m9800</li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/Throt7le\">throttle</a></li>\n<li>_Adam</li>\n<li>TerrierLover</li>\n<li>0xkatana</li>\n<li>samruna</li>\n<li><a href=\"https://twitter.com/0xNazgul\">0xNazgul</a></li>\n<li>simon135</li>\n<li>DavidGialdi</li>\n<li><a href=\"https://twitter.com/igncarmona\">ignacio</a></li>\n<li><a href=\"https://github.com/htadashi\">Tadashi</a></li>\n<li><a href=\"https://twitter.com/_0v3rf10w\">0v3rf10w</a></li>\n<li><a href=\"https://twitter.com/fitraldys\">Fitraldys</a></li>\n<li><a href=\"https://www.linkedin.com/in/jonatas-cmartins/\">jonatascm</a></li>\n<li>peritoflores</li>\n<li>0x52</li>\n<li>ACai</li>\n<li>kebabsec (okkothejawa and <a href=\"https://twitter.com/FlameHorizon1\">FlameHorizon</a>)</li>\n<li><a href=\"https://twitter.com/ynnadt1\">ynnad</a></li>\n<li>PPrieditis</li>\n<li>crispymangoes</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/HardlyDifficult\">HardlyDifficult</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 13 unique vulnerabilities. Of these vulnerabilities, 3 received a risk rating in the category of HIGH severity and 10 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 67 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 59 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-05-cally\">C4 Cally contest repository</a>, and is composed of 2 smart contracts written in the Solidity programming language and includes 439 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-3\" style=\"position:relative;\"><a href=\"#high-risk-findings-3\" aria-label=\"high risk findings 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (3)</h1>\n<h2 id=\"h-01-no-revert-on-transfer-erc20-tokens-can-be-drained\" style=\"position:relative;\"><a href=\"#h-01-no-revert-on-transfer-erc20-tokens-can-be-drained\" aria-label=\"h 01 no revert on transfer erc20 tokens can be drained permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/89\">[H-01] no-revert-on-transfer ERC20 tokens can be drained</a></h2>\n<p><em>Submitted by Ruhum, also found by oyc</em>109 and smiling<em>heretic</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L198-L200\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L198-L200</a></p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Some ERC20 tokens don’t throw but just return false when a transfer fails. This can be abused to trick the <code>createVault()</code> function to initialize the vault without providing any tokens. A good example of such a token is <em>ZRX</em>: <a href=\"https://etherscan.io/address/0xe41d2489571d322189246dafa5ebde1f4699f498#code#L64\">Etherscan code</a></p>\n<p>When such a vault is initialized, another user can both buy and exercise the option without ever receiving any funds. The creator of the vault does receive the buyer’s Ether tho. So it can cause a loss of funds.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The trick is to create a vault with an ERC20 token but use ERC721 as the vault’s type. Then, instead of calling <code>safeTransferFrom()</code> the function calls <code>transferFrom()</code> which won’t catch the token returning false.</p>\n<p>Here’s a test that showcases the issue:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// CreateVault.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testStealFunds</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// address of 0x on mainnet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">t</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0xE41d2489571d322189246DaFA5ebDe1F4699F498</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">babe</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">t</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">babe</span><span class=\"mtk1\">) == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">c</span><span class=\"mtk1\">.</span><span class=\"mtk11\">createVault</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100</span><span class=\"mtk1\">, </span><span class=\"mtk12\">t</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">TokenType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC721</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check that neither the Cally contract nor the vault creator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// had any 0x tokens</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">t</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">babe</span><span class=\"mtk1\">) == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">t</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">c</span><span class=\"mtk1\">)) == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check whether vault was created properly</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Vault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">v</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">c</span><span class=\"mtk1\">.</span><span class=\"mtk11\">vaults</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">v</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">t</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">v</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenIdOrAmount</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">100</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// So now there&#39;s a vault for 100 0x tokens although the Cally contract doesn&#39;t</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// have any.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// If someone buys &amp; exercises the option they won&#39;t receive any tokens.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">premium</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0.025</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">strike</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">c</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;shouldn&#39;t have any balance at the beginning&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;not enough balance&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">optionId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">c</span><span class=\"mtk1\">.</span><span class=\"mtk12\">buyOption</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">premium</span><span class=\"mtk1\">}(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">c</span><span class=\"mtk1\">.</span><span class=\"mtk12\">exercise</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">strike</span><span class=\"mtk1\">}(</span><span class=\"mtk12\">optionId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// buyer of option (`address(this)`) got zero 0x tokens</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// But buyer lost their Ether</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">t</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">c</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;got some money&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>To run it, you need to use forge’s forking mode: <code>forge test --fork-url &#x3C;alchemy/infura URL> --match testStealFunds</code></p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>I think the easiest solution is to use <code>safeTransferFrom()</code> when the token is of type ERC721. Since the transfer is at the end of the function there shouldn’t be any risk of reentrancy. If someone passes an ERC20 address with type ERC721, the <code>safeTransferFrom()</code> call would simply fail since that function signature shouldn’t exist on ERC20 tokens.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/89#issuecomment-1128776685\">outdoteth (Cally) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p>the fix for this issue is here; <a href=\"https://github.com/outdoteth/cally/pull/4\">https://github.com/outdoteth/cally/pull/4</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/89#issuecomment-1130790694\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>This is a great report. I appreciate the clear test showcasing the issue well, and using a real token example.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-02-inefficiency-in-the-dutch-auction-due-to-lower-duration\" style=\"position:relative;\"><a href=\"#h-02-inefficiency-in-the-dutch-auction-due-to-lower-duration\" aria-label=\"h 02 inefficiency in the dutch auction due to lower duration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/138\">[H-02] Inefficiency in the Dutch Auction due to lower duration</a></h2>\n<p><em>Submitted by hubble, also found by Hawkeye and sseefried</em></p>\n<p>The vulnerability or bug is in the implementation of the function getDutchAuctionStrike()\nThe AUCTION_DURATION is defined as 24 hours, and consider that the dutchAuctionReserveStrike (or reserveStrike) will never be set to 0 by user.</p>\n<p>Now if a vault is created with startingStrike value of 55 and reserveStrike of 13.5 , the auction price will drop from 55 to 13.5 midway at ~12 hours.\nSo, after 12 hours from start of auction, the rate will be constant at reserveStrike of 13.5, and remaining time of 12 hours of auction is a waste.</p>\n<p>Some other examples :</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">startStrike, reserveStrike, time-to-reach-reserveStrike</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">55 , 13.5  , ~12 hours</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">55 , 5     , ~16.7 hours</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">55 , 1.5   , ~20 hours</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">5  , 1.5   , ~11 hours</span></span></code></pre>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The impact is high wrt Usability, where users have reduced available time to participate in the auction (when price is expected to change).\nThe vault-Creators or the option-Buyers may or may not be aware of this inefficiency, i.e., how much effective time is available for auction.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Contract : Cally.sol\nFunction : getDutchAuctionStrike ()</p>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The function getDutchAuctionStrike() can be modified such that price drops to the reserveStrike exactly at 24 hours from start of auction.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">        /*</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            delta = max(auctionEnd - currentTimestamp, 0)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            progress = delta / auctionDuration</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            auctionStrike = progress^2 * (startingStrike - reserveStrike)             &lt;&lt; Changes here</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            strike = auctionStrike + reserveStrike                                    &lt;&lt; Changes here</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        */</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 delta = auctionEndTimestamp &gt; block.timestamp ? auctionEndTimestamp - block.timestamp : 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 progress = (1e18 * delta) / AUCTION_DURATION;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 auctionStrike = (progress * progress * (startingStrike-reserveStrike)) / (1e18 * 1e18);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        strike = auctionStrike + reserveStrike;</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/138#issuecomment-1126980017\">outdoteth (Cally) confirmed, disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>We think this should be bumped to high severity. It would be easy for a user to create an auction that declines significantly faster than what they would have assumed - even over 1 or 2 blocks. It makes no sense for the auction to ever behave in this way and would result in options getting filled at very bad prices for the creator of the vault.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/138#issuecomment-1128737816\">outdoteth (Cally) resolved</a>:</strong></p>\n<blockquote>\n<p>The fix for this issue is here: <a href=\"https://github.com/outdoteth/cally/pull/2\">https://github.com/outdoteth/cally/pull/2</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/138#issuecomment-1133408636\">HardlyDifficult (judge) increased severity to High and commented</a>:</strong></p>\n<blockquote>\n<p>The sponsor comment here makes sense. Agree with (1) High since this can potentially be very detrimental to the promise of this protocol.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-03-wp-h0-fake-balances-can-be-created-for-not-yet-existing-erc20-tokens-which-allows-attackers-to-set-traps-to-steal-funds-from-future-users\" style=\"position:relative;\"><a href=\"#h-03-wp-h0-fake-balances-can-be-created-for-not-yet-existing-erc20-tokens-which-allows-attackers-to-set-traps-to-steal-funds-from-future-users\" aria-label=\"h 03 wp h0 fake balances can be created for not yet existing erc20 tokens which allows attackers to set traps to steal funds from future users permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/225\">[H-03] [WP-H0] Fake balances can be created for not-yet-existing ERC20 tokens, which allows attackers to set traps to steal funds from future users</a></h2>\n<p><em>Submitted by WatchPug, also found by 0xsanson, BondiPestControl, and IllIllI</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L158-L201\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L158-L201</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">createVault</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenIdOrAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Vault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vault</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">Vault</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// vault index should always be odd</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vaultIndex</span><span class=\"mtk1\"> += </span><span class=\"mtk7\">2</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vaultIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_vaults</span><span class=\"mtk1\">[</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// give msg.sender vault token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NewVault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// transfer the NFTs or ERC20s to the contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">TokenType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC721</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ? </span><span class=\"mtk11\">ERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenIdOrAmount</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        : </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenIdOrAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L23-L34\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L23-L34</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/utils/SafeTransferLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Cally</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ReentrancyGuard</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Ownable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">using</span><span class=\"mtk1\"> </span><span class=\"mtk12\">SafeTransferLib</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ERC20</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span></code></pre>\n<p>When creating a new vault, solmate’s <code>SafeTransferLib</code> is used for pulling <code>vault.token</code> from the caller’s account, this issue won’t exist if OpenZeppelin’s SafeERC20 is used instead.</p>\n<p>That’s because there is a subtle difference between the implementation of solmate’s <code>SafeTransferLib</code> and OZ’s <code>SafeERC20</code>:</p>\n<p>OZ’s <code>SafeERC20</code> checks if the token is a contract or not, solmate’s <code>SafeTransferLib</code> does not.</p>\n<p>See: <a href=\"https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol#L9\">https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol#L9</a></p>\n<blockquote>\n<p>Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.</p>\n</blockquote>\n<p>As a result, when the token’s address has no code, the transaction will just succeed with no error.</p>\n<p>This attack vector was made well-known by the qBridge hack back in Jan 2022.</p>\n<p>For our project, this alone still won’t be a problem, a vault created and wrongfully accounted for a certain amount of balance for a non-existing token won’t be much of a problem, there will be no fund loss as long as the token stays that way (being non-existing).</p>\n<p>However, it’s becoming popular for protocols to deploy their token across multiple networks and when they do so, a common practice is to deploy the token contract from the same deployer address and with the same nonce so that the token address can be the same for all the networks.</p>\n<p>For example: $1INCH is using the same token address for both Ethereum and BSC; Gelato's$GEL token is using the same token address for Ethereum, Fantom and Polygon.</p>\n<p>A sophisticated attacker can exploit it by taking advantage of that and setting traps on multiple potential tokens to steal from the future users that deposits with such tokens.</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Given:</p>\n<ul>\n<li>ProjectA has TokenA on another network;</li>\n<li>ProjectB has TokenB on another network;</li>\n<li>ProjectC has TokenC on another network;</li>\n<li>The attacker <code>createVault()</code> for <code>TokenA</code>, <code>TokenB</code>, and <code>TokenC</code> with <code>10000e18</code> as <code>tokenIdOrAmount</code> each;</li>\n<li>A few months later, ProjectB lunched <code>TokenB</code> on the local network at the same address;</li>\n<li>Alice created a vault with <code>11000e18 TokenB</code>;</li>\n<li>The attacker called <code>initiateWithdraw()</code> and then <code>withdraw()</code> to receive <code>10000e18 TokenB</code>.</li>\n</ul>\n<p>In summary, one of the traps set by the attacker was activated by the deployment of  <code>TokenB</code> and Alice was the victim. As a result, <code>10000e18 TokenB</code> was stolen by the attacker.</p>\n<h3 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Consider using OZ’s <code>SafeERC20</code> instead.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/225#issuecomment-1129066964\">outdoteth (Cally) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p>this issue has been fixed here: <a href=\"https://github.com/outdoteth/cally/pull/5\">https://github.com/outdoteth/cally/pull/5</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/225#issuecomment-1133421876\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Great catch and the potential attack is very clearly explained. Although the window for an attack like this would not be common, it’s an easy trap to setup and likely would occur as some point if Cally is planning to support multiple networks.</p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-10\" style=\"position:relative;\"><a href=\"#medium-risk-findings-10\" aria-label=\"medium risk findings 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (10)</h1>\n<h2 id=\"m-01-owner-can-modify-the-feerate-on-existing-vaults-and-steal-the-strike-value-on-exercise\" style=\"position:relative;\"><a href=\"#m-01-owner-can-modify-the-feerate-on-existing-vaults-and-steal-the-strike-value-on-exercise\" aria-label=\"m 01 owner can modify the feerate on existing vaults and steal the strike value on exercise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/47\">[M-01] Owner can modify the feeRate on existing vaults and steal the strike value on exercise</a></h2>\n<p><em>Submitted by IllIllI, also found by</em> <em>Adam, 0x52, 0xf15ers, 0xsanson, berndartmueller, Bludya, BondiPestControl, catchup, crispymangoes, Czar102, eccentricexit, ellahi, GimelSec, hake, horsefacts, hubble, joestakey, Kumpa, pedroais, peritoflores, reassor, shenwilly, shung, smiling</em>heretic, sseefried, and throttle_</p>\n<p>Owner can steal the exercise cost which should have gone to the option seller</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>There are no restrictions on when the owner can set the <code>feeRate</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">117</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @notice Sets the fee that is applied on exercise</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">118</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @param feeRate_ The new fee rate: fee = 1% = (1 / 100) * 1e18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">119</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setFee</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">feeRate_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">120</span><span class=\"mtk1\">           </span><span class=\"mtk12\">feeRate</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">feeRate_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">121</span><span class=\"mtk1\">       }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L117-L121\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L117-L121</a></p>\n<p>By using a rate that consumes the exercise cost, the owner can steal Ether from the seller:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">282</span><span class=\"mtk1\">           </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fee</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">283</span><span class=\"mtk1\">           </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">feeRate</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">284</span><span class=\"mtk1\">               </span><span class=\"mtk12\">fee</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">feeRate</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">285</span><span class=\"mtk1\">               </span><span class=\"mtk12\">protocolUnclaimedFees</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">fee</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">286</span><span class=\"mtk1\">           }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">287</span><span class=\"mtk1\">   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">288</span><span class=\"mtk1\">           </span><span class=\"mtk3\">// increment vault beneficiary&#39;s ETH balance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">289</span><span class=\"mtk1\">           </span><span class=\"mtk12\">ethBalance</span><span class=\"mtk1\">[</span><span class=\"mtk11\">getVaultBeneficiary</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">)] += </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">fee</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L282-L289\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L282-L289</a></p>\n<p>The owner can wait for a particularly large-value NFT, snipe that one option, then retire</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Fix the fee rate per vault during vault creation</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/47#issuecomment-1129124229\">outdoteth (Cally) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p>issue is fixed here: <a href=\"https://github.com/outdoteth/cally/pull/8\">https://github.com/outdoteth/cally/pull/8</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/47#issuecomment-1130869666\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>This is a valid concern. The owner could abuse this to capture much more ETH than was intended. It assumes that the owner is malicious or compromised and does not introduce any more risk than an upgradeable contract would have.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-it-shouldnt-be-possible-to-create-a-vault-with-cally-own-token\" style=\"position:relative;\"><a href=\"#m-02-it-shouldnt-be-possible-to-create-a-vault-with-cally-own-token\" aria-label=\"m 02 it shouldnt be possible to create a vault with cally own token permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/224\">[M-02] It shouldn’t be possible to create a vault with Cally’ own token</a></h2>\n<p><em>Submitted by p4st13r4, also found by GimelSec, TrungOre, and VAD37</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L193\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L193</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L199\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L199</a></p>\n<h3 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Affected code:</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L193\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L193</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L199\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L199</a></li>\n</ul>\n<p>Currently it’s possible to create an ERC-721 vault using Cally’ own address as <code>token</code>, and using the freshly minted vault id as <code>tokenIdOrAmount</code>. This results in a new vault whose ownership is passed to Cally contract immediately upon creation.</p>\n<p>The vault allows users to perform <code>buyOption</code> and increase the ETH balance of the Cally contract itself, which is still the vault beneficiary. As soon as an user calls <code>exercise</code>, she will receive the <code>vault.tokenIdOrAmount</code> in exchange, which in this case coincides with the vault nft. However this is of no good because the final user may just initiate a withdrawal, which will:</p>\n<ul>\n<li>always fail because the vault id is burned (<a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L335\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L335</a>) and then transferred back to the user (<a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L344\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L344</a>)</li>\n<li>leave all the ETH unredemable in Cally contract</li>\n</ul>\n<p>So the vault will be unusable and the ETH deposited by users to buy/exercise options will remain locked in Cally contract</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ul>\n<li>Current vault id is, let’s say, 11</li>\n<li>User deploys a vault with Cally’ address as <code>token</code> and <code>13</code> as <code>tokenIdOrAmount</code></li>\n<li>Since <code>createVault()</code> mints the vault token to the user, and then transfers the underlying address from the user, an user is able to create a vault with something she doesn’t own at the moment of the <code>createVault()</code> function call, because it’s created while the function runs</li>\n<li>The vault <code>13</code> is pretty limited in functionality, because Cally’ smart contract is the owner</li>\n<li>However, users can still buy options: so Alice and Bob deposit their premiums</li>\n<li>Whoever <code>exercise</code> the active option, becomes the vault owner now; this is of no good because no one can actually call <code>withdraw()</code> as it will always revert, and no one can recover the ETH deposited by Alice and Bob as they are locked forever</li>\n</ul>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add the following check at the start of <code>createVault()</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Cant use Cally as token&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/224#issuecomment-1127451866\">outdoteth (Cally) confirmed, disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>This is an exploit that requires users to actively make a very precise and niche mistake. should be medium severity in our opinion.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/224#issuecomment-1129139902\">outdoteth (Cally) resolved</a>:</strong></p>\n<blockquote>\n<p>fix for this issue is here: <a href=\"https://github.com/outdoteth/cally/pull/10\">https://github.com/outdoteth/cally/pull/10</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/224#issuecomment-1133042663\">HardlyDifficult (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Copying in the POC from GimelSec in #244 because it’s an interesting attack to consider for this issue as well.</p>\n<ol>\n<li>\n<p>Alice (Attacker) pack 2 transactions into same block:</p>\n<ul>\n<li>\n<p>first transaction: calls <code>createVault</code> to vault a NFT which worth 100 ETH, with parameters:</p>\n<ul>\n<li><code>dutchAuctionStartingStrikeIndex</code> is set to 0 (which <code>strikeOptions</code> is 1 ETH)</li>\n<li>a long <code>durationDays</code>, e.g. <code>255</code> days</li>\n</ul>\n</li>\n<li>then Alice will get a <code>vaultId 1</code> token, and Alice do another transaction: call <code>buyOption(1)</code> to get a <code>optionId 2</code> token</li>\n</ul>\n</li>\n<li>Alice re-vault the <code>vaultId 1</code> token with strike 89 ETH, and get a <code>vaultId 3</code> token</li>\n<li>Bob see that the auction of <code>vaultId 3</code> token is 89 ETH, but the <code>vaultId 3</code> token can get the NFT which worth 100 ETH, so Bob pays 89 ETH, calls <code>buyOption(3)</code>, and <code>exercise(4)</code> to get the <code>vaultId 1</code> token. Then, Bob calls <code>initiateWithdraw(1)</code> and waits for the <code>optionId 2</code> token to expire (which <code>durationDays</code> is set to <code>255</code> days in step 1).</li>\n<li>Alice monitors that someone bought the <code>vaultId 1</code> token, then Alice quickly calls <code>exercise(2)</code>. Finally, Alice just pays Bob 1 ETH, and gets the NFT back. Alice also gets 89 ETH which is paid by Bob from the <code>vaultId 3</code> token.</li>\n</ol>\n<p>I agree with (2) Medium for this issue. It can be abused, but the impacted parties can clearly see this is an attempt to subvert the system in some way (a vault of a vault with an NFT, instead of a single value with an NFT as expected). That should be a red flag for Bob in the example above.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-users-may-accidentally-overpay-in-buyoption-and-the-excess-will-be-paid-to-the-vault-creator\" style=\"position:relative;\"><a href=\"#m-03-users-may-accidentally-overpay-in-buyoption-and-the-excess-will-be-paid-to-the-vault-creator\" aria-label=\"m 03 users may accidentally overpay in buyoption and the excess will be paid to the vault creator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/84\">[M-03] User’s may accidentally overpay in <code>buyOption()</code> and the excess will be paid to the vault creator</a></h2>\n<p><em>Submitted by BondiPestControl, also found by 0xf15ers, berndartmueller, cccz, csanuragjain, dipp, GimelSec, hake, horsefacts, IllIllI, jayjonah8, m9800, MadWookie, MiloTruck, pedroais, Ruhum, throttle, and VAD37</em></p>\n<p>It is possible for a user purchasing an option to accidentally overpay the premium during <code>buyOption()</code>.</p>\n<p>Any excess funds paid for in excess of the premium will be transferred to the vault creator.</p>\n<p>The premium is fixed at the time the vault is first created by <code>vault.premiumIndex</code>. Hence there is no need to allow users to overpay since there will be no benefit.</p>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><code>buyOption()</code> allows <code>msg.value > premium</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">premium</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getPremium</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">premium</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Incorrect ETH amount sent&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider modifying the check such that the <code>msg.value</code> is exactly equal to the <code>premuim</code>. e.g.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">premium</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getPremium</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">premium</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Incorrect ETH amount sent&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/84#issuecomment-1129129122\">outdoteth (Cally) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p>this issue is fixed in: <a href=\"https://github.com/outdoteth/cally/pull/9\">https://github.com/outdoteth/cally/pull/9</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/84#issuecomment-1133430227\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with 2 (Medium) for this. The issue doesn’t really open the door for an attack, except for maybe via a malicious frontend. But it could potentially leak value in terms of over compensating the vault creator.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/84#issuecomment-1149503319\">HickupHH3 (warden) commented</a>:</strong></p>\n<blockquote>\n<p>QA report #182 should have its issue bumped up and marked as a duplicate IMO</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-vaults-steal-rebasing-tokens-rewards\" style=\"position:relative;\"><a href=\"#m-04-vaults-steal-rebasing-tokens-rewards\" aria-label=\"m 04 vaults steal rebasing tokens rewards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/50\">[M-04] Vaults steal rebasing tokens’ rewards</a></h2>\n<p><em>Submitted by IllIllI, also found by horsefacts and smiling</em>heretic_</p>\n<p>Rebasing tokens are tokens that have each holder’s <code>balanceof()</code> increase over time. Aave aTokens are an example of such tokens.</p>\n<h3 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>If rebasing tokens are used as the vault token, rewards accrue to the vault and cannot be withdrawn by either the option seller or the owner, and remain locked forever.</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The amount ‘available’ for withdrawal comes from an input parameter and is stored for later operations:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">173</span><span class=\"mtk1\">           </span><span class=\"mtk12\">Vault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vault</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">Vault</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">174</span><span class=\"mtk12\">               tokenIdOrAmount:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenIdOrAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">175</span><span class=\"mtk12\">               token:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">176</span><span class=\"mtk12\">               premiumIndex:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">premiumIndex</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">177</span><span class=\"mtk12\">               durationDays:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">durationDays</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">178</span><span class=\"mtk12\">               dutchAuctionStartingStrikeIndex:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dutchAuctionStartingStrikeIndex</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">179</span><span class=\"mtk12\">               currentExpiration:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">180</span><span class=\"mtk12\">               isExercised:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">181</span><span class=\"mtk12\">               isWithdrawing:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">182</span><span class=\"mtk12\">               tokenType:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenType</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">183</span><span class=\"mtk12\">               currentStrike:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">184</span><span class=\"mtk12\">               dutchAuctionReserveStrike:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dutchAuctionReserveStrike</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">185</span><span class=\"mtk1\">           });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">186</span><span class=\"mtk1\">   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">187</span><span class=\"mtk1\">           </span><span class=\"mtk3\">// vault index should always be odd</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">188</span><span class=\"mtk1\">           </span><span class=\"mtk12\">vaultIndex</span><span class=\"mtk1\"> += </span><span class=\"mtk7\">2</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">189</span><span class=\"mtk1\">           </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vaultIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">190</span><span class=\"mtk1\">           </span><span class=\"mtk12\">_vaults</span><span class=\"mtk1\">[</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">191</span><span class=\"mtk1\">   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">192</span><span class=\"mtk1\">           </span><span class=\"mtk3\">// give msg.sender vault token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">193</span><span class=\"mtk1\">           </span><span class=\"mtk11\">_mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">194</span><span class=\"mtk1\">   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">195</span><span class=\"mtk1\">           </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NewVault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">196</span><span class=\"mtk1\">   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">197</span><span class=\"mtk1\">           </span><span class=\"mtk3\">// transfer the NFTs or ERC20s to the contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">198</span><span class=\"mtk1\">           </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">TokenType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC721</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">199</span><span class=\"mtk1\">               ? </span><span class=\"mtk11\">ERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenIdOrAmount</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">200</span><span class=\"mtk1\">               : </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenIdOrAmount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L173-L200\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L173-L200</a></p>\n<p>The amount actually available grows over time and is only known at the time of withdrawal. The option withdrawal/exercise use the original amount:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">345</span><span class=\"mtk1\">               : </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenIdOrAmount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L345\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L345</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">296</span><span class=\"mtk1\">               : </span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenIdOrAmount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L296\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L296</a></p>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Track total amounts currently deposited and allow vault creators to withdraw excess on a pro-rata basis</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/50#issuecomment-1126904209\">outdoteth (Cally) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>This is technically an issue however we have no intention of supporting rebase tokens</p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-expiration-calculation-overflows-if-call-option-duration--195-days\" style=\"position:relative;\"><a href=\"#m-05-expiration-calculation-overflows-if-call-option-duration--195-days\" aria-label=\"m 05 expiration calculation overflows if call option duration  195 days permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/16\">[M-05] Expiration calculation overflows if call option duration ≥ 195 days</a></h2>\n<p><em>Submitted by hickuphh3, also found by BondiPestControl, GimelSec, sseefried, and VAD37</em></p>\n<p><code>vault.durationDays</code> is of type <code>uint8</code>, thus allowing a maximum value of 255. <code>1 days = 86400</code>, thus fitting into a <code>uint24</code>. Solc creates a temporary variable to hold the result of the intermittent multiplication <code>vault.durationDays * 1 days</code> using the data type of the larger operand.</p>\n<p>In this case, the intermittent data type used would be <code>uint24</code>, which has a maximum value of <code>2**24 - 1 = 16777215</code>. The maximum number allowable before overflow achieved is therefore <code>(2**24 - 1) / 86400 = 194</code>.</p>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Insert this test case into <a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/test/units/BuyOption.t.sol\">BuyOption.t.sol</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testCannotBuyDueToOverflow</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">babe</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bayc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">babe</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// duration of 195 days</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">c</span><span class=\"mtk1\">.</span><span class=\"mtk11\">createVault</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bayc</span><span class=\"mtk1\">), </span><span class=\"mtk12\">premiumIndex</span><span class=\"mtk1\">, </span><span class=\"mtk7\">195</span><span class=\"mtk1\">, </span><span class=\"mtk12\">strikeIndex</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">TokenType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC721</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">expectRevert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stdError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">arithmeticError</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">c</span><span class=\"mtk1\">.</span><span class=\"mtk12\">buyOption</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">premium</span><span class=\"mtk1\">}(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Then run</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">forge test --match-contract TestBuyOption --match-test testCannotBuyDueToOverflow</span></span></code></pre>\n<h3 id=\"tidbit\" style=\"position:relative;\"><a href=\"#tidbit\" aria-label=\"tidbit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tidbit</h3>\n<p>This was the 1 high-severity bug that I wanted to mention at the end of the <a href=\"https://youtu.be/up9eqFRLgMQ?t=5722\">C4 TrustX showcase</a> but unfortunately could not due to a lack of time :( It can be found in the <a href=\"https://gist.github.com/HickupHH3/d214cfe6e4d003f428a63ae7d127af2d\">vulnerable lottery contract</a> on L39. Credits to Pauliax / Thunder for the recommendation and raising awareness of this bug =p</p>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<p><a href=\"https://muellerberndt.medium.com/building-a-secure-nft-gaming-experience-a-herdsmans-diary-1-91aab11139dc\">Article</a></p>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Cast the multiplication into <code>uint32</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currentExpiration</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">) + </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">durationDays</span><span class=\"mtk1\">) * </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">days</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/16#issuecomment-1126902283\">outdoteth (Cally) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Agree that this is high risk - a user can unintentionally create vaults that would never have been able to have been filled and result in them losing funds because the vault creation was useless. They then also have to initiate a withdraw and then actually withdraw before they can create another vault. </p>\n<p>In terms of gas prices at 100 gwei (which it frequently was a few months ago) the total gas cost of this bug/incorrect vault creation is not insignificant.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/16#issuecomment-1128754365\">outdoteth (Cally) resolved</a>:</strong></p>\n<blockquote>\n<p>This issue is fixed here; <a href=\"https://github.com/outdoteth/cally/pull/3\">https://github.com/outdoteth/cally/pull/3</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/16#issuecomment-1133498030\">HardlyDifficult (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>This is an easy way someone could create a vault where it’s not possible to buy an option, and without using an unreasonably high duration value. If this were to occur, the vault creator could immediately <code>initiateWithdraw</code> and then <code>withdraw</code>. No time delay is required and the only funds lost is the gas cost of those 3 transactions.</p>\n<p>Lowering to 2 (Medium) since there’s an easy recovery and no assets lost.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-06-owner-can-set-the-feerate-to-be-greater-than-100-and-cause-all-future-calls-to-exercise-to-revert\" style=\"position:relative;\"><a href=\"#m-06-owner-can-set-the-feerate-to-be-greater-than-100-and-cause-all-future-calls-to-exercise-to-revert\" aria-label=\"m 06 owner can set the feerate to be greater than 100 and cause all future calls to exercise to revert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/48\">[M-06] Owner can set the feeRate to be greater than 100% and cause all future calls to <code>exercise</code> to revert</a></h2>\n<p><em>Submitted by IllIllI, also found by 0xDjango, ACai, antonttc, BowTiedWardens, Cityscape, defsec, dipp, FSchmoede, GimelSec, gzeon, hickuphh3, hubble, joestakey, Kenshin, m9800, MiloTruck, RagePit, Ruhum, shenwilly, TomFrenchBlockchain, and WatchPug</em></p>\n<h3 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The owner can force options to be non-exercisable, collecting premium without risking the loss of their NFT/tokens</p>\n<h3 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>After a buyer buys an option owned by the owner, the owner can change the fee rate to be close to <code>type(uint256).max</code>, which will cause the subtraction below to always underflow, preventing the exercise of the option. Once the option expires, the owner can change the fee back and wait for another buyer</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">288</span><span class=\"mtk1\">           </span><span class=\"mtk3\">// increment vault beneficiary&#39;s ETH balance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">289</span><span class=\"mtk1\">           </span><span class=\"mtk12\">ethBalance</span><span class=\"mtk1\">[</span><span class=\"mtk11\">getVaultBeneficiary</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">)] += </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">fee</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L288-L289\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L288-L289</a></p>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add reasonable fee rate bounds checks in the <code>setFee()</code> function</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/48#issuecomment-1129088954\">outdoteth (Cally) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p>this issue is fixed here; <a href=\"https://github.com/outdoteth/cally/pull/7\">https://github.com/outdoteth/cally/pull/7</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-07-lack-of-0-amount-check-allows-malicious-user-to-create-infinite-vaults\" style=\"position:relative;\"><a href=\"#m-07-lack-of-0-amount-check-allows-malicious-user-to-create-infinite-vaults\" aria-label=\"m 07 lack of 0 amount check allows malicious user to create infinite vaults permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/91\">[M-07] Lack of 0 amount check allows malicious user to create infinite vaults</a></h2>\n<p><em>Submitted by 0xDjango</em></p>\n<p>A griefer is able to create as many vaults as they want by simply calling <code>createVault()</code> with <code>tokenIdOrAmount = 0</code>. This will most likely pose problems on the front-end of the Cally protocol because there will be a ridiculously high number of malicious vaults displayed to actual users.</p>\n<p>I define these vaults as malicious because it is possible that a user accidently buys a call on this vault which provides 0 value in return. Overall, the presence of zero-amount vaults is damaging to Cally’s product image and functionality.</p>\n<h3 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ul>\n<li>User calls <code>createVault(0,,,,);</code> with an ERC20 type.</li>\n<li>There is no validation that <code>amount > 0</code></li>\n<li>Function will complete successfully, granting the new vault NFT to the caller.</li>\n<li>Cally protocol is filled with unwanted 0 amount vaults.</li>\n</ul>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add the simple check <code>require(tokenIdOrAmount > 0, \"Amount must be greater than 0\");</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/91#issuecomment-1126912009\">outdoteth (Cally) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>This check should only be applied on ERC20 tokens because ERC721 tokens can still have tokenIds that have ID’s with a value of 0.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/91#issuecomment-1129154306\">outdoteth (Cally) resolved</a>:</strong></p>\n<blockquote>\n<p>this issue is fixed here: <a href=\"https://github.com/outdoteth/cally/pull/12\">https://github.com/outdoteth/cally/pull/12</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-vault-is-not-compatible-with-fee-tokens-and-vaults-with-such-tokens-could-be-exploited\" style=\"position:relative;\"><a href=\"#m-08-vault-is-not-compatible-with-fee-tokens-and-vaults-with-such-tokens-could-be-exploited\" aria-label=\"m 08 vault is not compatible with fee tokens and vaults with such tokens could be exploited permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/61\">[M-08] Vault is Not Compatible with Fee Tokens and Vaults with Such Tokens Could Be Exploited</a></h2>\n<p><em>Submitted by 0x1337, also found by 0x52, 0xDjango, 0xsanson, berndartmueller, BondiPestControl, BowTiedWardens, cccz, dipp, GimelSec, hake, hickuphh3, horsefacts, hubble, IllIllI, MaratCerby, MiloTruck, minhquanym, PPrieditis, reassor, shenwilly, smiling</em>heretic, TrungOre, VAD37, and WatchPug_</p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L198-L200\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L198-L200</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L294-L296\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L294-L296</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L343-L345\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L343-L345</a></p>\n<h3 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Some ERC20 tokens charge a transaction fee for every transfer (used to encourage staking, add to liquidity pool, pay a fee to contract owner, etc.). If any such token is used in the <code>createVault()</code> function, either the token cannot be withdrawn from the contract (due to insufficient token balance), or it could be exploited by other such token holders and the <code>Cally</code> contract would lose economic value and some users would be unable to withdraw the underlying asset.</p>\n<h3 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Plenty of ERC20 tokens charge a fee for every transfer (e.g. Safemoon and its forks), in which the amount of token received is less than the amount being sent. When a fee token is used as the <code>token</code> in the <code>createVault()</code> function, the amount received by the contract would be less than the amount being sent. To be more precise, the increase in the <code>cally</code> contract token balance would be less than <code>vault.tokenIdOrAmount</code> for such ERC20 token because of the fee.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">        vault.tokenType == TokenType.ERC721</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            ? ERC721(vault.token).transferFrom(msg.sender, address(this), vault.tokenIdOrAmount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            : ERC20(vault.token).safeTransferFrom(msg.sender, address(this), vault.tokenIdOrAmount);</span></span></code></pre>\n<p>The implication is that both the <code>exercise()</code> function and the <code>withdraw()</code> function are guaranteed to revert if there’s no other vault in the contract that contains the same fee tokens, due to insufficient token balance in the <code>Cally</code> contract.</p>\n<p>When an attacker observes that a vault is being created that contains such fee tokens, the attacker could create a new vault himself that contains the same token, and then withdraw the same amount. Essentially the <code>Cally</code> contract would be paying the transfer fee for the attacker because of how the token amount is recorded. This causes loss of user fund and loss of value from the <code>Cally</code> contract. It would make economic sense for the attacker when the fee charged by the token accrue to the attacker. The attacker would essentially use the <code>Cally</code> contract as a conduit to generate fee income.</p>\n<h3 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Recommend disallowing fee tokens from being used in the vault. This can be done by adding a <code>require()</code> statement to check that the amount increase of the <code>token</code> balance in the <code>Cally</code> contract is equal to the amount being sent by the caller of the <code>createVault()</code> function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/61#issuecomment-1126980897\">outdoteth (Cally) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>reference issue: <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/39\">https://github.com/code-423n4/2022-05-cally-findings/issues/39</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/61#issuecomment-1135276611\">HardlyDifficult (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>This is a good description of the potential issue when a fee on transfer token is used.</p>\n<p>Lowing to 2 (Medium). See <a href=\"https://github.com/code-423n4/org/issues/3\">https://github.com/code-423n4/org/issues/3</a> for some discussion on how to consider the severity for these types of issues.</p>\n<p>The attack described does leak value, but the vault could be recovered by transferring in the delta balance so that the contract has more than enough funds in order to exercise or withdraw. That plus these types of tokens are relatively rare is why I don’t think this warrants a High severity.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-09-use-safetransferfrom-instead-of-transferfrom-for-erc721-transfers\" style=\"position:relative;\"><a href=\"#m-09-use-safetransferfrom-instead-of-transferfrom-for-erc721-transfers\" aria-label=\"m 09 use safetransferfrom instead of transferfrom for erc721 transfers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/38\">[M-09] Use safeTransferFrom instead of transferFrom for ERC721 transfers</a></h2>\n<p><em>Submitted by hickuphh3, also found by antonttc, berndartmueller, catchup, cccz, dipp, FSchmoede, GimelSec, hake, jah, jayjonah8, joestakey, kebabsec, Kenshin, Kumpa, MiloTruck, minhquanym, peritoflores, rfa, shenwilly, WatchPug, and ynnad</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L199\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L199</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L295\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L295</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L344\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L344</a></p>\n<h3 id=\"details--impact\" style=\"position:relative;\"><a href=\"#details--impact\" aria-label=\"details  impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Details &#x26; Impact</h3>\n<p>The <code>transferFrom()</code> method is used instead of <code>safeTransferFrom()</code>, presumably to save gas. I however argue that this isn’t recommended because:</p>\n<ul>\n<li><a href=\"https://docs.openzeppelin.com/contracts/4.x/api/token/erc721#IERC721-transferFrom-address-address-uint256-\">OpenZeppelin’s documentation</a> discourages the use of <code>transferFrom()</code>, use <code>safeTransferFrom()</code> whenever possible</li>\n<li>Given that any NFT can be used for the call option, there are a few NFTs (here’s an <a href=\"https://github.com/sz-piotr/eth-card-game/blob/master/src/ethereum/contracts/ERC721Market.sol#L20-L31\">example</a>) that have logic in the <code>onERC721Received()</code> function, which is only triggered in the <code>safeTransferFrom()</code> function and not in <code>transferFrom()</code></li>\n</ul>\n<h3 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Call the <code>safeTransferFrom()</code> method instead of <code>transferFrom()</code> for NFT transfers. Note that the <code>CallyNft</code> contract should inherit the <code>ERC721TokenReceiver</code> contract as a consequence.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">abstract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ERC721</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Cally&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;CALL&quot;</span><span class=\"mtk1\">), </span><span class=\"mtk12\">ERC721TokenReceiver</span><span class=\"mtk1\"> {...}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/38#issuecomment-1128776476\">outdoteth (Cally) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p>the fix for this issue is here; <a href=\"https://github.com/outdoteth/cally/pull/4\">https://github.com/outdoteth/cally/pull/4</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-10-createvault-does-not-confirm-whether-tokentype-and-tokens-type-are-the-same\" style=\"position:relative;\"><a href=\"#m-10-createvault-does-not-confirm-whether-tokentype-and-tokens-type-are-the-same\" aria-label=\"m 10 createvault does not confirm whether tokentype and tokens type are the same permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/243\">[M-10] <code>createVault()</code> does not confirm whether <code>tokenType</code> and <code>token</code>’s type are the same</a></h2>\n<p><em>Submitted by GimelSec, also found by antonttc</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L158-L201\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L158-L201</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L296\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L296</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L345\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L345</a></p>\n<h3 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>When calling <code>createVault()</code>, <code>tokenType</code> could be different from <code>token</code>’s type. If a user accidentally used the wrong <code>tokenType</code>, it could lead to two different results.</p>\n<p>If <code>token</code> is an ERC20 token and the user uses <code>TokenType.ERC721</code> as <code>tokenType</code>. It is less harmful, since <code>ERC721(vault.token).transferFrom(msg.sender, address(this), vault.tokenIdOrAmount)</code> still works when <code>vault.token</code> is actually ERC20 token.</p>\n<p>However, if <code>token</code> is an ERC721 token and the user uses <code>TokenType.ERC20</code> as <code>tokenType</code>. When doing <code>creatVault()</code>, <code>ERC20(vault.token).safeTransferFrom(msg.sender, address(this), vault.tokenIdOrAmount)</code> works fine. But when doing <code>exercise()</code> or <code>withdraw()</code>, <code>ERC20(vault.token).safeTransfer(msg.sender, vault.tokenIdOrAmount);</code> doesn’t work since ERC721 doesn’t implement <code>safeTransfer()</code> function. In consequence, the ERC721 token is frozen in the vault.</p>\n<h3 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><code>createVault()</code> does not confirm whether <code>tokenType</code> and <code>token</code>’s type are the same.\nBut the token can still be transferred into this contract. Since <code>transferFrom()</code> is implemented in ERC20 and <code>safeTransferFrom()</code> is implemented in ERC721\n<a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L158-L201\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L158-L201</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function createVault(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 tokenIdOrAmount,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address token,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint8 premiumIndex,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint8 durationDays,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint8 dutchAuctionStartingStrikeIndex,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 dutchAuctionReserveStrike,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        TokenType tokenType</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external returns (uint256 vaultId) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(premiumIndex &lt; premiumOptions.length, &quot;Invalid premium index&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(dutchAuctionStartingStrikeIndex &lt; strikeOptions.length, &quot;Invalid strike index&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(dutchAuctionReserveStrike &lt; strikeOptions[dutchAuctionStartingStrikeIndex], &quot;Reserve strike too small&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(durationDays &gt; 0, &quot;durationDays too small&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(tokenType == TokenType.ERC721 || tokenType == TokenType.ERC20, &quot;Invalid token type&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Vault memory vault = Vault({</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            tokenIdOrAmount: tokenIdOrAmount,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            token: token,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            premiumIndex: premiumIndex,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            durationDays: durationDays,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            dutchAuctionStartingStrikeIndex: dutchAuctionStartingStrikeIndex,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            currentExpiration: uint32(block.timestamp),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            isExercised: false,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            isWithdrawing: false,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            tokenType: tokenType,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            currentStrike: 0,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            dutchAuctionReserveStrike: dutchAuctionReserveStrike</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        });</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // vault index should always be odd</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vaultIndex += 2;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vaultId = vaultIndex;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _vaults[vaultId] = vault;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // give msg.sender vault token</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _mint(msg.sender, vaultId);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit NewVault(vaultId, msg.sender, token);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // transfer the NFTs or ERC20s to the contract</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vault.tokenType == TokenType.ERC721</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            ? ERC721(vault.token).transferFrom(msg.sender, address(this), vault.tokenIdOrAmount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            : ERC20(vault.token).safeTransferFrom(msg.sender, address(this), vault.tokenIdOrAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>However when doing <code>exercise()</code> or <code>withdraw()</code>, it always reverts since ERC721 doesn’t implement <code>safeTransfer()</code>. The ERC721 token is frozen in the contract.</p>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L296\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L296</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function exercise(uint256 optionId) external payable {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        …</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // transfer the NFTs or ERC20s to the exerciser</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vault.tokenType == TokenType.ERC721</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            ? ERC721(vault.token).transferFrom(address(this), msg.sender, vault.tokenIdOrAmount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            : ERC20(vault.token).safeTransfer(msg.sender, vault.tokenIdOrAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L345\">https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L345</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function withdraw(uint256 vaultId) external nonReentrant {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        …</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // transfer the NFTs or ERC20s back to the owner</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vault.tokenType == TokenType.ERC721</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            ? ERC721(vault.token).transferFrom(address(this), msg.sender, vault.tokenIdOrAmount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            : ERC20(vault.token).safeTransfer(msg.sender, vault.tokenIdOrAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Confirm whether <code>tokenType</code> and <code>token</code>’s type are the same in <code>createVault()</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/243#issuecomment-1127490806\">outdoteth (Cally) disputed, disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>ref; <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/38\">https://github.com/code-423n4/2022-05-cally-findings/issues/38</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/243#issuecomment-1136521143\">HardlyDifficult (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>There were a lot of reports recommending a similar change, but this is one of the few that points our a critical issue that could arise in the current state.</p>\n<p>Although the issue only occurs when the original vault creator makes a user error, the fact that their NFT becomes unrecoverable makes this a Medium Risk concern.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 67 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/281\">report highlighted below</a> by <strong>hubble</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/182\">VAD37</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/46\">IllIllI</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/115\">shung</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/131\">MiloTruck</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/78\">ellahi</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/7\">MaratCerby</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/232\">WatchPug</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/303\">reassor</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/192\">Picodes</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/37\">shenwilly</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/103\">0xDjango</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/159\">Bludya</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/146\">pmerkleplant</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/74\">hake</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/268\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/266\">robee</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/33\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/311\">hyh</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/292\">sseefried</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/41\">hickuphh3</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/197\">seanamani</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/276\">djxploit</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/107\">dirk_y</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/119\">Kumpa</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/153\">fatherOfBlocks</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/220\">pedroais</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/215\">catchup</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/118\">radoslav11</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/11\">csanuragjain</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/190\">BowTiedWardens</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/98\">Cityscape</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/267\">sorrynotsorry</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/260\">z3s</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/307\">0xsanson</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/95\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/202\">sikorico</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/296\">Czar102</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/217\">jah</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/18\">0x4non</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/219\">bobirichman</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/150\">antonttc</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/207\">BondiPestControl</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/43\">0x1f8b</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/133\">FSchmoede</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/101\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/291\">rfa</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/172\">0xf15ers</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/204\">TrungOre</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/280\">Aits</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/122\">242</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/279\">Waze</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/294\">horsefacts</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/233\">Funen</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/174\">Kenshin</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/185\">mics</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/284\">CertoraInc</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/157\">Hawkeye</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/124\">Ruhum</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/286\">dipp</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/62\">0x1337</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/113\">cryptphi</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/108\">BouSalman</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/64\">eccentricexit</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/10\">AlleyCat</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/142\">delfin454000</a>, and <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/1\">JDeryl</a>.</em></p>\n<h2 id=\"l-01-wrong-error-message-string-in-function-createvault\" style=\"position:relative;\"><a href=\"#l-01-wrong-error-message-string-in-function-createvault\" aria-label=\"l 01 wrong error message string in function createvault permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-01] Wrong error message string in function createVault()</h2>\n<p>Function : createVault() in Cally.sol</p>\n<p>line 169  require(dutchAuctionReserveStrike &#x3C; strikeOptions[dutchAuctionStartingStrikeIndex], “Reserve strike too small”);</p>\n<h3 id=\"impact-7\" style=\"position:relative;\"><a href=\"#impact-7\" aria-label=\"impact 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>If the current error message is followed, user will never be able to successfully createVault()</p>\n<h3 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Correct error message string</p>\n<blockquote>\n<p>require(dutchAuctionReserveStrike &#x3C; strikeOptions[dutchAuctionStartingStrikeIndex], “Reserve strike more than Starting strike”);</p>\n</blockquote>\n<h2 id=\"l-02--function-vaults-can-return-misleading-information\" style=\"position:relative;\"><a href=\"#l-02--function-vaults-can-return-misleading-information\" aria-label=\"l 02  function vaults can return misleading information permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-02]  Function vaults() can return misleading information</h2>\n<p>VaultId are odd in number; if a valultId of event number is given, the function valuts() will return misleading information.</p>\n<p>Function valuts() in Cally.sol</p>\n<h3 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Check if the valutID parameter is of vault type, by adding a require statement</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function vaults(uint256 vaultId) external view returns (Vault memory) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(vaultId % 2 != 0, &quot;Not vault type&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    return _vaults[vaultId];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<h2 id=\"l-03-initiatewithdraw-should-not-be-callable--if-option-already-exercised\" style=\"position:relative;\"><a href=\"#l-03-initiatewithdraw-should-not-be-callable--if-option-already-exercised\" aria-label=\"l 03 initiatewithdraw should not be callable  if option already exercised permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-03] initiateWithdraw() should not be callable , if option already exercised</h2>\n<p>If the option is already exercised, the vault owner should not be allowed to call the initiateWithdraw() function.</p>\n<h3 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add a require statement in the function initiateWithdraw()</p>\n<blockquote>\n<p>  require(vault.isExercised == false, “Vault already exercised”);</p>\n</blockquote>\n<h2 id=\"l-04-ambiguous-error-message-in-createvault-for-durationdays\" style=\"position:relative;\"><a href=\"#l-04-ambiguous-error-message-in-createvault-for-durationdays\" aria-label=\"l 04 ambiguous error message in createvault for durationdays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-04] Ambiguous error message in createVault() for durationDays</h2>\n<p>If a value of 0 is given for durationDays in the createVault() function, the transaction will revert with an ambigous message “durationDays too small”\nIt can better stated as given below</p>\n<h3 id=\"recommended-mitigation-steps-15\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-15\" aria-label=\"recommended mitigation steps 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Error message string can be changed as below.</p>\n<blockquote>\n<p>line 170   require(durationDays > 0, “durationDays cannot be zero”);</p>\n</blockquote>\n<h2 id=\"l-05-the-available-values-in-premiumoptions--strikeoptions-are-too-restrictive\" style=\"position:relative;\"><a href=\"#l-05-the-available-values-in-premiumoptions--strikeoptions-are-too-restrictive\" aria-label=\"l 05 the available values in premiumoptions  strikeoptions are too restrictive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-05] The available values in premiumOptions[] &#x26; strikeOptions[] are too restrictive</h2>\n<p>To reduce gas and storage, the protocol has currently designed to store the index of the premiumOptions[] &#x26; strikeOptions[] in the Vault structure.</p>\n<h3 id=\"impact-8\" style=\"position:relative;\"><a href=\"#impact-8\" aria-label=\"impact 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>This is too restrictive and may not be future proof.</p>\n<h3 id=\"recommended-mitigation-steps-16\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-16\" aria-label=\"recommended mitigation steps 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>One suggestion is to add another member unit8 premiumMultiplier (with default value of 1) in the Vault struct, and users can have combination of values of the\npremiumMultiplier and premiumIndex to define more range of premium values if required.</p>\n<p>Same suggestion applies for adding a multiplier for the strikeOptions[]</p>\n<h2 id=\"l-06-no-event-is-raised-when-feerate-is-changed\" style=\"position:relative;\"><a href=\"#l-06-no-event-is-raised-when-feerate-is-changed\" aria-label=\"l 06 no event is raised when feerate is changed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-06] No event is raised when feeRate is changed</h2>\n<h3 id=\"impact-9\" style=\"position:relative;\"><a href=\"#impact-9\" aria-label=\"impact 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>When feeRate is changed at setFee(Cally.sol), no event is raised. It would be important to raise this event for any external integration with this system.</p>\n<h3 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Contract : Cally.sol\nFunction : setFee</p>\n<h3 id=\"recommended-mitigation-steps-17\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-17\" aria-label=\"recommended mitigation steps 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>event definition</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">event FeeRateUpdated(uint256 newFeeRate);</span></span></code></pre>\n<p>event emit at setFee function</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">require(feeRate_ != feeRate, &quot;new feeRate should be different&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">feeRate = feeRate_;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">emit FeeRateUpdated(feeRate_);</span></span></code></pre>\n<h2 id=\"l-07-no-event-is-raised-when-vault-beneficiary-is-changed\" style=\"position:relative;\"><a href=\"#l-07-no-event-is-raised-when-vault-beneficiary-is-changed\" aria-label=\"l 07 no event is raised when vault beneficiary is changed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-07] No event is raised when vault beneficiary is changed</h2>\n<h3 id=\"impact-10\" style=\"position:relative;\"><a href=\"#impact-10\" aria-label=\"impact 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>When beneficiary is changed at setVaultBeneficiary(Cally.sol), no event is raised. It would be important to raise this event for any external integration with this system.</p>\n<h3 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Contract : Cally.sol\nFunction : setVaultBeneficiary</p>\n<h3 id=\"recommended-mitigation-steps-18\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-18\" aria-label=\"recommended mitigation steps 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>event definition</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">event VaultBeneficiaryUpdated(uint256 indexed vaultId, address indexed beneficiary);</span></span></code></pre>\n<p>event emit at setVaultBeneficiary function</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">emit VaultBeneficiaryUpdated(vaultId, beneficiary);</span></span></code></pre>\n<h2 id=\"n-01-consistency-in-fetching-vault-values\" style=\"position:relative;\"><a href=\"#n-01-consistency-in-fetching-vault-values\" aria-label=\"n 01 consistency in fetching vault values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-01] Consistency in fetching vault values</h2>\n<p>In Cally.sol, function buyOption the following is the order of lines.\nline 208   require(vaultId % 2 != 0, “Not vault type”);\nline 211   Vault memory vault = _vaults[vaultId];</p>\n<p>This can be made consistent with other functions by changing the order.</p>\n<p>  Vault memory vault = _vaults[vaultId];\nrequire(vaultId % 2 != 0, “Not vault type”);</p>\n<h2 id=\"n-02-valutindex--1-is-never-used\" style=\"position:relative;\"><a href=\"#n-02-valutindex--1-is-never-used\" aria-label=\"n 02 valutindex  1 is never used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-02] valutIndex = 1 is never used</h2>\n<p>The value of vaultIndex = 1  is never assigned to any vault.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">        // vault index should always be odd</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vaultIndex += 2;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vaultId = vaultIndex;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _vaults[vaultId] = vault;</span></span></code></pre>\n<p>This can be changed to as below, so that vaultID = 1 is also used</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">        vaultId = vaultIndex;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // vault index should always be odd</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vaultIndex += 2;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _vaults[vaultId] = vault;</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/281#issuecomment-1128026692\">outdoteth (Cally) commented</a>:</strong></p>\n<blockquote>\n<p>high quality report</p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 59 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/45\">report highlighted below</a> by <strong>IllIllI</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/189\">BowTiedWardens</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/114\">shung</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/143\">rotcivegaf</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/261\">TomFrenchBlockchain</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/6\">MaratCerby</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/132\">MiloTruck</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/181\">VAD37</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/40\">hickuphh3</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/109\">Bludya</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/231\">WatchPug</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/264\">robee</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/290\">rfa</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/59\">RagePit</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/287\">defsec</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/301\">TerrierLover</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/265\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/17\">0x4non</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/283\">CertoraInc</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/295\">horsefacts</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/42\">0x1f8b</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/293\">djxploit</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/175\">Kenshin</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/209\">gzeon</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/79\">ellahi</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/96\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/201\">sikorico</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/144\">antonttc</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/173\">0xf15ers</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/278\">Waze</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/152\">fatherOfBlocks</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/148\">pmerkleplant</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/86\">0xkatana</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/93\">Cityscape</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/164\">MadWookie</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/218\">bobirichman</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/216\">catchup</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/19\">oyc_109</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/21\">samruna</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/105\">0xDjango</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/183\">_Adam</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/141\">delfin454000</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/26\">0xNazgul</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/304\">0xsanson</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/193\">Picodes</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/102\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/184\">mics</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/53\">simon135</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/259\">DavidGialdi</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/117\">ignacio</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/162\">Tadashi</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/230\">Funen</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/75\">hake</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/256\">z3s</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/223\">0v3rf10w</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/156\">Hawkeye</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/273\">Fitraldys</a>, <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/125\">jonatascm</a>, and <a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/134\">FSchmoede</a>.</em></p>\n<h2 id=\"summary-1\" style=\"position:relative;\"><a href=\"#summary-1\" aria-label=\"summary 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td align=\"left\">Full vault details unnecessarily fetched twice in each call to <code>buyOption()</code></td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"left\">Re-creation of short <code>memory</code> arrays is cheaper than fetching indecies from a storage array</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"left\">Use existing stack cache variable rather than re-fetching state variable</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"left\">Cheaper to split struct if only part of it is updated frequently</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"left\">Store actual beneficiary rather than deciding every time</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"left\">Use <code>unchecked {}</code> for calculations that cannot overflow</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"left\">Also <code>_burn()</code> the vault to get a gas refund</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"left\">State variables should be cached in stack variables rather than re-reading them from storage</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>9</td>\n<td align=\"left\"><code>&#x3C;x> += &#x3C;y></code> costs more gas than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> for state variables</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>10</td>\n<td align=\"left\"><code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>11</td>\n<td align=\"left\"><code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{++i}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>12</td>\n<td align=\"left\">Offsets should only be calculated once per loop</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>13</td>\n<td align=\"left\">Access mappings directly rather than using accessor functions</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>14</td>\n<td align=\"left\">Cheaper input valdiations should come before expensive operations</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>15</td>\n<td align=\"left\">Not using the named return variables when a function returns, wastes deployment gas</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>16</td>\n<td align=\"left\">Use a more recent version of solidity</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>17</td>\n<td align=\"left\">Using <code>> 0</code> costs more gas than <code>!= 0</code> when used on a <code>uint</code> in a <code>require()</code> statement</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>18</td>\n<td align=\"left\">It costs more gas to initialize variables to zero than to let the default of zero be applied</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>19</td>\n<td align=\"left\"><code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>20</td>\n<td align=\"left\">Usage of <code>uints</code>/<code>ints</code> smaller than 32 bytes (256 bits) incurs overhead</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td>21</td>\n<td align=\"left\">Using <code>private</code> rather than <code>public</code> for constants, saves gas</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>22</td>\n<td align=\"left\">Don’t compare boolean expressions to boolean literals</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>23</td>\n<td align=\"left\">Duplicated <code>require()</code>/<code>revert()</code> checks should be refactored to a modifier or function</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>24</td>\n<td align=\"left\">Multiplication/division by two should use bit shifting</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>25</td>\n<td align=\"left\">Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save deployment gas</td>\n<td align=\"center\">32</td>\n</tr>\n<tr>\n<td>26</td>\n<td align=\"left\">Functions guaranteed to revert when called by normal users can be marked <code>payable</code></td>\n<td align=\"center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 86 instances over 26 issues</p>\n<h2 id=\"g-01-full-vault-details-unnecessarily-fetched-twice-in-each-call-to-buyoption\" style=\"position:relative;\"><a href=\"#g-01-full-vault-details-unnecessarily-fetched-twice-in-each-call-to-buyoption\" aria-label=\"g 01 full vault details unnecessarily fetched twice in each call to buyoption permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01] Full vault details unnecessarily fetched twice in each call to <code>buyOption()</code></h2>\n<p><code>getPremium()</code> should be changed to have its argument be an index into the array, rather than looking up the vault again. Since this is in one of the two frequently-called functions, it’ll save a lot of gas</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">223</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">premium</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getPremium</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L223\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L223</a></p>\n<h2 id=\"g-02-re-creation-of-short-memory-arrays-is-cheaper-than-fetching-indecies-from-a-storage-array\" style=\"position:relative;\"><a href=\"#g-02-re-creation-of-short-memory-arrays-is-cheaper-than-fetching-indecies-from-a-storage-array\" aria-label=\"g 02 re creation of short memory arrays is cheaper than fetching indecies from a storage array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-02] Re-creation of short <code>memory</code> arrays is cheaper than fetching indecies from a storage array</h2>\n<p>Since the arrays are relatively short, it’s cheaper to have a pure virtual function that <a href=\"https://ethereum.stackexchange.com/questions/66388/standard-work-around-for-using-a-solidity-constant-array-which-is-not-supported/96599#96599\">re-creates them every time</a> just to fetch a specific index, rather than incuring a Gcoldsload (2100 gas). Since this is in one of the two frequently-called functions, it’ll save a lot of gas</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: ./</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">90</span><span class=\"mtk1\">:      </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">premiumOptions</span><span class=\"mtk1\"> = [</span><span class=\"mtk7\">0.01</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0.025</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0.05</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0.075</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0.1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0.25</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0.5</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0.75</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1.0</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2.5</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">5.0</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">7.5</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">10</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">25</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">50</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">75</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">100</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<p>./<a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L90\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L90</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">92</span><span class=\"mtk1\">:      </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">strikeOptions</span><span class=\"mtk1\"> = [</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">5</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">13</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">21</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">34</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">55</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">89</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">144</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">233</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">377</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">610</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">987</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1597</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2584</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4181</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk7\">6765</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L92\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L92</a></p>\n<h2 id=\"g-03-use-existing-stack-cache-variable-rather-than-re-fetching-state-variable\" style=\"position:relative;\"><a href=\"#g-03-use-existing-stack-cache-variable-rather-than-re-fetching-state-variable\" aria-label=\"g 03 use existing stack cache variable rather than re fetching state variable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-03] Use existing stack cache variable rather than re-fetching state variable</h2>\n<p>Using <code>auctionStartTimestamp</code> defined above will save a Gwarmaccess (100 gas). Since this is in one of the two frequently-called functions, it’ll save a lot of gas</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">233</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currentExpiration</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">AUCTION_DURATION</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L233\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L233</a></p>\n<h2 id=\"g-04-cheaper-to-split-struct-if-only-part-of-it-is-updated-frequently\" style=\"position:relative;\"><a href=\"#g-04-cheaper-to-split-struct-if-only-part-of-it-is-updated-frequently\" aria-label=\"g 04 cheaper to split struct if only part of it is updated frequently permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-04] Cheaper to split struct if only part of it is updated frequently</h2>\n<p>The <code>currentStrike</code> and <code>currentExpiration</code> fields are updated frequently so they should be in a separate struct rather than re-writing the whole struct every time</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">230</span><span class=\"mtk1\">          </span><span class=\"mtk3\">// set new currentStrike</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">231</span><span class=\"mtk1\">          </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currentStrike</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getDutchAuctionStrike</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">232</span><span class=\"mtk1\">              </span><span class=\"mtk12\">strikeOptions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">dutchAuctionStartingStrikeIndex</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">233</span><span class=\"mtk1\">              </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currentExpiration</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">AUCTION_DURATION</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">234</span><span class=\"mtk1\">              </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">dutchAuctionReserveStrike</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">235</span><span class=\"mtk1\">          );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">236</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">237</span><span class=\"mtk1\">          </span><span class=\"mtk3\">// set new expiration</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">238</span><span class=\"mtk1\">          </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currentExpiration</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">) + (</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">durationDays</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">days</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">239</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">240</span><span class=\"mtk1\">          </span><span class=\"mtk3\">// update the vault with the new option expiration and strike</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">241</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">_vaults</span><span class=\"mtk1\">[</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L230-L241\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L230-L241</a></p>\n<h2 id=\"g-05-store-actual-beneficiary-rather-than-deciding-every-time\" style=\"position:relative;\"><a href=\"#g-05-store-actual-beneficiary-rather-than-deciding-every-time\" aria-label=\"g 05 store actual beneficiary rather than deciding every time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-05] Store actual beneficiary rather than deciding every time</h2>\n<p>If the beneficiary array assigns the owner every time the NFT is minted or transferred, the mapping can be used directly, saving the gas overhead of function calls</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">249</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getVaultBeneficiary</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L249\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L249</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">289</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">ethBalance</span><span class=\"mtk1\">[</span><span class=\"mtk11\">getVaultBeneficiary</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">)] += </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">fee</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L289\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L289</a></p>\n<h2 id=\"g-06-use-unchecked--for-calculations-that-cannot-overflow\" style=\"position:relative;\"><a href=\"#g-06-use-unchecked--for-calculations-that-cannot-overflow\" aria-label=\"g 06 use unchecked  for calculations that cannot overflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-06] Use <code>unchecked {}</code> for calculations that cannot overflow</h2>\n<p>The subtraction below can be <code>unchecked {}</code> because of the check that comes before it</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">417</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">delta</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">auctionEndTimestamp</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">auctionEndTimestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> : </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L417\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L417</a></p>\n<h2 id=\"g-07-also-_burn-the-vault-to-get-a-gas-refund\" style=\"position:relative;\"><a href=\"#g-07-also-_burn-the-vault-to-get-a-gas-refund\" aria-label=\"g 07 also _burn the vault to get a gas refund permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-07] Also <code>_burn()</code> the vault to get a gas refund</h2>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">275</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">_burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">optionId</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L275\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L275</a></p>\n<h2 id=\"g-08-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\" style=\"position:relative;\"><a href=\"#g-08-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\" aria-label=\"g 08 state variables should be cached in stack variables rather than re reading them from storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-08] State variables should be cached in stack variables rather than re-reading them from storage</h2>\n<p>The instances below point to the second+ access of a state variable within a function. Caching will replace each Gwarmaccess (100 gas) with a much cheaper stack read.\nLess obvious fixes/optimizations include having local storage variables of mappings within state variable mappings or mappings within state variable structs, having local storage variables of structs within mappings, having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.</p>\n<p><em>There are 3 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit strikeOptions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">169</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dutchAuctionReserveStrike</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">strikeOptions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">dutchAuctionStartingStrikeIndex</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot;Reserve strike too small&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L169\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L169</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit feeRate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">284</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">fee</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">feeRate</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L284\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L284</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit vaultIndex</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">189</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vaultIndex</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L189\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L189</a></p>\n<h2 id=\"g-09-x--y-costs-more-gas-than-x--x--y-for-state-variables\" style=\"position:relative;\"><a href=\"#g-09-x--y-costs-more-gas-than-x--x--y-for-state-variables\" aria-label=\"g 09 x  y costs more gas than x  x  y for state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-09] <code>&#x3C;x> += &#x3C;y></code> costs more gas than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> for state variables</h2>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">188</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">vaultIndex</span><span class=\"mtk1\"> += </span><span class=\"mtk7\">2</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L188\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L188</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">285</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">protocolUnclaimedFees</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">fee</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L285\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L285</a></p>\n<h2 id=\"g-10-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\" style=\"position:relative;\"><a href=\"#g-10-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\" aria-label=\"g 10 arraylength should not be looked up in every loop of a for loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-10] <code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</h2>\n<p>The overheads outlined below are <em>PER LOOP</em>, excluding the first loop</p>\n<ul>\n<li>storage arrays incur a Gwarmaccess (100 gas)</li>\n<li>memory arrays use <code>MLOAD</code> (3 gas)</li>\n<li>calldata arrays use <code>CALLDATALOAD</code> (3 gas)</li>\n</ul>\n<p>Caching the length changes each of these to a <code>DUP&#x3C;N></code> (3 gas), and gets rid of the extra <code>DUP&#x3C;N></code> needed to store the stack offset</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">244</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244</a></p>\n<h2 id=\"g-11-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" style=\"position:relative;\"><a href=\"#g-11-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" aria-label=\"g 11 ii should be uncheckediuncheckedi when it is not possible for them to overflow as is the case when used in for  and while loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-11] <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</h2>\n<p>The <code>unchecked</code> keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves 30-40 gas <a href=\"https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#the-increment-in-for-loop-post-condition-can-be-made-unchecked\"><em>PER LOOP</em></a></p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">244</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244</a></p>\n<h2 id=\"g-12-offsets-should-only-be-calculated-once-per-loop\" style=\"position:relative;\"><a href=\"#g-12-offsets-should-only-be-calculated-once-per-loop\" aria-label=\"g 12 offsets should only be calculated once per loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-12] Offsets should only be calculated once per loop</h2>\n<p><code>i * 2</code> is calculated twice per loop, wasting gas</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">244</span><span class=\"mtk1\">          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">245</span><span class=\"mtk1\">              </span><span class=\"mtk12\">str</span><span class=\"mtk1\">[</span><span class=\"mtk7\">2</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">alphabet</span><span class=\"mtk1\">[</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint8</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] &gt;&gt; </span><span class=\"mtk7\">4</span><span class=\"mtk1\">))];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">246</span><span class=\"mtk1\">              </span><span class=\"mtk12\">str</span><span class=\"mtk1\">[</span><span class=\"mtk7\">3</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">alphabet</span><span class=\"mtk1\">[</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint8</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] &amp; </span><span class=\"mtk7\">0x0f</span><span class=\"mtk1\">))];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">247</span><span class=\"mtk1\">:         }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244-L247\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244-L247</a></p>\n<h2 id=\"g-13-access-mappings-directly-rather-than-using-accessor-functions\" style=\"position:relative;\"><a href=\"#g-13-access-mappings-directly-rather-than-using-accessor-functions\" aria-label=\"g 13 access mappings directly rather than using accessor functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-13] Access mappings directly rather than using accessor functions</h2>\n<p>Saves having to do two JUMP instructions, along with stack setup</p>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">214</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Vault does not exist&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">263</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">optionId</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;You are not the owner&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">307</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;You are not the owner&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">323</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;You are not the owner&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">354</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Not owner&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol</a></p>\n<h2 id=\"g-14-cheaper-input-valdiations-should-come-before-expensive-operations\" style=\"position:relative;\"><a href=\"#g-14-cheaper-input-valdiations-should-come-before-expensive-operations\" aria-label=\"g 14 cheaper input valdiations should come before expensive operations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-14] Cheaper input valdiations should come before expensive operations</h2>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">211</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not vault type&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L211\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L211</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">214</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Vault does not exist&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L214\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L214</a></p>\n<h2 id=\"g-15-not-using-the-named-return-variables-when-a-function-returns-wastes-deployment-gas\" style=\"position:relative;\"><a href=\"#g-15-not-using-the-named-return-variables-when-a-function-returns-wastes-deployment-gas\" aria-label=\"g 15 not using the named return variables when a function returns wastes deployment gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-15] Not using the named return variables when a function returns, wastes deployment gas</h2>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">382</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentBeneficiary</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) ? </span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">) : </span><span class=\"mtk12\">currentBeneficiary</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L382\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L382</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"50\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">396</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">premiumOptions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">premiumIndex</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L396\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L396</a></p>\n<h2 id=\"g-16-use-a-more-recent-version-of-solidity\" style=\"position:relative;\"><a href=\"#g-16-use-a-more-recent-version-of-solidity\" aria-label=\"g 16 use a more recent version of solidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-16] Use a more recent version of solidity</h2>\n<p>Use a solidity version of at least 0.8.0 to get overflow protection without <code>SafeMath</code></p>\n<p>Use a solidity version of at least 0.8.2 to get compiler automatic inlining</p>\n<p>Use a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads</p>\n<p>Use a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than <code>revert()/require()</code> strings</p>\n<p>Use a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"51\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">lib</span><span class=\"mtk1\">/</span><span class=\"mtk12\">base64</span><span class=\"mtk1\">/</span><span class=\"mtk12\">base64</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">3</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> &gt;=</span><span class=\"mtk7\">0.6</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/lib/base64/base64.sol#L3\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/lib/base64/base64.sol#L3</a></p>\n<h2 id=\"g-17-using--0-costs-more-gas-than--0-when-used-on-a-uint-in-a-require-statement\" style=\"position:relative;\"><a href=\"#g-17-using--0-costs-more-gas-than--0-when-used-on-a-uint-in-a-require-statement\" aria-label=\"g 17 using  0 costs more gas than  0 when used on a uint in a require statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-17] Using <code>> 0</code> costs more gas than <code>!= 0</code> when used on a <code>uint</code> in a <code>require()</code> statement</h2>\n<p>This change saves <a href=\"https://aws1.discourse-cdn.com/business6/uploads/zeppelin/original/2X/3/363a367d6d68851f27d2679d10706cd16d788b96.png\">6 gas</a> per instance</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"52\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">170</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">durationDays</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;durationDays too small&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L170\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L170</a></p>\n<h2 id=\"g-18-it-costs-more-gas-to-initialize-variables-to-zero-than-to-let-the-default-of-zero-be-applied\" style=\"position:relative;\"><a href=\"#g-18-it-costs-more-gas-to-initialize-variables-to-zero-than-to-let-the-default-of-zero-be-applied\" aria-label=\"g 18 it costs more gas to initialize variables to zero than to let the default of zero be applied permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-18] It costs more gas to initialize variables to zero than to let the default of zero be applied</h2>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"53\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">282</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fee</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L282\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L282</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"54\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">244</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244</a></p>\n<h2 id=\"g-19-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" style=\"position:relative;\"><a href=\"#g-19-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" aria-label=\"g 19 i costs less gas than i especially when its used in for loops   ii   too permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-19] <code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</h2>\n<p>Saves 6 gas <em>PER LOOP</em></p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"55\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">244</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244</a></p>\n<h2 id=\"g-20-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\" style=\"position:relative;\"><a href=\"#g-20-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\" aria-label=\"g 20 usage of uintsints smaller than 32 bytes 256 bits incurs overhead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-20] Usage of <code>uints</code>/<code>ints</code> smaller than 32 bytes (256 bits) incurs overhead</h2>\n<blockquote>\n<p>When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.</p>\n</blockquote>\n<p><a href=\"https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\">https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html</a>\nUse a larger size then downcast where needed</p>\n<p><em>There are 10 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"56\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">76</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">premiumIndex</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// indexes into `premiumOptions`</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">77</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">durationDays</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// days</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">78</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dutchAuctionStartingStrikeIndex</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// indexes into `strikeOptions`</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">79</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentExpiration</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">87</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">AUCTION_DURATION</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hours</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">161</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">premiumIndex</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">162</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">durationDays</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">163</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dutchAuctionStartingStrikeIndex</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">227</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">auctionStartTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currentExpiration</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">408</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">auctionEndTimestamp</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol</a></p>\n<h3 id=\"g-21-using-private-rather-than-public-for-constants-saves-gas\" style=\"position:relative;\"><a href=\"#g-21-using-private-rather-than-public-for-constants-saves-gas\" aria-label=\"g 21 using private rather than public for constants saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-21] Using <code>private</code> rather than <code>public</code> for constants, saves gas</h3>\n<p>If needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"57\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">87</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">AUCTION_DURATION</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hours</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L87\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L87</a></p>\n<h2 id=\"g-22-dont-compare-boolean-expressions-to-boolean-literals\" style=\"position:relative;\"><a href=\"#g-22-dont-compare-boolean-expressions-to-boolean-literals\" aria-label=\"g 22 dont compare boolean expressions to boolean literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-22] Don’t compare boolean expressions to boolean literals</h2>\n<p><code>if (&#x3C;x> == true)</code> => <code>if (&#x3C;x>)</code>, <code>if (&#x3C;x> == false)</code> => <code>if (!&#x3C;x>)</code></p>\n<p><em>There are 3 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"58\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">217</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isExercised</span><span class=\"mtk1\"> == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Vault already exercised&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L217\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L217</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"59\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">220</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isWithdrawing</span><span class=\"mtk1\"> == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Vault is being withdrawn&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L220\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L220</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"60\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">328</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isExercised</span><span class=\"mtk1\"> == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Vault already exercised&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L328\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L328</a></p>\n<h2 id=\"g-23-duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\" style=\"position:relative;\"><a href=\"#g-23-duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\" aria-label=\"g 23 duplicated requirerevert checks should be refactored to a modifier or function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-23] Duplicated <code>require()</code>/<code>revert()</code> checks should be refactored to a modifier or function</h2>\n<p>Saves deployment costs</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"61\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">304</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not vault type&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L304\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L304</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"62\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">328</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isExercised</span><span class=\"mtk1\"> == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Vault already exercised&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L328\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L328</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"63\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">323</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;You are not the owner&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L323\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L323</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"64\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">4</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">42</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;INVALID_RECIPIENT&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L42\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L42</a></p>\n<h2 id=\"g-24-multiplicationdivision-by-two-should-use-bit-shifting\" style=\"position:relative;\"><a href=\"#g-24-multiplicationdivision-by-two-should-use-bit-shifting\" aria-label=\"g 24 multiplicationdivision by two should use bit shifting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-24] Multiplication/division by two should use bit shifting</h2>\n<p><code>&#x3C;x> * 2</code> is equivalent to <code>&#x3C;x> &#x3C;&#x3C; 1</code> and <code>&#x3C;x> / 2</code> is the same as <code>&#x3C;x> >> 1</code>. The <code>MUL</code> and <code>DIV</code> opcodes cost 5 gas, whereas <code>SHL</code> and <code>SHR</code> only cost 3 gas</p>\n<p><em>There are 3 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"65\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">241</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">str</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L241\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L241</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"66\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">245</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">str</span><span class=\"mtk1\">[</span><span class=\"mtk7\">2</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">alphabet</span><span class=\"mtk1\">[</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint8</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] &gt;&gt; </span><span class=\"mtk7\">4</span><span class=\"mtk1\">))];</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L245\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L245</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"67\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">246</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">str</span><span class=\"mtk1\">[</span><span class=\"mtk7\">3</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">alphabet</span><span class=\"mtk1\">[</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint8</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] &amp; </span><span class=\"mtk7\">0x0f</span><span class=\"mtk1\">))];</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L246\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L246</a></p>\n<h2 id=\"g-25-use-custom-errors-rather-than-revertrequire-strings-to-save-deployment-gas\" style=\"position:relative;\"><a href=\"#g-25-use-custom-errors-rather-than-revertrequire-strings-to-save-deployment-gas\" aria-label=\"g 25 use custom errors rather than revertrequire strings to save deployment gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-25] Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save deployment gas</h2>\n<p>Custom errors are available from solidity version 0.8.4. The instances below match or exceed that version</p>\n<p><em>There are 32 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"68\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">167</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">premiumIndex</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">premiumOptions</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Invalid premium index&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">168</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dutchAuctionStartingStrikeIndex</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">strikeOptions</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Invalid strike index&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">169</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dutchAuctionReserveStrike</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">strikeOptions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">dutchAuctionStartingStrikeIndex</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot;Reserve strike too small&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">170</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">durationDays</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;durationDays too small&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">171</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">TokenType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC721</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">tokenType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">TokenType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ERC20</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Invalid token type&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">211</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not vault type&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">214</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Vault does not exist&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">217</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isExercised</span><span class=\"mtk1\"> == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Vault already exercised&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">220</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isWithdrawing</span><span class=\"mtk1\"> == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Vault is being withdrawn&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">224</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">premium</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Incorrect ETH amount sent&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">228</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">auctionStartTimestamp</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Auction not started&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">260</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">optionId</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not option type&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">263</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">optionId</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;You are not the owner&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">269</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currentExpiration</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Option has expired&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">272</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currentStrike</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Incorrect ETH sent for strike&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">304</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not vault type&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">307</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;You are not the owner&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">320</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not vault type&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">323</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;You are not the owner&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">328</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isExercised</span><span class=\"mtk1\"> == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Vault already exercised&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">329</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isWithdrawing</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Vault not in withdrawable state&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">330</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currentExpiration</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Option still active&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">353</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not vault type&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">354</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Not owner&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">436</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">_ownerOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot;WRONG_FROM&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">437</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;INVALID_RECIPIENT&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">438</span><span class=\"mtk1\">           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">439</span><span class=\"mtk1\">               </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">from</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">isApprovedForAll</span><span class=\"mtk1\">[</span><span class=\"mtk12\">from</span><span class=\"mtk1\">][</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] || </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">getApproved</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">440</span><span class=\"mtk1\">               </span><span class=\"mtk8\">&quot;NOT_AUTHORIZED&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">441</span><span class=\"mtk1\">:          );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">456</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_ownerOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">] != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;URI query for NOT_MINTED token&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"69\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallyNft</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">15</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;INVALID_RECIPIENT&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">16</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_ownerOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">] == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;ALREADY_MINTED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">36</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">owner</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;ZERO_ADDRESS&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">42</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;INVALID_RECIPIENT&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol</a></p>\n<h2 id=\"g-26-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" style=\"position:relative;\"><a href=\"#g-26-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" aria-label=\"g 26 functions guaranteed to revert when called by normal users can be marked payable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-26] Functions guaranteed to revert when called by normal users can be marked <code>payable</code></h2>\n<p>If a function modifier such as <code>onlyOwner</code> is used, the function will revert if a normal user tries to pay the function. Marking the function as <code>payable</code> will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are\n<code>CALLVALUE</code>(2),<code>DUP1</code>(3),<code>ISZERO</code>(3),<code>PUSH2</code>(3),<code>JUMPI</code>(10),<code>PUSH1</code>(3),<code>DUP1</code>(3),<code>REVERT</code>(0),<code>JUMPDEST</code>(1),<code>POP</code>(2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"70\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">119</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setFee</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">feeRate_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L119\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L119</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"71\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Cally</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">124</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawProtocolFees</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L124\">https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L124</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-05-cally-findings/issues/45#issuecomment-1128108328\">outdoteth (Cally) commented</a>:</strong></p>\n<blockquote>\n<p>this is the best gas report imo - hats off to you!</p>\n</blockquote>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-3\">High Risk Findings (3)</a></p>\n<ul>\n<li><a href=\"#h-01-no-revert-on-transfer-erc20-tokens-can-be-drained\">[H-01] no-revert-on-transfer ERC20 tokens can be drained</a></li>\n<li><a href=\"#h-02-inefficiency-in-the-dutch-auction-due-to-lower-duration\">[H-02] Inefficiency in the Dutch Auction due to lower duration</a></li>\n<li><a href=\"#h-03-wp-h0-fake-balances-can-be-created-for-not-yet-existing-erc20-tokens-which-allows-attackers-to-set-traps-to-steal-funds-from-future-users\">[H-03] [WP-H0] Fake balances can be created for not-yet-existing ERC20 tokens, which allows attackers to set traps to steal funds from future users</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-10\">Medium Risk Findings (10)</a></p>\n<ul>\n<li><a href=\"#m-01-owner-can-modify-the-feerate-on-existing-vaults-and-steal-the-strike-value-on-exercise\">[M-01] Owner can modify the feeRate on existing vaults and steal the strike value on exercise</a></li>\n<li><a href=\"#m-02-it-shouldnt-be-possible-to-create-a-vault-with-cally-own-token\">[M-02] It shouldn’t be possible to create a vault with Cally’ own token</a></li>\n<li><a href=\"#m-03-users-may-accidentally-overpay-in-buyoption-and-the-excess-will-be-paid-to-the-vault-creator\">[M-03] User’s may accidentally overpay in <code>buyOption()</code> and the excess will be paid to the vault creator</a></li>\n<li><a href=\"#m-04-vaults-steal-rebasing-tokens-rewards\">[M-04] Vaults steal rebasing tokens’ rewards</a></li>\n<li><a href=\"#m-05-expiration-calculation-overflows-if-call-option-duration--195-days\">[M-05] Expiration calculation overflows if call option duration ≥ 195 days</a></li>\n<li><a href=\"#m-06-owner-can-set-the-feerate-to-be-greater-than-100-and-cause-all-future-calls-to-exercise-to-revert\">[M-06] Owner can set the feeRate to be greater than 100% and cause all future calls to <code>exercise</code> to revert</a></li>\n<li><a href=\"#m-07-lack-of-0-amount-check-allows-malicious-user-to-create-infinite-vaults\">[M-07] Lack of 0 amount check allows malicious user to create infinite vaults</a></li>\n<li><a href=\"#m-08-vault-is-not-compatible-with-fee-tokens-and-vaults-with-such-tokens-could-be-exploited\">[M-08] Vault is Not Compatible with Fee Tokens and Vaults with Such Tokens Could Be Exploited</a></li>\n<li><a href=\"#m-09-use-safetransferfrom-instead-of-transferfrom-for-erc721-transfers\">[M-09] Use safeTransferFrom instead of transferFrom for ERC721 transfers</a></li>\n<li><a href=\"#m-10-createvault-does-not-confirm-whether-tokentype-and-tokens-type-are-the-same\">[M-10] <code>createVault()</code> does not confirm whether <code>tokenType</code> and <code>token</code>’s type are the same</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#l-01-wrong-error-message-string-in-function-createvault\">L-01 Wrong error message string in function createVault()</a></li>\n<li><a href=\"#l-02--function-vaults-can-return-misleading-information\">L-02  Function vaults() can return misleading information</a></li>\n<li><a href=\"#l-03-initiatewithdraw-should-not-be-callable--if-option-already-exercised\">L-03 initiateWithdraw() should not be callable , if option already exercised</a></li>\n<li><a href=\"#l-04-ambiguous-error-message-in-createvault-for-durationdays\">L-04 Ambiguous error message in createVault() for durationDays</a></li>\n<li><a href=\"#l-05-the-available-values-in-premiumoptions--strikeoptions-are-too-restrictive\">L-05 The available values in premiumOptions[] &#x26; strikeOptions[] are too restrictive</a></li>\n<li><a href=\"#l-06-no-event-is-raised-when-feerate-is-changed\">L-06 No event is raised when feeRate is changed</a></li>\n<li><a href=\"#l-07-no-event-is-raised-when-vault-beneficiary-is-changed\">L-07 No event is raised when vault beneficiary is changed</a></li>\n<li><a href=\"#n-01-consistency-in-fetching-vault-values\">N-01 Consistency in fetching vault values</a></li>\n<li><a href=\"#n-02-valutindex--1-is-never-used\">N-02 valutIndex = 1 is never used</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#summary-1\">Summary</a></li>\n<li><a href=\"#g-01-full-vault-details-unnecessarily-fetched-twice-in-each-call-to-buyoption\">G-01 Full vault details unnecessarily fetched twice in each call to <code>buyOption()</code></a></li>\n<li><a href=\"#g-02-re-creation-of-short-memory-arrays-is-cheaper-than-fetching-indecies-from-a-storage-array\">G-02 Re-creation of short <code>memory</code> arrays is cheaper than fetching indecies from a storage array</a></li>\n<li><a href=\"#g-03-use-existing-stack-cache-variable-rather-than-re-fetching-state-variable\">G-03 Use existing stack cache variable rather than re-fetching state variable</a></li>\n<li><a href=\"#g-04-cheaper-to-split-struct-if-only-part-of-it-is-updated-frequently\">G-04 Cheaper to split struct if only part of it is updated frequently</a></li>\n<li><a href=\"#g-05-store-actual-beneficiary-rather-than-deciding-every-time\">G-05 Store actual beneficiary rather than deciding every time</a></li>\n<li><a href=\"#g-06-use-unchecked--for-calculations-that-cannot-overflow\">G-06 Use <code>unchecked {}</code> for calculations that cannot overflow</a></li>\n<li><a href=\"#g-07-also-_burn-the-vault-to-get-a-gas-refund\">G-07 Also <code>_burn()</code> the vault to get a gas refund</a></li>\n<li><a href=\"#g-08-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\">G-08 State variables should be cached in stack variables rather than re-reading them from storage</a></li>\n<li><a href=\"#g-09-x--y-costs-more-gas-than-x--x--y-for-state-variables\">G-09 <code>&#x3C;x> += &#x3C;y></code> costs more gas than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> for state variables</a></li>\n<li><a href=\"#g-10-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\">G-10 <code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</a></li>\n<li><a href=\"#g-11-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\">G-11 <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</a></li>\n<li><a href=\"#g-12-offsets-should-only-be-calculated-once-per-loop\">G-12 Offsets should only be calculated once per loop</a></li>\n<li><a href=\"#g-13-access-mappings-directly-rather-than-using-accessor-functions\">G-13 Access mappings directly rather than using accessor functions</a></li>\n<li><a href=\"#g-14-cheaper-input-valdiations-should-come-before-expensive-operations\">G-14 Cheaper input valdiations should come before expensive operations</a></li>\n<li><a href=\"#g-15-not-using-the-named-return-variables-when-a-function-returns-wastes-deployment-gas\">G-15 Not using the named return variables when a function returns, wastes deployment gas</a></li>\n<li><a href=\"#g-16-use-a-more-recent-version-of-solidity\">G-16 Use a more recent version of solidity</a></li>\n<li><a href=\"#g-17-using--0-costs-more-gas-than--0-when-used-on-a-uint-in-a-require-statement\">G-17 Using <code>> 0</code> costs more gas than <code>!= 0</code> when used on a <code>uint</code> in a <code>require()</code> statement</a></li>\n<li><a href=\"#g-18-it-costs-more-gas-to-initialize-variables-to-zero-than-to-let-the-default-of-zero-be-applied\">G-18 It costs more gas to initialize variables to zero than to let the default of zero be applied</a></li>\n<li><a href=\"#g-19-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\">G-19 <code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</a></li>\n<li><a href=\"#g-20-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\">G-20 Usage of <code>uints</code>/<code>ints</code> smaller than 32 bytes (256 bits) incurs overhead</a></li>\n<li><a href=\"#g-22-dont-compare-boolean-expressions-to-boolean-literals\">G-22 Don’t compare boolean expressions to boolean literals</a></li>\n<li><a href=\"#g-23-duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\">G-23 Duplicated <code>require()</code>/<code>revert()</code> checks should be refactored to a modifier or function</a></li>\n<li><a href=\"#g-24-multiplicationdivision-by-two-should-use-bit-shifting\">G-24 Multiplication/division by two should use bit shifting</a></li>\n<li><a href=\"#g-25-use-custom-errors-rather-than-revertrequire-strings-to-save-deployment-gas\">G-25 Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save deployment gas</a></li>\n<li><a href=\"#g-26-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\">G-26 Functions guaranteed to revert when called by normal users can be marked <code>payable</code></a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the audit contest outlined in this document, C4 conducted an analysis of the Cally smart contract system written in Solidity. The audit contest took place between May 10—May 14 2022.\n\n## Wardens\n\n115 Wardens contributed reports to the Cally contest:\n\n  1. [smiling_heretic](https://github.com/SmilingHeretic)\n  1. hubble (ksk2345 and shri4net)\n  1. [sseefried](http://seanseefried.org/blog)\n  1. IllIllI\n  1. 0xDjango\n  1. [Ruhum](https://twitter.com/0xruhum)\n  1. Hawkeye (0xwags and 0xmint)\n  1. oyc_109\n  1. GimelSec ([rayn](https://twitter.com/rayn731) and sces60107)\n  1. BondiPestControl ([leastwood](https://twitter.com/0xleastwood) and [kirk-baird](https://twitter.com/kirkthebaird))\n  1. [WatchPug](https://twitter.com/WatchPug_) ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n  1. [0xsanson](https://github.com/0xsanson)\n  1. [antonttc](https://github.com/antoncoding)\n  1. VAD37\n  1. horsefacts\n  1. TrungOre\n  1. p4st13r4 ([0x69e8](https://github.com/0x69e8) and 0xb4bb4)\n  1. [hickuphh3](https://twitter.com/HickupH)\n  1. [shung](https://twitter.com/shunduquar)\n  1. [MiloTruck](https://milotruck.github.io/)\n  1. BowTiedWardens (BowTiedHeron and BowTiedPickle and [m4rio_eth](BowTiedETHernal) and [Dravee](https://twitter.com/JustDravee) and BowTiedFirefox)\n  1. [MaratCerby](https://twitter.com/MaratCerby)\n  1. hake\n  1. [ellahi](https://twitter.com/ellahinator)\n  1. [joestakey](https://twitter.com/JoeStakey)\n  1. dipp\n  1. 0xf15ers (remora and twojoy)\n  1. [shenwilly](https://twitter.com/shenwilly_)\n  1. [Kenshin](https://twitter.com/nonfungiblenero)\n  1. FSchmoede\n  1. cccz\n  1. minhquanym\n  1. Bludya\n  1. [catchup](https://twitter.com/catchup22)\n  1. [rfa](https://www.instagram.com/riyan_rfa/)\n  1. Cityscape\n  1. [Picodes](https://twitter.com/thePicodes)\n  1. reassor\n  1. [pedroais](https://twitter.com/Pedroais2/)\n  1. robee\n  1. [pmerkleplant](https://twitter.com/merkleplant_eth)\n  1. rotcivegaf\n  1. [TomFrenchBlockchain](https://github.com/TomAFrench)\n  1. [csanuragjain](https://twitter.com/csanuragjain)\n  1. djxploit\n  1. 0x4non\n  1. [CertoraInc](https://twitter.com/CertoraInc) (egjlmn1, [OriDabush](https://twitter.com/ori_dabush), ItayG, and shakedwinder)\n  1. 0x1f8b\n  1. [fatherOfBlocks](https://twitter.com/father0fBl0cks)\n  1. sikorico\n  1. Waze\n  1. [z3s](https://github.com/z3s/)\n  1. bobirichman\n  1. delfin454000\n  1. [hansfriese](https://twitter.com/hansfriese)\n  1. mics\n  1. [Funen](https://instagram.com/vanensurya)\n  1. Kumpa\n  1. [jah](https://twitter.com/jah_s3)\n  1. [berndartmueller](https://twitter.com/berndartmueller)\n  1. 0x1337\n  1. [Czar102](https://twitter.com/_Czar102)\n  1. eccentricexit\n  1. [MadWookie](https://twitter.com/wookiemad)\n  1. hyh\n  1. [seanamani](https://twitter.com/SeanEmile)\n  1. dirk_y\n  1. radoslav11\n  1. sorrynotsorry\n  1. [Aits](https://twitter.com/tamjid0x01)\n  1. 242\n  1. cryptphi\n  1. [BouSalman](https://twitter.com/BouSalman)\n  1. AlleyCat\n  1. JDeryl\n  1. [defsec](https://twitter.com/defsec_)\n  1. RagePit\n  1. jayjonah8\n  1. m9800\n  1. [gzeon](https://twitter.com/gzeon)\n  1. [throttle](https://twitter.com/Throt7le)\n  1. _Adam\n  1. TerrierLover\n  1. 0xkatana\n  1. samruna\n  1. [0xNazgul](https://twitter.com/0xNazgul)\n  1. simon135\n  1. DavidGialdi\n  1. [ignacio](https://twitter.com/igncarmona)\n  1. [Tadashi](https://github.com/htadashi)\n  1. [0v3rf10w](https://twitter.com/_0v3rf10w)\n  1. [Fitraldys](https://twitter.com/fitraldys)\n  1. [jonatascm](https://www.linkedin.com/in/jonatas-cmartins/)\n  1. peritoflores\n  1. 0x52\n  1. ACai\n  1. kebabsec (okkothejawa and [FlameHorizon](https://twitter.com/FlameHorizon1))\n  1. [ynnad](https://twitter.com/ynnadt1)\n  1. PPrieditis\n  1. crispymangoes\n\nThis contest was judged by [HardlyDifficult](https://twitter.com/HardlyDifficult).\n\nFinal report assembled by [itsmetechjay](https://twitter.com/itsmetechjay).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 13 unique vulnerabilities. Of these vulnerabilities, 3 received a risk rating in the category of HIGH severity and 10 received a risk rating in the category of MEDIUM severity.\n\nAdditionally, C4 analysis included 67 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 59 reports recommending gas optimizations.\n\nAll of the issues presented here are linked back to their original finding.\n\n# Scope\n\nThe code under review can be found within the [C4 Cally contest repository](https://github.com/code-423n4/2022-05-cally), and is composed of 2 smart contracts written in the Solidity programming language and includes 439 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code4rena.com).\n\n# High Risk Findings (3)\n## [[H-01] no-revert-on-transfer ERC20 tokens can be drained](https://github.com/code-423n4/2022-05-cally-findings/issues/89)\n_Submitted by Ruhum, also found by oyc_109 and smiling_heretic_\n\n<https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L198-L200>\n\n### Impact\n\nSome ERC20 tokens don't throw but just return false when a transfer fails. This can be abused to trick the `createVault()` function to initialize the vault without providing any tokens. A good example of such a token is *ZRX*: [Etherscan code](https://etherscan.io/address/0xe41d2489571d322189246dafa5ebde1f4699f498#code#L64)\n\nWhen such a vault is initialized, another user can both buy and exercise the option without ever receiving any funds. The creator of the vault does receive the buyer's Ether tho. So it can cause a loss of funds.\n\n### Proof of Concept\n\nThe trick is to create a vault with an ERC20 token but use ERC721 as the vault's type. Then, instead of calling `safeTransferFrom()` the function calls `transferFrom()` which won't catch the token returning false.\n\nHere's a test that showcases the issue:\n\n```solidity\n// CreateVault.t.sol\n    function testStealFunds() public {\n        // address of 0x on mainnet\n        address t = address(0xE41d2489571d322189246DaFA5ebDe1F4699F498);\n        vm.startPrank(babe);\n        require(ERC20(t).balanceOf(babe) == 0);\n        uint vaultId = c.createVault(100, t, 1, 1, 1, 0, Cally.TokenType.ERC721);\n        // check that neither the Cally contract nor the vault creator\n        // had any 0x tokens\n        require(ERC20(t).balanceOf(babe) == 0);\n        require(ERC20(t).balanceOf(address(c)) == 0);\n\n        // check whether vault was created properly\n        Cally.Vault memory v = c.vaults(vaultId);\n        require(v.token == t);\n        require(v.tokenIdOrAmount == 100);\n        vm.stopPrank();\n        // So now there's a vault for 100 0x tokens although the Cally contract doesn't\n        // have any.\n        // If someone buys & exercises the option they won't receive any tokens.\n        uint premium = 0.025 ether;\n        uint strike = 2 ether;\n        require(address(c).balance == 0, \"shouldn't have any balance at the beginning\");\n        require(payable(address(this)).balance > 0, \"not enough balance\");\n\n        uint optionId = c.buyOption{value: premium}(vaultId);\n        c.exercise{value: strike}(optionId);\n\n        // buyer of option (`address(this)`) got zero 0x tokens\n        // But buyer lost their Ether\n        require(ERC20(t).balanceOf(address(this)) == 0);\n        require(address(c).balance > 0, \"got some money\");\n    }\n```\n\nTo run it, you need to use forge's forking mode: `forge test --fork-url <alchemy/infura URL> --match testStealFunds`\n\n### Recommended Mitigation Steps\n\nI think the easiest solution is to use `safeTransferFrom()` when the token is of type ERC721. Since the transfer is at the end of the function there shouldn't be any risk of reentrancy. If someone passes an ERC20 address with type ERC721, the `safeTransferFrom()` call would simply fail since that function signature shouldn't exist on ERC20 tokens.\n\n**[outdoteth (Cally) confirmed and resolved](https://github.com/code-423n4/2022-05-cally-findings/issues/89#issuecomment-1128776685):**\n > the fix for this issue is here; https://github.com/outdoteth/cally/pull/4\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-05-cally-findings/issues/89#issuecomment-1130790694):**\n > This is a great report. I appreciate the clear test showcasing the issue well, and using a real token example.\n\n\n\n***\n\n## [[H-02] Inefficiency in the Dutch Auction due to lower duration](https://github.com/code-423n4/2022-05-cally-findings/issues/138)\n_Submitted by hubble, also found by Hawkeye and sseefried_\n\nThe vulnerability or bug is in the implementation of the function getDutchAuctionStrike()\nThe AUCTION_DURATION is defined as 24 hours, and consider that the dutchAuctionReserveStrike (or reserveStrike) will never be set to 0 by user.\n\nNow if a vault is created with startingStrike value of 55 and reserveStrike of 13.5 , the auction price will drop from 55 to 13.5 midway at \\~12 hours.\nSo, after 12 hours from start of auction, the rate will be constant at reserveStrike of 13.5, and remaining time of 12 hours of auction is a waste.\n\nSome other examples :\n\n    startStrike, reserveStrike, time-to-reach-reserveStrike\n    55 , 13.5  , ~12 hours\n    55 , 5     , ~16.7 hours\n    55 , 1.5   , ~20 hours\n    5  , 1.5   , ~11 hours\n\n### Impact\n\nThe impact is high wrt Usability, where users have reduced available time to participate in the auction (when price is expected to change).\nThe vault-Creators or the option-Buyers may or may not be aware of this inefficiency, i.e., how much effective time is available for auction.\n\n### Proof of Concept\n\nContract : Cally.sol\nFunction : getDutchAuctionStrike ()\n\n### Recommended Mitigation Steps\n\nThe function getDutchAuctionStrike() can be modified such that price drops to the reserveStrike exactly at 24 hours from start of auction.\n\n            /*\n                delta = max(auctionEnd - currentTimestamp, 0)\n                progress = delta / auctionDuration\n                auctionStrike = progress^2 * (startingStrike - reserveStrike)             << Changes here\n                strike = auctionStrike + reserveStrike                                    << Changes here\n            */\n            uint256 delta = auctionEndTimestamp > block.timestamp ? auctionEndTimestamp - block.timestamp : 0;\n            uint256 progress = (1e18 * delta) / AUCTION_DURATION;\n            uint256 auctionStrike = (progress * progress * (startingStrike-reserveStrike)) / (1e18 * 1e18);\n\n            strike = auctionStrike + reserveStrike;\n\n**[outdoteth (Cally) confirmed, disagreed with severity and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/138#issuecomment-1126980017):**\n > We think this should be bumped to high severity. It would be easy for a user to create an auction that declines significantly faster than what they would have assumed - even over 1 or 2 blocks. It makes no sense for the auction to ever behave in this way and would result in options getting filled at very bad prices for the creator of the vault.\n\n**[outdoteth (Cally) resolved](https://github.com/code-423n4/2022-05-cally-findings/issues/138#issuecomment-1128737816):**\n > The fix for this issue is here: https://github.com/outdoteth/cally/pull/2\n\n**[HardlyDifficult (judge) increased severity to High and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/138#issuecomment-1133408636):**\n > The sponsor comment here makes sense. Agree with (1) High since this can potentially be very detrimental to the promise of this protocol.\n\n\n\n***\n\n## [[H-03] [WP-H0] Fake balances can be created for not-yet-existing ERC20 tokens, which allows attackers to set traps to steal funds from future users](https://github.com/code-423n4/2022-05-cally-findings/issues/225)\n_Submitted by WatchPug, also found by 0xsanson, BondiPestControl, and IllIllI_\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L158-L201>\n\n```solidity\nfunction createVault(\n    uint256 tokenIdOrAmount,\n    address token,\n    ...\n) external returns (uint256 vaultId) {\n    ...\n    Vault memory vault = Vault({\n        ...\n    });\n\n    // vault index should always be odd\n    vaultIndex += 2;\n    vaultId = vaultIndex;\n    _vaults[vaultId] = vault;\n\n    // give msg.sender vault token\n    _mint(msg.sender, vaultId);\n\n    emit NewVault(vaultId, msg.sender, token);\n\n    // transfer the NFTs or ERC20s to the contract\n    vault.tokenType == TokenType.ERC721\n        ? ERC721(vault.token).transferFrom(msg.sender, address(this), vault.tokenIdOrAmount)\n        : ERC20(vault.token).safeTransferFrom(msg.sender, address(this), vault.tokenIdOrAmount);\n}\n```\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L23-L34>\n\n```solidity\nimport \"solmate/utils/SafeTransferLib.sol\";\n\n...\n\ncontract Cally is CallyNft, ReentrancyGuard, Ownable {\n    using SafeTransferLib for ERC20;\n    ...\n```\n\nWhen creating a new vault, solmate's `SafeTransferLib` is used for pulling `vault.token` from the caller's account, this issue won't exist if OpenZeppelin's SafeERC20 is used instead.\n\nThat's because there is a subtle difference between the implementation of solmate's `SafeTransferLib` and OZ's `SafeERC20`:\n\nOZ's `SafeERC20` checks if the token is a contract or not, solmate's `SafeTransferLib` does not.\n\nSee: <https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol#L9>\n\n> Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\n\nAs a result, when the token's address has no code, the transaction will just succeed with no error.\n\nThis attack vector was made well-known by the qBridge hack back in Jan 2022.\n\nFor our project, this alone still won't be a problem, a vault created and wrongfully accounted for a certain amount of balance for a non-existing token won't be much of a problem, there will be no fund loss as long as the token stays that way (being non-existing).\n\nHowever, it's becoming popular for protocols to deploy their token across multiple networks and when they do so, a common practice is to deploy the token contract from the same deployer address and with the same nonce so that the token address can be the same for all the networks.\n\nFor example: $1INCH is using the same token address for both Ethereum and BSC; Gelato's $GEL token is using the same token address for Ethereum, Fantom and Polygon.\n\nA sophisticated attacker can exploit it by taking advantage of that and setting traps on multiple potential tokens to steal from the future users that deposits with such tokens.\n\n### Proof of Concept\n\nGiven:\n\n*   ProjectA has TokenA on another network;\n*   ProjectB has TokenB on another network;\n*   ProjectC has TokenC on another network;\n\n1.  The attacker `createVault()` for `TokenA`, `TokenB`, and `TokenC` with `10000e18` as `tokenIdOrAmount` each;\n2.  A few months later, ProjectB lunched `TokenB` on the local network at the same address;\n3.  Alice created a vault with `11000e18 TokenB`;\n4.  The attacker called `initiateWithdraw()` and then `withdraw()` to receive `10000e18 TokenB`.\n\nIn summary, one of the traps set by the attacker was activated by the deployment of  `TokenB` and Alice was the victim. As a result, `10000e18 TokenB` was stolen by the attacker.\n\n### Recommendation\n\nConsider using OZ's `SafeERC20` instead.\n\n\n**[outdoteth (Cally) confirmed and resolved](https://github.com/code-423n4/2022-05-cally-findings/issues/225#issuecomment-1129066964):**\n > this issue has been fixed here: https://github.com/outdoteth/cally/pull/5\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-05-cally-findings/issues/225#issuecomment-1133421876):**\n > Great catch and the potential attack is very clearly explained. Although the window for an attack like this would not be common, it's an easy trap to setup and likely would occur as some point if Cally is planning to support multiple networks.\n\n\n\n***\n\n \n# Medium Risk Findings (10)\n## [[M-01] Owner can modify the feeRate on existing vaults and steal the strike value on exercise](https://github.com/code-423n4/2022-05-cally-findings/issues/47)\n_Submitted by IllIllI, also found by_ _Adam, 0x52, 0xf15ers, 0xsanson, berndartmueller, Bludya, BondiPestControl, catchup, crispymangoes, Czar102, eccentricexit, ellahi, GimelSec, hake, horsefacts, hubble, joestakey, Kumpa, pedroais, peritoflores, reassor, shenwilly, shung, smiling_heretic, sseefried, and throttle_\n\nOwner can steal the exercise cost which should have gone to the option seller\n\n### Proof of Concept\n\nThere are no restrictions on when the owner can set the `feeRate`:\n\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n117       /// @notice Sets the fee that is applied on exercise\n118       /// @param feeRate_ The new fee rate: fee = 1% = (1 / 100) * 1e18\n119       function setFee(uint256 feeRate_) external onlyOwner {\n120           feeRate = feeRate_;\n121       }\n```\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L117-L121>\n\nBy using a rate that consumes the exercise cost, the owner can steal Ether from the seller:\n\n```solidity\nFile: contracts/src/Cally.sol   #2\n\n282           uint256 fee = 0;\n283           if (feeRate > 0) {\n284               fee = (msg.value * feeRate) / 1e18;\n285               protocolUnclaimedFees += fee;\n286           }\n287   \n288           // increment vault beneficiary's ETH balance\n289           ethBalance[getVaultBeneficiary(vaultId)] += msg.value - fee;\n```\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L282-L289>\n\nThe owner can wait for a particularly large-value NFT, snipe that one option, then retire\n\n### Recommended Mitigation Steps\n\nFix the fee rate per vault during vault creation\n\n**[outdoteth (Cally) confirmed and resolved](https://github.com/code-423n4/2022-05-cally-findings/issues/47#issuecomment-1129124229):**\n > issue is fixed here: https://github.com/outdoteth/cally/pull/8\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-05-cally-findings/issues/47#issuecomment-1130869666):**\n > This is a valid concern. The owner could abuse this to capture much more ETH than was intended. It assumes that the owner is malicious or compromised and does not introduce any more risk than an upgradeable contract would have.\n\n\n\n***\n\n## [[M-02] It shouldn’t be possible to create a vault with Cally’ own token](https://github.com/code-423n4/2022-05-cally-findings/issues/224)\n_Submitted by p4st13r4, also found by GimelSec, TrungOre, and VAD37_\n\n<https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L193>\n\n<https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L199>\n\n### Impact\n\nAffected code:\n\n*   <https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L193>\n*   <https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L199>\n\nCurrently it’s possible to create an ERC-721 vault using Cally’ own address as `token`, and using the freshly minted vault id as `tokenIdOrAmount`. This results in a new vault whose ownership is passed to Cally contract immediately upon creation.\n\nThe vault allows users to perform `buyOption` and increase the ETH balance of the Cally contract itself, which is still the vault beneficiary. As soon as an user calls `exercise`, she will receive the `vault.tokenIdOrAmount` in exchange, which in this case coincides with the vault nft. However this is of no good because the final user may just initiate a withdrawal, which will:\n\n*   always fail because the vault id is burned (<https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L335>) and then transferred back to the user (<https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L344>)\n*   leave all the ETH unredemable in Cally contract\n\nSo the vault will be unusable and the ETH deposited by users to buy/exercise options will remain locked in Cally contract\n\n### Proof of Concept\n\n*   Current vault id is, let’s say, 11\n*   User deploys a vault with Cally’ address as `token` and `13` as `tokenIdOrAmount`\n*   Since `createVault()` mints the vault token to the user, and then transfers the underlying address from the user, an user is able to create a vault with something she doesn’t own at the moment of the `createVault()` function call, because it’s created while the function runs\n*   The vault `13` is pretty limited in functionality, because Cally’ smart contract is the owner\n*   However, users can still buy options: so Alice and Bob deposit their premiums\n*   Whoever `exercise` the active option, becomes the vault owner now; this is of no good because no one can actually call `withdraw()` as it will always revert, and no one can recover the ETH deposited by Alice and Bob as they are locked forever\n\n### Recommended Mitigation Steps\n\nAdd the following check at the start of `createVault()`:\n\n```jsx\nrequire(token != address(this), \"Cant use Cally as token\");\n```\n\n**[outdoteth (Cally) confirmed, disagreed with severity and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/224#issuecomment-1127451866):**\n > This is an exploit that requires users to actively make a very precise and niche mistake. should be medium severity in our opinion.\n\n**[outdoteth (Cally) resolved](https://github.com/code-423n4/2022-05-cally-findings/issues/224#issuecomment-1129139902):**\n > fix for this issue is here: https://github.com/outdoteth/cally/pull/10\n\n**[HardlyDifficult (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/224#issuecomment-1133042663):**\n > Copying in the POC from GimelSec in #244 because it's an interesting attack to consider for this issue as well.\n> \n> 1. Alice (Attacker) pack 2 transactions into same block:\n>     * first transaction: calls `createVault` to vault a NFT which worth 100 ETH, with parameters:\n>         * `dutchAuctionStartingStrikeIndex` is set to 0 (which `strikeOptions` is 1 ETH)\n>         * a long `durationDays`, e.g. `255` days\n>     * then Alice will get a `vaultId 1` token, and Alice do another transaction: call `buyOption(1)` to get a `optionId 2` token\n> 2. Alice re-vault the `vaultId 1` token with strike 89 ETH, and get a `vaultId 3` token\n> 3. Bob see that the auction of `vaultId 3` token is 89 ETH, but the `vaultId 3` token can get the NFT which worth 100 ETH, so Bob pays 89 ETH, calls `buyOption(3)`, and `exercise(4)` to get the `vaultId 1` token. Then, Bob calls `initiateWithdraw(1)` and waits for the `optionId 2` token to expire (which `durationDays` is set to `255` days in step 1).\n> 4. Alice monitors that someone bought the `vaultId 1` token, then Alice quickly calls `exercise(2)`. Finally, Alice just pays Bob 1 ETH, and gets the NFT back. Alice also gets 89 ETH which is paid by Bob from the `vaultId 3` token.\n> \n> I agree with (2) Medium for this issue. It can be abused, but the impacted parties can clearly see this is an attempt to subvert the system in some way (a vault of a vault with an NFT, instead of a single value with an NFT as expected). That should be a red flag for Bob in the example above.\n\n\n\n***\n\n## [[M-03] User's may accidentally overpay in `buyOption()` and the excess will be paid to the vault creator](https://github.com/code-423n4/2022-05-cally-findings/issues/84)\n_Submitted by BondiPestControl, also found by 0xf15ers, berndartmueller, cccz, csanuragjain, dipp, GimelSec, hake, horsefacts, IllIllI, jayjonah8, m9800, MadWookie, MiloTruck, pedroais, Ruhum, throttle, and VAD37_\n\nIt is possible for a user purchasing an option to accidentally overpay the premium during `buyOption()`.\n\nAny excess funds paid for in excess of the premium will be transferred to the vault creator.\n\nThe premium is fixed at the time the vault is first created by `vault.premiumIndex`. Hence there is no need to allow users to overpay since there will be no benefit.\n\n### Proof of Concept\n\n`buyOption()` allows `msg.value > premium`\n\n```solidity\n        uint256 premium = getPremium(vaultId);\n        require(msg.value >= premium, \"Incorrect ETH amount sent\");\n```\n\n### Recommended Mitigation Steps\n\nConsider modifying the check such that the `msg.value` is exactly equal to the `premuim`. e.g.\n\n```solidity\n        uint256 premium = getPremium(vaultId);\n        require(msg.value == premium, \"Incorrect ETH amount sent\");\n```\n\n**[outdoteth (Cally) confirmed and resolved](https://github.com/code-423n4/2022-05-cally-findings/issues/84#issuecomment-1129129122):**\n > this issue is fixed in: https://github.com/outdoteth/cally/pull/9\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-05-cally-findings/issues/84#issuecomment-1133430227):**\n > Agree with 2 (Medium) for this. The issue doesn't really open the door for an attack, except for maybe via a malicious frontend. But it could potentially leak value in terms of over compensating the vault creator.\n\n**[HickupHH3 (warden) commented](https://github.com/code-423n4/2022-05-cally-findings/issues/84#issuecomment-1149503319):**\n > QA report #182 should have its issue bumped up and marked as a duplicate IMO\n\n\n\n***\n\n## [[M-04] Vaults steal rebasing tokens' rewards](https://github.com/code-423n4/2022-05-cally-findings/issues/50)\n_Submitted by IllIllI, also found by horsefacts and smiling_heretic_\n\nRebasing tokens are tokens that have each holder's `balanceof()` increase over time. Aave aTokens are an example of such tokens.\n\n### Impact\n\nIf rebasing tokens are used as the vault token, rewards accrue to the vault and cannot be withdrawn by either the option seller or the owner, and remain locked forever.\n\n### Proof of Concept\n\nThe amount 'available' for withdrawal comes from an input parameter and is stored for later operations:\n\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n173           Vault memory vault = Vault({\n174               tokenIdOrAmount: tokenIdOrAmount,\n175               token: token,\n176               premiumIndex: premiumIndex,\n177               durationDays: durationDays,\n178               dutchAuctionStartingStrikeIndex: dutchAuctionStartingStrikeIndex,\n179               currentExpiration: uint32(block.timestamp),\n180               isExercised: false,\n181               isWithdrawing: false,\n182               tokenType: tokenType,\n183               currentStrike: 0,\n184               dutchAuctionReserveStrike: dutchAuctionReserveStrike\n185           });\n186   \n187           // vault index should always be odd\n188           vaultIndex += 2;\n189           vaultId = vaultIndex;\n190           _vaults[vaultId] = vault;\n191   \n192           // give msg.sender vault token\n193           _mint(msg.sender, vaultId);\n194   \n195           emit NewVault(vaultId, msg.sender, token);\n196   \n197           // transfer the NFTs or ERC20s to the contract\n198           vault.tokenType == TokenType.ERC721\n199               ? ERC721(vault.token).transferFrom(msg.sender, address(this), vault.tokenIdOrAmount)\n200               : ERC20(vault.token).safeTransferFrom(msg.sender, address(this), vault.tokenIdOrAmount);\n```\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L173-L200>\n\nThe amount actually available grows over time and is only known at the time of withdrawal. The option withdrawal/exercise use the original amount:\n\n```solidity\nFile: contracts/src/Cally.sol   #2\n\n345               : ERC20(vault.token).safeTransfer(msg.sender, vault.tokenIdOrAmount);\n```\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L345>\n\n```solidity\nFile: contracts/src/Cally.sol   #3\n\n296               : ERC20(vault.token).safeTransfer(msg.sender, vault.tokenIdOrAmount);\n```\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L296>\n\n### Recommended Mitigation Steps\n\nTrack total amounts currently deposited and allow vault creators to withdraw excess on a pro-rata basis\n\n**[outdoteth (Cally) acknowledged and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/50#issuecomment-1126904209):**\n > This is technically an issue however we have no intention of supporting rebase tokens\n\n\n\n***\n\n## [[M-05] Expiration calculation overflows if call option duration ≥ 195 days](https://github.com/code-423n4/2022-05-cally-findings/issues/16)\n_Submitted by hickuphh3, also found by BondiPestControl, GimelSec, sseefried, and VAD37_\n\n`vault.durationDays` is of type `uint8`, thus allowing a maximum value of 255. `1 days = 86400`, thus fitting into a `uint24`. Solc creates a temporary variable to hold the result of the intermittent multiplication `vault.durationDays * 1 days` using the data type of the larger operand.\n\nIn this case, the intermittent data type used would be `uint24`, which has a maximum value of `2**24 - 1 = 16777215`. The maximum number allowable before overflow achieved is therefore `(2**24 - 1) / 86400 = 194`.\n\n### Proof of Concept\n\nInsert this test case into [BuyOption.t.sol](https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/test/units/BuyOption.t.sol)\n\n```solidity\n\nfunction testCannotBuyDueToOverflow() public {\n  vm.startPrank(babe);\n  bayc.mint(babe, 2);\n  // duration of 195 days\n  vaultId = c.createVault(2, address(bayc), premiumIndex, 195, strikeIndex, 0, Cally.TokenType.ERC721);\n  vm.stopPrank();\n\n  vm.expectRevert(stdError.arithmeticError);\n  c.buyOption{value: premium}(vaultId);\n}\n```\n\nThen run\n\n    forge test --match-contract TestBuyOption --match-test testCannotBuyDueToOverflow\n\n### Tidbit\n\nThis was the 1 high-severity bug that I wanted to mention at the end of the [C4 TrustX showcase](https://youtu.be/up9eqFRLgMQ?t=5722) but unfortunately could not due to a lack of time :( It can be found in the [vulnerable lottery contract](https://gist.github.com/HickupHH3/d214cfe6e4d003f428a63ae7d127af2d) on L39. Credits to Pauliax / Thunder for the recommendation and raising awareness of this bug =p\n\n### Reference\n\n[Article](https://muellerberndt.medium.com/building-a-secure-nft-gaming-experience-a-herdsmans-diary-1-91aab11139dc)\n\n### Recommended Mitigation Steps\n\nCast the multiplication into `uint32`.\n\n```solidity\nvault.currentExpiration = uint32(block.timestamp) + uint32(vault.durationDays) * 1 days;\n```\n\n**[outdoteth (Cally) confirmed and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/16#issuecomment-1126902283):**\n > Agree that this is high risk - a user can unintentionally create vaults that would never have been able to have been filled and result in them losing funds because the vault creation was useless. They then also have to initiate a withdraw and then actually withdraw before they can create another vault. \n> \n> In terms of gas prices at 100 gwei (which it frequently was a few months ago) the total gas cost of this bug/incorrect vault creation is not insignificant.\n\n**[outdoteth (Cally) resolved](https://github.com/code-423n4/2022-05-cally-findings/issues/16#issuecomment-1128754365):**\n > This issue is fixed here; https://github.com/outdoteth/cally/pull/3\n\n**[HardlyDifficult (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/16#issuecomment-1133498030):**\n > This is an easy way someone could create a vault where it's not possible to buy an option, and without using an unreasonably high duration value. If this were to occur, the vault creator could immediately `initiateWithdraw` and then `withdraw`. No time delay is required and the only funds lost is the gas cost of those 3 transactions.\n> \n> Lowering to 2 (Medium) since there's an easy recovery and no assets lost.\n\n\n\n***\n\n## [[M-06] Owner can set the feeRate to be greater than 100% and cause all future calls to `exercise` to revert](https://github.com/code-423n4/2022-05-cally-findings/issues/48)\n_Submitted by IllIllI, also found by 0xDjango, ACai, antonttc, BowTiedWardens, Cityscape, defsec, dipp, FSchmoede, GimelSec, gzeon, hickuphh3, hubble, joestakey, Kenshin, m9800, MiloTruck, RagePit, Ruhum, shenwilly, TomFrenchBlockchain, and WatchPug_\n\n### Impact\n\nThe owner can force options to be non-exercisable, collecting premium without risking the loss of their NFT/tokens\n\n### Proof of Concept\n\nAfter a buyer buys an option owned by the owner, the owner can change the fee rate to be close to `type(uint256).max`, which will cause the subtraction below to always underflow, preventing the exercise of the option. Once the option expires, the owner can change the fee back and wait for another buyer\n\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n288           // increment vault beneficiary's ETH balance\n289           ethBalance[getVaultBeneficiary(vaultId)] += msg.value - fee;\n```\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L288-L289>\n\n### Recommended Mitigation Steps\n\nAdd reasonable fee rate bounds checks in the `setFee()` function\n\n**[outdoteth (Cally) confirmed and resolved](https://github.com/code-423n4/2022-05-cally-findings/issues/48#issuecomment-1129088954):**\n > this issue is fixed here; https://github.com/outdoteth/cally/pull/7\n\n\n\n***\n\n## [[M-07] Lack of 0 amount check allows malicious user to create infinite vaults](https://github.com/code-423n4/2022-05-cally-findings/issues/91)\n_Submitted by 0xDjango_\n\nA griefer is able to create as many vaults as they want by simply calling `createVault()` with `tokenIdOrAmount = 0`. This will most likely pose problems on the front-end of the Cally protocol because there will be a ridiculously high number of malicious vaults displayed to actual users.\n\nI define these vaults as malicious because it is possible that a user accidently buys a call on this vault which provides 0 value in return. Overall, the presence of zero-amount vaults is damaging to Cally's product image and functionality.\n\n### Proof of Concept\n\n*   User calls `createVault(0,,,,);` with an ERC20 type.\n*   There is no validation that `amount > 0`\n*   Function will complete successfully, granting the new vault NFT to the caller.\n*   Cally protocol is filled with unwanted 0 amount vaults.\n\n### Recommended Mitigation Steps\n\nAdd the simple check `require(tokenIdOrAmount > 0, \"Amount must be greater than 0\");`\n\n**[outdoteth (Cally) confirmed and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/91#issuecomment-1126912009):**\n > This check should only be applied on ERC20 tokens because ERC721 tokens can still have tokenIds that have ID's with a value of 0.\n\n**[outdoteth (Cally) resolved](https://github.com/code-423n4/2022-05-cally-findings/issues/91#issuecomment-1129154306):**\n > this issue is fixed here: https://github.com/outdoteth/cally/pull/12\n\n\n\n***\n\n## [[M-08] Vault is Not Compatible with Fee Tokens and Vaults with Such Tokens Could Be Exploited](https://github.com/code-423n4/2022-05-cally-findings/issues/61)\n_Submitted by 0x1337, also found by 0x52, 0xDjango, 0xsanson, berndartmueller, BondiPestControl, BowTiedWardens, cccz, dipp, GimelSec, hake, hickuphh3, horsefacts, hubble, IllIllI, MaratCerby, MiloTruck, minhquanym, PPrieditis, reassor, shenwilly, smiling_heretic, TrungOre, VAD37, and WatchPug_\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L198-L200>\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L294-L296>\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L343-L345>\n\n### Impact\n\nSome ERC20 tokens charge a transaction fee for every transfer (used to encourage staking, add to liquidity pool, pay a fee to contract owner, etc.). If any such token is used in the `createVault()` function, either the token cannot be withdrawn from the contract (due to insufficient token balance), or it could be exploited by other such token holders and the `Cally` contract would lose economic value and some users would be unable to withdraw the underlying asset.\n\n### Proof of Concept\n\nPlenty of ERC20 tokens charge a fee for every transfer (e.g. Safemoon and its forks), in which the amount of token received is less than the amount being sent. When a fee token is used as the `token` in the `createVault()` function, the amount received by the contract would be less than the amount being sent. To be more precise, the increase in the `cally` contract token balance would be less than `vault.tokenIdOrAmount` for such ERC20 token because of the fee.\n\n            vault.tokenType == TokenType.ERC721\n                ? ERC721(vault.token).transferFrom(msg.sender, address(this), vault.tokenIdOrAmount)\n                : ERC20(vault.token).safeTransferFrom(msg.sender, address(this), vault.tokenIdOrAmount);\n\nThe implication is that both the `exercise()` function and the `withdraw()` function are guaranteed to revert if there's no other vault in the contract that contains the same fee tokens, due to insufficient token balance in the `Cally` contract.\n\nWhen an attacker observes that a vault is being created that contains such fee tokens, the attacker could create a new vault himself that contains the same token, and then withdraw the same amount. Essentially the `Cally` contract would be paying the transfer fee for the attacker because of how the token amount is recorded. This causes loss of user fund and loss of value from the `Cally` contract. It would make economic sense for the attacker when the fee charged by the token accrue to the attacker. The attacker would essentially use the `Cally` contract as a conduit to generate fee income.\n\n### Recommended Mitigation Steps\n\nRecommend disallowing fee tokens from being used in the vault. This can be done by adding a `require()` statement to check that the amount increase of the `token` balance in the `Cally` contract is equal to the amount being sent by the caller of the `createVault()` function.\n\n\n**[outdoteth (Cally) confirmed and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/61#issuecomment-1126980897):**\n > reference issue: https://github.com/code-423n4/2022-05-cally-findings/issues/39\n\n**[HardlyDifficult (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/61#issuecomment-1135276611):**\n > This is a good description of the potential issue when a fee on transfer token is used.\n> \n> Lowing to 2 (Medium). See https://github.com/code-423n4/org/issues/3 for some discussion on how to consider the severity for these types of issues.\n> \n> The attack described does leak value, but the vault could be recovered by transferring in the delta balance so that the contract has more than enough funds in order to exercise or withdraw. That plus these types of tokens are relatively rare is why I don't think this warrants a High severity.\n\n\n\n***\n\n## [[M-09] Use safeTransferFrom instead of transferFrom for ERC721 transfers](https://github.com/code-423n4/2022-05-cally-findings/issues/38)\n_Submitted by hickuphh3, also found by antonttc, berndartmueller, catchup, cccz, dipp, FSchmoede, GimelSec, hake, jah, jayjonah8, joestakey, kebabsec, Kenshin, Kumpa, MiloTruck, minhquanym, peritoflores, rfa, shenwilly, WatchPug, and ynnad_\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L199>\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L295>\n\n<https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L344>\n\n### Details & Impact\n\nThe `transferFrom()` method is used instead of `safeTransferFrom()`, presumably to save gas. I however argue that this isn’t recommended because:\n\n*   [OpenZeppelin’s documentation](https://docs.openzeppelin.com/contracts/4.x/api/token/erc721#IERC721-transferFrom-address-address-uint256-) discourages the use of `transferFrom()`, use `safeTransferFrom()` whenever possible\n*   Given that any NFT can be used for the call option, there are a few NFTs (here’s an [example](https://github.com/sz-piotr/eth-card-game/blob/master/src/ethereum/contracts/ERC721Market.sol#L20-L31)) that have logic in the `onERC721Received()` function, which is only triggered in the `safeTransferFrom()` function and not in `transferFrom()`\n\n### Recommended Mitigation Steps\n\nCall the `safeTransferFrom()` method instead of `transferFrom()` for NFT transfers. Note that the `CallyNft` contract should inherit the `ERC721TokenReceiver` contract as a consequence.\n\n```solidity\nabstract contract CallyNft is ERC721(\"Cally\", \"CALL\"), ERC721TokenReceiver {...}\n```\n\n**[outdoteth (Cally) confirmed and resolved](https://github.com/code-423n4/2022-05-cally-findings/issues/38#issuecomment-1128776476):**\n > the fix for this issue is here; https://github.com/outdoteth/cally/pull/4\n\n\n\n***\n\n## [[M-10] `createVault()` does not confirm whether `tokenType` and `token`’s type are the same](https://github.com/code-423n4/2022-05-cally-findings/issues/243)\n_Submitted by GimelSec, also found by antonttc_\n\n<https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L158-L201>\n\n<https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L296>\n\n<https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L345>\n\n### Impact\n\nWhen calling `createVault()`, `tokenType` could be different from `token`’s type. If a user accidentally used the wrong `tokenType`, it could lead to two different results.\n\nIf `token` is an ERC20 token and the user uses `TokenType.ERC721` as `tokenType`. It is less harmful, since `ERC721(vault.token).transferFrom(msg.sender, address(this), vault.tokenIdOrAmount)` still works when `vault.token` is actually ERC20 token.\n\nHowever, if `token` is an ERC721 token and the user uses `TokenType.ERC20` as `tokenType`. When doing `creatVault()`, `ERC20(vault.token).safeTransferFrom(msg.sender, address(this), vault.tokenIdOrAmount)` works fine. But when doing `exercise()` or `withdraw()`, `ERC20(vault.token).safeTransfer(msg.sender, vault.tokenIdOrAmount);` doesn’t work since ERC721 doesn’t implement `safeTransfer()` function. In consequence, the ERC721 token is frozen in the vault.\n\n### Proof of Concept\n\n`createVault()` does not confirm whether `tokenType` and `token`’s type are the same.\nBut the token can still be transferred into this contract. Since `transferFrom()` is implemented in ERC20 and `safeTransferFrom()` is implemented in ERC721\n<https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L158-L201>\n\n        function createVault(\n            uint256 tokenIdOrAmount,\n            address token,\n            uint8 premiumIndex,\n            uint8 durationDays,\n            uint8 dutchAuctionStartingStrikeIndex,\n            uint256 dutchAuctionReserveStrike,\n            TokenType tokenType\n        ) external returns (uint256 vaultId) {\n            require(premiumIndex < premiumOptions.length, \"Invalid premium index\");\n            require(dutchAuctionStartingStrikeIndex < strikeOptions.length, \"Invalid strike index\");\n            require(dutchAuctionReserveStrike < strikeOptions[dutchAuctionStartingStrikeIndex], \"Reserve strike too small\");\n            require(durationDays > 0, \"durationDays too small\");\n            require(tokenType == TokenType.ERC721 || tokenType == TokenType.ERC20, \"Invalid token type\");\n\n            Vault memory vault = Vault({\n                tokenIdOrAmount: tokenIdOrAmount,\n                token: token,\n                premiumIndex: premiumIndex,\n                durationDays: durationDays,\n                dutchAuctionStartingStrikeIndex: dutchAuctionStartingStrikeIndex,\n                currentExpiration: uint32(block.timestamp),\n                isExercised: false,\n                isWithdrawing: false,\n                tokenType: tokenType,\n                currentStrike: 0,\n                dutchAuctionReserveStrike: dutchAuctionReserveStrike\n            });\n\n            // vault index should always be odd\n            vaultIndex += 2;\n            vaultId = vaultIndex;\n            _vaults[vaultId] = vault;\n\n            // give msg.sender vault token\n            _mint(msg.sender, vaultId);\n\n            emit NewVault(vaultId, msg.sender, token);\n\n            // transfer the NFTs or ERC20s to the contract\n            vault.tokenType == TokenType.ERC721\n                ? ERC721(vault.token).transferFrom(msg.sender, address(this), vault.tokenIdOrAmount)\n                : ERC20(vault.token).safeTransferFrom(msg.sender, address(this), vault.tokenIdOrAmount);\n        }\n\nHowever when doing `exercise()` or `withdraw()`, it always reverts since ERC721 doesn’t implement `safeTransfer()`. The ERC721 token is frozen in the contract.\n\n<https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L296>\n\n```\n    function exercise(uint256 optionId) external payable {\n        …\n        // transfer the NFTs or ERC20s to the exerciser\n        vault.tokenType == TokenType.ERC721\n            ? ERC721(vault.token).transferFrom(address(this), msg.sender, vault.tokenIdOrAmount)\n            : ERC20(vault.token).safeTransfer(msg.sender, vault.tokenIdOrAmount);\n    }\n\n```\n\n<https://github.com/code-423n4/2022-05-cally/blob/main/contracts/src/Cally.sol#L345>\n\n```\n    function withdraw(uint256 vaultId) external nonReentrant {\n        …\n        // transfer the NFTs or ERC20s back to the owner\n        vault.tokenType == TokenType.ERC721\n            ? ERC721(vault.token).transferFrom(address(this), msg.sender, vault.tokenIdOrAmount)\n            : ERC20(vault.token).safeTransfer(msg.sender, vault.tokenIdOrAmount);\n    }\n\n```\n\n### Recommended Mitigation Steps\n\nConfirm whether `tokenType` and `token`’s type are the same in `createVault()`.\n\n**[outdoteth (Cally) disputed, disagreed with severity and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/243#issuecomment-1127490806):**\n > ref; https://github.com/code-423n4/2022-05-cally-findings/issues/38\n\n**[HardlyDifficult (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-05-cally-findings/issues/243#issuecomment-1136521143):**\n > There were a lot of reports recommending a similar change, but this is one of the few that points our a critical issue that could arise in the current state.\n> \n> Although the issue only occurs when the original vault creator makes a user error, the fact that their NFT becomes unrecoverable makes this a Medium Risk concern.\n\n\n\n***\n\n\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 67 reports were submitted by wardens detailing low risk and non-critical issues. The [report highlighted below](https://github.com/code-423n4/2022-05-cally-findings/issues/281) by **hubble** received the top score from the judge.\n\n*The following wardens also submitted reports: [VAD37](https://github.com/code-423n4/2022-05-cally-findings/issues/182), [IllIllI](https://github.com/code-423n4/2022-05-cally-findings/issues/46), [shung](https://github.com/code-423n4/2022-05-cally-findings/issues/115), [MiloTruck](https://github.com/code-423n4/2022-05-cally-findings/issues/131), [ellahi](https://github.com/code-423n4/2022-05-cally-findings/issues/78), [MaratCerby](https://github.com/code-423n4/2022-05-cally-findings/issues/7), [WatchPug](https://github.com/code-423n4/2022-05-cally-findings/issues/232), [reassor](https://github.com/code-423n4/2022-05-cally-findings/issues/303), [Picodes](https://github.com/code-423n4/2022-05-cally-findings/issues/192), [shenwilly](https://github.com/code-423n4/2022-05-cally-findings/issues/37), [0xDjango](https://github.com/code-423n4/2022-05-cally-findings/issues/103), [Bludya](https://github.com/code-423n4/2022-05-cally-findings/issues/159), [pmerkleplant](https://github.com/code-423n4/2022-05-cally-findings/issues/146), [hake](https://github.com/code-423n4/2022-05-cally-findings/issues/74), [joestakey](https://github.com/code-423n4/2022-05-cally-findings/issues/268), [robee](https://github.com/code-423n4/2022-05-cally-findings/issues/266), [cccz](https://github.com/code-423n4/2022-05-cally-findings/issues/33), [hyh](https://github.com/code-423n4/2022-05-cally-findings/issues/311), [sseefried](https://github.com/code-423n4/2022-05-cally-findings/issues/292), [hickuphh3](https://github.com/code-423n4/2022-05-cally-findings/issues/41), [seanamani](https://github.com/code-423n4/2022-05-cally-findings/issues/197), [djxploit](https://github.com/code-423n4/2022-05-cally-findings/issues/276), [dirk_y](https://github.com/code-423n4/2022-05-cally-findings/issues/107), [Kumpa](https://github.com/code-423n4/2022-05-cally-findings/issues/119), [fatherOfBlocks](https://github.com/code-423n4/2022-05-cally-findings/issues/153), [pedroais](https://github.com/code-423n4/2022-05-cally-findings/issues/220), [catchup](https://github.com/code-423n4/2022-05-cally-findings/issues/215), [radoslav11](https://github.com/code-423n4/2022-05-cally-findings/issues/118), [csanuragjain](https://github.com/code-423n4/2022-05-cally-findings/issues/11), [BowTiedWardens](https://github.com/code-423n4/2022-05-cally-findings/issues/190), [Cityscape](https://github.com/code-423n4/2022-05-cally-findings/issues/98), [sorrynotsorry](https://github.com/code-423n4/2022-05-cally-findings/issues/267), [z3s](https://github.com/code-423n4/2022-05-cally-findings/issues/260), [0xsanson](https://github.com/code-423n4/2022-05-cally-findings/issues/307), [minhquanym](https://github.com/code-423n4/2022-05-cally-findings/issues/95), [sikorico](https://github.com/code-423n4/2022-05-cally-findings/issues/202), [Czar102](https://github.com/code-423n4/2022-05-cally-findings/issues/296), [jah](https://github.com/code-423n4/2022-05-cally-findings/issues/217), [0x4non](https://github.com/code-423n4/2022-05-cally-findings/issues/18), [bobirichman](https://github.com/code-423n4/2022-05-cally-findings/issues/219), [antonttc](https://github.com/code-423n4/2022-05-cally-findings/issues/150), [BondiPestControl](https://github.com/code-423n4/2022-05-cally-findings/issues/207), [0x1f8b](https://github.com/code-423n4/2022-05-cally-findings/issues/43), [FSchmoede](https://github.com/code-423n4/2022-05-cally-findings/issues/133), [hansfriese](https://github.com/code-423n4/2022-05-cally-findings/issues/101), [rfa](https://github.com/code-423n4/2022-05-cally-findings/issues/291), [0xf15ers](https://github.com/code-423n4/2022-05-cally-findings/issues/172), [TrungOre](https://github.com/code-423n4/2022-05-cally-findings/issues/204), [Aits](https://github.com/code-423n4/2022-05-cally-findings/issues/280), [242](https://github.com/code-423n4/2022-05-cally-findings/issues/122), [Waze](https://github.com/code-423n4/2022-05-cally-findings/issues/279), [horsefacts](https://github.com/code-423n4/2022-05-cally-findings/issues/294), [Funen](https://github.com/code-423n4/2022-05-cally-findings/issues/233), [Kenshin](https://github.com/code-423n4/2022-05-cally-findings/issues/174), [mics](https://github.com/code-423n4/2022-05-cally-findings/issues/185), [CertoraInc](https://github.com/code-423n4/2022-05-cally-findings/issues/284), [Hawkeye](https://github.com/code-423n4/2022-05-cally-findings/issues/157), [Ruhum](https://github.com/code-423n4/2022-05-cally-findings/issues/124), [dipp](https://github.com/code-423n4/2022-05-cally-findings/issues/286), [0x1337](https://github.com/code-423n4/2022-05-cally-findings/issues/62), [cryptphi](https://github.com/code-423n4/2022-05-cally-findings/issues/113), [BouSalman](https://github.com/code-423n4/2022-05-cally-findings/issues/108), [eccentricexit](https://github.com/code-423n4/2022-05-cally-findings/issues/64), [AlleyCat](https://github.com/code-423n4/2022-05-cally-findings/issues/10), [delfin454000](https://github.com/code-423n4/2022-05-cally-findings/issues/142), and [JDeryl](https://github.com/code-423n4/2022-05-cally-findings/issues/1).*\n\n## [L-01] Wrong error message string in function createVault()\n\nFunction : createVault() in Cally.sol\n\nline 169  require(dutchAuctionReserveStrike < strikeOptions[dutchAuctionStartingStrikeIndex], \"Reserve strike too small\");\n\n### Impact\nIf the current error message is followed, user will never be able to successfully createVault()\n\n\n### Recommended Mitigation Steps\nCorrect error message string\n> require(dutchAuctionReserveStrike < strikeOptions[dutchAuctionStartingStrikeIndex], \"Reserve strike more than Starting strike\");\n\n## [L-02]  Function vaults() can return misleading information\nVaultId are odd in number; if a valultId of event number is given, the function valuts() will return misleading information.\n\nFunction valuts() in Cally.sol\n\n### Recommended Mitigation Steps\nCheck if the valutID parameter is of vault type, by adding a require statement\n\n    function vaults(uint256 vaultId) external view returns (Vault memory) {\n        require(vaultId % 2 != 0, \"Not vault type\");\n        return _vaults[vaultId];\n    }\n\n## [L-03] initiateWithdraw() should not be callable , if option already exercised\n\nIf the option is already exercised, the vault owner should not be allowed to call the initiateWithdraw() function.\n\n### Recommended Mitigation Steps\nAdd a require statement in the function initiateWithdraw()\n>   require(vault.isExercised == false, \"Vault already exercised\");\n\n## [L-04] Ambiguous error message in createVault() for durationDays\n\nIf a value of 0 is given for durationDays in the createVault() function, the transaction will revert with an ambigous message \"durationDays too small\"\nIt can better stated as given below\n\n### Recommended Mitigation Steps\nError message string can be changed as below.\n> line 170   require(durationDays > 0, \"durationDays cannot be zero\");\n\n\n## [L-05] The available values in premiumOptions[] & strikeOptions[] are too restrictive\n\nTo reduce gas and storage, the protocol has currently designed to store the index of the premiumOptions[] & strikeOptions[] in the Vault structure.\n\n### Impact\nThis is too restrictive and may not be future proof.\n\n### Recommended Mitigation Steps\nOne suggestion is to add another member unit8 premiumMultiplier (with default value of 1) in the Vault struct, and users can have combination of values of the\npremiumMultiplier and premiumIndex to define more range of premium values if required.\n\nSame suggestion applies for adding a multiplier for the strikeOptions[]\n\n## [L-06] No event is raised when feeRate is changed\n\n### Impact\nWhen feeRate is changed at setFee(Cally.sol), no event is raised. It would be important to raise this event for any external integration with this system.\n\n### Proof of Concept\nContract : Cally.sol\nFunction : setFee\n\n### Recommended Mitigation Steps\n\nevent definition\n```\nevent FeeRateUpdated(uint256 newFeeRate);\n```\n\nevent emit at setFee function\n```\nrequire(feeRate_ != feeRate, \"new feeRate should be different\");\nfeeRate = feeRate_;\nemit FeeRateUpdated(feeRate_);\n```\n\n## [L-07] No event is raised when vault beneficiary is changed\n\n### Impact\nWhen beneficiary is changed at setVaultBeneficiary(Cally.sol), no event is raised. It would be important to raise this event for any external integration with this system.\n\n### Proof of Concept\nContract : Cally.sol\nFunction : setVaultBeneficiary\n\n### Recommended Mitigation Steps\n\nevent definition\n```\nevent VaultBeneficiaryUpdated(uint256 indexed vaultId, address indexed beneficiary);\n```\n\nevent emit at setVaultBeneficiary function\n```\nemit VaultBeneficiaryUpdated(vaultId, beneficiary);\n```\n\n## [N-01] Consistency in fetching vault values\nIn Cally.sol, function buyOption the following is the order of lines.\nline 208   require(vaultId % 2 != 0, \"Not vault type\");\nline 211   Vault memory vault = _vaults[vaultId];\n\nThis can be made consistent with other functions by changing the order.\n\n  Vault memory vault = _vaults[vaultId];\n  require(vaultId % 2 != 0, \"Not vault type\");\n\n\n## [N-02] valutIndex = 1 is never used\nThe value of vaultIndex = 1  is never assigned to any vault.\n```\n        // vault index should always be odd\n        vaultIndex += 2;\n        vaultId = vaultIndex;\n        _vaults[vaultId] = vault;\n```\nThis can be changed to as below, so that vaultID = 1 is also used\n```\n        vaultId = vaultIndex;\n        // vault index should always be odd\n        vaultIndex += 2;\n        _vaults[vaultId] = vault;\n```\n\n**[outdoteth (Cally) commented](https://github.com/code-423n4/2022-05-cally-findings/issues/281#issuecomment-1128026692):**\n > high quality report\n\n***\n\n# Gas Optimizations\n\nFor this contest, 59 reports were submitted by wardens detailing gas optimizations. The [report highlighted below](https://github.com/code-423n4/2022-05-cally-findings/issues/45) by **IllIllI** received the top score from the judge.\n\n*The following wardens also submitted reports: [BowTiedWardens](https://github.com/code-423n4/2022-05-cally-findings/issues/189), [shung](https://github.com/code-423n4/2022-05-cally-findings/issues/114), [rotcivegaf](https://github.com/code-423n4/2022-05-cally-findings/issues/143), [TomFrenchBlockchain](https://github.com/code-423n4/2022-05-cally-findings/issues/261), [MaratCerby](https://github.com/code-423n4/2022-05-cally-findings/issues/6), [MiloTruck](https://github.com/code-423n4/2022-05-cally-findings/issues/132), [VAD37](https://github.com/code-423n4/2022-05-cally-findings/issues/181), [hickuphh3](https://github.com/code-423n4/2022-05-cally-findings/issues/40), [Bludya](https://github.com/code-423n4/2022-05-cally-findings/issues/109), [WatchPug](https://github.com/code-423n4/2022-05-cally-findings/issues/231), [robee](https://github.com/code-423n4/2022-05-cally-findings/issues/264), [rfa](https://github.com/code-423n4/2022-05-cally-findings/issues/290), [RagePit](https://github.com/code-423n4/2022-05-cally-findings/issues/59), [defsec](https://github.com/code-423n4/2022-05-cally-findings/issues/287), [TerrierLover](https://github.com/code-423n4/2022-05-cally-findings/issues/301), [joestakey](https://github.com/code-423n4/2022-05-cally-findings/issues/265), [0x4non](https://github.com/code-423n4/2022-05-cally-findings/issues/17), [CertoraInc](https://github.com/code-423n4/2022-05-cally-findings/issues/283), [horsefacts](https://github.com/code-423n4/2022-05-cally-findings/issues/295), [0x1f8b](https://github.com/code-423n4/2022-05-cally-findings/issues/42), [djxploit](https://github.com/code-423n4/2022-05-cally-findings/issues/293), [Kenshin](https://github.com/code-423n4/2022-05-cally-findings/issues/175), [gzeon](https://github.com/code-423n4/2022-05-cally-findings/issues/209), [ellahi](https://github.com/code-423n4/2022-05-cally-findings/issues/79), [minhquanym](https://github.com/code-423n4/2022-05-cally-findings/issues/96), [sikorico](https://github.com/code-423n4/2022-05-cally-findings/issues/201), [antonttc](https://github.com/code-423n4/2022-05-cally-findings/issues/144), [0xf15ers](https://github.com/code-423n4/2022-05-cally-findings/issues/173), [Waze](https://github.com/code-423n4/2022-05-cally-findings/issues/278), [fatherOfBlocks](https://github.com/code-423n4/2022-05-cally-findings/issues/152), [pmerkleplant](https://github.com/code-423n4/2022-05-cally-findings/issues/148), [0xkatana](https://github.com/code-423n4/2022-05-cally-findings/issues/86), [Cityscape](https://github.com/code-423n4/2022-05-cally-findings/issues/93), [MadWookie](https://github.com/code-423n4/2022-05-cally-findings/issues/164), [bobirichman](https://github.com/code-423n4/2022-05-cally-findings/issues/218), [catchup](https://github.com/code-423n4/2022-05-cally-findings/issues/216), [oyc_109](https://github.com/code-423n4/2022-05-cally-findings/issues/19), [samruna](https://github.com/code-423n4/2022-05-cally-findings/issues/21), [0xDjango](https://github.com/code-423n4/2022-05-cally-findings/issues/105), [_Adam](https://github.com/code-423n4/2022-05-cally-findings/issues/183), [delfin454000](https://github.com/code-423n4/2022-05-cally-findings/issues/141), [0xNazgul](https://github.com/code-423n4/2022-05-cally-findings/issues/26), [0xsanson](https://github.com/code-423n4/2022-05-cally-findings/issues/304), [Picodes](https://github.com/code-423n4/2022-05-cally-findings/issues/193), [hansfriese](https://github.com/code-423n4/2022-05-cally-findings/issues/102), [mics](https://github.com/code-423n4/2022-05-cally-findings/issues/184), [simon135](https://github.com/code-423n4/2022-05-cally-findings/issues/53), [DavidGialdi](https://github.com/code-423n4/2022-05-cally-findings/issues/259), [ignacio](https://github.com/code-423n4/2022-05-cally-findings/issues/117), [Tadashi](https://github.com/code-423n4/2022-05-cally-findings/issues/162), [Funen](https://github.com/code-423n4/2022-05-cally-findings/issues/230), [hake](https://github.com/code-423n4/2022-05-cally-findings/issues/75), [z3s](https://github.com/code-423n4/2022-05-cally-findings/issues/256), [0v3rf10w](https://github.com/code-423n4/2022-05-cally-findings/issues/223), [Hawkeye](https://github.com/code-423n4/2022-05-cally-findings/issues/156), [Fitraldys](https://github.com/code-423n4/2022-05-cally-findings/issues/273), [jonatascm](https://github.com/code-423n4/2022-05-cally-findings/issues/125), and [FSchmoede](https://github.com/code-423n4/2022-05-cally-findings/issues/134).*\n\n## Summary\n\n| |Issue|Instances|\n|-|:-|:-:|\n| 1 | Full vault details unnecessarily fetched twice in each call to `buyOption()` | 1 |\n| 2 | Re-creation of short `memory` arrays is cheaper than fetching indecies from a storage array | 2 |\n| 3 | Use existing stack cache variable rather than re-fetching state variable | 1 |\n| 4 | Cheaper to split struct if only part of it is updated frequently | 1 |\n| 5 | Store actual beneficiary rather than deciding every time | 2 |\n| 6 | Use `unchecked {}` for calculations that cannot overflow | 1 |\n| 7 | Also `_burn()` the vault to get a gas refund | 1 |\n| 8 | State variables should be cached in stack variables rather than re-reading them from storage | 3 |\n| 9 | `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables | 2 |\n| 10 | `<array>.length` should not be looked up in every loop of a `for`-loop | 1 |\n| 11 | `++i`/`i++` should be `unchecked{++i}`/`unchecked{++i}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops | 1 |\n| 12 | Offsets should only be calculated once per loop | 1 |\n| 13 | Access mappings directly rather than using accessor functions | 5 |\n| 14 | Cheaper input valdiations should come before expensive operations | 2 |\n| 15 | Not using the named return variables when a function returns, wastes deployment gas | 2 |\n| 16 | Use a more recent version of solidity | 1 |\n| 17 | Using `> 0` costs more gas than `!= 0` when used on a `uint` in a `require()` statement | 1 |\n| 18 | It costs more gas to initialize variables to zero than to let the default of zero be applied | 2 |\n| 19 | `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too) | 1 |\n| 20 | Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead | 10 |\n| 21 | Using `private` rather than `public` for constants, saves gas | 1 |\n| 22 | Don't compare boolean expressions to boolean literals | 3 |\n| 23 | Duplicated `require()`/`revert()` checks should be refactored to a modifier or function | 4 |\n| 24 | Multiplication/division by two should use bit shifting | 3 |\n| 25 | Use custom errors rather than `revert()`/`require()` strings to save deployment gas | 32 |\n| 26 | Functions guaranteed to revert when called by normal users can be marked `payable` | 2 |\n\nTotal: 86 instances over 26 issues\n\n## [G-01] Full vault details unnecessarily fetched twice in each call to `buyOption()`\n`getPremium()` should be changed to have its argument be an index into the array, rather than looking up the vault again. Since this is in one of the two frequently-called functions, it'll save a lot of gas\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n223:         uint256 premium = getPremium(vaultId);\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L223\n\n## [G-02] Re-creation of short `memory` arrays is cheaper than fetching indecies from a storage array\nSince the arrays are relatively short, it's cheaper to have a pure virtual function that [re-creates them every time](https://ethereum.stackexchange.com/questions/66388/standard-work-around-for-using-a-solidity-constant-array-which-is-not-supported/96599#96599) just to fetch a specific index, rather than incuring a Gcoldsload (2100 gas). Since this is in one of the two frequently-called functions, it'll save a lot of gas\n\n*There are 2 instances of this issue:*\n```solidity\nFile: ./contracts/src/Cally.sol   #1\n\n90:      uint256[] public premiumOptions = [0.01 ether, 0.025 ether, 0.05 ether, 0.075 ether, 0.1 ether, 0.25 ether, 0.5 ether, 0.75 ether, 1.0 ether, 2.5 ether, 5.0 ether, 7.5 ether, 10 ether, 25 ether, 50 ether, 75 ether, 100 ether];\n```\n./https://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L90\n\n```solidity\nFile: contracts/src/Cally.sol   #2\n\n92:      uint256[] public strikeOptions = [1 ether, 2 ether, 3 ether, 5 ether, 8 ether, 13 ether, 21 ether, 34 ether, 55 ether, 89 ether, 144 ether, 233 ether, 377 ether, 610 ether, 987 ether, 1597 ether, 2584 ether, 4181 ether, 6765 ether];\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L92\n\n## [G-03] Use existing stack cache variable rather than re-fetching state variable\nUsing `auctionStartTimestamp` defined above will save a Gwarmaccess (100 gas). Since this is in one of the two frequently-called functions, it'll save a lot of gas\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n233:             vault.currentExpiration + AUCTION_DURATION,\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L233\n\n## [G-04] Cheaper to split struct if only part of it is updated frequently\nThe `currentStrike` and `currentExpiration` fields are updated frequently so they should be in a separate struct rather than re-writing the whole struct every time\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n230          // set new currentStrike\n231          vault.currentStrike = getDutchAuctionStrike(\n232              strikeOptions[vault.dutchAuctionStartingStrikeIndex],\n233              vault.currentExpiration + AUCTION_DURATION,\n234              vault.dutchAuctionReserveStrike\n235          );\n236  \n237          // set new expiration\n238          vault.currentExpiration = uint32(block.timestamp) + (vault.durationDays * 1 days);\n239  \n240          // update the vault with the new option expiration and strike\n241:         _vaults[vaultId] = vault;\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L230-L241\n\n## [G-05] Store actual beneficiary rather than deciding every time\nIf the beneficiary array assigns the owner every time the NFT is minted or transferred, the mapping can be used directly, saving the gas overhead of function calls\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n249:         address beneficiary = getVaultBeneficiary(vaultId);\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L249\n\n```solidity\nFile: contracts/src/Cally.sol   #2\n\n289:         ethBalance[getVaultBeneficiary(vaultId)] += msg.value - fee;\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L289\n\n## [G-06] Use `unchecked {}` for calculations that cannot overflow\nThe subtraction below can be `unchecked {}` because of the check that comes before it\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n417:         uint256 delta = auctionEndTimestamp > block.timestamp ? auctionEndTimestamp - block.timestamp : 0;\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L417\n\n## [G-07] Also `_burn()` the vault to get a gas refund\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n275:         _burn(optionId);\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L275\n\n## [G-08] State variables should be cached in stack variables rather than re-reading them from storage\nThe instances below point to the second+ access of a state variable within a function. Caching will replace each Gwarmaccess (100 gas) with a much cheaper stack read.\nLess obvious fixes/optimizations include having local storage variables of mappings within state variable mappings or mappings within state variable structs, having local storage variables of structs within mappings, having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.\n\n*There are 3 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n/// @audit strikeOptions\n169:          require(dutchAuctionReserveStrike < strikeOptions[dutchAuctionStartingStrikeIndex], \"Reserve strike too small\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L169\n\n```solidity\nFile: contracts/src/Cally.sol   #2\n\n/// @audit feeRate\n284:              fee = (msg.value * feeRate) / 1e18;\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L284\n\n```solidity\nFile: contracts/src/Cally.sol   #3\n\n/// @audit vaultIndex\n189:          vaultId = vaultIndex;\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L189\n\n## [G-09] `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n188:          vaultIndex += 2;\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L188\n\n```solidity\nFile: contracts/src/Cally.sol   #2\n\n285:              protocolUnclaimedFees += fee;\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L285\n\n## [G-10] `<array>.length` should not be looked up in every loop of a `for`-loop\nThe overheads outlined below are _PER LOOP_, excluding the first loop\n* storage arrays incur a Gwarmaccess (100 gas)\n* memory arrays use `MLOAD` (3 gas)\n* calldata arrays use `CALLDATALOAD` (3 gas)\n\nCaching the length changes each of these to a `DUP<N>` (3 gas), and gets rid of the extra `DUP<N>` needed to store the stack offset\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/src/CallyNft.sol   #1\n\n244:          for (uint256 i = 0; i < data.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244\n\n## [G-11] `++i`/`i++` should be `unchecked{++i}`/`unchecked{i++}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops\nThe `unchecked` keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves 30-40 gas [_PER LOOP_](https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#the-increment-in-for-loop-post-condition-can-be-made-unchecked)\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/src/CallyNft.sol   #1\n\n244:          for (uint256 i = 0; i < data.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244\n\n## [G-12] Offsets should only be calculated once per loop\n`i * 2` is calculated twice per loop, wasting gas\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/src/CallyNft.sol   #1\n\n244          for (uint256 i = 0; i < data.length; i++) {\n245              str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\n246              str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\n247:         }\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244-L247\n\n## [G-13] Access mappings directly rather than using accessor functions\nSaves having to do two JUMP instructions, along with stack setup\n\n*There are 5 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol\n\n214:         require(ownerOf(vaultId) != address(0), \"Vault does not exist\");\n\n263:         require(msg.sender == ownerOf(optionId), \"You are not the owner\");\n\n307:         require(msg.sender == ownerOf(vaultId), \"You are not the owner\");\n\n323:         require(msg.sender == ownerOf(vaultId), \"You are not the owner\");\n\n354:         require(msg.sender == ownerOf(vaultId), \"Not owner\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol\n\n## [G-14] Cheaper input valdiations should come before expensive operations\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n211:         require(vaultId % 2 != 0, \"Not vault type\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L211\n\n```solidity\nFile: contracts/src/Cally.sol   #2\n\n214:         require(ownerOf(vaultId) != address(0), \"Vault does not exist\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L214\n\n## [G-15] Not using the named return variables when a function returns, wastes deployment gas\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n382:          return currentBeneficiary == address(0) ? ownerOf(vaultId) : currentBeneficiary;\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L382\n\n```solidity\nFile: contracts/src/Cally.sol   #2\n\n396:          return premiumOptions[vault.premiumIndex];\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L396\n\n## [G-16] Use a more recent version of solidity\nUse a solidity version of at least 0.8.0 to get overflow protection without `SafeMath`\n\nUse a solidity version of at least 0.8.2 to get compiler automatic inlining\n\nUse a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads\n\nUse a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than `revert()/require()` strings\n\nUse a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/lib/base64/base64.sol   #1\n\n3:    pragma solidity >=0.6.0;\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/lib/base64/base64.sol#L3\n\n## [G-17] Using `> 0` costs more gas than `!= 0` when used on a `uint` in a `require()` statement\nThis change saves [6 gas](https://aws1.discourse-cdn.com/business6/uploads/zeppelin/original/2X/3/363a367d6d68851f27d2679d10706cd16d788b96.png) per instance\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n170:          require(durationDays > 0, \"durationDays too small\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L170\n\n## [G-18] It costs more gas to initialize variables to zero than to let the default of zero be applied\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n282:          uint256 fee = 0;\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L282\n\n```solidity\nFile: contracts/src/CallyNft.sol   #2\n\n244:          for (uint256 i = 0; i < data.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244\n\n## [G-19] `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too)\nSaves 6 gas _PER LOOP_\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/src/CallyNft.sol   #1\n\n244:          for (uint256 i = 0; i < data.length; i++) {\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L244\n\n## [G-20] Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\n\nhttps://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\nUse a larger size then downcast where needed\n\n*There are 10 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol\n\n76:           uint8 premiumIndex; // indexes into `premiumOptions`\n\n77:           uint8 durationDays; // days\n\n78:           uint8 dutchAuctionStartingStrikeIndex; // indexes into `strikeOptions`\n\n79:           uint32 currentExpiration;\n\n87:       uint32 public constant AUCTION_DURATION = 24 hours;\n\n161:          uint8 premiumIndex,\n\n162:          uint8 durationDays,\n\n163:          uint8 dutchAuctionStartingStrikeIndex,\n\n227:          uint32 auctionStartTimestamp = vault.currentExpiration;\n\n408:          uint32 auctionEndTimestamp,\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol\n\n### [G-21] Using `private` rather than `public` for constants, saves gas\nIf needed, the value can be read from the verified contract source code. Savings are due to the compiler not having to create non-payable getter functions for deployment calldata, and not adding another entry to the method ID table\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n87:       uint32 public constant AUCTION_DURATION = 24 hours;\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L87\n\n## [G-22] Don't compare boolean expressions to boolean literals\n`if (<x> == true)` => `if (<x>)`, `if (<x> == false)` => `if (!<x>)`\n\n*There are 3 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n217:          require(vault.isExercised == false, \"Vault already exercised\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L217\n\n```solidity\nFile: contracts/src/Cally.sol   #2\n\n220:          require(vault.isWithdrawing == false, \"Vault is being withdrawn\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L220\n\n```solidity\nFile: contracts/src/Cally.sol   #3\n\n328:          require(vault.isExercised == false, \"Vault already exercised\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L328\n\n## [G-23] Duplicated `require()`/`revert()` checks should be refactored to a modifier or function\nSaves deployment costs\n\n*There are 4 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n304:          require(vaultId % 2 != 0, \"Not vault type\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L304\n\n```solidity\nFile: contracts/src/Cally.sol   #2\n\n328:          require(vault.isExercised == false, \"Vault already exercised\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L328\n\n```solidity\nFile: contracts/src/Cally.sol   #3\n\n323:          require(msg.sender == ownerOf(vaultId), \"You are not the owner\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L323\n\n```solidity\nFile: contracts/src/CallyNft.sol   #4\n\n42:           require(to != address(0), \"INVALID_RECIPIENT\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L42\n\n## [G-24] Multiplication/division by two should use bit shifting\n`<x> * 2` is equivalent to `<x> << 1` and `<x> / 2` is the same as `<x> >> 1`. The `MUL` and `DIV` opcodes cost 5 gas, whereas `SHL` and `SHR` only cost 3 gas\n\n*There are 3 instances of this issue:*\n```solidity\nFile: contracts/src/CallyNft.sol   #1\n\n241:          bytes memory str = new bytes(2 + data.length * 2);\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L241\n\n```solidity\nFile: contracts/src/CallyNft.sol   #2\n\n245:              str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L245\n\n```solidity\nFile: contracts/src/CallyNft.sol   #3\n\n246:              str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol#L246\n\n## [G-25] Use custom errors rather than `revert()`/`require()` strings to save deployment gas\nCustom errors are available from solidity version 0.8.4. The instances below match or exceed that version\n\n*There are 32 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol\n\n167:          require(premiumIndex < premiumOptions.length, \"Invalid premium index\");\n\n168:          require(dutchAuctionStartingStrikeIndex < strikeOptions.length, \"Invalid strike index\");\n\n169:          require(dutchAuctionReserveStrike < strikeOptions[dutchAuctionStartingStrikeIndex], \"Reserve strike too small\");\n\n170:          require(durationDays > 0, \"durationDays too small\");\n\n171:          require(tokenType == TokenType.ERC721 || tokenType == TokenType.ERC20, \"Invalid token type\");\n\n211:          require(vaultId % 2 != 0, \"Not vault type\");\n\n214:          require(ownerOf(vaultId) != address(0), \"Vault does not exist\");\n\n217:          require(vault.isExercised == false, \"Vault already exercised\");\n\n220:          require(vault.isWithdrawing == false, \"Vault is being withdrawn\");\n\n224:          require(msg.value >= premium, \"Incorrect ETH amount sent\");\n\n228:          require(block.timestamp >= auctionStartTimestamp, \"Auction not started\");\n\n260:          require(optionId % 2 == 0, \"Not option type\");\n\n263:          require(msg.sender == ownerOf(optionId), \"You are not the owner\");\n\n269:          require(block.timestamp < vault.currentExpiration, \"Option has expired\");\n\n272:          require(msg.value == vault.currentStrike, \"Incorrect ETH sent for strike\");\n\n304:          require(vaultId % 2 != 0, \"Not vault type\");\n\n307:          require(msg.sender == ownerOf(vaultId), \"You are not the owner\");\n\n320:          require(vaultId % 2 != 0, \"Not vault type\");\n\n323:          require(msg.sender == ownerOf(vaultId), \"You are not the owner\");\n\n328:          require(vault.isExercised == false, \"Vault already exercised\");\n\n329:          require(vault.isWithdrawing, \"Vault not in withdrawable state\");\n\n330:          require(block.timestamp > vault.currentExpiration, \"Option still active\");\n\n353:          require(vaultId % 2 != 0, \"Not vault type\");\n\n354:          require(msg.sender == ownerOf(vaultId), \"Not owner\");\n\n436:          require(from == _ownerOf[id], \"WRONG_FROM\");\n\n437:          require(to != address(0), \"INVALID_RECIPIENT\");\n\n438           require(\n439               msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\n440               \"NOT_AUTHORIZED\"\n441:          );\n\n456:          require(_ownerOf[tokenId] != address(0), \"URI query for NOT_MINTED token\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol\n\n```solidity\nFile: contracts/src/CallyNft.sol\n\n15:           require(to != address(0), \"INVALID_RECIPIENT\");\n\n16:           require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n36:           require(owner != address(0), \"ZERO_ADDRESS\");\n\n42:           require(to != address(0), \"INVALID_RECIPIENT\");\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/CallyNft.sol\n\n## [G-26] Functions guaranteed to revert when called by normal users can be marked `payable`\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are \n`CALLVALUE`(2),`DUP1`(3),`ISZERO`(3),`PUSH2`(3),`JUMPI`(10),`PUSH1`(3),`DUP1`(3),`REVERT`(0),`JUMPDEST`(1),`POP`(2), which costs an average of about 21 gas per call to the function, in addition to the extra deployment cost\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/src/Cally.sol   #1\n\n119:      function setFee(uint256 feeRate_) external onlyOwner {\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L119\n\n```solidity\nFile: contracts/src/Cally.sol   #2\n\n124:      function withdrawProtocolFees() external onlyOwner returns (uint256 amount) {\n```\nhttps://github.com/code-423n4/2022-05-cally/blob/1849f9ee12434038aa80753266ce6a2f2b082c59/contracts/src/Cally.sol#L124\n\n**[outdoteth (Cally) commented](https://github.com/code-423n4/2022-05-cally-findings/issues/45#issuecomment-1128108328):**\n > this is the best gas report imo - hats off to you!\n\n***\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}