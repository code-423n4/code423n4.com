{
  "circa": {
    "title": "Based Loans",
    "sponsor": "Based Loans",
    "slug": "2021-04-basedloans",
    "date": "2021-05-27",
    "findings": "https://github.com/code-423n4/2021-04-basedloans-findings/issues",
    "contest": 7
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code 432n4 (C4) is an open organization that consists of security researchers, auditors, developers, and individuals with domain expertise in the area of smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Based Loans’ smart contract system written in Solidity. The code contest took place between April 2 and April 7, 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>6 Wardens contributed reports to the Based Loans code contest:</p>\n<ul>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://twitter.com/0xRajeev\">OxRajeev</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">Thunder</a></li>\n<li><a href=\"https://twitter.com/shw9453\">shw</a></li>\n<li><a href=\"https://twitter.com/AshiqAmien\">toastedsteaksandwich</a></li>\n</ul>\n<p>This contest was judged by <a href=\"https://twitter.com/cemozer_\">Cem</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/_ninek_\">ninek</a> and <a href=\"https://twitter.com/sockdrawermoney\">sockdrawermoney</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 31 unique vulnerabilities. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 2 received a risk rating in the category of HIGH severity, 1 received a risk rating in the category of MEDIUM severity, and 13 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 15 non-critical recommendations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-04-basedloans\">C4 code contest repository</a> and comprises 31 smart contracts written in the Solidity programming language.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into 3 primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<p><br /><br /></p>\n<h1 id=\"high-risk-findings\" style=\"position:relative;\"><a href=\"#high-risk-findings\" aria-label=\"high risk findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings</h1>\n<h2 id=\"h-01-uniswapconfig-getters-return-wrong-token-config-if-token-config-does-not-exist\" style=\"position:relative;\"><a href=\"#h-01-uniswapconfig-getters-return-wrong-token-config-if-token-config-does-not-exist\" aria-label=\"h 01 uniswapconfig getters return wrong token config if token config does not exist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/37\">[H-01] UniswapConfig getters return wrong token config if token config does not exist</a></h2>\n<p>The <code>UniswapConfig.getTokenConfigBySymbolHash</code> function does not work as <code>getSymbolHashIndex</code> returns <code>0</code> if there is no config token for that symbol (uninitialized map value), but the outer function implements the non-existence check with <code>-1</code>.</p>\n<p>The same issue occurs also for:</p>\n<ul>\n<li><code>getTokenConfigByCToken</code></li>\n<li><code>getTokenConfigByUnderlying</code></li>\n</ul>\n<p>When encountering a non-existent token config, it will always return the token config of the <strong>first index</strong> (index 0) which is a valid token config for a completely different token.</p>\n<p>This leads to wrong oracle prices for the actual token which could in the worst case be used to borrow more tokens at a lower price or borrow more tokens by having a higher collateral value, essentially allowing undercollateralized loans that cannot be liquidated.</p>\n<p>Recommend fixing the non-existence check.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/37#issuecomment-835476066\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>Addressed in <strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/37#issuecomment-835514226\">this PR</a></strong></p>\n</blockquote>\n <br />\n<h2 id=\"h-02-uint-1-index-for-not-found\" style=\"position:relative;\"><a href=\"#h-02-uint-1-index-for-not-found\" aria-label=\"h 02 uint 1 index for not found permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/24\">[H-02] uint(-1) index for not found</a></h2>\n<p>Functions <code>getTokenConfigBySymbolHash</code>, <code>getTokenConfigByCToken</code> and <code>getTokenConfigByUnderlying</code> check returned index against max uint:\nindex != uint(-1)</p>\n<p>-1 should indicate that the index is not found, however, a default value for an uninitialized uint is 0, so it is impossible to get -1. What is even weirder is that 0 will be returned for non-existing configs but 0 is a valid index for the 1st config.</p>\n<p>One of the solutions would be to reserve 0 for a not found index and use it when searching in mappings. Then normal indexes should start from 1. Another solution would be to introduce a new mapping with a boolean value that indicates if this index is initialized or not but this may be a more gas costly way.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/24#issuecomment-835514161\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p><code>UniswapConfig</code> has been refactored. Index 0 is considered a non-existent config and all comparison are against that value.</p>\n</blockquote>\n<p><br /><br /></p>\n<h1 id=\"medium-risk-findings\" style=\"position:relative;\"><a href=\"#medium-risk-findings\" aria-label=\"medium risk findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings</h1>\n<h2 id=\"m-01-reward-rates-can-be-changed-through-flash-borrows\" style=\"position:relative;\"><a href=\"#m-01-reward-rates-can-be-changed-through-flash-borrows\" aria-label=\"m 01 reward rates can be changed through flash borrows permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/33\">[M-01] Reward rates can be changed through flash borrows</a></h2>\n<p>The rewards per market are proportional to their <code>totalBorrows</code> which can be changed by a large holder who deposits lots of collateral, takes out a huge borrow in the market, updates the rewards, and then unwinds the position.\nThey’ll only pay gas fees as the borrow / repay can happen in the same block.</p>\n<p>The <code>Comptroller.refreshCompSpeeds</code> function only checks that the single transaction is called from an EOA, but miners (or anyone if a miner offers services like flash bundles for flashbots) can still run flash-loan-like attacks by first sending a borrow tx increasing the totalBorrows, then the <code>refreshCompSpeeds</code> transaction, and then the repay of the borrow, as miners have full control over the transaction order of the block.</p>\n<p>The new rate will then persist until the next call to <code>refreshCompSpeeds</code>.</p>\n<p>Attackers have an incentive to drive up the rewards in markets they are a large supplier/borrower in.</p>\n<p>The increased rewards that the attacker receives are essentially stolen from other legitimate users.</p>\n<p>Recommend making it an admin-only function or use a time-weighted total borrow system similar to Uniswap’s price oracles.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/33#issuecomment-835539656\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>Restricting <code>Comptroller.refreshCompSpeeds</code> function to admin only would centralize an ability to update speeds. A better solution may be a bot that keeps track of markets utilizations and updates speeds when needed. That will also give a way to community to participate.</p>\n<p>Also, higher rewards would mean that all participants are getting them and that would bring even more liquidity to the given market and decrease attackers earnings. Attacker could keep moving the liquidity from market to market but everyone would follow quite quickly. If that actually happens, admin has a way to stop the rewards and make <code>refreshCompSpeeds</code> admin-only function as last resolution because comptroller is using proxy pattern.</p>\n</blockquote>\n<p><br /><br /></p>\n<h1 id=\"low-risk-findings\" style=\"position:relative;\"><a href=\"#low-risk-findings\" aria-label=\"low risk findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings</h1>\n<h2 id=\"g-01-requirenoerror-can-be-optimized\" style=\"position:relative;\"><a href=\"#g-01-requirenoerror-can-be-optimized\" aria-label=\"g 01 requirenoerror can be optimized permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/4\">[G-01] requireNoError can be optimized</a></h2>\n<p>The function <code>requireNoError</code> of Cether.sol contains 2 checks on <em>errCode == uint(Error.NO</em>ERROR)_.</p>\n<p>After the first check it returns. After this errCode == uint(Error.NO_ERROR) will never be true, so doesn’t have to be checked.</p>\n<p>Recommend replacing <em>require(errCode == uint(Error.NO</em>ERROR), string(fullMessage));_\nwith <em>require(false, string(fullMessage));</em></p>\n<p>Note: Solidity 8.4 has new error handling functionality which could replace the logic of <code>requireNoError</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/4#issuecomment-832765987\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>It’s added to our backlog. Thanks!</p>\n</blockquote>\n<br />\n<h2 id=\"l-01-no-account-existence-check-for-low-level-call-in-cethersol\" style=\"position:relative;\"><a href=\"#l-01-no-account-existence-check-for-low-level-call-in-cethersol\" aria-label=\"l 01 no account existence check for low level call in cethersol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/16\">[L-01] No account existence check for low-level call in CEther.sol</a></h2>\n<p>Low-level calls call/delegatecall/staticcall return true even if the account called is non-existent (per EVM design). Account existence must be checked prior to calling.</p>\n<p>The <code>doTransferOut()</code> function was changed from using a <code>transfer()</code> function (which reverts) to a <code>call()</code> function (which returns a boolean), however there is no account existence check for the destination address to. If it doesn’t exist, for some reason, <code>call</code> will still return true (not throw an exception) and successfully pass the return value check on the next line.</p>\n<p>The checked call paths don’t seem vulnerable because they use <code>msg.sender/admin</code> and not a user-controlled address, but this may be a risk if used later in other contexts. Hence rating as low-risk.</p>\n<p>For reference, see this related <a href=\"https://github.com/trailofbits/publications/blob/master/reviews/hermez.pdf\">high-risk severity finding</a> from Trail of Bit’s audit of Hermez Network.</p>\n<p>Recommend checking for account-existence before the <code>call()</code> to make this safely extendable to user-controlled address contexts in future.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/16#issuecomment-832762511\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>Recommended fix has been implemented.</p>\n</blockquote>\n<br />\n<h2 id=\"l-02-sweeptoken-function-removed-in-cerc20sol-from-original-compound-code\" style=\"position:relative;\"><a href=\"#l-02-sweeptoken-function-removed-in-cerc20sol-from-original-compound-code\" aria-label=\"l 02 sweeptoken function removed in cerc20sol from original compound code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/17\">[L-02] sweepToken() function removed in CErc20.sol from original Compound code</a></h2>\n<p>The <code>sweepToken()</code> function in the original Compound code whose specified purpose was to recover accidentally sent ERC20 tokens to contract has been removed.</p>\n<p>The original code comment says: “A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock).” This safety measure is helpful given the number/value of accidentally stuck tokens that are sent to contracts by mistake.</p>\n<p>Tokens accidentally sent to this contract will be stuck leading to fund loss for sender.</p>\n<p>Recommend retaining this function unless there is a specific reason to remove it here.</p>\n<h3 id=\"comments\" style=\"position:relative;\"><a href=\"#comments\" aria-label=\"comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comments:</h3>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/17#issuecomment-835528244\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>Fixed as recommended, thanks!</p>\n</blockquote>\n<br />\n<h2 id=\"l-03-all-except-one-comptroller-verify-functions-do-not-verify-anything-in-comptrollersolctokensol\" style=\"position:relative;\"><a href=\"#l-03-all-except-one-comptroller-verify-functions-do-not-verify-anything-in-comptrollersolctokensol\" aria-label=\"l 03 all except one comptroller verify functions do not verify anything in comptrollersolctokensol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/18\">[L-03] All except one Comptroller verify functions do not verify anything in Comptroller.sol/CToken.sol</a></h2>\n<p>Six of the seven Comptroller verify functions do nothing. Not sure why their calls in CToken.sol have been uncommented from the original Compound version.</p>\n<p>Except <code>redeemVerify()</code>, six other verify functions <code>transferVerify()</code>, <code>mintVerify()</code>, <code>borrowVerify()</code>, <code>repayBorrowVerify()</code>, <code>liquidateBorrowVerify()</code> and <code>seizeVerify()</code> have no logic except accessing state variables to not be marked pure. Calls to these functions were commented out in the original Compound code’s CToken.sol but have been uncommented here.</p>\n<p>Given that they do not implement any logic, the protocol should not be making any assumptions about any defence provided from their unimplemented verification logic.</p>\n<p>There are a number of dummy functions whose comments say “// Shh - currently unused”.</p>\n<p>Recommend adding logic to implement verification if that is indeed assumed to be implemented but is actually not. Otherwise, comment call sites.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/18#issuecomment-834649529\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>Fixed by commenting unused functions.</p>\n</blockquote>\n<br />\n<h2 id=\"l-04-floating-pragma-used-in-uniswapsol\" style=\"position:relative;\"><a href=\"#l-04-floating-pragma-used-in-uniswapsol\" aria-label=\"l 04 floating pragma used in uniswapsol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/19\">[L-04] Floating pragma used in Uniswap*.sol</a></h2>\n<p>Contracts should be deployed using the same compiler version/flags with which they have been tested. Locking the floating pragma, i.e. by not using ^ in pragma solidity ^0.6.10, ensures that contracts do not accidentally get deployed using an older compiler version with unfixed bugs.</p>\n<p>For reference, see <a href=\"https://swcregistry.io/docs/SWC-103\">https://swcregistry.io/docs/SWC-103</a></p>\n<p>Recommend removing ^ in “pragma solidity ^0.6.10” and change it to “pragma solidity 0.6.12” to be consistent with the rest of the contracts.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/19#issuecomment-834911660\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>Fixed as recommended.</p>\n</blockquote>\n<br />\n<h2 id=\"l-05-missing-input-validation-may-set-comp-token-to-zero-address-in-comptrollersol\" style=\"position:relative;\"><a href=\"#l-05-missing-input-validation-may-set-comp-token-to-zero-address-in-comptrollersol\" aria-label=\"l 05 missing input validation may set comp token to zero address in comptrollersol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/20\">[L-05] Missing input validation may set COMP token to zero-address in Comptroller.sol</a></h2>\n<p>Function <code>_setCompAddress()</code> is used by admin to change the COMP token address. However, there is no zero-address validation on the parameter. This may accidentally set COMP token address to zero-address but it can be reset by the admin. Any interim transactions might hit exceptional behavior.</p>\n<p>Recommend adding zero-address check to <code>_comp</code> parameter of <code>_setCompAddress()</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/14#issuecomment-832832059\">ghoul-sol (Based Loans) commented</a>:</strong></p>\n<blockquote>\n<p>Added to our backlog for future refactoring, thanks!</p>\n</blockquote>\n<br />\n<h2 id=\"l-06-missing-zerothreshold-check-for-maxassets\" style=\"position:relative;\"><a href=\"#l-06-missing-zerothreshold-check-for-maxassets\" aria-label=\"l 06 missing zerothreshold check for maxassets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/21\">[L-06] Missing zero/threshold check for maxAssets</a></h2>\n<p>A zero or some minimum threshold check is missing for <code>newMaxAssets</code> parameter of <code>_setMaxAssets()</code> function which is used by admin to set the maximum number of assets that controls how many markets can be entered.</p>\n<p>If accidentally set to 0 then all users cannot enter any market which will significantly affect protocol operations.</p>\n<p>Recommend adding zero/threshold check to <code>newMaxAssets</code> parameter.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/21#issuecomment-835430888\">ghoul-sol (Based Loans) commented</a>:</strong></p>\n<blockquote>\n<p>Added to backlog, however, it’s a non-critical issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/21#issuecomment-839390697\">cemozerr (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Rating this as low risk as it could pose a situation where users can not enter any markets.</p>\n</blockquote>\n<br />\n<h2 id=\"l-07-usage-of-addresstransfer\" style=\"position:relative;\"><a href=\"#l-07-usage-of-addresstransfer\" aria-label=\"l 07 usage of addresstransfer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/31\">[L-07] Usage of <code>address.transfer</code></a></h2>\n<p>The <code>transfer</code> function is used in <code>Maximillion.sol</code> to send ETH to an account.</p>\n<p>It is performed with a fixed amount of GAS and might fail if GAS costs change in the future or if a smart contract’s fallback function handler is complex.</p>\n<p>Consider using the lower-level <code>.call{value: value}</code> instead and checking its success return value.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/31#issuecomment-833664536\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p><code>Maximillion.sol</code> is not being used and will be deleted.</p>\n</blockquote>\n<br />\n<h2 id=\"l-08-unbounded-iteration-on-refreshcompspeedsinternal\" style=\"position:relative;\"><a href=\"#l-08-unbounded-iteration-on-refreshcompspeedsinternal\" aria-label=\"l 08 unbounded iteration on refreshcompspeedsinternal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/32\">[L-08] Unbounded iteration on <code>refreshCompSpeedsInternal</code></a></h2>\n<p>The <code>Comptroller.refreshCompSpeedsInternal</code> function iterates over all markets and does expensive computations like updating all borrower / supply indices.</p>\n<p>When the total number of markets is high, this iteration could exceed the total block gas amount breaking the functionality and making it impossible to update the reward distribution speed.</p>\n<p>Keep the number of markets low and/or adjust the function to be processable in several transactions.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/32#issuecomment-835439739\">ghoul-sol (Based Loans) commented</a>:</strong></p>\n<blockquote>\n<p>While true, estimated gas to update speed for 50 markets is <code>3377184</code> gas. Current block gas limit is <code>14,999,986</code>, that means we could in theory, get away with updating as many as 222 markets. This is definitely something to keep in mind along the way, however, in my opinion it’s a non-critical issue, low at most.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/32#issuecomment-839399355\">cemozerr (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>I will rate this as low risk, as it won’t be an issue until there are many markets, and does not pose a major risk to user funds.</p>\n</blockquote>\n<br />\n<h2 id=\"l-09-uint-memory-parameter-is-tricky\" style=\"position:relative;\"><a href=\"#l-09-uint-memory-parameter-is-tricky\" aria-label=\"l 09 uint memory parameter is tricky permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/12\">[L-09] uint[] memory parameter is tricky</a></h2>\n<p>Using memory array parameters (e.g. uint[] memory) as function parameters can be tricky in Solidity, because an attack is possible with a very large array which will overlap with other parts of the memory. See proof of concept below.</p>\n<p>The function <code>propose</code> of GovernorAlpha.sol seems most vulnerable because this function does not check the validity of the array lengths.</p>\n<p>Most other functions do a loop over the array, which will fail with a large array (due to out of gas).</p>\n<p>The following functions use a [] memory parameter:</p>\n<ul>\n<li>.\\Comptroller.sol: <code>enterMarkets</code>, <code>claimComp</code>, <code>claimComp</code>, <code>_addCompMarkets</code></li>\n<li>.\\Governance\\GovernorAlpha.sol: <code>propose</code></li>\n<li>.\\UniswapOracle\\UniswapAnchoredView.sol: <code>addTokens</code></li>\n<li>.\\UniswapOracle\\UniswapConfig.sol: <code>_addTokensInternal</code></li>\n</ul>\n<p>This an example to show the exploit:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// based on https://github.com/paradigm-operations/paradigm-ctf-2021/blob/master/swap/private/Exploit.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.4</span><span class=\"mtk1\">.</span><span class=\"mtk7\">24</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// only works with low solidity version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Overlap</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">field0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\">  </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\">) {   </span><span class=\"mtk3\">// this can be in any solidity version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">Overlap</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">v</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">v</span><span class=\"mtk1\">.</span><span class=\"mtk12\">field0</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1234</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">]); </span><span class=\"mtk3\">// would expect to be 0 however is 1234</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">go</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> { </span><span class=\"mtk3\">// this part requires the low solidity version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\">=</span><span class=\"mtk7\">0x800000000000000000000000000000000000000000000000000000000000000</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// 2^251</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">mint</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0x20</span><span class=\"mtk1\">, </span><span class=\"mtk12\">x</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">=</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">payload</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend adding checks on the size of the array parameters to make sure they are not absurdly long.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/12#issuecomment-834696134\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>As mentioned, this applies to either admin functions or ones that are using a loop. The <code>propose</code> function is used by governance so its outcome will be tested on forked network before voting. I don’t see an immediate threat from this solidity bug but we’ll keep it in mind.</p>\n</blockquote>\n<br />\n<h2 id=\"l-10-carefulmath--safe-math-not-allways-used\" style=\"position:relative;\"><a href=\"#l-10-carefulmath--safe-math-not-allways-used\" aria-label=\"l 10 carefulmath  safe math not allways used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/6\">[L-10] CarefulMath / safe math not allways used</a></h2>\n<p>CarefulMath is used in most calculations, however it isn’t always used.</p>\n<p>Recommend double checking to see if safe math functions really are not necessary and otherwise add a comment.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/6#issuecomment-834908151\">ghoul-sol (Based Loans) commented</a>:</strong></p>\n<blockquote>\n<p>Agreed, however, in my opinion it’s a non-critical issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/6#issuecomment-839431704\">cemozerr (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>I will rate this as low risk instead of non-critical because although the warden here might not have spotted any real issues, unless CarefulMath / SafeMath is not always used, there might be hidden underflow/overflow bugs.</p>\n</blockquote>\n<br />\n<h2 id=\"l-11-use-receive-when-expecting-eth-and-empty-call-data\" style=\"position:relative;\"><a href=\"#l-11-use-receive-when-expecting-eth-and-empty-call-data\" aria-label=\"l 11 use receive when expecting eth and empty call data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/25\">[L-11] Use ‘receive’ when expecting eth and empty call data</a></h2>\n<p>Contract CEther fallback function was refactored to be compatible with the Solidity 0.6 version:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">* </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> Send Ether to CEther to mint</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">*/</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">fallback</span><span class=\"mtk1\"> () </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">err</span><span class=\"mtk1\">,) = </span><span class=\"mtk11\">mintInternal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">requireNoError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">err</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;mint failed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>From Solidity 0.6 documentation:</p>\n<blockquote>\n<p>“The unnamed function commonly referred to as “fallback function” was split up into a new fallback function that is defined using the fallback keyword and a receive ether function defined using the receive keyword. If present, the receive ether function is called whenever the call data is empty (whether or not ether is received). This function is implicitly payable. The new fallback function is called when no other function matches (if the receive ether function does not exist then this includes calls with empty call data). You can make this function payable or not. If it is not payable then transactions not matching any other function which send value will revert. You should only need to implement the new fallback function if you are following an upgrade or proxy pattern.”</p>\n</blockquote>\n<p>In this case, “receive” may be more suitable as the function is expecting to receive ether and empty call data.</p>\n<p>Recommend replacing “fallback” with “receive”.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/25#issuecomment-835426150\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>Fixed as recommended</p>\n</blockquote>\n<br />\n<h2 id=\"l-12-allow-borrowcap-to-be-filled-fully\" style=\"position:relative;\"><a href=\"#l-12-allow-borrowcap-to-be-filled-fully\" aria-label=\"l 12 allow borrowcap to be filled fully permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/28\">[L-12] Allow borrowCap to be filled fully</a></h2>\n<p>Here the condition should be ’&#x3C;=’, not ’&#x3C;’ to allow filling the cap fully:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nextTotalBorrows</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">borrowCap</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;market borrow cap reached&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nextTotalBorrows</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">borrowCap</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;market borrow cap reached&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/28#issuecomment-833665556\">ghoul-sol (Based Loans) commented</a>:</strong></p>\n<blockquote>\n<p>Added to backlog.</p>\n</blockquote>\n<p><br /><br /></p>\n<h1 id=\"non-critical-findings\" style=\"position:relative;\"><a href=\"#non-critical-findings\" aria-label=\"non critical findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings</h1>\n<h2 id=\"n-01-outdated-compiler\" style=\"position:relative;\"><a href=\"#n-01-outdated-compiler\" aria-label=\"n 01 outdated compiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/15\">[N-01] Outdated Compiler</a></h2>\n<p>The project is using Solidity compiler version 0.6.12 which was released in July 2020, while the latest compiler version is 0.8.4. Using such an older version makes the project susceptible to any compiler bugs fixed or dangerous features deprecated since then, and also prevents it from leveraging the newly introduced features.</p>\n<p>It may be recognized that this is harder for this project because it is making modifications to an existing older project (Compound) which uses compiler version 0.5.x.</p>\n<p>Given Solidity’s fast release cycle, consider using a more recent version of the compiler, such as version 0.7.6.</p>\n<p>Given that the project is already going from original Compound’s 0.5.x to 0.6.x, it may as well go to 0.7.x version. This may involve a few more breaking changes for changing from 0.6.x to 0.7.x, but there don’t seem to be that many language-level breaking features (see <a href=\"https://github.com/ethereum/solidity/releases/tag/v0.7.0\">https://github.com/ethereum/solidity/releases/tag/v0.7.0</a>)</p>\n<h3 id=\"comments-1\" style=\"position:relative;\"><a href=\"#comments-1\" aria-label=\"comments 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comments:</h3>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/15#issuecomment-833652816\">ghoul-sol (Based Loans) commented</a>:</strong></p>\n<blockquote>\n<p>Using latest solidity version is best practice. However, upgrading to 0.7.x or 0.8.x requires significant refactoring and any braking changes in solidity could potentially introduce bugs. Also, upgrading at this stage of the project would delay launch further and may require another audit.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/15#issuecomment-838997641\">cemozerr (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m changing the severity of the issue to non-significant as Based Loans is a fork of Compound codebase, and there are no compiler-related bugs in Compound codebase AFAIK.</p>\n</blockquote>\n<br />\n<h2 id=\"n-02-missed-natspec-param-for-newly-introduced-parameter-distributeall\" style=\"position:relative;\"><a href=\"#n-02-missed-natspec-param-for-newly-introduced-parameter-distributeall\" aria-label=\"n 02 missed natspec param for newly introduced parameter distributeall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/22\">[N-02] Missed NatSpec @param for newly introduced parameter distributeAll</a></h2>\n<p>The <code>distributeSupplierComp()</code> function has been modified to take in a third parameter which is a boolean <code>distributeAll</code>. But the corresponding NatSpec comments for the function have not been updated to add this new parameter. This could lead to minor confusion where NatSpec is consulted.</p>\n<p>Recommend adding @param for <code>distributeAll</code> parameter.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/22#issuecomment-832829878\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>Fixed as recommended.</p>\n</blockquote>\n<br />\n<h2 id=\"n-02-privileged-roles\" style=\"position:relative;\"><a href=\"#n-02-privileged-roles\" aria-label=\"n 02 privileged roles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/35\">[N-02] Privileged roles</a></h2>\n<p>Admins can change the <code>comp=blo</code> address using <code>_setCompAddress</code> and stop pending payouts using <code>_dropCompMarket</code>.</p>\n<p>The allotted rewards of the users may not be paid out anymore due to admins changing the reward token (<code>comp</code>) address.</p>\n<p>Privileged admin roles make the protocol less predictable for users leading to hesitance and lost opportunity costs.</p>\n<p>Recommend only setting the <code>comp/blo</code> address if it has not been set already.</p>\n<p>Recommend distributing the rewards up to now before cancelling rewards using <code>_dropCompMarket</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/35#issuecomment-832725953\">ghoul-sol (Based Loans) commented</a>:</strong></p>\n<blockquote>\n<p>This is technically correct, however, having a context that admin role is only temporary and will be moved to governance in the near future, I don’t consider this as an issue. Especially that <code>Comptroller</code> is using a proxy pattern so admin can always change the implementation at will. I consider this a non-critical issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/35#issuecomment-839425430\">cemozerr (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m rating this a non-critical issue, as the <code>Comptroller</code> using a proxy pattern would make this change redundant.</p>\n</blockquote>\n<br />\n<h2 id=\"n-03-uniswapanchoredviews-priceupdated-event-is-never-fired\" style=\"position:relative;\"><a href=\"#n-03-uniswapanchoredviews-priceupdated-event-is-never-fired\" aria-label=\"n 03 uniswapanchoredviews priceupdated event is never fired permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/38\">[N-03] <code>UniswapAnchoredView</code>’s <code>PriceUpdated</code> event is never fired</a></h2>\n<p><code>UniswapAnchoredView</code>’s <code>PriceUpdated</code> event is never fired.</p>\n<p>Unused code can hint at programming or architectural errors.</p>\n<p>Recommend using it or removing it.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/38#issuecomment-839428972\">cemozerr (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m rating this as non-critical as an unused event has no drawbacks.</p>\n</blockquote>\n<br />\n<h2 id=\"n-04-multiple-error-enums-with-overlapping-values\" style=\"position:relative;\"><a href=\"#n-04-multiple-error-enums-with-overlapping-values\" aria-label=\"n 04 multiple error enums with overlapping values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/1\">[N-04] Multiple error enums with overlapping values</a></h2>\n<p>There are 3 error enums, which have overlapping values. This allows for mistakes with error codes and might make troubleshooting of deployed code more difficult.</p>\n<p>There did not appear to be any such mistakes in the current code, but changes in the future might introduce mistakes.</p>\n<p>ErrorReporter.sol:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ComptrollerErrorReporter</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">enum</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Error</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">NO_ERROR</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">UNAUTHORIZED</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">COMPTROLLER_MISMATCH</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> TokenErrorReporter {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">enum</span><span class=\"mtk1\"> Error {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">NO_ERROR</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">UNAUTHORIZED</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">BAD_INPUT</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<p>CarefulMath.sol</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">CarefulMath</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">enum</span><span class=\"mtk1\"> </span><span class=\"mtk10\">MathError</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">NO_ERROR</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">DIVISION_BY_ZERO</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<p>Recommend inserting dummy values in the enums to make sure all equivalent numeric values are different.</p>\n<p>Take care that the same enum values still have the same underlying value to prevent new mistakes.</p>\n<p>You could for example do the following:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">ComptrollerErrorReporter</span><span class=\"mtk1\">  </span><span class=\"mtk12\">NO_ERROR</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">ComptrollerErrorReporter</span><span class=\"mtk1\">  </span><span class=\"mtk12\">UNAUTHORIZED</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">ComptrollerErrorReporter</span><span class=\"mtk1\">  </span><span class=\"mtk12\">COMPTROLLER_MISMATCH</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">TokenErrorReporter</span><span class=\"mtk1\">        </span><span class=\"mtk12\">NO_ERROR</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">TokenErrorReporter</span><span class=\"mtk1\">        </span><span class=\"mtk12\">UNAUTHORIZED</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">TokenErrorReporter</span><span class=\"mtk1\">        </span><span class=\"mtk12\">BAD_INPUT</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">102</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">CarefulMath</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">           </span><span class=\"mtk12\">NO_ERROR</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">CarefulMath</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">           </span><span class=\"mtk12\">DIVISION_BY_ZERO</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">201</span></span></span></code></pre>\n<p>Note: In a few occasions there is a reliance on the fact that NO_ERROR = 0; see seperate issue.</p>\n<p>Note this might break compatibility with Compound and/or other deployed code.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/1#issuecomment-833645714\">ghoul-sol (Based Loans) acknowledged</a>:</strong></p>\n<blockquote>\n<p>This is for sure confusing and should be refactored. However, it has very low priority so I’m going to add it to the backlog.</p>\n</blockquote>\n<br />\n<h2 id=\"n-05-now-is-still-used\" style=\"position:relative;\"><a href=\"#n-05-now-is-still-used\" aria-label=\"n 05 now is still used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/10\">[N-05] now is still used</a></h2>\n<p>Most of the time <code>block.timestamp</code> is used, however in 1 location <code>now</code> is still used.</p>\n<p>The global variable now is deprecated in solidity 7:\n<a href=\"https://docs.soliditylang.org/en/v0.7.0/070-breaking-changes.html#changes-to-the-syntax\">https://docs.soliditylang.org/en/v0.7.0/070-breaking-changes.html#changes-to-the-syntax</a></p>\n<p>Recommend replacing <code>now</code> with <code>block.timestamp</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/10#issuecomment-832829309\">ghoul-sol (Based Loans) commented</a>:</strong></p>\n<blockquote>\n<p>Added to backlog for later refactoring, thanks!</p>\n</blockquote>\n<br />\n<h2 id=\"n-06-reliance-on-the-fact-that-no_error--0\" style=\"position:relative;\"><a href=\"#n-06-reliance-on-the-fact-that-no_error--0\" aria-label=\"n 06 reliance on the fact that no_error  0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/2\">[N-06] Reliance on the fact that NO_ERROR = 0</a></h2>\n<p>In several occasions it’s relied upon that the error value NO_ERROR is equivalent to 0.</p>\n<p>No problems detected based on this yet, but however in most locations there is an explicit check for NO_ERROR and comparing with 0 allows for possible future mistakes (especially if the enums would change).</p>\n<p>Recommend replacing 0 with the appropriate version of …NO_ERROR</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/2#issuecomment-833644248\">ghoul-sol (Based Loans) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Added to backlog.</p>\n</blockquote>\n<br />\n<h2 id=\"n-07-alphabetical-order-not-complied-with-contrary-to-the-comments\" style=\"position:relative;\"><a href=\"#n-07-alphabetical-order-not-complied-with-contrary-to-the-comments\" aria-label=\"n 07 alphabetical order not complied with contrary to the comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/3\">[N-07] Alphabetical order not complied with (contrary to the comments)</a></h2>\n<p>The enum <code>FailureInfo</code> in ErrorReporter.sol has a comment that the values are sorted in alphabetical order.</p>\n<p>However they are not in alphabetical order.</p>\n<p>Recommend sorting the enum values in alphabetical order or remove the comment.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/3#issuecomment-833643409\">ghoul-sol (Based Loans) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Added to backlog, thanks!</p>\n</blockquote>\n<br />\n<h2 id=\"n-08-requirenoerror-not-used-in-a-consistent-way\" style=\"position:relative;\"><a href=\"#n-08-requirenoerror-not-used-in-a-consistent-way\" aria-label=\"n 08 requirenoerror not used in a consistent way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/5\">[N-08] requireNoError not used in a consistent way</a></h2>\n<p>Cether.sol has a function <code>requireNoError</code> to check for errors. This is used most of the time, however in one occasion it isn’t used.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getCashPrior</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">MathError</span><span class=\"mtk1\"> </span><span class=\"mtk12\">err</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">startingBalance</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">subUInt</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">err</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">MathError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">NO_ERROR</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">startingBalance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend replacing <em>require(err == MathError.NO</em>ERROR);_</p>\n<p>with:</p>\n<p><em>requireNoError(err, “getCashPrior failed”);</em></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/5#issuecomment-833646776\">ghoul-sol (Based Loans) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Technically, the code works but I agree that consistency should be kept. Added to backlog.</p>\n</blockquote>\n<br />\n<h2 id=\"n-09-uint-1\" style=\"position:relative;\"><a href=\"#n-09-uint-1\" aria-label=\"n 09 uint 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/7\">[N-09] uint(-1)</a></h2>\n<p>In several occasions constructions like <code>uint(-1)</code> and <code>uint96(-1)</code> are used the reference the maximum values of uint and uint96.</p>\n<p>This relies on the peculiarities of numbers.</p>\n<p>Solidity also allows the following constructions:</p>\n<ul>\n<li>type(uint).max;</li>\n<li>type(uint96).max;</li>\n</ul>\n<p>.\\CToken.sol: startingAllowance = uint(-1);\n.\\CToken.sol: if (startingAllowance != uint(-1)) {\n.\\CToken.sol: if (repayAmount == uint(-1)) {\n.\\CToken.sol: if (repayAmount == uint(-1)) {\n.\\Governance\\Blo.sol: if (rawAmount == uint(-1)) {\n.\\Governance\\Blo.sol: amount = uint96(-1);\n.\\Governance\\Blo.sol: if (spender != src &#x26;&#x26; spenderAllowance != uint96(-1)) {\n.\\UniswapOracle\\UniswapConfig.sol: if (index != uint(-1)) {\n.\\UniswapOracle\\UniswapConfig.sol: if (index != uint(-1)) {\n.\\UniswapOracle\\UniswapConfig.sol: if (index != uint(-1)) {</p>\n<p>Recommend replacing <code>uint(-1)</code> with <code>type(uint).max</code> and replacing <code>uint96(-1)</code> with <code>type(uint96).max</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/7#issuecomment-832828693\">ghoul-sol (Based Loans) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Added to backlog for later refactoring, thanks!</p>\n</blockquote>\n<br />\n<h2 id=\"n-10-more-readable-constants\" style=\"position:relative;\"><a href=\"#n-10-more-readable-constants\" aria-label=\"n 10 more readable constants permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/8\">[N-10] More readable constants</a></h2>\n<p>Some constant values are difficult to read in one time because they have at lot of 0’s. Solidity allows _ to separate series of zeroes.</p>\n<p>Recommend the following replacements:</p>\n<ul>\n<li>1000000e18 with 1_000_000e18</li>\n<li>4000000e18 with 4_000_000e18</li>\n<li>100000000e18 with 100_000_000e18</li>\n</ul>\n<h3 id=\"comments-2\" style=\"position:relative;\"><a href=\"#comments-2\" aria-label=\"comments 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comments:</h3>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/8#issuecomment-833640933\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>Fixed as recommended</p>\n</blockquote>\n<br />\n<h2 id=\"n-11-function-getunderlyingprice-compares-against-ceth\" style=\"position:relative;\"><a href=\"#n-11-function-getunderlyingprice-compares-against-ceth\" aria-label=\"n 11 function getunderlyingprice compares against ceth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/26\">[N-11] function getUnderlyingPrice compares against “cETH”</a></h2>\n<p>Contract CompoundLens functions <code>cTokenMetadata</code> and <code>cTokenBalances</code> compare against “bETH” while contract <code>SimplePriceOracle</code> function <code>getUnderlyingPrice</code> compares against “cETH”. It is not clear if this <code>SimplePriceOracle</code> will be used in production, probably only for testing, but still would be nice to unify it across all the contracts.</p>\n<p>Recommend replacing “cETH” with “bETH” in SimplePriceOracle function <code>getUnderlyingPrice</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/26#issuecomment-832787817\">ghoul-sol (Based Loans) acknowledged</a>:</strong></p>\n<blockquote>\n<p>This is not meant to be used on production, however, this contract is confusing and would not work if used so it was deleted. Thanks for pointing it out!</p>\n</blockquote>\n<br />\n<h2 id=\"n-12-use-interface-keyword-for-interfaces\" style=\"position:relative;\"><a href=\"#n-12-use-interface-keyword-for-interfaces\" aria-label=\"n 12 use interface keyword for interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/27\">[N-12] Use ‘interface’ keyword for interfaces</a></h2>\n<p>Interfaces are declared as contracts. For example, <code>ComptrollerInterface</code> name indicates that it should be an interface but it is declared as a contract. Solidity has a keyword “interface” that can be used here.</p>\n<p>Recommend declaring interfaces with ‘interface’ keyword.</p>\n<h3 id=\"comments-3\" style=\"position:relative;\"><a href=\"#comments-3\" aria-label=\"comments 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comments:</h3>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/27#issuecomment-832778900\">ghoul-sol (Based Loans) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Added to backlog, thanks!</p>\n</blockquote>\n<br />\n<h2 id=\"n-13-info-functions-getunderlyingpriceview-and-price-are-too-similar\" style=\"position:relative;\"><a href=\"#n-13-info-functions-getunderlyingpriceview-and-price-are-too-similar\" aria-label=\"n 13 info functions getunderlyingpriceview and price are too similar permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/29\">[N-13] [Info] functions ‘getUnderlyingPriceView’ and ‘price’ are too similar</a></h2>\n<p>Not a bug, just FYI:</p>\n<p>Function <code>getUnderlyingPriceView</code> is too similar to function <code>price</code>. It would be best to avoid code duplication by extracting common code and using it where necessary. Less code duplication makes it easier to maintain it and improves readability.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/29#issuecomment-832766933\">ghoul-sol (Based Loans) acknowledged</a>:</strong></p>\n<blockquote>\n<p>It’s added to our backlog for refactoring, thanks!</p>\n</blockquote>\n<br />\n<h2 id=\"n-14-requires-a-non-zero-address-check-when-deploying-cerc20-tokens-and-cether\" style=\"position:relative;\"><a href=\"#n-14-requires-a-non-zero-address-check-when-deploying-cerc20-tokens-and-cether\" aria-label=\"n 14 requires a non zero address check when deploying cerc20 tokens and cether permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/39\">[N-14] Requires a non-zero address check when deploying <code>CErc20</code> tokens and <code>CEther</code>.</a></h2>\n<p>During the deployment of the contracts <code>CErc20</code> and <code>CErc20Immutable</code>, both input parameters <code>underlying_</code> and <code>ComptrollerInterface</code> lack a non-zero address check. In <code>CEther</code>, the <code>ComptrollerInterface</code> is not required to be non-zero either. If any of them were provided as <code>0</code> accidentally, there is no way to change the values, and the contract should be redeployed.</p>\n<p>Recommend adding non-zero address checks in the constructor of the <code>CErc20</code>, <code>CErc20Immutable</code>, and <code>CEther</code> contracts.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/39#issuecomment-835427401\">ghoul-sol (Based Loans) commented</a>:</strong></p>\n<blockquote>\n<p>It’s definitely a good practice to require non-zero address, however, it’s not a threat. Severity should be 0.</p>\n<p>Added to backlog, thanks!</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/39#issuecomment-839440805\">cemozerr (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Both the impact and the likelihood of this bug is low, so rating this as non-critical.</p>\n</blockquote>\n<br />\n<h2 id=\"n-15-missing-event-visibility-in-_setcompaddress-function\" style=\"position:relative;\"><a href=\"#n-15-missing-event-visibility-in-_setcompaddress-function\" aria-label=\"n 15 missing event visibility in _setcompaddress function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/13\">[N-15] Missing event visibility in _setCompAddress() function</a></h2>\n<p>The <code>_setCompAddress()</code> function in the Comptroller contract does not emit an event when changing the comp address. While this does not impose any security risk, it does hinder a users ability to view any changes made to the comp address through the contract’s lifetime.</p>\n<p>It is recommended to emit an event indicating the old comp address, and the new comp address to be used when calling the <code>_setCompAddress()</code> function. An example of such an event is <code>event NewCompAddress(address oldCompAddress, address newCompAddress)</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-basedloans-findings/issues/13#issuecomment-832835787\">ghoul-sol (Based Loans) confirmed</a>:</strong></p>\n<blockquote>\n<p>Fixed as recommended.</p>\n</blockquote>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code, but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings\">High Risk Findings</a></p>\n<ul>\n<li><a href=\"#h-01-uniswapconfig-getters-return-wrong-token-config-if-token-config-does-not-exist\">[H-01] UniswapConfig getters return wrong token config if token config does not exist</a></li>\n<li><a href=\"#h-02-uint-1-index-for-not-found\">[H-02] uint(-1) index for not found</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings\">Medium Risk Findings</a></p>\n<ul>\n<li><a href=\"#m-01-reward-rates-can-be-changed-through-flash-borrows\">[M-01] Reward rates can be changed through flash borrows</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-findings\">Low Risk Findings</a></p>\n<ul>\n<li><a href=\"#g-01-requirenoerror-can-be-optimized\">[G-01] requireNoError can be optimized</a></li>\n<li><a href=\"#l-01-no-account-existence-check-for-low-level-call-in-cethersol\">[L-01] No account existence check for low-level call in CEther.sol</a></li>\n<li><a href=\"#l-02-sweeptoken-function-removed-in-cerc20sol-from-original-compound-code\">[L-02] sweepToken() function removed in CErc20.sol from original Compound code</a></li>\n<li><a href=\"#l-03-all-except-one-comptroller-verify-functions-do-not-verify-anything-in-comptrollersolctokensol\">[L-03] All except one Comptroller verify functions do not verify anything in Comptroller.sol/CToken.sol</a></li>\n<li><a href=\"#l-04-floating-pragma-used-in-uniswapsol\">[L-04] Floating pragma used in Uniswap*.sol</a></li>\n<li><a href=\"#l-05-missing-input-validation-may-set-comp-token-to-zero-address-in-comptrollersol\">[L-05] Missing input validation may set COMP token to zero-address in Comptroller.sol</a></li>\n<li><a href=\"#l-06-missing-zerothreshold-check-for-maxassets\">[L-06] Missing zero/threshold check for maxAssets</a></li>\n<li><a href=\"#l-07-usage-of-addresstransfer\">[L-07] Usage of <code>address.transfer</code></a></li>\n<li><a href=\"#l-08-unbounded-iteration-on-refreshcompspeedsinternal\">[L-08] Unbounded iteration on <code>refreshCompSpeedsInternal</code></a></li>\n<li><a href=\"#l-09-uint-memory-parameter-is-tricky\">[L-09] uint[] memory parameter is tricky</a></li>\n<li><a href=\"#l-10-carefulmath--safe-math-not-allways-used\">[L-10] CarefulMath / safe math not allways used</a></li>\n<li><a href=\"#l-11-use-receive-when-expecting-eth-and-empty-call-data\">[L-11] Use ‘receive’ when expecting eth and empty call data</a></li>\n<li><a href=\"#l-12-allow-borrowcap-to-be-filled-fully\">[L-12] Allow borrowCap to be filled fully</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#non-critical-findings\">Non-Critical Findings</a></p>\n<ul>\n<li><a href=\"#n-01-outdated-compiler\">[N-01] Outdated Compiler</a></li>\n<li><a href=\"#n-02-missed-natspec-param-for-newly-introduced-parameter-distributeall\">[N-02] Missed NatSpec @param for newly introduced parameter distributeAll</a></li>\n<li><a href=\"#n-02-privileged-roles\">[N-02] Privileged roles</a></li>\n<li><a href=\"#n-03-uniswapanchoredviews-priceupdated-event-is-never-fired\">[N-03] <code>UniswapAnchoredView</code>’s <code>PriceUpdated</code> event is never fired</a></li>\n<li><a href=\"#n-04-multiple-error-enums-with-overlapping-values\">[N-04] Multiple error enums with overlapping values</a></li>\n<li><a href=\"#n-05-now-is-still-used\">[N-05] now is still used</a></li>\n<li><a href=\"#n-06-reliance-on-the-fact-that-no_error--0\">[N-06] Reliance on the fact that NO_ERROR = 0</a></li>\n<li><a href=\"#n-07-alphabetical-order-not-complied-with-contrary-to-the-comments\">[N-07] Alphabetical order not complied with (contrary to the comments)</a></li>\n<li><a href=\"#n-08-requirenoerror-not-used-in-a-consistent-way\">[N-08] requireNoError not used in a consistent way</a></li>\n<li><a href=\"#n-09-uint-1\">[N-09] uint(-1)</a></li>\n<li><a href=\"#n-10-more-readable-constants\">[N-10] More readable constants</a></li>\n<li><a href=\"#n-11-function-getunderlyingprice-compares-against-ceth\">[N-11] function getUnderlyingPrice compares against “cETH”</a></li>\n<li><a href=\"#n-12-use-interface-keyword-for-interfaces\">[N-12] Use ‘interface’ keyword for interfaces</a></li>\n<li><a href=\"#n-13-info-functions-getunderlyingpriceview-and-price-are-too-similar\">[N-13] [Info] functions ‘getUnderlyingPriceView’ and ‘price’ are too similar</a></li>\n<li><a href=\"#n-14-requires-a-non-zero-address-check-when-deploying-cerc20-tokens-and-cether\">[N-14] Requires a non-zero address check when deploying <code>CErc20</code> tokens and <code>CEther</code>.</a></li>\n<li><a href=\"#n-15-missing-event-visibility-in-_setcompaddress-function\">[N-15] Missing event visibility in _setCompAddress() function</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}