{
  "circa": {
    "title": "Nibbl contest",
    "sponsor": "Nibbl",
    "slug": "2022-06-nibbl",
    "date": "2022-08-01",
    "findings": "https://github.com/code-423n4/2022-06-nibbl-findings/issues",
    "contest": 140
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Nibbl smart contract system written in Solidity. The audit contest took place between June 21—June 24 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>107 Wardens contributed reports to the Nibbl contest:</p>\n<ol>\n<li>xiaoming90</li>\n<li><a href=\"https://twitter.com/hansfriese\">hansfriese</a></li>\n<li>reassor</li>\n<li>unforgiven</li>\n<li><a href=\"https://twitter.com/itsmeSTYJ\">itsmeSTYJ</a></li>\n<li><a href=\"https://twitter.com/WatchPug_\">WatchPug</a> (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li>Lambda</li>\n<li>cccz</li>\n<li><a href=\"https://twitter.com/thePicodes\">Picodes</a></li>\n<li>SmartSek (0xDjango and hake)</li>\n<li><a href=\"https://www.linkedin.com/in/yahia-chaabane/\">ych18</a></li>\n<li><a href=\"https://twitter.com/0xhyh\">hyh</a></li>\n<li>PwnedNoMore (<a href=\"https://www.cs.purdue.edu/homes/zhan3299/index.html\">izhuer</a>, ItsNio and papr1ka2)</li>\n<li>peritoflores</li>\n<li>IllIllI</li>\n<li>zzzitron</li>\n<li>BowTiedWardens (BowTiedHeron, BowTiedPickle, <a href=\"BowTiedETHernal\">m4rio_eth</a>, <a href=\"https://twitter.com/JustDravee\">Dravee</a> and BowTiedFirefox)</li>\n<li><a href=\"https://twitter.com/KenzoAgada\">kenzo</a></li>\n<li><a href=\"https://twitter.com/JoeStakey\">joestakey</a></li>\n<li>0x1f8b</li>\n<li>_Adam</li>\n<li>0x29A (0x4non and rotcivegaf)</li>\n<li>codexploder</li>\n<li>0xkatana</li>\n<li><a href=\"https://chom.dev\">Chom</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://milotruck.github.io/\">MiloTruck</a></li>\n<li><a href=\"https://twitter.com/c3ph_\">c3phas</a></li>\n<li><a href=\"https://twitter.com/catchup22\">catchup</a></li>\n<li><a href=\"https://twitter.com/ellahinator\">ellahi</a></li>\n<li>minhquanym</li>\n<li><a href=\"https://twitter.com/0xNazgul\">0xNazgul</a></li>\n<li>robee</li>\n<li>UnusualTurtle</li>\n<li>cryptphi</li>\n<li><a href=\"https://mobile.twitter.com/tomj_bb\">TomJ</a></li>\n<li>0xf15ers (remora and twojoy)</li>\n<li>sashik_eth</li>\n<li>pashov</li>\n<li>delfin454000</li>\n<li><a href=\"https://ericci.dev/\">StErMi</a></li>\n<li><a href=\"https://twitter.com/meidhiwirara\">Tomio</a></li>\n<li>oyc_109</li>\n<li>slywaters</li>\n<li>ElKu</li>\n<li>kenta</li>\n<li>saian</li>\n<li><a href=\"https://twitter.com/sm4rtcontr4ct\">JC</a></li>\n<li>sach1r0</li>\n<li>Noah3o6</li>\n<li>simon135</li>\n<li>TerrierLover</li>\n<li><a href=\"https://www.instagram.com/riyan_rfa/\">rfa</a></li>\n<li>Waze</li>\n<li><a href=\"https://twitter.com/father0fBl0cks\">fatherOfBlocks</a></li>\n<li>zuhaibmohd</li>\n<li><a href=\"https://twitter.com/randyyramadhan\">Randyyy</a></li>\n<li>kebabsec (okkothejawa and <a href=\"https://twitter.com/FlameHorizon1\">FlameHorizon</a>)</li>\n<li>Nyamcil</li>\n<li><a href=\"https://instagram.com/vanensurya\">Funen</a></li>\n<li><a href=\"https://github.com/exd0tpy\">exd0tpy</a></li>\n<li>Limbooo</li>\n<li><a href=\"https://t.me/Road220\">m_Rassska</a></li>\n<li><a href=\"https://twitter.com/berndartmueller\">berndartmueller</a></li>\n<li>0xNineDec</li>\n<li>cloudjunky</li>\n<li><a href=\"https://github.com/0xKitsune\">0xKitsune</a></li>\n<li><a href=\"https://twitter.com/shenwilly_\">shenwilly</a></li>\n<li>sorrynotsorry</li>\n<li>JohnSmith</li>\n<li><a href=\"https://github.com/htadashi\">Tadashi</a></li>\n<li><a href=\"http://seanseefried.org/blog\">sseefried</a></li>\n<li><a href=\"https://twitter.com/wookiemad\">MadWookie</a></li>\n<li><a href=\"https://twitter.com/MukeshJ_eth\">JMukesh</a></li>\n<li>asutorufos</li>\n<li>dipp</li>\n<li>naps62</li>\n<li>apostle0x01</li>\n<li>Wayne</li>\n<li><a href=\"https://twitter.com/GallodaSballo\">Alex the Entreprenerd</a></li>\n<li><a href=\"twitter.com/versatile_crypt\">Varun_Verma</a></li>\n<li>0xc0ffEE</li>\n<li><a href=\"https://twitter.com/treasuresETH\">Treasure-Seeker</a></li>\n<li>masterchief</li>\n<li>0x52</li>\n<li><a href=\"https://nethermind.io/\">Nethermind</a></li>\n<li>RoiEvenHaim</li>\n<li><a href=\"https://twitter.com/8olidity\">8olidity</a></li>\n<li>ajtra</li>\n<li>ACai</li>\n<li>cRat1st0s</li>\n<li><a href=\"https://www.linkedin.com/in/evgeniy-shaldin-21898712a/\">Chandr</a></li>\n<li><a href=\"https://twitter.com/_0v3rf10w\">0v3rf10w</a></li>\n<li><a href=\"https://twitter.com/ynnadt1\">ynnad</a></li>\n<li><a href=\"https://twitter.com/AdonaiR6\">IgnacioB</a></li>\n<li><a href=\"https://twitter.com/fitraldys\">Fitraldys</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/HardlyDifficult\">HardlyDifficult</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 12 unique vulnerabilities. Of these vulnerabilities, 0 received a risk rating in the category of HIGH severity and 12 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 82 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 63 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-06-nibbl\">C4 Nibbl contest repository</a>, and is composed of 8 smart contracts written in the Solidity programming language and includes 539 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"medium-risk-findings-12\" style=\"position:relative;\"><a href=\"#medium-risk-findings-12\" aria-label=\"medium risk findings 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (12)</h1>\n<h2 id=\"m-01-buyout-cannot-be-rejected-when-paused\" style=\"position:relative;\"><a href=\"#m-01-buyout-cannot-be-rejected-when-paused\" aria-label=\"m 01 buyout cannot be rejected when paused permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/55\">[M-01] Buyout cannot be rejected when paused</a></h2>\n<p><em>Submitted by Lambda, also found by SmartSek</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L300\">https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L300</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L362\">https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L362</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L464\">https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L464</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L495\">https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L495</a></p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>While <code>buy()</code> and <code>sell()</code> are only callable when the system is not paused, <code>redeem()</code> and <code>withdrawERC721()</code> are also callable when it is not. This means that the <code>BUYOUT_DURATION</code> is ignored in such cases and it is possible that users are not able to reject certain buyouts.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>A user initiates a buyout via <code>initiateBuyout()</code>. Just afterwards, the system is stopped. The token holders now cannot buy new tokens to increase the value. However, after two days, the <code>bidder</code> can still withdraw the NFT, i.e. there was no way for the users to reject this buyout.</p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>It should be possible to reset the <code>buyoutEndTime</code> (to the current <code>block.timestamp</code>) when the system is paused such that the token holders always have the possibility to reject a buyout.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/55#issuecomment-1166321982\">mundhrakeshav (Nibbl) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>Expected. When paused no operations should be available.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/55#issuecomment-1166685840\">fatherGoose1 (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Strongly disagree with the sponsor’s comment. Given that <a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L464\">redeem()</a> and <a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L495\">withdrawERC721()</a> DO NOT contain the <code>whenNotPaused</code> modifier, this ensures that pauses that occur during a buyout process will ensure the success of the buyout. The buyout success occurs by time passing a certain block.timestamp and the functionality to claim the NFT and retrieve the underlying are left open even during the pause. </p>\n<p>Similar to issue <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/261\">#261</a></p>\n<p>I would agree with the sponsor if all of the <code>withdraw()/redeem()</code> functions contained the <code>whenNotPaused</code> modifier so that truly all functions were locked during a pause.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/55#issuecomment-1166747212\">mundhrakeshav (Nibbl) commented</a>:</strong></p>\n<blockquote>\n<p>Hmmm. Makes sense. We should pause redeem and Withdraw too.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/55#issuecomment-1170641593\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The readme does include “Out of scope: Admin can pause and change certain parameters of the contract.” however this report is not strictly about the ability to pause.</p>\n<blockquote>\n<p>It should be possible to reset the buyoutEndTime</p>\n</blockquote>\n<p>In this scenario, an end time has already been defined. If <code>pause</code> is used at that time the window shortens or closes so when resumed the opportunity may have been missed already. The warden’s recommendation here, or some variation of it, would provide a way to effectively allow the system to resume from where it left off when originally paused.</p>\n<p>I suspect the alternative of also pausing redeem / withdraw is not sufficient, as the window to buy/sell will still potentially be passed by the time the system resumes.</p>\n<p>I agree with the submitted Med risk for this issue since the “function of the protocol or its availability could be impacted”.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-twavsol_gettwav-will-revert-when-timestamp--4294967296\" style=\"position:relative;\"><a href=\"#m-02-twavsol_gettwav-will-revert-when-timestamp--4294967296\" aria-label=\"m 02 twavsol_gettwav will revert when timestamp  4294967296 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/178\">[M-02] <code>Twav.sol#_getTwav()</code> will revert when timestamp > 4294967296</a></h2>\n<p><em>Submitted by WatchPug, also found by hansfriese and IllIllI</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_getTwav</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twav</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[</span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">].</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_index</span><span class=\"mtk1\"> = ((</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">) - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">TwavObservation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[(</span><span class=\"mtk12\">_index</span><span class=\"mtk1\">)];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">TwavObservation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[(</span><span class=\"mtk12\">_index</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_twav</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">cumulativeValuation</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\">.</span><span class=\"mtk12\">cumulativeValuation</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Since <code>_blockTimestamp</code> is <code>uint32</code>, subtraction underflow is desired at <code>_twavObservationCurrent.timestamp - _twavObservationPrev.timestamp</code>.</p>\n<p>See: <a href=\"https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol#L43\">https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol#L43</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">update</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price0Cumulative</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price1Cumulative</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blockTimestamp</span><span class=\"mtk1\">) =</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">UniswapV2OracleLibrary</span><span class=\"mtk1\">.</span><span class=\"mtk11\">currentCumulativePrices</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pair</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timeElapsed</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">blockTimestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">blockTimestampLast</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// overflow is desired</span></span></span></code></pre>\n<p>Because the solidity version used by the current implementation is <code>0.8.10</code>, and there are some breaking changes in Solidity v0.8.0:</p>\n<blockquote>\n<p>Arithmetic operations revert on underflow and overflow.</p>\n</blockquote>\n<p>Ref: <a href=\"https://docs.soliditylang.org/en/v0.8.13/080-breaking-changes.html#silent-changes-of-the-semantics\">https://docs.soliditylang.org/en/v0.8.13/080-breaking-changes.html#silent-changes-of-the-semantics</a></p>\n<p>The timestamp subtraction may revert due to underflow.</p>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Since <code>_getTwav()</code> is used in <code>NibblVault.sol#_rejectBuyout()</code>, if it reverts and there is a <code>buyout</code>, an essential feature of the <code>NibblVault</code> contract will be unavailable, causing users’ funds to be frozen in the contract.</p>\n<h3 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_updateTWAV</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_valuation</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_timeElapsed</span><span class=\"mtk1\">; </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_timeElapsed</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">lastBlockTimeStamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_prevCumulativeValuation</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[((</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">) - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">].</span><span class=\"mtk12\">cumulativeValuation</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">TwavObservation</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_prevCumulativeValuation</span><span class=\"mtk1\"> + (</span><span class=\"mtk12\">_valuation</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_timeElapsed</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">//add the previous observation to make it cumulative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">lastBlockTimeStamp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_getTwav</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twav</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[</span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">].</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_index</span><span class=\"mtk1\"> = ((</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">) - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">TwavObservation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[(</span><span class=\"mtk12\">_index</span><span class=\"mtk1\">)];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">TwavObservation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[(</span><span class=\"mtk12\">_index</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_twav</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">cumulativeValuation</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\">.</span><span class=\"mtk12\">cumulativeValuation</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/178\">mundhrakeshav (Nibbl) acknowledged, but disagreed with severity</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/178#issuecomment-1166164271\">KenzoAgada (warden) commented</a>:</strong></p>\n<blockquote>\n<p>If I’m not mistaken, timestamp 4294967296 is 2106, I wouldn’t call the contract breaking in 84 years a high severity issue. Plus the contract is truncating the timestamp on purpose. Seems to me more like a design choice and less of a bug.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/178#issuecomment-1166798846\">mingwatch (warden) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>If I’m not mistaken, timestamp 4294967296 is 2106, I wouldn’t call the contract breaking in 84 years a high severity issue. Plus the contract is truncating the timestamp on purpose. Seems to me more like a design choice and less of a bug.</p>\n</blockquote>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/Twav/Twav.sol#L23-L25\">https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/Twav/Twav.sol#L23-L25</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_updateTWAV</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_valuation</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_timeElapsed</span><span class=\"mtk1\">; </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_timeElapsed</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">lastBlockTimeStamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span></code></pre>\n<p>According to the above code, is obviously not a design choice.\n</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/178#issuecomment-1166807275\">KenzoAgada (warden) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>According to the above code, is obviously not a design choice.</p>\n</blockquote>\n<p>Ah, I think I understand what you mean, it is not handled consistently.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/178#issuecomment-1171706893\">HardlyDifficult (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>it is not handled consistently</p>\n</blockquote>\n<p>Thanks for the clarifications!</p>\n<p><code>_getTwav</code> would overflow once timestamps overflow uint32, but only when the current observation has overflowed while the previous observation did not.</p>\n<p>The window for this vulnerability is very small, just at the time timestamp starts to overflow in 2106 - vaults active before or after that time should work as expected. </p>\n<p>This appears to be a Medium risk finding.  There’s potentially a case to be made for high here but it’s hard to make that call without a more complete POC included. The vault is an upgradeable contract so they have 84 years to sort this out — but it does seem like an issue that should be fixed.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-user-could-change-the-state-of-the-system-while-in-pause-mode\" style=\"position:relative;\"><a href=\"#m-03-user-could-change-the-state-of-the-system-while-in-pause-mode\" aria-label=\"m 03 user could change the state of the system while in pause mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/200\">[M-03] User Could Change The State Of The System While In <code>Pause</code> Mode</a></h2>\n<p><em>Submitted by xiaoming90</em></p>\n<p>Calling <code>NibblVault.updateTWAP</code> function will change the state of the system. It will cause the TWAP to be updated and buyout to be rejected in certain condition.</p>\n<p>When the system is in <code>Pause</code> mode, the system state should be frozen. However, it was possible for someone to call the <code>NibblVault.updateTWAP</code> function during the <code>Pause</code> mode, thus making changes to the system state.</p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L443\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L443</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice Updates the TWAV when in buyout</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @dev TWAV can be updated only in buyout state</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateTWAV</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">status</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">Status</span><span class=\"mtk1\">.</span><span class=\"mtk12\">buyout</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVault: Status!=Buyout&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">lastBlockTimeStamp</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_updateTWAV</span><span class=\"mtk1\">(</span><span class=\"mtk11\">getCurrentValuation</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">);   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_rejectBuyout</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">//For the case when TWAV goes up when updated externally</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Ensure that the <code>NibblVault.updateVault</code> function cannot be called when the system is in <code>Pause</code> mode.</p>\n<p>Add the <code>whenNotPaused</code> modifier to the function.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice Updates the TWAV when in buyout</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @dev TWAV can be updated only in buyout state</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateTWAV</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">whenNotPaused</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">status</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">Status</span><span class=\"mtk1\">.</span><span class=\"mtk12\">buyout</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVault: Status!=Buyout&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">lastBlockTimeStamp</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_updateTWAV</span><span class=\"mtk1\">(</span><span class=\"mtk11\">getCurrentValuation</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">);   </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_rejectBuyout</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">//For the case when TWAV goes up when updated externally</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/200#issuecomment-1166505154\">mundhrakeshav (Nibbl) marked as duplicate and commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate of <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/56\">#56</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/200#issuecomment-1173872782\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<h1 id=\"56\" style=\"position:relative;\"><a href=\"#56\" aria-label=\"56 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>56</h1>\n</blockquote>\n<p>It’s not clear to me how this is a dupe of #56 </p>\n<p>This is a valid concern and potentially a change worth making.</p>\n<blockquote>\n<p> It will cause the TWAP to be updated and buyout to be rejected</p>\n</blockquote>\n<p>This makes me think Medium risk is correct here. In this scenario a buyout could be rejected without allowing other users to challenge that — seemingly breaking one of the benefits behind using Twap for this logic.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-ineffective-twav-implementation\" style=\"position:relative;\"><a href=\"#m-04-ineffective-twav-implementation\" aria-label=\"m 04 ineffective twav implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191\">[M-04] Ineffective TWAV Implementation</a></h2>\n<p><em>Submitted by xiaoming90, also found by hyh</em></p>\n<p>The current TWAV implementation consists of an array of 4 observations/valuations called <code>twavObservations</code>. Whenever, the new valuation is updated, the new cumulative valuation will be appended to the <code>twavObservations</code> array and the oldest observation/valuation will be removed from the <code>twavObservations</code> array.</p>\n<p>Description of current TWAV implementation can be found at <a href=\"https://github.com/NibblNFT/nibbl-smartcontracts#twavsol\">https://github.com/NibblNFT/nibbl-smartcontracts#twavsol</a></p>\n<blockquote>\n<ul>\n<li>Time-weighted average valuation</li>\n<li>Uses an array of length 4 which stores cumulative valuation and timestamp.</li>\n<li>TWAV is calculated between the most and least recent observations recorded in the array.</li>\n<li>TWAV array is updated only when the system is in buyout state. In case of buyout rejection, the array is reset.</li>\n</ul>\n</blockquote>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L11\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L11</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice current index of twavObservations index</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">4</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//TWAV of last 4 Blocks </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lastBlockTimeStamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice record of TWAV </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">TwavObservation</span><span class=\"mtk1\">[</span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">] </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice updates twavObservations array</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _blockTimestamp timestamp of the block</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @param _valuation current valuation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_updateTWAV</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_valuation</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_timeElapsed</span><span class=\"mtk1\">; </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_timeElapsed</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">lastBlockTimeStamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_prevCumulativeValuation</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[((</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">) - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">].</span><span class=\"mtk12\">cumulativeValuation</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">TwavObservation</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_prevCumulativeValuation</span><span class=\"mtk1\"> + (</span><span class=\"mtk12\">_valuation</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_timeElapsed</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">//add the previous observation to make it cumulative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">lastBlockTimeStamp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Within the <code>NibblVault</code> contract, the <code>_updateTWAV</code> function will be called whenever the following events happen during the buyout period:</p>\n<ol>\n<li><code>NibbleVault.buy()</code> and <code>NibbleVault.Sell()</code> functions are called</li>\n<li><code>NibbleVault.initiateBuyout</code> function is called</li>\n<li><code>NibbleVault.updateTWAV</code> function is called</li>\n</ol>\n<p>Per the code and comment of <code>_getTwav()</code> function, the function will return the TWAV of the last four (4) blocks. This function can be called by anyone.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice returns the TWAV of the last 4 blocks</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @return _twav TWAV of the last 4 blocks</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_getTwav</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twav</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[</span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">].</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_index</span><span class=\"mtk1\"> = ((</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">) - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">TwavObservation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[(</span><span class=\"mtk12\">_index</span><span class=\"mtk1\">)];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">TwavObservation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[(</span><span class=\"mtk12\">_index</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_twav</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">cumulativeValuation</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\">.</span><span class=\"mtk12\">cumulativeValuation</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Time weighted average valuation (TWAV) is supposed to be the average value of a security over a specified time (e.g. 15 minutes, 1 hour, 24 hours). However, based on the above implementation of the <code>_getTwav</code> function, it is not the average value of a security over a specific time.</p>\n<p>A user could call the <code>updateTWAV</code> function to add the new valuation/observation to the <code>twavObservations</code> array each time a new Ethereum block is mined. As such, the current implementation becomes the average value of a security over a specific number of observations (in this case 4 observations), thus it can be considered as Observation weighted average valuation (OWAV).</p>\n<p>There is a fundamental difference between TWAV and OWAV.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>In Ethereum, the average block time is around 15 seconds, so the time to take to mine 4 blocks will be 1 minute. As such, in term of TWAV, the current implementation only have a period of 1 minute, which is too short to prevent price manipulation.</p>\n<p>The following shows an example where it is possible to buy tokens→ increase the valuation above the rejection valuation→ reject the buyout→ dump the tokens within 1 minute:</p>\n<p>Assume that a buyer has triggered a buyout on the vault/NFT, and the buyout rejection price is 120 ETH and the current valuation is 100 ETH. Further assume that all elements in the  <code>twavObservations</code> array have already been populated.</p>\n<p>Note: Fees are ignored to illustrate the issue.</p>\n<ol>\n<li>Block 100 at Time 0 - Attacker called <code>buy</code> function to increase the current valuation to 120 ETH attempting to reject the buyout.</li>\n<li>Block 101 at Time 15 - Attacker called <code>updateTWAV</code> function. The current valuation (120 ETH) will be replaced the first element in <code>twavObservations</code> array.</li>\n<li>Block 102 at Time 30 - Attacker called <code>updateTWAV</code> function. The current valuation (120 ETH) will be replaced the second element in <code>twavObservations</code> array.</li>\n<li>Block 103 at Time 45 - Attacker called <code>updateTWAV</code> function. The current valuation (120 ETH) will be replaced the third element in <code>twavObservations</code> array.</li>\n<li>Block 104 at Time 60 - Attacker called <code>sell</code> function to sell/dump all his shares. Within the <code>sell</code> function, <code>_updateTWAV</code> will be first called, thus the current valuation (120 ETH) will be replaced the fourth element in <code>twavObservations</code> array. Then, the <code>_rejectBuyout()</code> will be called, and the <code>_getTwav</code> function will be triggered. At this point, the TWAV valuation is finally 120 ETH, thus the buyout is rejected. Subseqently, attacker’s shares are burned, and attacker get back his funds.</li>\n</ol>\n<p>Since attacker could perform the above attack within 1 minute, it is very unlikely that the attackers will lose money to arbitrageurs as it takes some time for the arbitrageurs to notice such an opportunity.</p>\n<p>Attacker could also front-run or set a higher gas fee to ensure that their transaction get mined in the next block to minimize the attack window period.</p>\n<h3 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Buyout can be easily rejected by attackers</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Implement a proper TWAV that provides the average value of a security over a specified time. The time period/windows of the TWAV must be explicitly defined (e.g. 15 minutes, 1 hour, 24 hours) in the contract.</p>\n<p>There are trade offs when choosing the length of the period of time to calculate a TWAP. Longer periods are better to protect against price manipulation, but come at the expense of a slower, and potentially less accurate, price. Thus, the team should determine the optimal period.</p>\n<p>Consider referencing the popular Uniswap V2 TWAP design (<a href=\"https://docs.uniswap.org/protocol/V2/concepts/core-concepts/oracles\">https://docs.uniswap.org/protocol/V2/concepts/core-concepts/oracles</a>)</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191\">mundhrakeshav (Nibbl) disagreed with severity</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1166158748\">sseefried (warden) commented</a>:</strong></p>\n<blockquote>\n<p>I had a Low Risk (<a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/142\">#142</a>) associated with <code>_getTWAV</code> too. I’m not sure it even averages over 4 observations.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1166498885\">Picodes (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Some comments, as I personally don’t think it’s an high security issue:</p>\n<ul>\n<li>the primary goal of the TWAV here is to avoid manipulations within the same block. As long as it’s over multiple blocks, the attackers takes a risk as there could be arbitrages, so the attack risk is mitigated.</li>\n<li>the main assumption of the issue is:  “it takes some time for the arbitrageurs to notice such an opportunity, and the 4 block window is too short.” which seems false when you check on chain data: arbitrageurs are frequently super quick to react as it’s their primary job: the first to check an opportunity takes it.</li>\n</ul>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1173080518\">HardlyDifficult (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Great summary @Picodes , I agree with both points.</p>\n<p>Lowering this to a Medium risk. I may be incorrect, but it seems a secondary goal of Twap is price smoothing to avoid scenarios like what was outlined here. If that’s correct then this impacts the function of the protocol and the recommendation is a good consideration.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174456950\">dmitriia (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Same here, TWAP is essential to the protocol, while the ability to manipulate the price during last minute breaks the core logic of price discovery by greatly reducing the number of participants. The rationale that 4 blocks are enough and arbitrage is generally quick is sufficient for mainstream cases only, all other trading is at risk of direct manipulation, which is existential risk for the protocol. Can’t see why the team pressing for medium here. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174459120\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>Same here, TWAP is essential to the protocol, while the ability to manipulate the price during last minute breaks the core logic of price discovery by greatly reducing the number of participants. The rationale that 4 blocks are enough and arbitrage is generally quick is sufficient for mainstream cases only, all other trading is at risk of direct manipulation, which is existential risk for the protocol. Can’t see why the team pressing for medium here.</p>\n</blockquote>\n<p>The stated goal of using Twap in their documentation is the same as above, to prevent same-block attacks. It seems the concern is the implicit behavior expected from using a “time weighted” variable. Personally I agree this seems like an area they may want to revisit. However the system behaves correctly and there is a tiny window for bots to respond.</p>\n<p>@mundhrakeshav @Picodes would you mind elaborating here as well?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174608883\">mundhrakeshav (Nibbl) commented</a>:</strong></p>\n<blockquote>\n<p>Yeah, makes sense. We do plan to increase the array length.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174707038\">Picodes (warden) commented</a>:</strong></p>\n<blockquote>\n<p>I fully agree with both of you: it’d be indeed better to increase the array length to increase the robustness, but I still feel this is a medium issue as the system works as intended</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174787468\">dmitriia (warden) commented</a>:</strong></p>\n<blockquote>\n<p>The system formally/technically works as intended, but being a price discovery engine, where participants having incentives to try to determine the NFT price, it will not be used if the window for such a discovery is mere 4 blocks. Formally the bots will have space to react. Realistically it will happen in the most mainstream cases only, when price discovery isn’t much needed. I.e. exactly when the system can bring in something new, adding a mechanics for ‘slow’ usual users to add price information, it will not work as the set of participants who can add the information to the metric (react to move the price) is shrunk by a tiny reaction window. Who will take part in a price discovery game knowing that last minute bots are always can surface? Quite not everyone. This reduces the traction, and so the amount of information brought in by the system, as this is the users who bring in the additional signal, and ultimately it will be a piece of well known NFTs synched with main market with bots, adding no value to it. I.e. the system will work technically, but economically it will not make much sense, so will not be widely used by market actors and can end up provide little value to broad market. This is what I mean by existential risk, which is, of course high. </p>\n<p>I just feel that here and in general in C4 economic issues are tend to be underestimated, while having one usually tend to be a game changing aspect for a project. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174927014\">IllIllI000 (warden) commented</a>:</strong></p>\n<blockquote>\n<p>@HardlyDifficult If the sponsor had used the term OWAV rather than TWAV, would this still be a medium-severity issue? It seems as though they knew the behavior they wanted (at least four user interactions where the average price is above the threshold) and just used the wrong term to describe it. I didn’t file this issue because it seemed that way. The screenshot in this issue shows that they’re interested in interactions, not duration of time <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/144\">https://github.com/code-423n4/2022-06-nibbl-findings/issues/144</a>. It’s possible they confirmed the issue because they weren’t aware that comment vs code consistency issues are usually categorized as low risk</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1175170494\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Great points @dmitriia and @IllIllI000 ! Both are compelling. This is certainly a grey area.</p>\n<p>Given how significantly this impacts how users would potentially view and interact with the system, I’m inclined to leave this a Medium risk instead of downgrading to Low, falling under “the function of the protocol or its availability could be impacted”.</p>\n<p>And since this was intentional design and there is a window for bots to respond, I don’t feel that High risk is justified.</p>\n<p>I’m happy to continue here or on Discord, and would love more input if others want to chime in on the severity here. I don’t feel strongly but do think that Medium is the best fit here.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-lack-of-sanity-check-on-_initialtokensupply-and-_initialtokenprice-can-lead-to-a-seller-losing-his-nft\" style=\"position:relative;\"><a href=\"#m-05-lack-of-sanity-check-on-_initialtokensupply-and-_initialtokenprice-can-lead-to-a-seller-losing-his-nft\" aria-label=\"m 05 lack of sanity check on _initialtokensupply and _initialtokenprice can lead to a seller losing his nft permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/24\">[M-05] Lack of sanity check on _initialTokenSupply and _initialTokenPrice can lead to a seller losing his NFT</a></h2>\n<p><em>Submitted by itsmeSTYJ</em></p>\n<p>There is no sanity check to ensure that <code>(primaryReserveRatio * _initialTokenSupply * _initialTokenPrice)</code> is ≥ <code>(SCALE * 1e18)</code>. As a result, <code>_primaryReserveBalance</code> is given a value of 0 since divisions in solidity are rounded down. This also means that <code>primaryReserveBalance</code> and <code>fictitiousPrimaryReserveBalance</code> have a value of 0.</p>\n<p>When this happens, the <code>buy</code> function doesn’t work because <code>_chargeFee</code> will revert on <a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L222\">line 222</a>. You can’t <code>sell</code> either since <code>totalSupply == initialSupply</code>. The only way to recover the NFT is for the owner of the NFT to call <code>initiateBuyout</code> but there is always the possibility that someone else also spotted this mistake and will attempt to also call <code>initiateBuyout</code> once the <code>minBuyoutTime</code> is reached. If the owner loses this gas war, the owner has effectively lost his NFT.</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add some sanity checks to ensure a sane expected value for <code>_initialTokenSupply</code> and <code>_initialTokenPrice</code>. There were multiple instances when a user tried to interact with a contract but entered a wrong value because they are not aware they needed to include decimals. A recent example of this is <a href=\"https://cointelegraph.com/news/1-million-rock-nft-sells-for-a-penny-in-all-ore-nothing-error\">https://cointelegraph.com/news/1-million-rock-nft-sells-for-a-penny-in-all-ore-nothing-error</a>.</p>\n<hr>\n<p><em>Note: Normally, I would categorise issues like this as medium severity since it is a loss predicated on having met certain conditions but because there is also a lack of sanity check on <code>_minBuyoutTime</code>, it is entirely possible for a seller to lose his NFT immediately once the vault is created. There are many monsters waiting in the dark forest, all it takes is one mistake. That said, I will defer the final judgement to the judges &#x26; sponsors.</em></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/24#issuecomment-1166304473\">mundhrakeshav (Nibbl) disputed, disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Case when that would happen is _initialTokenSupply or _initialTokenPrice is 0. But then it would revert here\n<a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L183\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L183</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/24#issuecomment-1172976012\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>Case when that would happen is _initialTokenSupply or _initialTokenPrice is 0.</p>\n</blockquote>\n<p>primaryReserveRatio = 200<em>000 and SCALE = 1</em>000<em>000 — so it seems this applies anytime _initialTokenSupply * _initialTokenPrice &#x3C; 1</em>000<em>000 * 1e18 / 200</em>000, not just when one of those values is 0. Please correct me if I got that wrong.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/24#issuecomment-1172977395\">HardlyDifficult (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>This is a good report. I agree this seems like something that should be addressed. Assuming my math is right, if the initialTokenPrice was 1 wei then the initialTokenSupply must be >= 5e18. They are using the default of 18 decimals (which is also industry standard) so that’s 5 tokens. Given this is not very large window and these values impact the curve — without a clear POC High would not be warranted, downgrading to Medium risk.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-06-nibblvault-in-the-buy-function-users-can-avoid-paying-fees\" style=\"position:relative;\"><a href=\"#m-06-nibblvault-in-the-buy-function-users-can-avoid-paying-fees\" aria-label=\"m 06 nibblvault in the buy function users can avoid paying fees permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/14\">[M-06] NibblVault: In the buy function, users can avoid paying fees</a></h2>\n<p><em>Submitted by cccz, also found by kenzo, Lambda, WatchPug, xiaoming90, and zzzitron</em></p>\n<p>In the buy function of the NibblVault contract, when msg.value > _lowerCurveDiff, the fee for SecondaryCurve part  is not charged.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">            if (_lowerCurveDiff &gt;= msg.value) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _purchaseReturn = _buySecondaryCurve(msg.value, _totalSupply);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            } else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                //Gas Optimization</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _purchaseReturn = _initialTokenSupply - _totalSupply;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                secondaryReserveBalance += _lowerCurveDiff;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // _purchaseReturn = _buySecondaryCurve(_to, _lowerCurveDiff);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _purchaseReturn += _buyPrimaryCurve(msg.value - _lowerCurveDiff, _totalSupply + _purchaseReturn);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            } </span></span></code></pre>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L314-L323\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L314-L323</a></p>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The fee for the SecondaryCurve part is complex to charge. I implemented the _caculateFeeSecondaryCurve and _reverseFeeSecondaryCurve functions to do the relevant calculations.</p>\n<p>The _caculateFeeSecondaryCurve function is used to calculate the value after the fee is charged, but not to actually charge the fee. The _reverseFeeSecondaryCurve function is used to calculate the value before the fee is charged.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">            if (_lowerCurveDiff &gt;= _caculateFeeSecondaryCurve(msg.value)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _purchaseReturn = _buySecondaryCurve(msg.value, _totalSupply);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            } else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                //Gas Optimization</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _purchaseReturn = _initialTokenSupply - _totalSupply;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                secondaryReserveBalance += _lowerCurveDiff;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                uint256 _amount = _reverseFeeSecondaryCurve(_lowerCurveDiff);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _chargeFeeSecondaryCurve(_amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // _purchaseReturn = _buySecondaryCurve(_to, _lowerCurveDiff);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _purchaseReturn += _buyPrimaryCurve(msg.value - _amount, _totalSupply + _purchaseReturn);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            } </span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _caculateFeeSecondaryCurve(uint256 _amount) private returns(uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       address payable _factory = factory;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _adminFeeAmt = NibblVaultFactory(_factory).feeAdmin();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _feeAdmin = (_amount * _adminFeeAmt) / SCALE ;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _feeCurator = (_amount * curatorFee) / SCALE ;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return _amount - (_feeAdmin + _feeCurator);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _reverseFeeSecondaryCurve(uint256 _amount) private returns(uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       address payable _factory = factory;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _adminFeeAmt = NibblVaultFactory(_factory).feeAdmin();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return _amount * SCALE / (SCALE - (_adminFeeAmt + curatorFee));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/14\">mundhrakeshav (Nibbl) acknowledged, but disagreed with severity</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/14#issuecomment-1173125051\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Failing to collect fees is a form of leaking value for the curator and therefore falls into the Medium risk definition — keeping the severity as reported.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-07--_updatetwav-and-_gettwav-will-revert-when-cumulativeprice-overflows\" style=\"position:relative;\"><a href=\"#m-07--_updatetwav-and-_gettwav-will-revert-when-cumulativeprice-overflows\" aria-label=\"m 07  _updatetwav and _gettwav will revert when cumulativeprice overflows permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/246\">[M-07]  <code>_updateTwav()</code> and <code>_getTwav()</code> will revert when cumulativePrice overflows</a></h2>\n<p><em>Submitted by peritoflores, also found by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L28\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L28</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L40\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L40</a></p>\n<h3 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Contract will break when <code>cumulativeValuation</code> overflows.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Cumulative prices are designed to work with overflows/underflows because in the end  the difference is important.</p>\n<p>In <code>_updateTwav()</code>  when _<code>prevCumulativeValuation + (_valuation *_timeElapsed)</code>  overflows the contract will not work anymore.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">twavObservations[twavObservationsIndex] = TwavObservation(_blockTimestamp, _prevCumulativeValuation + (_valuation * _timeElapsed)); //add the previous observation to make it cumulative @audit overflow breaks the contract</span></span></code></pre>\n<p>Same  problem in <code>_getTwav()</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">  _twav = (_twavObservationCurrent.cumulativeValuation - _twavObservationPrev.cumulativeValuation) / (_twavObservationCurrent.timestamp - _twavObservationPrev.timestamp);@audit same overflow breaks the contract</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<h3 id=\"similar-issues\" style=\"position:relative;\"><a href=\"#similar-issues\" aria-label=\"similar issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Similar issues</h3>\n<p><a href=\"https://github.com/code-423n4/2022-04-phuture-findings/issues/62\">https://github.com/code-423n4/2022-04-phuture-findings/issues/62</a></p>\n<h3 id=\"recommended-mitigation\" style=\"position:relative;\"><a href=\"#recommended-mitigation\" aria-label=\"recommended mitigation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation</h3>\n<p>Add unchecked keyword in every line you add / subtract cumulative prices.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/246\">mundhrakeshav (Nibbl) acknowledged</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/246#issuecomment-1172978466\">HardlyDifficult (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Without a better POC of the issue occurring it’s hard to justify this is High risk. e.g. maybe it could be forced by spamming <code>updateTWAV</code>, but it’s not clear if that would require extremely large values or an unrealistic number of transactions.</p>\n<p>Related to <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/178\">https://github.com/code-423n4/2022-06-nibbl-findings/issues/178</a>, that one includes unchecking the price in the recommendation but the rest of the description focuses on timestamp overflows while this one looks at price overflows.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-pnm-004-calculation-of-_secondaryreserveratio-can-be-overflowed\" style=\"position:relative;\"><a href=\"#m-08-pnm-004-calculation-of-_secondaryreserveratio-can-be-overflowed\" aria-label=\"m 08 pnm 004 calculation of _secondaryreserveratio can be overflowed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/273\">[M-08] [PNM-004] Calculation of <code>_secondaryReserveRatio</code> can be overflowed</a></h2>\n<p><em>Submitted by PwnedNoMore, also found by ych18</em></p>\n<p><code>uint32 _secondaryReserveRatio = uint32((msg.value * SCALE * 1e18) / (_initialTokenSupply * _initialTokenPrice));</code></p>\n<p><code>_secondaryReserveRatio</code> can be overflowed by setting a relatively small <code>_initialTokenSupply</code> and <code>_initialTokenPrice</code>. The result will be truncated by <code>uint32</code>, causing an overflow.</p>\n<p>This overflow can bypass all the checks in function <code>initialize</code>. Any following functionality will be impacted since the <code>_secondaryReserveRatio</code> is incorrect.</p>\n<h3 id=\"proof-of-concept--attack-scenario\" style=\"position:relative;\"><a href=\"#proof-of-concept--attack-scenario\" aria-label=\"proof of concept  attack scenario permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept / Attack Scenario</h3>\n<ul>\n<li>The user provide <code>_initialTokenSupply</code> and <code>_initialTokenPrice</code>, which meets <code>SCALE * 1e18 == _initialTokenSupply * _initialTokenPrice</code></li>\n<li>The <code>msg.value</code> is set as <code>2 ** 32 + X</code>, where <code>MIN_SECONDARY_RESERVE_RATIO &#x3C;= X &#x3C;= primaryReserveRatio</code>. Note that <code>msg.value</code> is in Wei, so the deposited fund is not huge.</li>\n</ul>\n<h3 id=\"suggested-fix\" style=\"position:relative;\"><a href=\"#suggested-fix\" aria-label=\"suggested fix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Suggested Fix</h3>\n<p>Add overflow checks.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/273\">mundhrakeshav (Nibbl) acknowledged</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/273#issuecomment-1173223715\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>OpenZeppelin has safe cast helpers that could be leveraged here.</p>\n<p>It is concerning that due to the truncation here, the configuration would not work how the user expects given the input parameters. And at this point the NFT has been escrowed into the vault. Because of this it seems Medium risk is a fair assessment. </p>\n</blockquote>\n<hr>\n<h2 id=\"m-09-nibblvault-buyout-duration-longer-than-update-timelock\" style=\"position:relative;\"><a href=\"#m-09-nibblvault-buyout-duration-longer-than-update-timelock\" aria-label=\"m 09 nibblvault buyout duration longer than update timelock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/278\">[M-09] NibblVault buyout duration longer than update timelock</a></h2>\n<p><em>Submitted by reassor</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/NibblVaultFactoryData.sol#L6\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/NibblVaultFactoryData.sol#L6</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L158-L169\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L158-L169</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L37\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L37</a></p>\n<h3 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>User can buy out NFT by initiating the process through <code>initiateBuyout</code>, then he has to wait <code>BUYOUT_DURATION</code> which is 5 days and if the buyout will not get rejected he can claim the NFT. During that period bidder cannot cancel the process. The issue is that since <code>NibblVault</code> is used through proxy it is possible to change its implementation through administrative functionality in <code>NibblVaultFactory</code> and the timelock for update’ing implementation is only 2 days.</p>\n<p>Attack Scenario:</p>\n<ol>\n<li>Bidder initiates buyout through <code>initiateBuyout</code></li>\n<li>Administrator of the protocol updates the <code>vaultImplementation</code> through <code>proposeNewVaultImplementation</code></li>\n<li>Bidder really does not like new implementation but cannot cancel buyout process</li>\n<li>Administrator waits 2 days (the <code>UPDATE_TIME</code>) uses <code>updateVaultImplementation</code> and changes the implementation</li>\n<li>Bidder loses funds/fait in the protocol</li>\n</ol>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/NibblVaultFactoryData.sol#L6\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/NibblVaultFactoryData.sol#L6</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L158-L169\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L158-L169</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L37\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L37</a></li>\n</ul>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Manual Review / VSCode</p>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>It is recommended to either implement functionality for bidder to cancel the bid or increase/decrease the <code>UPDATE_TIME</code>/<code>BUYOUT_DURATION</code> so the invariant <code>BUYOUT_DURATION &#x3C; UPDATE_TIME</code> holds.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/278\">mundhrakeshav (Nibbl) acknowledged, but disagreed with severity</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/278#issuecomment-1172985223\">HardlyDifficult (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>It seems the bidder could be left in a bad state, and updating the thresholds here may be a nice way to maintain expectations. Since this scenario is based on the admin making an undesirable change, this is a Medium risk report.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-10-reentrancy-bug-in-baskets-withdraw-multiple-tokens-function-which-gives-attacker-ability-to-transfer-basket-ownership-and-spend-it-but-withdraw-all-the-tokens-out-of-basket\" style=\"position:relative;\"><a href=\"#m-10-reentrancy-bug-in-baskets-withdraw-multiple-tokens-function-which-gives-attacker-ability-to-transfer-basket-ownership-and-spend-it-but-withdraw-all-the-tokens-out-of-basket\" aria-label=\"m 10 reentrancy bug in baskets withdraw multiple tokens function which gives attacker ability to transfer basket ownership and spend it but withdraw all the tokens out of basket permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/185\">[M-10] Reentrancy bug in Basket’s withdraw multiple tokens function which gives attacker ability to transfer basket ownership and spend it but withdraw all the tokens out of basket</a></h2>\n<p><em>Submitted by unforgiven</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L41-L47\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L41-L47</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L68-L75\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L68-L75</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L91-L97\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L91-L97</a></p>\n<h3 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p><code>Basket</code> is used for keep multiple tokens in contract and mint one <code>NFT</code> token to represent their ownership. <code>Basket</code> only allows for owner of <code>NFT(id=0)</code> to withdraw tokens from <code>Basket</code> address. users can deposit multiple tokens in one <code>Basket</code> and then create a <code>NibbVault</code> based on that <code>Basket NFT</code>. but due to reentrancy vulnerability in <code>Basket</code> it’s possible to call the multiple-token-withdraw functions (<code>withdrawMultipleERC721()</code>, <code>withdrawMultipleERC1155()</code>, <code>withdrawMultipleERC721()</code> and <code>withdrawMultipleERC20()</code>) and in the middle their external calls, spend <code>Basket NFT</code> (transfer ownership of <code>id=0</code> to other contract, for example <code>createVault()</code>) and receive some fund from other, then in the rest of the multiple-token-withdraw function withdraw all the basket tokens. <code>Basket</code> shouldn’t allow transferring ownership of <code>id=0</code> in the middle of multiple token withdraws.</p>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>This is <code>withdrawMultipleERC721()</code> code:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function withdrawMultipleERC721(address[] memory _tokens, uint256[] memory _tokenId, address _to) external override {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(_isApprovedOrOwner(msg.sender, 0), &quot;withdraw:not allowed&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i = 0; i &lt; _tokens.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            IERC721(_tokens[i]).safeTransferFrom(address(this), _to, _tokenId[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            emit WithdrawERC721(_tokens[i], _tokenId[i], _to);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>As you can see, contract only checks the ownership of <code>id=0</code> in the beginning of the function to see that user allowed to perform this action or not. then it iterates through user specified addresses and call <code>safeTransferFrom()</code> function in those address by user specified values. the bug is that in the middle of the external calls attacker can spend <code>Basket NFT id=0</code> (give ownership of that basket to other contracts and receive fund from them, for example attacker can call <code>createVault</code> in <code>NibblVaultFactory</code> and create a vault and call other contracts to invest in that vault) then in the rest of the iterations in <code>withdrawMultipleERC721()</code> attacker can withdraw <code>Basket</code> tokens. so even so the ownership of the <code>Basket</code> has been transferred and attacker received funds for it, attacker withdraw <code>Basket</code> tokens too.</p>\n<p>This is the steps attacker would perform:</p>\n<ol>\n<li>Create a <code>Basket</code> with well known <code>NFT</code> token list. let’s assume the <code>Basket</code> name is <code>Basket_M</code></li>\n<li>Give approve permission to <code>NibblVaultFactory</code> for <code>Basket_M id=0</code> token.</li>\n<li>Call <code>Basket_M.withdrawMultipleERC721(address[] memory _tokens, uint256[] memory _tokenId, address _to)</code> with list of all the tokens in basket to withdraw all of them, but the first address in the <code>_tokens</code> list is the address that attacker controls.</li>\n<li><code>Basket_M</code> would check that attacker is owner of the basket (owner of the <code>id = 0</code>) and in first iteration of the <code>for</code> it would call attacker controlled address which is a contract that attacker wrote its code.</li>\n<li>Attacker contract would call <code>NibblVaultFactory.createVault()</code> with <code>Basket_M</code> address and <code>id=0</code> to create a vault which then transfer the ownership of <code>Basket_M id=0</code> to the vault address. let’s assume it’s <code>Vault_M</code>.</li>\n<li>Attacker contract would buy some fraction of <code>Vault_M</code> by calling <code>buy()</code> function.</li>\n<li>Let’s assume there are other contracts(call it <code>Invest_Contract</code>) that would want to buy fraction of the well known <code>NFT</code>s in the basket and <code>Invest_Contract</code> invest some fund in vault having those <code>NFT</code> in vault’s address or vault’s basket just by calling <code>Invest_Contract</code>. attacker contract would call <code>Invest_Contract</code>  to invest in <code>Vault_M</code> and <code>Invest_Contract</code> would check that well known <code>NFT</code> is in <code>Basket_M id=0</code> which belongs to <code>Vault_M</code> to it would invest money on it by calling <code>initiateBuyout()</code></li>\n<li>Attacker contract then withdraw his money from <code>Vault_M</code> .</li>\n<li>The rest of <code>Basket_M.withdrawMultipleERC721()</code> for iterations performs and all the <code>NFT</code> tokens of the <code>Basket_M</code> would be send to attacker and <code>Basket_M</code> would have nothing.</li>\n</ol>\n<p>Steps 5 to 8 can be other things, the point is in those steps attacker would spent <code>Basket_M</code> and receive some fund from other contract while those other contracts checks that they are owner of the <code>Basket_M</code> which has well known <code>NFT</code> tokens, but in fact attacker withdraw those well known <code>NFT</code> tokens from <code>Basket_M</code> after spending it in the rest of the <code>withdrawMultipleERC721()</code> iterations. (those above step 5-8 is just a sample case)</p>\n<p>So <code>Basket</code> shouldn’t allow ownership transfer in the middle of the <code>Basket_M.withdrawMultipleERC721()</code> and similar multiple-token-withdraw functions or it should check the ownership in every iteration.</p>\n<h3 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VIM</p>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Check ownership of <code>id=0</code> in every iteration or don’t allow ownership transfer in the multiple-token-transfer functions.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/185\">mundhrakeshav (Nibbl) disputed</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1166658269\">Alex the Entreprenerd (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Contract checks if you own it as owner of Basket has bought it, and as such is entitled to underlying tokens.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1166696834\">KenzoAgada (warden) commented</a>:</strong></p>\n<blockquote>\n<p>The attack is contingent on a regular user, creating a smart contract, which allows anybody to call it, which checks that a parameter-supplied Nibbl vault contains a Nibbl basket which contains a specific NFT, and then proceeds to buyout/buy shares of that vault.</p>\n<p>Honestly it seems like the vector of attack is possible but quite far fetched.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1173071137\">HardlyDifficult (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Creative thinking, this is what I’m here for!</p>\n<p>If I’m following the flow correctly.. you kick off a bulk withdraw from the basket, the first NFT in the list is a malicious contract which then creates a vault for that basket (so the contract needs to be the basket owner, which is okay). Now the vault is fully created for that basket which still has valuable NFTs in it but you’re mid-tx. Your malicious contract pings other contracts which can be prompted to ape in via on-chain logic — their logic confirms all looks well and buys. But then control returns to the original batch withdrawal and the basket is drained.</p>\n<blockquote>\n<p>Honestly it seems like the vector of attack is possible but quite far fetched.</p>\n</blockquote>\n<p>I think I’d agree. To put it in terms of risk, this is not High: “valid attack path that does not have hand-wavy hypotheticals” — this sounds a bit hand-wavy. Namely because it assumes <code>Invest_Contract</code> allows any address to trigger a purchase using other users funds which seems risky. And the victim here is <code>Invest_Contract</code>, not regular users of the protocol. Lowering to Medium. Great stuff though.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1173125303\">Alex the Entreprenerd (warden) commented</a>:</strong></p>\n<blockquote>\n<p>The finding in essence is claiming that you can setup an empty <code>Basket</code> and sell it to external contracts, and those contracts would lose funds.</p>\n<p>If that were the case the vulnerability would be in the “sniping / buying” contracts and not in the Basket nor the Vault.</p>\n<p>The only thing the warden has shown is that they can create a Basket with a malicious token and through that they can call the Factory to create a Vault which after the tx will be empty.</p>\n<p>This is logically equivalent to selling an empty vault, or selling a vault of <code>BryptoPunks</code> (typo on purpose, it’s a scam token).</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1173126326\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@Alex the Entreprenerd -\nI agree in terms of normal usage. The key here is a 3rd party contract uses on-chain logic in order to authorize a purchase. If that were the case, while in the middle of the attack as described all checks that contract may perform would confirm assets were included and terms look good — it would not be able to determine that the basket was in the middle of a batch withdraw request. Let me know if I’m overlooking something.</p>\n<p>The basket itself does not need to hold a malicious token — the withdraw request takes an array of addresses, so the malicious contract only need to appear there.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1173140273\">Alex the Entreprenerd (warden) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>If that were the case, while in the middle of the attack as described all checks that contract may perform would confirm assets were included and terms look good — it would not be able to determine that the basket was in the middle of a batch withdraw request. Let me know if I’m overlooking something.</p>\n</blockquote>\n<p>The 3rd party contract would need to check that the Basket is properly set via <code>ownerOf(Basket) == Vault</code> (where Vault is an address contained in the list of <code>nibbledVaults</code> from factory).</p>\n</blockquote>\n<blockquote>\n<p>That would allow to determine if the contract is properly setup.</p>\n<blockquote>\n<p>The basket itself does not need to hold a malicious token,</p>\n</blockquote>\n<p>That is correct as you can setup any contract to accept the <code>safeTransferFrom</code> call.</p>\n<p>My statement is that an automated 3rd party contract can get rekt, but that’s not the contract under audit.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1173175820\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree that it’s the 3rd party contract that suffers a loss.</p>\n<p>An <code>ownerOf(Basket) == Vault &#x26;&#x26; ownerOf(NFT) == Basket</code> check is insufficient here because if it’s in the middle of this scenario then the owner checks will appear legit but by the end of the tx they won’t be. That’s the part that I’m still hung up on. Part of the Medium definition is “the function of the protocol or its availability could be impacted” — although not an explicit goal, is it not implicit that protocols can be built upon with other contracts. The concern here seems to limit that ability, one could not build a contract that decided to participate based on on-chain state alone w/ or w/o an allow list of NFTs — it would require a trusted actor to allow list specific vaults or to perform the action itself.</p>\n<p>This is certainly grey though. Very hypothetical, e.g. it’s not clear that a 3rd party contract would ever be interested in a capability like this. This is an interesting discussion! I’ll sleep on it, but please chime in if you have more to add - I appreciate the feedback.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-11-twavgettwav-will-return-a-wrong-result-when-twavobservationstwavblock_numbers---1timestamp--0\" style=\"position:relative;\"><a href=\"#m-11-twavgettwav-will-return-a-wrong-result-when-twavobservationstwavblock_numbers---1timestamp--0\" aria-label=\"m 11 twavgettwav will return a wrong result when twavobservationstwavblock_numbers   1timestamp  0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/112\">[M-11] Twav.<em>getTwav() will return a wrong result when twavObservations[TWAV</em>BLOCK_NUMBERS - 1].timestamp = 0.</a></h2>\n<p><em>Submitted by hansfriese</em></p>\n<p>The “if” condition of Twav._getTwav() is missing some edge cases.</p>\n<p>In this case, this function will return 0 which is different from the correct value and it will affect the main functions like NibblVault.buy() and NibblVault.sell().</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>I think this condition is to confirm at least 4 values were saved for twav calculation.</p>\n<p>Btw this timestamp would be zero even though there are more than 4 values properly as it’s modularized by 2**32.</p>\n<p>In this case, the if condition will be false and this function will return 0.</p>\n<h3 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Solidity Visual Developer of VSCode</p>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>I see “cumulativeValuation” is increasing all the time and recommend replacing “timestamp” with “cumulativeValuation”.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">if (twavObservations[TWAV_BLOCK_NUMBERS - 1].cumulativeValuation != 0) {</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/112#issuecomment-1172055034\">mundhrakeshav (Nibbl) confirmed and resolved</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/112#issuecomment-1173189926\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Interesting catch. This is related to <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/178\">#178</a> but presents a distinct issue.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-12-basket-nft-have-no-name-and-symbol\" style=\"position:relative;\"><a href=\"#m-12-basket-nft-have-no-name-and-symbol\" aria-label=\"m 12 basket nft have no name and symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/317\">[M-12] Basket NFT have no name and symbol</a></h2>\n<p><em>Submitted by Picodes, also found by cccz</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L13\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L13</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L6\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L6</a></p>\n<h3 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The <code>Basket</code> contract is intended to be used behind a proxy. But the <code>ERC721</code> implementation used is not upgradeable, and its constructor is called at deployment time on the implementation. So all proxies will have a void name and symbol, breaking all potential integrations and listings.</p>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><code>ERC721(\"NFT Basket\", \"NFTB\")</code> is called at deployment time, and sets private variable at the implementation level. Therefore when loading the code during <code>delegateCall</code>, these variables will not be initialized.</p>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The easiest mitigation would be to pass this variable as immutable so they are hardcoded in the implementation byte code.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/317\">mundhrakeshav (Nibbl) confirmed</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/317#issuecomment-1166657024\">Alex the Entreprenerd (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Finding is valid, impact is the name of the tokens.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/317#issuecomment-1172563153\">HardlyDifficult (judge) decreased severity to QA and commented</a>:</strong></p>\n<blockquote>\n<p>Confirmed this is an issue.</p>\n<p>Assets are not at risk, and the function of the protocol is not impacted. All baskets created will have an empty name/symbol but generally there is no requirement that these values are populated. It’s mostly for a better experience on frontends including etherscan. Downgrading and merging with the warden’s QA report #314.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/317#issuecomment-1174704129\">Picodes (warden) commented</a>:</strong></p>\n<blockquote>\n<p>@HardlyDifficult Indeed it does not break the protocol’s logic and funds are not at risk, but the name and the symbol of the NFTs are not the ones chosen by the sponsor, and as it’s the core of EIP721Metadata we could argue that the function of the protocol are impacted.\nAlso the experience on frontends (etherscan, opensea, etc) would have been significantly degraded. It could easily be considered a medium issue to me - especially considering the previous comments / reactions and the label “confirmed” added by the sponsor while it was high.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/317#issuecomment-1175198116\">HardlyDifficult (judge) increased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Thanks @Picodes! I can get onboard with that line of thinking. Given how significant these fields are for 3rd party integrators such as Etherscan and Opensea this can be considered to fall under that definition of Medium risk. I’ll upgrade this report and the dupes to Medium.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 82 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/139\">report highlighted below</a> by <strong>IllIllI</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/236\">BowTiedWardens</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/181\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/34\">0x1f8b</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/286\">reassor</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/182\">0x29A</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/41\">codexploder</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/252\">Chom</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/220\">hyh</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/130\">berndartmueller</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/209\">xiaoming90</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/167\">defsec</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/297\">ellahi</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/133\">0xNineDec</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/147\">cloudjunky</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/98\">catchup</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/74\">cryptphi</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/160\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/280\">c3phas</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/60\">0xNazgul</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/240\">0xf15ers</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/174\">unforgiven</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/120\">shenwilly</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/96\">StErMi</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/16\">oyc_109</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/53\">Lambda</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/187\">kenta</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/259\">sorrynotsorry</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/87\">JohnSmith</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/296\">UnusualTurtle</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/321\">Tadashi</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/142\">sseefried</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/293\">simon135</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/307\">pashov</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/149\">zzzitron</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/214\">saian</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/227\">robee</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/310\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/287\">MadWookie</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/245\">JMukesh</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/217\">asutorufos</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/314\">Picodes</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/284\">rfa</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/172\">TerrierLover</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/229\">dipp</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/157\">MiloTruck</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/255\">SmartSek</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/151\">naps62</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/237\">TomJ</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/25\">apostle0x01</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/58\">zuhaibmohd</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/117\">Wayne</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/152\">Waze</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/153\">kebabsec</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/264\">PwnedNoMore</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/83\">exd0tpy</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/283\">Alex the Entreprenerd</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/69\">Tomio</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/298\">Varun_Verma</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/234\">0xc0ffEE</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/113\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/26\">Treasure-Seeker</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/210\">delfin454000</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/91\">Limbooo</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/311\">JC</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/100\">0xkatana</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/285\">masterchief</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/79\">fatherOfBlocks</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/270\">slywaters</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/289\">peritoflores</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/322\">sashik_eth</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/123\">_Adam</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/239\">Funen</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/124\">Nyamcil</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/81\">sach1r0</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/299\">Randyyy</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/88\">0x52</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/171\">ElKu</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/215\">Nethermind</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/242\">RoiEvenHaim</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/196\">ych18</a>, and <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/225\">Noah3o6</a>.</em></p>\n<h2 id=\"low-risk-issues\" style=\"position:relative;\"><a href=\"#low-risk-issues\" aria-label=\"low risk issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Issues</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td align=\"left\">Buyouts that occur during the timestamp wrap will have valuation errors</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"left\"><code>ecrecover()</code> not checked for signer address of zero</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"left\">Return values of <code>transfer()</code>/<code>transferFrom()</code> not checked</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"left\">Input array lengths may differ</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"left\"><code>_safeMint()</code> should be used rather than <code>_mint()</code> wherever possible</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"left\">Missing checks for <code>address(0x0)</code> when assigning values to <code>address</code> state variables</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"left\">Vulnerable to cross-chain replay attacks due to static <code>DOMAIN_SEPARATOR</code>/<code>domainSeparator</code></td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"left\">Upgradeable contract is missing a <code>__gap[50]</code> storage variable to allow for new storage variables in later versions</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>9</td>\n<td align=\"left\">Incorrect comments</td>\n<td align=\"center\">3</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 22 instances over 9 issues</p>\n<h2 id=\"l-01-buyouts-that-occur-during-the-timestamp-wrap-will-have-valuation-errors\" style=\"position:relative;\"><a href=\"#l-01-buyouts-that-occur-during-the-timestamp-wrap-will-have-valuation-errors\" aria-label=\"l 01 buyouts that occur during the timestamp wrap will have valuation errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-01] Buyouts that occur during the timestamp wrap will have valuation errors</h2>\n<p>The <code>_blockTimestamp</code> has a modulo applied, so at some point, there will be a timestamp with a value close to 2^32, followed by a timestamp close to zero. The <code>_updateTWAV</code> function does an unchecked subtraction of the two timestamps, so this will lead to an underflow, making the valuation based on a long time period rather than the actual one. Until more TWAV entries are added, valuations will be wrong</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">303</span><span class=\"mtk1\">              </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">304</span><span class=\"mtk1\">              </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">lastBlockTimeStamp</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">305</span><span class=\"mtk1\">:                 </span><span class=\"mtk11\">_updateTWAV</span><span class=\"mtk1\">(</span><span class=\"mtk11\">getCurrentValuation</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">);   </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L303-L305\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L303-L305</a></p>\n<h2 id=\"l-02-ecrecover-not-checked-for-signer-address-of-zero\" style=\"position:relative;\"><a href=\"#l-02-ecrecover-not-checked-for-signer-address-of-zero\" aria-label=\"l 02 ecrecover not checked for signer address of zero permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-02] <code>ecrecover()</code> not checked for signer address of zero</h2>\n<p>The <code>ecrecover()</code> function returns an address of zero when the signature does not match. This can cause problems if address zero is ever the owner of assets, and someone uses the permit function on address zero. If that happens, any invalid signature will pass the checks, and the assets will be stealable. In this case, the asset of concern is the vault’s ERC20 token, and fortunately OpenZeppelin’s implementation does a good job of making sure that address zero is never able to have a positive balance. If this contract ever changes to another ERC20 implementation that is laxer in its checks in favor of saving gas, this code may become a problem.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">563</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">signer</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ecrecover</span><span class=\"mtk1\">(</span><span class=\"mtk11\">toTypedMessageHash</span><span class=\"mtk1\">(</span><span class=\"mtk12\">structHash</span><span class=\"mtk1\">), </span><span class=\"mtk12\">v</span><span class=\"mtk1\">, </span><span class=\"mtk12\">r</span><span class=\"mtk1\">, </span><span class=\"mtk12\">s</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L563\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L563</a></p>\n<h2 id=\"l-03-return-values-of-transfertransferfrom-not-checked\" style=\"position:relative;\"><a href=\"#l-03-return-values-of-transfertransferfrom-not-checked\" aria-label=\"l 03 return values of transfertransferfrom not checked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-03] Return values of <code>transfer()</code>/<code>transferFrom()</code> not checked</h2>\n<p>Not all <code>IERC20</code> implementations <code>revert()</code> when there’s a failure in <code>transfer()</code>/<code>transferFrom()</code>. The function signature has a <code>boolean</code> return value and they indicate errors that way instead. By not checking the return value, operations that should have marked as failed, may potentially go through without actually making a payment</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">87</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L87\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L87</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">94</span><span class=\"mtk1\">:               </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L94\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L94</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">517</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_asset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L517\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L517</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">4</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">526</span><span class=\"mtk1\">:              </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L526\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L526</a></p>\n<h2 id=\"l-04-input-array-lengths-may-differ\" style=\"position:relative;\"><a href=\"#l-04-input-array-lengths-may-differ\" aria-label=\"l 04 input array lengths may differ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-04] Input array lengths may differ</h2>\n<p>If the caller makes a copy-paste error, the lengths may be mismatchd and an operation believed to have been completed may not in fact have been completed</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">41</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L41\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L41</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">68</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenIds</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L68\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L68</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">545</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assetIDs</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">boughtOut</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L545\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L545</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">4</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">504</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assetAddresses</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assetIDs</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">boughtOut</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L504\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L504</a></p>\n<h2 id=\"l-05-_safemint-should-be-used-rather-than-_mint-wherever-possible\" style=\"position:relative;\"><a href=\"#l-05-_safemint-should-be-used-rather-than-_mint-wherever-possible\" aria-label=\"l 05 _safemint should be used rather than _mint wherever possible permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-05] <code>_safeMint()</code> should be used rather than <code>_mint()</code> wherever possible</h2>\n<p><code>_mint()</code> is <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/d4d8d2ed9798cc3383912a23b5e8d5cb602f7d4b/contracts/token/ERC721/ERC721.sol#L271\">discouraged</a> in favor of <code>_safeMint()</code> which ensures that the recipient is either an EOA or implements <code>IERC721Receiver</code>. Both <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/d4d8d2ed9798cc3383912a23b5e8d5cb602f7d4b/contracts/token/ERC721/ERC721.sol#L238-L250\">OpenZeppelin</a> and <a href=\"https://github.com/Rari-Capital/solmate/blob/4eaf6b68202e36f67cab379768ac6be304c8ebde/src/tokens/ERC721.sol#L180\">solmate</a> have versions of this function</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">24</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">_mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_curator</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L24\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L24</a></p>\n<h2 id=\"l-06-missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\" style=\"position:relative;\"><a href=\"#l-06-missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\" aria-label=\"l 06 missing checks for address0x0 when assigning values to address state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-06] Missing checks for <code>address(0x0)</code> when assigning values to <code>address</code> state variables</h2>\n<p><em>There are 6 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">191</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">assetAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_assetAddress</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">193</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">curator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_curator</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">487</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">curator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_newCurator</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L191\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L191</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">100</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">pendingBasketImplementation</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_newBasketImplementation</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">124</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">pendingFeeTo</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_newFeeAddress</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">159</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">pendingVaultImplementation</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_newVaultImplementation</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L100\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L100</a></p>\n<h2 id=\"l-07-vulnerable-to-cross-chain-replay-attacks-due-to-static-domain_separatordomainseparator\" style=\"position:relative;\"><a href=\"#l-07-vulnerable-to-cross-chain-replay-attacks-due-to-static-domain_separatordomainseparator\" aria-label=\"l 07 vulnerable to cross chain replay attacks due to static domain_separatordomainseparator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-07] Vulnerable to cross-chain replay attacks due to static <code>DOMAIN_SEPARATOR</code>/<code>domainSeparator</code></h2>\n<p>See <a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/2\">this</a> issue from a prior contest for details</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EIP712Base</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">15</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">INIT_EIP712</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">version</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">16</span><span class=\"mtk1\">           </span><span class=\"mtk12\">domainSeperator</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">17</span><span class=\"mtk1\">               </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">18</span><span class=\"mtk1\">                   </span><span class=\"mtk12\">EIP712_DOMAIN_TYPEHASH</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">19</span><span class=\"mtk1\">                   </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">name</span><span class=\"mtk1\">)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">20</span><span class=\"mtk1\">                   </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">version</span><span class=\"mtk1\">)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">21</span><span class=\"mtk1\">                   </span><span class=\"mtk11\">getChainID</span><span class=\"mtk1\">(),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">22</span><span class=\"mtk1\">                   </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">23</span><span class=\"mtk1\">               )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">24</span><span class=\"mtk1\">           );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">25</span><span class=\"mtk1\">:      }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L15-L25\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L15-L25</a></p>\n<h2 id=\"l-08-upgradeable-contract-is-missing-a-__gap50-storage-variable-to-allow-for-new-storage-variables-in-later-versions\" style=\"position:relative;\"><a href=\"#l-08-upgradeable-contract-is-missing-a-__gap50-storage-variable-to-allow-for-new-storage-variables-in-later-versions\" aria-label=\"l 08 upgradeable contract is missing a __gap50 storage variable to allow for new storage variables in later versions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-08] Upgradeable contract is missing a <code>__gap[50]</code> storage variable to allow for new storage variables in later versions</h2>\n<p>See <a href=\"https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\">this</a> link for a description of this storage variable. While some contracts may not currently be sub-classed, adding the variable now protects against forgetting to add it in the future.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">20</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">INibblVault</span><span class=\"mtk1\">, </span><span class=\"mtk12\">BancorFormula</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ERC20Upgradeable</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">, </span><span class=\"mtk12\">EIP712Base</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L20\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L20</a></p>\n<h2 id=\"l-09-incorrect-comments\" style=\"position:relative;\"><a href=\"#l-09-incorrect-comments\" aria-label=\"l 09 incorrect comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-09] Incorrect comments</h2>\n<p><em>There are 3 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit ERC1155, not ERC721</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">58</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @notice withdraw an ERC721 token from this contract into your wallet</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L58\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L58</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit or zero if there have been fewer than four blocks</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">34</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @return _twav TWAV of the last 4 blocks</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L34\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L34</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit of the last four updates, not necessarily of the last four blocks (i.e. may be blocked that were skipped)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">34</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @return _twav TWAV of the last 4 blocks</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L34\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L34</a></p>\n<h2 id=\"non-critical-issues\" style=\"position:relative;\"><a href=\"#non-critical-issues\" aria-label=\"non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Issues</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td align=\"left\">Consider addings checks for signature malleability</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"left\">Misleading variable name</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"left\">Inconsistent version of English being used</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"left\">Missing <code>initializer</code> modifier on constructor</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"left\">Contract implements interface without extending the interface</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"left\"><code>require()</code>/<code>revert()</code> statements should have descriptive reason strings</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"left\"><code>public</code> functions not called by the contract should be declared <code>external</code> instead</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"left\">Non-assembly method available</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>9</td>\n<td align=\"left\"><code>2**&#x3C;n> - 1</code> should be re-written as <code>type(uint&#x3C;n>).max</code></td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>10</td>\n<td align=\"left\"><code>constant</code>s should be defined rather than using magic numbers</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td>11</td>\n<td align=\"left\">Cast is more restrictive than the type of the variable being assigned</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>12</td>\n<td align=\"left\">Missing event and or timelock for critical parameter change</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>13</td>\n<td align=\"left\">Expressions for constant values such as a call to <code>keccak256()</code>, should use <code>immutable</code> rather than <code>constant</code></td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>14</td>\n<td align=\"left\">Inconsistent spacing in comments</td>\n<td align=\"center\">27</td>\n</tr>\n<tr>\n<td>15</td>\n<td align=\"left\">Lines are too long</td>\n<td align=\"center\">14</td>\n</tr>\n<tr>\n<td>16</td>\n<td align=\"left\">Non-library/interface files should use fixed compiler versions, not floating ones</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>17</td>\n<td align=\"left\">Typos</td>\n<td align=\"center\">14</td>\n</tr>\n<tr>\n<td>18</td>\n<td align=\"left\">File is missing NatSpec</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>19</td>\n<td align=\"left\">NatSpec is incomplete</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>20</td>\n<td align=\"left\">Event is missing <code>indexed</code> fields</td>\n<td align=\"center\">5</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 109 instances over 20 issues</p>\n<h2 id=\"n-01-consider-addings-checks-for-signature-malleability\" style=\"position:relative;\"><a href=\"#n-01-consider-addings-checks-for-signature-malleability\" aria-label=\"n 01 consider addings checks for signature malleability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-01] Consider addings checks for signature malleability</h2>\n<p>Use OpenZeppelin’s <code>ECDSA</code> contract rather than calling <code>ecrecover()</code> directly</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">563</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">signer</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ecrecover</span><span class=\"mtk1\">(</span><span class=\"mtk11\">toTypedMessageHash</span><span class=\"mtk1\">(</span><span class=\"mtk12\">structHash</span><span class=\"mtk1\">), </span><span class=\"mtk12\">v</span><span class=\"mtk1\">, </span><span class=\"mtk12\">r</span><span class=\"mtk1\">, </span><span class=\"mtk12\">s</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L563\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L563</a></p>\n<h2 id=\"n-02-misleading-variable-name\" style=\"position:relative;\"><a href=\"#n-02-misleading-variable-name\" aria-label=\"n 02 misleading variable name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-02] Misleading variable name</h2>\n<p><code>_twavObservationPrev</code> is not the previous observation - it’s more like the trailing, or next-to-expire TWAV observation`</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">39</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">TwavObservation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[(</span><span class=\"mtk12\">_index</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L39\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L39</a></p>\n<h2 id=\"n-03-inconsistent-version-of-english-being-used\" style=\"position:relative;\"><a href=\"#n-03-inconsistent-version-of-english-being-used\" aria-label=\"n 03 inconsistent version of english being used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-03] Inconsistent version of English being used</h2>\n<p>Some functions use American English, whereas others use British English. A single project should use only one of the two</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">173</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initialize</span><span class=\"mtk1\">(</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L173\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L173</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Interfaces</span><span class=\"mtk1\">/</span><span class=\"mtk12\">IBasket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">10</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initialise</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_curator</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Interfaces/IBasket.sol#L10\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Interfaces/IBasket.sol#L10</a></p>\n<h2 id=\"n-04-missing-initializer-modifier-on-constructor\" style=\"position:relative;\"><a href=\"#n-04-missing-initializer-modifier-on-constructor\" aria-label=\"n 04 missing initializer modifier on constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-04] Missing <code>initializer</code> modifier on constructor</h2>\n<p>OpenZeppelin <a href=\"https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/5\">recommends</a> that the <code>initializer</code> modifier be applied to constructors in order to avoid potential griefs, <a href=\"https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/4\">social engineering</a>, or exploits. Ensure that the modifier is applied to the implementation contract. If the default constructor is currently being used, it should be changed to be an explicit one with the modifier applied.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">13</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Basket</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IBasket</span><span class=\"mtk1\">, </span><span class=\"mtk11\">ERC721</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;NFT Basket&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NFTB&quot;</span><span class=\"mtk1\">), </span><span class=\"mtk12\">Initializable</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L13\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L13</a></p>\n<h2 id=\"n-05-contract-implements-interface-without-extending-the-interface\" style=\"position:relative;\"><a href=\"#n-05-contract-implements-interface-without-extending-the-interface\" aria-label=\"n 05 contract implements interface without extending the interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-05] Contract implements interface without extending the interface</h2>\n<p>Not extending the interface may lead to the wrong function signature being used, leading to unexpected behavior. If the interface is in fact being implemented, use the <code>override</code> keyword to indicate that fact</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit onERC721Received(), onERC1155Received()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">20</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">INibblVault</span><span class=\"mtk1\">, </span><span class=\"mtk12\">BancorFormula</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ERC20Upgradeable</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">, </span><span class=\"mtk12\">EIP712Base</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L20\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L20</a></p>\n<h2 id=\"n-06-requirerevert-statements-should-have-descriptive-reason-strings\" style=\"position:relative;\"><a href=\"#n-06-requirerevert-statements-should-have-descriptive-reason-strings\" aria-label=\"n 06 requirerevert statements should have descriptive reason strings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-06] <code>require()</code>/<code>revert()</code> statements should have descriptive reason strings</h2>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">114</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_success</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L114\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L114</a></p>\n<h2 id=\"n-07-public-functions-not-called-by-the-contract-should-be-declared-external-instead\" style=\"position:relative;\"><a href=\"#n-07-public-functions-not-called-by-the-contract-should-be-declared-external-instead\" aria-label=\"n 07 public functions not called by the contract should be declared external instead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-07] <code>public</code> functions not called by the contract should be declared <code>external</code> instead</h2>\n<p>Contracts <a href=\"https://docs.soliditylang.org/en/latest/contracts.html#function-overriding\">are allowed</a> to override their parents’ functions and change the visibility from <code>external</code> to <code>public</code>.</p>\n<p><em>There are 3 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">64</span><span class=\"mtk1\">        </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getVaultAddress</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">65            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_curator</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">66            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assetAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">67            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assetTokenID</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">68            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_initialSupply</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">69:           </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_initialTokenPrice</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L64-L69\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L64-L69</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">76</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getVaults</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ProxyVault</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> ) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L76\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L76</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">44</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getTwavObservations</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">TwavObservation</span><span class=\"mtk1\">[</span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L44\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L44</a></p>\n<h2 id=\"n-08-non-assembly-method-available\" style=\"position:relative;\"><a href=\"#n-08-non-assembly-method-available\" aria-label=\"n 08 non assembly method available permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-08] Non-assembly method available</h2>\n<p><code>assembly{ id := chainid() }</code> => <code>uint256 id = block.chainid</code>, <code>assembly { size := extcodesize() }</code> => <code>uint256 size = address().code.length</code></p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EIP712Base</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">29</span><span class=\"mtk1\">:               id := </span><span class=\"mtk11\">chainid</span><span class=\"mtk1\">()</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L29\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L29</a></p>\n<h2 id=\"n-09-2n---1-should-be-re-written-as-typeuintnmax\" style=\"position:relative;\"><a href=\"#n-09-2n---1-should-be-re-written-as-typeuintnmax\" aria-label=\"n 09 2n   1 should be re written as typeuintnmax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-09] <code>2**&#x3C;n> - 1</code> should be re-written as <code>type(uint&#x3C;n>).max</code></h2>\n<p>Earlier versions of solidity can use <code>uint&#x3C;n>(-1)</code> instead. Expressions not including the <code>- 1</code> can often be re-written to accomodate the change (e.g. by using a <code>></code> rather than a <code>>=</code>, which will also save some gas)</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">303</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L303\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L303</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">365</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L365\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L365</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">413</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">_updateTWAV</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_currentValuation</span><span class=\"mtk1\">, </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L413\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L413</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">4</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">445</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L445\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L445</a></p>\n<h2 id=\"n-10-constants-should-be-defined-rather-than-using-magic-numbers\" style=\"position:relative;\"><a href=\"#n-10-constants-should-be-defined-rather-than-using-magic-numbers\" aria-label=\"n 10 constants should be defined rather than using magic numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-10] <code>constant</code>s should be defined rather than using magic numbers</h2>\n<p>Even <a href=\"https://github.com/code-423n4/2022-05-opensea-seaport/blob/9d7ce4d08bf3c3010304a0476a785c70c0e90ae7/contracts/lib/TokenTransferrer.sol#L35-L39\">assembly</a> can benefit from using readable constants instead of hex/numeric literals</p>\n<p><em>There are 10 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 0xff</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">72</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_hash</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes1</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0xff</span><span class=\"mtk1\">), </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">newsalt</span><span class=\"mtk1\">, </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">code</span><span class=\"mtk1\">)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 0xff</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">91</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hash</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes1</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0xff</span><span class=\"mtk1\">), </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">newsalt</span><span class=\"mtk1\">, </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">code</span><span class=\"mtk1\">)));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L72\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L72</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"50\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 1e18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">183</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_secondaryReserveRatio</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">((</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">SCALE</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">_initialTokenSupply</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_initialTokenPrice</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 1e18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">195</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_primaryReserveBalance</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">primaryReserveRatio</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_initialTokenSupply</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_initialTokenPrice</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">SCALE</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 1e18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">226</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">secondaryReserveRatio</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">((</span><span class=\"mtk12\">secondaryReserveBalance</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">SCALE</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">initialTokenSupply</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">initialTokenPrice</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">//secondaryReserveRatio is updated on every trade </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 1e18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">253</span><span class=\"mtk1\">:              </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> ((</span><span class=\"mtk12\">secondaryReserveRatio</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">initialTokenSupply</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">initialTokenPrice</span><span class=\"mtk1\">) / (</span><span class=\"mtk7\">1e18</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">SCALE</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 32</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">303</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 32</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">365</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 32</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">413</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">_updateTWAV</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_currentValuation</span><span class=\"mtk1\">, </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit 32</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">445</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L183\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L183</a></p>\n<h2 id=\"n-11-cast-is-more-restrictive-than-the-type-of-the-variable-being-assigned\" style=\"position:relative;\"><a href=\"#n-11-cast-is-more-restrictive-than-the-type-of-the-variable-being-assigned\" aria-label=\"n 11 cast is more restrictive than the type of the variable being assigned permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-11] Cast is more restrictive than the type of the variable being assigned</h2>\n<p>If <code>address foo</code> is being used in an expression such as <code>IERC20 token = FooToken(foo)</code>, then the more specific cast to <code>FooToken</code> is a waste because the only thing the compiler will check for is that <code>FooToken</code> extends <code>IERC20</code> - it won’t check any of the function signatures. Therefore, it makes more sense to do <code>IERC20 token = IERC20(token)</code> or better yet <code>FooToken token = FooToken(foo)</code>. The former may allow the file in which it’s used to remove the import for <code>FooToken</code></p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"51\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">Proxy</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ProxyBasket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit payable vs address</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">20</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">implementation</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_implementation</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L20\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L20</a></p>\n<h2 id=\"n-12-missing-event-and-or-timelock-for-critical-parameter-change\" style=\"position:relative;\"><a href=\"#n-12-missing-event-and-or-timelock-for-critical-parameter-change\" aria-label=\"n 12 missing event and or timelock for critical parameter change permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-12] Missing event and or timelock for critical parameter change</h2>\n<p>Events help non-contract tools to track changes, and events prevent users from being surprised by changes</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"52\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">485</span><span class=\"mtk1\">       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateCurator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_newCurator</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">486</span><span class=\"mtk1\">           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">curator</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;NibblVault: Only Curator&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">487</span><span class=\"mtk1\">           </span><span class=\"mtk12\">curator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_newCurator</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">488</span><span class=\"mtk1\">:      }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L485-L488\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L485-L488</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"53\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">100</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">pendingBasketImplementation</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_newBasketImplementation</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L100\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L100</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"54\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">124</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">pendingFeeTo</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_newFeeAddress</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L124\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L124</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"55\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">4</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">159</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">pendingVaultImplementation</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_newVaultImplementation</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L159\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L159</a></p>\n<h2 id=\"n-13-expressions-for-constant-values-such-as-a-call-to-keccak256-should-use-immutable-rather-than-constant\" style=\"position:relative;\"><a href=\"#n-13-expressions-for-constant-values-such-as-a-call-to-keccak256-should-use-immutable-rather-than-constant\" aria-label=\"n 13 expressions for constant values such as a call to keccak256 should use immutable rather than constant permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-13] Expressions for constant values such as a call to <code>keccak256()</code>, should use <code>immutable</code> rather than <code>constant</code></h2>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"56\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">51</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">PERMIT_TYPEHASH</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L51\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L51</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"57\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AccessControlMechanism</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">12</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">FEE_ROLE</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;FEE_ROLE&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">13</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">PAUSER_ROLE</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;PAUSER_ROLE&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">14</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IMPLEMENTER_ROLE</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;IMPLEMENTER_ROLE&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L12\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L12</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"58\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EIP712Base</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">7</span><span class=\"mtk1\">         </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">EIP712_DOMAIN_TYPEHASH</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">8</span><span class=\"mtk1\">             </span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">9</span><span class=\"mtk1\">                 </span><span class=\"mtk8\">&quot;EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">10</span><span class=\"mtk1\">            )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">11</span><span class=\"mtk1\">:       );</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L7-L11\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L7-L11</a></p>\n<h2 id=\"n-14-inconsistent-spacing-in-comments\" style=\"position:relative;\"><a href=\"#n-14-inconsistent-spacing-in-comments\" aria-label=\"n 14 inconsistent spacing in comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-14] Inconsistent spacing in comments</h2>\n<p>Some lines use <code>// x</code> and some use <code>//x</code>. The instances below point out the usages that don’t follow the majority, within each file</p>\n<p><em>There are 27 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"59\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">28</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">primaryReserveRatio</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">200_000</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//20%</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">34</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">REJECTION_PREMIUM</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">150_000</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//15%</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">46</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">MIN_CURATOR_FEE</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">5_000</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//0.5%</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">122</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">///@notice current status of vault</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">125</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">///@notice reenterancy guard</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">200</span><span class=\"mtk1\">:          </span><span class=\"mtk3\">//curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">201</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">curatorFee</span><span class=\"mtk1\"> = (((</span><span class=\"mtk12\">_secondaryReserveRatio</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">MIN_SECONDARY_RESERVE_RATIO</span><span class=\"mtk1\">) * </span><span class=\"mtk12\">MIN_CURATOR_FEE</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">primaryReserveRatio</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">MIN_SECONDARY_RESERVE_RATIO</span><span class=\"mtk1\">)) + </span><span class=\"mtk12\">MIN_CURATOR_FEE</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">220</span><span class=\"mtk1\">:          </span><span class=\"mtk3\">//_maxSecondaryBalanceIncrease: is the max amount of secondary reserve balance that can be added to the vault</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">221</span><span class=\"mtk1\">:          </span><span class=\"mtk3\">//_maxSecondaryBalanceIncrease cannot be more than fictitiousPrimaryReserveBalance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">226</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">secondaryReserveRatio</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">((</span><span class=\"mtk12\">secondaryReserveBalance</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">SCALE</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">initialTokenSupply</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">initialTokenPrice</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">//secondaryReserveRatio is updated on every trade </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">228</span><span class=\"mtk1\">:              </span><span class=\"mtk11\">safeTransferETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_factory</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_feeAdmin</span><span class=\"mtk1\">); </span><span class=\"mtk3\">//Transfers admin fee to the factory contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">244</span><span class=\"mtk1\">:              </span><span class=\"mtk11\">safeTransferETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_factory</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_feeAdmin</span><span class=\"mtk1\">); </span><span class=\"mtk3\">//Transfers admin fee to the factory contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">301</span><span class=\"mtk1\">:          </span><span class=\"mtk3\">//Make update on the first tx of the block</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">318</span><span class=\"mtk1\">:                  </span><span class=\"mtk3\">//Gas Optimization</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">363</span><span class=\"mtk1\">:          </span><span class=\"mtk3\">//Make update on the first tx of the block</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">368</span><span class=\"mtk1\">:                  </span><span class=\"mtk11\">_rejectBuyout</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">//For the case when TWAV goes up when updated on sell</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">377</span><span class=\"mtk1\">:                  </span><span class=\"mtk3\">//Gas Optimization</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">389</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">safeTransferETH</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_saleReturn</span><span class=\"mtk1\">); </span><span class=\"mtk3\">//send _saleReturn to _to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">402</span><span class=\"mtk1\">:          </span><span class=\"mtk3\">//_buyoutBid: Bid User has made</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">448</span><span class=\"mtk1\">:              </span><span class=\"mtk11\">_rejectBuyout</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">//For the case when TWAV goes up when updated externally</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">500</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">///@notice withdraw multiple ERC721s</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L28\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L28</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"60\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">Proxy</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ProxyBasket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">28</span><span class=\"mtk1\">:       </span><span class=\"mtk3\">//solhint-disable-next-line no-complex-fallback</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">31</span><span class=\"mtk1\">:           </span><span class=\"mtk3\">//solhint-disable-next-line no-inline-assembly</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L28\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L28</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"61\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">Proxy</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ProxyVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">28</span><span class=\"mtk1\">:       </span><span class=\"mtk3\">//solhint-disable-next-line no-complex-fallback</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">31</span><span class=\"mtk1\">:           </span><span class=\"mtk3\">//solhint-disable-next-line no-inline-assembly</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyVault.sol#L28\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyVault.sol#L28</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"62\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">12</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">4</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//TWAV of last 4 Blocks </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">28</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">TwavObservation</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_prevCumulativeValuation</span><span class=\"mtk1\"> + (</span><span class=\"mtk12\">_valuation</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_timeElapsed</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">//add the previous observation to make it cumulative</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L12\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L12</a></p>\n<h2 id=\"n-15-lines-are-too-long\" style=\"position:relative;\"><a href=\"#n-15-lines-are-too-long\" aria-label=\"n 15 lines are too long permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-15] Lines are too long</h2>\n<p>Usually lines in source code are limited to <a href=\"https://softwareengineering.stackexchange.com/questions/148677/why-is-80-characters-the-standard-limit-for-code-width\">80</a> characters. Today’s screens are much larger so it’s reasonable to stretch this in some cases. Since the files will most likely reside in GitHub, and GitHub starts using a scroll bar in all cases when the length is over <a href=\"https://github.com/aizatto/character-length\">164</a> characters, the lines below should be split when they reach that length</p>\n<p><em>There are 14 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"63\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">109</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC1155BatchReceived</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L109\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L109</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"64\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">50</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">_proxyVault</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ProxyVault</span><span class=\"mtk1\">{</span><span class=\"mtk12\">salt</span><span class=\"mtk1\">: </span><span class=\"mtk10\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk10\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk10\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_curator</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_assetAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_assetTokenID</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_initialSupply</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_initialTokenPrice</span><span class=\"mtk1\">))}(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">))));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L50\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L50</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"65\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">19</span><span class=\"mtk1\">:   </span><span class=\"mtk3\">/// @dev The secondary curve is dynamic and has a variable reserveRatio, which depends on initial conditions given by the curator and the fee accumulated by the curve.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">79</span><span class=\"mtk1\">:       </span><span class=\"mtk3\">/// @dev This variable also defines the amount of reserve token that should be in the primary curve if the primary curve started from 0 and went till initialTokenSupply </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">201</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">curatorFee</span><span class=\"mtk1\"> = (((</span><span class=\"mtk12\">_secondaryReserveRatio</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">MIN_SECONDARY_RESERVE_RATIO</span><span class=\"mtk1\">) * </span><span class=\"mtk12\">MIN_CURATOR_FEE</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">primaryReserveRatio</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">MIN_SECONDARY_RESERVE_RATIO</span><span class=\"mtk1\">)) + </span><span class=\"mtk12\">MIN_CURATOR_FEE</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">224</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">_feeCurve</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_maxSecondaryBalanceIncrease</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">_feeCurve</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">_feeCurve</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">_maxSecondaryBalanceIncrease</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// the curve fee is capped so that secondaryReserveBalance &lt;= fictitiousPrimaryReserveBalance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">226</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">secondaryReserveRatio</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">((</span><span class=\"mtk12\">secondaryReserveBalance</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">SCALE</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">initialTokenSupply</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">initialTokenPrice</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">//secondaryReserveRatio is updated on every trade </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">263</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @dev Valuation = If current supply is on seconday curve we use secondaryReserveBalance and secondaryReserveRatio to calculate valuation else we use primary reserve ratio and balance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">266</span><span class=\"mtk1\">:              </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() &lt; </span><span class=\"mtk12\">initialTokenSupply</span><span class=\"mtk1\"> ? (</span><span class=\"mtk12\">secondaryReserveBalance</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">SCALE</span><span class=\"mtk1\"> /</span><span class=\"mtk12\">secondaryReserveRatio</span><span class=\"mtk1\">) : ((</span><span class=\"mtk12\">primaryReserveBalance</span><span class=\"mtk1\">) * </span><span class=\"mtk12\">SCALE</span><span class=\"mtk1\">  / </span><span class=\"mtk12\">primaryReserveRatio</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">297</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @dev if current totalSupply &lt; initialTokenSupply AND _amount to buy tokens for is greater than (maxSecondaryCurveBalance - currentSecondaryCurveBalance) then buy happens on secondary curve and primary curve both</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">358</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @dev if totalSupply &gt; initialTokenSupply AND _amount to sell is greater than (_amtIn &gt; totalSupply - initialTokenSupply) then sell happens on primary curve and secondary curve both</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">395</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @dev bidder needs to send funds equal to current valuation - ((primaryReserveBalance - fictitiousPrimaryReserveBalance) + secondaryReserveBalance) to initiate buyout</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L19\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L19</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"66\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">28</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">TwavObservation</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_prevCumulativeValuation</span><span class=\"mtk1\"> + (</span><span class=\"mtk12\">_valuation</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_timeElapsed</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">//add the previous observation to make it cumulative</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">40</span><span class=\"mtk1\">:               </span><span class=\"mtk12\">_twav</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">cumulativeValuation</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\">.</span><span class=\"mtk12\">cumulativeValuation</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L28\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L28</a></p>\n<h2 id=\"n-16-non-libraryinterface-files-should-use-fixed-compiler-versions-not-floating-ones\" style=\"position:relative;\"><a href=\"#n-16-non-libraryinterface-files-should-use-fixed-compiler-versions-not-floating-ones\" aria-label=\"n 16 non libraryinterface files should use fixed compiler versions not floating ones permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-16] Non-library/interface files should use fixed compiler versions, not floating ones</h2>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"67\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AccessControlMechanism</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">4</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L4\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L4</a></p>\n<h2 id=\"n-17-typos\" style=\"position:relative;\"><a href=\"#n-17-typos\" aria-label=\"n 17 typos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-17] Typos</h2>\n<p><em>There are 14 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"68\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit reenterancy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">125</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">///@notice reenterancy guard</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit pausablity</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">152</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @dev pausablity implemented in factory</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit primaryReseveRatio</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">200</span><span class=\"mtk1\">:          </span><span class=\"mtk3\">//curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit primaryReseveRatio</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">201</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">curatorFee</span><span class=\"mtk1\"> = (((</span><span class=\"mtk12\">_secondaryReserveRatio</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">MIN_SECONDARY_RESERVE_RATIO</span><span class=\"mtk1\">) * </span><span class=\"mtk12\">MIN_CURATOR_FEE</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">primaryReserveRatio</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">MIN_SECONDARY_RESERVE_RATIO</span><span class=\"mtk1\">)) + </span><span class=\"mtk12\">MIN_CURATOR_FEE</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit continous</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">250</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @dev The max continous tokens on SecondaryCurve is equal to initialTokenSupply</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit seconday</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">263</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @dev Valuation = If current supply is on seconday curve we use secondaryReserveBalance and secondaryReserveRatio to calculate valuation else we use primary reserve ratio and balance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit continous</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">270</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @param _amount amount of reserve tokens to buy continous tokens</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit continous</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">282</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @param _amount amount of reserve tokens to buy continous tokens</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit Continous</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">359</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @param _amtIn Continous Tokens to be sold</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit recieve</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">361</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @param _to Address to recieve the reserve token to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit airdops</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">512</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @notice ERC20s can be accumulated by the underlying ERC721 in the vault as royalty or airdops </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit airdops</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">531</span><span class=\"mtk1\">:      </span><span class=\"mtk3\">/// @notice ERC1155s can be accumulated by the underlying ERC721 in the vault as royalty or airdops </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L125\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L125</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"69\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">Proxy</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ProxyBasket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit internall</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">26</span><span class=\"mtk1\">:        * </span><span class=\"mtk12\">This</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">does</span><span class=\"mtk1\"> </span><span class=\"mtk11\">not</span><span class=\"mtk1\"> </span><span class=\"mtk11\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">to</span><span class=\"mtk1\"> </span><span class=\"mtk11\">its</span><span class=\"mtk1\"> </span><span class=\"mtk11\">internall</span><span class=\"mtk1\"> </span><span class=\"mtk11\">call</span><span class=\"mtk1\"> </span><span class=\"mtk11\">site</span><span class=\"mtk1\">, </span><span class=\"mtk11\">it</span><span class=\"mtk1\"> </span><span class=\"mtk11\">will</span><span class=\"mtk1\"> </span><span class=\"mtk11\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">directly</span><span class=\"mtk1\"> </span><span class=\"mtk11\">to</span><span class=\"mtk1\"> </span><span class=\"mtk11\">the</span><span class=\"mtk1\"> </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">caller</span><span class=\"mtk1\">.</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L26\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L26</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"70\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">Proxy</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ProxyVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit internall</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">26</span><span class=\"mtk1\">:        * </span><span class=\"mtk12\">This</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">does</span><span class=\"mtk1\"> </span><span class=\"mtk11\">not</span><span class=\"mtk1\"> </span><span class=\"mtk11\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">to</span><span class=\"mtk1\"> </span><span class=\"mtk11\">its</span><span class=\"mtk1\"> </span><span class=\"mtk11\">internall</span><span class=\"mtk1\"> </span><span class=\"mtk11\">call</span><span class=\"mtk1\"> </span><span class=\"mtk11\">site</span><span class=\"mtk1\">, </span><span class=\"mtk11\">it</span><span class=\"mtk1\"> </span><span class=\"mtk11\">will</span><span class=\"mtk1\"> </span><span class=\"mtk11\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">directly</span><span class=\"mtk1\"> </span><span class=\"mtk11\">to</span><span class=\"mtk1\"> </span><span class=\"mtk11\">the</span><span class=\"mtk1\"> </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">caller</span><span class=\"mtk1\">.</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyVault.sol#L26\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyVault.sol#L26</a></p>\n<h2 id=\"n-18-file-is-missing-natspec\" style=\"position:relative;\"><a href=\"#n-18-file-is-missing-natspec\" aria-label=\"n 18 file is missing natspec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-18] File is missing NatSpec</h2>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"71\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EIP712Base</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sol</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">various</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lines</span><span class=\"mtk1\">)   #</span><span class=\"mtk7\">1</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol</a></p>\n<h2 id=\"n-19-natspec-is-incomplete\" style=\"position:relative;\"><a href=\"#n-19-natspec-is-incomplete\" aria-label=\"n 19 natspec is incomplete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-19] NatSpec is incomplete</h2>\n<p><em>There are 12 instances of this issue:</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/139\">See original submission</a> for details.</p>\n<h2 id=\"n-20-event-is-missing-indexed-fields\" style=\"position:relative;\"><a href=\"#n-20-event-is-missing-indexed-fields\" aria-label=\"n 20 event is missing indexed fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-20] Event is missing <code>indexed</code> fields</h2>\n<p>Each <code>event</code> should use three <code>indexed</code> fields if there are three or more fields</p>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"72\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">15</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">DepositERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">16</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">WithdrawERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">17</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">DepositERC1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">18</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">DepositERC1155Bulk</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">19</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">WithdrawERC1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">indexed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L15\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L15</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/139#issuecomment-1173978577\">HardlyDifficult (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Great feedback &#x26; it all appears valid.</p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 63 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/140\">report highlighted below</a> by <strong>IllIllI</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/180\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/125\">BowTiedWardens</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/122\">_Adam</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/221\">m_Rassska</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/101\">0xkatana</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/33\">0xKitsune</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/162\">defsec</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/158\">MiloTruck</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/277\">c3phas</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/309\">minhquanym</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/114\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/99\">catchup</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/228\">robee</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/265\">UnusualTurtle</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/59\">0xNazgul</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/294\">reassor</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/204\">TomJ</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/320\">sashik_eth</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/316\">pashov</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/205\">delfin454000</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/70\">Tomio</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/279\">slywaters</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/170\">ElKu</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/312\">JC</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/212\">saian</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/32\">0x1f8b</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/224\">Noah3o6</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/80\">sach1r0</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/82\">8olidity</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/155\">ajtra</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/295\">ellahi</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/15\">oyc_109</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/164\">TerrierLover</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/288\">simon135</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/281\">Chom</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/109\">0x29A</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/141\">Waze</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/78\">fatherOfBlocks</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/282\">rfa</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/241\">0xf15ers</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/183\">ACai</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/156\">cRat1st0s</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/315\">Picodes</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/213\">Chandr</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/202\">ych18</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/93\">0v3rf10w</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/230\">Randyyy</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/51\">zuhaibmohd</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/95\">StErMi</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/119\">ynnad</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/75\">cryptphi</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/238\">Funen</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/52\">Lambda</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/116\">Nyamcil</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/186\">kenta</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/90\">Limbooo</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/258\">IgnacioB</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/256\">SmartSek</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/40\">codexploder</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/84\">exd0tpy</a>, <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/154\">kebabsec</a>, and <a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/290\">Fitraldys</a>.</em></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td align=\"left\">Setting <code>DEFAULT_ADMIN_ROLE</code> as the role admin is redundant</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"left\">Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</td>\n<td align=\"center\">23</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"left\">Using <code>storage</code> instead of <code>memory</code> for structs/arrays saves gas</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"left\">State variables should be cached in stack variables rather than re-reading them from storage</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"left\"><code>&#x3C;x> += &#x3C;y></code> costs more gas than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> for state variables</td>\n<td align=\"center\">7</td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"left\"><code>internal</code> functions only called once can be inlined to save gas</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"left\">Add <code>unchecked {}</code> for subtractions where the operands cannot underflow because of a previous <code>require()</code> or <code>if</code>-statement</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"left\"><code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td>9</td>\n<td align=\"left\"><code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td>10</td>\n<td align=\"left\"><code>require()</code>/<code>revert()</code> strings longer than 32 bytes cost extra gas</td>\n<td align=\"center\">7</td>\n</tr>\n<tr>\n<td>11</td>\n<td align=\"left\">Using <code>bool</code>s for storage incurs overhead</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>12</td>\n<td align=\"left\">Use a more recent version of solidity</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>13</td>\n<td align=\"left\"><code>>=</code> costs less gas than <code>></code></td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>14</td>\n<td align=\"left\">It costs more gas to initialize non-<code>constant</code>/non-<code>immutable</code> variables to zero than to let the default of zero be applied</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td>15</td>\n<td align=\"left\"><code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td>16</td>\n<td align=\"left\">Splitting <code>require()</code> statements that use <code>&#x26;&#x26;</code> saves gas</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td>17</td>\n<td align=\"left\">Usage of <code>uints</code>/<code>ints</code> smaller than 32 bytes (256 bits) incurs overhead</td>\n<td align=\"center\">14</td>\n</tr>\n<tr>\n<td>18</td>\n<td align=\"left\">Using <code>private</code> rather than <code>public</code> for constants, saves gas</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>19</td>\n<td align=\"left\">Don’t use <code>SafeMath</code> once the solidity version is 0.8.0 or greater</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>20</td>\n<td align=\"left\">Duplicated <code>require()</code>/<code>revert()</code> checks should be refactored to a modifier or function</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>21</td>\n<td align=\"left\">Empty blocks should be removed or emit something</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>22</td>\n<td align=\"left\">Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</td>\n<td align=\"center\">41</td>\n</tr>\n<tr>\n<td>23</td>\n<td align=\"left\">Functions guaranteed to revert when called by normal users can be marked <code>payable</code></td>\n<td align=\"center\">8</td>\n</tr>\n</tbody>\n</table>\n<p>Total: 153 instances over 23 issues</p>\n<h2 id=\"1-setting-default_admin_role-as-the-role-admin-is-redundant\" style=\"position:relative;\"><a href=\"#1-setting-default_admin_role-as-the-role-admin-is-redundant\" aria-label=\"1 setting default_admin_role as the role admin is redundant permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[1] Setting <code>DEFAULT_ADMIN_ROLE</code> as the role admin is redundant</h2>\n<p><code>DEFAULT_ADMIN_ROLE</code> is <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/83277ff916ac4f58fec072b8f28a252c1245c2f1/contracts/access/AccessControl.sol#L40-L48\">automatically</a> designated as the role admin of any new role, so setting it again is a waste of gas since it involves fetching role-related state variables, updating state variables, and emitting an event</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"73\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AccessControlMechanism</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">22</span><span class=\"mtk1\">           </span><span class=\"mtk11\">_setRoleAdmin</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_defaultAdminRole</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_defaultAdminRole</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">23</span><span class=\"mtk1\">           </span><span class=\"mtk11\">_setRoleAdmin</span><span class=\"mtk1\">(</span><span class=\"mtk12\">FEE_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_defaultAdminRole</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">24</span><span class=\"mtk1\">           </span><span class=\"mtk11\">_setRoleAdmin</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PAUSER_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_defaultAdminRole</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">25</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">_setRoleAdmin</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IMPLEMENTER_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_defaultAdminRole</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L22-L25\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L22-L25</a></p>\n<h2 id=\"2-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" style=\"position:relative;\"><a href=\"#2-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\" aria-label=\"2 using calldata instead of memory for read only arguments in external functions saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[2] Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</h2>\n<p>When a function with a <code>memory</code> array is called externally, the <code>abi.decode()</code> step has to use a for-loop to copy each index of the <code>calldata</code> to the <code>memory</code> index. <strong>Each iteration of this for-loop costs at least 60 gas</strong> (i.e. <code>60 * &#x3C;mem_array>.length</code>). Using <code>calldata</code> directly, obliviates the need for such a loop in the contract code and runtime execution.</p>\n<p>If the array is passed to an <code>internal</code> function which passes the array to another internal function where the array is modified and therefore <code>memory</code> is used in the <code>external</code> call, it’s still more gass-efficient to use <code>calldata</code> when the <code>external</code> function uses modifiers, since the modifiers may prevent the internal functions from being called. Structs have the same overhead as an array of length one</p>\n<p><em>There are 23 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"74\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">41</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">41</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">68</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenIds</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">68</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenIds</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">91</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">99</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC721Received</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">104</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC1155Received</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">109</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC1155BatchReceived</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">109</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC1155BatchReceived</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">109</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC1155BatchReceived</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L41\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L41</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"75\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">41</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">42</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_symbol</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L41\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L41</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"76\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">174</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenName</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">175</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenSymbol</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">504</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assetAddresses</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assetIDs</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">boughtOut</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">504</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assetAddresses</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assetIDs</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">boughtOut</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">523</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">boughtOut</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">545</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assetIDs</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">boughtOut</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">545</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawMultipleERC1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_assetIDs</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">boughtOut</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">577</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC1155Received</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">581</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC1155BatchReceived</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">581</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC1155BatchReceived</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">581</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onERC1155BatchReceived</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L174\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L174</a></p>\n<h2 id=\"3-using-storage-instead-of-memory-for-structsarrays-saves-gas\" style=\"position:relative;\"><a href=\"#3-using-storage-instead-of-memory-for-structsarrays-saves-gas\" aria-label=\"3 using storage instead of memory for structsarrays saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[3] Using <code>storage</code> instead of <code>memory</code> for structs/arrays saves gas</h2>\n<p>When fetching data from a storage location, assigning the data to a <code>memory</code> variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (<strong>2100 gas</strong>) for <em>each</em> field of the struct/array. If the fields are read from the new memory variable, they incur an additional <code>MLOAD</code> rather than a cheap stack read. Instead of declearing the variable with the <code>memory</code> keyword, declaring the variable with the <code>storage</code> keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a <code>memory</code> variable, is if the full struct/array is being returned by the function, is being passed to a function that requires <code>memory</code>, or if the array/struct is being read from another <code>memory</code> array/struct</p>\n<p><em>There are 2 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"77\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">38</span><span class=\"mtk1\">:               </span><span class=\"mtk12\">TwavObservation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twavObservationCurrent</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[(</span><span class=\"mtk12\">_index</span><span class=\"mtk1\">)];</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L38\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L38</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"78\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">39</span><span class=\"mtk1\">:               </span><span class=\"mtk12\">TwavObservation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_twavObservationPrev</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">twavObservations</span><span class=\"mtk1\">[(</span><span class=\"mtk12\">_index</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L39\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L39</a></p>\n<h2 id=\"4-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\" style=\"position:relative;\"><a href=\"#4-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\" aria-label=\"4 state variables should be cached in stack variables rather than re reading them from storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[4] State variables should be cached in stack variables rather than re-reading them from storage</h2>\n<p>The instances below point to the second+ access of a state variable within a function. Caching of a state variable replace each Gwarmaccess (<strong>100 gas</strong>) with a much cheaper stack read. Other less obvious fixes/optimizations include having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"79\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit secondaryReserveBalance on line 225</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">226</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">secondaryReserveRatio</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">((</span><span class=\"mtk12\">secondaryReserveBalance</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">SCALE</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">initialTokenSupply</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">initialTokenPrice</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">//secondaryReserveRatio is updated on every trade </span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L226\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L226</a></p>\n<h2 id=\"5-x--y-costs-more-gas-than-x--x--y-for-state-variables\" style=\"position:relative;\"><a href=\"#5-x--y-costs-more-gas-than-x--x--y-for-state-variables\" aria-label=\"5 x  y costs more gas than x  x  y for state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[5] <code>&#x3C;x> += &#x3C;y></code> costs more gas than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> for state variables</h2>\n<p><em>There are 7 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"80\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">219</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">feeAccruedCurator</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">_feeCurator</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">225</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">secondaryReserveBalance</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">_feeCurve</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">242</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">feeAccruedCurator</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">_feeCurator</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">320</span><span class=\"mtk1\">:                  </span><span class=\"mtk12\">secondaryReserveBalance</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">_lowerCurveDiff</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">380</span><span class=\"mtk1\">:                  </span><span class=\"mtk12\">primaryReserveBalance</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">_saleReturn</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">429</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">totalUnsettledBids</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">_buyoutValuationDeposit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">457</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">totalUnsettledBids</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L219\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L219</a></p>\n<h2 id=\"6-internal-functions-only-called-once-can-be-inlined-to-save-gas\" style=\"position:relative;\"><a href=\"#6-internal-functions-only-called-once-can-be-inlined-to-save-gas\" aria-label=\"6 internal functions only called once can be inlined to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[6] <code>internal</code> functions only called once can be inlined to save gas</h2>\n<p>Not inlining costs <strong>20 to 40 gas</strong> because of two extra <code>JUMP</code> instructions and additional stack operations needed for function calls.</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"81\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EIP712Base</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">27</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getChainID</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L27\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L27</a></p>\n<h2 id=\"7-add-unchecked--for-subtractions-where-the-operands-cannot-underflow-because-of-a-previous-require-or-if-statement\" style=\"position:relative;\"><a href=\"#7-add-unchecked--for-subtractions-where-the-operands-cannot-underflow-because-of-a-previous-require-or-if-statement\" aria-label=\"7 add unchecked  for subtractions where the operands cannot underflow because of a previous require or if statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[7] Add <code>unchecked {}</code> for subtractions where the operands cannot underflow because of a previous <code>require()</code> or <code>if</code>-statement</h2>\n<p><code>require(a &#x3C;= b); x = b - a</code> => <code>require(a &#x3C;= b); unchecked { x = b - a }</code></p>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"82\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit require() on line 185</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">201</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">curatorFee</span><span class=\"mtk1\"> = (((</span><span class=\"mtk12\">_secondaryReserveRatio</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">MIN_SECONDARY_RESERVE_RATIO</span><span class=\"mtk1\">) * </span><span class=\"mtk12\">MIN_CURATOR_FEE</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">primaryReserveRatio</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">MIN_SECONDARY_RESERVE_RATIO</span><span class=\"mtk1\">)) + </span><span class=\"mtk12\">MIN_CURATOR_FEE</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit require() on line 404</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">406</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">buyoutValuationDeposit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> - (</span><span class=\"mtk12\">_buyoutBid</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_currentValuation</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit require() on line 404</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">415</span><span class=\"mtk1\">:              </span><span class=\"mtk11\">safeTransferETH</span><span class=\"mtk1\">(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">), (</span><span class=\"mtk12\">_buyoutBid</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_currentValuation</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit if-condition on line 373</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">378</span><span class=\"mtk1\">:                  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokensPrimaryCurve</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_totalSupply</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_initialTokenSupply</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/// @audit if-condition on line 414</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">415</span><span class=\"mtk1\">:              </span><span class=\"mtk11\">safeTransferETH</span><span class=\"mtk1\">(</span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">), (</span><span class=\"mtk12\">_buyoutBid</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_currentValuation</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L201\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L201</a></p>\n<h2 id=\"8-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\" style=\"position:relative;\"><a href=\"#8-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\" aria-label=\"8 arraylength should not be looked up in every loop of a for loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[8] <code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</h2>\n<p>The overheads outlined below are <em>PER LOOP</em>, excluding the first loop</p>\n<ul>\n<li>storage arrays incur a Gwarmaccess (<strong>100 gas</strong>)</li>\n<li>memory arrays use <code>MLOAD</code> (<strong>3 gas</strong>)</li>\n<li>calldata arrays use <code>CALLDATALOAD</code> (<strong>3 gas</strong>)</li>\n</ul>\n<p>Caching the length changes each of these to a <code>DUP&#x3C;N></code> (<strong>3 gas</strong>), and gets rid of the extra <code>DUP&#x3C;N></code> needed to store the stack offset</p>\n<p><em>There are 6 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"83\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">43</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">70</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">93</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"84\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">506</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assetAddresses</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">525</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">547</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506</a></p>\n<h2 id=\"9-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" style=\"position:relative;\"><a href=\"#9-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\" aria-label=\"9 ii should be uncheckediuncheckedi when it is not possible for them to overflow as is the case when used in for  and while loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[9] <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</h2>\n<p>The <code>unchecked</code> keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves <strong>30-40 gas <a href=\"https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#the-increment-in-for-loop-post-condition-can-be-made-unchecked\">per loop</a></strong></p>\n<p><em>There are 6 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"85\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">43</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">70</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">93</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"86\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">506</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assetAddresses</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">525</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">547</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506</a></p>\n<h2 id=\"10-requirerevert-strings-longer-than-32-bytes-cost-extra-gas\" style=\"position:relative;\"><a href=\"#10-requirerevert-strings-longer-than-32-bytes-cost-extra-gas\" aria-label=\"10 requirerevert strings longer than 32 bytes cost extra gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[10] <code>require()</code>/<code>revert()</code> strings longer than 32 bytes cost extra gas</h2>\n<p>Each extra memory word of bytes past the original 32 <a href=\"https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#consider-having-short-revert-strings\">incurs an MSTORE</a> which costs <strong>3 gas</strong></p>\n<p><em>There are 7 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"87\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">48</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">MIN_INITIAL_RESERVE_BALANCE</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVaultFactory: Initial reserve balance too low&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">49</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_assetAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_assetTokenID</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVaultFactory: Invalid sender&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">107</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">basketUpdateTime</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">basketUpdateTime</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVaultFactory: UPDATE_TIME has not passed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">131</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feeToUpdateTime</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">feeToUpdateTime</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVaultFactory: UPDATE_TIME has not passed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">141</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_newFee</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">MAX_ADMIN_FEE</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVaultFactory: Fee value greater than MAX_ADMIN_FEE&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">149</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feeAdminUpdateTime</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">feeAdminUpdateTime</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVaultFactory: UPDATE_TIME has not passed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">166</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultUpdateTime</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">vaultUpdateTime</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVaultFactory: UPDATE_TIME has not passed&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L48\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L48</a></p>\n<h2 id=\"11-using-bools-for-storage-incurs-overhead\" style=\"position:relative;\"><a href=\"#11-using-bools-for-storage-incurs-overhead\" aria-label=\"11 using bools for storage incurs overhead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[11] Using <code>bool</code>s for storage incurs overhead</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"88\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Booleans are more expensive than uint256 or any type that takes up a full</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// word because each write operation emits an extra SLOAD to first read the</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// slot&#39;s contents, replace the bits taken up by the boolean, and then write</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// back. This is the compiler&#39;s defense against contract upgrades and</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// pointer aliasing, and it cannot be disabled.</span></span></span></code></pre>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27</a>\nUse <code>uint256(1)</code> and <code>uint256(2)</code> for true/false to avoid a Gwarmaccess (<strong><a href=\"https://gist.github.com/IllIllI000/1b70014db712f8572a72378321250058\">100 gas</a></strong>) for the extra SLOAD, and to avoid Gsset (<strong>20000 gas</strong>) when changing from ‘false’ to ‘true’, after having been ‘true’ in the past</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"89\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AccessControlMechanism</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">16</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pendingRoles</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L16\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L16</a></p>\n<h2 id=\"12-use-a-more-recent-version-of-solidity\" style=\"position:relative;\"><a href=\"#12-use-a-more-recent-version-of-solidity\" aria-label=\"12 use a more recent version of solidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[12] Use a more recent version of solidity</h2>\n<p>Use a solidity version of at least 0.8.2 to get simple compiler automatic inlining\nUse a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads\nUse a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than <code>revert()/require()</code> strings\nUse a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"90\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AccessControlMechanism</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">4</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L4\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L4</a></p>\n<h2 id=\"13--costs-less-gas-than-\" style=\"position:relative;\"><a href=\"#13--costs-less-gas-than-\" aria-label=\"13  costs less gas than  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[13] <code>>=</code> costs less gas than <code>></code></h2>\n<p>The compiler uses opcodes <code>GT</code> and <code>ISZERO</code> for solidity code that uses <code>></code>, but only requires <code>LT</code> for <code>>=</code>, <a href=\"https://gist.github.com/IllIllI000/3dc79d25acccfa16dee4e83ffdc6ffde\">which saves <strong>3 gas</strong></a></p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"91\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">224</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">_feeCurve</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_maxSecondaryBalanceIncrease</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">_feeCurve</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">_feeCurve</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">_maxSecondaryBalanceIncrease</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// the curve fee is capped so that secondaryReserveBalance &lt;= fictitiousPrimaryReserveBalance</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L224\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L224</a></p>\n<h2 id=\"14-it-costs-more-gas-to-initialize-non-constantnon-immutable-variables-to-zero-than-to-let-the-default-of-zero-be-applied\" style=\"position:relative;\"><a href=\"#14-it-costs-more-gas-to-initialize-non-constantnon-immutable-variables-to-zero-than-to-let-the-default-of-zero-be-applied\" aria-label=\"14 it costs more gas to initialize non constantnon immutable variables to zero than to let the default of zero be applied permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[14] It costs more gas to initialize non-<code>constant</code>/non-<code>immutable</code> variables to zero than to let the default of zero be applied</h2>\n<p>Not overwriting the default for <a href=\"https://gist.github.com/IllIllI000/e075d189c1b23dce256cd166e28f3397\">stack variables</a> saves <strong>8 gas</strong>. Storage and memory variables have larger savings</p>\n<p><em>There are 6 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"92\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">43</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">70</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">93</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"93\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">506</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assetAddresses</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">525</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">547</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506</a></p>\n<h2 id=\"15-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" style=\"position:relative;\"><a href=\"#15-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\" aria-label=\"15 i costs less gas than i especially when its used in for loops   ii   too permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[15] <code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</h2>\n<p>Saves <strong>6 gas per loop</strong></p>\n<p><em>There are 6 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"94\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">43</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">70</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">93</span><span class=\"mtk1\">:           </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"95\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">506</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assetAddresses</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">525</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">547</span><span class=\"mtk1\">:          </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_assets</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506</a></p>\n<h2 id=\"16-splitting-require-statements-that-use--saves-gas\" style=\"position:relative;\"><a href=\"#16-splitting-require-statements-that-use--saves-gas\" aria-label=\"16 splitting require statements that use  saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[16] Splitting <code>require()</code> statements that use <code>&#x26;&#x26;</code> saves gas</h2>\n<p>See <a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/128\">this issue</a> which describes the fact that there is a larger deployment gas cost, but with enough runtime calls, the change ends up being cheaper</p>\n<p><em>There are 4 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"96\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">107</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">basketUpdateTime</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">basketUpdateTime</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVaultFactory: UPDATE_TIME has not passed&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L107\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L107</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"97\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">131</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feeToUpdateTime</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">feeToUpdateTime</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVaultFactory: UPDATE_TIME has not passed&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L131\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L131</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"98\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">149</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">feeAdminUpdateTime</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">feeAdminUpdateTime</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVaultFactory: UPDATE_TIME has not passed&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L149\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L149</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"99\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">4</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">166</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultUpdateTime</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">vaultUpdateTime</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NibblVaultFactory: UPDATE_TIME has not passed&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L166\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L166</a></p>\n<h2 id=\"17-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\" style=\"position:relative;\"><a href=\"#17-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\" aria-label=\"17 usage of uintsints smaller than 32 bytes 256 bits incurs overhead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[17] Usage of <code>uints</code>/<code>ints</code> smaller than 32 bytes (256 bits) incurs overhead</h2>\n<blockquote>\n<p>When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.</p>\n</blockquote>\n<p><a href=\"https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html\">https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html</a>\nUse a larger size then downcast where needed</p>\n<p><em>There are 14 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"100\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">28</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">primaryReserveRatio</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">200_000</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//20%</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">57</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">secondaryReserveRatio</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">183</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_secondaryReserveRatio</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">((</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">SCALE</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">) / (</span><span class=\"mtk12\">_initialTokenSupply</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_initialTokenPrice</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">303</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">365</span><span class=\"mtk1\">:              </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">445</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> % </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">32</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">557</span><span class=\"mtk1\">:          </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">v</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L28\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L28</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"101\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Twav</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">6</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">11</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">12</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">4</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//TWAV of last 4 Blocks </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">13</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lastBlockTimeStamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">21</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_updateTWAV</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_valuation</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_blockTimestamp</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">22</span><span class=\"mtk1\">:           </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_timeElapsed</span><span class=\"mtk1\">; </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">37</span><span class=\"mtk1\">:               </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_index</span><span class=\"mtk1\"> = ((</span><span class=\"mtk12\">twavObservationsIndex</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">) - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">) % </span><span class=\"mtk12\">TWAV_BLOCK_NUMBERS</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L6\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L6</a></p>\n<h2 id=\"18-using-private-rather-than-public-for-constants-saves-gas\" style=\"position:relative;\"><a href=\"#18-using-private-rather-than-public-for-constants-saves-gas\" aria-label=\"18 using private rather than public for constants saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[18] Using <code>private</code> rather than <code>public</code> for constants, saves gas</h2>\n<p>If needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that returns a tuple of the values of all currently-public constants. Saves <strong>3406-3606 gas</strong> in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it’s used, and not adding another entry to the method ID table</p>\n<p><em>There are 3 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"102\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AccessControlMechanism</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">12</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">FEE_ROLE</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;FEE_ROLE&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L12\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L12</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"103\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AccessControlMechanism</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">13</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">PAUSER_ROLE</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;PAUSER_ROLE&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L13\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L13</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"104\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AccessControlMechanism</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">14</span><span class=\"mtk1\">:       </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">IMPLEMENTER_ROLE</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;IMPLEMENTER_ROLE&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L14\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L14</a></p>\n<h2 id=\"19-dont-use-safemath-once-the-solidity-version-is-080-or-greater\" style=\"position:relative;\"><a href=\"#19-dont-use-safemath-once-the-solidity-version-is-080-or-greater\" aria-label=\"19 dont use safemath once the solidity version is 080 or greater permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[19] Don’t use <code>SafeMath</code> once the solidity version is 0.8.0 or greater</h2>\n<p>Version 0.8.0 introduces internal overflow checks, so using <code>SafeMath</code> is redundant and adds overhead</p>\n<p><em>There is 1 instance of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"105\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">9</span><span class=\"mtk1\">:    </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">SafeMath</span><span class=\"mtk1\"> } </span><span class=\"mtk15\">from</span><span class=\"mtk1\">  </span><span class=\"mtk8\">&quot;@openzeppelin/contracts/utils/math/SafeMath.sol&quot;</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L9\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L9</a></p>\n<h2 id=\"20-duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\" style=\"position:relative;\"><a href=\"#20-duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\" aria-label=\"20 duplicated requirerevert checks should be refactored to a modifier or function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[20] Duplicated <code>require()</code>/<code>revert()</code> checks should be refactored to a modifier or function</h2>\n<p>Saves deployment costs</p>\n<p><em>There are 3 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"106\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">42</span><span class=\"mtk1\">:           </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_isApprovedOrOwner</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;withdraw:not allowed&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L42\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L42</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"107\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">486</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">curator</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;NibblVault: Only Curator&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L486\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L486</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"108\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">   #</span><span class=\"mtk7\">3</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">505</span><span class=\"mtk1\">:          </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">bidder</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;NibblVault: Only winner&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L505\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L505</a></p>\n<h2 id=\"21-empty-blocks-should-be-removed-or-emit-something\" style=\"position:relative;\"><a href=\"#21-empty-blocks-should-be-removed-or-emit-something\" aria-label=\"21 empty blocks should be removed or emit something permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[21] Empty blocks should be removed or emit something</h2>\n<p>The code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting. If the contract is meant to be extended, the contract should be <code>abstract</code> and the function signatures be added without any default implementation. If the block is an empty <code>if</code>-statement block to avoid doing subsequent checks in the else-if/else conditions, the else-if/else conditions should be nested under the negation of the if-statement, because they involve different classes of checks, which may lead to the introduction of errors when the code is later modified (<code>if(x){}else if(y){...}else{...}</code> => <code>if(!x){if(y){...}else{...}}</code>)</p>\n<p><em>There are 5 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"109\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Basket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">114</span><span class=\"mtk1\">:      </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L114\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L114</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"110\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">183</span><span class=\"mtk1\">:      </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> {    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L183\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L183</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"111\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">585</span><span class=\"mtk1\">:      </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L585\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L585</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"112\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">Proxy</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ProxyBasket</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">56</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L56\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L56</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"113\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk10\">Proxy</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ProxyVault</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">56</span><span class=\"mtk1\">:       </span><span class=\"mtk11\">receive</span><span class=\"mtk1\">() </span><span class=\"mtk12\">external</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payable</span><span class=\"mtk1\"> {    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyVault.sol#L56\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyVault.sol#L56</a></p>\n<h2 id=\"22-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\" style=\"position:relative;\"><a href=\"#22-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\" aria-label=\"22 use custom errors rather than revertrequire strings to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[22] Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</h2>\n<p>Custom errors are available from solidity version 0.8.4. Custom errors save <a href=\"https://gist.github.com/IllIllI000/ad1bd0d29a0101b25e57c293b4b0c746\"><strong>~50 gas</strong></a> each time they’re hitby <a href=\"https://blog.soliditylang.org/2021/04/21/custom-errors/#errors-in-depth\">avoiding having to allocate and store the revert string</a>. Not defining the strings also save deployment gas</p>\n<p><em>There are 41 instances of this issue:</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl-findings/issues/140\">See original submission</a> for details.</p>\n<h2 id=\"23-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" style=\"position:relative;\"><a href=\"#23-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\" aria-label=\"23 functions guaranteed to revert when called by normal users can be marked payable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[23] Functions guaranteed to revert when called by normal users can be marked <code>payable</code></h2>\n<p>If a function modifier such as <code>onlyOwner</code> is used, the function will revert if a normal user tries to pay the function. Marking the function as <code>payable</code> will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are\n<code>CALLVALUE</code>(2),<code>DUP1</code>(3),<code>ISZERO</code>(3),<code>PUSH2</code>(3),<code>JUMPI</code>(10),<code>PUSH1</code>(3),<code>DUP1</code>(3),<code>REVERT</code>(0),<code>JUMPDEST</code>(1),<code>POP</code>(2), which costs an average of about <strong>21 gas per call</strong> to the function, in addition to the extra deployment cost</p>\n<p><em>There are 8 instances of this issue:</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"114\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">NibblVaultFactory</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">99</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">proposeNewBasketImplementation</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_newBasketImplementation</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IMPLEMENTER_ROLE</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">123</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">proposeNewAdminFeeAddress</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_newFeeAddress</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">FEE_ROLE</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">140</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">proposeNewAdminFee</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_newFee</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">FEE_ROLE</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">158</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">proposeNewVaultImplementation</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_newVaultImplementation</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IMPLEMENTER_ROLE</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">173</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pause</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PAUSER_ROLE</span><span class=\"mtk1\">) </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">179</span><span class=\"mtk1\">:      </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">unPause</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PAUSER_ROLE</span><span class=\"mtk1\">) </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L99\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L99</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"115\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Utilities</span><span class=\"mtk1\">/</span><span class=\"mtk12\">AccessControlMechanism</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">32</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setRoleAdmin</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_role</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_adminRole</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">getRoleAdmin</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_role</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">40</span><span class=\"mtk1\">:       </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">proposeGrantRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_role</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">getRoleAdmin</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_role</span><span class=\"mtk1\">)) {</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L32\">https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L32</a></p>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#medium-risk-findings-12\">Medium Risk Findings (12)</a></p>\n<ul>\n<li><a href=\"#m-01-buyout-cannot-be-rejected-when-paused\">[M-01] Buyout cannot be rejected when paused</a></li>\n<li><a href=\"#m-02-twavsol_gettwav-will-revert-when-timestamp--4294967296\">[M-02] <code>Twav.sol#_getTwav()</code> will revert when timestamp > 4294967296</a></li>\n<li><a href=\"#m-03-user-could-change-the-state-of-the-system-while-in-pause-mode\">[M-03] User Could Change The State Of The System While In <code>Pause</code> Mode</a></li>\n<li><a href=\"#m-04-ineffective-twav-implementation\">[M-04] Ineffective TWAV Implementation</a></li>\n<li><a href=\"#m-05-lack-of-sanity-check-on-_initialtokensupply-and-_initialtokenprice-can-lead-to-a-seller-losing-his-nft\">[M-05] Lack of sanity check on _initialTokenSupply and _initialTokenPrice can lead to a seller losing his NFT</a></li>\n<li><a href=\"#m-06-nibblvault-in-the-buy-function-users-can-avoid-paying-fees\">[M-06] NibblVault: In the buy function, users can avoid paying fees</a></li>\n<li><a href=\"#m-07--_updatetwav-and-_gettwav-will-revert-when-cumulativeprice-overflows\">[M-07]  <code>_updateTwav()</code> and <code>_getTwav()</code> will revert when cumulativePrice overflows</a></li>\n<li><a href=\"#m-08-pnm-004-calculation-of-_secondaryreserveratio-can-be-overflowed\">[M-08] [PNM-004] Calculation of <code>_secondaryReserveRatio</code> can be overflowed</a></li>\n<li><a href=\"#m-09-nibblvault-buyout-duration-longer-than-update-timelock\">[M-09] NibblVault buyout duration longer than update timelock</a></li>\n<li><a href=\"#m-10-reentrancy-bug-in-baskets-withdraw-multiple-tokens-function-which-gives-attacker-ability-to-transfer-basket-ownership-and-spend-it-but-withdraw-all-the-tokens-out-of-basket\">[M-10] Reentrancy bug in Basket’s withdraw multiple tokens function which gives attacker ability to transfer basket ownership and spend it but withdraw all the tokens out of basket</a></li>\n<li><a href=\"#m-11-twavgettwav-will-return-a-wrong-result-when-twavobservationstwavblock_numbers---1timestamp--0\">[M-11] Twav.<em>getTwav() will return a wrong result when twavObservations[TWAV</em>BLOCK_NUMBERS - 1].timestamp = 0.</a></li>\n<li><a href=\"#m-12-basket-nft-have-no-name-and-symbol\">[M-12] Basket NFT have no name and symbol</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#low-risk-issues\">Low Risk Issues</a></li>\n<li><a href=\"#l-01-buyouts-that-occur-during-the-timestamp-wrap-will-have-valuation-errors\">L-01 Buyouts that occur during the timestamp wrap will have valuation errors</a></li>\n<li><a href=\"#l-02-ecrecover-not-checked-for-signer-address-of-zero\">L-02 <code>ecrecover()</code> not checked for signer address of zero</a></li>\n<li><a href=\"#l-03-return-values-of-transfertransferfrom-not-checked\">L-03 Return values of <code>transfer()</code>/<code>transferFrom()</code> not checked</a></li>\n<li><a href=\"#l-04-input-array-lengths-may-differ\">L-04 Input array lengths may differ</a></li>\n<li><a href=\"#l-05-_safemint-should-be-used-rather-than-_mint-wherever-possible\">L-05 <code>_safeMint()</code> should be used rather than <code>_mint()</code> wherever possible</a></li>\n<li><a href=\"#l-06-missing-checks-for-address0x0-when-assigning-values-to-address-state-variables\">L-06 Missing checks for <code>address(0x0)</code> when assigning values to <code>address</code> state variables</a></li>\n<li><a href=\"#l-07-vulnerable-to-cross-chain-replay-attacks-due-to-static-domain_separatordomainseparator\">L-07 Vulnerable to cross-chain replay attacks due to static <code>DOMAIN_SEPARATOR</code>/<code>domainSeparator</code></a></li>\n<li><a href=\"#l-08-upgradeable-contract-is-missing-a-__gap50-storage-variable-to-allow-for-new-storage-variables-in-later-versions\">L-08 Upgradeable contract is missing a <code>__gap[50]</code> storage variable to allow for new storage variables in later versions</a></li>\n<li><a href=\"#l-09-incorrect-comments\">L-09 Incorrect comments</a></li>\n<li><a href=\"#non-critical-issues\">Non-Critical Issues</a></li>\n<li><a href=\"#n-01-consider-addings-checks-for-signature-malleability\">N-01 Consider addings checks for signature malleability</a></li>\n<li><a href=\"#n-02-misleading-variable-name\">N-02 Misleading variable name</a></li>\n<li><a href=\"#n-03-inconsistent-version-of-english-being-used\">N-03 Inconsistent version of English being used</a></li>\n<li><a href=\"#n-04-missing-initializer-modifier-on-constructor\">N-04 Missing <code>initializer</code> modifier on constructor</a></li>\n<li><a href=\"#n-05-contract-implements-interface-without-extending-the-interface\">N-05 Contract implements interface without extending the interface</a></li>\n<li><a href=\"#n-06-requirerevert-statements-should-have-descriptive-reason-strings\">N-06 <code>require()</code>/<code>revert()</code> statements should have descriptive reason strings</a></li>\n<li><a href=\"#n-07-public-functions-not-called-by-the-contract-should-be-declared-external-instead\">N-07 <code>public</code> functions not called by the contract should be declared <code>external</code> instead</a></li>\n<li><a href=\"#n-08-non-assembly-method-available\">N-08 Non-assembly method available</a></li>\n<li><a href=\"#n-09-2n---1-should-be-re-written-as-typeuintnmax\">N-09 <code>2**&#x3C;n> - 1</code> should be re-written as <code>type(uint&#x3C;n>).max</code></a></li>\n<li><a href=\"#n-10-constants-should-be-defined-rather-than-using-magic-numbers\">N-10 <code>constant</code>s should be defined rather than using magic numbers</a></li>\n<li><a href=\"#n-11-cast-is-more-restrictive-than-the-type-of-the-variable-being-assigned\">N-11 Cast is more restrictive than the type of the variable being assigned</a></li>\n<li><a href=\"#n-12-missing-event-and-or-timelock-for-critical-parameter-change\">N-12 Missing event and or timelock for critical parameter change</a></li>\n<li><a href=\"#n-13-expressions-for-constant-values-such-as-a-call-to-keccak256-should-use-immutable-rather-than-constant\">N-13 Expressions for constant values such as a call to <code>keccak256()</code>, should use <code>immutable</code> rather than <code>constant</code></a></li>\n<li><a href=\"#n-14-inconsistent-spacing-in-comments\">N-14 Inconsistent spacing in comments</a></li>\n<li><a href=\"#n-15-lines-are-too-long\">N-15 Lines are too long</a></li>\n<li><a href=\"#n-16-non-libraryinterface-files-should-use-fixed-compiler-versions-not-floating-ones\">N-16 Non-library/interface files should use fixed compiler versions, not floating ones</a></li>\n<li><a href=\"#n-17-typos\">N-17 Typos</a></li>\n<li><a href=\"#n-18-file-is-missing-natspec\">N-18 File is missing NatSpec</a></li>\n<li><a href=\"#n-19-natspec-is-incomplete\">N-19 NatSpec is incomplete</a></li>\n<li><a href=\"#n-20-event-is-missing-indexed-fields\">N-20 Event is missing <code>indexed</code> fields</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#1-setting-default_admin_role-as-the-role-admin-is-redundant\">1 Setting <code>DEFAULT_ADMIN_ROLE</code> as the role admin is redundant</a></li>\n<li><a href=\"#2-using-calldata-instead-of-memory-for-read-only-arguments-in-external-functions-saves-gas\">2 Using <code>calldata</code> instead of <code>memory</code> for read-only arguments in <code>external</code> functions saves gas</a></li>\n<li><a href=\"#3-using-storage-instead-of-memory-for-structsarrays-saves-gas\">3 Using <code>storage</code> instead of <code>memory</code> for structs/arrays saves gas</a></li>\n<li><a href=\"#4-state-variables-should-be-cached-in-stack-variables-rather-than-re-reading-them-from-storage\">4 State variables should be cached in stack variables rather than re-reading them from storage</a></li>\n<li><a href=\"#5-x--y-costs-more-gas-than-x--x--y-for-state-variables\">5 <code>&#x3C;x> += &#x3C;y></code> costs more gas than <code>&#x3C;x> = &#x3C;x> + &#x3C;y></code> for state variables</a></li>\n<li><a href=\"#6-internal-functions-only-called-once-can-be-inlined-to-save-gas\">6 <code>internal</code> functions only called once can be inlined to save gas</a></li>\n<li><a href=\"#7-add-unchecked--for-subtractions-where-the-operands-cannot-underflow-because-of-a-previous-require-or-if-statement\">7 Add <code>unchecked {}</code> for subtractions where the operands cannot underflow because of a previous <code>require()</code> or <code>if</code>-statement</a></li>\n<li><a href=\"#8-arraylength-should-not-be-looked-up-in-every-loop-of-a-for-loop\">8 <code>&#x3C;array>.length</code> should not be looked up in every loop of a <code>for</code>-loop</a></li>\n<li><a href=\"#9-ii-should-be-uncheckediuncheckedi-when-it-is-not-possible-for-them-to-overflow-as-is-the-case-when-used-in-for--and-while-loops\">9 <code>++i</code>/<code>i++</code> should be <code>unchecked{++i}</code>/<code>unchecked{i++}</code> when it is not possible for them to overflow, as is the case when used in <code>for</code>- and <code>while</code>-loops</a></li>\n<li><a href=\"#10-requirerevert-strings-longer-than-32-bytes-cost-extra-gas\">10 <code>require()</code>/<code>revert()</code> strings longer than 32 bytes cost extra gas</a></li>\n<li><a href=\"#11-using-bools-for-storage-incurs-overhead\">11 Using <code>bool</code>s for storage incurs overhead</a></li>\n<li><a href=\"#12-use-a-more-recent-version-of-solidity\">12 Use a more recent version of solidity</a></li>\n<li><a href=\"#13--costs-less-gas-than-\">13 <code>>=</code> costs less gas than <code>></code></a></li>\n<li><a href=\"#14-it-costs-more-gas-to-initialize-non-constantnon-immutable-variables-to-zero-than-to-let-the-default-of-zero-be-applied\">14 It costs more gas to initialize non-<code>constant</code>/non-<code>immutable</code> variables to zero than to let the default of zero be applied</a></li>\n<li><a href=\"#15-i-costs-less-gas-than-i-especially-when-its-used-in-for-loops---ii---too\">15 <code>++i</code> costs less gas than <code>i++</code>, especially when it’s used in <code>for</code>-loops (<code>--i</code>/<code>i--</code> too)</a></li>\n<li><a href=\"#16-splitting-require-statements-that-use--saves-gas\">16 Splitting <code>require()</code> statements that use <code>&#x26;&#x26;</code> saves gas</a></li>\n<li><a href=\"#17-usage-of-uintsints-smaller-than-32-bytes-256-bits-incurs-overhead\">17 Usage of <code>uints</code>/<code>ints</code> smaller than 32 bytes (256 bits) incurs overhead</a></li>\n<li><a href=\"#18-using-private-rather-than-public-for-constants-saves-gas\">18 Using <code>private</code> rather than <code>public</code> for constants, saves gas</a></li>\n<li><a href=\"#19-dont-use-safemath-once-the-solidity-version-is-080-or-greater\">19 Don’t use <code>SafeMath</code> once the solidity version is 0.8.0 or greater</a></li>\n<li><a href=\"#20-duplicated-requirerevert-checks-should-be-refactored-to-a-modifier-or-function\">20 Duplicated <code>require()</code>/<code>revert()</code> checks should be refactored to a modifier or function</a></li>\n<li><a href=\"#21-empty-blocks-should-be-removed-or-emit-something\">21 Empty blocks should be removed or emit something</a></li>\n<li><a href=\"#22-use-custom-errors-rather-than-revertrequire-strings-to-save-gas\">22 Use custom errors rather than <code>revert()</code>/<code>require()</code> strings to save gas</a></li>\n<li><a href=\"#23-functions-guaranteed-to-revert-when-called-by-normal-users-can-be-marked-payable\">23 Functions guaranteed to revert when called by normal users can be marked <code>payable</code></a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the audit contest outlined in this document, C4 conducted an analysis of the Nibbl smart contract system written in Solidity. The audit contest took place between June 21—June 24 2022.\n\n## Wardens\n\n107 Wardens contributed reports to the Nibbl contest:\n\n  1. xiaoming90\n  1. [hansfriese](https://twitter.com/hansfriese)\n  1. reassor\n  1. unforgiven\n  1. [itsmeSTYJ](https://twitter.com/itsmeSTYJ)\n  1. [WatchPug](https://twitter.com/WatchPug_) ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n  1. Lambda\n  1. cccz\n  1. [Picodes](https://twitter.com/thePicodes)\n  1. SmartSek (0xDjango and hake)\n  1. [ych18](https://www.linkedin.com/in/yahia-chaabane/)\n  1. [hyh](https://twitter.com/0xhyh)\n  1. PwnedNoMore ([izhuer](https://www.cs.purdue.edu/homes/zhan3299/index.html), ItsNio and papr1ka2)\n  1. peritoflores\n  1. IllIllI\n  1. zzzitron\n  1. BowTiedWardens (BowTiedHeron, BowTiedPickle, [m4rio_eth](BowTiedETHernal), [Dravee](https://twitter.com/JustDravee) and BowTiedFirefox)\n  1. [kenzo](https://twitter.com/KenzoAgada)\n  1. [joestakey](https://twitter.com/JoeStakey)\n  1. 0x1f8b\n  1. _Adam\n  1. 0x29A (0x4non and rotcivegaf)\n  1. codexploder\n  1. 0xkatana\n  1. [Chom](https://chom.dev)\n  1. [defsec](https://twitter.com/defsec_)\n  1. [MiloTruck](https://milotruck.github.io/)\n  1. [c3phas](https://twitter.com/c3ph_)\n  1. [catchup](https://twitter.com/catchup22)\n  1. [ellahi](https://twitter.com/ellahinator)\n  1. minhquanym\n  1. [0xNazgul](https://twitter.com/0xNazgul)\n  1. robee\n  1. UnusualTurtle\n  1. cryptphi\n  1. [TomJ](https://mobile.twitter.com/tomj_bb)\n  1. 0xf15ers (remora and twojoy)\n  1. sashik_eth\n  1. pashov\n  1. delfin454000\n  1. [StErMi](https://ericci.dev/)\n  1. [Tomio](https://twitter.com/meidhiwirara)\n  1. oyc_109\n  1. slywaters\n  1. ElKu\n  1. kenta\n  1. saian\n  1. [JC](https://twitter.com/sm4rtcontr4ct)\n  1. sach1r0\n  1. Noah3o6\n  1. simon135\n  1. TerrierLover\n  1. [rfa](https://www.instagram.com/riyan_rfa/)\n  1. Waze\n  1. [fatherOfBlocks](https://twitter.com/father0fBl0cks)\n  1. zuhaibmohd\n  1. [Randyyy](https://twitter.com/randyyramadhan)\n  1. kebabsec (okkothejawa and [FlameHorizon](https://twitter.com/FlameHorizon1))\n  1. Nyamcil\n  1. [Funen](https://instagram.com/vanensurya)\n  1. [exd0tpy](https://github.com/exd0tpy)\n  1. Limbooo\n  1. [m_Rassska](https://t.me/Road220)\n  1. [berndartmueller](https://twitter.com/berndartmueller)\n  1. 0xNineDec\n  1. cloudjunky\n  1. [0xKitsune](https://github.com/0xKitsune)\n  1. [shenwilly](https://twitter.com/shenwilly_)\n  1. sorrynotsorry\n  1. JohnSmith\n  1. [Tadashi](https://github.com/htadashi)\n  1. [sseefried](http://seanseefried.org/blog)\n  1. [MadWookie](https://twitter.com/wookiemad)\n  1. [JMukesh](https://twitter.com/MukeshJ_eth)\n  1. asutorufos\n  1. dipp\n  1. naps62\n  1. apostle0x01\n  1. Wayne\n  1. [Alex the Entreprenerd](https://twitter.com/GallodaSballo)\n  1. [Varun_Verma](twitter.com/versatile_crypt)\n  1. 0xc0ffEE\n  1. [Treasure-Seeker](https://twitter.com/treasuresETH)\n  1. masterchief\n  1. 0x52\n  1. [Nethermind](https://nethermind.io/)\n  1. RoiEvenHaim\n  1. [8olidity](https://twitter.com/8olidity)\n  1. ajtra\n  1. ACai\n  1. cRat1st0s\n  1. [Chandr](https://www.linkedin.com/in/evgeniy-shaldin-21898712a/)\n  1. [0v3rf10w](https://twitter.com/_0v3rf10w)\n  1. [ynnad](https://twitter.com/ynnadt1)\n  1. [IgnacioB](https://twitter.com/AdonaiR6)\n  1. [Fitraldys](https://twitter.com/fitraldys)\n\nThis contest was judged by [HardlyDifficult](https://twitter.com/HardlyDifficult).\n\nFinal report assembled by [itsmetechjay](https://twitter.com/itsmetechjay).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 12 unique vulnerabilities. Of these vulnerabilities, 0 received a risk rating in the category of HIGH severity and 12 received a risk rating in the category of MEDIUM severity.\n\nAdditionally, C4 analysis included 82 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 63 reports recommending gas optimizations.\n\nAll of the issues presented here are linked back to their original finding.\n\n# Scope\n\nThe code under review can be found within the [C4 Nibbl contest repository](https://github.com/code-423n4/2022-06-nibbl), and is composed of 8 smart contracts written in the Solidity programming language and includes 539 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code4rena.com).\n\n# Medium Risk Findings (12)\n## [[M-01] Buyout cannot be rejected when paused](https://github.com/code-423n4/2022-06-nibbl-findings/issues/55)\n_Submitted by Lambda, also found by SmartSek_\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L300>\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L362>\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L464>\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L495>\n\n### Impact\n\nWhile `buy()` and `sell()` are only callable when the system is not paused, `redeem()` and `withdrawERC721()` are also callable when it is not. This means that the `BUYOUT_DURATION` is ignored in such cases and it is possible that users are not able to reject certain buyouts.\n\n### Proof of Concept\n\nA user initiates a buyout via `initiateBuyout()`. Just afterwards, the system is stopped. The token holders now cannot buy new tokens to increase the value. However, after two days, the `bidder` can still withdraw the NFT, i.e. there was no way for the users to reject this buyout.\n\n### Recommended Mitigation Steps\n\nIt should be possible to reset the `buyoutEndTime` (to the current `block.timestamp`) when the system is paused such that the token holders always have the possibility to reject a buyout.\n\n**[mundhrakeshav (Nibbl) disputed and commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/55#issuecomment-1166321982):**\n > Expected. When paused no operations should be available.\n\n**[fatherGoose1 (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/55#issuecomment-1166685840):**\n > Strongly disagree with the sponsor's comment. Given that [redeem()](https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L464) and [withdrawERC721()](https://github.com/code-423n4/2022-06-nibbl/blob/71b639f977c0351c9928dd3b78eaa4bebb738bc1/contracts/NibblVault.sol#L495) DO NOT contain the `whenNotPaused` modifier, this ensures that pauses that occur during a buyout process will ensure the success of the buyout. The buyout success occurs by time passing a certain block.timestamp and the functionality to claim the NFT and retrieve the underlying are left open even during the pause. \n> \n> Similar to issue [#261](https://github.com/code-423n4/2022-06-nibbl-findings/issues/261)\n> \n> I would agree with the sponsor if all of the `withdraw()/redeem()` functions contained the `whenNotPaused` modifier so that truly all functions were locked during a pause.\n\n**[mundhrakeshav (Nibbl) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/55#issuecomment-1166747212):**\n > Hmmm. Makes sense. We should pause redeem and Withdraw too.\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/55#issuecomment-1170641593):**\n > The readme does include \"Out of scope: Admin can pause and change certain parameters of the contract.\" however this report is not strictly about the ability to pause.\n> \n> > It should be possible to reset the buyoutEndTime\n> \n> In this scenario, an end time has already been defined. If `pause` is used at that time the window shortens or closes so when resumed the opportunity may have been missed already. The warden's recommendation here, or some variation of it, would provide a way to effectively allow the system to resume from where it left off when originally paused.\n> \n> I suspect the alternative of also pausing redeem / withdraw is not sufficient, as the window to buy/sell will still potentially be passed by the time the system resumes.\n> \n> I agree with the submitted Med risk for this issue since the \"function of the protocol or its availability could be impacted\".\n\n\n\n***\n\n## [[M-02] `Twav.sol#_getTwav()` will revert when timestamp > 4294967296](https://github.com/code-423n4/2022-06-nibbl-findings/issues/178)\n_Submitted by WatchPug, also found by hansfriese and IllIllI_\n\n```solidity\nfunction _getTwav() internal view returns(uint256 _twav){\n    if (twavObservations[TWAV_BLOCK_NUMBERS - 1].timestamp != 0) {\n        uint8 _index = ((twavObservationsIndex + TWAV_BLOCK_NUMBERS) - 1) % TWAV_BLOCK_NUMBERS;\n        TwavObservation memory _twavObservationCurrent = twavObservations[(_index)];\n        TwavObservation memory _twavObservationPrev = twavObservations[(_index + 1) % TWAV_BLOCK_NUMBERS];\n        _twav = (_twavObservationCurrent.cumulativeValuation - _twavObservationPrev.cumulativeValuation) / (_twavObservationCurrent.timestamp - _twavObservationPrev.timestamp);\n    }\n}\n```\n\nSince `_blockTimestamp` is `uint32`, subtraction underflow is desired at `_twavObservationCurrent.timestamp - _twavObservationPrev.timestamp`.\n\nSee: <https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol#L43>\n\n```solidity\nfunction update() external {\n    (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\n        UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\n    uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n```\n\nBecause the solidity version used by the current implementation is `0.8.10`, and there are some breaking changes in Solidity v0.8.0:\n\n> Arithmetic operations revert on underflow and overflow.\n\nRef: <https://docs.soliditylang.org/en/v0.8.13/080-breaking-changes.html#silent-changes-of-the-semantics>\n\nThe timestamp subtraction may revert due to underflow.\n\n### Impact\n\nSince `_getTwav()` is used in `NibblVault.sol#_rejectBuyout()`, if it reverts and there is a `buyout`, an essential feature of the `NibblVault` contract will be unavailable, causing users' funds to be frozen in the contract.\n\n### Recommendation\n\nChange to:\n\n```solidity\nfunction _updateTWAV(uint256 _valuation, uint32 _blockTimestamp) internal {\n    uint32 _timeElapsed; \n    unchecked {\n        _timeElapsed = _blockTimestamp - lastBlockTimeStamp;\n    }\n\n    uint256 _prevCumulativeValuation = twavObservations[((twavObservationsIndex + TWAV_BLOCK_NUMBERS) - 1) % TWAV_BLOCK_NUMBERS].cumulativeValuation;\n    unchecked {\n        twavObservations[twavObservationsIndex] = TwavObservation(_blockTimestamp, _prevCumulativeValuation + (_valuation * _timeElapsed)); //add the previous observation to make it cumulative\n    }\n    \n    twavObservationsIndex = (twavObservationsIndex + 1) % TWAV_BLOCK_NUMBERS;\n    lastBlockTimeStamp = _blockTimestamp;\n}\n```\n\n```solidity\nfunction _getTwav() internal view returns(uint256 _twav){\n    if (twavObservations[TWAV_BLOCK_NUMBERS - 1].timestamp != 0) {\n        uint8 _index = ((twavObservationsIndex + TWAV_BLOCK_NUMBERS) - 1) % TWAV_BLOCK_NUMBERS;\n        TwavObservation memory _twavObservationCurrent = twavObservations[(_index)];\n        TwavObservation memory _twavObservationPrev = twavObservations[(_index + 1) % TWAV_BLOCK_NUMBERS];\n        unchecked {\n            _twav = (_twavObservationCurrent.cumulativeValuation - _twavObservationPrev.cumulativeValuation) / (_twavObservationCurrent.timestamp - _twavObservationPrev.timestamp);\n        }\n    }\n}\n```\n**[mundhrakeshav (Nibbl) acknowledged, but disagreed with severity](https://github.com/code-423n4/2022-06-nibbl-findings/issues/178)**\n\n**[KenzoAgada (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/178#issuecomment-1166164271):**\n > If I'm not mistaken, timestamp 4294967296 is 2106, I wouldn't call the contract breaking in 84 years a high severity issue. Plus the contract is truncating the timestamp on purpose. Seems to me more like a design choice and less of a bug.\n\n**[mingwatch (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/178#issuecomment-1166798846):**\n > > If I'm not mistaken, timestamp 4294967296 is 2106, I wouldn't call the contract breaking in 84 years a high severity issue. Plus the contract is truncating the timestamp on purpose. Seems to me more like a design choice and less of a bug.\n> \n> https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/Twav/Twav.sol#L23-L25\n> \n> ```solidity\n> function _updateTWAV(uint256 _valuation, uint32 _blockTimestamp) internal {\n>         uint32 _timeElapsed; \n>         unchecked {\n>             _timeElapsed = _blockTimestamp - lastBlockTimeStamp;\n>         }\n>  ```\n>  \n> According to the above code, is obviously not a design choice.\n>  \n\n**[KenzoAgada (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/178#issuecomment-1166807275):**\n > > According to the above code, is obviously not a design choice.\n> \n> Ah, I think I understand what you mean, it is not handled consistently.\n\n**[HardlyDifficult (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/178#issuecomment-1171706893):**\n > > it is not handled consistently\n> \n> Thanks for the clarifications!\n> \n> `_getTwav` would overflow once timestamps overflow uint32, but only when the current observation has overflowed while the previous observation did not.\n> \n> The window for this vulnerability is very small, just at the time timestamp starts to overflow in 2106 - vaults active before or after that time should work as expected. \n> \n> This appears to be a Medium risk finding.  There's potentially a case to be made for high here but it's hard to make that call without a more complete POC included. The vault is an upgradeable contract so they have 84 years to sort this out -- but it does seem like an issue that should be fixed.\n\n\n\n***\n\n## [[M-03] User Could Change The State Of The System While In `Pause` Mode](https://github.com/code-423n4/2022-06-nibbl-findings/issues/200)\n_Submitted by xiaoming90_\n\nCalling `NibblVault.updateTWAP` function will change the state of the system. It will cause the TWAP to be updated and buyout to be rejected in certain condition.\n\nWhen the system is in `Pause` mode, the system state should be frozen. However, it was possible for someone to call the `NibblVault.updateTWAP` function during the `Pause` mode, thus making changes to the system state.\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L443>\n\n```solidity\n/// @notice Updates the TWAV when in buyout\n/// @dev TWAV can be updated only in buyout state\nfunction updateTWAV() external override {\n    require(status == Status.buyout, \"NibblVault: Status!=Buyout\");\n    uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n    if (_blockTimestamp != lastBlockTimeStamp) {\n        _updateTWAV(getCurrentValuation(), _blockTimestamp);   \n        _rejectBuyout(); //For the case when TWAV goes up when updated externally\n    }\n}\n```\n\n### Recommended Mitigation Steps\n\nEnsure that the `NibblVault.updateVault` function cannot be called when the system is in `Pause` mode.\n\nAdd the `whenNotPaused` modifier to the function.\n\n```solidity\n/// @notice Updates the TWAV when in buyout\n/// @dev TWAV can be updated only in buyout state\nfunction updateTWAV() external override whenNotPaused {\n    require(status == Status.buyout, \"NibblVault: Status!=Buyout\");\n    uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n    if (_blockTimestamp != lastBlockTimeStamp) {\n        _updateTWAV(getCurrentValuation(), _blockTimestamp);   \n        _rejectBuyout(); //For the case when TWAV goes up when updated externally\n    }\n}\n```\n\n**[mundhrakeshav (Nibbl) marked as duplicate and commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/200#issuecomment-1166505154):**\n > Duplicate of [#56](https://github.com/code-423n4/2022-06-nibbl-findings/issues/56)\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/200#issuecomment-1173872782):**\n > > #56\n> \n> It's not clear to me how this is a dupe of #56 \n> \n> This is a valid concern and potentially a change worth making.\n> \n> >  It will cause the TWAP to be updated and buyout to be rejected\n> \n> This makes me think Medium risk is correct here. In this scenario a buyout could be rejected without allowing other users to challenge that -- seemingly breaking one of the benefits behind using Twap for this logic.\n\n\n\n***\n\n## [[M-04] Ineffective TWAV Implementation](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191)\n_Submitted by xiaoming90, also found by hyh_\n\nThe current TWAV implementation consists of an array of 4 observations/valuations called `twavObservations`. Whenever, the new valuation is updated, the new cumulative valuation will be appended to the `twavObservations` array and the oldest observation/valuation will be removed from the `twavObservations` array.\n\nDescription of current TWAV implementation can be found at <https://github.com/NibblNFT/nibbl-smartcontracts#twavsol>\n\n> *   Time-weighted average valuation\n> *   Uses an array of length 4 which stores cumulative valuation and timestamp.\n> *   TWAV is calculated between the most and least recent observations recorded in the array.\n> *   TWAV array is updated only when the system is in buyout state. In case of buyout rejection, the array is reset.\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L11>\n\n```solidity\n/// @notice current index of twavObservations index\nuint8 public twavObservationsIndex;\nuint8 private constant TWAV_BLOCK_NUMBERS = 4; //TWAV of last 4 Blocks \nuint32 public lastBlockTimeStamp;\n\n/// @notice record of TWAV \nTwavObservation[TWAV_BLOCK_NUMBERS] public twavObservations;\n\n/// @notice updates twavObservations array\n/// @param _blockTimestamp timestamp of the block\n/// @param _valuation current valuation\nfunction _updateTWAV(uint256 _valuation, uint32 _blockTimestamp) internal {\n    uint32 _timeElapsed; \n    unchecked {\n        _timeElapsed = _blockTimestamp - lastBlockTimeStamp;\n    }\n\n    uint256 _prevCumulativeValuation = twavObservations[((twavObservationsIndex + TWAV_BLOCK_NUMBERS) - 1) % TWAV_BLOCK_NUMBERS].cumulativeValuation;\n    twavObservations[twavObservationsIndex] = TwavObservation(_blockTimestamp, _prevCumulativeValuation + (_valuation * _timeElapsed)); //add the previous observation to make it cumulative\n    twavObservationsIndex = (twavObservationsIndex + 1) % TWAV_BLOCK_NUMBERS;\n    lastBlockTimeStamp = _blockTimestamp;\n}\n```\n\nWithin the `NibblVault` contract, the `_updateTWAV` function will be called whenever the following events happen during the buyout period:\n\n1.  `NibbleVault.buy()` and `NibbleVault.Sell()` functions are called\n2.  `NibbleVault.initiateBuyout` function is called\n3.  `NibbleVault.updateTWAV` function is called\n\nPer the code and comment of `_getTwav()` function, the function will return the TWAV of the last four (4) blocks. This function can be called by anyone.\n\n```solidity\n/// @notice returns the TWAV of the last 4 blocks\n/// @return _twav TWAV of the last 4 blocks\nfunction _getTwav() internal view returns(uint256 _twav){\n    if (twavObservations[TWAV_BLOCK_NUMBERS - 1].timestamp != 0) {\n        uint8 _index = ((twavObservationsIndex + TWAV_BLOCK_NUMBERS) - 1) % TWAV_BLOCK_NUMBERS;\n        TwavObservation memory _twavObservationCurrent = twavObservations[(_index)];\n        TwavObservation memory _twavObservationPrev = twavObservations[(_index + 1) % TWAV_BLOCK_NUMBERS];\n        _twav = (_twavObservationCurrent.cumulativeValuation - _twavObservationPrev.cumulativeValuation) / (_twavObservationCurrent.timestamp - _twavObservationPrev.timestamp);\n    }\n}\n```\n\nTime weighted average valuation (TWAV) is supposed to be the average value of a security over a specified time (e.g. 15 minutes, 1 hour, 24 hours). However, based on the above implementation of the `_getTwav` function, it is not the average value of a security over a specific time.\n\nA user could call the `updateTWAV` function to add the new valuation/observation to the `twavObservations` array each time a new Ethereum block is mined. As such, the current implementation becomes the average value of a security over a specific number of observations (in this case 4 observations), thus it can be considered as Observation weighted average valuation (OWAV).\n\nThere is a fundamental difference between TWAV and OWAV.\n\n### Proof of Concept\n\nIn Ethereum, the average block time is around 15 seconds, so the time to take to mine 4 blocks will be 1 minute. As such, in term of TWAV, the current implementation only have a period of 1 minute, which is too short to prevent price manipulation.\n\nThe following shows an example where it is possible to buy tokens→ increase the valuation above the rejection valuation→ reject the buyout→ dump the tokens within 1 minute:\n\nAssume that a buyer has triggered a buyout on the vault/NFT, and the buyout rejection price is 120 ETH and the current valuation is 100 ETH. Further assume that all elements in the  `twavObservations` array have already been populated.\n\nNote: Fees are ignored to illustrate the issue.\n\n1.  Block 100 at Time 0 - Attacker called `buy` function to increase the current valuation to 120 ETH attempting to reject the buyout.\n2.  Block 101 at Time 15 - Attacker called `updateTWAV` function. The current valuation (120 ETH) will be replaced the first element in `twavObservations` array.\n3.  Block 102 at Time 30 - Attacker called `updateTWAV` function. The current valuation (120 ETH) will be replaced the second element in `twavObservations` array.\n4.  Block 103 at Time 45 - Attacker called `updateTWAV` function. The current valuation (120 ETH) will be replaced the third element in `twavObservations` array.\n5.  Block 104 at Time 60 - Attacker called `sell` function to sell/dump all his shares. Within the `sell` function, `_updateTWAV` will be first called, thus the current valuation (120 ETH) will be replaced the fourth element in `twavObservations` array. Then, the `_rejectBuyout()` will be called, and the `_getTwav` function will be triggered. At this point, the TWAV valuation is finally 120 ETH, thus the buyout is rejected. Subseqently, attacker's shares are burned, and attacker get back his funds.\n\nSince attacker could perform the above attack within 1 minute, it is very unlikely that the attackers will lose money to arbitrageurs as it takes some time for the arbitrageurs to notice such an opportunity.\n\nAttacker could also front-run or set a higher gas fee to ensure that their transaction get mined in the next block to minimize the attack window period.\n\n### Impact\n\nBuyout can be easily rejected by attackers\n\n### Recommended Mitigation Steps\n\nImplement a proper TWAV that provides the average value of a security over a specified time. The time period/windows of the TWAV must be explicitly defined (e.g. 15 minutes, 1 hour, 24 hours) in the contract.\n\nThere are trade offs when choosing the length of the period of time to calculate a TWAP. Longer periods are better to protect against price manipulation, but come at the expense of a slower, and potentially less accurate, price. Thus, the team should determine the optimal period.\n\nConsider referencing the popular Uniswap V2 TWAP design (<https://docs.uniswap.org/protocol/V2/concepts/core-concepts/oracles>)\n\n**[mundhrakeshav (Nibbl) disagreed with severity](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191)**\n\n**[sseefried (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1166158748):**\n > I had a Low Risk ([#142](https://github.com/code-423n4/2022-06-nibbl-findings/issues/142)) associated with `_getTWAV` too. I'm not sure it even averages over 4 observations.\n\n**[Picodes (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1166498885):**\n > Some comments, as I personally don't think it's an high security issue:\n> \n>  - the primary goal of the TWAV here is to avoid manipulations within the same block. As long as it's over multiple blocks, the attackers takes a risk as there could be arbitrages, so the attack risk is mitigated.\n>  \n>   - the main assumption of the issue is:  \"it takes some time for the arbitrageurs to notice such an opportunity, and the 4 block window is too short.\" which seems false when you check on chain data: arbitrageurs are frequently super quick to react as it's their primary job: the first to check an opportunity takes it.\n\n**[HardlyDifficult (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1173080518):**\n > Great summary @Picodes , I agree with both points.\n> \n> Lowering this to a Medium risk. I may be incorrect, but it seems a secondary goal of Twap is price smoothing to avoid scenarios like what was outlined here. If that's correct then this impacts the function of the protocol and the recommendation is a good consideration.\n\n**[dmitriia (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174456950):**\n > Same here, TWAP is essential to the protocol, while the ability to manipulate the price during last minute breaks the core logic of price discovery by greatly reducing the number of participants. The rationale that 4 blocks are enough and arbitrage is generally quick is sufficient for mainstream cases only, all other trading is at risk of direct manipulation, which is existential risk for the protocol. Can't see why the team pressing for medium here. \n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174459120):**\n > > Same here, TWAP is essential to the protocol, while the ability to manipulate the price during last minute breaks the core logic of price discovery by greatly reducing the number of participants. The rationale that 4 blocks are enough and arbitrage is generally quick is sufficient for mainstream cases only, all other trading is at risk of direct manipulation, which is existential risk for the protocol. Can't see why the team pressing for medium here.\n> \n> The stated goal of using Twap in their documentation is the same as above, to prevent same-block attacks. It seems the concern is the implicit behavior expected from using a \"time weighted\" variable. Personally I agree this seems like an area they may want to revisit. However the system behaves correctly and there is a tiny window for bots to respond.\n> \n> @mundhrakeshav @Picodes would you mind elaborating here as well?\n\n**[mundhrakeshav (Nibbl) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174608883):**\n > Yeah, makes sense. We do plan to increase the array length.\n\n**[Picodes (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174707038):**\n > I fully agree with both of you: it'd be indeed better to increase the array length to increase the robustness, but I still feel this is a medium issue as the system works as intended\n\n**[dmitriia (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174787468):**\n > The system formally/technically works as intended, but being a price discovery engine, where participants having incentives to try to determine the NFT price, it will not be used if the window for such a discovery is mere 4 blocks. Formally the bots will have space to react. Realistically it will happen in the most mainstream cases only, when price discovery isn't much needed. I.e. exactly when the system can bring in something new, adding a mechanics for 'slow' usual users to add price information, it will not work as the set of participants who can add the information to the metric (react to move the price) is shrunk by a tiny reaction window. Who will take part in a price discovery game knowing that last minute bots are always can surface? Quite not everyone. This reduces the traction, and so the amount of information brought in by the system, as this is the users who bring in the additional signal, and ultimately it will be a piece of well known NFTs synched with main market with bots, adding no value to it. I.e. the system will work technically, but economically it will not make much sense, so will not be widely used by market actors and can end up provide little value to broad market. This is what I mean by existential risk, which is, of course high. \n> \n> I just feel that here and in general in C4 economic issues are tend to be underestimated, while having one usually tend to be a game changing aspect for a project. \n\n**[IllIllI000 (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1174927014):**\n > @HardlyDifficult If the sponsor had used the term OWAV rather than TWAV, would this still be a medium-severity issue? It seems as though they knew the behavior they wanted (at least four user interactions where the average price is above the threshold) and just used the wrong term to describe it. I didn't file this issue because it seemed that way. The screenshot in this issue shows that they're interested in interactions, not duration of time https://github.com/code-423n4/2022-06-nibbl-findings/issues/144. It's possible they confirmed the issue because they weren't aware that comment vs code consistency issues are usually categorized as low risk\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/191#issuecomment-1175170494):**\n > Great points @dmitriia and @IllIllI000 ! Both are compelling. This is certainly a grey area.\n> \n> Given how significantly this impacts how users would potentially view and interact with the system, I'm inclined to leave this a Medium risk instead of downgrading to Low, falling under \"the function of the protocol or its availability could be impacted\".\n> \n> And since this was intentional design and there is a window for bots to respond, I don't feel that High risk is justified.\n> \n> I'm happy to continue here or on Discord, and would love more input if others want to chime in on the severity here. I don't feel strongly but do think that Medium is the best fit here.\n\n\n\n***\n\n## [[M-05] Lack of sanity check on _initialTokenSupply and _initialTokenPrice can lead to a seller losing his NFT](https://github.com/code-423n4/2022-06-nibbl-findings/issues/24)\n_Submitted by itsmeSTYJ_\n\nThere is no sanity check to ensure that `(primaryReserveRatio * _initialTokenSupply * _initialTokenPrice)` is ≥ `(SCALE * 1e18)`. As a result, `_primaryReserveBalance` is given a value of 0 since divisions in solidity are rounded down. This also means that `primaryReserveBalance` and `fictitiousPrimaryReserveBalance` have a value of 0.\n\nWhen this happens, the `buy` function doesn’t work because `_chargeFee` will revert on [line 222](https://github.com/code-423n4/2022-06-nibbl/blob/main/contracts/NibblVault.sol#L222). You can’t `sell` either since `totalSupply == initialSupply`. The only way to recover the NFT is for the owner of the NFT to call `initiateBuyout` but there is always the possibility that someone else also spotted this mistake and will attempt to also call `initiateBuyout` once the `minBuyoutTime` is reached. If the owner loses this gas war, the owner has effectively lost his NFT.\n\n### Recommended Mitigation Steps\n\nAdd some sanity checks to ensure a sane expected value for `_initialTokenSupply` and `_initialTokenPrice`. There were multiple instances when a user tried to interact with a contract but entered a wrong value because they are not aware they needed to include decimals. A recent example of this is <https://cointelegraph.com/news/1-million-rock-nft-sells-for-a-penny-in-all-ore-nothing-error>.\n\n***\n\n*Note: Normally, I would categorise issues like this as medium severity since it is a loss predicated on having met certain conditions but because there is also a lack of sanity check on `_minBuyoutTime`, it is entirely possible for a seller to lose his NFT immediately once the vault is created. There are many monsters waiting in the dark forest, all it takes is one mistake. That said, I will defer the final judgement to the judges & sponsors.*\n\n**[mundhrakeshav (Nibbl) disputed, disagreed with severity and commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/24#issuecomment-1166304473):**\n > Case when that would happen is _initialTokenSupply or _initialTokenPrice is 0. But then it would revert here\n> https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L183\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/24#issuecomment-1172976012):**\n > > Case when that would happen is _initialTokenSupply or _initialTokenPrice is 0.\n> \n> primaryReserveRatio = 200_000 and SCALE = 1_000_000 -- so it seems this applies anytime _initialTokenSupply * _initialTokenPrice < 1_000_000 * 1e18 / 200_000, not just when one of those values is 0. Please correct me if I got that wrong.\n\n**[HardlyDifficult (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/24#issuecomment-1172977395):**\n > This is a good report. I agree this seems like something that should be addressed. Assuming my math is right, if the initialTokenPrice was 1 wei then the initialTokenSupply must be >= 5e18. They are using the default of 18 decimals (which is also industry standard) so that's 5 tokens. Given this is not very large window and these values impact the curve -- without a clear POC High would not be warranted, downgrading to Medium risk.\n\n\n\n***\n\n## [[M-06] NibblVault: In the buy function, users can avoid paying fees](https://github.com/code-423n4/2022-06-nibbl-findings/issues/14)\n_Submitted by cccz, also found by kenzo, Lambda, WatchPug, xiaoming90, and zzzitron_\n\nIn the buy function of the NibblVault contract, when msg.value > \\_lowerCurveDiff, the fee for SecondaryCurve part  is not charged.\n\n                if (_lowerCurveDiff >= msg.value) {\n                    _purchaseReturn = _buySecondaryCurve(msg.value, _totalSupply);\n                } else {\n                    //Gas Optimization\n                    _purchaseReturn = _initialTokenSupply - _totalSupply;\n                    secondaryReserveBalance += _lowerCurveDiff;\n                    // _purchaseReturn = _buySecondaryCurve(_to, _lowerCurveDiff);\n                    _purchaseReturn += _buyPrimaryCurve(msg.value - _lowerCurveDiff, _totalSupply + _purchaseReturn);\n                } \n\n### Proof of Concept\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L314-L323>\n\n### Recommended Mitigation Steps\n\nThe fee for the SecondaryCurve part is complex to charge. I implemented the \\_caculateFeeSecondaryCurve and \\_reverseFeeSecondaryCurve functions to do the relevant calculations.\n\nThe \\_caculateFeeSecondaryCurve function is used to calculate the value after the fee is charged, but not to actually charge the fee. The \\_reverseFeeSecondaryCurve function is used to calculate the value before the fee is charged.\n\n                if (_lowerCurveDiff >= _caculateFeeSecondaryCurve(msg.value)) {\n                    _purchaseReturn = _buySecondaryCurve(msg.value, _totalSupply);\n                } else {\n                    //Gas Optimization\n                    _purchaseReturn = _initialTokenSupply - _totalSupply;\n                    secondaryReserveBalance += _lowerCurveDiff;\n                    uint256 _amount = _reverseFeeSecondaryCurve(_lowerCurveDiff);\n                    _chargeFeeSecondaryCurve(_amount);\n                    // _purchaseReturn = _buySecondaryCurve(_to, _lowerCurveDiff);\n                    _purchaseReturn += _buyPrimaryCurve(msg.value - _amount, _totalSupply + _purchaseReturn);\n                } \n\n```\n\n    function _caculateFeeSecondaryCurve(uint256 _amount) private returns(uint256) {\n       address payable _factory = factory;\n        uint256 _adminFeeAmt = NibblVaultFactory(_factory).feeAdmin();\n        uint256 _feeAdmin = (_amount * _adminFeeAmt) / SCALE ;\n        uint256 _feeCurator = (_amount * curatorFee) / SCALE ;\n        return _amount - (_feeAdmin + _feeCurator);\n    }\n    function _reverseFeeSecondaryCurve(uint256 _amount) private returns(uint256) {\n       address payable _factory = factory;\n        uint256 _adminFeeAmt = NibblVaultFactory(_factory).feeAdmin();\n        return _amount * SCALE / (SCALE - (_adminFeeAmt + curatorFee));\n    }\n```\n\n**[mundhrakeshav (Nibbl) acknowledged, but disagreed with severity](https://github.com/code-423n4/2022-06-nibbl-findings/issues/14)**\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/14#issuecomment-1173125051):**\n > Failing to collect fees is a form of leaking value for the curator and therefore falls into the Medium risk definition -- keeping the severity as reported.\n\n\n\n***\n\n## [[M-07]  `_updateTwav()` and `_getTwav()` will revert when cumulativePrice overflows](https://github.com/code-423n4/2022-06-nibbl-findings/issues/246)\n_Submitted by peritoflores, also found by WatchPug_\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L28>\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L40>\n\n### Impact\n\nContract will break when `cumulativeValuation` overflows.\n\n### Proof of Concept\n\nCumulative prices are designed to work with overflows/underflows because in the end  the difference is important.\n\nIn `_updateTwav()`  when \\_`prevCumulativeValuation + (_valuation *_timeElapsed)`  overflows the contract will not work anymore.\n\n    twavObservations[twavObservationsIndex] = TwavObservation(_blockTimestamp, _prevCumulativeValuation + (_valuation * _timeElapsed)); //add the previous observation to make it cumulative @audit overflow breaks the contract\n\nSame  problem in `_getTwav()`\n\n      _twav = (_twavObservationCurrent.cumulativeValuation - _twavObservationPrev.cumulativeValuation) / (_twavObservationCurrent.timestamp - _twavObservationPrev.timestamp);@audit same overflow breaks the contract\n\n    }\n\n### Similar issues\n\n<https://github.com/code-423n4/2022-04-phuture-findings/issues/62>\n\n### Recommended Mitigation\n\nAdd unchecked keyword in every line you add / subtract cumulative prices.\n\n**[mundhrakeshav (Nibbl) acknowledged](https://github.com/code-423n4/2022-06-nibbl-findings/issues/246)** \n\n\n**[HardlyDifficult (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/246#issuecomment-1172978466):**\n > Without a better POC of the issue occurring it's hard to justify this is High risk. e.g. maybe it could be forced by spamming `updateTWAV`, but it's not clear if that would require extremely large values or an unrealistic number of transactions.\n> \n> Related to https://github.com/code-423n4/2022-06-nibbl-findings/issues/178, that one includes unchecking the price in the recommendation but the rest of the description focuses on timestamp overflows while this one looks at price overflows.\n\n\n\n***\n\n## [[M-08] [PNM-004] Calculation of `_secondaryReserveRatio` can be overflowed](https://github.com/code-423n4/2022-06-nibbl-findings/issues/273)\n_Submitted by PwnedNoMore, also found by ych18_\n\n`uint32 _secondaryReserveRatio = uint32((msg.value * SCALE * 1e18) / (_initialTokenSupply * _initialTokenPrice));`\n\n`_secondaryReserveRatio` can be overflowed by setting a relatively small `_initialTokenSupply` and `_initialTokenPrice`. The result will be truncated by `uint32`, causing an overflow.\n\nThis overflow can bypass all the checks in function `initialize`. Any following functionality will be impacted since the `_secondaryReserveRatio` is incorrect.\n\n### Proof of Concept / Attack Scenario\n\n*   The user provide `_initialTokenSupply` and `_initialTokenPrice`, which meets `SCALE * 1e18 == _initialTokenSupply * _initialTokenPrice`\n*   The `msg.value` is set as `2 ** 32 + X`, where `MIN_SECONDARY_RESERVE_RATIO <= X <= primaryReserveRatio`. Note that `msg.value` is in Wei, so the deposited fund is not huge.\n\n### Suggested Fix\n\nAdd overflow checks.\n\n**[mundhrakeshav (Nibbl) acknowledged](https://github.com/code-423n4/2022-06-nibbl-findings/issues/273)**\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/273#issuecomment-1173223715):**\n > OpenZeppelin has safe cast helpers that could be leveraged here.\n> \n> It is concerning that due to the truncation here, the configuration would not work how the user expects given the input parameters. And at this point the NFT has been escrowed into the vault. Because of this it seems Medium risk is a fair assessment. \n\n\n\n***\n\n## [[M-09] NibblVault buyout duration longer than update timelock](https://github.com/code-423n4/2022-06-nibbl-findings/issues/278)\n_Submitted by reassor_\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/NibblVaultFactoryData.sol#L6>\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L158-L169>\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L37>\n\n### Impact\n\nUser can buy out NFT by initiating the process through `initiateBuyout`, then he has to wait `BUYOUT_DURATION` which is 5 days and if the buyout will not get rejected he can claim the NFT. During that period bidder cannot cancel the process. The issue is that since `NibblVault` is used through proxy it is possible to change its implementation through administrative functionality in `NibblVaultFactory` and the timelock for update'ing implementation is only 2 days.\n\nAttack Scenario:\n\n1.  Bidder initiates buyout through `initiateBuyout`\n2.  Administrator of the protocol updates the `vaultImplementation` through `proposeNewVaultImplementation`\n3.  Bidder really does not like new implementation but cannot cancel buyout process\n4.  Administrator waits 2 days (the `UPDATE_TIME`) uses `updateVaultImplementation` and changes the implementation\n5.  Bidder loses funds/fait in the protocol\n\n### Proof of Concept\n\n*   <https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/NibblVaultFactoryData.sol#L6>\n\n*   <https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L158-L169>\n\n*   <https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L37>\n\n### Tools Used\n\nManual Review / VSCode\n\n### Recommended Mitigation Steps\n\nIt is recommended to either implement functionality for bidder to cancel the bid or increase/decrease the `UPDATE_TIME`/`BUYOUT_DURATION` so the invariant `BUYOUT_DURATION < UPDATE_TIME` holds.\n\n**[mundhrakeshav (Nibbl) acknowledged, but disagreed with severity](https://github.com/code-423n4/2022-06-nibbl-findings/issues/278)** \n\n**[HardlyDifficult (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/278#issuecomment-1172985223):**\n > It seems the bidder could be left in a bad state, and updating the thresholds here may be a nice way to maintain expectations. Since this scenario is based on the admin making an undesirable change, this is a Medium risk report.\n\n\n\n***\n\n## [[M-10] Reentrancy bug in Basket's withdraw multiple tokens function which gives attacker ability to transfer basket ownership and spend it but withdraw all the tokens out of basket](https://github.com/code-423n4/2022-06-nibbl-findings/issues/185)\n_Submitted by unforgiven_\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L41-L47>\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L68-L75>\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L91-L97>\n\n### Impact\n\n`Basket` is used for keep multiple tokens in contract and mint one `NFT` token to represent their ownership. `Basket` only allows for owner of `NFT(id=0)` to withdraw tokens from `Basket` address. users can deposit multiple tokens in one `Basket` and then create a `NibbVault` based on that `Basket NFT`. but due to reentrancy vulnerability in `Basket` it's possible to call the multiple-token-withdraw functions (`withdrawMultipleERC721()`, `withdrawMultipleERC1155()`, `withdrawMultipleERC721()` and `withdrawMultipleERC20()`) and in the middle their external calls, spend `Basket NFT` (transfer ownership of `id=0` to other contract, for example `createVault()`) and receive some fund from other, then in the rest of the multiple-token-withdraw function withdraw all the basket tokens. `Basket` shouldn't allow transferring ownership of `id=0` in the middle of multiple token withdraws.\n\n### Proof of Concept\n\nThis is `withdrawMultipleERC721()` code:\n\n        function withdrawMultipleERC721(address[] memory _tokens, uint256[] memory _tokenId, address _to) external override {\n            require(_isApprovedOrOwner(msg.sender, 0), \"withdraw:not allowed\");\n            for (uint256 i = 0; i < _tokens.length; i++) {\n                IERC721(_tokens[i]).safeTransferFrom(address(this), _to, _tokenId[i]);\n                emit WithdrawERC721(_tokens[i], _tokenId[i], _to);\n            }\n        }\n\nAs you can see, contract only checks the ownership of `id=0` in the beginning of the function to see that user allowed to perform this action or not. then it iterates through user specified addresses and call `safeTransferFrom()` function in those address by user specified values. the bug is that in the middle of the external calls attacker can spend `Basket NFT id=0` (give ownership of that basket to other contracts and receive fund from them, for example attacker can call `createVault` in `NibblVaultFactory` and create a vault and call other contracts to invest in that vault) then in the rest of the iterations in `withdrawMultipleERC721()` attacker can withdraw `Basket` tokens. so even so the ownership of the `Basket` has been transferred and attacker received funds for it, attacker withdraw `Basket` tokens too.\n\nThis is the steps attacker would perform:\n\n1.  Create a `Basket` with well known `NFT` token list. let's assume the `Basket` name is `Basket_M`\n2.  Give approve permission to `NibblVaultFactory` for `Basket_M id=0` token.\n3.  Call `Basket_M.withdrawMultipleERC721(address[] memory _tokens, uint256[] memory _tokenId, address _to)` with list of all the tokens in basket to withdraw all of them, but the first address in the `_tokens` list is the address that attacker controls.\n4.  `Basket_M` would check that attacker is owner of the basket (owner of the `id = 0`) and in first iteration of the `for` it would call attacker controlled address which is a contract that attacker wrote its code.\n5.  Attacker contract would call `NibblVaultFactory.createVault()` with `Basket_M` address and `id=0` to create a vault which then transfer the ownership of `Basket_M id=0` to the vault address. let's assume it's `Vault_M`.\n6.  Attacker contract would buy some fraction of `Vault_M` by calling `buy()` function.\n7.  Let's assume there are other contracts(call it `Invest_Contract`) that would want to buy fraction of the well known `NFT`s in the basket and `Invest_Contract` invest some fund in vault having those `NFT` in vault's address or vault's basket just by calling `Invest_Contract`. attacker contract would call `Invest_Contract`  to invest in `Vault_M` and `Invest_Contract` would check that well known `NFT` is in `Basket_M id=0` which belongs to `Vault_M` to it would invest money on it by calling `initiateBuyout()`\n8.  Attacker contract then withdraw his money from `Vault_M` .\n9.  The rest of `Basket_M.withdrawMultipleERC721()` for iterations performs and all the `NFT` tokens of the `Basket_M` would be send to attacker and `Basket_M` would have nothing.\n\nSteps 5 to 8 can be other things, the point is in those steps attacker would spent `Basket_M` and receive some fund from other contract while those other contracts checks that they are owner of the `Basket_M` which has well known `NFT` tokens, but in fact attacker withdraw those well known `NFT` tokens from `Basket_M` after spending it in the rest of the `withdrawMultipleERC721()` iterations. (those above step 5-8 is just a sample case)\n\nSo `Basket` shouldn't allow ownership transfer in the middle of the `Basket_M.withdrawMultipleERC721()` and similar multiple-token-withdraw functions or it should check the ownership in every iteration.\n\n### Tools Used\n\nVIM\n\n### Recommended Mitigation Steps\n\nCheck ownership of `id=0` in every iteration or don't allow ownership transfer in the multiple-token-transfer functions.\n\n**[mundhrakeshav (Nibbl) disputed](https://github.com/code-423n4/2022-06-nibbl-findings/issues/185)** \n\n**[Alex the Entreprenerd (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1166658269):**\n > Contract checks if you own it as owner of Basket has bought it, and as such is entitled to underlying tokens.\n\n**[KenzoAgada (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1166696834):**\n > The attack is contingent on a regular user, creating a smart contract, which allows anybody to call it, which checks that a parameter-supplied Nibbl vault contains a Nibbl basket which contains a specific NFT, and then proceeds to buyout/buy shares of that vault.\n> \n> Honestly it seems like the vector of attack is possible but quite far fetched.\n\n**[HardlyDifficult (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1173071137):**\n > Creative thinking, this is what I'm here for!\n> \n> If I'm following the flow correctly.. you kick off a bulk withdraw from the basket, the first NFT in the list is a malicious contract which then creates a vault for that basket (so the contract needs to be the basket owner, which is okay). Now the vault is fully created for that basket which still has valuable NFTs in it but you're mid-tx. Your malicious contract pings other contracts which can be prompted to ape in via on-chain logic -- their logic confirms all looks well and buys. But then control returns to the original batch withdrawal and the basket is drained.\n> \n> > Honestly it seems like the vector of attack is possible but quite far fetched.\n> \n> I think I'd agree. To put it in terms of risk, this is not High: \"valid attack path that does not have hand-wavy hypotheticals\" -- this sounds a bit hand-wavy. Namely because it assumes `Invest_Contract` allows any address to trigger a purchase using other users funds which seems risky. And the victim here is `Invest_Contract`, not regular users of the protocol. Lowering to Medium. Great stuff though.\n\n**[Alex the Entreprenerd (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1173125303):**\n > The finding in essence is claiming that you can setup an empty `Basket` and sell it to external contracts, and those contracts would lose funds.\n> \n> If that were the case the vulnerability would be in the \"sniping / buying\" contracts and not in the Basket nor the Vault.\n> \n> The only thing the warden has shown is that they can create a Basket with a malicious token and through that they can call the Factory to create a Vault which after the tx will be empty.\n> \n> This is logically equivalent to selling an empty vault, or selling a vault of `BryptoPunks` (typo on purpose, it's a scam token).\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1173126326):**\n > @Alex the Entreprenerd -\n> I agree in terms of normal usage. The key here is a 3rd party contract uses on-chain logic in order to authorize a purchase. If that were the case, while in the middle of the attack as described all checks that contract may perform would confirm assets were included and terms look good -- it would not be able to determine that the basket was in the middle of a batch withdraw request. Let me know if I'm overlooking something.\n> \n> The basket itself does not need to hold a malicious token -- the withdraw request takes an array of addresses, so the malicious contract only need to appear there.\n\n**[Alex the Entreprenerd (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1173140273):**\n > > If that were the case, while in the middle of the attack as described all checks that contract may perform would confirm assets were included and terms look good -- it would not be able to determine that the basket was in the middle of a batch withdraw request. Let me know if I'm overlooking something.\n> \n> The 3rd party contract would need to check that the Basket is properly set via `ownerOf(Basket) == Vault` (where Vault is an address contained in the list of `nibbledVaults` from factory).\n\n> That would allow to determine if the contract is properly setup.\n> \n> > The basket itself does not need to hold a malicious token,\n>  \n> That is correct as you can setup any contract to accept the `safeTransferFrom` call.\n> \n> My statement is that an automated 3rd party contract can get rekt, but that's not the contract under audit.\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/185#issuecomment-1173175820):**\n > Agree that it's the 3rd party contract that suffers a loss.\n> \n> An `ownerOf(Basket) == Vault && ownerOf(NFT) == Basket` check is insufficient here because if it's in the middle of this scenario then the owner checks will appear legit but by the end of the tx they won't be. That's the part that I'm still hung up on. Part of the Medium definition is \"the function of the protocol or its availability could be impacted\" -- although not an explicit goal, is it not implicit that protocols can be built upon with other contracts. The concern here seems to limit that ability, one could not build a contract that decided to participate based on on-chain state alone w/ or w/o an allow list of NFTs -- it would require a trusted actor to allow list specific vaults or to perform the action itself.\n> \n> This is certainly grey though. Very hypothetical, e.g. it's not clear that a 3rd party contract would ever be interested in a capability like this. This is an interesting discussion! I'll sleep on it, but please chime in if you have more to add - I appreciate the feedback.\n\n\n\n***\n\n## [[M-11] Twav._getTwav() will return a wrong result when twavObservations[TWAV_BLOCK_NUMBERS - 1].timestamp = 0.](https://github.com/code-423n4/2022-06-nibbl-findings/issues/112)\n_Submitted by hansfriese_\n\nThe \"if\" condition of Twav.\\_getTwav() is missing some edge cases.\n\nIn this case, this function will return 0 which is different from the correct value and it will affect the main functions like NibblVault.buy() and NibblVault.sell().\n\n### Proof of Concept\n\nI think this condition is to confirm at least 4 values were saved for twav calculation.\n\nBtw this timestamp would be zero even though there are more than 4 values properly as it's modularized by 2\\*\\*32.\n\nIn this case, the if condition will be false and this function will return 0.\n\n### Tools Used\n\nSolidity Visual Developer of VSCode\n\n### Recommended Mitigation Steps\n\nI see \"cumulativeValuation\" is increasing all the time and recommend replacing \"timestamp\" with \"cumulativeValuation\".\n\n    if (twavObservations[TWAV_BLOCK_NUMBERS - 1].cumulativeValuation != 0) {\n\n**[mundhrakeshav (Nibbl) confirmed and resolved](https://github.com/code-423n4/2022-06-nibbl-findings/issues/112#issuecomment-1172055034)**\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/112#issuecomment-1173189926):**\n > Interesting catch. This is related to [#178](https://github.com/code-423n4/2022-06-nibbl-findings/issues/178) but presents a distinct issue.\n\n\n\n***\n\n## [[M-12] Basket NFT have no name and symbol](https://github.com/code-423n4/2022-06-nibbl-findings/issues/317)\n_Submitted by Picodes, also found by cccz_\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L13>\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L6>\n\n### Impact\n\nThe `Basket` contract is intended to be used behind a proxy. But the `ERC721` implementation used is not upgradeable, and its constructor is called at deployment time on the implementation. So all proxies will have a void name and symbol, breaking all potential integrations and listings.\n\n### Proof of Concept\n\n`ERC721(\"NFT Basket\", \"NFTB\")` is called at deployment time, and sets private variable at the implementation level. Therefore when loading the code during `delegateCall`, these variables will not be initialized.\n\n### Recommended Mitigation Steps\n\nThe easiest mitigation would be to pass this variable as immutable so they are hardcoded in the implementation byte code.\n\n**[mundhrakeshav (Nibbl) confirmed](https://github.com/code-423n4/2022-06-nibbl-findings/issues/317)** \n\n**[Alex the Entreprenerd (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/317#issuecomment-1166657024):**\n > Finding is valid, impact is the name of the tokens.\n\n**[HardlyDifficult (judge) decreased severity to QA and commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/317#issuecomment-1172563153):**\n > Confirmed this is an issue.\n> \n> Assets are not at risk, and the function of the protocol is not impacted. All baskets created will have an empty name/symbol but generally there is no requirement that these values are populated. It's mostly for a better experience on frontends including etherscan. Downgrading and merging with the warden's QA report #314.\n\n**[Picodes (warden) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/317#issuecomment-1174704129):**\n > @HardlyDifficult Indeed it does not break the protocol's logic and funds are not at risk, but the name and the symbol of the NFTs are not the ones chosen by the sponsor, and as it's the core of EIP721Metadata we could argue that the function of the protocol are impacted. \n> Also the experience on frontends (etherscan, opensea, etc) would have been significantly degraded. It could easily be considered a medium issue to me - especially considering the previous comments / reactions and the label \"confirmed\" added by the sponsor while it was high.\n\n**[HardlyDifficult (judge) increased severity to Medium and commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/317#issuecomment-1175198116):**\n > Thanks @Picodes! I can get onboard with that line of thinking. Given how significant these fields are for 3rd party integrators such as Etherscan and Opensea this can be considered to fall under that definition of Medium risk. I'll upgrade this report and the dupes to Medium.\n\n\n\n***\n\n\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 82 reports were submitted by wardens detailing low risk and non-critical issues. The [report highlighted below](https://github.com/code-423n4/2022-06-nibbl-findings/issues/139) by **IllIllI** received the top score from the judge.\n\n*The following wardens also submitted reports: [BowTiedWardens](https://github.com/code-423n4/2022-06-nibbl-findings/issues/236), [joestakey](https://github.com/code-423n4/2022-06-nibbl-findings/issues/181), [0x1f8b](https://github.com/code-423n4/2022-06-nibbl-findings/issues/34), [reassor](https://github.com/code-423n4/2022-06-nibbl-findings/issues/286), [0x29A](https://github.com/code-423n4/2022-06-nibbl-findings/issues/182), [codexploder](https://github.com/code-423n4/2022-06-nibbl-findings/issues/41), [Chom](https://github.com/code-423n4/2022-06-nibbl-findings/issues/252), [hyh](https://github.com/code-423n4/2022-06-nibbl-findings/issues/220), [berndartmueller](https://github.com/code-423n4/2022-06-nibbl-findings/issues/130), [xiaoming90](https://github.com/code-423n4/2022-06-nibbl-findings/issues/209), [defsec](https://github.com/code-423n4/2022-06-nibbl-findings/issues/167), [ellahi](https://github.com/code-423n4/2022-06-nibbl-findings/issues/297), [0xNineDec](https://github.com/code-423n4/2022-06-nibbl-findings/issues/133), [cloudjunky](https://github.com/code-423n4/2022-06-nibbl-findings/issues/147), [catchup](https://github.com/code-423n4/2022-06-nibbl-findings/issues/98), [cryptphi](https://github.com/code-423n4/2022-06-nibbl-findings/issues/74), [cccz](https://github.com/code-423n4/2022-06-nibbl-findings/issues/160), [c3phas](https://github.com/code-423n4/2022-06-nibbl-findings/issues/280), [0xNazgul](https://github.com/code-423n4/2022-06-nibbl-findings/issues/60), [0xf15ers](https://github.com/code-423n4/2022-06-nibbl-findings/issues/240), [unforgiven](https://github.com/code-423n4/2022-06-nibbl-findings/issues/174), [shenwilly](https://github.com/code-423n4/2022-06-nibbl-findings/issues/120), [StErMi](https://github.com/code-423n4/2022-06-nibbl-findings/issues/96), [oyc_109](https://github.com/code-423n4/2022-06-nibbl-findings/issues/16), [Lambda](https://github.com/code-423n4/2022-06-nibbl-findings/issues/53), [kenta](https://github.com/code-423n4/2022-06-nibbl-findings/issues/187), [sorrynotsorry](https://github.com/code-423n4/2022-06-nibbl-findings/issues/259), [JohnSmith](https://github.com/code-423n4/2022-06-nibbl-findings/issues/87), [UnusualTurtle](https://github.com/code-423n4/2022-06-nibbl-findings/issues/296), [Tadashi](https://github.com/code-423n4/2022-06-nibbl-findings/issues/321), [sseefried](https://github.com/code-423n4/2022-06-nibbl-findings/issues/142), [simon135](https://github.com/code-423n4/2022-06-nibbl-findings/issues/293), [pashov](https://github.com/code-423n4/2022-06-nibbl-findings/issues/307), [zzzitron](https://github.com/code-423n4/2022-06-nibbl-findings/issues/149), [saian](https://github.com/code-423n4/2022-06-nibbl-findings/issues/214), [robee](https://github.com/code-423n4/2022-06-nibbl-findings/issues/227), [minhquanym](https://github.com/code-423n4/2022-06-nibbl-findings/issues/310), [MadWookie](https://github.com/code-423n4/2022-06-nibbl-findings/issues/287), [JMukesh](https://github.com/code-423n4/2022-06-nibbl-findings/issues/245), [asutorufos](https://github.com/code-423n4/2022-06-nibbl-findings/issues/217), [Picodes](https://github.com/code-423n4/2022-06-nibbl-findings/issues/314), [rfa](https://github.com/code-423n4/2022-06-nibbl-findings/issues/284), [TerrierLover](https://github.com/code-423n4/2022-06-nibbl-findings/issues/172), [dipp](https://github.com/code-423n4/2022-06-nibbl-findings/issues/229), [MiloTruck](https://github.com/code-423n4/2022-06-nibbl-findings/issues/157), [SmartSek](https://github.com/code-423n4/2022-06-nibbl-findings/issues/255), [naps62](https://github.com/code-423n4/2022-06-nibbl-findings/issues/151), [TomJ](https://github.com/code-423n4/2022-06-nibbl-findings/issues/237), [apostle0x01](https://github.com/code-423n4/2022-06-nibbl-findings/issues/25), [zuhaibmohd](https://github.com/code-423n4/2022-06-nibbl-findings/issues/58), [Wayne](https://github.com/code-423n4/2022-06-nibbl-findings/issues/117), [Waze](https://github.com/code-423n4/2022-06-nibbl-findings/issues/152), [kebabsec](https://github.com/code-423n4/2022-06-nibbl-findings/issues/153), [PwnedNoMore](https://github.com/code-423n4/2022-06-nibbl-findings/issues/264), [exd0tpy](https://github.com/code-423n4/2022-06-nibbl-findings/issues/83), [Alex the Entreprenerd](https://github.com/code-423n4/2022-06-nibbl-findings/issues/283), [Tomio](https://github.com/code-423n4/2022-06-nibbl-findings/issues/69), [Varun_Verma](https://github.com/code-423n4/2022-06-nibbl-findings/issues/298), [0xc0ffEE](https://github.com/code-423n4/2022-06-nibbl-findings/issues/234), [hansfriese](https://github.com/code-423n4/2022-06-nibbl-findings/issues/113), [Treasure-Seeker](https://github.com/code-423n4/2022-06-nibbl-findings/issues/26), [delfin454000](https://github.com/code-423n4/2022-06-nibbl-findings/issues/210), [Limbooo](https://github.com/code-423n4/2022-06-nibbl-findings/issues/91), [JC](https://github.com/code-423n4/2022-06-nibbl-findings/issues/311), [0xkatana](https://github.com/code-423n4/2022-06-nibbl-findings/issues/100), [masterchief](https://github.com/code-423n4/2022-06-nibbl-findings/issues/285), [fatherOfBlocks](https://github.com/code-423n4/2022-06-nibbl-findings/issues/79), [slywaters](https://github.com/code-423n4/2022-06-nibbl-findings/issues/270), [peritoflores](https://github.com/code-423n4/2022-06-nibbl-findings/issues/289), [sashik_eth](https://github.com/code-423n4/2022-06-nibbl-findings/issues/322), [_Adam](https://github.com/code-423n4/2022-06-nibbl-findings/issues/123), [Funen](https://github.com/code-423n4/2022-06-nibbl-findings/issues/239), [Nyamcil](https://github.com/code-423n4/2022-06-nibbl-findings/issues/124), [sach1r0](https://github.com/code-423n4/2022-06-nibbl-findings/issues/81), [Randyyy](https://github.com/code-423n4/2022-06-nibbl-findings/issues/299), [0x52](https://github.com/code-423n4/2022-06-nibbl-findings/issues/88), [ElKu](https://github.com/code-423n4/2022-06-nibbl-findings/issues/171), [Nethermind](https://github.com/code-423n4/2022-06-nibbl-findings/issues/215), [RoiEvenHaim](https://github.com/code-423n4/2022-06-nibbl-findings/issues/242), [ych18](https://github.com/code-423n4/2022-06-nibbl-findings/issues/196), and [Noah3o6](https://github.com/code-423n4/2022-06-nibbl-findings/issues/225).*\n\n## Low Risk Issues\n\n|   | Issue                                                                                                               | Instances |\n| - | :------------------------------------------------------------------------------------------------------------------ | :-------: |\n| 1 | Buyouts that occur during the timestamp wrap will have valuation errors                                             |     1     |\n| 2 | `ecrecover()` not checked for signer address of zero                                                                |     1     |\n| 3 | Return values of `transfer()`/`transferFrom()` not checked                                                          |     4     |\n| 4 | Input array lengths may differ                                                                                      |     4     |\n| 5 | `_safeMint()` should be used rather than `_mint()` wherever possible                                                |     1     |\n| 6 | Missing checks for `address(0x0)` when assigning values to `address` state variables                                |     6     |\n| 7 | Vulnerable to cross-chain replay attacks due to static `DOMAIN_SEPARATOR`/`domainSeparator`                         |     1     |\n| 8 | Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions |     1     |\n| 9 | Incorrect comments                                                                                                  |     3     |\n\nTotal: 22 instances over 9 issues\n\n## [L-01] Buyouts that occur during the timestamp wrap will have valuation errors\n\nThe `_blockTimestamp` has a modulo applied, so at some point, there will be a timestamp with a value close to 2^32, followed by a timestamp close to zero. The `_updateTWAV` function does an unchecked subtraction of the two timestamps, so this will lead to an underflow, making the valuation based on a long time period rather than the actual one. Until more TWAV entries are added, valuations will be wrong\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol   #1\n\n303              uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n304              if (_blockTimestamp != lastBlockTimeStamp) {\n305:                 _updateTWAV(getCurrentValuation(), _blockTimestamp);   \n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L303-L305>\n\n## [L-02] `ecrecover()` not checked for signer address of zero\n\nThe `ecrecover()` function returns an address of zero when the signature does not match. This can cause problems if address zero is ever the owner of assets, and someone uses the permit function on address zero. If that happens, any invalid signature will pass the checks, and the assets will be stealable. In this case, the asset of concern is the vault's ERC20 token, and fortunately OpenZeppelin's implementation does a good job of making sure that address zero is never able to have a positive balance. If this contract ever changes to another ERC20 implementation that is laxer in its checks in favor of saving gas, this code may become a problem.\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol   #1\n\n563:         address signer = ecrecover(toTypedMessageHash(structHash), v, r, s);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L563>\n\n## [L-03] Return values of `transfer()`/`transferFrom()` not checked\n\nNot all `IERC20` implementations `revert()` when there's a failure in `transfer()`/`transferFrom()`. The function signature has a `boolean` return value and they indicate errors that way instead. By not checking the return value, operations that should have marked as failed, may potentially go through without actually making a payment\n\n*There are 4 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol   #1\n\n87:           IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L87>\n\n```solidity\nFile: contracts/Basket.sol   #2\n\n94:               IERC20(_tokens[i]).transfer(msg.sender, IERC20(_tokens[i]).balanceOf(address(this)));\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L94>\n\n```solidity\nFile: contracts/NibblVault.sol   #3\n\n517:          IERC20(_asset).transfer(_to, IERC20(_asset).balanceOf(address(this)));\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L517>\n\n```solidity\nFile: contracts/NibblVault.sol   #4\n\n526:              IERC20(_assets[i]).transfer(_to, IERC20(_assets[i]).balanceOf(address(this)));\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L526>\n\n## [L-04] Input array lengths may differ\n\nIf the caller makes a copy-paste error, the lengths may be mismatchd and an operation believed to have been completed may not in fact have been completed\n\n*There are 4 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol   #1\n\n41:      function withdrawMultipleERC721(address[] memory _tokens, uint256[] memory _tokenId, address _to) external override {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L41>\n\n```solidity\nFile: contracts/Basket.sol   #2\n\n68:      function withdrawMultipleERC1155(address[] memory _tokens, uint256[] memory _tokenIds, address _to) external override {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L68>\n\n```solidity\nFile: contracts/NibblVault.sol   #3\n\n545:     function withdrawMultipleERC1155(address[] memory _assets, uint256[] memory _assetIDs, address _to) external override boughtOut {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L545>\n\n```solidity\nFile: contracts/NibblVault.sol   #4\n\n504:     function withdrawMultipleERC721(address[] memory _assetAddresses, uint256[] memory _assetIDs, address _to) external override boughtOut {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L504>\n\n## [L-05] `_safeMint()` should be used rather than `_mint()` wherever possible\n\n`_mint()` is [discouraged](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/d4d8d2ed9798cc3383912a23b5e8d5cb602f7d4b/contracts/token/ERC721/ERC721.sol#L271) in favor of `_safeMint()` which ensures that the recipient is either an EOA or implements `IERC721Receiver`. Both [OpenZeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/d4d8d2ed9798cc3383912a23b5e8d5cb602f7d4b/contracts/token/ERC721/ERC721.sol#L238-L250) and [solmate](https://github.com/Rari-Capital/solmate/blob/4eaf6b68202e36f67cab379768ac6be304c8ebde/src/tokens/ERC721.sol#L180) have versions of this function\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Basket.sol   #1\n\n24:           _mint(_curator, 0);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L24>\n\n## [L-06] Missing checks for `address(0x0)` when assigning values to `address` state variables\n\n*There are 6 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol\n\n191:          assetAddress = _assetAddress;\n\n193:          curator = _curator;\n\n487:          curator = _newCurator;\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L191>\n\n```solidity\nFile: contracts/NibblVaultFactory.sol\n\n100:         pendingBasketImplementation = _newBasketImplementation;\n\n124:         pendingFeeTo = _newFeeAddress;\n\n159:         pendingVaultImplementation = _newVaultImplementation;\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L100>\n\n## [L-07] Vulnerable to cross-chain replay attacks due to static `DOMAIN_SEPARATOR`/`domainSeparator`\n\nSee [this](https://github.com/code-423n4/2021-04-maple-findings/issues/2) issue from a prior contest for details\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Utilities/EIP712Base.sol   #1\n\n15       function INIT_EIP712(string memory name, string memory version) internal {\n16           domainSeperator = keccak256(\n17               abi.encode(\n18                   EIP712_DOMAIN_TYPEHASH,\n19                   keccak256(bytes(name)),\n20                   keccak256(bytes(version)),\n21                   getChainID(),\n22                   address(this)\n23               )\n24           );\n25:      }\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L15-L25>\n\n## [L-08] Upgradeable contract is missing a `__gap[50]` storage variable to allow for new storage variables in later versions\n\nSee [this](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps) link for a description of this storage variable. While some contracts may not currently be sub-classed, adding the variable now protects against forgetting to add it in the future.\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol   #1\n\n20:   contract NibblVault is INibblVault, BancorFormula, ERC20Upgradeable, Twav, EIP712Base {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L20>\n\n## [L-09] Incorrect comments\n\n*There are 3 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol   #1\n\n/// @audit ERC1155, not ERC721\n58:      /// @notice withdraw an ERC721 token from this contract into your wallet\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L58>\n\n```solidity\nFile: contracts/Twav/Twav.sol   #2\n\n/// @audit or zero if there have been fewer than four blocks\n34:      /// @return _twav TWAV of the last 4 blocks\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L34>\n\n```solidity\nFile: contracts/Twav/Twav.sol   #3\n\n/// @audit of the last four updates, not necessarily of the last four blocks (i.e. may be blocked that were skipped)\n34:      /// @return _twav TWAV of the last 4 blocks\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L34>\n\n## Non-Critical Issues\n\n|    | Issue                                                                                                          | Instances |\n| -- | :------------------------------------------------------------------------------------------------------------- | :-------: |\n| 1  | Consider addings checks for signature malleability                                                             |     1     |\n| 2  | Misleading variable name                                                                                       |     1     |\n| 3  | Inconsistent version of English being used                                                                     |     2     |\n| 4  | Missing `initializer` modifier on constructor                                                                  |     1     |\n| 5  | Contract implements interface without extending the interface                                                  |     1     |\n| 6  | `require()`/`revert()` statements should have descriptive reason strings                                       |     1     |\n| 7  | `public` functions not called by the contract should be declared `external` instead                            |     3     |\n| 8  | Non-assembly method available                                                                                  |     1     |\n| 9  | `2**<n> - 1` should be re-written as `type(uint<n>).max`                                                       |     4     |\n| 10 | `constant`s should be defined rather than using magic numbers                                                  |     10    |\n| 11 | Cast is more restrictive than the type of the variable being assigned                                          |     1     |\n| 12 | Missing event and or timelock for critical parameter change                                                    |     4     |\n| 13 | Expressions for constant values such as a call to `keccak256()`, should use `immutable` rather than `constant` |     5     |\n| 14 | Inconsistent spacing in comments                                                                               |     27    |\n| 15 | Lines are too long                                                                                             |     14    |\n| 16 | Non-library/interface files should use fixed compiler versions, not floating ones                              |     1     |\n| 17 | Typos                                                                                                          |     14    |\n| 18 | File is missing NatSpec                                                                                        |     1     |\n| 19 | NatSpec is incomplete                                                                                          |     12    |\n| 20 | Event is missing `indexed` fields                                                                              |     5     |\n\nTotal: 109 instances over 20 issues\n\n## [N-01] Consider addings checks for signature malleability\n\nUse OpenZeppelin's `ECDSA` contract rather than calling `ecrecover()` directly\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol   #1\n\n563:         address signer = ecrecover(toTypedMessageHash(structHash), v, r, s);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L563>\n\n## [N-02] Misleading variable name\n\n`_twavObservationPrev` is not the previous observation - it's more like the trailing, or next-to-expire TWAV observation\\`\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Twav/Twav.sol   #1\n\n39:              TwavObservation memory _twavObservationPrev = twavObservations[(_index + 1) % TWAV_BLOCK_NUMBERS];\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L39>\n\n## [N-03] Inconsistent version of English being used\n\nSome functions use American English, whereas others use British English. A single project should use only one of the two\n\n*There are 2 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol   #1\n\n173:     function initialize(\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L173>\n\n```solidity\nFile: contracts/Interfaces/IBasket.sol   #2\n\n10:      function initialise(address _curator) external;\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Interfaces/IBasket.sol#L10>\n\n## [N-04] Missing `initializer` modifier on constructor\n\nOpenZeppelin [recommends](https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/5) that the `initializer` modifier be applied to constructors in order to avoid potential griefs, [social engineering](https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/4), or exploits. Ensure that the modifier is applied to the implementation contract. If the default constructor is currently being used, it should be changed to be an explicit one with the modifier applied.\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Basket.sol   #1\n\n13:   contract Basket is IBasket, ERC721(\"NFT Basket\", \"NFTB\"), Initializable {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L13>\n\n## [N-05] Contract implements interface without extending the interface\n\nNot extending the interface may lead to the wrong function signature being used, leading to unexpected behavior. If the interface is in fact being implemented, use the `override` keyword to indicate that fact\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol   #1\n\n/// @audit onERC721Received(), onERC1155Received()\n20:   contract NibblVault is INibblVault, BancorFormula, ERC20Upgradeable, Twav, EIP712Base {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L20>\n\n## [N-06] `require()`/`revert()` statements should have descriptive reason strings\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/NibblVaultFactory.sol   #1\n\n114:          require(_success);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L114>\n\n## [N-07] `public` functions not called by the contract should be declared `external` instead\n\nContracts [are allowed](https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from `external` to `public`.\n\n*There are 3 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVaultFactory.sol   #1\n\n64        function getVaultAddress(\n65            address _curator,\n66            address _assetAddress,\n67            uint256 _assetTokenID,\n68            uint256 _initialSupply,\n69:           uint256 _initialTokenPrice) public view returns(address _vault) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L64-L69>\n\n```solidity\nFile: contracts/NibblVaultFactory.sol   #2\n\n76:       function getVaults() public view returns(ProxyVault[] memory ) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L76>\n\n```solidity\nFile: contracts/Twav/Twav.sol   #3\n\n44:       function getTwavObservations() public view returns(TwavObservation[TWAV_BLOCK_NUMBERS] memory) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L44>\n\n## [N-08] Non-assembly method available\n\n`assembly{ id := chainid() }` => `uint256 id = block.chainid`, `assembly { size := extcodesize() }` => `uint256 size = address().code.length`\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Utilities/EIP712Base.sol   #1\n\n29:               id := chainid()\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L29>\n\n## [N-09] `2**<n> - 1` should be re-written as `type(uint<n>).max`\n\nEarlier versions of solidity can use `uint<n>(-1)` instead. Expressions not including the `- 1` can often be re-written to accomodate the change (e.g. by using a `>` rather than a `>=`, which will also save some gas)\n\n*There are 4 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol   #1\n\n303:              uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L303>\n\n```solidity\nFile: contracts/NibblVault.sol   #2\n\n365:              uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L365>\n\n```solidity\nFile: contracts/NibblVault.sol   #3\n\n413:          _updateTWAV(_currentValuation, uint32(block.timestamp % 2**32));\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L413>\n\n```solidity\nFile: contracts/NibblVault.sol   #4\n\n445:          uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L445>\n\n## [N-10] `constant`s should be defined rather than using magic numbers\n\nEven [assembly](https://github.com/code-423n4/2022-05-opensea-seaport/blob/9d7ce4d08bf3c3010304a0476a785c70c0e90ae7/contracts/lib/TokenTransferrer.sol#L35-L39) can benefit from using readable constants instead of hex/numeric literals\n\n*There are 10 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVaultFactory.sol\n\n/// @audit 0xff\n72:           bytes32 _hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), newsalt, keccak256(code)));\n\n/// @audit 0xff\n91:           bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), address(this), newsalt, keccak256(code)));\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L72>\n\n```solidity\nFile: contracts/NibblVault.sol\n\n/// @audit 1e18\n183:          uint32 _secondaryReserveRatio = uint32((msg.value * SCALE * 1e18) / (_initialTokenSupply * _initialTokenPrice));\n\n/// @audit 1e18\n195:          uint _primaryReserveBalance = (primaryReserveRatio * _initialTokenSupply * _initialTokenPrice) / (SCALE * 1e18);\n\n/// @audit 1e18\n226:          secondaryReserveRatio = uint32((secondaryReserveBalance * SCALE * 1e18) / (initialTokenSupply * initialTokenPrice)); //secondaryReserveRatio is updated on every trade \n\n/// @audit 1e18\n253:              return ((secondaryReserveRatio * initialTokenSupply * initialTokenPrice) / (1e18 * SCALE));\n\n/// @audit 32\n303:              uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n\n/// @audit 32\n365:              uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n\n/// @audit 32\n413:          _updateTWAV(_currentValuation, uint32(block.timestamp % 2**32));\n\n/// @audit 32\n445:          uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L183>\n\n## [N-11] Cast is more restrictive than the type of the variable being assigned\n\nIf `address foo` is being used in an expression such as `IERC20 token = FooToken(foo)`, then the more specific cast to `FooToken` is a waste because the only thing the compiler will check for is that `FooToken` extends `IERC20` - it won't check any of the function signatures. Therefore, it makes more sense to do `IERC20 token = IERC20(token)` or better yet `FooToken token = FooToken(foo)`. The former may allow the file in which it's used to remove the import for `FooToken`\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Proxy/ProxyBasket.sol   #1\n\n/// @audit payable vs address\n20:           implementation = payable(_implementation);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L20>\n\n## [N-12] Missing event and or timelock for critical parameter change\n\nEvents help non-contract tools to track changes, and events prevent users from being surprised by changes\n\n*There are 4 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol   #1\n\n485       function updateCurator(address _newCurator) external override {\n486           require(msg.sender == curator,\"NibblVault: Only Curator\");\n487           curator = _newCurator;\n488:      }\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L485-L488>\n\n```solidity\nFile: contracts/NibblVaultFactory.sol   #2\n\n100:         pendingBasketImplementation = _newBasketImplementation;\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L100>\n\n```solidity\nFile: contracts/NibblVaultFactory.sol   #3\n\n124:         pendingFeeTo = _newFeeAddress;\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L124>\n\n```solidity\nFile: contracts/NibblVaultFactory.sol   #4\n\n159:         pendingVaultImplementation = _newVaultImplementation;\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L159>\n\n## [N-13] Expressions for constant values such as a call to `keccak256()`, should use `immutable` rather than `constant`\n\n*There are 5 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol\n\n51:       bytes32 private constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L51>\n\n```solidity\nFile: contracts/Utilities/AccessControlMechanism.sol\n\n12:       bytes32 public constant FEE_ROLE = keccak256(\"FEE_ROLE\");\n\n13:       bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n14:       bytes32 public constant IMPLEMENTER_ROLE = keccak256(\"IMPLEMENTER_ROLE\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L12>\n\n```solidity\nFile: contracts/Utilities/EIP712Base.sol\n\n7         bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\n8             bytes(\n9                 \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n10            )\n11:       );\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L7-L11>\n\n## [N-14] Inconsistent spacing in comments\n\nSome lines use `// x` and some use `//x`. The instances below point out the usages that don't follow the majority, within each file\n\n*There are 27 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol\n\n28:       uint32 private constant primaryReserveRatio = 200_000; //20%\n\n34:       uint256 private constant REJECTION_PREMIUM = 150_000; //15%\n\n46:       uint256 private constant MIN_CURATOR_FEE = 5_000; //0.5%\n\n122:      ///@notice current status of vault\n\n125:      ///@notice reenterancy guard\n\n200:          //curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator\n\n201:          curatorFee = (((_secondaryReserveRatio - MIN_SECONDARY_RESERVE_RATIO) * MIN_CURATOR_FEE) / (primaryReserveRatio - MIN_SECONDARY_RESERVE_RATIO)) + MIN_CURATOR_FEE; //curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator\n\n220:          //_maxSecondaryBalanceIncrease: is the max amount of secondary reserve balance that can be added to the vault\n\n221:          //_maxSecondaryBalanceIncrease cannot be more than fictitiousPrimaryReserveBalance\n\n226:          secondaryReserveRatio = uint32((secondaryReserveBalance * SCALE * 1e18) / (initialTokenSupply * initialTokenPrice)); //secondaryReserveRatio is updated on every trade \n\n228:              safeTransferETH(_factory, _feeAdmin); //Transfers admin fee to the factory contract\n\n244:              safeTransferETH(_factory, _feeAdmin); //Transfers admin fee to the factory contract\n\n301:          //Make update on the first tx of the block\n\n318:                  //Gas Optimization\n\n363:          //Make update on the first tx of the block\n\n368:                  _rejectBuyout(); //For the case when TWAV goes up when updated on sell\n\n377:                  //Gas Optimization\n\n389:          safeTransferETH(_to, _saleReturn); //send _saleReturn to _to\n\n402:          //_buyoutBid: Bid User has made\n\n448:              _rejectBuyout(); //For the case when TWAV goes up when updated externally\n\n500:      ///@notice withdraw multiple ERC721s\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L28>\n\n```solidity\nFile: contracts/Proxy/ProxyBasket.sol\n\n28:       //solhint-disable-next-line no-complex-fallback\n\n31:           //solhint-disable-next-line no-inline-assembly\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L28>\n\n```solidity\nFile: contracts/Proxy/ProxyVault.sol\n\n28:       //solhint-disable-next-line no-complex-fallback\n\n31:           //solhint-disable-next-line no-inline-assembly\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyVault.sol#L28>\n\n```solidity\nFile: contracts/Twav/Twav.sol\n\n12:       uint8 private constant TWAV_BLOCK_NUMBERS = 4; //TWAV of last 4 Blocks \n\n28:           twavObservations[twavObservationsIndex] = TwavObservation(_blockTimestamp, _prevCumulativeValuation + (_valuation * _timeElapsed)); //add the previous observation to make it cumulative\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L12>\n\n## [N-15] Lines are too long\n\nUsually lines in source code are limited to [80](https://softwareengineering.stackexchange.com/questions/148677/why-is-80-characters-the-standard-limit-for-code-width) characters. Today's screens are much larger so it's reasonable to stretch this in some cases. Since the files will most likely reside in GitHub, and GitHub starts using a scroll bar in all cases when the length is over [164](https://github.com/aizatto/character-length) characters, the lines below should be split when they reach that length\n\n*There are 14 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol\n\n109:      function onERC1155BatchReceived(address, address from, uint256[] memory ids, uint256[] memory amounts, bytes memory) external virtual override returns (bytes4) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L109>\n\n```solidity\nFile: contracts/NibblVaultFactory.sol\n\n50:           _proxyVault = payable(new ProxyVault{salt: keccak256(abi.encodePacked(_curator, _assetAddress, _assetTokenID, _initialSupply, _initialTokenPrice))}(payable(address(this))));\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L50>\n\n```solidity\nFile: contracts/NibblVault.sol\n\n19:   /// @dev The secondary curve is dynamic and has a variable reserveRatio, which depends on initial conditions given by the curator and the fee accumulated by the curve.\n\n79:       /// @dev This variable also defines the amount of reserve token that should be in the primary curve if the primary curve started from 0 and went till initialTokenSupply \n\n201:          curatorFee = (((_secondaryReserveRatio - MIN_SECONDARY_RESERVE_RATIO) * MIN_CURATOR_FEE) / (primaryReserveRatio - MIN_SECONDARY_RESERVE_RATIO)) + MIN_CURATOR_FEE; //curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator\n\n224:          _feeCurve = _maxSecondaryBalanceIncrease > _feeCurve ? _feeCurve : _maxSecondaryBalanceIncrease; // the curve fee is capped so that secondaryReserveBalance <= fictitiousPrimaryReserveBalance\n\n226:          secondaryReserveRatio = uint32((secondaryReserveBalance * SCALE * 1e18) / (initialTokenSupply * initialTokenPrice)); //secondaryReserveRatio is updated on every trade \n\n263:      /// @dev Valuation = If current supply is on seconday curve we use secondaryReserveBalance and secondaryReserveRatio to calculate valuation else we use primary reserve ratio and balance\n\n266:              return totalSupply() < initialTokenSupply ? (secondaryReserveBalance * SCALE /secondaryReserveRatio) : ((primaryReserveBalance) * SCALE  / primaryReserveRatio);\n\n297:      /// @dev if current totalSupply < initialTokenSupply AND _amount to buy tokens for is greater than (maxSecondaryCurveBalance - currentSecondaryCurveBalance) then buy happens on secondary curve and primary curve both\n\n358:      /// @dev if totalSupply > initialTokenSupply AND _amount to sell is greater than (_amtIn > totalSupply - initialTokenSupply) then sell happens on primary curve and secondary curve both\n\n395:      /// @dev bidder needs to send funds equal to current valuation - ((primaryReserveBalance - fictitiousPrimaryReserveBalance) + secondaryReserveBalance) to initiate buyout\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L19>\n\n```solidity\nFile: contracts/Twav/Twav.sol\n\n28:           twavObservations[twavObservationsIndex] = TwavObservation(_blockTimestamp, _prevCumulativeValuation + (_valuation * _timeElapsed)); //add the previous observation to make it cumulative\n\n40:               _twav = (_twavObservationCurrent.cumulativeValuation - _twavObservationPrev.cumulativeValuation) / (_twavObservationCurrent.timestamp - _twavObservationPrev.timestamp);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L28>\n\n## [N-16] Non-library/interface files should use fixed compiler versions, not floating ones\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Utilities/AccessControlMechanism.sol   #1\n\n4:    pragma solidity ^0.8.0;\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L4>\n\n## [N-17] Typos\n\n*There are 14 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol\n\n/// @audit reenterancy\n125:      ///@notice reenterancy guard\n\n/// @audit pausablity\n152:      /// @dev pausablity implemented in factory\n\n/// @audit primaryReseveRatio\n200:          //curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator\n\n/// @audit primaryReseveRatio\n201:          curatorFee = (((_secondaryReserveRatio - MIN_SECONDARY_RESERVE_RATIO) * MIN_CURATOR_FEE) / (primaryReserveRatio - MIN_SECONDARY_RESERVE_RATIO)) + MIN_CURATOR_FEE; //curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator\n\n/// @audit continous\n250:      /// @dev The max continous tokens on SecondaryCurve is equal to initialTokenSupply\n\n/// @audit seconday\n263:      /// @dev Valuation = If current supply is on seconday curve we use secondaryReserveBalance and secondaryReserveRatio to calculate valuation else we use primary reserve ratio and balance\n\n/// @audit continous\n270:      /// @param _amount amount of reserve tokens to buy continous tokens\n\n/// @audit continous\n282:      /// @param _amount amount of reserve tokens to buy continous tokens\n\n/// @audit Continous\n359:      /// @param _amtIn Continous Tokens to be sold\n\n/// @audit recieve\n361:      /// @param _to Address to recieve the reserve token to\n\n/// @audit airdops\n512:      /// @notice ERC20s can be accumulated by the underlying ERC721 in the vault as royalty or airdops \n\n/// @audit airdops\n531:      /// @notice ERC1155s can be accumulated by the underlying ERC721 in the vault as royalty or airdops \n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L125>\n\n```solidity\nFile: contracts/Proxy/ProxyBasket.sol\n\n/// @audit internall\n26:        * This function does not return to its internall call site, it will return directly to the external caller.\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L26>\n\n```solidity\nFile: contracts/Proxy/ProxyVault.sol\n\n/// @audit internall\n26:        * This function does not return to its internall call site, it will return directly to the external caller.\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyVault.sol#L26>\n\n## [N-18] File is missing NatSpec\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Utilities/EIP712Base.sol (various lines)   #1\n\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol>\n\n## [N-19] NatSpec is incomplete\n\n*There are 12 instances of this issue:*\n\n[See original submission](https://github.com/code-423n4/2022-06-nibbl-findings/issues/139) for details.\n\n## [N-20] Event is missing `indexed` fields\n\nEach `event` should use three `indexed` fields if there are three or more fields\n\n*There are 5 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol\n\n15:       event DepositERC721(address indexed token, uint256 tokenId, address indexed from);\n\n16:       event WithdrawERC721(address indexed token, uint256 tokenId, address indexed to);\n\n17:       event DepositERC1155(address indexed token, uint256 tokenId, uint256 amount, address indexed from);\n\n18:       event DepositERC1155Bulk(address indexed token, uint256[] tokenId, uint256[] amount, address indexed from);\n\n19:       event WithdrawERC1155(address indexed token, uint256 tokenId, uint256 amount, address indexed from);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L15>\n\n**[HardlyDifficult (judge) commented](https://github.com/code-423n4/2022-06-nibbl-findings/issues/139#issuecomment-1173978577):**\n > Great feedback & it all appears valid.\n\n***\n\n# Gas Optimizations\n\nFor this contest, 63 reports were submitted by wardens detailing gas optimizations. The [report highlighted below](https://github.com/code-423n4/2022-06-nibbl-findings/issues/140) by **IllIllI** received the top score from the judge.\n\n*The following wardens also submitted reports: [joestakey](https://github.com/code-423n4/2022-06-nibbl-findings/issues/180), [BowTiedWardens](https://github.com/code-423n4/2022-06-nibbl-findings/issues/125), [_Adam](https://github.com/code-423n4/2022-06-nibbl-findings/issues/122), [m_Rassska](https://github.com/code-423n4/2022-06-nibbl-findings/issues/221), [0xkatana](https://github.com/code-423n4/2022-06-nibbl-findings/issues/101), [0xKitsune](https://github.com/code-423n4/2022-06-nibbl-findings/issues/33), [defsec](https://github.com/code-423n4/2022-06-nibbl-findings/issues/162), [MiloTruck](https://github.com/code-423n4/2022-06-nibbl-findings/issues/158), [c3phas](https://github.com/code-423n4/2022-06-nibbl-findings/issues/277), [minhquanym](https://github.com/code-423n4/2022-06-nibbl-findings/issues/309), [hansfriese](https://github.com/code-423n4/2022-06-nibbl-findings/issues/114), [catchup](https://github.com/code-423n4/2022-06-nibbl-findings/issues/99), [robee](https://github.com/code-423n4/2022-06-nibbl-findings/issues/228), [UnusualTurtle](https://github.com/code-423n4/2022-06-nibbl-findings/issues/265), [0xNazgul](https://github.com/code-423n4/2022-06-nibbl-findings/issues/59), [reassor](https://github.com/code-423n4/2022-06-nibbl-findings/issues/294), [TomJ](https://github.com/code-423n4/2022-06-nibbl-findings/issues/204), [sashik_eth](https://github.com/code-423n4/2022-06-nibbl-findings/issues/320), [pashov](https://github.com/code-423n4/2022-06-nibbl-findings/issues/316), [delfin454000](https://github.com/code-423n4/2022-06-nibbl-findings/issues/205), [Tomio](https://github.com/code-423n4/2022-06-nibbl-findings/issues/70), [slywaters](https://github.com/code-423n4/2022-06-nibbl-findings/issues/279), [ElKu](https://github.com/code-423n4/2022-06-nibbl-findings/issues/170), [JC](https://github.com/code-423n4/2022-06-nibbl-findings/issues/312), [saian](https://github.com/code-423n4/2022-06-nibbl-findings/issues/212), [0x1f8b](https://github.com/code-423n4/2022-06-nibbl-findings/issues/32), [Noah3o6](https://github.com/code-423n4/2022-06-nibbl-findings/issues/224), [sach1r0](https://github.com/code-423n4/2022-06-nibbl-findings/issues/80), [8olidity](https://github.com/code-423n4/2022-06-nibbl-findings/issues/82), [ajtra](https://github.com/code-423n4/2022-06-nibbl-findings/issues/155), [ellahi](https://github.com/code-423n4/2022-06-nibbl-findings/issues/295), [oyc_109](https://github.com/code-423n4/2022-06-nibbl-findings/issues/15), [TerrierLover](https://github.com/code-423n4/2022-06-nibbl-findings/issues/164), [simon135](https://github.com/code-423n4/2022-06-nibbl-findings/issues/288), [Chom](https://github.com/code-423n4/2022-06-nibbl-findings/issues/281), [0x29A](https://github.com/code-423n4/2022-06-nibbl-findings/issues/109), [Waze](https://github.com/code-423n4/2022-06-nibbl-findings/issues/141), [fatherOfBlocks](https://github.com/code-423n4/2022-06-nibbl-findings/issues/78), [rfa](https://github.com/code-423n4/2022-06-nibbl-findings/issues/282), [0xf15ers](https://github.com/code-423n4/2022-06-nibbl-findings/issues/241), [ACai](https://github.com/code-423n4/2022-06-nibbl-findings/issues/183), [cRat1st0s](https://github.com/code-423n4/2022-06-nibbl-findings/issues/156), [Picodes](https://github.com/code-423n4/2022-06-nibbl-findings/issues/315), [Chandr](https://github.com/code-423n4/2022-06-nibbl-findings/issues/213), [ych18](https://github.com/code-423n4/2022-06-nibbl-findings/issues/202), [0v3rf10w](https://github.com/code-423n4/2022-06-nibbl-findings/issues/93), [Randyyy](https://github.com/code-423n4/2022-06-nibbl-findings/issues/230), [zuhaibmohd](https://github.com/code-423n4/2022-06-nibbl-findings/issues/51), [StErMi](https://github.com/code-423n4/2022-06-nibbl-findings/issues/95), [ynnad](https://github.com/code-423n4/2022-06-nibbl-findings/issues/119), [cryptphi](https://github.com/code-423n4/2022-06-nibbl-findings/issues/75), [Funen](https://github.com/code-423n4/2022-06-nibbl-findings/issues/238), [Lambda](https://github.com/code-423n4/2022-06-nibbl-findings/issues/52), [Nyamcil](https://github.com/code-423n4/2022-06-nibbl-findings/issues/116), [kenta](https://github.com/code-423n4/2022-06-nibbl-findings/issues/186), [Limbooo](https://github.com/code-423n4/2022-06-nibbl-findings/issues/90), [IgnacioB](https://github.com/code-423n4/2022-06-nibbl-findings/issues/258), [SmartSek](https://github.com/code-423n4/2022-06-nibbl-findings/issues/256), [codexploder](https://github.com/code-423n4/2022-06-nibbl-findings/issues/40), [exd0tpy](https://github.com/code-423n4/2022-06-nibbl-findings/issues/84), [kebabsec](https://github.com/code-423n4/2022-06-nibbl-findings/issues/154), and [Fitraldys](https://github.com/code-423n4/2022-06-nibbl-findings/issues/290).*\n\n|    | Issue                                                                                                                                                      | Instances |\n| -- | :--------------------------------------------------------------------------------------------------------------------------------------------------------- | :-------: |\n| 1  | Setting `DEFAULT_ADMIN_ROLE` as the role admin is redundant                                                                                                |     1     |\n| 2  | Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas                                                             |     23    |\n| 3  | Using `storage` instead of `memory` for structs/arrays saves gas                                                                                           |     2     |\n| 4  | State variables should be cached in stack variables rather than re-reading them from storage                                                               |     1     |\n| 5  | `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables                                                                                     |     7     |\n| 6  | `internal` functions only called once can be inlined to save gas                                                                                           |     1     |\n| 7  | Add `unchecked {}` for subtractions where the operands cannot underflow because of a previous `require()` or `if`-statement                                |     5     |\n| 8  | `<array>.length` should not be looked up in every loop of a `for`-loop                                                                                     |     6     |\n| 9  | `++i`/`i++` should be `unchecked{++i}`/`unchecked{i++}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops |     6     |\n| 10 | `require()`/`revert()` strings longer than 32 bytes cost extra gas                                                                                         |     7     |\n| 11 | Using `bool`s for storage incurs overhead                                                                                                                  |     1     |\n| 12 | Use a more recent version of solidity                                                                                                                      |     1     |\n| 13 | `>=` costs less gas than `>`                                                                                                                               |     1     |\n| 14 | It costs more gas to initialize non-`constant`/non-`immutable` variables to zero than to let the default of zero be applied                                |     6     |\n| 15 | `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too)                                                                |     6     |\n| 16 | Splitting `require()` statements that use `&&` saves gas                                                                                                   |     4     |\n| 17 | Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead                                                                                   |     14    |\n| 18 | Using `private` rather than `public` for constants, saves gas                                                                                              |     3     |\n| 19 | Don't use `SafeMath` once the solidity version is 0.8.0 or greater                                                                                         |     1     |\n| 20 | Duplicated `require()`/`revert()` checks should be refactored to a modifier or function                                                                    |     3     |\n| 21 | Empty blocks should be removed or emit something                                                                                                           |     5     |\n| 22 | Use custom errors rather than `revert()`/`require()` strings to save gas                                                                                   |     41    |\n| 23 | Functions guaranteed to revert when called by normal users can be marked `payable`                                                                         |     8     |\n\nTotal: 153 instances over 23 issues\n\n## [1] Setting `DEFAULT_ADMIN_ROLE` as the role admin is redundant\n\n`DEFAULT_ADMIN_ROLE` is [automatically](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/83277ff916ac4f58fec072b8f28a252c1245c2f1/contracts/access/AccessControl.sol#L40-L48) designated as the role admin of any new role, so setting it again is a waste of gas since it involves fetching role-related state variables, updating state variables, and emitting an event\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Utilities/AccessControlMechanism.sol   #1\n\n22           _setRoleAdmin(_defaultAdminRole, _defaultAdminRole);\n23           _setRoleAdmin(FEE_ROLE, _defaultAdminRole);\n24           _setRoleAdmin(PAUSER_ROLE, _defaultAdminRole);\n25:          _setRoleAdmin(IMPLEMENTER_ROLE, _defaultAdminRole);\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L22-L25>\n\n## [2] Using `calldata` instead of `memory` for read-only arguments in `external` functions saves gas\n\nWhen a function with a `memory` array is called externally, the `abi.decode()` step has to use a for-loop to copy each index of the `calldata` to the `memory` index. **Each iteration of this for-loop costs at least 60 gas** (i.e. `60 * <mem_array>.length`). Using `calldata` directly, obliviates the need for such a loop in the contract code and runtime execution.\n\nIf the array is passed to an `internal` function which passes the array to another internal function where the array is modified and therefore `memory` is used in the `external` call, it's still more gass-efficient to use `calldata` when the `external` function uses modifiers, since the modifiers may prevent the internal functions from being called. Structs have the same overhead as an array of length one\n\n*There are 23 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol\n\n41:       function withdrawMultipleERC721(address[] memory _tokens, uint256[] memory _tokenId, address _to) external override {\n\n41:       function withdrawMultipleERC721(address[] memory _tokens, uint256[] memory _tokenId, address _to) external override {\n\n68:       function withdrawMultipleERC1155(address[] memory _tokens, uint256[] memory _tokenIds, address _to) external override {\n\n68:       function withdrawMultipleERC1155(address[] memory _tokens, uint256[] memory _tokenIds, address _to) external override {\n\n91:       function withdrawMultipleERC20(address[] memory _tokens) external override {\n\n99:       function onERC721Received(address, address from, uint256 id, bytes memory) external override returns(bytes4) {\n\n104:      function onERC1155Received(address, address from, uint256 id, uint256 amount, bytes memory) external virtual override returns (bytes4) {\n\n109:      function onERC1155BatchReceived(address, address from, uint256[] memory ids, uint256[] memory amounts, bytes memory) external virtual override returns (bytes4) {\n\n109:      function onERC1155BatchReceived(address, address from, uint256[] memory ids, uint256[] memory amounts, bytes memory) external virtual override returns (bytes4) {\n\n109:      function onERC1155BatchReceived(address, address from, uint256[] memory ids, uint256[] memory amounts, bytes memory) external virtual override returns (bytes4) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L41>\n\n```solidity\nFile: contracts/NibblVaultFactory.sol\n\n41:           string memory _name,\n\n42:           string memory _symbol,\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L41>\n\n```solidity\nFile: contracts/NibblVault.sol\n\n174:          string memory _tokenName, \n\n175:          string memory _tokenSymbol, \n\n504:      function withdrawMultipleERC721(address[] memory _assetAddresses, uint256[] memory _assetIDs, address _to) external override boughtOut {\n\n504:      function withdrawMultipleERC721(address[] memory _assetAddresses, uint256[] memory _assetIDs, address _to) external override boughtOut {\n\n523:      function withdrawMultipleERC20(address[] memory _assets, address _to) external override boughtOut {\n\n545:      function withdrawMultipleERC1155(address[] memory _assets, uint256[] memory _assetIDs, address _to) external override boughtOut {\n\n545:      function withdrawMultipleERC1155(address[] memory _assets, uint256[] memory _assetIDs, address _to) external override boughtOut {\n\n577:      function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4) {\n\n581:      function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) external pure returns (bytes4) {\n\n581:      function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) external pure returns (bytes4) {\n\n581:      function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) external pure returns (bytes4) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L174>\n\n## [3] Using `storage` instead of `memory` for structs/arrays saves gas\n\nWhen fetching data from a storage location, assigning the data to a `memory` variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (**2100 gas**) for *each* field of the struct/array. If the fields are read from the new memory variable, they incur an additional `MLOAD` rather than a cheap stack read. Instead of declearing the variable with the `memory` keyword, declaring the variable with the `storage` keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a `memory` variable, is if the full struct/array is being returned by the function, is being passed to a function that requires `memory`, or if the array/struct is being read from another `memory` array/struct\n\n*There are 2 instances of this issue:*\n\n```solidity\nFile: contracts/Twav/Twav.sol   #1\n\n38:               TwavObservation memory _twavObservationCurrent = twavObservations[(_index)];\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L38>\n\n```solidity\nFile: contracts/Twav/Twav.sol   #2\n\n39:               TwavObservation memory _twavObservationPrev = twavObservations[(_index + 1) % TWAV_BLOCK_NUMBERS];\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L39>\n\n## [4] State variables should be cached in stack variables rather than re-reading them from storage\n\nThe instances below point to the second+ access of a state variable within a function. Caching of a state variable replace each Gwarmaccess (**100 gas**) with a much cheaper stack read. Other less obvious fixes/optimizations include having local memory caches of state variable structs, or having local caches of state variable contracts/addresses.\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol   #1\n\n/// @audit secondaryReserveBalance on line 225\n226:          secondaryReserveRatio = uint32((secondaryReserveBalance * SCALE * 1e18) / (initialTokenSupply * initialTokenPrice)); //secondaryReserveRatio is updated on every trade \n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L226>\n\n## [5] `<x> += <y>` costs more gas than `<x> = <x> + <y>` for state variables\n\n*There are 7 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol\n\n219:          feeAccruedCurator += _feeCurator;\n\n225:          secondaryReserveBalance += _feeCurve;\n\n242:          feeAccruedCurator += _feeCurator;\n\n320:                  secondaryReserveBalance += _lowerCurveDiff;\n\n380:                  primaryReserveBalance -= _saleReturn;\n\n429:              totalUnsettledBids += _buyoutValuationDeposit;\n\n457:          totalUnsettledBids -= _amount;\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L219>\n\n## [6] `internal` functions only called once can be inlined to save gas\n\nNot inlining costs **20 to 40 gas** because of two extra `JUMP` instructions and additional stack operations needed for function calls.\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Utilities/EIP712Base.sol   #1\n\n27:       function getChainID() internal view returns (uint256 id) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/EIP712Base.sol#L27>\n\n## [7] Add `unchecked {}` for subtractions where the operands cannot underflow because of a previous `require()` or `if`-statement\n\n`require(a <= b); x = b - a` => `require(a <= b); unchecked { x = b - a }`\n\n*There are 5 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol\n\n/// @audit require() on line 185\n201:          curatorFee = (((_secondaryReserveRatio - MIN_SECONDARY_RESERVE_RATIO) * MIN_CURATOR_FEE) / (primaryReserveRatio - MIN_SECONDARY_RESERVE_RATIO)) + MIN_CURATOR_FEE; //curator fee is proportional to the secondary reserve ratio/primaryReseveRatio i.e. initial liquidity added by curator\n\n/// @audit require() on line 404\n406:          buyoutValuationDeposit = msg.value - (_buyoutBid - _currentValuation);\n\n/// @audit require() on line 404\n415:              safeTransferETH(payable(msg.sender), (_buyoutBid - _currentValuation));\n\n/// @audit if-condition on line 373\n378:                  uint256 _tokensPrimaryCurve = _totalSupply - _initialTokenSupply;\n\n/// @audit if-condition on line 414\n415:              safeTransferETH(payable(msg.sender), (_buyoutBid - _currentValuation));\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L201>\n\n## [8] `<array>.length` should not be looked up in every loop of a `for`-loop\n\nThe overheads outlined below are *PER LOOP*, excluding the first loop\n\n*   storage arrays incur a Gwarmaccess (**100 gas**)\n*   memory arrays use `MLOAD` (**3 gas**)\n*   calldata arrays use `CALLDATALOAD` (**3 gas**)\n\nCaching the length changes each of these to a `DUP<N>` (**3 gas**), and gets rid of the extra `DUP<N>` needed to store the stack offset\n\n*There are 6 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol\n\n43:           for (uint256 i = 0; i < _tokens.length; i++) {\n\n70:           for (uint256 i = 0; i < _tokens.length; i++) {\n\n93:           for (uint256 i = 0; i < _tokens.length; i++) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43>\n\n```solidity\nFile: contracts/NibblVault.sol\n\n506:          for (uint256 i = 0; i < _assetAddresses.length; i++) {\n\n525:          for (uint256 i = 0; i < _assets.length; i++) {\n\n547:          for (uint256 i = 0; i < _assets.length; i++) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506>\n\n## [9] `++i`/`i++` should be `unchecked{++i}`/`unchecked{i++}` when it is not possible for them to overflow, as is the case when used in `for`- and `while`-loops\n\nThe `unchecked` keyword is new in solidity version 0.8.0, so this only applies to that version or higher, which these instances are. This saves **30-40 gas [per loop](https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#the-increment-in-for-loop-post-condition-can-be-made-unchecked)**\n\n*There are 6 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol\n\n43:           for (uint256 i = 0; i < _tokens.length; i++) {\n\n70:           for (uint256 i = 0; i < _tokens.length; i++) {\n\n93:           for (uint256 i = 0; i < _tokens.length; i++) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43>\n\n```solidity\nFile: contracts/NibblVault.sol\n\n506:          for (uint256 i = 0; i < _assetAddresses.length; i++) {\n\n525:          for (uint256 i = 0; i < _assets.length; i++) {\n\n547:          for (uint256 i = 0; i < _assets.length; i++) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506>\n\n## [10] `require()`/`revert()` strings longer than 32 bytes cost extra gas\n\nEach extra memory word of bytes past the original 32 [incurs an MSTORE](https://gist.github.com/hrkrshnn/ee8fabd532058307229d65dcd5836ddc#consider-having-short-revert-strings) which costs **3 gas**\n\n*There are 7 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVaultFactory.sol\n\n48:           require(msg.value >= MIN_INITIAL_RESERVE_BALANCE, \"NibblVaultFactory: Initial reserve balance too low\");\n\n49:           require(IERC721(_assetAddress).ownerOf(_assetTokenID) == msg.sender, \"NibblVaultFactory: Invalid sender\");\n\n107:          require(basketUpdateTime != 0 && block.timestamp >= basketUpdateTime, \"NibblVaultFactory: UPDATE_TIME has not passed\");\n\n131:          require(feeToUpdateTime != 0 && block.timestamp >= feeToUpdateTime, \"NibblVaultFactory: UPDATE_TIME has not passed\");\n\n141:          require(_newFee <= MAX_ADMIN_FEE, \"NibblVaultFactory: Fee value greater than MAX_ADMIN_FEE\");\n\n149:          require(feeAdminUpdateTime != 0 && block.timestamp >= feeAdminUpdateTime, \"NibblVaultFactory: UPDATE_TIME has not passed\");\n\n166:          require(vaultUpdateTime != 0 && block.timestamp >= vaultUpdateTime, \"NibblVaultFactory: UPDATE_TIME has not passed\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L48>\n\n## [11] Using `bool`s for storage incurs overhead\n\n```solidity\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n```\n\n<https://github.com/OpenZeppelin/openzeppelin-contracts/blob/58f635312aa21f947cae5f8578638a85aa2519f5/contracts/security/ReentrancyGuard.sol#L23-L27>\nUse `uint256(1)` and `uint256(2)` for true/false to avoid a Gwarmaccess (**[100 gas](https://gist.github.com/IllIllI000/1b70014db712f8572a72378321250058)**) for the extra SLOAD, and to avoid Gsset (**20000 gas**) when changing from 'false' to 'true', after having been 'true' in the past\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Utilities/AccessControlMechanism.sol   #1\n\n16:       mapping(bytes32 => mapping(address => bool)) public pendingRoles;\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L16>\n\n## [12] Use a more recent version of solidity\n\nUse a solidity version of at least 0.8.2 to get simple compiler automatic inlining\nUse a solidity version of at least 0.8.3 to get better struct packing and cheaper multiple storage reads\nUse a solidity version of at least 0.8.4 to get custom errors, which are cheaper at deployment than `revert()/require()` strings\nUse a solidity version of at least 0.8.10 to have external calls skip contract existence checks if the external call has a return value\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/Utilities/AccessControlMechanism.sol   #1\n\n4:    pragma solidity ^0.8.0;\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L4>\n\n## [13] `>=` costs less gas than `>`\n\nThe compiler uses opcodes `GT` and `ISZERO` for solidity code that uses `>`, but only requires `LT` for `>=`, [which saves **3 gas**](https://gist.github.com/IllIllI000/3dc79d25acccfa16dee4e83ffdc6ffde)\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol   #1\n\n224:          _feeCurve = _maxSecondaryBalanceIncrease > _feeCurve ? _feeCurve : _maxSecondaryBalanceIncrease; // the curve fee is capped so that secondaryReserveBalance <= fictitiousPrimaryReserveBalance\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L224>\n\n## [14] It costs more gas to initialize non-`constant`/non-`immutable` variables to zero than to let the default of zero be applied\n\nNot overwriting the default for [stack variables](https://gist.github.com/IllIllI000/e075d189c1b23dce256cd166e28f3397) saves **8 gas**. Storage and memory variables have larger savings\n\n*There are 6 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol\n\n43:           for (uint256 i = 0; i < _tokens.length; i++) {\n\n70:           for (uint256 i = 0; i < _tokens.length; i++) {\n\n93:           for (uint256 i = 0; i < _tokens.length; i++) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43>\n\n```solidity\nFile: contracts/NibblVault.sol\n\n506:          for (uint256 i = 0; i < _assetAddresses.length; i++) {\n\n525:          for (uint256 i = 0; i < _assets.length; i++) {\n\n547:          for (uint256 i = 0; i < _assets.length; i++) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506>\n\n## [15] `++i` costs less gas than `i++`, especially when it's used in `for`-loops (`--i`/`i--` too)\n\nSaves **6 gas per loop**\n\n*There are 6 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol\n\n43:           for (uint256 i = 0; i < _tokens.length; i++) {\n\n70:           for (uint256 i = 0; i < _tokens.length; i++) {\n\n93:           for (uint256 i = 0; i < _tokens.length; i++) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L43>\n\n```solidity\nFile: contracts/NibblVault.sol\n\n506:          for (uint256 i = 0; i < _assetAddresses.length; i++) {\n\n525:          for (uint256 i = 0; i < _assets.length; i++) {\n\n547:          for (uint256 i = 0; i < _assets.length; i++) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L506>\n\n## [16] Splitting `require()` statements that use `&&` saves gas\n\nSee [this issue](https://github.com/code-423n4/2022-01-xdefi-findings/issues/128) which describes the fact that there is a larger deployment gas cost, but with enough runtime calls, the change ends up being cheaper\n\n*There are 4 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVaultFactory.sol   #1\n\n107:          require(basketUpdateTime != 0 && block.timestamp >= basketUpdateTime, \"NibblVaultFactory: UPDATE_TIME has not passed\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L107>\n\n```solidity\nFile: contracts/NibblVaultFactory.sol   #2\n\n131:          require(feeToUpdateTime != 0 && block.timestamp >= feeToUpdateTime, \"NibblVaultFactory: UPDATE_TIME has not passed\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L131>\n\n```solidity\nFile: contracts/NibblVaultFactory.sol   #3\n\n149:          require(feeAdminUpdateTime != 0 && block.timestamp >= feeAdminUpdateTime, \"NibblVaultFactory: UPDATE_TIME has not passed\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L149>\n\n```solidity\nFile: contracts/NibblVaultFactory.sol   #4\n\n166:          require(vaultUpdateTime != 0 && block.timestamp >= vaultUpdateTime, \"NibblVaultFactory: UPDATE_TIME has not passed\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L166>\n\n## [17] Usage of `uints`/`ints` smaller than 32 bytes (256 bits) incurs overhead\n\n> When using elements that are smaller than 32 bytes, your contract’s gas usage may be higher. This is because the EVM operates on 32 bytes at a time. Therefore, if the element is smaller than that, the EVM must use more operations in order to reduce the size of the element from 32 bytes to the desired size.\n\n<https://docs.soliditylang.org/en/v0.8.11/internals/layout_in_storage.html>\nUse a larger size then downcast where needed\n\n*There are 14 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVault.sol\n\n28:       uint32 private constant primaryReserveRatio = 200_000; //20%\n\n57:       uint32 public secondaryReserveRatio;\n\n183:          uint32 _secondaryReserveRatio = uint32((msg.value * SCALE * 1e18) / (_initialTokenSupply * _initialTokenPrice));\n\n303:              uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n\n365:              uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n\n445:          uint32 _blockTimestamp = uint32(block.timestamp % 2**32);\n\n557:          uint8 v,\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L28>\n\n```solidity\nFile: contracts/Twav/Twav.sol\n\n6:            uint32 timestamp;\n\n11:       uint8 public twavObservationsIndex;\n\n12:       uint8 private constant TWAV_BLOCK_NUMBERS = 4; //TWAV of last 4 Blocks \n\n13:       uint32 public lastBlockTimeStamp;\n\n21:       function _updateTWAV(uint256 _valuation, uint32 _blockTimestamp) internal {\n\n22:           uint32 _timeElapsed; \n\n37:               uint8 _index = ((twavObservationsIndex + TWAV_BLOCK_NUMBERS) - 1) % TWAV_BLOCK_NUMBERS;\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Twav/Twav.sol#L6>\n\n## [18] Using `private` rather than `public` for constants, saves gas\n\nIf needed, the values can be read from the verified contract source code, or if there are multiple values there can be a single getter function that returns a tuple of the values of all currently-public constants. Saves **3406-3606 gas** in deployment gas due to the compiler not having to create non-payable getter functions for deployment calldata, not having to store the bytes of the value outside of where it's used, and not adding another entry to the method ID table\n\n*There are 3 instances of this issue:*\n\n```solidity\nFile: contracts/Utilities/AccessControlMechanism.sol   #1\n\n12:       bytes32 public constant FEE_ROLE = keccak256(\"FEE_ROLE\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L12>\n\n```solidity\nFile: contracts/Utilities/AccessControlMechanism.sol   #2\n\n13:       bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L13>\n\n```solidity\nFile: contracts/Utilities/AccessControlMechanism.sol   #3\n\n14:       bytes32 public constant IMPLEMENTER_ROLE = keccak256(\"IMPLEMENTER_ROLE\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L14>\n\n## [19] Don't use `SafeMath` once the solidity version is 0.8.0 or greater\n\nVersion 0.8.0 introduces internal overflow checks, so using `SafeMath` is redundant and adds overhead\n\n*There is 1 instance of this issue:*\n\n```solidity\nFile: contracts/NibblVaultFactory.sol   #1\n\n9:    import { SafeMath } from  \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L9>\n\n## [20] Duplicated `require()`/`revert()` checks should be refactored to a modifier or function\n\nSaves deployment costs\n\n*There are 3 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol   #1\n\n42:           require(_isApprovedOrOwner(msg.sender, 0), \"withdraw:not allowed\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L42>\n\n```solidity\nFile: contracts/NibblVault.sol   #2\n\n486:          require(msg.sender == curator,\"NibblVault: Only Curator\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L486>\n\n```solidity\nFile: contracts/NibblVault.sol   #3\n\n505:          require(msg.sender == bidder,\"NibblVault: Only winner\");\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L505>\n\n## [21] Empty blocks should be removed or emit something\n\nThe code should be refactored such that they no longer exist, or the block should do something useful, such as emitting an event or reverting. If the contract is meant to be extended, the contract should be `abstract` and the function signatures be added without any default implementation. If the block is an empty `if`-statement block to avoid doing subsequent checks in the else-if/else conditions, the else-if/else conditions should be nested under the negation of the if-statement, because they involve different classes of checks, which may lead to the introduction of errors when the code is later modified (`if(x){}else if(y){...}else{...}` => `if(!x){if(y){...}else{...}}`)\n\n*There are 5 instances of this issue:*\n\n```solidity\nFile: contracts/Basket.sol\n\n114:      receive() external payable {}\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Basket.sol#L114>\n\n```solidity\nFile: contracts/NibblVaultFactory.sol\n\n183:      receive() payable external {    }\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L183>\n\n```solidity\nFile: contracts/NibblVault.sol\n\n585:      receive() external payable {}\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVault.sol#L585>\n\n```solidity\nFile: contracts/Proxy/ProxyBasket.sol\n\n56:       receive() external payable {    }\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyBasket.sol#L56>\n\n```solidity\nFile: contracts/Proxy/ProxyVault.sol\n\n56:       receive() external payable {    }\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Proxy/ProxyVault.sol#L56>\n\n## [22] Use custom errors rather than `revert()`/`require()` strings to save gas\n\nCustom errors are available from solidity version 0.8.4. Custom errors save [**\\~50 gas**](https://gist.github.com/IllIllI000/ad1bd0d29a0101b25e57c293b4b0c746) each time they're hitby [avoiding having to allocate and store the revert string](https://blog.soliditylang.org/2021/04/21/custom-errors/#errors-in-depth). Not defining the strings also save deployment gas\n\n*There are 41 instances of this issue:*\n\n[See original submission](https://github.com/code-423n4/2022-06-nibbl-findings/issues/140) for details.\n\n## [23] Functions guaranteed to revert when called by normal users can be marked `payable`\n\nIf a function modifier such as `onlyOwner` is used, the function will revert if a normal user tries to pay the function. Marking the function as `payable` will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided. The extra opcodes avoided are\n`CALLVALUE`(2),`DUP1`(3),`ISZERO`(3),`PUSH2`(3),`JUMPI`(10),`PUSH1`(3),`DUP1`(3),`REVERT`(0),`JUMPDEST`(1),`POP`(2), which costs an average of about **21 gas per call** to the function, in addition to the extra deployment cost\n\n*There are 8 instances of this issue:*\n\n```solidity\nFile: contracts/NibblVaultFactory.sol\n\n99:       function proposeNewBasketImplementation(address _newBasketImplementation) external override onlyRole(IMPLEMENTER_ROLE) {\n\n123:      function proposeNewAdminFeeAddress(address _newFeeAddress) external override onlyRole(FEE_ROLE) {\n\n140:      function proposeNewAdminFee(uint256 _newFee) external override onlyRole(FEE_ROLE) {\n\n158:      function proposeNewVaultImplementation(address _newVaultImplementation) external override onlyRole(IMPLEMENTER_ROLE) {\n\n173:      function pause() external onlyRole(PAUSER_ROLE) override {\n\n179:      function unPause() external onlyRole(PAUSER_ROLE) override {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/NibblVaultFactory.sol#L99>\n\n```solidity\nFile: contracts/Utilities/AccessControlMechanism.sol\n\n32:       function setRoleAdmin(bytes32 _role, bytes32 _adminRole) external override onlyRole(getRoleAdmin(_role)) {\n\n40:       function proposeGrantRole(bytes32 _role, address _to) external override onlyRole(getRoleAdmin(_role)) {\n```\n\n<https://github.com/code-423n4/2022-06-nibbl/blob/8c3dbd6adf350f35c58b31723d42117765644110/contracts/Utilities/AccessControlMechanism.sol#L32>\n\n***\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}