{
  "circa": {
    "title": "Paladin - Warden Pledges contest",
    "sponsor": "Paladin",
    "slug": "2022-10-paladin",
    "date": "2023-01-06",
    "findings": "https://github.com/code-423n4/2022-10-paladin-findings/issues",
    "contest": 176
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Paladin - Warden Pledges smart contract system written in Solidity. The audit contest took place between October 27—October 30 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>97 Wardens contributed reports to the Paladin - Warden Pledges contest:</p>\n<ol>\n<li>0x007</li>\n<li>0x1f8b</li>\n<li>0x52</li>\n<li><a href=\"https://decorativepineapple.github.io/\">0xDecorativePineapple</a></li>\n<li>0xDjango</li>\n<li><a href=\"https://twitter.com/0xNazgul\">0xNazgul</a></li>\n<li><a href=\"https://twitter.com/0xRoxas\">0xRoxas</a></li>\n<li><a href=\"https://twitter.com/0xSmartContract\">0xSmartContract</a></li>\n<li>0xbepresent</li>\n<li>0xhunter</li>\n<li><a href=\"https://twitter.com/8olidity\">8olidity</a></li>\n<li>Amithuddar</li>\n<li>Awesome</li>\n<li><a href=\"https://github.com/Aymen1001\">Aymen0909</a></li>\n<li>B2</li>\n<li>Bnke0x0</li>\n<li><a href=\"https://chom.dev\">Chom</a></li>\n<li>Diana</li>\n<li><a href=\"https://twitter.com/BowTiedDravee\">Dravee</a></li>\n<li>JTJabba</li>\n<li><a href=\"https://jeiwan.net\">Jeiwan</a></li>\n<li>Josiah</li>\n<li>KingNFT</li>\n<li>KoKo</li>\n<li>Lambda</li>\n<li>Mathieu</li>\n<li><a href=\"https://twitter.com/Nyksx__\">Nyx</a></li>\n<li><a href=\"https://twitter.com/thePicodes\">Picodes</a></li>\n<li>RaoulSchaffranek</li>\n<li>RaymondFam</li>\n<li>RedOneN</li>\n<li>ReyAdmirado</li>\n<li>RockingMiles (robee and pants)</li>\n<li>Rolezn</li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li>SadBase</li>\n<li><a href=\"https://twitter.com/Sm4rty_\">Sm4rty</a></li>\n<li>SooYa</li>\n<li>Tricko</li>\n<li><a href=\"https://twitter.com/trust__90\">Trust</a></li>\n<li>Waze</li>\n<li>__141345__</li>\n<li><a href=\"https://twitter.com/a12jmx\">a12jmx</a></li>\n<li><a href=\"https://github.com/romeroadrian\">adriro</a></li>\n<li>ajtra</li>\n<li>ballx</li>\n<li><a href=\"https://twitter.com/bin2chen\">bin2chen</a></li>\n<li>brgltd</li>\n<li><a href=\"https://twitter.com/c3ph_\">c3phas</a></li>\n<li><a href=\"https://twitter.com/CAA1994\">carlitox477</a></li>\n<li>cccz</li>\n<li>ch0bu</li>\n<li>chaduke</li>\n<li>chrisdior4</li>\n<li>codexploder</li>\n<li>corerouter</li>\n<li>cryptonue</li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li>ctf_sec</li>\n<li><a href=\"https://twitter.com/cylzxje\">cylzxje</a></li>\n<li>delfin454000</li>\n<li>dic0de</li>\n<li>djxploit</li>\n<li><a href=\"https://github.com/lyciumlee\">durianSausage</a></li>\n<li>emrekocak</li>\n<li>erictee</li>\n<li><a href=\"https://www.linkedin.com/in/georgi-nikolaev-georgiev-978253219\">gogo</a></li>\n<li>halden</li>\n<li><a href=\"https://twitter.com/hansfriese\">hansfriese</a></li>\n<li>horsefacts</li>\n<li>hxzy</li>\n<li>imare</li>\n<li><a href=\"https://twitter.com/krenkmet\">indijanc</a></li>\n<li>jayphbee</li>\n<li>jwood</li>\n<li>karanctf</li>\n<li>ktg</li>\n<li>ladboy233</li>\n<li>leosathya</li>\n<li>lukris02</li>\n<li>minhtrng</li>\n<li>neko_nyaa</li>\n<li><a href=\"https://twitter.com/andyfeili\">oyc_109</a></li>\n<li>pashov</li>\n<li>peiw</li>\n<li>peritoflores</li>\n<li>rbserver</li>\n<li>robee</li>\n<li>rvierdiiev</li>\n<li>sakman</li>\n<li>shark</li>\n<li>skyle</li>\n<li>subtle77</li>\n<li>tnevler</li>\n<li>wagmi</li>\n<li>yixxas</li>\n</ol>\n<p>This contest was judged by <a href=\"https://github.com/kirk-baird\">kirk-baird</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 8 unique vulnerabilities. Of these vulnerabilities, 0 received a risk rating in the category of HIGH severity and 8 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 68 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 49 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-10-paladin\">C4 Paladin - Warden Pledges contest repository</a>, and is composed of 1 smart contract written in the Solidity programming language and includes 317 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"medium-risk-findings-8\" style=\"position:relative;\"><a href=\"#medium-risk-findings-8\" aria-label=\"medium risk findings 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (8)</h1>\n<h2 id=\"m-01-due-to-loss-of-precision-targetvotes-may-not-reach\" style=\"position:relative;\"><a href=\"#m-01-due-to-loss-of-precision-targetvotes-may-not-reach\" aria-label=\"m 01 due to loss of precision targetvotes may not reach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/59\">[M-01] Due to loss of precision, targetVotes may not reach</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/59\">cccz</a></em></p>\n<p>In the <code>\\_pledge</code> function, require delegationBoost.adjusted<em>balance</em>of(pledgeParams.receiver) + amount &#x3C;= pledgeParams.targetVotes.</p>\n<p>In reality, when the user pledges the amount of votes, the actual votes received by the receiver are the bias in the following calculation. And the bias will be less than amount due to the loss of precision.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 slope = amount / boostDuration;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 bias = slope * boostDuration;</span></span></code></pre>\n<p>This means that the balance of receiver may not reach targetVotes</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    point = self._checkpoint_read(_user, False)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    amount += (point.bias - point.slope * (block.timestamp - point.ts))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    return amount</span></span></code></pre>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L245-L246\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L245-L246</a></p>\n<p><a href=\"https://github.com/curvefi/curve-veBoost/blob/master/contracts/BoostV2.vy#L192-L209\">https://github.com/curvefi/curve-veBoost/blob/master/contracts/BoostV2.vy#L192-L209</a></p>\n<p><a href=\"https://github.com/curvefi/curve-veBoost/blob/master/contracts/BoostV2.vy#L175\">https://github.com/curvefi/curve-veBoost/blob/master/contracts/BoostV2.vy#L175</a></p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use bias instead of amount in the check below:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 slope = amount / boostDuration;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 bias = slope * boostDuration;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if(delegationBoost.adjusted_balance_of(pledgeParams.receiver) + bias &gt; pledgeParams.targetVotes) revert Errors.TargetVotesOverflow();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        delegationBoost.boost(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            pledgeParams.receiver,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            amount,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            endTimestamp,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            user</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/59#issuecomment-1296374082\">Kogaroshi (Paladin) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>The current check is made that way to prevent any unnecessary call to the BoostV2 contract (and save gas by not creating the Boost) in the case of a <code>targetVotes</code> overflow.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-owner-can-transfer-all-erc20-reward-token-out-using-function-recovererc20\" style=\"position:relative;\"><a href=\"#m-02-owner-can-transfer-all-erc20-reward-token-out-using-function-recovererc20\" aria-label=\"m 02 owner can transfer all erc20 reward token out using function recovererc20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/68\">[M-02] Owner can transfer all ERC20 reward token out using function recoverERC20</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/68\">ladboy233</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/283\">yixxas</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/274\">JTJabba</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/270\">rbserver</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/259\">Aymen0909</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/249\">horsefacts</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/247\">minhtrng</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/242\">0xhunter</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/236\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/219\">peritoflores</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/207\">0xDecorativePineapple</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/206\">Dravee</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/196\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/179\">imare</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/162\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/154\">wagmi</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/148\">0x52</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/130\">Picodes</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/116\">cryptonue</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/106\">pashov</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/84\">Bnke0x0</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/81\">Lambda</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/60\">Nyx</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/54\">cccz</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/44\">dic0de</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/29\">csanuragjain</a>, and <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/17\">rvierdiiev</a></em></p>\n<p>The function recoverERC20 is very privileged. It means to recover any token that is accidently sent to the contract.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">recoverERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">minAmountRewardToken</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">] != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">CannotRecoverToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">NullValue</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk11\">owner</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>However, admin / owner can use this function to transfer all the reserved reward tokens, which result in fund loss of the pledge creator and the loss of reward for users that want to delegate the veToken.</p>\n<p>Also, the recovered token is sent to owner directly instead of sending to a recipient address.</p>\n<p>The safeguard</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">minAmountRewardToken</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">] != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>cannot stop owner transferring funds because if the owner is compromised or misbehaves, he can adjust the whitelist easily.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The admin can set minAmountRewardToken[token] to 0 first by calling updateRewardToken:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateRewardToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minRewardPerSecond</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p>By doing this the admin removes the token from the whitelist, then the token can call recoverERC20 to transfer all the token into the owner wallet.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">recoverERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>We recommend that the project uses a multisig wallet to safeguard the owner’s wallet.</p>\n<p>We can also keep track of the reserved amount for rewarding token and only transfer the remaining amount of token out.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeAvailableRewardAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">totalRewardAmount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk12\">reservedReward</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">] += </span><span class=\"mtk12\">totalRewardAmount</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>Then we can change the implementation to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">recoverERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">NullValue</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">minAmountRewardToken</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">] == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t </span><span class=\"mtk3\">// if it is not whitelisted, we assume it is mistakenly sent, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t   </span><span class=\"mtk3\">// we transfer the token to recipient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t} </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// revert if the owner over transfer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt;  </span><span class=\"mtk12\">reservedReward</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">]) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">rewardReserved</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t  </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">reservedReward</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/17\">Kogaroshi (Paladin) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/68#issuecomment-1296375338\">Kogaroshi (Paladin) commented</a>:</strong></p>\n<blockquote>\n<p>Interesting proposed Mitigation to be noted. </p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-pledge-may-be-out-of-reward-due-to-the-decay-in-vecrv-balance-targetvotes-is-never-reached\" style=\"position:relative;\"><a href=\"#m-03-pledge-may-be-out-of-reward-due-to-the-decay-in-vecrv-balance-targetvotes-is-never-reached\" aria-label=\"m 03 pledge may be out of reward due to the decay in vecrv balance targetvotes is never reached permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/91\">[M-03] Pledge may be out of reward due to the decay in veCRV balance. targetVotes is never reached.</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/91\">Chom</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/167\">Jeiwan</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/131\">Picodes</a>, and <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/120\">KingNFT</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L325-L335\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L325-L335</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L259-L268\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L259-L268</a></p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Pledge may be out of reward due to the decay in veCRV balance. The receiver may lose his reward given to boosters but get nothing in return since her targetVotes is never reached.</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>According to Curve documentation at <a href=\"https://curve.readthedocs.io/dao-vecrv.html\">https://curve.readthedocs.io/dao-vecrv.html</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">A user’s veCRV balance decays linearly as the remaining time until the CRV unlock decreases. For example, a balance of 4000 CRV locked for one year provides the same amount of veCRV as 2000 CRV locked for two years, or 1000 CRV locked for four years.</span></span></code></pre>\n<p>On creation, targetVotes = 100, balance = 20 -> votesDifference = 80 -> reward is allocated for 80 votes</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Get the missing votes for the given receiver to reach the target votes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// We ignore any delegated boost here because they might expire during the Pledge duration</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// (we can have a future version of this contract using adjusted_balance)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">votesDifference</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">targetVotes</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">votingEscrow</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalRewardAmount</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">rewardPerVote</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">votesDifference</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">duration</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">UNIT</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">feeAmount</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalRewardAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">protocalFeeRatio</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">MAX_PCT</span><span class=\"mtk1\"> ;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalRewardAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">maxTotalRewardAmount</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">IncorrectMaxTotalRewardAmount</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">feeAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">maxFeeAmount</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">IncorrectMaxFeeAmount</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Pull all the rewards in this contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rewardToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">creator</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalRewardAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// And transfer the fees from the Pledge creator to the Chest contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rewardToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">creator</span><span class=\"mtk1\">, </span><span class=\"mtk12\">chestAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">feeAmount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Then 1 week passed, receiver’s balance decay to 10</p>\n<p>On creation, targetVotes = 100, balance = 10 but votesDifference stays 80, and reward has only allocated for 80 votes.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Rewards are set in the Pledge as reward/veToken/sec</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// To find the total amount of veToken delegated through the whole Boost duration</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// based on the Boost bias &amp; the Boost duration, to take in account that the delegated amount decreases</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// each second of the Boost duration</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalDelegatedAmount</span><span class=\"mtk1\"> = ((</span><span class=\"mtk12\">bias</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">boostDuration</span><span class=\"mtk1\">) + </span><span class=\"mtk12\">bias</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Then we can calculate the total amount of rewards for this Boost</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardAmount</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">totalDelegatedAmount</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">rewardPerVote</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">UNIT</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rewardAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">pledgeAvailableRewardAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">]) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">RewardsBalanceTooLow</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">pledgeAvailableRewardAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">] -= </span><span class=\"mtk12\">rewardAmount</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>A booster boosts 80 votes and takes all rewards in the pool. However, only 80 (From booster) + 10 (From receiver) = 90 votes is active. Not 100 votes that receiver promise in the targetVotes.</p>\n<p>Then, if another booster tries to boost 10 votes, it will be reverted with RewardsBalanceTooLow since the first booster has taken all reward that is allocated for only 80 votes.</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>You should provide a way for the creator to provide additional rewards after the pledge creation. Or provide some reward refreshment function that recalculates votesDifference and transfers the required additional reward.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/91#issuecomment-1301494542\">Kogaroshi (Paladin) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Changed the logic in <a href=\"https://github.com/PaladinFinance/Warden-v2/pull/2\">PR 2</a>, <a href=\"https://github.com/PaladinFinance/Warden-v2/pull/2/commits/edc9b0280bbb4144d3983642eeab9db17499e9f6\">commit</a>\nNow the whole amount of votes needed for each second of the Pledge duration is calculated, taking in account the receiver potential veCRV balance, and the veCRV decay.</p>\n<p>This should allow to add only the exact amount of reward needed to the Pledge reward pool, and have always the correct amount of rewards to achieve the vote target of the Pledge at all times.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/91#issuecomment-1301495120\">Kogaroshi (Paladin) commented</a>:</strong></p>\n<blockquote>\n<p>If possible, a feedback on the new calculation and logic would be appreciated.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-pledges-that-contain-delisted-tokens-can-be-extended-to-continue-using-delisted-reward-tokens\" style=\"position:relative;\"><a href=\"#m-04-pledges-that-contain-delisted-tokens-can-be-extended-to-continue-using-delisted-reward-tokens\" aria-label=\"m 04 pledges that contain delisted tokens can be extended to continue using delisted reward tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/145\">[M-04] Pledges that contain delisted tokens can be extended to continue using delisted reward tokens</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/145\">0x52</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/159\">bin2chen</a></em></p>\n<p>Delisted reward tokens can continue to be used by extending current pledges that already use it.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">if(pledgeId &gt;= pledgesIndex()) revert Errors.InvalidPledgeID();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">address creator = pledgeOwner[pledgeId];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if(msg.sender != creator) revert Errors.NotPledgeCreator();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Pledge storage pledgeParams = pledges[pledgeId];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if(pledgeParams.closed) revert Errors.PledgeClosed();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if(pledgeParams.endTimestamp &lt;= block.timestamp) revert Errors.ExpiredPledge();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if(newEndTimestamp == 0) revert Errors.NullEndTimestamp();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 oldEndTimestamp = pledgeParams.endTimestamp;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if(newEndTimestamp != _getRoundedTimestamp(newEndTimestamp) || newEndTimestamp &lt; oldEndTimestamp) revert Errors.InvalidEndTimestamp();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 addedDuration = newEndTimestamp - oldEndTimestamp;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if(addedDuration &lt; minDelegationTime) revert Errors.DurationTooShort();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 totalRewardAmount = (pledgeParams.rewardPerVote * pledgeParams.votesDifference * addedDuration) / UNIT;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 feeAmount = (totalRewardAmount * protocalFeeRatio) / MAX_PCT ;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if(totalRewardAmount &gt; maxTotalRewardAmount) revert Errors.IncorrectMaxTotalRewardAmount();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if(feeAmount &gt; maxFeeAmount) revert Errors.IncorrectMaxFeeAmount();</span></span></code></pre>\n<p>During the input validation checks, it’s never checked that reward token of the pledge being extended is still a valid reward token. This would allow creators using delisted tokens to continue using them as long as they wanted, by simply extending their currently active pledges.</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add the following check during the input validation block:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">+   if(minAmountRewardToken[rewardToken] == 0) revert Errors.TokenNotWhitelisted();</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/145#issuecomment-1297680425\">Kogaroshi (Paladin) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Fixed in <a href=\"https://github.com/PaladinFinance/Warden-v2/pull/2\">PR 2</a>, <a href=\"https://github.com/PaladinFinance/Warden-v2/pull/2/commits/37ecb4f318bf60edcb75b49c41e56d44c72bd2c4\">commit</a>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/145#issuecomment-1311337350\">kirk-baird (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I consider this a valid Medium risk as pledges can be extended indefinitely. It bypasses the whitelisting which may be damaging if a token is found to be malicious and removed.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-wardenpledge-accidentally-inherits-ownable-instead-of-owner-which-removes-an-important-safeguard-without-sponsor-knowledge\" style=\"position:relative;\"><a href=\"#m-05-wardenpledge-accidentally-inherits-ownable-instead-of-owner-which-removes-an-important-safeguard-without-sponsor-knowledge\" aria-label=\"m 05 wardenpledge accidentally inherits ownable instead of owner which removes an important safeguard without sponsor knowledge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/161\">[M-05] WardenPledge accidentally inherits Ownable instead of Owner which removes an important safeguard without sponsor knowledge</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/161\">0x52</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/284\">pashov</a> and <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/180\">indijanc</a></em></p>\n<p>Owner may accidentally transfer ownership to inoperable address due to perceived safeguard that doesn’t exist.</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">contract WardenPledge is Ownable, Pausable, ReentrancyGuard {</span></span></code></pre>\n<p>WardenPledge inherits from Ownable rather than Owner, which is the intended contract. Owner overwrites the critical Ownable#transferOwnership function to make the ownership transfer process a two step process. This adds important safeguards because in the event that the target is unable to accept for any reason (input typo, incompatible multisig/contract, etc.) the ownership transfer process will fail because the pending owner will not be able to accept the transfer. To make matters worse, since it only overwrites the transferOwnership function the WardenPledge contract will otherwise function as intended just without this safeguard. It is likely that the owner won’t even realize until it’s too late and the safeguard has failed. A perceived safeguard where there isn’t one is more damaging than not having any safeguard at all.</p>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">-   contract WardenPledge is Ownable, Pausable, ReentrancyGuard {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+   contract WardenPledge is Owner, Pausable, ReentrancyGuard {</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/180\">Kogaroshi (Paladin) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-06-reward-can-be-over--or-undercounted-in-extendpledge-and-increasepledgerewardpervote\" style=\"position:relative;\"><a href=\"#m-06-reward-can-be-over--or-undercounted-in-extendpledge-and-increasepledgerewardpervote\" aria-label=\"m 06 reward can be over  or undercounted in extendpledge and increasepledgerewardpervote permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/163\">[M-06] Reward can be over- or undercounted in <code>extendPledge</code> and <code>increasePledgeRewardPerVote</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/163\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/280\">Aymen0909</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/234\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/186\">0xDjango</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/94\">Chom</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/83\">Lambda</a>, and <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/61\">Ruhum</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L387\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L387</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L432\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L432</a></p>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Total reward amount in <code>extendPledge</code> and <code>increasePledgeRewardPerVote</code> can be calculated incorrectly due to cached <code>pledgeParams.votesDifference</code>, which can lead to two outcomes:</p>\n<ol>\n<li>total reward amount is higher, thus a portion of it won’t be claimable;</li>\n<li>total reward amount is lower, thus the pledge target won’t be reached.</li>\n</ol>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>When a pledge is created, the creator chooses the target–the total amount of votes they want to reach with the pledge. Based on a target, the number of missing votes is calculated, which is then used to calculated the total reward amount (<a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L325-L327\">WardenPledge.sol#L325-L327</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">createPledge</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">targetVotes</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardPerVote</span><span class=\"mtk1\">, </span><span class=\"mtk3\">// reward/veToken/second</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">endTimestamp</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxTotalRewardAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxFeeAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">whenNotPaused</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Get the missing votes for the given receiver to reach the target votes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// We ignore any delegated boost here because they might expire during the Pledge duration</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// (we can have a future version of this contract using adjusted_balance)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">votesDifference</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">targetVotes</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">votingEscrow</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalRewardAmount</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">rewardPerVote</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">votesDifference</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">duration</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">UNIT</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<p>When extending a pledge or increasing a pledge reward per vote, current veToken balance of the pledge’s receiver (<code>votingEscrow.balanceOf(receiver)</code>) can be different from the one it had when the pledge was created (e.g. the receiver managed to lock more CRV or some of locked tokens have expired). However <code>pledgeParams.votesDifference</code> is not recalculated (<a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L387\">WardenPledge.sol#L387</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L432\">WardenPledge.sol#L432</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">extendPledge</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newEndTimestamp</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxTotalRewardAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxFeeAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">whenNotPaused</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Pledge</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pledges</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalRewardAmount</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">rewardPerVote</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">votesDifference</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">addedDuration</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">UNIT</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">increasePledgeRewardPerVote</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newRewardPerVote</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxTotalRewardAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxFeeAmount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">whenNotPaused</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Pledge</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pledges</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalRewardAmount</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">rewardPerVoteDiff</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">votesDifference</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">remainingDuration</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">UNIT</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>This can lead to two consequences:</p>\n<ol>\n<li>\n<p>When receiver’s veToken balance has increased (i.e. <code>votesDifference</code> got in fact smaller), pledge creator will overpay for pledge extension and pledge reward per vote increase. This extra reward cannot be received by pledgers because a receiver cannot get more votes than <code>pledgeParams.targetVotes</code> (which is not updated when modifying a pledge):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_pledge</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">endTimestamp</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Check that this will not go over the Pledge target of votes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">delegationBoost</span><span class=\"mtk1\">.</span><span class=\"mtk11\">adjusted_balance_of</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">) + </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">targetVotes</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">TargetVotesOverflow</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n</li>\n<li>When receiver’s veToken balance has decreased (i.e. <code>votesDifference</code> got in fact bigger), the pledge target cannot be reached because the reward amount was underpaid in <code>extendPledge</code>/<code>increasePledgeRewardPerVote</code>.</li>\n</ol>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider updating <code>votesDifference</code> when extending a pledge or increasing a pledge reward per vote.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/163#issuecomment-1301496158\">Kogaroshi (Paladin) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>As stated in <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/91\">#91</a>, new method for needed votes &#x26; needed reward calculations is introduced in this <a href=\"https://github.com/PaladinFinance/Warden-v2/pull/2/commits/edc9b0280bbb4144d3983642eeab9db17499e9f6\">commit</a>, allowing to get the exact amount of reward token the Pledge creator should pay when extending the Pledge or increasing the <code>rewardPerVote</code>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-07--fees-charged-from-entire-theoretical-pledge-amount-instead-of-actual-pledge-amount\" style=\"position:relative;\"><a href=\"#m-07--fees-charged-from-entire-theoretical-pledge-amount-instead-of-actual-pledge-amount\" aria-label=\"m 07  fees charged from entire theoretical pledge amount instead of actual pledge amount permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/235\">[M-07]  Fees charged from entire theoretical pledge amount instead of actual pledge amount</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/235\">Trust</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/142\">0x52</a></em></p>\n<p>Paladin receives a 5% cut from Boost purchases, as documented on the <a href=\"https://paladin.vote/#/\">website</a>:</p>\n<p>“Warden takes a 5% fee on Boost purchases, and 5% on Quest incentives. However, there are various pricing tiers for Quest creators. Contact the Paladin team for more info.”</p>\n<p>Here’s how fee calculation looks at  <code>createPledge</code> function:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">vars.totalRewardAmount = (rewardPerVote * vars.votesDifference * vars.duration) / UNIT;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">vars.feeAmount = (vars.totalRewardAmount * protocalFeeRatio) / MAX_PCT ;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if(vars.totalRewardAmount &gt; maxTotalRewardAmount) revert Errors.IncorrectMaxTotalRewardAmount();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if(vars.feeAmount &gt; maxFeeAmount) revert Errors.IncorrectMaxFeeAmount();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Pull all the rewards in this contract</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">IERC20(rewardToken).safeTransferFrom(creator, address(this), vars.totalRewardAmount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// And transfer the fees from the Pledge creator to the Chest contract</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">IERC20(rewardToken).safeTransferFrom(creator, chestAddress, vars.feeAmount);</span></span></code></pre>\n<p>The issue is that the fee is taken up front, assuming <code>totalRewardAmount</code> will actually be rewarded by the pledge. In practice, the rewards actually utilized can be anywhere from zero to <code>totalRewardAmount</code>. Indeed, reward will only be <code>totalRewardAmount</code> if, in the entire period from pledge creation to pledge expiry, the desired targetVotes will be fulfilled, which is extremly unlikely.</p>\n<p>As a result, if pledge expires with no pledgers, protocol will still take 5%. This behavior is both unfair and against the docs, as it’s not “Paladin receives a 5% cut from Boost purchases”.</p>\n<h3 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Paladin fee collection assumes pledges will be matched immediately and fully, which is not realistic. Therefore far too many fees are collected at user’s expense.</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>Bob creates a pledge, with target = 200, current balance = 100, rewardVotes = 10, remaining time = 1 week.</li>\n<li>Protocol collects (200 - 100) * 10 * WEEK_SECONDS * 5% fees</li>\n<li>A week passed, rewards were not attractive enough to bring pledgers.</li>\n<li>After expiry, Bob calls <code>retrievePledgeRewards()</code> and gets 100 * 10 * WEEK_SECONDS back, but 5% of the fees still went to chestAddress.</li>\n</ol>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Fee collection should be done after the pledge completes, in one of the close functions or in a newly created pull function for owner to collect fees. Otherwise, it is a completely unfair system.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/235#issuecomment-1298449433\">Kogaroshi (Paladin) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>The issue is acknowledged, and we do calculate fee on the basis of all rewards, and not only the one that are gonna be used to reward users.</p>\n<p>The fee ratio is gonna be of 1% to start with (might change before deploy based on market estimations), and the Core team will be able to change the ratio quickly to adapt it to market and Pledge creators needs (with also considering the Paladin DAO revenues). The Paladin team will also considers Pledge creators that are in specific cases and overpay fees (because they already have delegated boost that will last through the whole Pledge and more), and will be able to refund a part of those fees to the creator if the DAO agrees.</p>\n<p>And if this system does not fit in the current market, and is a blocker to potential Pledge creators, we will be able to modify the way fees are handled, and deploy a new iteration of Pledge pretty fast to answer the issue.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-pausing-wardenpledge-contract-which-takes-effect-immediately-by-its-owner-can-unexpectedly-block-pledge-creator-from-calling-closepledge-or-retrievepledgerewards-function\" style=\"position:relative;\"><a href=\"#m-08-pausing-wardenpledge-contract-which-takes-effect-immediately-by-its-owner-can-unexpectedly-block-pledge-creator-from-calling-closepledge-or-retrievepledgerewards-function\" aria-label=\"m 08 pausing wardenpledge contract which takes effect immediately by its owner can unexpectedly block pledge creator from calling closepledge or retrievepledgerewards function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/269\">[M-08] Pausing <code>WardenPledge</code> contract, which takes effect immediately, by its owner can unexpectedly block pledge creator from calling <code>closePledge</code> or <code>retrievePledgeRewards</code> function</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/269\">rbserver</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/282\">0x1f8b</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/248\">0xSmartContract</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/233\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/194\">hansfriese</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/70\">ctf_sec</a>, <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/58\">cccz</a>, and <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/30\">codexploder</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L636-L638\">https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L636-L638</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L488-L515\">https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L488-L515</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L456-L480\">https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L456-L480</a></p>\n<h3 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The owner of the <code>WardenPledge</code> contract is able to call the <code>pause</code> function to pause this contract. When the <code>WardenPledge</code> contract is paused, calling the <code>closePledge</code> or <code>retrievePledgeRewards</code> function that uses the <code>whenNotPaused</code> modifier reverts, and the pledge creator is not able to get back any of the reward token amount, which was deposited by the creator previously. Because calling the <code>pause</code> function takes effect immediately, it can be unexpected to the creator for suddenly not being able to call the <code>closePledge</code> or <code>retrievePledgeRewards</code> function. For instance, when an emergency occurs that requires an increase of cash flow, the creator wants to close the pledge early so she or he can use the remaining deposited reward token amount. However, just before the creator’s <code>closePledge</code> transaction is executed, the <code>pause</code> transaction has been sent by the owner of the <code>WardenPledge</code> contract for some reason and executed. Without knowing in advance that the <code>WardenPledge</code> contract would be paused, the creator anticipates receiving the remaining deposited reward token amount but this is not the case since calling the <code>closePledge</code> function reverts. Because the creator unexpectedly fails to receive such amount and might fail to deal with the emergency, disputes with the protocol can occur, and the user experience becomes degraded.</p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L636-L638\">https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L636-L638</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pause</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_pause</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L488-L515\">https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L488-L515</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">closePledge</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">whenNotPaused</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Get the current remaining amount of rewards not distributed for the Pledge</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">remainingAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pledgeAvailableRewardAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">remainingAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Transfer the non used rewards and reset storage</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">pledgeAvailableRewardAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">rewardToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">remainingAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L456-L480\">https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L456-L480</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">retrievePledgeRewards</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">whenNotPaused</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Get the current remaining amount of rewards not distributed for the Pledge</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">remainingAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pledgeAvailableRewardAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">remainingAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Transfer the non used rewards and reset storage</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">pledgeAvailableRewardAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">rewardToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">remainingAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Please append the following test in the <code>pause &#x26; unpause</code> <code>describe</code> block in <code>test\\wardenPledge.test.ts</code>. This test will pass to demonstrate the described scenario.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"typescript\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">it</span><span class=\"mtk1\">.</span><span class=\"mtk11\">only</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;Pausing WardenPledge contract, which takes effect immediately, by its owner can unexpectedly block pledge creator from calling closePledge function&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// before calling the createPledge function, the wardenPledge contract owns no rewardToken1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardToken1BalanceWardenPledgeBefore</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardToken1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rewardToken1BalanceWardenPledgeBefore</span><span class=\"mtk1\">).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk12\">be</span><span class=\"mtk1\">.</span><span class=\"mtk11\">eq</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardToken1BalanceCreatorBefore</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardToken1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">creator</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// creator calls the createPledge function</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">creator</span><span class=\"mtk1\">).</span><span class=\"mtk11\">createPledge</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">rewardToken1</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">target_votes</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">reward_per_vote</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">end_timestamp</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">max_total_reward_amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">max_fee_amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// after one week, admin, who is the owner of the wardenPledge contract, calls the pause function, which takes effect immediately</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">advanceTime</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WEEK</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toNumber</span><span class=\"mtk1\">())</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">admin</span><span class=\"mtk1\">).</span><span class=\"mtk11\">pause</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Since an emergency that requires an increase of cash flow occurs, creator decides to close the pledge for getting back the deposited rewardToken1 amount.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Without knowing in advance that the wardenPledge contract would be paused,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">//   creator calls the closePledge function and anticipates to receive the deposited rewardToken1 amount.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Unfortunately, admin&#39;s pause transaction has been executed just before creator&#39;s closePledge transaction is executed, which causes creator&#39;s closePledge transaction to revert.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">wardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">creator</span><span class=\"mtk1\">).</span><span class=\"mtk11\">closePledge</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pledge_id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">creator</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk12\">be</span><span class=\"mtk1\">.</span><span class=\"mtk11\">revertedWith</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Pausable: paused&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// after creator&#39;s closePledge transaction reverts, creator does not receive the deposited rewardToken1 amount, which is unexpected to her or him</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardToken1BalanceCreatorAfter</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardToken1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">creator</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rewardToken1BalanceCreatorAfter</span><span class=\"mtk1\">).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk12\">be</span><span class=\"mtk1\">.</span><span class=\"mtk11\">lt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rewardToken1BalanceCreatorBefore</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// meanwhile, the wardenPledge contract still holds the creator&#39;s deposited rewardToken1 amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardToken1BalanceWardenPledgeAfter</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardToken1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rewardToken1BalanceWardenPledgeAfter</span><span class=\"mtk1\">).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk12\">be</span><span class=\"mtk1\">.</span><span class=\"mtk11\">gt</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span></code></pre>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The <code>pause</code> function can be updated to be time-delayed so the pledge creator can have more time to react. One way would be making this function only callable by a timelock governance contract.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/70\">Kogaroshi (Paladin) confirmed</a></strong></p>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 67 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/212\">report highlighted below</a> by <strong>robee</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/277\">ajtra</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/272\">rbserver</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/267\">adriro</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/266\">peritoflores</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/264\">Josiah</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/262\">tnevler</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/251\">horsefacts</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/250\">brgltd</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/246\">djxploit</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/244\">minhtrng</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/240\">Dravee</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/239\">B2</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/237\">Trust</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/231\">lukris02</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/230\">delfin454000</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/224\">c3phas</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/220\">RaoulSchaffranek</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/211\">Waze</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/209\">Tricko</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/204\">JTJabba</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/192\">a12jmx</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/190\">Sm4rty</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/187\">0xSmartContract</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/178\">imare</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/173\">0xNazgul</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/168\">Jeiwan</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/156\">0x52</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/151\">Diana</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/140\">shark</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/138\">__141345__</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/136\">carlitox477</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/134\">ktg</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/132\">Awesome</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/129\">Picodes</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/125\">corerouter</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/123\">0x007</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/122\">RedOneN</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/115\">cryptonue</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/111\">jayphbee</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/110\">0xDjango</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/108\">Ruhum</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/107\">pashov</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/99\">cylzxje</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/95\">Chom</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/88\">ReyAdmirado</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/85\">Rolezn</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/82\">Lambda</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/78\">ctf_sec</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/74\">ladboy233</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/72\">8olidity</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/71\">ch0bu</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/62\">jwood</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/57\">cccz</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/56\">oyc_109</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/43\">yixxas</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/42\">dic0de</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/35\">chaduke</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/27\">csanuragjain</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/26\">chrisdior4</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/23\">neko_nyaa</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/22\">Bnke0x0</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/20\">0x1f8b</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/18\">rvierdiiev</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/7\">leosathya</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/3\">RaymondFam</a>, and\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/2\">Mathieu</a>.</em></p>\n<h2 id=\"1-missing-fee-parameter-validation\" style=\"position:relative;\"><a href=\"#1-missing-fee-parameter-validation\" aria-label=\"1 missing fee parameter validation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[1] Missing fee parameter validation</h2>\n<p>Some fee parameters of functions are not checked for invalid values. Validate the parameters:</p>\n<h3 id=\"code-instances\" style=\"position:relative;\"><a href=\"#code-instances\" aria-label=\"code instances permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instances:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    WardenPledge.increasePledgeRewardPerVote (maxFeeAmount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    WardenPledge.extendPledge (maxFeeAmount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    WardenPledge.createPledge (maxFeeAmount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    WardenPledge.updatePlatformFee (newFee)</span></span></code></pre>\n<h2 id=\"2-safeapprove-of-openzeppelin-is-deprecated\" style=\"position:relative;\"><a href=\"#2-safeapprove-of-openzeppelin-is-deprecated\" aria-label=\"2 safeapprove of openzeppelin is deprecated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[2] safeApprove of openZeppelin is deprecated</h2>\n<p>You use safeApprove of openZeppelin although it’s deprecated.\n(see <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/566a774222707e424896c0c390a84dc3c13bdcb2/contracts/token/ERC20/utils/SafeERC20.sol#L38%3E\">here</a>).</p>\n<p>You should change it to increase/decrease Allowance as OpenZeppilin says.</p>\n<h3 id=\"code-instances-1\" style=\"position:relative;\"><a href=\"#code-instances-1\" aria-label=\"code instances 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instances:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    Deprecated safeApprove in SafeERC20.sol line 64: _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Deprecated safeApprove in SafeERC20.sol line 76: _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Deprecated safeApprove in SafeERC20.sol line 55: _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));</span></span></code></pre>\n<h2 id=\"3-not-verified-input\" style=\"position:relative;\"><a href=\"#3-not-verified-input\" aria-label=\"3 not verified input permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[3] Not verified input</h2>\n<p>External / public functions parameters should be validated to make sure the address is not 0.</p>\n<p>Otherwise if not given the right input it can mistakenly lead to loss of user funds.</p>\n<h3 id=\"code-instance\" style=\"position:relative;\"><a href=\"#code-instance\" aria-label=\"code instance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instance:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    WardenPledge.sol.recoverERC20 token</span></span></code></pre>\n<h2 id=\"4-solidity-compiler-versions-mismatch\" style=\"position:relative;\"><a href=\"#4-solidity-compiler-versions-mismatch\" aria-label=\"4 solidity compiler versions mismatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[4] Solidity compiler versions mismatch</h2>\n<p>The project is compiled with different versions of Solidity, which is not recommended because it can lead to undefined behaviors.</p>\n<h2 id=\"5-not-verified-owner\" style=\"position:relative;\"><a href=\"#5-not-verified-owner\" aria-label=\"5 not verified owner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[5] Not verified owner</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    owner param should be validated to make sure the owner address is not address(0).</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Otherwise if not given the right input all only owner accessible functions will be unaccessible.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    </span></span></code></pre>\n<h3 id=\"code-instance-1\" style=\"position:relative;\"><a href=\"#code-instance-1\" aria-label=\"code instance 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instance:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    Ownable.sol.transferOwnership newOwner</span></span></code></pre>\n<h2 id=\"6-two-steps-verification-before-transferring-ownership\" style=\"position:relative;\"><a href=\"#6-two-steps-verification-before-transferring-ownership\" aria-label=\"6 two steps verification before transferring ownership permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[6] Two Steps Verification before Transferring Ownership</h2>\n<p>The following contracts have a function that allows them an admin to change it to a different address. If the admin accidentally uses an invalid address for which they do not have the private key, then the system gets locked.</p>\n<p>It is important to have two steps admin change where the first is announcing a pending new admin and the new address should then claim its ownership.</p>\n<p>A similar issue was reported in a previous contest and was assigned a severity of Medium: <a href=\"https://github.com/code-423n4/2021-06-realitycards-findings/issues/105\">code-423n4/2021-06-realitycards-findings#105</a></p>\n<h3 id=\"code-instance-2\" style=\"position:relative;\"><a href=\"#code-instance-2\" aria-label=\"code instance 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instance:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    Ownable.sol</span></span></code></pre>\n<h2 id=\"7-missing-non-reentrancy-modifier\" style=\"position:relative;\"><a href=\"#7-missing-non-reentrancy-modifier\" aria-label=\"7 missing non reentrancy modifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[7] Missing non reentrancy modifier</h2>\n<p>The following functions are missing reentrancy modifier although some other pulbic/external functions does use reentrancy modifer.\nEven though I did not find a way to exploit it, it seems like those functions should have the nonReentrant modifier as the other functions have it as well..</p>\n<h3 id=\"code-instance-3\" style=\"position:relative;\"><a href=\"#code-instance-3\" aria-label=\"code instance 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instance:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    WardenPledge.sol, recoverERC20 is missing a reentrancy modifier</span></span></code></pre>\n<h2 id=\"8-in-the-following-public-update-functions-no-value-is-returned\" style=\"position:relative;\"><a href=\"#8-in-the-following-public-update-functions-no-value-is-returned\" aria-label=\"8 in the following public update functions no value is returned permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[8] In the following public update functions no value is returned</h2>\n<p>In the following functions no value is returned, due to which by default value of return will be 0.</p>\n<p>We assumed that after the update you return the latest new value.\n(similar issue here: <a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/85\">https://github.com/code-423n4/2021-10-badgerdao-findings/issues/85</a>).</p>\n<h3 id=\"code-instances-2\" style=\"position:relative;\"><a href=\"#code-instances-2\" aria-label=\"code instances 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instances:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    WardenPledge.sol, updateChest</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    WardenPledge.sol, updateMinTargetVotes</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    WardenPledge.sol, updatePlatformFee</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    WardenPledge.sol, updateRewardToken</span></span></code></pre>\n<h2 id=\"9-check-transfer-receiver-is-not-0-to-avoid-burned-money\" style=\"position:relative;\"><a href=\"#9-check-transfer-receiver-is-not-0-to-avoid-burned-money\" aria-label=\"9 check transfer receiver is not 0 to avoid burned money permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[9] Check transfer receiver is not 0 to avoid burned money</h2>\n<p>Transferring tokens to the zero address is usually prohibited to accidentally avoid “burning” tokens by sending them to an unrecoverable zero address.</p>\n<h3 id=\"code-instances-3\" style=\"position:relative;\"><a href=\"#code-instances-3\" aria-label=\"code instances 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instances:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"658\"></span><span class=\"grvsc-source\">    https:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"472\"></span><span class=\"grvsc-source\">    https:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"271\"></span><span class=\"grvsc-source\">    https:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"438\"></span><span class=\"grvsc-source\">    https:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"333\"></span><span class=\"grvsc-source\">    https:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"394\"></span><span class=\"grvsc-source\">    https:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"505\"></span><span class=\"grvsc-source\">    https:</span></span></code></pre>\n<h2 id=\"10-missing-commenting\" style=\"position:relative;\"><a href=\"#10-missing-commenting\" aria-label=\"10 missing commenting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[10] Missing commenting</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    The following functions are missing commenting as describe below:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    </span></span></code></pre>\n<h3 id=\"code-instance-4\" style=\"position:relative;\"><a href=\"#code-instance-4\" aria-label=\"code instance 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instance:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    Pausable.sol, paused (public), @return is missing</span></span></code></pre>\n<h2 id=\"11-unsafe-cast\" style=\"position:relative;\"><a href=\"#11-unsafe-cast\" aria-label=\"11 unsafe cast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[11] Unsafe Cast</h2>\n<p>Use openzeppilin’s safeCast in:</p>\n<h3 id=\"code-instance-5\" style=\"position:relative;\"><a href=\"#code-instance-5\" aria-label=\"code instance 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instance:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L665 : unsafe cast uint64(n)</span></span></code></pre>\n<h2 id=\"12-div-by-0\" style=\"position:relative;\"><a href=\"#12-div-by-0\" aria-label=\"12 div by 0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[12] Div by 0</h2>\n<p>Division by 0 can lead to accidentally revert,\n(An example of a similar issue - <a href=\"https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/84\">https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/84</a>)</p>\n<h3 id=\"code-instance-6\" style=\"position:relative;\"><a href=\"#code-instance-6\" aria-label=\"code instance 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instance:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L256 boostDuration might be 0</span></span></code></pre>\n<h2 id=\"13-tokens-with-fee-on-transfer-are-not-supported\" style=\"position:relative;\"><a href=\"#13-tokens-with-fee-on-transfer-are-not-supported\" aria-label=\"13 tokens with fee on transfer are not supported permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[13] Tokens with fee on transfer are not supported</h2>\n<p>There are ERC20 tokens that charge fee for every transfer() / transferFrom().</p>\n<p>Vault.sol#addValue() assumes that the received amount is the same as the transfer amount, and uses it to calculate attributions, balance amounts, etc.</p>\n<p>But, the actual transferred amount can be lower for those tokens.\nTherefore it’s recommended to use the balance change before and after the transfer instead of the amount.</p>\n<p>This way you also support the tokens with transfer fee - that are popular.</p>\n<h3 id=\"code-instances-4\" style=\"position:relative;\"><a href=\"#code-instances-4\" aria-label=\"code instances 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code instances:</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"438\"></span><span class=\"grvsc-source\">    https:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"333\"></span><span class=\"grvsc-source\">    https:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"394\"></span><span class=\"grvsc-source\">    https:</span></span></code></pre>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 48 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/223\">report highlighted below</a> by <strong>c3phas</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/278\">sakman</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/275\">tnevler</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/273\">ajtra</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/268\">adriro</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/263\">lukris02</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/254\">horsefacts</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/245\">B2</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/243\">peiw</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/241\">djxploit</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/228\">KoKo</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/225\">Dravee</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/221\">indijanc</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/215\">gogo</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/213\">RockingMiles</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/210\">Waze</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/208\">0xSmartContract</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/202\">SooYa</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/198\">0xRoxas</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/185\">Amithuddar</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/177\">imare</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/174\">SadBase</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/172\">0xNazgul</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/155\">neko_nyaa</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/152\">halden</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/146\">shark</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/137\">__141345__</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/135\">carlitox477</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/128\">Picodes</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/127\">karanctf</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/124\">emrekocak</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/121\">RedOneN</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/119\">erictee</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/104\">0xbepresent</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/98\">cylzxje</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/87\">ReyAdmirado</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/69\">Ruhum</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/67\">Mathieu</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/66\">ch0bu</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/63\">durianSausage</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/55\">oyc_109</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/53\">Awesome</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/51\">skyle</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/21\">Bnke0x0</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/19\">0x1f8b</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/13\">ballx</a>,\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/6\">leosathya</a>, and\n<a href=\"https://github.com/code-423n4/2022-10-paladin-findings/issues/5\">RaymondFam</a>.</em></p>\n<h2 id=\"findings\" style=\"position:relative;\"><a href=\"#findings\" aria-label=\"findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Findings</h2>\n<p>NB: Some functions have been truncated where neccessary to just show affected parts of the code.</p>\n<p>Throughout the report, some places might be denoted with audit tags to show the actual place affected.</p>\n<h2 id=\"g-01-using-immutable-on-variables-that-are-only-set-in-the-constructor-and-never-after\" style=\"position:relative;\"><a href=\"#g-01-using-immutable-on-variables-that-are-only-set-in-the-constructor-and-never-after\" aria-label=\"g 01 using immutable on variables that are only set in the constructor and never after permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01] Using immutable on variables that are only set in the constructor and never after</h2>\n<p>Use immutable if you want to assign a permanent value at construction. Use constants if you already know the permanent value. Both get directly embedded in bytecode, saving SLOAD.\nVariables only set in the constructor and never edited afterwards should be marked as immutable, as it would avoid the expensive storage-writing operation in the constructor (around 20 000 gas per variable) and replace the expensive storage-reading operations (around 2100 gas per reading) to a less expensive value reading (3 gas)</p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L60\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L60</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">60</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">IVotingEscrow</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">votingEscrow</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L62\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L62</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">62</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">IBoostV2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">delegationBoost</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"g-02-use-constants-for-variables-whose-value-is-known-beforehand-and-is-never-changed\" style=\"position:relative;\"><a href=\"#g-02-use-constants-for-variables-whose-value-is-known-beforehand-and-is-never-changed\" aria-label=\"g 02 use constants for variables whose value is known beforehand and is never changed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-02] Use constants for variables whose value is known beforehand and is never changed</h2>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L79\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L79</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">79</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minDelegationTime</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">weeks</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index beb990d..642a848 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -76,7 +76,7 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     uint256 public minTargetVotes;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /** @notice Minimum delegation time, taken from veBoost contract */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    uint256 public minDelegationTime = 1 weeks;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    uint256 public constant minDelegationTime = 1 weeks;</span></span></span></code></pre>\n<h2 id=\"g-03-cache-storage-values-in-memory-to-minimize-sloads\" style=\"position:relative;\"><a href=\"#g-03-cache-storage-values-in-memory-to-minimize-sloads\" aria-label=\"g 03 cache storage values in memory to minimize sloads permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-03] Cache storage values in memory to minimize SLOADs</h2>\n<p>The code can be optimized by minimizing the number of SLOADs.</p>\n<p>SLOADs are expensive (100 gas after the 1st one) compared to MLOADs/MSTOREs (3 gas each). Storage values read multiple times should instead be cached in memory the first time (costing 1 SLOAD) and then read from this cache to avoid multiple SLOADs.</p>\n<p>NB: <em>Some functions have been truncated where neccessary to just show affected parts of the code</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L222-L274\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L222-L274</a></p>\n<h4 id=\"wardenpledgesol_pledge-delegationboost-should-be-cachedsaves--4-sloads-394-gas\" style=\"position:relative;\"><a href=\"#wardenpledgesol_pledge-delegationboost-should-be-cachedsaves--4-sloads-394-gas\" aria-label=\"wardenpledgesol_pledge delegationboost should be cachedsaves  4 sloads 394 gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WardenPledge.sol._pledge(): delegationBoost should be cached(Saves  4 SLOADs ~394 gas)</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">222</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_pledge</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">endTimestamp</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">240</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">delegationBoost</span><span class=\"mtk1\">.</span><span class=\"mtk11\">checkpoint_user</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">); </span><span class=\"mtk3\">//@audit: 1st SLOAD</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">241</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">delegationBoost</span><span class=\"mtk1\">.</span><span class=\"mtk11\">allowance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) &lt; </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">InsufficientAllowance</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">//@audit: 2nd SLOAD</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">242</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">delegationBoost</span><span class=\"mtk1\">.</span><span class=\"mtk11\">delegable_balance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">) &lt; </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">CannotDelegate</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">//@audit: 3rd SLOAD</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">245</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">delegationBoost</span><span class=\"mtk1\">.</span><span class=\"mtk11\">adjusted_balance_of</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">) + </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">targetVotes</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">TargetVotesOverflow</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">//@audit: 4th SLOAD</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">248</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">delegationBoost</span><span class=\"mtk1\">.</span><span class=\"mtk11\">boost</span><span class=\"mtk1\">( </span><span class=\"mtk3\">//@audit: 5th SLOAD</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">endTimestamp</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index beb990d..5b3d1bd 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -237,15 +237,16 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         uint256 boostDuration = endTimestamp - block.timestamp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // Check that the user has enough boost delegation available &amp; set the correct allowance to this contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        delegationBoost.checkpoint_user(user);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if(delegationBoost.allowance(user, address(this)) &lt; amount) revert Errors.InsufficientAllowance();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if(delegationBoost.delegable_balance(user) &lt; amount) revert Errors.CannotDelegate();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+         IBoostV2 _delegationBoost = delegationBoost;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        _delegationBoost.checkpoint_user(user);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if(_delegationBoost.allowance(user, address(this)) &lt; amount) revert Errors.InsufficientAllowance();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if(_delegationBoost.delegable_balance(user) &lt; amount) revert Errors.CannotDelegate();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // Check that this will not go over the Pledge target of votes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if(delegationBoost.adjusted_balance_of(pledgeParams.receiver) + amount &gt; pledgeParams.targetVotes) revert Errors.TargetVotesOverflow();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if(_delegationBoost.adjusted_balance_of(pledgeParams.receiver) + amount &gt; pledgeParams.targetVotes) revert Errors.TargetVotesOverflow();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // Creates the DelegationBoost</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        delegationBoost.boost(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        _delegationBoost.boost(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             pledgeParams.receiver,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             amount,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             endTimestamp,</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L222-L274\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L222-L274</a></p>\n<h4 id=\"wardenpledgesol_pledge-pledgeavailablerewardamountspledgeid-should-be-cachedsaves-1-sload-97-gas\" style=\"position:relative;\"><a href=\"#wardenpledgesol_pledge-pledgeavailablerewardamountspledgeid-should-be-cachedsaves-1-sload-97-gas\" aria-label=\"wardenpledgesol_pledge pledgeavailablerewardamountspledgeid should be cachedsaves 1 sload 97 gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WardenPledge.sol._pledge(): pledgeAvailableRewardAmounts[pledgeId] should be cached(saves 1 SLOAD ~97 gas)</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_pledge</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">endTimestamp</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">267</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rewardAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">pledgeAvailableRewardAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">]) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">RewardsBalanceTooLow</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">//@audit: 1st access</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">268</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">pledgeAvailableRewardAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">] -= </span><span class=\"mtk12\">rewardAmount</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//@audit: 2nd access</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index beb990d..2bb2cd2 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -263,9 +263,10 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         uint256 totalDelegatedAmount = ((bias * boostDuration) + bias) / 2;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // Then we can calculate the total amount of rewards for this Boost</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         uint256 rewardAmount = (totalDelegatedAmount * pledgeParams.rewardPerVote) / UNIT;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        uint _pledgeAvailableRewardAmounts = pledgeAvailableRewardAmounts[pledgeId];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if(rewardAmount &gt; pledgeAvailableRewardAmounts[pledgeId]) revert Errors.RewardsBalanceTooLow();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        pledgeAvailableRewardAmounts[pledgeId] -= rewardAmount;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if(rewardAmount &gt; _pledgeAvailableRewardAmounts) revert Errors.RewardsBalanceTooLow();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        pledgeAvailableRewardAmounts[pledgeId] = _pledgeAvailableRewardAmounts - rewardAmount;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // Send the rewards to the user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         IERC20(pledgeParams.rewardToken).safeTransfer(user, rewardAmount);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L299-L358\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L299-L358</a></p>\n<h4 id=\"wardenpledgesolcreatepledge-minamountrewardtokenrewardtoken-should-be-cachedsaves-1-sload-97-gas---happy-path\" style=\"position:relative;\"><a href=\"#wardenpledgesolcreatepledge-minamountrewardtokenrewardtoken-should-be-cachedsaves-1-sload-97-gas---happy-path\" aria-label=\"wardenpledgesolcreatepledge minamountrewardtokenrewardtoken should be cachedsaves 1 sload 97 gas   happy path permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WardenPledge.sol.createPledge(): minAmountRewardToken[rewardToken] should be cached(saves 1 SLOAD ~97 gas) - happy path</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">299</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">createPledge</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">312:        </span><span class=\"mtk10\">if</span><span class=\"mtk1\">(</span><span class=\"mtk10\">minAmountRewardToken</span><span class=\"mtk1\">[</span><span class=\"mtk10\">rewardToken</span><span class=\"mtk1\">] == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk10\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk10\">TokenNotWhitelisted</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">//@audit: 1st access</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">313</span><span class=\"mtk1\">:        </span><span class=\"mtk10\">if</span><span class=\"mtk1\">(</span><span class=\"mtk10\">rewardPerVote</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk10\">minAmountRewardToken</span><span class=\"mtk1\">[</span><span class=\"mtk10\">rewardToken</span><span class=\"mtk1\">]) </span><span class=\"mtk10\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk10\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk10\">RewardPerVoteTooLow</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">//@audit: 2nd access</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index beb990d..247e5f8 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -309,8 +309,9 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(receiver == address(0) || rewardToken == address(0)) revert Errors.ZeroAddress();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(targetVotes &lt; minTargetVotes) revert Errors.TargetVoteUnderMin();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if(minAmountRewardToken[rewardToken] == 0) revert Errors.TokenNotWhitelisted();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if(rewardPerVote &lt; minAmountRewardToken[rewardToken]) revert Errors.RewardPerVoteTooLow();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        uint256 _minAmountRewardToken = minAmountRewardToken[rewardToken]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if(_minAmountRewardToken == 0) revert Errors.TokenNotWhitelisted();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if(rewardPerVote &lt; _minAmountRewardToken) revert Errors.RewardPerVoteTooLow();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(endTimestamp == 0) revert Errors.NullEndTimestamp();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(endTimestamp != _getRoundedTimestamp(endTimestamp)) revert Errors.InvalidEndTimestamp();</span></span></span></code></pre>\n<h2 id=\"g-04-require-or-revert-statements-that-check-input-arguments-should-be-at-the-top-of-the-function\" style=\"position:relative;\"><a href=\"#g-04-require-or-revert-statements-that-check-input-arguments-should-be-at-the-top-of-the-function\" aria-label=\"g 04 require or revert statements that check input arguments should be at the top of the function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-04] <code>require()</code> or <code>revert()</code> statements that check input arguments should be at the top of the function</h2>\n<p>Checks that involve constants should come before checks that involve state variables, function calls, and calculations. By doing these checks first, the function is able to revert before wasting a Gcoldsload (2100 gas) in a function that may ultimately revert in the unhappy case.</p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L222-L274\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L222-L274</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">222</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_pledge</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">endTimestamp</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">223</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk11\">pledgesIndex</span><span class=\"mtk1\">()) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">InvalidPledgeID</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">224</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">NullValue</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index beb990d..dfd3ff4 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -220,8 +220,9 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @param endTimestamp End of delegation</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     function _pledge(uint256 pledgeId, address user, uint256 amount, uint256 endTimestamp) internal {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if(pledgeId &gt;= pledgesIndex()) revert Errors.InvalidPledgeID();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(amount == 0) revert Errors.NullValue();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if(pledgeId &gt;= pledgesIndex()) revert Errors.InvalidPledgeID();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // Load Pledge parameters &amp; check the Pledge is still active</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         Pledge memory pledgeParams = pledges[pledgeId];</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L456-L480\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L456-L480</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"50\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">456</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">retrievePledgeRewards</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">whenNotPaused</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">457</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk11\">pledgesIndex</span><span class=\"mtk1\">()) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">InvalidPledgeID</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">458</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">creator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pledgeOwner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">459</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">creator</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">NotPledgeCreator</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">460</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ZeroAddress</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"51\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index beb990d..9c82ad9 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -454,10 +454,11 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @param receiver Address to receive the remaining rewards</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     function retrievePledgeRewards(uint256 pledgeId, address receiver) external whenNotPaused nonReentrant {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if(receiver == address(0)) revert Errors.ZeroAddress();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(pledgeId &gt;= pledgesIndex()) revert Errors.InvalidPledgeID();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         address creator = pledgeOwner[pledgeId];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(msg.sender != creator) revert Errors.NotPledgeCreator();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if(receiver == address(0)) revert Errors.ZeroAddress();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         Pledge storage pledgeParams = pledges[pledgeId];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(pledgeParams.endTimestamp &gt; block.timestamp) revert Errors.PledgeNotExpired();</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L488-L515\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L488-L515</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"52\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">488</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">closePledge</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">whenNotPaused</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">489</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk11\">pledgesIndex</span><span class=\"mtk1\">()) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">InvalidPledgeID</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">490</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">creator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pledgeOwner</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">491</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">creator</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">NotPledgeCreator</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">492</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ZeroAddress</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"53\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index beb990d..c06f2ee 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -486,10 +486,11 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @param receiver Address to receive the remaining rewards</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     function closePledge(uint256 pledgeId, address receiver) external whenNotPaused nonReentrant {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if(receiver == address(0)) revert Errors.ZeroAddress();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(pledgeId &gt;= pledgesIndex()) revert Errors.InvalidPledgeID();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         address creator = pledgeOwner[pledgeId];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(msg.sender != creator) revert Errors.NotPledgeCreator();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if(receiver == address(0)) revert Errors.ZeroAddress();</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L525-L533\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L525-L533</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"54\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">525</span><span class=\"mtk1\">:    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_addRewardToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minRewardPerSecond</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">526</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">minAmountRewardToken</span><span class=\"mtk1\">[</span><span class=\"mtk12\">token</span><span class=\"mtk1\">] != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">AlreadyAllowedToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">527</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ZeroAddress</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">528</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">minRewardPerSecond</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk11\">NullValue</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"55\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index beb990d..71d0087 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/WardenPledge.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -523,10 +523,10 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @param minRewardPerSecond Minmum amount of reward per vote per second for the token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     function _addRewardToken(address token, uint256 minRewardPerSecond) internal {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if(minAmountRewardToken[token] != 0) revert Errors.AlreadyAllowedToken();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(token == address(0)) revert Errors.ZeroAddress();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if(minRewardPerSecond == 0) revert Errors.NullValue();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if(minAmountRewardToken[token] != 0) revert Errors.AlreadyAllowedToken();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         minAmountRewardToken[token] = minRewardPerSecond;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         emit NewRewardToken(token, minRewardPerSecond);</span></span></span></code></pre>\n<h2 id=\"g-05-using-storage-instead-of-memory-for-structsarrays-saves-gas\" style=\"position:relative;\"><a href=\"#g-05-using-storage-instead-of-memory-for-structsarrays-saves-gas\" aria-label=\"g 05 using storage instead of memory for structsarrays saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-05] Using storage instead of memory for structs/arrays saves gas</h2>\n<p>When fetching data from a storage location, assigning the data to a memory variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (2100 gas) for each field of the struct/array. If the fields are read from the new memory variable, they incur an additional MLOAD rather than a cheap stack read. Instead of declearing the variable with the memory keyword, declaring the variable with the storage keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a memory variable, is if the full struct/array is being returned by the function, is being passed to a function that requires memory, or if the array/struct is being read from another memory array/struct</p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L227\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L227</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"56\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">227</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">Pledge</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pledgeParams</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pledges</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<h2 id=\"g-06-using-unchecked-blocks-to-save-gas\" style=\"position:relative;\"><a href=\"#g-06-using-unchecked-blocks-to-save-gas\" aria-label=\"g 06 using unchecked blocks to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-06] Using unchecked blocks to save gas</h2>\n<p>Solidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn’t possible (as an example, when a comparison is made before the arithmetic operation), some gas can be saved by using an unchecked block\n<a href=\"https://github.com/ethereum/solidity/issues/10695\">see resource</a></p>\n<p><a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L268\">https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L268</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"57\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: /</span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">WardenPledge</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">268</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">pledgeAvailableRewardAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pledgeId</span><span class=\"mtk1\">] -= </span><span class=\"mtk12\">rewardAmount</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>The operation <code>pledgeAvailableRewardAmounts[pledgeId] -= rewardAmount;</code> cannot underflow due to the check on <a href=\"https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L267\">Line 267</a> that ensures that <code>pledgeAvailableRewardAmounts[pledgeId]</code> is greater than <code>rewardAmount</code> before perfoming the arithmetic operation.</p>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#medium-risk-findings-8\">Medium Risk Findings (8)</a></p>\n<ul>\n<li><a href=\"#m-01-due-to-loss-of-precision-targetvotes-may-not-reach\">[M-01] Due to loss of precision, targetVotes may not reach</a></li>\n<li><a href=\"#m-02-owner-can-transfer-all-erc20-reward-token-out-using-function-recovererc20\">[M-02] Owner can transfer all ERC20 reward token out using function recoverERC20</a></li>\n<li><a href=\"#m-03-pledge-may-be-out-of-reward-due-to-the-decay-in-vecrv-balance-targetvotes-is-never-reached\">[M-03] Pledge may be out of reward due to the decay in veCRV balance. targetVotes is never reached.</a></li>\n<li><a href=\"#m-04-pledges-that-contain-delisted-tokens-can-be-extended-to-continue-using-delisted-reward-tokens\">[M-04] Pledges that contain delisted tokens can be extended to continue using delisted reward tokens</a></li>\n<li><a href=\"#m-05-wardenpledge-accidentally-inherits-ownable-instead-of-owner-which-removes-an-important-safeguard-without-sponsor-knowledge\">[M-05] WardenPledge accidentally inherits Ownable instead of Owner which removes an important safeguard without sponsor knowledge</a></li>\n<li><a href=\"#m-06-reward-can-be-over--or-undercounted-in-extendpledge-and-increasepledgerewardpervote\">[M-06] Reward can be over- or undercounted in <code>extendPledge</code> and <code>increasePledgeRewardPerVote</code></a></li>\n<li><a href=\"#m-07--fees-charged-from-entire-theoretical-pledge-amount-instead-of-actual-pledge-amount\">[M-07]  Fees charged from entire theoretical pledge amount instead of actual pledge amount</a></li>\n<li><a href=\"#m-08-pausing-wardenpledge-contract-which-takes-effect-immediately-by-its-owner-can-unexpectedly-block-pledge-creator-from-calling-closepledge-or-retrievepledgerewards-function\">[M-08] Pausing <code>WardenPledge</code> contract, which takes effect immediately, by its owner can unexpectedly block pledge creator from calling <code>closePledge</code> or <code>retrievePledgeRewards</code> function</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#1-missing-fee-parameter-validation\">1 Missing fee parameter validation</a></li>\n<li><a href=\"#2-safeapprove-of-openzeppelin-is-deprecated\">2 safeApprove of openZeppelin is deprecated</a></li>\n<li><a href=\"#3-not-verified-input\">3 Not verified input</a></li>\n<li><a href=\"#4-solidity-compiler-versions-mismatch\">4 Solidity compiler versions mismatch</a></li>\n<li><a href=\"#5-not-verified-owner\">5 Not verified owner</a></li>\n<li><a href=\"#6-two-steps-verification-before-transferring-ownership\">6 Two Steps Verification before Transferring Ownership</a></li>\n<li><a href=\"#7-missing-non-reentrancy-modifier\">7 Missing non reentrancy modifier</a></li>\n<li><a href=\"#8-in-the-following-public-update-functions-no-value-is-returned\">8 In the following public update functions no value is returned</a></li>\n<li><a href=\"#9-check-transfer-receiver-is-not-0-to-avoid-burned-money\">9 Check transfer receiver is not 0 to avoid burned money</a></li>\n<li><a href=\"#10-missing-commenting\">10 Missing commenting</a></li>\n<li><a href=\"#11-unsafe-cast\">11 Unsafe Cast</a></li>\n<li><a href=\"#12-div-by-0\">12 Div by 0</a></li>\n<li><a href=\"#13-tokens-with-fee-on-transfer-are-not-supported\">13 Tokens with fee on transfer are not supported</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#findings\">Findings</a></li>\n<li><a href=\"#g-01-using-immutable-on-variables-that-are-only-set-in-the-constructor-and-never-after\">G-01 Using immutable on variables that are only set in the constructor and never after</a></li>\n<li><a href=\"#g-02-use-constants-for-variables-whose-value-is-known-beforehand-and-is-never-changed\">G-02 Use constants for variables whose value is known beforehand and is never changed</a></li>\n<li><a href=\"#g-03-cache-storage-values-in-memory-to-minimize-sloads\">G-03 Cache storage values in memory to minimize SLOADs</a></li>\n<li><a href=\"#g-04-require-or-revert-statements-that-check-input-arguments-should-be-at-the-top-of-the-function\">G-04 <code>require()</code> or <code>revert()</code> statements that check input arguments should be at the top of the function</a></li>\n<li><a href=\"#g-05-using-storage-instead-of-memory-for-structsarrays-saves-gas\">G-05 Using storage instead of memory for structs/arrays saves gas</a></li>\n<li><a href=\"#g-06-using-unchecked-blocks-to-save-gas\">G-06 Using unchecked blocks to save gas</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the audit contest outlined in this document, C4 conducted an analysis of the Paladin - Warden Pledges smart contract system written in Solidity. The audit contest took place between October 27—October 30 2022.\n\n## Wardens\n\n97 Wardens contributed reports to the Paladin - Warden Pledges contest:\n\n  1. 0x007\n  2. 0x1f8b\n  3. 0x52\n  4. [0xDecorativePineapple](https://decorativepineapple.github.io/)\n  5. 0xDjango\n  6. [0xNazgul](https://twitter.com/0xNazgul)\n  7. [0xRoxas](https://twitter.com/0xRoxas)\n  8. [0xSmartContract](https://twitter.com/0xSmartContract)\n  9. 0xbepresent\n  10. 0xhunter\n  11. [8olidity](https://twitter.com/8olidity)\n  12. Amithuddar\n  13. Awesome\n  14. [Aymen0909](https://github.com/Aymen1001)\n  15. B2\n  16. Bnke0x0\n  17. [Chom](https://chom.dev)\n  18. Diana\n  19. [Dravee](https://twitter.com/BowTiedDravee)\n  20. JTJabba\n  21. [Jeiwan](https://jeiwan.net)\n  22. Josiah\n  23. KingNFT\n  24. KoKo\n  25. Lambda\n  26. Mathieu\n  27. [Nyx](https://twitter.com/Nyksx__)\n  28. [Picodes](https://twitter.com/thePicodes)\n  29. RaoulSchaffranek\n  30. RaymondFam\n  31. RedOneN\n  32. ReyAdmirado\n  33. RockingMiles (robee and pants)\n  34. Rolezn\n  35. [Ruhum](https://twitter.com/0xruhum)\n  36. SadBase\n  37. [Sm4rty](https://twitter.com/Sm4rty_)\n  38. SooYa\n  39. Tricko\n  40. [Trust](https://twitter.com/trust__90)\n  41. Waze\n  42. \\_\\_141345\\_\\_\n  43. [a12jmx](https://twitter.com/a12jmx)\n  44. [adriro](https://github.com/romeroadrian)\n  45. ajtra\n  46. ballx\n  47. [bin2chen](https://twitter.com/bin2chen)\n  48. brgltd\n  49. [c3phas](https://twitter.com/c3ph_)\n  50. [carlitox477](https://twitter.com/CAA1994)\n  51. cccz\n  52. ch0bu\n  53. chaduke\n  54. chrisdior4\n  55. codexploder\n  56. corerouter\n  57. cryptonue\n  58. [csanuragjain](https://twitter.com/csanuragjain)\n  59. ctf\\_sec\n  60. [cylzxje](https://twitter.com/cylzxje)\n  61. delfin454000\n  62. dic0de\n  63. djxploit\n  64. [durianSausage](https://github.com/lyciumlee)\n  65. emrekocak\n  66. erictee\n  67. [gogo](https://www.linkedin.com/in/georgi-nikolaev-georgiev-978253219)\n  68. halden\n  69. [hansfriese](https://twitter.com/hansfriese)\n  70. horsefacts\n  71. hxzy\n  72. imare\n  73. [indijanc](https://twitter.com/krenkmet)\n  74. jayphbee\n  75. jwood\n  76. karanctf\n  77. ktg\n  78. ladboy233\n  79. leosathya\n  80. lukris02\n  81. minhtrng\n  82. neko\\_nyaa\n  83. [oyc\\_109](https://twitter.com/andyfeili)\n  84. pashov\n  85. peiw\n  86. peritoflores\n  87. rbserver\n  88. robee\n  89. rvierdiiev\n  90. sakman\n  91. shark\n  92. skyle\n  93. subtle77\n  94. tnevler\n  95. wagmi\n  96. yixxas\n\nThis contest was judged by [kirk-baird](https://github.com/kirk-baird).\n\nFinal report assembled by [itsmetechjay](https://twitter.com/itsmetechjay).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 8 unique vulnerabilities. Of these vulnerabilities, 0 received a risk rating in the category of HIGH severity and 8 received a risk rating in the category of MEDIUM severity.\n\nAdditionally, C4 analysis included 68 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 49 reports recommending gas optimizations.\n\nAll of the issues presented here are linked back to their original finding.\n\n# Scope\n\nThe code under review can be found within the [C4 Paladin - Warden Pledges contest repository](https://github.com/code-423n4/2022-10-paladin), and is composed of 1 smart contract written in the Solidity programming language and includes 317 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code4rena.com).\n\n# Medium Risk Findings (8)\n## [[M-01] Due to loss of precision, targetVotes may not reach](https://github.com/code-423n4/2022-10-paladin-findings/issues/59)\n*Submitted by [cccz](https://github.com/code-423n4/2022-10-paladin-findings/issues/59)*\n\nIn the `\\_pledge` function, require delegationBoost.adjusted_balance_of(pledgeParams.receiver) + amount <= pledgeParams.targetVotes.\n\nIn reality, when the user pledges the amount of votes, the actual votes received by the receiver are the bias in the following calculation. And the bias will be less than amount due to the loss of precision.\n\n            uint256 slope = amount / boostDuration;\n            uint256 bias = slope * boostDuration;\n\nThis means that the balance of receiver may not reach targetVotes\n\n        point = self._checkpoint_read(_user, False)\n        amount += (point.bias - point.slope * (block.timestamp - point.ts))\n        return amount\n\n### Proof of Concept\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L245-L246>\n\n<https://github.com/curvefi/curve-veBoost/blob/master/contracts/BoostV2.vy#L192-L209>\n\n<https://github.com/curvefi/curve-veBoost/blob/master/contracts/BoostV2.vy#L175>\n\n### Recommended Mitigation Steps\n\nUse bias instead of amount in the check below:\n\n            uint256 slope = amount / boostDuration;\n            uint256 bias = slope * boostDuration;\n            if(delegationBoost.adjusted_balance_of(pledgeParams.receiver) + bias > pledgeParams.targetVotes) revert Errors.TargetVotesOverflow();\n            delegationBoost.boost(\n                pledgeParams.receiver,\n                amount,\n                endTimestamp,\n                user\n            );\n\n**[Kogaroshi (Paladin) acknowledged and commented](https://github.com/code-423n4/2022-10-paladin-findings/issues/59#issuecomment-1296374082):**\n > The current check is made that way to prevent any unnecessary call to the BoostV2 contract (and save gas by not creating the Boost) in the case of a `targetVotes` overflow.\n\n***\n\n## [[M-02] Owner can transfer all ERC20 reward token out using function recoverERC20](https://github.com/code-423n4/2022-10-paladin-findings/issues/68)\n*Submitted by [ladboy233](https://github.com/code-423n4/2022-10-paladin-findings/issues/68), also found by [yixxas](https://github.com/code-423n4/2022-10-paladin-findings/issues/283), [JTJabba](https://github.com/code-423n4/2022-10-paladin-findings/issues/274), [rbserver](https://github.com/code-423n4/2022-10-paladin-findings/issues/270), [Aymen0909](https://github.com/code-423n4/2022-10-paladin-findings/issues/259), [horsefacts](https://github.com/code-423n4/2022-10-paladin-findings/issues/249), [minhtrng](https://github.com/code-423n4/2022-10-paladin-findings/issues/247), [0xhunter](https://github.com/code-423n4/2022-10-paladin-findings/issues/242), [Trust](https://github.com/code-423n4/2022-10-paladin-findings/issues/236), [peritoflores](https://github.com/code-423n4/2022-10-paladin-findings/issues/219), [0xDecorativePineapple](https://github.com/code-423n4/2022-10-paladin-findings/issues/207), [Dravee](https://github.com/code-423n4/2022-10-paladin-findings/issues/206), [hansfriese](https://github.com/code-423n4/2022-10-paladin-findings/issues/196), [imare](https://github.com/code-423n4/2022-10-paladin-findings/issues/179), [Jeiwan](https://github.com/code-423n4/2022-10-paladin-findings/issues/162), [wagmi](https://github.com/code-423n4/2022-10-paladin-findings/issues/154), [0x52](https://github.com/code-423n4/2022-10-paladin-findings/issues/148), [Picodes](https://github.com/code-423n4/2022-10-paladin-findings/issues/130), [cryptonue](https://github.com/code-423n4/2022-10-paladin-findings/issues/116), [pashov](https://github.com/code-423n4/2022-10-paladin-findings/issues/106), [Bnke0x0](https://github.com/code-423n4/2022-10-paladin-findings/issues/84), [Lambda](https://github.com/code-423n4/2022-10-paladin-findings/issues/81), [Nyx](https://github.com/code-423n4/2022-10-paladin-findings/issues/60), [cccz](https://github.com/code-423n4/2022-10-paladin-findings/issues/54), [dic0de](https://github.com/code-423n4/2022-10-paladin-findings/issues/44), [csanuragjain](https://github.com/code-423n4/2022-10-paladin-findings/issues/29), and [rvierdiiev](https://github.com/code-423n4/2022-10-paladin-findings/issues/17)*\n\nThe function recoverERC20 is very privileged. It means to recover any token that is accidently sent to the contract.\n\n```solidity\nfunction recoverERC20(address token) external onlyOwner returns(bool) {\n\tif(minAmountRewardToken[token] != 0) revert Errors.CannotRecoverToken();\n\n\tuint256 amount = IERC20(token).balanceOf(address(this));\n\tif(amount == 0) revert Errors.NullValue();\n\tIERC20(token).safeTransfer(owner(), amount);\n\n\treturn true;\n}\n```\n\nHowever, admin / owner can use this function to transfer all the reserved reward tokens, which result in fund loss of the pledge creator and the loss of reward for users that want to delegate the veToken.\n\nAlso, the recovered token is sent to owner directly instead of sending to a recipient address.\n\nThe safeguard\n\n```solidity\nif(minAmountRewardToken[token] != 0)\n```\n\ncannot stop owner transferring funds because if the owner is compromised or misbehaves, he can adjust the whitelist easily.\n\n### Proof of Concept\n\nThe admin can set minAmountRewardToken\\[token] to 0 first by calling updateRewardToken:\n\n```solidity\nfunction updateRewardToken(address token, uint256 minRewardPerSecond) external onlyOwner {\n```\n\nBy doing this the admin removes the token from the whitelist, then the token can call recoverERC20 to transfer all the token into the owner wallet.\n\n```solidity\nfunction recoverERC20(address token) external onlyOwner returns(bool) {\n```\n\n### Recommended Mitigation Steps\n\nWe recommend that the project uses a multisig wallet to safeguard the owner's wallet.\n\nWe can also keep track of the reserved amount for rewarding token and only transfer the remaining amount of token out.\n\n```solidity\n pledgeAvailableRewardAmounts[pledgeId] += totalRewardAmount;\n reservedReward[token] += totalRewardAmount;\n```\n\nThen we can change the implementation to:\n\n```solidity\nfunction recoverERC20(address token, address recipient) external onlyOwner returns(bool) {\n\n\tuint256 amount = IERC20(token).balanceOf(address(this));\n\tif(amount == 0) revert Errors.NullValue();\n\n\tif(minAmountRewardToken[token] == 0) {\n\t // if it is not whitelisted, we assume it is mistakenly sent, \n\t   // we transfer the token to recipient\n\t IERC20(token).safeTransfer(recipient, amount);\n\t} else {\n\t// revert if the owner over transfer\n\tif(amount >  reservedReward[token]) revert rewardReserved();\n\t  IERC20(token).safeTransfer(recipient, amount - reservedReward[token]);\n\t}\n\n\treturn true;\n\n}\n```\n\n**[Kogaroshi (Paladin) confirmed](https://github.com/code-423n4/2022-10-paladin-findings/issues/17)**\n\n**[Kogaroshi (Paladin) commented](https://github.com/code-423n4/2022-10-paladin-findings/issues/68#issuecomment-1296375338):**\n > Interesting proposed Mitigation to be noted. \n***\n\n## [[M-03] Pledge may be out of reward due to the decay in veCRV balance. targetVotes is never reached.](https://github.com/code-423n4/2022-10-paladin-findings/issues/91)\n*Submitted by [Chom](https://github.com/code-423n4/2022-10-paladin-findings/issues/91), also found by [Jeiwan](https://github.com/code-423n4/2022-10-paladin-findings/issues/167), [Picodes](https://github.com/code-423n4/2022-10-paladin-findings/issues/131), and [KingNFT](https://github.com/code-423n4/2022-10-paladin-findings/issues/120)*\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L325-L335>\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L259-L268>\n\n### Impact\n\nPledge may be out of reward due to the decay in veCRV balance. The receiver may lose his reward given to boosters but get nothing in return since her targetVotes is never reached.\n\n### Proof of Concept\n\nAccording to Curve documentation at <https://curve.readthedocs.io/dao-vecrv.html>\n\n    A user’s veCRV balance decays linearly as the remaining time until the CRV unlock decreases. For example, a balance of 4000 CRV locked for one year provides the same amount of veCRV as 2000 CRV locked for two years, or 1000 CRV locked for four years.\n\nOn creation, targetVotes = 100, balance = 20 -> votesDifference = 80 -> reward is allocated for 80 votes\n\n```solidity\n        // Get the missing votes for the given receiver to reach the target votes\n        // We ignore any delegated boost here because they might expire during the Pledge duration\n        // (we can have a future version of this contract using adjusted_balance)\n        vars.votesDifference = targetVotes - votingEscrow.balanceOf(receiver);\n\n        vars.totalRewardAmount = (rewardPerVote * vars.votesDifference * vars.duration) / UNIT;\n        vars.feeAmount = (vars.totalRewardAmount * protocalFeeRatio) / MAX_PCT ;\n        if(vars.totalRewardAmount > maxTotalRewardAmount) revert Errors.IncorrectMaxTotalRewardAmount();\n        if(vars.feeAmount > maxFeeAmount) revert Errors.IncorrectMaxFeeAmount();\n\n        // Pull all the rewards in this contract\n        IERC20(rewardToken).safeTransferFrom(creator, address(this), vars.totalRewardAmount);\n        // And transfer the fees from the Pledge creator to the Chest contract\n        IERC20(rewardToken).safeTransferFrom(creator, chestAddress, vars.feeAmount);\n```\n\nThen 1 week passed, receiver's balance decay to 10\n\nOn creation, targetVotes = 100, balance = 10 but votesDifference stays 80, and reward has only allocated for 80 votes.\n\n```solidity\n        // Rewards are set in the Pledge as reward/veToken/sec\n        // To find the total amount of veToken delegated through the whole Boost duration\n        // based on the Boost bias & the Boost duration, to take in account that the delegated amount decreases\n        // each second of the Boost duration\n        uint256 totalDelegatedAmount = ((bias * boostDuration) + bias) / 2;\n        // Then we can calculate the total amount of rewards for this Boost\n        uint256 rewardAmount = (totalDelegatedAmount * pledgeParams.rewardPerVote) / UNIT;\n\n        if(rewardAmount > pledgeAvailableRewardAmounts[pledgeId]) revert Errors.RewardsBalanceTooLow();\n        pledgeAvailableRewardAmounts[pledgeId] -= rewardAmount;\n```\n\nA booster boosts 80 votes and takes all rewards in the pool. However, only 80 (From booster) + 10 (From receiver) = 90 votes is active. Not 100 votes that receiver promise in the targetVotes.\n\nThen, if another booster tries to boost 10 votes, it will be reverted with RewardsBalanceTooLow since the first booster has taken all reward that is allocated for only 80 votes.\n\n### Recommended Mitigation Steps\n\nYou should provide a way for the creator to provide additional rewards after the pledge creation. Or provide some reward refreshment function that recalculates votesDifference and transfers the required additional reward.\n\n**[Kogaroshi (Paladin) confirmed, resolved, and commented](https://github.com/code-423n4/2022-10-paladin-findings/issues/91#issuecomment-1301494542):**\n > Changed the logic in [PR 2](https://github.com/PaladinFinance/Warden-v2/pull/2), [commit](https://github.com/PaladinFinance/Warden-v2/pull/2/commits/edc9b0280bbb4144d3983642eeab9db17499e9f6)\n> Now the whole amount of votes needed for each second of the Pledge duration is calculated, taking in account the receiver potential veCRV balance, and the veCRV decay.\n> \n> This should allow to add only the exact amount of reward needed to the Pledge reward pool, and have always the correct amount of rewards to achieve the vote target of the Pledge at all times.\n\n**[Kogaroshi (Paladin) commented](https://github.com/code-423n4/2022-10-paladin-findings/issues/91#issuecomment-1301495120):**\n > If possible, a feedback on the new calculation and logic would be appreciated.\n\n***\n\n## [[M-04] Pledges that contain delisted tokens can be extended to continue using delisted reward tokens](https://github.com/code-423n4/2022-10-paladin-findings/issues/145)\n*Submitted by [0x52](https://github.com/code-423n4/2022-10-paladin-findings/issues/145), also found by [bin2chen](https://github.com/code-423n4/2022-10-paladin-findings/issues/159)*\n\nDelisted reward tokens can continue to be used by extending current pledges that already use it.\n\n### Proof of Concept\n\n    if(pledgeId >= pledgesIndex()) revert Errors.InvalidPledgeID();\n    address creator = pledgeOwner[pledgeId];\n    if(msg.sender != creator) revert Errors.NotPledgeCreator();\n\n\n    Pledge storage pledgeParams = pledges[pledgeId];\n    if(pledgeParams.closed) revert Errors.PledgeClosed();\n    if(pledgeParams.endTimestamp <= block.timestamp) revert Errors.ExpiredPledge();\n    if(newEndTimestamp == 0) revert Errors.NullEndTimestamp();\n    uint256 oldEndTimestamp = pledgeParams.endTimestamp;\n    if(newEndTimestamp != _getRoundedTimestamp(newEndTimestamp) || newEndTimestamp < oldEndTimestamp) revert Errors.InvalidEndTimestamp();\n\n\n    uint256 addedDuration = newEndTimestamp - oldEndTimestamp;\n    if(addedDuration < minDelegationTime) revert Errors.DurationTooShort();\n    uint256 totalRewardAmount = (pledgeParams.rewardPerVote * pledgeParams.votesDifference * addedDuration) / UNIT;\n    uint256 feeAmount = (totalRewardAmount * protocalFeeRatio) / MAX_PCT ;\n    if(totalRewardAmount > maxTotalRewardAmount) revert Errors.IncorrectMaxTotalRewardAmount();\n    if(feeAmount > maxFeeAmount) revert Errors.IncorrectMaxFeeAmount();\n\nDuring the input validation checks, it's never checked that reward token of the pledge being extended is still a valid reward token. This would allow creators using delisted tokens to continue using them as long as they wanted, by simply extending their currently active pledges.\n\n### Recommended Mitigation Steps\n\nAdd the following check during the input validation block:\n\n    +   if(minAmountRewardToken[rewardToken] == 0) revert Errors.TokenNotWhitelisted();\n\n**[Kogaroshi (Paladin) confirmed, resolved, and commented](https://github.com/code-423n4/2022-10-paladin-findings/issues/145#issuecomment-1297680425):**\n > Fixed in [PR 2](https://github.com/PaladinFinance/Warden-v2/pull/2), [commit](https://github.com/PaladinFinance/Warden-v2/pull/2/commits/37ecb4f318bf60edcb75b49c41e56d44c72bd2c4).\n\n**[kirk-baird (judge) commented](https://github.com/code-423n4/2022-10-paladin-findings/issues/145#issuecomment-1311337350):**\n > I consider this a valid Medium risk as pledges can be extended indefinitely. It bypasses the whitelisting which may be damaging if a token is found to be malicious and removed.\n\n\n\n***\n\n## [[M-05] WardenPledge accidentally inherits Ownable instead of Owner which removes an important safeguard without sponsor knowledge](https://github.com/code-423n4/2022-10-paladin-findings/issues/161)\n*Submitted by [0x52](https://github.com/code-423n4/2022-10-paladin-findings/issues/161), also found by [pashov](https://github.com/code-423n4/2022-10-paladin-findings/issues/284) and [indijanc](https://github.com/code-423n4/2022-10-paladin-findings/issues/180)*\n\nOwner may accidentally transfer ownership to inoperable address due to perceived safeguard that doesn't exist.\n\n### Proof of Concept\n\n    contract WardenPledge is Ownable, Pausable, ReentrancyGuard {\n\nWardenPledge inherits from Ownable rather than Owner, which is the intended contract. Owner overwrites the critical Ownable#transferOwnership function to make the ownership transfer process a two step process. This adds important safeguards because in the event that the target is unable to accept for any reason (input typo, incompatible multisig/contract, etc.) the ownership transfer process will fail because the pending owner will not be able to accept the transfer. To make matters worse, since it only overwrites the transferOwnership function the WardenPledge contract will otherwise function as intended just without this safeguard. It is likely that the owner won't even realize until it's too late and the safeguard has failed. A perceived safeguard where there isn't one is more damaging than not having any safeguard at all.\n\n### Recommended Mitigation Steps\n\n    -   contract WardenPledge is Ownable, Pausable, ReentrancyGuard {\n    +   contract WardenPledge is Owner, Pausable, ReentrancyGuard {\n\n**[Kogaroshi (Paladin) confirmed](https://github.com/code-423n4/2022-10-paladin-findings/issues/180)**\n\n***\n\n## [[M-06] Reward can be over- or undercounted in `extendPledge` and `increasePledgeRewardPerVote`](https://github.com/code-423n4/2022-10-paladin-findings/issues/163)\n*Submitted by [Jeiwan](https://github.com/code-423n4/2022-10-paladin-findings/issues/163), also found by [Aymen0909](https://github.com/code-423n4/2022-10-paladin-findings/issues/280), [Trust](https://github.com/code-423n4/2022-10-paladin-findings/issues/234), [0xDjango](https://github.com/code-423n4/2022-10-paladin-findings/issues/186), [Chom](https://github.com/code-423n4/2022-10-paladin-findings/issues/94), [Lambda](https://github.com/code-423n4/2022-10-paladin-findings/issues/83), and [Ruhum](https://github.com/code-423n4/2022-10-paladin-findings/issues/61)*\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L387>\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L432>\n\n### Impact\n\nTotal reward amount in `extendPledge` and `increasePledgeRewardPerVote` can be calculated incorrectly due to cached `pledgeParams.votesDifference`, which can lead to two outcomes:\n\n1.  total reward amount is higher, thus a portion of it won't be claimable;\n2.  total reward amount is lower, thus the pledge target won't be reached.\n\n### Proof of Concept\n\nWhen a pledge is created, the creator chooses the target–the total amount of votes they want to reach with the pledge. Based on a target, the number of missing votes is calculated, which is then used to calculated the total reward amount ([WardenPledge.sol#L325-L327](https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L325-L327)):\n\n```solidity\nfunction createPledge(\n    address receiver,\n    address rewardToken,\n    uint256 targetVotes,\n    uint256 rewardPerVote, // reward/veToken/second\n    uint256 endTimestamp,\n    uint256 maxTotalRewardAmount,\n    uint256 maxFeeAmount\n) external whenNotPaused nonReentrant returns(uint256){\n    ...\n    // Get the missing votes for the given receiver to reach the target votes\n    // We ignore any delegated boost here because they might expire during the Pledge duration\n    // (we can have a future version of this contract using adjusted_balance)\n    vars.votesDifference = targetVotes - votingEscrow.balanceOf(receiver);\n\n    vars.totalRewardAmount = (rewardPerVote * vars.votesDifference * vars.duration) / UNIT;\n    ...\n  }\n```\n\nWhen extending a pledge or increasing a pledge reward per vote, current veToken balance of the pledge's receiver (`votingEscrow.balanceOf(receiver)`) can be different from the one it had when the pledge was created (e.g. the receiver managed to lock more CRV or some of locked tokens have expired). However `pledgeParams.votesDifference` is not recalculated ([WardenPledge.sol#L387](https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L387), [WardenPledge.sol#L432](https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L432)):\n\n```solidity\nfunction extendPledge(\n    uint256 pledgeId,\n    uint256 newEndTimestamp,\n    uint256 maxTotalRewardAmount,\n    uint256 maxFeeAmount\n) external whenNotPaused nonReentrant {\n    ...\n    Pledge storage pledgeParams = pledges[pledgeId];\n    ...\n    uint256 totalRewardAmount = (pledgeParams.rewardPerVote * pledgeParams.votesDifference * addedDuration) / UNIT;\n    ...\n}\n\nfunction increasePledgeRewardPerVote(\n    uint256 pledgeId,\n    uint256 newRewardPerVote,\n    uint256 maxTotalRewardAmount,\n    uint256 maxFeeAmount\n) external whenNotPaused nonReentrant {\n    ...\n    Pledge storage pledgeParams = pledges[pledgeId];\n    ...\n    uint256 totalRewardAmount = (rewardPerVoteDiff * pledgeParams.votesDifference * remainingDuration) / UNIT;\n    ...\n}\n```\n\nThis can lead to two consequences:\n\n1.  When receiver's veToken balance has increased (i.e. `votesDifference` got in fact smaller), pledge creator will overpay for pledge extension and pledge reward per vote increase. This extra reward cannot be received by pledgers because a receiver cannot get more votes than `pledgeParams.targetVotes` (which is not updated when modifying a pledge):\n    ```solidity\n    function _pledge(uint256 pledgeId, address user, uint256 amount, uint256 endTimestamp) internal {\n        ...\n        // Check that this will not go over the Pledge target of votes\n        if(delegationBoost.adjusted_balance_of(pledgeParams.receiver) + amount > pledgeParams.targetVotes) revert Errors.TargetVotesOverflow();\n        ...\n    }\n    ```\n2.  When receiver's veToken balance has decreased (i.e. `votesDifference` got in fact bigger), the pledge target cannot be reached because the reward amount was underpaid in `extendPledge`/`increasePledgeRewardPerVote`.\n\n### Recommended Mitigation Steps\n\nConsider updating `votesDifference` when extending a pledge or increasing a pledge reward per vote.\n\n**[Kogaroshi (Paladin) confirmed and commented](https://github.com/code-423n4/2022-10-paladin-findings/issues/163#issuecomment-1301496158):**\n > As stated in [#91](https://github.com/code-423n4/2022-10-paladin-findings/issues/91), new method for needed votes & needed reward calculations is introduced in this [commit](https://github.com/PaladinFinance/Warden-v2/pull/2/commits/edc9b0280bbb4144d3983642eeab9db17499e9f6), allowing to get the exact amount of reward token the Pledge creator should pay when extending the Pledge or increasing the `rewardPerVote`.\n\n***\n\n## [[M-07]  Fees charged from entire theoretical pledge amount instead of actual pledge amount](https://github.com/code-423n4/2022-10-paladin-findings/issues/235)\n*Submitted by [Trust](https://github.com/code-423n4/2022-10-paladin-findings/issues/235), also found by [0x52](https://github.com/code-423n4/2022-10-paladin-findings/issues/142)*\n\nPaladin receives a 5% cut from Boost purchases, as documented on the [website](https://paladin.vote/#/):\n\n\"Warden takes a 5% fee on Boost purchases, and 5% on Quest incentives. However, there are various pricing tiers for Quest creators. Contact the Paladin team for more info.\"\n\nHere's how fee calculation looks at  `createPledge` function:\n\n    vars.totalRewardAmount = (rewardPerVote * vars.votesDifference * vars.duration) / UNIT;\n    vars.feeAmount = (vars.totalRewardAmount * protocalFeeRatio) / MAX_PCT ;\n    if(vars.totalRewardAmount > maxTotalRewardAmount) revert Errors.IncorrectMaxTotalRewardAmount();\n    if(vars.feeAmount > maxFeeAmount) revert Errors.IncorrectMaxFeeAmount();\n    // Pull all the rewards in this contract\n    IERC20(rewardToken).safeTransferFrom(creator, address(this), vars.totalRewardAmount);\n    // And transfer the fees from the Pledge creator to the Chest contract\n    IERC20(rewardToken).safeTransferFrom(creator, chestAddress, vars.feeAmount);\n\nThe issue is that the fee is taken up front, assuming `totalRewardAmount` will actually be rewarded by the pledge. In practice, the rewards actually utilized can be anywhere from zero to `totalRewardAmount`. Indeed, reward will only be `totalRewardAmount` if, in the entire period from pledge creation to pledge expiry, the desired targetVotes will be fulfilled, which is extremly unlikely.\n\nAs a result, if pledge expires with no pledgers, protocol will still take 5%. This behavior is both unfair and against the docs, as it's not \"Paladin receives a 5% cut from Boost purchases\".\n\n### Impact\n\nPaladin fee collection assumes pledges will be matched immediately and fully, which is not realistic. Therefore far too many fees are collected at user's expense.\n\n### Proof of Concept\n\n1.  Bob creates a pledge, with target = 200, current balance = 100, rewardVotes = 10, remaining time = 1 week.\n2.  Protocol collects (200 - 100) &ast; 10 &ast; WEEK_SECONDS &ast; 5% fees\n3.  A week passed, rewards were not attractive enough to bring pledgers.\n4.  After expiry, Bob calls `retrievePledgeRewards()` and gets 100 &ast; 10 &ast; WEEK_SECONDS back, but 5% of the fees still went to chestAddress.\n\n### Recommended Mitigation Steps\n\nFee collection should be done after the pledge completes, in one of the close functions or in a newly created pull function for owner to collect fees. Otherwise, it is a completely unfair system.\n\n**[Kogaroshi (Paladin) acknowledged and commented](https://github.com/code-423n4/2022-10-paladin-findings/issues/235#issuecomment-1298449433):**\n > The issue is acknowledged, and we do calculate fee on the basis of all rewards, and not only the one that are gonna be used to reward users.\n >\n> The fee ratio is gonna be of 1% to start with (might change before deploy based on market estimations), and the Core team will be able to change the ratio quickly to adapt it to market and Pledge creators needs (with also considering the Paladin DAO revenues). The Paladin team will also considers Pledge creators that are in specific cases and overpay fees (because they already have delegated boost that will last through the whole Pledge and more), and will be able to refund a part of those fees to the creator if the DAO agrees.\n>\n> And if this system does not fit in the current market, and is a blocker to potential Pledge creators, we will be able to modify the way fees are handled, and deploy a new iteration of Pledge pretty fast to answer the issue.\n\n***\n\n## [[M-08] Pausing `WardenPledge` contract, which takes effect immediately, by its owner can unexpectedly block pledge creator from calling `closePledge` or `retrievePledgeRewards` function](https://github.com/code-423n4/2022-10-paladin-findings/issues/269)\n*Submitted by [rbserver](https://github.com/code-423n4/2022-10-paladin-findings/issues/269), also found by [0x1f8b](https://github.com/code-423n4/2022-10-paladin-findings/issues/282), [0xSmartContract](https://github.com/code-423n4/2022-10-paladin-findings/issues/248), [Trust](https://github.com/code-423n4/2022-10-paladin-findings/issues/233), [hansfriese](https://github.com/code-423n4/2022-10-paladin-findings/issues/194), [ctf\\_sec](https://github.com/code-423n4/2022-10-paladin-findings/issues/70), [cccz](https://github.com/code-423n4/2022-10-paladin-findings/issues/58), and [codexploder](https://github.com/code-423n4/2022-10-paladin-findings/issues/30)*\n\n<https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L636-L638>\n\n<https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L488-L515>\n\n<https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L456-L480>\n\n### Impact\n\nThe owner of the `WardenPledge` contract is able to call the `pause` function to pause this contract. When the `WardenPledge` contract is paused, calling the `closePledge` or `retrievePledgeRewards` function that uses the `whenNotPaused` modifier reverts, and the pledge creator is not able to get back any of the reward token amount, which was deposited by the creator previously. Because calling the `pause` function takes effect immediately, it can be unexpected to the creator for suddenly not being able to call the `closePledge` or `retrievePledgeRewards` function. For instance, when an emergency occurs that requires an increase of cash flow, the creator wants to close the pledge early so she or he can use the remaining deposited reward token amount. However, just before the creator's `closePledge` transaction is executed, the `pause` transaction has been sent by the owner of the `WardenPledge` contract for some reason and executed. Without knowing in advance that the `WardenPledge` contract would be paused, the creator anticipates receiving the remaining deposited reward token amount but this is not the case since calling the `closePledge` function reverts. Because the creator unexpectedly fails to receive such amount and might fail to deal with the emergency, disputes with the protocol can occur, and the user experience becomes degraded.\n\n<https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L636-L638>\n\n```solidity\n    function pause() external onlyOwner {\n        _pause();\n    }\n```\n\n<https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L488-L515>\n\n```solidity\n    function closePledge(uint256 pledgeId, address receiver) external whenNotPaused nonReentrant {\n        ...\n\n        // Get the current remaining amount of rewards not distributed for the Pledge\n        uint256 remainingAmount = pledgeAvailableRewardAmounts[pledgeId];\n\n        if(remainingAmount > 0) {\n            // Transfer the non used rewards and reset storage\n            pledgeAvailableRewardAmounts[pledgeId] = 0;\n\n            IERC20(pledgeParams.rewardToken).safeTransfer(receiver, remainingAmount);\n\n            ...\n\n        }\n\n        ...\n    }\n```\n\n<https://github.com/code-423n4/2022-10-paladin/blob/main/contracts/WardenPledge.sol#L456-L480>\n\n```solidity\n    function retrievePledgeRewards(uint256 pledgeId, address receiver) external whenNotPaused nonReentrant {\n        ...\n\n        // Get the current remaining amount of rewards not distributed for the Pledge\n        uint256 remainingAmount = pledgeAvailableRewardAmounts[pledgeId];\n\n        ...\n\n        if(remainingAmount > 0) {\n            // Transfer the non used rewards and reset storage\n            pledgeAvailableRewardAmounts[pledgeId] = 0;\n\n            IERC20(pledgeParams.rewardToken).safeTransfer(receiver, remainingAmount);\n\n            ...\n\n        }\n    }\n```\n\n### Proof of Concept\n\nPlease append the following test in the `pause & unpause` `describe` block in `test\\wardenPledge.test.ts`. This test will pass to demonstrate the described scenario.\n\n```typescript\n        it.only('Pausing WardenPledge contract, which takes effect immediately, by its owner can unexpectedly block pledge creator from calling closePledge function', async () => {\n            // before calling the createPledge function, the wardenPledge contract owns no rewardToken1\n            const rewardToken1BalanceWardenPledgeBefore = await rewardToken1.balanceOf(wardenPledge.address)\n            expect(rewardToken1BalanceWardenPledgeBefore).to.be.eq(0)\n\n            const rewardToken1BalanceCreatorBefore = await rewardToken1.balanceOf(creator.address)\n\n            // creator calls the createPledge function\n            await wardenPledge.connect(creator).createPledge(\n                receiver.address,\n                rewardToken1.address,\n                target_votes,\n                reward_per_vote,\n                end_timestamp,\n                max_total_reward_amount,\n                max_fee_amount\n            )\n\n            // after one week, admin, who is the owner of the wardenPledge contract, calls the pause function, which takes effect immediately\n            await advanceTime(WEEK.toNumber())\n            await wardenPledge.connect(admin).pause()\n\n            // Since an emergency that requires an increase of cash flow occurs, creator decides to close the pledge for getting back the deposited rewardToken1 amount.\n            // Without knowing in advance that the wardenPledge contract would be paused,\n            //   creator calls the closePledge function and anticipates to receive the deposited rewardToken1 amount.\n            // Unfortunately, admin's pause transaction has been executed just before creator's closePledge transaction is executed, which causes creator's closePledge transaction to revert.\n            await expect(\n                wardenPledge.connect(creator).closePledge(pledge_id, creator.address)\n            ).to.be.revertedWith(\"Pausable: paused\")\n\n            // after creator's closePledge transaction reverts, creator does not receive the deposited rewardToken1 amount, which is unexpected to her or him\n            const rewardToken1BalanceCreatorAfter = await rewardToken1.balanceOf(creator.address)\n            expect(rewardToken1BalanceCreatorAfter).to.be.lt(rewardToken1BalanceCreatorBefore)\n\n            // meanwhile, the wardenPledge contract still holds the creator's deposited rewardToken1 amount\n            const rewardToken1BalanceWardenPledgeAfter = await rewardToken1.balanceOf(wardenPledge.address)\n            expect(rewardToken1BalanceWardenPledgeAfter).to.be.gt(0)\n        });\n```\n\n### Tools Used\n\nVSCode\n\n### Recommended Mitigation Steps\n\nThe `pause` function can be updated to be time-delayed so the pledge creator can have more time to react. One way would be making this function only callable by a timelock governance contract.\n\n**[Kogaroshi (Paladin) confirmed](https://github.com/code-423n4/2022-10-paladin-findings/issues/70)**\n\n***\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 67 reports were submitted by wardens detailing low risk and non-critical issues. The [report highlighted below](https://github.com/code-423n4/2022-10-paladin-findings/issues/212) by **robee** received the top score from the judge.\n\n*The following wardens also submitted reports: [ajtra](https://github.com/code-423n4/2022-10-paladin-findings/issues/277), \n[rbserver](https://github.com/code-423n4/2022-10-paladin-findings/issues/272), \n[adriro](https://github.com/code-423n4/2022-10-paladin-findings/issues/267), \n[peritoflores](https://github.com/code-423n4/2022-10-paladin-findings/issues/266), \n[Josiah](https://github.com/code-423n4/2022-10-paladin-findings/issues/264), \n[tnevler](https://github.com/code-423n4/2022-10-paladin-findings/issues/262), \n[horsefacts](https://github.com/code-423n4/2022-10-paladin-findings/issues/251), \n[brgltd](https://github.com/code-423n4/2022-10-paladin-findings/issues/250), \n[djxploit](https://github.com/code-423n4/2022-10-paladin-findings/issues/246), \n[minhtrng](https://github.com/code-423n4/2022-10-paladin-findings/issues/244), \n[Dravee](https://github.com/code-423n4/2022-10-paladin-findings/issues/240), \n[B2](https://github.com/code-423n4/2022-10-paladin-findings/issues/239), \n[Trust](https://github.com/code-423n4/2022-10-paladin-findings/issues/237), \n[lukris02](https://github.com/code-423n4/2022-10-paladin-findings/issues/231), \n[delfin454000](https://github.com/code-423n4/2022-10-paladin-findings/issues/230), \n[c3phas](https://github.com/code-423n4/2022-10-paladin-findings/issues/224), \n[RaoulSchaffranek](https://github.com/code-423n4/2022-10-paladin-findings/issues/220), \n[Waze](https://github.com/code-423n4/2022-10-paladin-findings/issues/211), \n[Tricko](https://github.com/code-423n4/2022-10-paladin-findings/issues/209), \n[JTJabba](https://github.com/code-423n4/2022-10-paladin-findings/issues/204), \n[a12jmx](https://github.com/code-423n4/2022-10-paladin-findings/issues/192), \n[Sm4rty](https://github.com/code-423n4/2022-10-paladin-findings/issues/190), \n[0xSmartContract](https://github.com/code-423n4/2022-10-paladin-findings/issues/187), \n[imare](https://github.com/code-423n4/2022-10-paladin-findings/issues/178), \n[0xNazgul](https://github.com/code-423n4/2022-10-paladin-findings/issues/173), \n[Jeiwan](https://github.com/code-423n4/2022-10-paladin-findings/issues/168), \n[0x52](https://github.com/code-423n4/2022-10-paladin-findings/issues/156), \n[Diana](https://github.com/code-423n4/2022-10-paladin-findings/issues/151), \n[shark](https://github.com/code-423n4/2022-10-paladin-findings/issues/140), \n[\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-10-paladin-findings/issues/138), \n[carlitox477](https://github.com/code-423n4/2022-10-paladin-findings/issues/136), \n[ktg](https://github.com/code-423n4/2022-10-paladin-findings/issues/134), \n[Awesome](https://github.com/code-423n4/2022-10-paladin-findings/issues/132), \n[Picodes](https://github.com/code-423n4/2022-10-paladin-findings/issues/129), \n[corerouter](https://github.com/code-423n4/2022-10-paladin-findings/issues/125), \n[0x007](https://github.com/code-423n4/2022-10-paladin-findings/issues/123), \n[RedOneN](https://github.com/code-423n4/2022-10-paladin-findings/issues/122), \n[cryptonue](https://github.com/code-423n4/2022-10-paladin-findings/issues/115), \n[jayphbee](https://github.com/code-423n4/2022-10-paladin-findings/issues/111), \n[0xDjango](https://github.com/code-423n4/2022-10-paladin-findings/issues/110), \n[Ruhum](https://github.com/code-423n4/2022-10-paladin-findings/issues/108), \n[pashov](https://github.com/code-423n4/2022-10-paladin-findings/issues/107), \n[cylzxje](https://github.com/code-423n4/2022-10-paladin-findings/issues/99), \n[Chom](https://github.com/code-423n4/2022-10-paladin-findings/issues/95), \n[ReyAdmirado](https://github.com/code-423n4/2022-10-paladin-findings/issues/88), \n[Rolezn](https://github.com/code-423n4/2022-10-paladin-findings/issues/85), \n[Lambda](https://github.com/code-423n4/2022-10-paladin-findings/issues/82), \n[ctf\\_sec](https://github.com/code-423n4/2022-10-paladin-findings/issues/78), \n[ladboy233](https://github.com/code-423n4/2022-10-paladin-findings/issues/74), \n[8olidity](https://github.com/code-423n4/2022-10-paladin-findings/issues/72), \n[ch0bu](https://github.com/code-423n4/2022-10-paladin-findings/issues/71), \n[jwood](https://github.com/code-423n4/2022-10-paladin-findings/issues/62), \n[cccz](https://github.com/code-423n4/2022-10-paladin-findings/issues/57), \n[oyc\\_109](https://github.com/code-423n4/2022-10-paladin-findings/issues/56), \n[yixxas](https://github.com/code-423n4/2022-10-paladin-findings/issues/43), \n[dic0de](https://github.com/code-423n4/2022-10-paladin-findings/issues/42), \n[chaduke](https://github.com/code-423n4/2022-10-paladin-findings/issues/35), \n[csanuragjain](https://github.com/code-423n4/2022-10-paladin-findings/issues/27), \n[chrisdior4](https://github.com/code-423n4/2022-10-paladin-findings/issues/26), \n[neko\\_nyaa](https://github.com/code-423n4/2022-10-paladin-findings/issues/23), \n[Bnke0x0](https://github.com/code-423n4/2022-10-paladin-findings/issues/22), \n[0x1f8b](https://github.com/code-423n4/2022-10-paladin-findings/issues/20), \n[rvierdiiev](https://github.com/code-423n4/2022-10-paladin-findings/issues/18), \n[leosathya](https://github.com/code-423n4/2022-10-paladin-findings/issues/7), \n[RaymondFam](https://github.com/code-423n4/2022-10-paladin-findings/issues/3), and \n[Mathieu](https://github.com/code-423n4/2022-10-paladin-findings/issues/2).*\n\n## [1] Missing fee parameter validation\n\nSome fee parameters of functions are not checked for invalid values. Validate the parameters:\n\n### Code instances:\n\n        WardenPledge.increasePledgeRewardPerVote (maxFeeAmount)\n        WardenPledge.extendPledge (maxFeeAmount)\n        WardenPledge.createPledge (maxFeeAmount)\n        WardenPledge.updatePlatformFee (newFee)\n\n## [2] safeApprove of openZeppelin is deprecated\n\nYou use safeApprove of openZeppelin although it's deprecated.\n(see [here](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/566a774222707e424896c0c390a84dc3c13bdcb2/contracts/token/ERC20/utils/SafeERC20.sol#L38>)).\n\nYou should change it to increase/decrease Allowance as OpenZeppilin says.\n\n### Code instances:\n\n        Deprecated safeApprove in SafeERC20.sol line 64: _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        Deprecated safeApprove in SafeERC20.sol line 76: _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        Deprecated safeApprove in SafeERC20.sol line 55: _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n\n## [3] Not verified input\n\nExternal / public functions parameters should be validated to make sure the address is not 0.\n\nOtherwise if not given the right input it can mistakenly lead to loss of user funds.\n\n### Code instance:\n\n        WardenPledge.sol.recoverERC20 token\n\n## [4] Solidity compiler versions mismatch\n\nThe project is compiled with different versions of Solidity, which is not recommended because it can lead to undefined behaviors.\n\n## [5] Not verified owner\n\n```\n    owner param should be validated to make sure the owner address is not address(0).\n    Otherwise if not given the right input all only owner accessible functions will be unaccessible.\n    \n    \n```\n\n### Code instance:\n\n        Ownable.sol.transferOwnership newOwner\n\n## [6] Two Steps Verification before Transferring Ownership\n\nThe following contracts have a function that allows them an admin to change it to a different address. If the admin accidentally uses an invalid address for which they do not have the private key, then the system gets locked.\n\nIt is important to have two steps admin change where the first is announcing a pending new admin and the new address should then claim its ownership.\n\nA similar issue was reported in a previous contest and was assigned a severity of Medium: [code-423n4/2021-06-realitycards-findings#105](https://github.com/code-423n4/2021-06-realitycards-findings/issues/105)\n\n### Code instance:\n\n        Ownable.sol\n\n## [7] Missing non reentrancy modifier\n\nThe following functions are missing reentrancy modifier although some other pulbic/external functions does use reentrancy modifer.\nEven though I did not find a way to exploit it, it seems like those functions should have the nonReentrant modifier as the other functions have it as well..\n\n### Code instance:\n\n        WardenPledge.sol, recoverERC20 is missing a reentrancy modifier\n\n## [8] In the following public update functions no value is returned\n\nIn the following functions no value is returned, due to which by default value of return will be 0.\n\nWe assumed that after the update you return the latest new value.\n(similar issue here: <https://github.com/code-423n4/2021-10-badgerdao-findings/issues/85>).\n\n### Code instances:\n\n        WardenPledge.sol, updateChest\n        WardenPledge.sol, updateMinTargetVotes\n        WardenPledge.sol, updatePlatformFee\n        WardenPledge.sol, updateRewardToken\n\n## [9] Check transfer receiver is not 0 to avoid burned money\n\nTransferring tokens to the zero address is usually prohibited to accidentally avoid \"burning\" tokens by sending them to an unrecoverable zero address.\n\n### Code instances:\n\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L658\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L472\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L271\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L438\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L333\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L394\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L505\n\n## [10] Missing commenting\n\n```\n    The following functions are missing commenting as describe below:\n    \n```\n\n### Code instance:\n\n        Pausable.sol, paused (public), @return is missing\n\n## [11] Unsafe Cast\n\nUse openzeppilin's safeCast in:\n\n### Code instance:\n\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L665 : unsafe cast uint64(n)\n\n## [12] Div by 0\n\nDivision by 0 can lead to accidentally revert,\n(An example of a similar issue - <https://github.com/code-423n4/2021-10-defiprotocol-findings/issues/84>)\n\n### Code instance:\n\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L256 boostDuration might be 0\n\n## [13] Tokens with fee on transfer are not supported\n\nThere are ERC20 tokens that charge fee for every transfer() / transferFrom().\n\nVault.sol#addValue() assumes that the received amount is the same as the transfer amount, and uses it to calculate attributions, balance amounts, etc.\n\nBut, the actual transferred amount can be lower for those tokens.\nTherefore it's recommended to use the balance change before and after the transfer instead of the amount.\n\nThis way you also support the tokens with transfer fee - that are popular.\n\n### Code instances:\n\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L438\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L333\n        https://github.com/code-423n4/2022-10-paladin/tree/main/contracts/WardenPledge.sol#L394\n\n***\n\n# Gas Optimizations\n\nFor this contest, 48 reports were submitted by wardens detailing gas optimizations. The [report highlighted below](https://github.com/code-423n4/2022-10-paladin-findings/issues/223) by **c3phas** received the top score from the judge.\n\n*The following wardens also submitted reports: [sakman](https://github.com/code-423n4/2022-10-paladin-findings/issues/278), \n[tnevler](https://github.com/code-423n4/2022-10-paladin-findings/issues/275), \n[ajtra](https://github.com/code-423n4/2022-10-paladin-findings/issues/273), \n[adriro](https://github.com/code-423n4/2022-10-paladin-findings/issues/268), \n[lukris02](https://github.com/code-423n4/2022-10-paladin-findings/issues/263), \n[horsefacts](https://github.com/code-423n4/2022-10-paladin-findings/issues/254), \n[B2](https://github.com/code-423n4/2022-10-paladin-findings/issues/245), \n[peiw](https://github.com/code-423n4/2022-10-paladin-findings/issues/243), \n[djxploit](https://github.com/code-423n4/2022-10-paladin-findings/issues/241), \n[KoKo](https://github.com/code-423n4/2022-10-paladin-findings/issues/228), \n[Dravee](https://github.com/code-423n4/2022-10-paladin-findings/issues/225), \n[indijanc](https://github.com/code-423n4/2022-10-paladin-findings/issues/221), \n[gogo](https://github.com/code-423n4/2022-10-paladin-findings/issues/215), \n[RockingMiles](https://github.com/code-423n4/2022-10-paladin-findings/issues/213), \n[Waze](https://github.com/code-423n4/2022-10-paladin-findings/issues/210), \n[0xSmartContract](https://github.com/code-423n4/2022-10-paladin-findings/issues/208), \n[SooYa](https://github.com/code-423n4/2022-10-paladin-findings/issues/202), \n[0xRoxas](https://github.com/code-423n4/2022-10-paladin-findings/issues/198), \n[Amithuddar](https://github.com/code-423n4/2022-10-paladin-findings/issues/185), \n[imare](https://github.com/code-423n4/2022-10-paladin-findings/issues/177), \n[SadBase](https://github.com/code-423n4/2022-10-paladin-findings/issues/174), \n[0xNazgul](https://github.com/code-423n4/2022-10-paladin-findings/issues/172), \n[neko\\_nyaa](https://github.com/code-423n4/2022-10-paladin-findings/issues/155), \n[halden](https://github.com/code-423n4/2022-10-paladin-findings/issues/152), \n[shark](https://github.com/code-423n4/2022-10-paladin-findings/issues/146), \n[\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-10-paladin-findings/issues/137), \n[carlitox477](https://github.com/code-423n4/2022-10-paladin-findings/issues/135), \n[Picodes](https://github.com/code-423n4/2022-10-paladin-findings/issues/128), \n[karanctf](https://github.com/code-423n4/2022-10-paladin-findings/issues/127), \n[emrekocak](https://github.com/code-423n4/2022-10-paladin-findings/issues/124), \n[RedOneN](https://github.com/code-423n4/2022-10-paladin-findings/issues/121), \n[erictee](https://github.com/code-423n4/2022-10-paladin-findings/issues/119), \n[0xbepresent](https://github.com/code-423n4/2022-10-paladin-findings/issues/104), \n[cylzxje](https://github.com/code-423n4/2022-10-paladin-findings/issues/98), \n[ReyAdmirado](https://github.com/code-423n4/2022-10-paladin-findings/issues/87), \n[Ruhum](https://github.com/code-423n4/2022-10-paladin-findings/issues/69), \n[Mathieu](https://github.com/code-423n4/2022-10-paladin-findings/issues/67), \n[ch0bu](https://github.com/code-423n4/2022-10-paladin-findings/issues/66), \n[durianSausage](https://github.com/code-423n4/2022-10-paladin-findings/issues/63), \n[oyc\\_109](https://github.com/code-423n4/2022-10-paladin-findings/issues/55), \n[Awesome](https://github.com/code-423n4/2022-10-paladin-findings/issues/53), \n[skyle](https://github.com/code-423n4/2022-10-paladin-findings/issues/51), \n[Bnke0x0](https://github.com/code-423n4/2022-10-paladin-findings/issues/21), \n[0x1f8b](https://github.com/code-423n4/2022-10-paladin-findings/issues/19), \n[ballx](https://github.com/code-423n4/2022-10-paladin-findings/issues/13), \n[leosathya](https://github.com/code-423n4/2022-10-paladin-findings/issues/6), and\n[RaymondFam](https://github.com/code-423n4/2022-10-paladin-findings/issues/5).*\n\n## Findings\n\nNB: Some functions have been truncated where neccessary to just show affected parts of the code.\n\nThroughout the report, some places might be denoted with audit tags to show the actual place affected.\n\n## [G-01] Using immutable on variables that are only set in the constructor and never after\n\nUse immutable if you want to assign a permanent value at construction. Use constants if you already know the permanent value. Both get directly embedded in bytecode, saving SLOAD.\nVariables only set in the constructor and never edited afterwards should be marked as immutable, as it would avoid the expensive storage-writing operation in the constructor (around 20 000 gas per variable) and replace the expensive storage-reading operations (around 2100 gas per reading) to a less expensive value reading (3 gas)\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L60>\n\n```solidity\nFile: /contracts/WardenPledge.sol\n60:    IVotingEscrow public votingEscrow;\n```\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L62>\n\n```solidity\nFile: /contracts/WardenPledge.sol\n62:    IBoostV2 public delegationBoost;\n```\n\n## [G-02] Use constants for variables whose value is known beforehand and is never changed\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L79>\n\n```solidity\nFile: /contracts/WardenPledge.sol\n79:    uint256 public minDelegationTime = 1 weeks;\n```\n\n```diff\ndiff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol\nindex beb990d..642a848 100644\n--- a/contracts/WardenPledge.sol\n+++ b/contracts/WardenPledge.sol\n@@ -76,7 +76,7 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {\n     uint256 public minTargetVotes;\n\n     /** @notice Minimum delegation time, taken from veBoost contract */\n-    uint256 public minDelegationTime = 1 weeks;\n+    uint256 public constant minDelegationTime = 1 weeks;\n\n```\n\n## [G-03] Cache storage values in memory to minimize SLOADs\n\nThe code can be optimized by minimizing the number of SLOADs.\n\nSLOADs are expensive (100 gas after the 1st one) compared to MLOADs/MSTOREs (3 gas each). Storage values read multiple times should instead be cached in memory the first time (costing 1 SLOAD) and then read from this cache to avoid multiple SLOADs.\n\nNB: *Some functions have been truncated where neccessary to just show affected parts of the code*\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L222-L274>\n\n#### WardenPledge.sol.\\_pledge(): delegationBoost should be cached(Saves  4 SLOADs \\~394 gas)\n\n```solidity\nFile: /contracts/WardenPledge.sol\n222:    function _pledge(uint256 pledgeId, address user, uint256 amount, uint256 endTimestamp) internal {\n\n240:        delegationBoost.checkpoint_user(user); //@audit: 1st SLOAD\n241:        if(delegationBoost.allowance(user, address(this)) < amount) revert Errors.InsufficientAllowance(); //@audit: 2nd SLOAD\n242:        if(delegationBoost.delegable_balance(user) < amount) revert Errors.CannotDelegate(); //@audit: 3rd SLOAD\n\n245:        if(delegationBoost.adjusted_balance_of(pledgeParams.receiver) + amount > pledgeParams.targetVotes) revert Errors.TargetVotesOverflow(); //@audit: 4th SLOAD\n\n248:        delegationBoost.boost( //@audit: 5th SLOAD\n            pledgeParams.receiver,\n            amount,\n            endTimestamp,\n            user\n        );\n\n```\n\n```diff\ndiff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol\nindex beb990d..5b3d1bd 100644\n--- a/contracts/WardenPledge.sol\n+++ b/contracts/WardenPledge.sol\n@@ -237,15 +237,16 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {\n         uint256 boostDuration = endTimestamp - block.timestamp;\n\n         // Check that the user has enough boost delegation available & set the correct allowance to this contract\n-        delegationBoost.checkpoint_user(user);\n-        if(delegationBoost.allowance(user, address(this)) < amount) revert Errors.InsufficientAllowance();\n-        if(delegationBoost.delegable_balance(user) < amount) revert Errors.CannotDelegate();\n+         IBoostV2 _delegationBoost = delegationBoost;\n+        _delegationBoost.checkpoint_user(user);\n+        if(_delegationBoost.allowance(user, address(this)) < amount) revert Errors.InsufficientAllowance();\n+        if(_delegationBoost.delegable_balance(user) < amount) revert Errors.CannotDelegate();\n\n         // Check that this will not go over the Pledge target of votes\n-        if(delegationBoost.adjusted_balance_of(pledgeParams.receiver) + amount > pledgeParams.targetVotes) revert Errors.TargetVotesOverflow();\n+        if(_delegationBoost.adjusted_balance_of(pledgeParams.receiver) + amount > pledgeParams.targetVotes) revert Errors.TargetVotesOverflow();\n\n         // Creates the DelegationBoost\n-        delegationBoost.boost(\n+        _delegationBoost.boost(\n             pledgeParams.receiver,\n             amount,\n             endTimestamp,\n```\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L222-L274>\n\n#### WardenPledge.sol.\\_pledge(): pledgeAvailableRewardAmounts\\[pledgeId] should be cached(saves 1 SLOAD \\~97 gas)\n\n```solidity\nFile: /contracts/WardenPledge.sol\n    function _pledge(uint256 pledgeId, address user, uint256 amount, uint256 endTimestamp) internal {\n\n\n267:        if(rewardAmount > pledgeAvailableRewardAmounts[pledgeId]) revert Errors.RewardsBalanceTooLow(); //@audit: 1st access\n268:        pledgeAvailableRewardAmounts[pledgeId] -= rewardAmount; //@audit: 2nd access\n```\n\n```diff\ndiff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol\nindex beb990d..2bb2cd2 100644\n--- a/contracts/WardenPledge.sol\n+++ b/contracts/WardenPledge.sol\n@@ -263,9 +263,10 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {\n         uint256 totalDelegatedAmount = ((bias * boostDuration) + bias) / 2;\n         // Then we can calculate the total amount of rewards for this Boost\n         uint256 rewardAmount = (totalDelegatedAmount * pledgeParams.rewardPerVote) / UNIT;\n+        uint _pledgeAvailableRewardAmounts = pledgeAvailableRewardAmounts[pledgeId];\n\n-        if(rewardAmount > pledgeAvailableRewardAmounts[pledgeId]) revert Errors.RewardsBalanceTooLow();\n-        pledgeAvailableRewardAmounts[pledgeId] -= rewardAmount;\n+        if(rewardAmount > _pledgeAvailableRewardAmounts) revert Errors.RewardsBalanceTooLow();\n+        pledgeAvailableRewardAmounts[pledgeId] = _pledgeAvailableRewardAmounts - rewardAmount;\n\n         // Send the rewards to the user\n         IERC20(pledgeParams.rewardToken).safeTransfer(user, rewardAmount);\n```\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L299-L358>\n\n#### WardenPledge.sol.createPledge(): minAmountRewardToken\\[rewardToken] should be cached(saves 1 SLOAD \\~97 gas) - happy path\n\n```solidity\nFile: /contracts/WardenPledge.sol\n299:    function createPledge(\n\n312:        if(minAmountRewardToken[rewardToken] == 0) revert Errors.TokenNotWhitelisted(); //@audit: 1st access\n313:        if(rewardPerVote < minAmountRewardToken[rewardToken]) revert Errors.RewardPerVoteTooLow(); //@audit: 2nd access\n```\n\n```diff\ndiff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol\nindex beb990d..247e5f8 100644\n--- a/contracts/WardenPledge.sol\n+++ b/contracts/WardenPledge.sol\n@@ -309,8 +309,9 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {\n\n         if(receiver == address(0) || rewardToken == address(0)) revert Errors.ZeroAddress();\n         if(targetVotes < minTargetVotes) revert Errors.TargetVoteUnderMin();\n-        if(minAmountRewardToken[rewardToken] == 0) revert Errors.TokenNotWhitelisted();\n-        if(rewardPerVote < minAmountRewardToken[rewardToken]) revert Errors.RewardPerVoteTooLow();\n+        uint256 _minAmountRewardToken = minAmountRewardToken[rewardToken]\n+        if(_minAmountRewardToken == 0) revert Errors.TokenNotWhitelisted();\n+        if(rewardPerVote < _minAmountRewardToken) revert Errors.RewardPerVoteTooLow();\n\n         if(endTimestamp == 0) revert Errors.NullEndTimestamp();\n         if(endTimestamp != _getRoundedTimestamp(endTimestamp)) revert Errors.InvalidEndTimestamp();\n```\n\n## [G-04] `require()` or `revert()` statements that check input arguments should be at the top of the function\n\nChecks that involve constants should come before checks that involve state variables, function calls, and calculations. By doing these checks first, the function is able to revert before wasting a Gcoldsload (2100 gas) in a function that may ultimately revert in the unhappy case.\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L222-L274>\n\n```solidity\nFile: /contracts/WardenPledge.sol\n222:    function _pledge(uint256 pledgeId, address user, uint256 amount, uint256 endTimestamp) internal {\n223:        if(pledgeId >= pledgesIndex()) revert Errors.InvalidPledgeID();\n224:        if(amount == 0) revert Errors.NullValue();\n```\n\n```diff\ndiff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol\nindex beb990d..dfd3ff4 100644\n--- a/contracts/WardenPledge.sol\n+++ b/contracts/WardenPledge.sol\n@@ -220,8 +220,9 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {\n     * @param endTimestamp End of delegation\n     */\n     function _pledge(uint256 pledgeId, address user, uint256 amount, uint256 endTimestamp) internal {\n-        if(pledgeId >= pledgesIndex()) revert Errors.InvalidPledgeID();\n         if(amount == 0) revert Errors.NullValue();\n+        if(pledgeId >= pledgesIndex()) revert Errors.InvalidPledgeID();\n\n         // Load Pledge parameters & check the Pledge is still active\n         Pledge memory pledgeParams = pledges[pledgeId];\n```\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L456-L480>\n\n```solidity\nFile: /contracts/WardenPledge.sol\n456:    function retrievePledgeRewards(uint256 pledgeId, address receiver) external whenNotPaused nonReentrant {\n457:        if(pledgeId >= pledgesIndex()) revert Errors.InvalidPledgeID();\n458:        address creator = pledgeOwner[pledgeId];\n459:        if(msg.sender != creator) revert Errors.NotPledgeCreator();\n460:        if(receiver == address(0)) revert Errors.ZeroAddress();\n```\n\n```diff\ndiff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol\nindex beb990d..9c82ad9 100644\n--- a/contracts/WardenPledge.sol\n+++ b/contracts/WardenPledge.sol\n@@ -454,10 +454,11 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {\n     * @param receiver Address to receive the remaining rewards\n     */\n     function retrievePledgeRewards(uint256 pledgeId, address receiver) external whenNotPaused nonReentrant {\n+        if(receiver == address(0)) revert Errors.ZeroAddress();\n         if(pledgeId >= pledgesIndex()) revert Errors.InvalidPledgeID();\n         address creator = pledgeOwner[pledgeId];\n         if(msg.sender != creator) revert Errors.NotPledgeCreator();\n-        if(receiver == address(0)) revert Errors.ZeroAddress();\n+\n\n         Pledge storage pledgeParams = pledges[pledgeId];\n         if(pledgeParams.endTimestamp > block.timestamp) revert Errors.PledgeNotExpired();\n```\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L488-L515>\n\n```solidity\nFile: /contracts/WardenPledge.sol\n488:    function closePledge(uint256 pledgeId, address receiver) external whenNotPaused nonReentrant {\n489:        if(pledgeId >= pledgesIndex()) revert Errors.InvalidPledgeID();\n490:        address creator = pledgeOwner[pledgeId];\n491:        if(msg.sender != creator) revert Errors.NotPledgeCreator();\n492:        if(receiver == address(0)) revert Errors.ZeroAddress();\n```\n\n```diff\ndiff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol\nindex beb990d..c06f2ee 100644\n--- a/contracts/WardenPledge.sol\n+++ b/contracts/WardenPledge.sol\n@@ -486,10 +486,11 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {\n     * @param receiver Address to receive the remaining rewards\n     */\n     function closePledge(uint256 pledgeId, address receiver) external whenNotPaused nonReentrant {\n+        if(receiver == address(0)) revert Errors.ZeroAddress();\n         if(pledgeId >= pledgesIndex()) revert Errors.InvalidPledgeID();\n         address creator = pledgeOwner[pledgeId];\n         if(msg.sender != creator) revert Errors.NotPledgeCreator();\n-        if(receiver == address(0)) revert Errors.ZeroAddress();\n```\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L525-L533>\n\n```solidity\nFile: /contracts/WardenPledge.sol\n525:    function _addRewardToken(address token, uint256 minRewardPerSecond) internal {\n526:        if(minAmountRewardToken[token] != 0) revert Errors.AlreadyAllowedToken();\n527:        if(token == address(0)) revert Errors.ZeroAddress();\n528:        if(minRewardPerSecond == 0) revert Errors.NullValue();\n```\n\n```diff\ndiff --git a/contracts/WardenPledge.sol b/contracts/WardenPledge.sol\nindex beb990d..71d0087 100644\n--- a/contracts/WardenPledge.sol\n+++ b/contracts/WardenPledge.sol\n@@ -523,10 +523,10 @@ contract WardenPledge is Ownable, Pausable, ReentrancyGuard {\n     * @param minRewardPerSecond Minmum amount of reward per vote per second for the token\n     */\n     function _addRewardToken(address token, uint256 minRewardPerSecond) internal {\n-        if(minAmountRewardToken[token] != 0) revert Errors.AlreadyAllowedToken();\n         if(token == address(0)) revert Errors.ZeroAddress();\n         if(minRewardPerSecond == 0) revert Errors.NullValue();\n\n+        if(minAmountRewardToken[token] != 0) revert Errors.AlreadyAllowedToken();\n+\n         minAmountRewardToken[token] = minRewardPerSecond;\n\n         emit NewRewardToken(token, minRewardPerSecond);\n```\n\n## [G-05] Using storage instead of memory for structs/arrays saves gas\n\nWhen fetching data from a storage location, assigning the data to a memory variable causes all fields of the struct/array to be read from storage, which incurs a Gcoldsload (2100 gas) for each field of the struct/array. If the fields are read from the new memory variable, they incur an additional MLOAD rather than a cheap stack read. Instead of declearing the variable with the memory keyword, declaring the variable with the storage keyword and caching any fields that need to be re-read in stack variables, will be much cheaper, only incuring the Gcoldsload for the fields actually read. The only time it makes sense to read the whole struct/array into a memory variable, is if the full struct/array is being returned by the function, is being passed to a function that requires memory, or if the array/struct is being read from another memory array/struct\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L227>\n\n```solidity\nFile: /contracts/WardenPledge.sol\n227:        Pledge memory pledgeParams = pledges[pledgeId];\n```\n\n## [G-06] Using unchecked blocks to save gas\n\nSolidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn’t possible (as an example, when a comparison is made before the arithmetic operation), some gas can be saved by using an unchecked block\n[see resource](https://github.com/ethereum/solidity/issues/10695)\n\n<https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L268>\n\n```solidity\nFile: /contracts/WardenPledge.sol\n268:        pledgeAvailableRewardAmounts[pledgeId] -= rewardAmount;\n```\n\nThe operation `pledgeAvailableRewardAmounts[pledgeId] -= rewardAmount;` cannot underflow due to the check on [Line 267](https://github.com/code-423n4/2022-10-paladin/blob/d6d0c0e57ad80f15e9691086c9c7270d4ccfe0e6/contracts/WardenPledge.sol#L267) that ensures that `pledgeAvailableRewardAmounts[pledgeId]` is greater than `rewardAmount` before perfoming the arithmetic operation.\n\n***\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}