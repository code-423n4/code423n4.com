{
  "circa": {
    "title": "NFTX contest",
    "sponsor": "NFTX",
    "slug": "2021-12-nftx",
    "date": "2022-03-24",
    "findings": "https://github.com/code-423n4/2021-12-nftx-findings/issues",
    "contest": 69
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of the NFTX smart contract system written in Solidity. The code contest took place between December 16—December 22 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>27 Wardens contributed reports to the NFTX contest:</p>\n<ol>\n<li>cccz</li>\n<li>hyh</li>\n<li><a href=\"https://twitter.com/liam_eastwood13\">leastwood</a></li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li>robee</li>\n<li>GreyArt (<a href=\"https://twitter.com/HickupH\">hickuphh3</a> and <a href=\"https://twitter.com/itsmeSTYJ\">itsmeSTYJ</a>)</li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li><a href=\"https://www.linkedin.com/in/yahia-chaabane/\">ych18</a></li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li>pedroais</li>\n<li>jayjonah8</li>\n<li><a href=\"https://twitter.com/SirH4shalot\">sirhashalot</a></li>\n<li>0x1f8b</li>\n<li>PPrieditis</li>\n<li>0x0x0x</li>\n<li>p4st13r4 (<a href=\"https://github.com/0x69e8\">0x69e8</a> and 0xb4bb4)</li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/JustDravee\">Dravee</a></li>\n<li><a href=\"https://twitter.com/shenwilly_\">shenwilly</a></li>\n<li><a href=\"https://twitter.com/BouSalman\">BouSalman</a></li>\n<li>saian</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/lsdan_defi\">LSDan</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a> and <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 58 unique vulnerabilities and 124 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 3 received a risk rating in the category of HIGH severity, 17 received a risk rating in the category of MEDIUM severity, and 38 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 19 non-critical recommendations and 47 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-12-nftx\">C4 NFTX contest repository</a>, and is composed of 11 smart contracts written in the Solidity programming language and includes 3072 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-3\" style=\"position:relative;\"><a href=\"#high-risk-findings-3\" aria-label=\"high risk findings 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (3)</h1>\n<h2 id=\"h-01-buyandswap1155weth-function-may-cause-loss-of-user-assets\" style=\"position:relative;\"><a href=\"#h-01-buyandswap1155weth-function-may-cause-loss-of-user-assets\" aria-label=\"h 01 buyandswap1155weth function may cause loss of user assets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/2\">[H-01] buyAndSwap1155WETH() function may cause loss of user assets</a></h2>\n<p><em>Submitted by cccz</em></p>\n<p>In the NFTXMarketplaceZap.sol contract, the buyAndSwap1155WETH function uses the WETH provided by the user to exchange VaultToken, but when executing the _buyVaultToken method, msg.value is used instead of maxWethIn. Since msg.value is 0, the call will fail.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">buyAndSwap1155WETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">specificIds</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxWethIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">path</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">maxWethIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">count</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">&gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Transferring &lt;1&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">count</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">INFTXVault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vault</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">INFTXVault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftxFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">vault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">redeemFees</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">targetSwapFee</span><span class=\"mtk1\">() * </span><span class=\"mtk12\">specificIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">) + (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">randomSwapFee</span><span class=\"mtk1\">() * (</span><span class=\"mtk12\">count</span><span class=\"mtk1\">-</span><span class=\"mtk12\">specificIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">swapAmounts</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_buyVaultToken</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">), </span><span class=\"mtk12\">redeemFees</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">, </span><span class=\"mtk12\">path</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>In extreme cases, when the user provides both ETH and WETH (the user approves the contract WETH in advance and calls the buyAndSwap1155WETH function instead of the buyAndSwap1155 function by mistake), the _buyVaultToken function will execute successfully, but because the buyAndSwap1155WETH function will not convert ETH to WETH, The user’s ETH will be locked in the contract, causing loss of user assets.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_buyVaultToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minTokenOut</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxWethIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">path</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">sushiRouter</span><span class=\"mtk1\">.</span><span class=\"mtk11\">swapTokensForExactTokens</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">minTokenOut</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">maxWethIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">path</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  - </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">swapAmounts</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_buyVaultToken</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">), </span><span class=\"mtk12\">redeemFees</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">, </span><span class=\"mtk12\">path</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  + </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">swapAmounts</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_buyVaultToken</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">), </span><span class=\"mtk12\">redeemFees</span><span class=\"mtk1\">, </span><span class=\"mtk12\">maxWethIn</span><span class=\"mtk1\">, </span><span class=\"mtk12\">path</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/2\">0xKiwi (NFTX) confirmed and resolved</a></strong></p>\n<hr>\n<h2 id=\"h-02-the-return-value-of-the-_sendforreceiver-function-is-not-set-causing-the-receiver-to-receive-more-fees\" style=\"position:relative;\"><a href=\"#h-02-the-return-value-of-the-_sendforreceiver-function-is-not-set-causing-the-receiver-to-receive-more-fees\" aria-label=\"h 02 the return value of the _sendforreceiver function is not set causing the receiver to receive more fees permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/67\">[H-02] The return value of the _sendForReceiver function is not set, causing the receiver to receive more fees</a></h2>\n<p><em>Submitted by cccz, also found by WatchPug</em></p>\n<p>In the NFTXSimpleFeeDistributor.sol contract, the distribute function is used to distribute the fee, and the distribute function judges whether the fee is sent successfully according to the return value of the _sendForReceiver function.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">distribute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftxVaultFactory</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vault</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">INFTXVaultFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftxVaultFactory</span><span class=\"mtk1\">).</span><span class=\"mtk11\">vault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">distributionPaused</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">allocTotal</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">treasury</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenBalance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">length</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">feeReceivers</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">leftover</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">FeeReceiver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_feeReceiver</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">feeReceivers</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">leftover</span><span class=\"mtk1\"> + ((</span><span class=\"mtk12\">tokenBalance</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_feeReceiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">allocPoint</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">allocTotal</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentTokenBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">currentTokenBalance</span><span class=\"mtk1\">? </span><span class=\"mtk12\">currentTokenBalance</span><span class=\"mtk1\">: </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">complete</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_sendForReceiver</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_feeReceiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">complete</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">leftover</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">leftover</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<p>In the _sendForReceiver function, when _receiver is not a contract, no value is returned. By default, this will return false. This will make the distribute function think that the fee sending has failed, and will send more fees next time.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_sendForReceiver</span><span class=\"mtk1\">(</span><span class=\"mtk12\">FeeReceiver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isContract</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If the receive is not properly processed, send it to the treasury instead.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">INFTXLPStaking</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiveRewards</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">,) = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">).</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">payload</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If the allowance has not been spent, it means we can pass it forward to next.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">allowance</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">) == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L157-L168\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L157-L168</a></p>\n<p><a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L49-L67\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L49-L67</a></p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_sendForReceiver</span><span class=\"mtk1\">(</span><span class=\"mtk12\">FeeReceiver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isContract</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If the receive is not properly processed, send it to the treasury instead.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">INFTXLPStaking</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiveRewards</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, ) = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">).</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">payload</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If the allowance has not been spent, it means we can pass it forward to next.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">allowance</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">) == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    - </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    + </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/67#issuecomment-1003192355\">0xKiwi (NFTX) confirmed, but disagreed with high severity and commented</a>:</strong></p>\n<blockquote>\n<p>Good catch, thank you. Disagreeing with severity though since this is a permissioned contract, no user funds are at risk and this would most likely cause some failures.</p>\n<p>We aren’t using any EOAs as receivers in production or testing, so this has not been caught. Thank you.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/67\">0xKiwi (NFTX) resolved</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/67#issuecomment-1064471042\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I agree with the warden on this one. Funds are directly at risk and the likelihood of this occurring is 100%. I’m not sure if it matters if the funds are user funds or protocol funds. This would eventually have become a big problem that affected the protocol’s ability to function.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-03-a-vault-can-be-locked-from-marketplacezap-and-stakingzap\" style=\"position:relative;\"><a href=\"#h-03-a-vault-can-be-locked-from-marketplacezap-and-stakingzap\" aria-label=\"h 03 a vault can be locked from marketplacezap and stakingzap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/107\">[H-03] A vault can be locked from MarketplaceZap and StakingZap</a></h2>\n<p><em>Submitted by p4st13r4, also found by cmichel, GreyArt, hyh, jayjonah8, leastwood, pauliax, shenwilly, and WatchPug</em></p>\n<p>Any user that owns a vToken of a particular vault can lock the functionalities of <code>NFTXMarketplaceZap.sol</code> and <code>NFTXStakingZap.sol</code> for everyone.</p>\n<p>Every operation performed by the marketplace, that deals with vToken minting, performs this check:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)), </span><span class=\"mtk8\">&quot;Did not receive expected balance&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>A malicious user could transfer any amount > 0 of a vault’vToken to the marketplace (or staking) zap contracts, thus making the vault functionality unavailable for every user on the marketplace</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L421\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L421</a></p>\n<p><a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L421\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L421</a></p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Remove this logic from the marketplace and staking zap contracts, and add it to the vaults (if necessary)</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/107#issuecomment-1003193410\">0xKiwi (NFTX) confirmed, but disagreed with high severity and commented</a>:</strong></p>\n<blockquote>\n<p>Valid concern, confirmed. And disagreeing with severity.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/107\">0xKiwi (NFTX) resolved</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/107#issuecomment-1064511914\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>In this case I agree with the warden’s severity. The attack would cause user funds to be locked and is incredibly easy to perform.</p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-17\" style=\"position:relative;\"><a href=\"#medium-risk-findings-17\" aria-label=\"medium risk findings 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (17)</h1>\n<h2 id=\"m-01-missing-non-reentrancy-modifier\" style=\"position:relative;\"><a href=\"#m-01-missing-non-reentrancy-modifier\" aria-label=\"m 01 missing non reentrancy modifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/37\">[M-01] Missing non reentrancy modifier</a></h2>\n<p><em>Submitted by robee</em></p>\n<p>The following functions are missing reentrancy modifier although some other pulbic/external functions does use reentrancy modifer.\nEven though I did not find a way to exploit it, it seems like those functions should have the nonReentrant modifier as the other functions have it as well..</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"bash\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXMarketplaceZap.sol, receive is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, __SimpleFeeDistributor__init__ is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, addReceiver is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, initializeVaultReceivers is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, changeReceiverAlloc is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, changeReceiverAddress is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, removeReceiver is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, setTreasuryAddress is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, setLPStakingAddress is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, setInventoryStakingAddress is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, setNFTXVaultFactory is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, pauseFeeDistribution is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXSimpleFeeDistributor.sol, rescueTokens is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXStakingZap.sol, setLPLockTime is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXStakingZap.sol, setInventoryLockTime is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXStakingZap.sol, provideInventory721 is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXStakingZap.sol, provideInventory1155 is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXStakingZap.sol, addLiquidity721ETH is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXStakingZap.sol, addLiquidity1155ETH is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXStakingZap.sol, addLiquidity721 is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXStakingZap.sol, addLiquidity1155 is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXStakingZap.sol, receive is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXStakingZap.sol, rescue is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXV1Buyout.sol, __NFTXV1Buyout_init is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXV1Buyout.sol, emergencyWithdraw is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXV1Buyout.sol, clearBuyout is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXV1Buyout.sol, addBuyout is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXV1Buyout.sol, removeBuyout is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, __NFTXVault_init is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, finalizeVault is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, setVaultMetadata is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, setVaultFeatures is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, assignDefaultFeatures is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, setFees is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, disableVaultFees is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, deployEligibilityStorage is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, setManager is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, mint is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, redeem is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, swap is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  NFTXVaultUpgradeable.sol, flashLoan is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  PalmNFTXStakingZap.sol, setLockTime is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  PalmNFTXStakingZap.sol, addLiquidity721 is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  PalmNFTXStakingZap.sol, addLiquidity1155 is missing a reentrancy modifier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  PalmNFTXStakingZap.sol, receive is missing a reentrancy modifier</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/37\">0xKiwi (NFTX) disputed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/37#issuecomment-1064587166\">LSDan (judge) increased severity to medium and commented</a>:</strong></p>\n<blockquote>\n<p>I’m updating this [from a low] to a medium. Reentrancy represents a real and significant risk (as evident by ETC existing) and should be protected against regardless of if you can foresee the external event that causes lack of protection to be an issue.</p>\n<p><code>2 — Med (M): vulns have a risk of 2 and are considered “Medium” severity when assets are not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-nftxsimplefeedistributoraddreceiver-failure-to-check-for-existing-receiver\" style=\"position:relative;\"><a href=\"#m-02-nftxsimplefeedistributoraddreceiver-failure-to-check-for-existing-receiver\" aria-label=\"m 02 nftxsimplefeedistributoraddreceiver failure to check for existing receiver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/230\">[M-02] NFTXSimpleFeeDistributor#addReceiver: Failure to check for existing receiver</a></h2>\n<p><em>Submitted by GreyArt</em></p>\n<p>The <code>addReceiver()</code> function fails to check if the <code>_receiver</code> already exists. This could lead to the same receiver being added multiple times, which results in erroneous fee distributions.</p>\n<p>The receiver would receive more than expected (until the duplicate entry has been removed).</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Have a mapping <code>address => bool isReceiver</code> that will update whenever receivers are added, modified to a new address or removed.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/230#issuecomment-1003210641\">0xKiwi (NFTX) acknowledged, but disagreed with medium severity and commented</a>:</strong></p>\n<blockquote>\n<p>Valid concern, but this is a permissioned function.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/230#issuecomment-1064558228\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I think this one is much more likely. I would suggest adding a check because the problem is easy to create and much harder to notice.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-nftxmarketplacezapsolbuyand-should-return-unused-wetheth-back-to-msgsender-instead-of-to\" style=\"position:relative;\"><a href=\"#m-03-nftxmarketplacezapsolbuyand-should-return-unused-wetheth-back-to-msgsender-instead-of-to\" aria-label=\"m 03 nftxmarketplacezapsolbuyand should return unused wetheth back to msgsender instead of to permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/161\">[M-03] <code>NFTXMarketplaceZap.sol#buyAnd***()</code> should return unused weth/eth back to <code>msg.sender</code> instead of <code>to</code></a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L226-L249\">https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L226-L249</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">buyAndSwap721WETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">specificIds</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxWethIn</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">path</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">maxWethIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">INFTXVault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vault</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">INFTXVault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftxFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">vault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">redeemFees</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">targetSwapFee</span><span class=\"mtk1\">() * </span><span class=\"mtk12\">specificIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">) + (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">randomSwapFee</span><span class=\"mtk1\">() * (</span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">specificIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_buyVaultToken</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">), </span><span class=\"mtk12\">redeemFees</span><span class=\"mtk1\">, </span><span class=\"mtk12\">maxWethIn</span><span class=\"mtk1\">, </span><span class=\"mtk12\">path</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_swap721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">, </span><span class=\"mtk12\">specificIds</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Swap</span><span class=\"mtk1\">(</span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">], </span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Return extras.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">remaining</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">remaining</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>For example:</p>\n<p>If Alice calls <code>buyAndSwap721WETH()</code> to buy some ERC721 and send to Bob, for slippage control, Alice put <code>1000 ETH</code> as <code>maxWethIn</code>, the actual cost should be lower.</p>\n<p>Let’s say the actual cost is <code>900 ETH</code>.</p>\n<p>Expected Results: Alice spend only for the amount of the actual cost (<code>900 ETH</code>).</p>\n<p>Actual Results: Alice spent <code>1000 ETH</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/161#issuecomment-1003214046\">0xKiwi (NFTX) acknowledged, but disagreed with medium severity and commented</a>:</strong></p>\n<blockquote>\n<p>I think the idea in this is that if a contract is buying for someone else, the zap handles the refund instead of the contract originating the purchase.\nBut this is a valid concern, thank you</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/161#issuecomment-1064555316\">LSDan (judge) commented</a>:</strong></p>\n<blockquote>\n<p>This does result in a loss of funds if the user sends the wrong amount. I agree with the warden’s severity rating.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-nftxstakingzap-and-nftxmarketplacezaps-transferfromerc721-transfer-cryptokitties-to-the-wrong-address\" style=\"position:relative;\"><a href=\"#m-04-nftxstakingzap-and-nftxmarketplacezaps-transferfromerc721-transfer-cryptokitties-to-the-wrong-address\" aria-label=\"m 04 nftxstakingzap and nftxmarketplacezaps transferfromerc721 transfer cryptokitties to the wrong address permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/185\">[M-04] NFTXStakingZap and NFTXMarketplaceZap’s transferFromERC721 transfer Cryptokitties to the wrong address</a></h2>\n<p><em>Submitted by hyh</em></p>\n<p><code>transferFromERC721(address assetAddr, uint256 tokenId, address to)</code> should transfer from <code>msg.sender</code> to <code>to</code>.\nIt transfers to <code>address(this)</code> instead when ERC721 is Cryptokitties.\nAs there is no additional logic for this case it seems to be a mistake that leads to wrong NFT accounting after such a transfer as NFT will be missed in the vault (which is <code>to</code>).</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>NFTXStakingZap:\ntransferFromERC721\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXStakingZap.sol#L416\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXStakingZap.sol#L416</a></p>\n<p>NFTXMarketplaceZap:\ntransferFromERC721\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L556\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L556</a></p>\n<p>Both functions are called by user facing Marketplace buy/sell and Staking addLiquidity/provideInventory functions.</p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Fix the address:</p>\n<p>Now:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Cryptokitties.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSignature</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;transferFrom(address,address,uint256)&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>To be:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Cryptokitties.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSignature</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;transferFrom(address,address,uint256)&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/185#issuecomment-1003211591\">0xKiwi (NFTX) confirmed, but disagreed with medium severity and commented</a>:</strong></p>\n<blockquote>\n<p>This was intentional, as I thought it was needed for the contract to require custody, but it should work fine to send directly to the vault.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/185\">0xKiwi (NFTX) resolved</a></strong></p>\n<hr>\n<h2 id=\"m-05-pool-manager-can-frontrun-fees-to-100-and-use-it-to-steal-the-value-from-users\" style=\"position:relative;\"><a href=\"#m-05-pool-manager-can-frontrun-fees-to-100-and-use-it-to-steal-the-value-from-users\" aria-label=\"m 05 pool manager can frontrun fees to 100 and use it to steal the value from users permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/213\">[M-05] Pool Manager can frontrun fees to 100% and use it to steal the value from users</a></h2>\n<p><em>Submitted by pedroais</em></p>\n<p>Pool Manager can front-run entry fee to 100% and users could lose all their deposits.</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Considering:<br>\nThe pool manager is the creator of the pool.<br>\nAnyone can create a pool.<br>\nManager is not a trusted actor.</p>\n<p>Anyone can create a pool and get people to join. If there is a big deposit admin could front-run the transaction and set the fee to max which is uint(1 ether) = 10**18 (100% as this is a per token fee).</p>\n<p>Function that set fees :\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXVaultUpgradeable.sol#L119\">https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXVaultUpgradeable.sol#L119</a>\nMax fees are 1 ether :\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXVaultFactoryUpgradeable.sol#L122\">https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXVaultFactoryUpgradeable.sol#L122</a></p>\n<p>The manager could benefit from this by having other pool assets deposited in staking so he would receive fees in Vtokens and could use them to withdraw the nfts.</p>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a timelock to change fees. In that way, frontrunning wouldn’t be possible and users would know the fees they are agreeing with.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/213#issuecomment-1003195823\">0xKiwi (NFTX) acknowledged, but disagreed with high severity and commented</a>:</strong></p>\n<blockquote>\n<p>Most users aren’t on vaults that aren’t finalized. We warn users for any vaults that arent finalized and we don’t present them on our website. Acknowledging and disagreeing with severity.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/213#issuecomment-1064508794\">LSDan (judge) decreased severity to medium and commented</a>:</strong></p>\n<blockquote>\n<p>In my view, this is a medium risk. While user funds are at direct risk, the likelihood of this happening or being worth the effort is low. As the sponsor states, it’s very rare for a user to interact with an un-finalized vault. The user would have to be directly linked to the vault and then ignore the giant warning presented front and center in the UI. If that warning were to be removed, however, the risk would increase. This external requirement is the only reason I’m going with medium and not low. </p>\n</blockquote>\n<hr>\n<h2 id=\"m-06-xtoken-approvals-allow-spenders-to-spend-more-tokens\" style=\"position:relative;\"><a href=\"#m-06-xtoken-approvals-allow-spenders-to-spend-more-tokens\" aria-label=\"m 06 xtoken approvals allow spenders to spend more tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/58\">[M-06] <code>xToken</code> Approvals Allow Spenders To Spend More Tokens</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<p>The <code>approve</code> function has not been overridden and therefore uses <code>xToken</code> shares instead of the equivalent rebalanced amount, i.e. the underlying vault token amount.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The approved spender may spend more tokens than desired. In fact, the approved amount that can be transferred keeps growing as rewards continue to be distributed to the <code>XTokenUpgradeable</code> contract.</p>\n<p>Many contracts also use the same amount for the <code>approve</code> call as for the amount they want to have transferred in a subsequent <code>transferFrom</code> call, and in this case, they approve an amount that is too large (as the approved <code>shares</code> amount yields a higher rebalanced amount).</p>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The <code>_allowances</code> field should track the rebalanced amounts (i.e. the equivalent vault token amount) such that the approval value does not grow.</p>\n<p>The <code>transferFrom</code> needs to be overridden and approvals should then be subtracted by the transferred vault token <code>amount</code>, not <code>shares</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/58#issuecomment-1003191456\">0xKiwi (NFTX) acknowledged, but disagreed with high severity and commented</a>:</strong></p>\n<blockquote>\n<p>Not sure if I agree with this severity. If I approve for xTokens, I’m using xTokens, not the underlying token.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/58#issuecomment-1064497035\">LSDan (judge) decreased severity to medium and commented</a>:</strong></p>\n<blockquote>\n<p>This is a medium risk, not high. External assumptions (malicious contracts) are requires for any attack regarding the approval being too high. </p>\n</blockquote>\n<hr>\n<h2 id=\"m-07-rewards-can-be-stolen\" style=\"position:relative;\"><a href=\"#m-07-rewards-can-be-stolen\" aria-label=\"m 07 rewards can be stolen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/136\">[M-07] Rewards can be stolen</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>NFTXInventoryStaking</code> contract distributes new rewards to all previous stakers when the owner calls the <code>receiveRewards</code> function.\nThis allows an attacker to frontrun this <code>receiveRewards</code> transaction when they see it in the mem pool with a <code>deposit</code> function.\nThe attacker will receive the rewards pro-rata to their deposits.\nThe deposit will be locked for 2 seconds only (<code>DEFAULT_LOCKTIME</code>) after which the depositor can withdraw their initial deposit &#x26; the rewards again for a profit.</p>\n<p>The rewards can be gamed this way and one does not actually have to <em>stake</em>, only be in the staking contract at the time of reward distribution for 2 seconds.\nThe rest of the time they can be used for other purposes.</p>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Distribute the rewards equally over time to the stakers instead of in a single chunk on each <code>receiveRewards</code> call.\nThis is more of a “streaming rewards” approach.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/136#issuecomment-1003225759\">0xKiwi (NFTX) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Thanks for the report. </p>\n<p>This is unfortunately unavoidable but streaming isn’t a bad idea. Will consider. Thank you.</p>\n<p>Confirming.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-low-level-call-return-value-not-checked\" style=\"position:relative;\"><a href=\"#m-08-low-level-call-return-value-not-checked\" aria-label=\"m 08 low level call return value not checked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/140\">[M-08] Low-level call return value not checked</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>NFTXStakingZap.addLiquidity721ETHTo</code> function performs a low-level <code>.call</code> in <code>payable(to).call{value: msg.value-amountEth}</code> but does not check the return value if the call succeeded.</p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>If the call fails, the refunds did not succeed and the caller will lose all refunds of <code>msg.value - amountEth</code>.</p>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Revert the entire transaction if the refund call fails by checking that the <code>success</code> return value of the <code>payable(to).call(...)</code> returns <code>true</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/140#issuecomment-1003224022\">0xKiwi (NFTX) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Nice catch, thank you. Confirmed.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/140\">0xKiwi (NFTX) resolved</a></strong></p>\n<hr>\n<h2 id=\"m-09-bypass-zap-timelock\" style=\"position:relative;\"><a href=\"#m-09-bypass-zap-timelock\" aria-label=\"m 09 bypass zap timelock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/178\">[M-09] Bypass zap timelock</a></h2>\n<p><em>Submitted by gzeon</em></p>\n<p>The default value of <code>inventoryLockTime</code> in <code>NFTXStakingZap</code> is <code>7 days</code> while <code>DEFAULT_LOCKTIME</code> in <code>NFTXInventoryStaking</code> is 2 ms. These timelock value are used in <code>NFTXInventoryStaking</code> to eventually call <code>_timelockMint</code> in <code>XTokenUpgradeable</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/token/XTokenUpgradeable.sol#L74\">https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/token/XTokenUpgradeable.sol#L74</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_timelockMint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timelockLength</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timelockFinish</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">timelockLength</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">timelock</span><span class=\"mtk1\">[</span><span class=\"mtk12\">account</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">timelockFinish</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Timelocked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">timelockFinish</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The applicable timelock is calculated by <code>block.timestamp + timelockLength</code>, even when the existing timelock is further in the future. Therefore, one can reduce their long (e.g. 7 days) timelock to 2 ms calling <code>deposit</code> in <code>NFTXInventoryStaking</code></p>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXStakingZap.sol#L160\">https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXStakingZap.sol#L160</a>\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXInventoryStaking.sol#L30\">https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXInventoryStaking.sol#L30</a></p>\n<h4 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_timelockMint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timelockLength</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timelockFinish</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">timelockLength</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">timelockFinish</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">timelock</span><span class=\"mtk1\">[</span><span class=\"mtk12\">account</span><span class=\"mtk1\">]){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">timelock</span><span class=\"mtk1\">[</span><span class=\"mtk12\">account</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">timelockFinish</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Timelocked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">timelockFinish</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">account</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/178\">0xKiwi (NFTX) disputed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/178#issuecomment-1007082108\">0xKiwi (NFTX) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>After taking another look, this is definitely accurate. Thank you!</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/178\">0xKiwi (NFTX) resolved</a></strong></p>\n<hr>\n<h2 id=\"m-10-nftxsimplefeedistributor_sendforreceiver-doesnt-return-success-if-receiver-is-not-a-contract\" style=\"position:relative;\"><a href=\"#m-10-nftxsimplefeedistributor_sendforreceiver-doesnt-return-success-if-receiver-is-not-a-contract\" aria-label=\"m 10 nftxsimplefeedistributor_sendforreceiver doesnt return success if receiver is not a contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/105\">[M-10] NFTXSimpleFeeDistributor._sendForReceiver doesn’t return success if receiver is not a contract</a></h2>\n<p><em>Submitted by hyh</em></p>\n<p>Double spending of fees being distributed will happen in favor of the first fee receivers in the <code>feeReceivers</code> list at the expense of the last ones.\nAs <code>_sendForReceiver</code> doesn’t return success for completed transfer when receiver isn’t a contract, the corresponding fee amount is sent out twice, to the current and to the next fee receiver in the list. This will lead to double payments for those receivers who happen to be next in the line right after EOAs, and missed payments for the receivers positioned closer to the end of the list as the funds available are going to be already depleted when their turn comes.</p>\n<h4 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><code>distribute</code> use <code>_sendForReceiver</code> to transfer current vault balance across <code>feeReceivers</code>:\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L67\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L67</a></p>\n<p><code>_sendForReceiver</code> returns a boolean that is used to move current distribution amount to the next receiver when last transfer failed.\nWhen <code>_receiver.isContract</code> is <code>false</code> nothing is returned, while <code>safeTransfer</code> is done:\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L168\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L168</a></p>\n<p>This way <code>_sendForReceiver</code> will indicate that transfer is failed and leftover amount to be added to the next transfer, i.e. the <code>amountToSend</code> will be spent twice:\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L64\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L64</a></p>\n<h4 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Now:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_sendForReceiver</span><span class=\"mtk1\">(</span><span class=\"mtk12\">FeeReceiver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isContract</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>To be:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_sendForReceiver</span><span class=\"mtk1\">(</span><span class=\"mtk12\">FeeReceiver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isContract</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/105\">0xKiwi (NFTX) confirmed and resolved</a></strong></p>\n<hr>\n<h2 id=\"m-11-nftxvaultfactoryupgradeable-implementation-can-be-replaced-in-production-breaking-the-system\" style=\"position:relative;\"><a href=\"#m-11-nftxvaultfactoryupgradeable-implementation-can-be-replaced-in-production-breaking-the-system\" aria-label=\"m 11 nftxvaultfactoryupgradeable implementation can be replaced in production breaking the system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/177\">[M-11] NFTXVaultFactoryUpgradeable implementation can be replaced in production breaking the system</a></h2>\n<p><em>Submitted by hyh</em></p>\n<p><code>NFTXVaultFactory</code> contract holds information regarding vaults, assets and permissions (vaults, _vaultsForAsset and excludedFromFees mappings).\nAs there is no mechanics present that transfers this information to another implementation, the switch of nftxVaultFactory to another address performed while in production will break the system.</p>\n<h4 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><code>setNFTXVaultFactory</code> function allows an owner to reset <code>nftxVaultFactory</code> without restrictions in the following contracts:</p>\n<p>NFTXLPStaking\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXLPStaking.sol#L59\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXLPStaking.sol#L59</a></p>\n<p>NFTXInventoryStaking\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXInventoryStaking.sol#L51\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXInventoryStaking.sol#L51</a></p>\n<p>NFTXSimpleFeeDistributor\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L135\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L135</a></p>\n<h4 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Either restrict the ability to change the factory implementation to pre-production stages or make <code>nftxVaultFactory</code> immutable by allowing changing it only once:</p>\n<p>Now:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setNFTXVaultFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newFactory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newFactory</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">nftxVaultFactory</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">INFTXVaultFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newFactory</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>To be:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setNFTXVaultFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newFactory</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftxVaultFactory</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;nftxVaultFactory is immutable&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">nftxVaultFactory</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">INFTXVaultFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newFactory</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>If the implementation upgrades in production is desired, the factory data migration logic should be implemented and then used atomically together with the implementation switch in all affected contracts.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/177#issuecomment-1003213811\">0xKiwi (NFTX) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>This is not a contract that is designed to be replaced, but upgraded. But it is a valid concern that these assistant contracts can have their factory be changed and rendered broken. (even if it were permissioned)<br>\nConfirming.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/177\">0xKiwi (NFTX) resolved</a></strong></p>\n<hr>\n<h2 id=\"m-12-buyandswap1155weth-does-not-work-as-intended\" style=\"position:relative;\"><a href=\"#m-12-buyandswap1155weth-does-not-work-as-intended\" aria-label=\"m 12 buyandswap1155weth does not work as intended permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/45\">[M-12] <code>buyAndSwap1155WETH</code> Does Not Work As Intended</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<p>The <code>buyAndSwap1155WETH</code> function in <code>NFTXMarketplaceZap</code> aims to facilitate buying and swapping <code>ERC1155</code> tokens within a single transaction. The function expects to transfer <code>WETH</code> tokens from the <code>msg.sender</code> account and use these tokens in purchasing vault tokens. However, the <code>_buyVaultToken</code> call in <code>buyAndSwap1155WETH</code> actually uses <code>msg.value</code> and not <code>maxWethIn</code>. As a result, the function will not work unless the user supplies both <code>WETH</code> and native <code>ETH</code> amounts, equivalent to the <code>maxWethIn</code> amount.</p>\n<h4 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L284-L314\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L284-L314</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">buyAndSwap1155WETH</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">specificIds</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxWethIn</span><span class=\"mtk1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">path</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">maxWethIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">count</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Transferring &lt; 1&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">count</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">INFTXVault</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vault</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">INFTXVault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftxFactory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">vault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">redeemFees</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">targetSwapFee</span><span class=\"mtk1\">() * </span><span class=\"mtk12\">specificIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">) + (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">randomSwapFee</span><span class=\"mtk1\">() * (</span><span class=\"mtk12\">count</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">specificIds</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">swapAmounts</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_buyVaultToken</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">), </span><span class=\"mtk12\">redeemFees</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">, </span><span class=\"mtk12\">path</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_swap1155</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">idsIn</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">, </span><span class=\"mtk12\">specificIds</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Swap</span><span class=\"mtk1\">(</span><span class=\"mtk12\">count</span><span class=\"mtk1\">, </span><span class=\"mtk12\">swapAmounts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">], </span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Return extras.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">remaining</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">WETH</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">remaining</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.\nDiscussions with Kiwi.</p>\n<h4 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider updating the <code>buyAndSwap1155WETH</code> function such that the following line of code is used instead of <a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L306\">this</a>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256[] memory swapAmounts = _buyVaultToken(address(vault), redeemFees, maxWethIn, path);</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/45\">0xKiwi (NFTX) confirmed and resolved</a></strong></p>\n<hr>\n<h2 id=\"m-13-dishonest-stakers-can-siphon-rewards-from-xtoken-holders-through-the-deposit-function-in-nftxinventorystaking\" style=\"position:relative;\"><a href=\"#m-13-dishonest-stakers-can-siphon-rewards-from-xtoken-holders-through-the-deposit-function-in-nftxinventorystaking\" aria-label=\"m 13 dishonest stakers can siphon rewards from xtoken holders through the deposit function in nftxinventorystaking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/57\">[M-13] Dishonest Stakers Can Siphon Rewards From <code>xToken</code> Holders Through The <code>deposit</code> Function In <code>NFTXInventoryStaking</code></a></h2>\n<p><em>Submitted by leastwood</em></p>\n<p><code>xTokens</code> is intended to be a representation of staked vault tokens. As the protocol’s vaults accrue fees from users, these fees are intended to be distributed to users in an inconsistent fashion. <code>NFTXInventoryStaking</code> is one of the ways users can stake vault tokens. Deposits are timelocked for <code>2</code> seconds by default, essentially rendering flash loan attacks redundant. However, it is more than likely that the same user could withdraw their <code>xToken</code> deposit in the next block (assuming an average block time of just over 13 seconds).</p>\n<p>Hence, if a well-funded attacker sees a transaction to distribute rewards to <code>xToken</code> holders, they could deposit a large sum of vault tokens and receive a majority share of the rewards before withdrawing their tokens in the following block. Additionally, the attacker can force distribute rewards in <code>NFTXSimpleFeeDistributor</code> as there is no access control on the <code>distribute</code> function.</p>\n<p>This issue allows users to siphon user’s rewards from the protocol, intended to be distributed to honest vault token stakers.</p>\n<h4 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Consider the following exploit scenario:</p>\n<ul>\n<li>Currently there are 1000 <code>shares</code> and 1000 <code>base tokens</code> in the <code>XTokenUpgradeable</code> contract.</li>\n<li>Honest actor, Alice, calls <code>distribute</code> in <code>NFTXSimpleFeeDistributor</code> which attempts to send 200 <code>base tokens</code> as rewards for <code>xToken</code> holders accrued via protocol usage.</li>\n<li>Bob sees a transaction to reward <code>xToken</code> holders and frontruns this transaction by staking vault tokens, minting 1000 <code>shares</code> and 1000 <code>base tokens</code>.</li>\n<li>Rewards are distributed such that <code>XTokenUpgradeable</code> has 2000 <code>shares</code> and 2200 <code>base tokens</code>.</li>\n<li>Bob unstakes his tokens and exits the pool, redeeming his 1000 <code>shares</code> for 1100 <code>base tokens</code>.</li>\n<li>As a result, Bob was able to siphon off 100 <code>base tokens</code> without having to stake their tokens for the same time period that Alice had staked her tokens for.</li>\n<li>This unfair distribution can be abused again and again to essentially reward dishonest actors over honest staking participants such as Alice.</li>\n</ul>\n<h4 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.\nDiscussions with Kiwi.</p>\n<h4 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider adding a delay to users token deposits into the <code>XTokenUpgradeable</code> such that miners cannot feasibly censor a transaction for the specified time interval and users cannot frontrun a transaction to distribute rewards. The interval should be chosen such that enough time is provided for the transaction to be included in a block, given poor network conditions.</p>\n<p>I.e. If the chosen interval is 20 blocks. Miners must be able to censor the rewards distribution for 20 blocks. This is unlikely as there would need to be sufficient miner collusion for value to be extracted from the protocol. Additionally, an interval of 20 blocks means that stakers who attempt to enter the pool upon seeing the transaction in the mempool won’t be rewarded for such behaviour.</p>\n<p>It is also essential that the <code>distribute</code> function in <code>NFTXSimpleFeeDistributor</code> is restricted to a given role, ensuring malicious users cannot control at what point rewards are distributed.</p>\n<p>Alternatively, PoolTogether has a Time-Weighted-Average-Balance (TWAB) implementation which can be used as <a href=\"https://v4.docs.pooltogether.com/protocol/concepts/time-weight-average-balance/\">reference</a>. This would ensure the fairest distribution of rewards to stakers, however, there are additional gas costs associated with this implementation. Hence, unless the protocol intends to be used primarily on L2 protocols, this solution should be avoided.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/57#issuecomment-1007912676\">0xKiwi (NFTX) acknowledged, but disagreed with high severity and commented</a>:</strong></p>\n<blockquote>\n<p>While this attack is possible, without available flash liquidity, this attack vector requires a lot of (possibly difficult to acquire) capital to execute. Disagreeing with severity and acknowledging.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/57#issuecomment-1064495218\">LSDan (judge) decreased severity to medium and commented</a>:</strong></p>\n<blockquote>\n<p>I agree with the sponsor that the risk of this happening is almost zero. Yes it’s technically possible but the funds lost are going to be minimal and the attacker will almost definitely pay more in slippage and gas fees than they make. That said, this is a direct attack which results in a loss of user funds so making it less than medium risk seems disingenuous.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-14-return-variable-can-remain-unassigned-in-_sendforreceiver\" style=\"position:relative;\"><a href=\"#m-14-return-variable-can-remain-unassigned-in-_sendforreceiver\" aria-label=\"m 14 return variable can remain unassigned in _sendforreceiver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/121\">[M-14] Return variable can remain unassigned in _sendForReceiver</a></h2>\n<p><em>Submitted by sirhashalot, also found by pauliax</em></p>\n<p>The <code>_sendForReceiver()</code> function only sets a return function in the “if” code block, not the “else” case. If the “else” case is true, no value is returned. The result of this oversight is that the <code>_sendForReceiver()</code> function called from the <code>distribute()</code> function could sucessfully enter its <code>else</code> block if a receiver has <code>isContract</code> set to False and successfully transfer the <code>amountToSend</code> value. The <code>ditribute()</code> function will then have <code>leftover > 0</code> and send <code>currentTokenBalance</code> to the treasury. This issue is partially due to <a href=\"https://github.com/ethereum/solidity/issues/2951\">Solidity using implicit returns</a>, so if no bool value is explicitly returned, the default bool value of False will be returned.</p>\n<p>This problem currently occurs for any receiver with <code>isContract</code> set to False. The <code>_addReceiver</code> function allows for <code>isContract</code> to be set to False, so such a condition should not result in tokens being sent to the treasury as though it was an emergency scenario.</p>\n<h4 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The <code>else</code> block is missing a return value\n<a href=\"https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L167-L169\">https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L167-L169</a></p>\n<h4 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>VS Code “Solidity Visual Developer” extension</p>\n<h4 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Verify that functions with a return value do actually return a value in all cases. Adding the line <code>return true;</code> can be added to the end of the <code>else</code> block as one way to resolve this.</p>\n<p>Alternatively, if <code>isContract</code> should never be set to False, the code should be designed to prevent a receiver from being added with this value.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/121#issuecomment-1003228547\">0xKiwi (NFTX) confirmed and resolved</a></strong></p>\n<hr>\n<h2 id=\"m-15-no-access-control-on-assignfees-function-in-nftxvaultfactoryupgradeable-contract\" style=\"position:relative;\"><a href=\"#m-15-no-access-control-on-assignfees-function-in-nftxvaultfactoryupgradeable-contract\" aria-label=\"m 15 no access control on assignfees function in nftxvaultfactoryupgradeable contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/50\">[M-15] No access control on assignFees() function in NFTXVaultFactoryUpgradeable contract</a></h2>\n<p><em>Submitted by ych18</em></p>\n<p>If the Vault owner decides to set factoryMintFee and factoryRandomRedeemFee to zero, any user could call the function NFTXVaultFactoryUpgradeable.assignFees() and hence all the fees are updated.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/50#issuecomment-1003233969\">0xKiwi (NFTX) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>This function is left over from some upgrades. It will be removed. Thank you.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/50\">0xKiwi (NFTX) resolved</a></strong></p>\n<hr>\n<h2 id=\"m-16-malicious-receiver-can-make-distribute-function-denial-of-service\" style=\"position:relative;\"><a href=\"#m-16-malicious-receiver-can-make-distribute-function-denial-of-service\" aria-label=\"m 16 malicious receiver can make distribute function denial of service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/69\">[M-16] Malicious receiver can make distribute function denial of service</a></h2>\n<p><em>Submitted by cccz</em></p>\n<p>In the NFTXSimpleFeeDistributor.sol contract, the distribute function calls the _sendForReceiver function to distribute the fee</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">distribute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftxVaultFactory</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vault</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">INFTXVaultFactory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nftxVaultFactory</span><span class=\"mtk1\">).</span><span class=\"mtk11\">vault</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">distributionPaused</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">allocTotal</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">treasury</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenBalance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">length</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">feeReceivers</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">leftover</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">FeeReceiver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_feeReceiver</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">feeReceivers</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">leftover</span><span class=\"mtk1\"> + ((</span><span class=\"mtk12\">tokenBalance</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_feeReceiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">allocPoint</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">allocTotal</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentTokenBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">currentTokenBalance</span><span class=\"mtk1\">? </span><span class=\"mtk12\">currentTokenBalance</span><span class=\"mtk1\">: </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">complete</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_sendForReceiver</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_feeReceiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">complete</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">leftover</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">leftover</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<p>In the _sendForReceiver function, when the _receiver is a contract, the receiver’s receiveRewards function will be called. If the receiver is malicious, it can execute revert() in the receiveRewards function, resulting in DOS.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_sendForReceiver</span><span class=\"mtk1\">(</span><span class=\"mtk12\">FeeReceiver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">isContract</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If the receive is not properly processed, send it to the treasury instead.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">INFTXLPStaking</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiveRewards</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_vaultId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">,) = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">).</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">payload</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If the allowance has not been spent, it means we can pass it forward to next.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">allowance</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">) == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountToSend</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L157-L166\">https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L157-L166</a></p>\n<h4 id=\"recommended-mitigation-steps-15\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-15\" aria-label=\"recommended mitigation steps 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The contract can store the fee sent to the receiver in a state variable, and then the receiver can take it out by calling a function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/69#issuecomment-1003192680\">0xKiwi (NFTX) confirmed, but disagreed with high severity and commented</a>:</strong></p>\n<blockquote>\n<p>This is a permissioned entity, but this is a valid concern. User funds not at risk and the dao can remove the malciious receiver (if it ever gets there in the first place). Good thinking. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/69\">0xKiwi (NFTX) resolved</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/69#issuecomment-1064475286\">LSDan (judge) decreased severity to medium and commented</a>:</strong></p>\n<blockquote>\n<p>This is a medium risk, not high. The attack has external requirements and is relatively easy for the DAO to mitigate.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-17-transfer-return-value-is-ignored\" style=\"position:relative;\"><a href=\"#m-17-transfer-return-value-is-ignored\" aria-label=\"m 17 transfer return value is ignored permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/40\">[M-17] transfer return value is ignored</a></h2>\n<p><em>Submitted by robee, also found by 0x1f8b, cmichel, csanuragjain, defsec, hyh, leastwood, sirhashalot, and WatchPug</em></p>\n<p>Need to use safeTransfer instead of transfer. As there are popular tokens, such as USDT that transfer/transferFrom method doesn’t return anything. The transfer return value has to be checked (as there are some other tokens that returns false instead revert), that means you must</p>\n<ol>\n<li>Check the transfer return value</li>\n</ol>\n<p>Another popular possibility is to add a whiteList.\nThose are the appearances (solidity file, line number, actual line):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">NFTXStakingZap</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">, </span><span class=\"mtk7\">401</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">minTokenIn</span><span class=\"mtk1\">-</span><span class=\"mtk12\">amountToken</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">NFTXStakingZap</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">, </span><span class=\"mtk7\">474</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">))); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">PalmNFTXStakingZap</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">, </span><span class=\"mtk7\">190</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pairedToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">wethIn</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">PalmNFTXStakingZap</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">, </span><span class=\"mtk7\">195</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pairedToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">wethIn</span><span class=\"mtk1\">-</span><span class=\"mtk12\">amountEth</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">PalmNFTXStakingZap</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">, </span><span class=\"mtk7\">219</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pairedToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">wethIn</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">PalmNFTXStakingZap</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">, </span><span class=\"mtk7\">224</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pairedToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">wethIn</span><span class=\"mtk1\">-</span><span class=\"mtk12\">amountEth</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">PalmNFTXStakingZap</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">, </span><span class=\"mtk7\">316</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">minTokenIn</span><span class=\"mtk1\">-</span><span class=\"mtk12\">amountToken</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">XTokenUpgradeable</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">, </span><span class=\"mtk7\">54</span><span class=\"mtk1\">, </span><span class=\"mtk12\">baseToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">who</span><span class=\"mtk1\">, </span><span class=\"mtk12\">what</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">NFTXFlashSwipe</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">, </span><span class=\"mtk7\">51</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vault</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">mintFee</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">targetRedeemFee</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/40#issuecomment-1003186753\">0xKiwi (NFTX) confirmed, but disagreed with high severity and commented</a>:</strong></p>\n<blockquote>\n<p>Disagreeing with the severity, but will make sure I stick to safeTransferFrom, thank you.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/40\">0xKiwi (NFTX) resolved</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/40#issuecomment-1064472797\">LSDan (judge) decreased severity to medium and commented</a>:</strong></p>\n<blockquote>\n<p>This is medium risk, not high. Loss of funds requires external factors.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-findings-38\" style=\"position:relative;\"><a href=\"#low-risk-findings-38\" aria-label=\"low risk findings 38 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (38)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/31\">[L-01] safeApprove of openZeppelin is deprecated</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/234\">[L-02] Validations</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/196\">[L-03] NFTXVaultFactoryUpgradeable.sol function assignFees() does not have onlyOwner modifier</a> <em>Submitted by PPrieditis</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/56\">[L-04] Users can create vaults with a malicious _assetAddress </a> <em>Submitted by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/80\">[L-05] Timelock functionality for <code>xToken</code> is applied on all existing balance</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/186\">[L-06] Unsafe approve in NFTXSimpleFeeDistributor</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/150\">[L-07] Outdated comment in <code>TimelockRewardDistributionTokenImpl.burnFrom</code></a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/221\">[L-08] PausableUpgradeable: Document lockId code 10 = deposit</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/214\">[L-09] Cached lpStaking and inventoryStaking in Zap contracts</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/224\">[L-10] NFTXMarketplaceZap: Restrict native ETH transfers to WETH contract</a> <em>Submitted by GreyArt, also found by defsec and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/222\">[L-11] NFTXSimpleFeeDistributor: Inconsistency between implementation and comment</a> <em>Submitted by GreyArt, also found by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/226\">[L-12] NFTXMarketplaceZap: Add rescue() function</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/227\">[L-13] NFTXStakingZap: Sanity checks on “to” (dest) address</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/51\">[L-14] Marketplace allows functions made for ERC721 vaults to interact with ERC1155 vaults</a> <em>Submitted by Ruhum</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/61\">[L-15] InventoryStaking <code>deposit()</code> and <code>withdraw()</code> don’t validate passed vaultId</a> <em>Submitted by Ruhum</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/90\">[L-16] <code>NFTXSimpleFeeDistributor#__SimpleFeeDistributor__init__()</code> Missing <code>__ReentrancyGuard_init()</code></a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/134\">[L-17] Race condition in approve() 收件箱</a> <em>Submitted by cccz, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/135\">[L-18] Same module can be added several times</a> <em>Submitted by cmichel, also found by csanuragjain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/137\">[L-19] Zaps should verify paths</a> <em>Submitted by cmichel, also found by leastwood</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/33\">[L-20] Init frontrun</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/147\">[L-21] Unbounded iteration in <code>NFTXVaultUpgradeable.allHoldings</code> over all holdings</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/41\">[L-22] Inconsistency in fee distribution</a> <em>Submitted by csanuragjain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/108\">[L-23] Unfair fee distribution</a> <em>Submitted by p4st13r4, also found by cccz and cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/181\">[L-24] Missing OOB check in <code>changeReceiverAlloc</code></a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/54\">[L-25] <code>NFTXLPStaking.rewardDistTokenImpl</code> is never initialized</a> <em>Submitted by Ruhum</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/111\">[L-26] NFTXVaultUpgradeable.mintTo and swapTo do not check for user supplied arrays length</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/13\">[L-27] DOS on withdrawal</a> <em>Submitted by csanuragjain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/115\">[L-28] NFTXInventoryStaking._deployXToken create2 deploy result isn’t zero checked</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/155\">[L-29] NFTXStakingZap, NFTXMarketplaceZap and NFTXVaultUpgradeable use hard coded Cryptokitties and CryptoPunks addresses</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/52\">[L-30] onlyOwnerIfPaused(0) argument should not be hard coded </a> <em>Submitted by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/122\">[L-31] Missing address(0) checks</a> <em>Submitted by sirhashalot, also found by BouSalman and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/64\">[L-32] <code>timelockMint</code> In <code>TimelockRewardDistributionTokenImpl</code> Does Not Ensure Mint Is Greater Than Zero</a> <em>Submitted by leastwood</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/65\">[L-33] <code>assignDefaultFeatures</code> Does Nothing</a> <em>Submitted by leastwood</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/73\">[L-34] Rewards Cannot Be Claimed If LP Tokens Are Unstaked</a> <em>Submitted by leastwood</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/172\">[L-35] max timelockLength</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/29\">[L-36] Require with empty message</a> <em>Submitted by robee, also found by hyh and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/30\">[L-37] Require with not comprehensive message</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/36\">[L-38] Two Steps Verification before Transferring Ownership</a> <em>Submitted by robee, also found by Dravee and leastwood</em></li>\n</ul>\n<h1 id=\"non-critical-findings-19\" style=\"position:relative;\"><a href=\"#non-critical-findings-19\" aria-label=\"non critical findings 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (19)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/190\">[N-01] Wrong code style</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/123\">[N-02] Local variables shadowing</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/126\">[N-03] Weak nonce usage</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/228\">[N-04] NFTXMarketplaceZap: incorrect parameter name</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/218\">[N-05] NFTXInventoryStaking: Index vaultId in events</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/220\">[N-06] NFTXLPStaking: Implementation Upgrade Storage Layout Caution</a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/143\">[N-07] Staking Zap approves wrong LP token</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/199\">[N-08] isContract() duplication and Address.sol library usage</a> <em>Submitted by PPrieditis</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/201\">[N-09] TimelockRewardDistributionTokenImpl.sol function withdrawableRewardOf() visibility can be changed from internal to public</a> <em>Submitted by PPrieditis</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/205\">[N-10] Unused function input argument “vault”</a> <em>Submitted by PPrieditis</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/124\">[N-11] Internal functions names should start with underscore</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/82\">[N-12] Constants are not explicitly declared</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/116\">[N-13] Incorrect contract referenced in test</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/87\">[N-14] Unchecked return value for <code>ERC20.approve</code> call</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/88\">[N-15] Outdated compiler version</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/94\">[N-16] <code>transfer()</code> is not recommended for sending ETH</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/179\">[N-17] Use of floating pragma</a> <em>Submitted by saian</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/173\">[N-18] Sell event amounts[1]</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/109\">[N-19] Misleading comments</a> <em>Submitted by p4st13r4</em></li>\n</ul>\n<h1 id=\"gas-optimizations-47\" style=\"position:relative;\"><a href=\"#gas-optimizations-47\" aria-label=\"gas optimizations 47 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (47)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/189\">[G-01] Upgrade pragma to at least 0.8.4</a> <em>Submitted by Dravee, also found by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/193\">[G-02] Using 10**X for constants isn’t gas efficient</a> <em>Submitted by Dravee, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/198\">[G-03] Unnecessary checked arithmetic in for-loops</a> <em>Submitted by Dravee, also found by 0x0x0x, defsec, PPrieditis, robee, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/195\">[G-04] <code>++i</code> costs less gass compared to <code>i++</code></a> <em>Submitted by Dravee, also found by 0x0x0x, robee, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/163\">[G-05] Unused local variables</a> <em>Submitted by WatchPug, also found by gzeon and sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/207\">[G-06] Explicit initialization with zero not required</a> <em>Submitted by Dravee, also found by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/209\">[G-07] Constants can be made internal / private</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/89\">[G-08] Avoid unnecessary external call can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/217\">[G-09] NFTXStakingZap: Unused xTokenMinted variable </a> <em>Submitted by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/100\">[G-10] Use immutable variables can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/101\">[G-11] Remove unnecessary variables can make the code simpler and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/23\">[G-12] Public functions to external</a> <em>Submitted by robee, also found by cccz, csanuragjain, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/156\">[G-13] <code>NFTXMarketplaceZap.sol#buyAndSwap1155WETH()</code> Implementation can be simpler and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/110\">[G-14] Move kitties/punk addresses to constants</a> <em>Submitted by p4st13r4</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/159\">[G-15] Inline unnecessary function can make the code simpler and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/162\">[G-16] Unused events</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/164\">[G-17] Unused function parameters</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/165\">[G-18] Check if amount > 0 before token transfer can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/191\">[G-19] Cache storage variables in the stack can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/19\">[G-20] Unused imports</a> <em>Submitted by robee, also found by PPrieditis</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/97\">[G-21] Using constants instead of local variables can save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/34\">[G-22] Named return issue</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/11\">[G-23] Gas savings</a> <em>Submitted by csanuragjain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/53\">[G-24] Unnecessary assignment of 0 to an uninitialized variable</a> <em>Submitted by Ruhum</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/5\">[G-25] Gas saving by storing modulesCopy.length in local variable</a> <em>Submitted by csanuragjain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/119\">[G-26] Store totalSupply() in variable</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/7\">[G-27] Gas saving by using mapping instead of computeAddress</a> <em>Submitted by csanuragjain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/49\">[G-28] Unnecessary check for a condition </a> <em>Submitted by ych18</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/130\">[G-29] After Solidity 0.8.1, The Inline Assembly Contract Check Can Be replaced with the new function</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/131\">[G-30] Use a constant instead of block.timestamp for the deadline</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/132\">[G-31]  Use <code>calldata</code> instead of <code>memory</code> for function parameters</a> <em>Submitted by defsec, also found by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/176\">[G-32] <code>> 0</code> can be replaced with <code>!= 0</code> for gas optimization</a> <em>Submitted by defsec, also found by 0x0x0x, Dravee, and pedroais</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/183\">[G-33] Gas Optimization: Use uint232 for <code>allocPoint</code></a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/187\">[G-34] Gas Optimization: Use immutable to cache beaconhash</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/48\">[G-35] isContract() code is duplicated in multiple files </a> <em>Submitted by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/167\">[G-36] Cache duplicate external calls</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/169\">[G-37] Unused state variables</a> <em>Submitted by pauliax, also found by GreyArt</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/170\">[G-38] uint64 state variable is less efficient than uint256</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/171\">[G-39] Use cached version of sushiRouter.WETH()</a> <em>Submitted by pauliax, also found by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/208\">[G-40] Use unchecked math and cache values</a> <em>Submitted by pauliax, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/120\">[G-41] Refactor <code>distribute()</code> logic</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/20\">[G-42] Use bytes32 instead of string to save gas whenever possible</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/21\">[G-43] Short the following require messages</a> <em>Submitted by robee, also found by pauliax, sirhashalot, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/22\">[G-44] Storage double reading. Could save SLOAD</a> <em>Submitted by robee, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/25\">[G-45] Unnecessary array boundaries check when loading an array element twice</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/180\">[G-46] Importing unused contract</a> <em>Submitted by saian</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-nftx-findings/issues/117\">[G-47] provideInventory1155 assumes tokenIds.length == amounts.length</a> <em>Submitted by sirhashalot</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-3\">High Risk Findings (3)</a></p>\n<ul>\n<li><a href=\"#h-01-buyandswap1155weth-function-may-cause-loss-of-user-assets\">[H-01] buyAndSwap1155WETH() function may cause loss of user assets</a></li>\n<li><a href=\"#h-02-the-return-value-of-the-_sendforreceiver-function-is-not-set-causing-the-receiver-to-receive-more-fees\">[H-02] The return value of the _sendForReceiver function is not set, causing the receiver to receive more fees</a></li>\n<li><a href=\"#h-03-a-vault-can-be-locked-from-marketplacezap-and-stakingzap\">[H-03] A vault can be locked from MarketplaceZap and StakingZap</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-17\">Medium Risk Findings (17)</a></p>\n<ul>\n<li><a href=\"#m-01-missing-non-reentrancy-modifier\">[M-01] Missing non reentrancy modifier</a></li>\n<li><a href=\"#m-02-nftxsimplefeedistributoraddreceiver-failure-to-check-for-existing-receiver\">[M-02] NFTXSimpleFeeDistributor#addReceiver: Failure to check for existing receiver</a></li>\n<li><a href=\"#m-03-nftxmarketplacezapsolbuyand-should-return-unused-wetheth-back-to-msgsender-instead-of-to\">[M-03] <code>NFTXMarketplaceZap.sol#buyAnd***()</code> should return unused weth/eth back to <code>msg.sender</code> instead of <code>to</code></a></li>\n<li><a href=\"#m-04-nftxstakingzap-and-nftxmarketplacezaps-transferfromerc721-transfer-cryptokitties-to-the-wrong-address\">[M-04] NFTXStakingZap and NFTXMarketplaceZap’s transferFromERC721 transfer Cryptokitties to the wrong address</a></li>\n<li><a href=\"#m-05-pool-manager-can-frontrun-fees-to-100-and-use-it-to-steal-the-value-from-users\">[M-05] Pool Manager can frontrun fees to 100% and use it to steal the value from users</a></li>\n<li><a href=\"#m-06-xtoken-approvals-allow-spenders-to-spend-more-tokens\">[M-06] <code>xToken</code> Approvals Allow Spenders To Spend More Tokens</a></li>\n<li><a href=\"#m-07-rewards-can-be-stolen\">[M-07] Rewards can be stolen</a></li>\n<li><a href=\"#m-08-low-level-call-return-value-not-checked\">[M-08] Low-level call return value not checked</a></li>\n<li><a href=\"#m-09-bypass-zap-timelock\">[M-09] Bypass zap timelock</a></li>\n<li><a href=\"#m-10-nftxsimplefeedistributor_sendforreceiver-doesnt-return-success-if-receiver-is-not-a-contract\">[M-10] NFTXSimpleFeeDistributor._sendForReceiver doesn’t return success if receiver is not a contract</a></li>\n<li><a href=\"#m-11-nftxvaultfactoryupgradeable-implementation-can-be-replaced-in-production-breaking-the-system\">[M-11] NFTXVaultFactoryUpgradeable implementation can be replaced in production breaking the system</a></li>\n<li><a href=\"#m-12-buyandswap1155weth-does-not-work-as-intended\">[M-12] <code>buyAndSwap1155WETH</code> Does Not Work As Intended</a></li>\n<li><a href=\"#m-13-dishonest-stakers-can-siphon-rewards-from-xtoken-holders-through-the-deposit-function-in-nftxinventorystaking\">[M-13] Dishonest Stakers Can Siphon Rewards From <code>xToken</code> Holders Through The <code>deposit</code> Function In <code>NFTXInventoryStaking</code></a></li>\n<li><a href=\"#m-14-return-variable-can-remain-unassigned-in-_sendforreceiver\">[M-14] Return variable can remain unassigned in _sendForReceiver</a></li>\n<li><a href=\"#m-15-no-access-control-on-assignfees-function-in-nftxvaultfactoryupgradeable-contract\">[M-15] No access control on assignFees() function in NFTXVaultFactoryUpgradeable contract</a></li>\n<li><a href=\"#m-16-malicious-receiver-can-make-distribute-function-denial-of-service\">[M-16] Malicious receiver can make distribute function denial of service</a></li>\n<li><a href=\"#m-17-transfer-return-value-is-ignored\">[M-17] transfer return value is ignored</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-38\">Low Risk Findings (38)</a></li>\n<li><a href=\"#non-critical-findings-19\">Non-Critical Findings (19)</a></li>\n<li><a href=\"#gas-optimizations-47\">Gas Optimizations (47)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of the NFTX smart contract system written in Solidity. The code contest took place between December 16—December 22 2021.\n\n## Wardens\n\n27 Wardens contributed reports to the NFTX contest:\n\n  1. cccz\n  1. hyh\n  1. [leastwood](https://twitter.com/liam_eastwood13)\n  1. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n  1. [cmichel](https://twitter.com/cmichelio)\n  1. robee\n  1. GreyArt ([hickuphh3](https://twitter.com/HickupH) and [itsmeSTYJ](https://twitter.com/itsmeSTYJ))\n  1. [pauliax](https://twitter.com/SolidityDev)\n  1. [gzeon](https://twitter.com/gzeon)\n  1. [Ruhum](https://twitter.com/0xruhum)\n  1. [ych18](https://www.linkedin.com/in/yahia-chaabane/)\n  1. [csanuragjain](https://twitter.com/csanuragjain)\n  1. pedroais\n  1. jayjonah8\n  1. [sirhashalot](https://twitter.com/SirH4shalot)\n  1. 0x1f8b\n  1. PPrieditis\n  1. 0x0x0x\n  1. p4st13r4 ([0x69e8](https://github.com/0x69e8) and 0xb4bb4)\n  1. [defsec](https://twitter.com/defsec_)\n  1. [Dravee](https://twitter.com/JustDravee)\n  1. [shenwilly](https://twitter.com/shenwilly_)\n  1. [BouSalman](https://twitter.com/BouSalman)\n  1. saian\n\nThis contest was judged by [LSDan](https://twitter.com/lsdan_defi).\n\nFinal report assembled by [liveactionllama](https://twitter.com/liveactionllama) and [itsmetechjay](https://twitter.com/itsmetechjay).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 58 unique vulnerabilities and 124 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 3 received a risk rating in the category of HIGH severity, 17 received a risk rating in the category of MEDIUM severity, and 38 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 19 non-critical recommendations and 47 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 NFTX contest repository](https://github.com/code-423n4/2021-12-nftx), and is composed of 11 smart contracts written in the Solidity programming language and includes 3072 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (3)\n## [[H-01] buyAndSwap1155WETH() function may cause loss of user assets](https://github.com/code-423n4/2021-12-nftx-findings/issues/2)\n_Submitted by cccz_\n\nIn the NFTXMarketplaceZap.sol contract, the buyAndSwap1155WETH function uses the WETH provided by the user to exchange VaultToken, but when executing the \\_buyVaultToken method, msg.value is used instead of maxWethIn. Since msg.value is 0, the call will fail.\n```solidity\nfunction buyAndSwap1155WETH(\n  uint256 vaultId,\n  uint256[] memory idsIn,\n  uint256[] memory amounts,\n  uint256[] memory specificIds,\n  uint256 maxWethIn,\n  address[] calldata path,\n  address to\n) public payable nonReentrant {\n  require(to != address(0));\n  require(idsIn.length != 0);\n  IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\n  uint256 count;\n  for (uint256 i = 0; i <idsIn.length; i++) {\n      uint256 amount = amounts[i];\n      require(amount> 0, \"Transferring <1\");\n      count += amount;\n  }\n  INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n  uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\n      vault.randomSwapFee() * (count-specificIds.length)\n  );\n  uint256[] memory swapAmounts = _buyVaultToken(address(vault), redeemFees, msg.value, path);\n```\n\nIn extreme cases, when the user provides both ETH and WETH (the user approves the contract WETH in advance and calls the buyAndSwap1155WETH function instead of the buyAndSwap1155 function by mistake), the \\_buyVaultToken function will execute successfully, but because the buyAndSwap1155WETH function will not convert ETH to WETH, The user’s ETH will be locked in the contract, causing loss of user assets.\n```solidity\nfunction _buyVaultToken(\n  address vault,\n  uint256 minTokenOut,\n  uint256 maxWethIn,\n  address[] calldata path\n) internal returns (uint256[] memory) {\n  uint256[] memory amounts = sushiRouter.swapTokensForExactTokens(\n    minTokenOut,\n    maxWethIn,\n    path,\n    address(this),\n    block.timestamp\n  );\n\n  return amounts;\n}\n```\n\n#### Recommended Mitigation Steps\n```solidity\n  - uint256[] memory swapAmounts = _buyVaultToken(address(vault), redeemFees, msg.value, path);\n  + uint256[] memory swapAmounts = _buyVaultToken(address(vault), redeemFees, maxWethIn, path);\n```\n\n**[0xKiwi (NFTX) confirmed and resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/2)**\n\n\n\n***\n\n## [[H-02] The return value of the _sendForReceiver function is not set, causing the receiver to receive more fees](https://github.com/code-423n4/2021-12-nftx-findings/issues/67)\n_Submitted by cccz, also found by WatchPug_\n\nIn the NFTXSimpleFeeDistributor.sol contract, the distribute function is used to distribute the fee, and the distribute function judges whether the fee is sent successfully according to the return value of the \\_sendForReceiver function.\n\n```solidity\nfunction distribute(uint256 vaultId) external override virtual nonReentrant {\n  require(nftxVaultFactory != address(0));\n  address _vault = INFTXVaultFactory(nftxVaultFactory).vault(vaultId);\n\n  uint256 tokenBalance = IERC20Upgradeable(_vault).balanceOf(address(this));\n\n  if (distributionPaused || allocTotal == 0) {\n    IERC20Upgradeable(_vault).safeTransfer(treasury, tokenBalance);\n    return;\n  }\n\n  uint256 length = feeReceivers.length;\n  uint256 leftover;\n  for (uint256 i = 0; i <length; i++) {\n    FeeReceiver memory _feeReceiver = feeReceivers[i];\n    uint256 amountToSend = leftover + ((tokenBalance * _feeReceiver.allocPoint) / allocTotal);\n    uint256 currentTokenBalance = IERC20Upgradeable(_vault).balanceOf(address(this));\n    amountToSend = amountToSend> currentTokenBalance? currentTokenBalance: amountToSend;\n    bool complete = _sendForReceiver(_feeReceiver, vaultId, _vault, amountToSend);\n    if (!complete) {\n      leftover = amountToSend;\n    } else {\n      leftover = 0;\n    }\n  }\n```\n\nIn the \\_sendForReceiver function, when \\_receiver is not a contract, no value is returned. By default, this will return false. This will make the distribute function think that the fee sending has failed, and will send more fees next time.\n```solidity\nfunction _sendForReceiver(FeeReceiver memory _receiver, uint256 _vaultId, address _vault, uint256 amountToSend) internal virtual returns (bool) {\n  if (_receiver.isContract) {\n    IERC20Upgradeable(_vault).approve(_receiver.receiver, amountToSend);\n    // If the receive is not properly processed, send it to the treasury instead.\n      \n    bytes memory payload = abi.encodeWithSelector(INFTXLPStaking.receiveRewards.selector, _vaultId, amountToSend);\n    (bool success,) = address(_receiver.receiver).call(payload);\n\n    // If the allowance has not been spent, it means we can pass it forward to next.\n    return success && IERC20Upgradeable(_vault).allowance(address(this), _receiver.receiver) == 0;\n  } else {\n    IERC20Upgradeable(_vault).safeTransfer(_receiver.receiver, amountToSend);\n  }\n}\n```\n#### Proof of Concept\n\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L157-L168>\n\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L49-L67>\n\n#### Recommended Mitigation Steps\n```solidity\nfunction _sendForReceiver(FeeReceiver memory _receiver, uint256 _vaultId, address _vault, uint256 amountToSend) internal virtual returns (bool) {\n  if (_receiver.isContract) {\n    IERC20Upgradeable(_vault).approve(_receiver.receiver, amountToSend);\n    // If the receive is not properly processed, send it to the treasury instead.\n      \n    bytes memory payload = abi.encodeWithSelector(INFTXLPStaking.receiveRewards.selector, _vaultId, amountToSend);\n    (bool success, ) = address(_receiver.receiver).call(payload);\n\n    // If the allowance has not been spent, it means we can pass it forward to next.\n    return success && IERC20Upgradeable(_vault).allowance(address(this), _receiver.receiver) == 0;\n  } else {\n    - IERC20Upgradeable(_vault).safeTransfer(_receiver.receiver, amountToSend);\n    + return IERC20Upgradeable(_vault).safeTransfer(_receiver.receiver, amountToSend);\n  }\n}\n```\n**[0xKiwi (NFTX) confirmed, but disagreed with high severity and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/67#issuecomment-1003192355):**\n > Good catch, thank you. Disagreeing with severity though since this is a permissioned contract, no user funds are at risk and this would most likely cause some failures.\n> \n> We aren't using any EOAs as receivers in production or testing, so this has not been caught. Thank you.\n\n**[0xKiwi (NFTX) resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/67)**\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/67#issuecomment-1064471042):**\n > I agree with the warden on this one. Funds are directly at risk and the likelihood of this occurring is 100%. I'm not sure if it matters if the funds are user funds or protocol funds. This would eventually have become a big problem that affected the protocol's ability to function.\n\n\n\n***\n\n## [[H-03] A vault can be locked from MarketplaceZap and StakingZap](https://github.com/code-423n4/2021-12-nftx-findings/issues/107)\n_Submitted by p4st13r4, also found by cmichel, GreyArt, hyh, jayjonah8, leastwood, pauliax, shenwilly, and WatchPug_\n\nAny user that owns a vToken of a particular vault can lock the functionalities of `NFTXMarketplaceZap.sol` and `NFTXStakingZap.sol` for everyone.\n\nEvery operation performed by the marketplace, that deals with vToken minting, performs this check:\n\n```jsx\nrequire(balance == IERC20Upgradeable(vault).balanceOf(address(this)), \"Did not receive expected balance\");\n```\n\nA malicious user could transfer any amount > 0 of a vault’vToken to the marketplace (or staking) zap contracts, thus making the vault functionality unavailable for every user on the marketplace\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L421>\n\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L421>\n\n#### Recommended Mitigation Steps\n\nRemove this logic from the marketplace and staking zap contracts, and add it to the vaults (if necessary)\n\n**[0xKiwi (NFTX) confirmed, but disagreed with high severity and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/107#issuecomment-1003193410):**\n > Valid concern, confirmed. And disagreeing with severity.\n\n**[0xKiwi (NFTX) resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/107)**\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/107#issuecomment-1064511914):**\n > In this case I agree with the warden's severity. The attack would cause user funds to be locked and is incredibly easy to perform.\n\n\n\n***\n\n \n# Medium Risk Findings (17)\n## [[M-01] Missing non reentrancy modifier](https://github.com/code-423n4/2021-12-nftx-findings/issues/37)\n_Submitted by robee_\n\nThe following functions are missing reentrancy modifier although some other pulbic/external functions does use reentrancy modifer.\nEven though I did not find a way to exploit it, it seems like those functions should have the nonReentrant modifier as the other functions have it as well..\n\n```bash\n  NFTXMarketplaceZap.sol, receive is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, __SimpleFeeDistributor__init__ is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, addReceiver is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, initializeVaultReceivers is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, changeReceiverAlloc is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, changeReceiverAddress is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, removeReceiver is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, setTreasuryAddress is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, setLPStakingAddress is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, setInventoryStakingAddress is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, setNFTXVaultFactory is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, pauseFeeDistribution is missing a reentrancy modifier\n  NFTXSimpleFeeDistributor.sol, rescueTokens is missing a reentrancy modifier\n  NFTXStakingZap.sol, setLPLockTime is missing a reentrancy modifier\n  NFTXStakingZap.sol, setInventoryLockTime is missing a reentrancy modifier\n  NFTXStakingZap.sol, provideInventory721 is missing a reentrancy modifier\n  NFTXStakingZap.sol, provideInventory1155 is missing a reentrancy modifier\n  NFTXStakingZap.sol, addLiquidity721ETH is missing a reentrancy modifier\n  NFTXStakingZap.sol, addLiquidity1155ETH is missing a reentrancy modifier\n  NFTXStakingZap.sol, addLiquidity721 is missing a reentrancy modifier\n  NFTXStakingZap.sol, addLiquidity1155 is missing a reentrancy modifier\n  NFTXStakingZap.sol, receive is missing a reentrancy modifier\n  NFTXStakingZap.sol, rescue is missing a reentrancy modifier\n  NFTXV1Buyout.sol, __NFTXV1Buyout_init is missing a reentrancy modifier\n  NFTXV1Buyout.sol, emergencyWithdraw is missing a reentrancy modifier\n  NFTXV1Buyout.sol, clearBuyout is missing a reentrancy modifier\n  NFTXV1Buyout.sol, addBuyout is missing a reentrancy modifier\n  NFTXV1Buyout.sol, removeBuyout is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, __NFTXVault_init is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, finalizeVault is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, setVaultMetadata is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, setVaultFeatures is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, assignDefaultFeatures is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, setFees is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, disableVaultFees is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, deployEligibilityStorage is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, setManager is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, mint is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, redeem is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, swap is missing a reentrancy modifier\n  NFTXVaultUpgradeable.sol, flashLoan is missing a reentrancy modifier\n  PalmNFTXStakingZap.sol, setLockTime is missing a reentrancy modifier\n  PalmNFTXStakingZap.sol, addLiquidity721 is missing a reentrancy modifier\n  PalmNFTXStakingZap.sol, addLiquidity1155 is missing a reentrancy modifier\n  PalmNFTXStakingZap.sol, receive is missing a reentrancy modifier\n```\n**[0xKiwi (NFTX) disputed](https://github.com/code-423n4/2021-12-nftx-findings/issues/37)**\n\n**[LSDan (judge) increased severity to medium and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/37#issuecomment-1064587166):**\n > I'm updating this [from a low] to a medium. Reentrancy represents a real and significant risk (as evident by ETC existing) and should be protected against regardless of if you can foresee the external event that causes lack of protection to be an issue.\n> \n> `\n> 2 — Med (M): vulns have a risk of 2 and are considered “Medium” severity when assets are not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n\n\n\n***\n\n## [[M-02] NFTXSimpleFeeDistributor#addReceiver: Failure to check for existing receiver](https://github.com/code-423n4/2021-12-nftx-findings/issues/230)\n_Submitted by GreyArt_\n\nThe `addReceiver()` function fails to check if the `_receiver` already exists. This could lead to the same receiver being added multiple times, which results in erroneous fee distributions.\n\nThe receiver would receive more than expected (until the duplicate entry has been removed).\n\n#### Recommended Mitigation Steps\n\nHave a mapping `address => bool isReceiver` that will update whenever receivers are added, modified to a new address or removed.\n\n**[0xKiwi (NFTX) acknowledged, but disagreed with medium severity and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/230#issuecomment-1003210641):**\n > Valid concern, but this is a permissioned function.\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/230#issuecomment-1064558228):**\n > I think this one is much more likely. I would suggest adding a check because the problem is easy to create and much harder to notice.\n\n\n\n***\n\n## [[M-03] `NFTXMarketplaceZap.sol#buyAnd***()` should return unused weth/eth back to `msg.sender` instead of `to`](https://github.com/code-423n4/2021-12-nftx-findings/issues/161)\n_Submitted by WatchPug_\n\n<https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L226-L249>\n\n```solidity\nfunction buyAndSwap721WETH(\n  uint256 vaultId, \n  uint256[] memory idsIn, \n  uint256[] memory specificIds, \n  uint256 maxWethIn, \n  address[] calldata path,\n  address to\n) public nonReentrant {\n  require(to != address(0));\n  require(idsIn.length != 0);\n  IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\n  INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n  uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\n      vault.randomSwapFee() * (idsIn.length - specificIds.length)\n  );\n  uint256[] memory amounts = _buyVaultToken(address(vault), redeemFees, maxWethIn, path);\n  _swap721(vaultId, idsIn, specificIds, to);\n\n  emit Swap(idsIn.length, amounts[0], to);\n\n  // Return extras.\n  uint256 remaining = WETH.balanceOf(address(this));\n  WETH.transfer(to, remaining);\n}\n```\n\nFor example:\n\nIf Alice calls `buyAndSwap721WETH()` to buy some ERC721 and send to Bob, for slippage control, Alice put `1000 ETH` as `maxWethIn`, the actual cost should be lower.\n\nLet's say the actual cost is `900 ETH`.\n\nExpected Results: Alice spend only for the amount of the actual cost (`900 ETH`).\n\nActual Results: Alice spent `1000 ETH`.\n\n**[0xKiwi (NFTX) acknowledged, but disagreed with medium severity and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/161#issuecomment-1003214046):**\n > I think the idea in this is that if a contract is buying for someone else, the zap handles the refund instead of the contract originating the purchase.\n> But this is a valid concern, thank you\n\n**[LSDan (judge) commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/161#issuecomment-1064555316):**\n > This does result in a loss of funds if the user sends the wrong amount. I agree with the warden's severity rating.\n\n\n\n***\n\n## [[M-04] NFTXStakingZap and NFTXMarketplaceZap's transferFromERC721 transfer Cryptokitties to the wrong address](https://github.com/code-423n4/2021-12-nftx-findings/issues/185)\n_Submitted by hyh_\n\n`transferFromERC721(address assetAddr, uint256 tokenId, address to)` should transfer from `msg.sender` to `to`.\nIt transfers to `address(this)` instead when ERC721 is Cryptokitties.\nAs there is no additional logic for this case it seems to be a mistake that leads to wrong NFT accounting after such a transfer as NFT will be missed in the vault (which is `to`).\n\n#### Proof of Concept\n\nNFTXStakingZap:\ntransferFromERC721\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXStakingZap.sol#L416>\n\nNFTXMarketplaceZap:\ntransferFromERC721\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L556>\n\nBoth functions are called by user facing Marketplace buy/sell and Staking addLiquidity/provideInventory functions.\n\n#### Recommended Mitigation Steps\n\nFix the address:\n\nNow:\n\n```solidity\n  // Cryptokitties.\n  data = abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", msg.sender, address(this), tokenId);\n```\n\nTo be:\n```solidity\n  // Cryptokitties.\n  data = abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", msg.sender, to, tokenId);\n```\n\n**[0xKiwi (NFTX) confirmed, but disagreed with medium severity and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/185#issuecomment-1003211591):**\n > This was intentional, as I thought it was needed for the contract to require custody, but it should work fine to send directly to the vault.\n\n**[0xKiwi (NFTX) resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/185)**\n\n\n***\n\n## [[M-05] Pool Manager can frontrun fees to 100% and use it to steal the value from users](https://github.com/code-423n4/2021-12-nftx-findings/issues/213)\n_Submitted by pedroais_\n\nPool Manager can front-run entry fee to 100% and users could lose all their deposits.\n\n#### Proof of Concept\n\nConsidering:<br>\nThe pool manager is the creator of the pool.<br>\nAnyone can create a pool.<br>\nManager is not a trusted actor.\n\nAnyone can create a pool and get people to join. If there is a big deposit admin could front-run the transaction and set the fee to max which is uint(1 ether) = 10\\*\\*18 (100% as this is a per token fee).\n\nFunction that set fees :\n<https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXVaultUpgradeable.sol#L119>\nMax fees are 1 ether :\n<https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXVaultFactoryUpgradeable.sol#L122>\n\nThe manager could benefit from this by having other pool assets deposited in staking so he would receive fees in Vtokens and could use them to withdraw the nfts.\n\n#### Recommended Mitigation Steps\n\nAdd a timelock to change fees. In that way, frontrunning wouldn't be possible and users would know the fees they are agreeing with.\n\n**[0xKiwi (NFTX) acknowledged, but disagreed with high severity and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/213#issuecomment-1003195823):**\n > Most users aren't on vaults that aren't finalized. We warn users for any vaults that arent finalized and we don't present them on our website. Acknowledging and disagreeing with severity.\n\n**[LSDan (judge) decreased severity to medium and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/213#issuecomment-1064508794):**\n > In my view, this is a medium risk. While user funds are at direct risk, the likelihood of this happening or being worth the effort is low. As the sponsor states, it's very rare for a user to interact with an un-finalized vault. The user would have to be directly linked to the vault and then ignore the giant warning presented front and center in the UI. If that warning were to be removed, however, the risk would increase. This external requirement is the only reason I'm going with medium and not low. \n\n\n\n***\n\n## [[M-06] `xToken` Approvals Allow Spenders To Spend More Tokens](https://github.com/code-423n4/2021-12-nftx-findings/issues/58)\n_Submitted by leastwood_\n\nThe `approve` function has not been overridden and therefore uses `xToken` shares instead of the equivalent rebalanced amount, i.e. the underlying vault token amount.\n\n#### Proof of Concept\n\nThe approved spender may spend more tokens than desired. In fact, the approved amount that can be transferred keeps growing as rewards continue to be distributed to the `XTokenUpgradeable` contract.\n\nMany contracts also use the same amount for the `approve` call as for the amount they want to have transferred in a subsequent `transferFrom` call, and in this case, they approve an amount that is too large (as the approved `shares` amount yields a higher rebalanced amount).\n\n#### Recommended Mitigation Steps\n\nThe `_allowances` field should track the rebalanced amounts (i.e. the equivalent vault token amount) such that the approval value does not grow.\n\nThe `transferFrom` needs to be overridden and approvals should then be subtracted by the transferred vault token `amount`, not `shares`.\n\n**[0xKiwi (NFTX) acknowledged, but disagreed with high severity and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/58#issuecomment-1003191456):**\n > Not sure if I agree with this severity. If I approve for xTokens, I'm using xTokens, not the underlying token.\n\n**[LSDan (judge) decreased severity to medium and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/58#issuecomment-1064497035):**\n > This is a medium risk, not high. External assumptions (malicious contracts) are requires for any attack regarding the approval being too high. \n\n\n\n***\n\n## [[M-07] Rewards can be stolen](https://github.com/code-423n4/2021-12-nftx-findings/issues/136)\n_Submitted by cmichel_\n\nThe `NFTXInventoryStaking` contract distributes new rewards to all previous stakers when the owner calls the `receiveRewards` function.\nThis allows an attacker to frontrun this `receiveRewards` transaction when they see it in the mem pool with a `deposit` function.\nThe attacker will receive the rewards pro-rata to their deposits.\nThe deposit will be locked for 2 seconds only (`DEFAULT_LOCKTIME`) after which the depositor can withdraw their initial deposit & the rewards again for a profit.\n\nThe rewards can be gamed this way and one does not actually have to *stake*, only be in the staking contract at the time of reward distribution for 2 seconds.\nThe rest of the time they can be used for other purposes.\n\n#### Recommended Mitigation Steps\n\nDistribute the rewards equally over time to the stakers instead of in a single chunk on each `receiveRewards` call.\nThis is more of a \"streaming rewards\" approach.\n\n**[0xKiwi (NFTX) confirmed and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/136#issuecomment-1003225759):**\n > Thanks for the report. \n> \n> This is unfortunately unavoidable but streaming isn't a bad idea. Will consider. Thank you.\n> \n> Confirming.\n\n\n\n***\n\n## [[M-08] Low-level call return value not checked](https://github.com/code-423n4/2021-12-nftx-findings/issues/140)\n_Submitted by cmichel_\n\nThe `NFTXStakingZap.addLiquidity721ETHTo` function performs a low-level `.call` in `payable(to).call{value: msg.value-amountEth}` but does not check the return value if the call succeeded.\n\n#### Impact\n\nIf the call fails, the refunds did not succeed and the caller will lose all refunds of `msg.value - amountEth`.\n\n#### Recommended Mitigation Steps\n\nRevert the entire transaction if the refund call fails by checking that the `success` return value of the `payable(to).call(...)` returns `true`.\n\n**[0xKiwi (NFTX) confirmed and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/140#issuecomment-1003224022):**\n > Nice catch, thank you. Confirmed.\n\n**[0xKiwi (NFTX) resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/140)**\n\n\n\n***\n\n## [[M-09] Bypass zap timelock](https://github.com/code-423n4/2021-12-nftx-findings/issues/178)\n_Submitted by gzeon_\n\nThe default value of `inventoryLockTime` in `NFTXStakingZap` is `7 days` while `DEFAULT_LOCKTIME` in `NFTXInventoryStaking` is 2 ms. These timelock value are used in `NFTXInventoryStaking` to eventually call `_timelockMint` in `XTokenUpgradeable`.\n\n<https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/token/XTokenUpgradeable.sol#L74>\n\n```solidity\nfunction _timelockMint(address account, uint256 amount, uint256 timelockLength) internal virtual {\n  uint256 timelockFinish = block.timestamp + timelockLength;\n  timelock[account] = timelockFinish;\n  emit Timelocked(account, timelockFinish);\n  _mint(account, amount);\n}\n```\n\nThe applicable timelock is calculated by `block.timestamp + timelockLength`, even when the existing timelock is further in the future. Therefore, one can reduce their long (e.g. 7 days) timelock to 2 ms calling `deposit` in `NFTXInventoryStaking`\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXStakingZap.sol#L160>\n<https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXInventoryStaking.sol#L30>\n\n#### Recommended Mitigation Steps\n\n```solidity\nfunction _timelockMint(address account, uint256 amount, uint256 timelockLength) internal virtual {\n  uint256 timelockFinish = block.timestamp + timelockLength;\n  if(timelockFinish > timelock[account]){\n    timelock[account] = timelockFinish;\n    emit Timelocked(account, timelockFinish);\n  }\n  _mint(account, amount);\n}\n```\n\n**[0xKiwi (NFTX) disputed](https://github.com/code-423n4/2021-12-nftx-findings/issues/178)**\n\n**[0xKiwi (NFTX) confirmed and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/178#issuecomment-1007082108):**\n > After taking another look, this is definitely accurate. Thank you!\n\n**[0xKiwi (NFTX) resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/178)**\n\n\n\n***\n\n## [[M-10] NFTXSimpleFeeDistributor._sendForReceiver doesn't return success if receiver is not a contract](https://github.com/code-423n4/2021-12-nftx-findings/issues/105)\n_Submitted by hyh_\n\nDouble spending of fees being distributed will happen in favor of the first fee receivers in the `feeReceivers` list at the expense of the last ones.\nAs `_sendForReceiver` doesn't return success for completed transfer when receiver isn't a contract, the corresponding fee amount is sent out twice, to the current and to the next fee receiver in the list. This will lead to double payments for those receivers who happen to be next in the line right after EOAs, and missed payments for the receivers positioned closer to the end of the list as the funds available are going to be already depleted when their turn comes.\n\n#### Proof of Concept\n\n`distribute` use `_sendForReceiver` to transfer current vault balance across `feeReceivers`:\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L67>\n\n`_sendForReceiver` returns a boolean that is used to move current distribution amount to the next receiver when last transfer failed.\nWhen `_receiver.isContract` is `false` nothing is returned, while `safeTransfer` is done:\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L168>\n\nThis way `_sendForReceiver` will indicate that transfer is failed and leftover amount to be added to the next transfer, i.e. the `amountToSend` will be spent twice:\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L64>\n\n#### Recommended Mitigation Steps\n\nNow:\n\n```solidity\nfunction _sendForReceiver(FeeReceiver memory _receiver, uint256 _vaultId, address _vault, uint256 amountToSend) internal virtual returns (bool) {\n  if (_receiver.isContract) {\n  ...\n  } else {\n    IERC20Upgradeable(_vault).safeTransfer(_receiver.receiver, amountToSend);\n  }\n}\n```\n\nTo be:\n```solidity\nfunction _sendForReceiver(FeeReceiver memory _receiver, uint256 _vaultId, address _vault, uint256 amountToSend) internal virtual returns (bool) {\n  if (_receiver.isContract) {\n  ...\n  } else {\n    IERC20Upgradeable(_vault).safeTransfer(_receiver.receiver, amountToSend);\n    return true;\n  }\n}\n```\n\n**[0xKiwi (NFTX) confirmed and resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/105)**\n\n\n\n***\n\n## [[M-11] NFTXVaultFactoryUpgradeable implementation can be replaced in production breaking the system](https://github.com/code-423n4/2021-12-nftx-findings/issues/177)\n_Submitted by hyh_\n\n`NFTXVaultFactory` contract holds information regarding vaults, assets and permissions (vaults, \\_vaultsForAsset and excludedFromFees mappings).\nAs there is no mechanics present that transfers this information to another implementation, the switch of nftxVaultFactory to another address performed while in production will break the system.\n\n#### Proof of Concept\n\n`setNFTXVaultFactory` function allows an owner to reset `nftxVaultFactory` without restrictions in the following contracts:\n\nNFTXLPStaking\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXLPStaking.sol#L59>\n\nNFTXInventoryStaking\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXInventoryStaking.sol#L51>\n\nNFTXSimpleFeeDistributor\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L135>\n\n#### Recommended Mitigation Steps\n\nEither restrict the ability to change the factory implementation to pre-production stages or make `nftxVaultFactory` immutable by allowing changing it only once:\n\nNow:\n```solidity\nfunction setNFTXVaultFactory(address newFactory) external virtual override onlyOwner {\n  require(newFactory != address(0));\n  nftxVaultFactory = INFTXVaultFactory(newFactory);\n}\n```\n\nTo be:\n```solidity\nfunction setNFTXVaultFactory(address newFactory) external virtual override onlyOwner {\n  require(nftxVaultFactory == address(0), \"nftxVaultFactory is immutable\");\n  nftxVaultFactory = INFTXVaultFactory(newFactory);\n}\n```\n\nIf the implementation upgrades in production is desired, the factory data migration logic should be implemented and then used atomically together with the implementation switch in all affected contracts.\n\n**[0xKiwi (NFTX) confirmed and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/177#issuecomment-1003213811):**\n > This is not a contract that is designed to be replaced, but upgraded. But it is a valid concern that these assistant contracts can have their factory be changed and rendered broken. (even if it were permissioned)<br>\n> Confirming.\n\n**[0xKiwi (NFTX) resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/177)**\n\n\n\n***\n\n## [[M-12] `buyAndSwap1155WETH` Does Not Work As Intended](https://github.com/code-423n4/2021-12-nftx-findings/issues/45)\n_Submitted by leastwood_\n\nThe `buyAndSwap1155WETH` function in `NFTXMarketplaceZap` aims to facilitate buying and swapping `ERC1155` tokens within a single transaction. The function expects to transfer `WETH` tokens from the `msg.sender` account and use these tokens in purchasing vault tokens. However, the `_buyVaultToken` call in `buyAndSwap1155WETH` actually uses `msg.value` and not `maxWethIn`. As a result, the function will not work unless the user supplies both `WETH` and native `ETH` amounts, equivalent to the `maxWethIn` amount.\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L284-L314>\n\n```solidity\nfunction buyAndSwap1155WETH(\n  uint256 vaultId, \n  uint256[] memory idsIn, \n  uint256[] memory amounts, \n  uint256[] memory specificIds, \n  uint256 maxWethIn, \n  address[] calldata path,\n  address to\n) public payable nonReentrant {\n  require(to != address(0));\n  require(idsIn.length != 0);\n  IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\n  uint256 count;\n  for (uint256 i = 0; i < idsIn.length; i++) {\n      uint256 amount = amounts[i];\n      require(amount > 0, \"Transferring < 1\");\n      count += amount;\n  }\n  INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n  uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\n      vault.randomSwapFee() * (count - specificIds.length)\n  );\n  uint256[] memory swapAmounts = _buyVaultToken(address(vault), redeemFees, msg.value, path);\n  _swap1155(vaultId, idsIn, amounts, specificIds, to);\n\n  emit Swap(count, swapAmounts[0], to);\n\n  // Return extras.\n  uint256 remaining = WETH.balanceOf(address(this));\n  WETH.transfer(to, remaining);\n}\n```\n\n#### Tools Used\n\nManual code review.\nDiscussions with Kiwi.\n\n#### Recommended Mitigation Steps\n\nConsider updating the `buyAndSwap1155WETH` function such that the following line of code is used instead of [this](https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXMarketplaceZap.sol#L306).\n\n    uint256[] memory swapAmounts = _buyVaultToken(address(vault), redeemFees, maxWethIn, path);\n\n**[0xKiwi (NFTX) confirmed and resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/45)**\n\n\n\n***\n\n## [[M-13] Dishonest Stakers Can Siphon Rewards From `xToken` Holders Through The `deposit` Function In `NFTXInventoryStaking`](https://github.com/code-423n4/2021-12-nftx-findings/issues/57)\n_Submitted by leastwood_\n\n`xTokens` is intended to be a representation of staked vault tokens. As the protocol's vaults accrue fees from users, these fees are intended to be distributed to users in an inconsistent fashion. `NFTXInventoryStaking` is one of the ways users can stake vault tokens. Deposits are timelocked for `2` seconds by default, essentially rendering flash loan attacks redundant. However, it is more than likely that the same user could withdraw their `xToken` deposit in the next block (assuming an average block time of just over 13 seconds).\n\nHence, if a well-funded attacker sees a transaction to distribute rewards to `xToken` holders, they could deposit a large sum of vault tokens and receive a majority share of the rewards before withdrawing their tokens in the following block. Additionally, the attacker can force distribute rewards in `NFTXSimpleFeeDistributor` as there is no access control on the `distribute` function.\n\nThis issue allows users to siphon user's rewards from the protocol, intended to be distributed to honest vault token stakers.\n\n#### Proof of Concept\n\nConsider the following exploit scenario:\n\n*   Currently there are 1000 `shares` and 1000 `base tokens` in the `XTokenUpgradeable` contract.\n*   Honest actor, Alice, calls `distribute` in `NFTXSimpleFeeDistributor` which attempts to send 200 `base tokens` as rewards for `xToken` holders accrued via protocol usage.\n*   Bob sees a transaction to reward `xToken` holders and frontruns this transaction by staking vault tokens, minting 1000 `shares` and 1000 `base tokens`.\n*   Rewards are distributed such that `XTokenUpgradeable` has 2000 `shares` and 2200 `base tokens`.\n*   Bob unstakes his tokens and exits the pool, redeeming his 1000 `shares` for 1100 `base tokens`.\n*   As a result, Bob was able to siphon off 100 `base tokens` without having to stake their tokens for the same time period that Alice had staked her tokens for.\n*   This unfair distribution can be abused again and again to essentially reward dishonest actors over honest staking participants such as Alice.\n\n#### Tools Used\n\nManual code review.\nDiscussions with Kiwi.\n\n#### Recommended Mitigation Steps\n\nConsider adding a delay to users token deposits into the `XTokenUpgradeable` such that miners cannot feasibly censor a transaction for the specified time interval and users cannot frontrun a transaction to distribute rewards. The interval should be chosen such that enough time is provided for the transaction to be included in a block, given poor network conditions.\n\nI.e. If the chosen interval is 20 blocks. Miners must be able to censor the rewards distribution for 20 blocks. This is unlikely as there would need to be sufficient miner collusion for value to be extracted from the protocol. Additionally, an interval of 20 blocks means that stakers who attempt to enter the pool upon seeing the transaction in the mempool won't be rewarded for such behaviour.\n\nIt is also essential that the `distribute` function in `NFTXSimpleFeeDistributor` is restricted to a given role, ensuring malicious users cannot control at what point rewards are distributed.\n\nAlternatively, PoolTogether has a Time-Weighted-Average-Balance (TWAB) implementation which can be used as [reference](https://v4.docs.pooltogether.com/protocol/concepts/time-weight-average-balance/). This would ensure the fairest distribution of rewards to stakers, however, there are additional gas costs associated with this implementation. Hence, unless the protocol intends to be used primarily on L2 protocols, this solution should be avoided.\n\n**[0xKiwi (NFTX) acknowledged, but disagreed with high severity and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/57#issuecomment-1007912676):**\n > While this attack is possible, without available flash liquidity, this attack vector requires a lot of (possibly difficult to acquire) capital to execute. Disagreeing with severity and acknowledging.\n\n**[LSDan (judge) decreased severity to medium and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/57#issuecomment-1064495218):**\n > I agree with the sponsor that the risk of this happening is almost zero. Yes it's technically possible but the funds lost are going to be minimal and the attacker will almost definitely pay more in slippage and gas fees than they make. That said, this is a direct attack which results in a loss of user funds so making it less than medium risk seems disingenuous.\n\n\n\n***\n\n## [[M-14] Return variable can remain unassigned in _sendForReceiver](https://github.com/code-423n4/2021-12-nftx-findings/issues/121)\n_Submitted by sirhashalot, also found by pauliax_\n\nThe `_sendForReceiver()` function only sets a return function in the \"if\" code block, not the \"else\" case. If the \"else\" case is true, no value is returned. The result of this oversight is that the `_sendForReceiver()` function called from the `distribute()` function could sucessfully enter its `else` block if a receiver has `isContract` set to False and successfully transfer the `amountToSend` value. The `ditribute()` function will then have `leftover > 0` and send `currentTokenBalance` to the treasury. This issue is partially due to [Solidity using implicit returns](https://github.com/ethereum/solidity/issues/2951), so if no bool value is explicitly returned, the default bool value of False will be returned.\n\nThis problem currently occurs for any receiver with `isContract` set to False. The `_addReceiver` function allows for `isContract` to be set to False, so such a condition should not result in tokens being sent to the treasury as though it was an emergency scenario.\n\n#### Proof of Concept\n\nThe `else` block is missing a return value\n<https://github.com/code-423n4/2021-12-nftx/blob/194073f750b7e2c9a886ece34b6382b4f1355f36/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L167-L169>\n\n#### Tools Used\n\nVS Code \"Solidity Visual Developer\" extension\n\n#### Recommended Mitigation Steps\n\nVerify that functions with a return value do actually return a value in all cases. Adding the line `return true;` can be added to the end of the `else` block as one way to resolve this.\n\nAlternatively, if `isContract` should never be set to False, the code should be designed to prevent a receiver from being added with this value.\n\n**[0xKiwi (NFTX) confirmed and resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/121#issuecomment-1003228547)**\n\n\n\n***\n\n## [[M-15] No access control on assignFees() function in NFTXVaultFactoryUpgradeable contract](https://github.com/code-423n4/2021-12-nftx-findings/issues/50)\n_Submitted by ych18_\n\nIf the Vault owner decides to set factoryMintFee and factoryRandomRedeemFee to zero, any user could call the function NFTXVaultFactoryUpgradeable.assignFees() and hence all the fees are updated.\n\n**[0xKiwi (NFTX) confirmed and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/50#issuecomment-1003233969):**\n > This function is left over from some upgrades. It will be removed. Thank you.\n\n**[0xKiwi (NFTX) resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/50)**\n\n\n\n***\n\n## [[M-16] Malicious receiver can make distribute function denial of service](https://github.com/code-423n4/2021-12-nftx-findings/issues/69)\n_Submitted by cccz_\n\nIn the NFTXSimpleFeeDistributor.sol contract, the distribute function calls the \\_sendForReceiver function to distribute the fee\n\n```solidity\nfunction distribute(uint256 vaultId) external override virtual nonReentrant {\n  require(nftxVaultFactory != address(0));\n  address _vault = INFTXVaultFactory(nftxVaultFactory).vault(vaultId);\n\n  uint256 tokenBalance = IERC20Upgradeable(_vault).balanceOf(address(this));\n\n  if (distributionPaused || allocTotal == 0) {\n    IERC20Upgradeable(_vault).safeTransfer(treasury, tokenBalance);\n    return;\n  }\n\n  uint256 length = feeReceivers.length;\n  uint256 leftover;\n  for (uint256 i = 0; i <length; i++) {\n    FeeReceiver memory _feeReceiver = feeReceivers[i];\n    uint256 amountToSend = leftover + ((tokenBalance * _feeReceiver.allocPoint) / allocTotal);\n    uint256 currentTokenBalance = IERC20Upgradeable(_vault).balanceOf(address(this));\n    amountToSend = amountToSend> currentTokenBalance? currentTokenBalance: amountToSend;\n    bool complete = _sendForReceiver(_feeReceiver, vaultId, _vault, amountToSend);\n    if (!complete) {\n      leftover = amountToSend;\n    } else {\n      leftover = 0;\n    }\n  }\n```\n\nIn the \\_sendForReceiver function, when the \\_receiver is a contract, the receiver's receiveRewards function will be called. If the receiver is malicious, it can execute revert() in the receiveRewards function, resulting in DOS.\n\n```solidity\nfunction _sendForReceiver(FeeReceiver memory _receiver, uint256 _vaultId, address _vault, uint256 amountToSend) internal virtual returns (bool) {\n  if (_receiver.isContract) {\n    IERC20Upgradeable(_vault).approve(_receiver.receiver, amountToSend);\n    // If the receive is not properly processed, send it to the treasury instead.\n      \n    bytes memory payload = abi.encodeWithSelector(INFTXLPStaking.receiveRewards.selector, _vaultId, amountToSend);\n    (bool success,) = address(_receiver.receiver).call(payload);\n\n    // If the allowance has not been spent, it means we can pass it forward to next.\n    return success && IERC20Upgradeable(_vault).allowance(address(this), _receiver.receiver) == 0;\n  } else {\n    IERC20Upgradeable(_vault).safeTransfer(_receiver.receiver, amountToSend);\n  }\n}\n```\n\n#### Proof of Concept\n\n<https://github.com/code-423n4/2021-12-nftx/blob/main/nftx-protocol-v2/contracts/solidity/NFTXSimpleFeeDistributor.sol#L157-L166>\n\n#### Recommended Mitigation Steps\n\nThe contract can store the fee sent to the receiver in a state variable, and then the receiver can take it out by calling a function.\n\n**[0xKiwi (NFTX) confirmed, but disagreed with high severity and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/69#issuecomment-1003192680):**\n > This is a permissioned entity, but this is a valid concern. User funds not at risk and the dao can remove the malciious receiver (if it ever gets there in the first place). Good thinking. \n\n**[0xKiwi (NFTX) resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/69)**\n\n**[LSDan (judge) decreased severity to medium and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/69#issuecomment-1064475286):**\n > This is a medium risk, not high. The attack has external requirements and is relatively easy for the DAO to mitigate.\n\n\n\n***\n\n## [[M-17] transfer return value is ignored](https://github.com/code-423n4/2021-12-nftx-findings/issues/40)\n_Submitted by robee, also found by 0x1f8b, cmichel, csanuragjain, defsec, hyh, leastwood, sirhashalot, and WatchPug_\n\nNeed to use safeTransfer instead of transfer. As there are popular tokens, such as USDT that transfer/transferFrom method doesn’t return anything. The transfer return value has to be checked (as there are some other tokens that returns false instead revert), that means you must\n\n1.  Check the transfer return value\n\nAnother popular possibility is to add a whiteList.\nThose are the appearances (solidity file, line number, actual line):\n\n```solidity\nNFTXStakingZap.sol, 401, IERC20Upgradeable(vault).transfer(to, minTokenIn-amountToken); \nNFTXStakingZap.sol, 474, IERC20Upgradeable(token).transfer(msg.sender, IERC20Upgradeable(token).balanceOf(address(this))); \nPalmNFTXStakingZap.sol, 190, pairedToken.transferFrom(msg.sender, address(this), wethIn); \nPalmNFTXStakingZap.sol, 195, pairedToken.transfer(to, wethIn-amountEth); \nPalmNFTXStakingZap.sol, 219, pairedToken.transferFrom(msg.sender, address(this), wethIn); \nPalmNFTXStakingZap.sol, 224, pairedToken.transfer(to, wethIn-amountEth); \nPalmNFTXStakingZap.sol, 316, IERC20Upgradeable(vault).transfer(to, minTokenIn-amountToken); \nXTokenUpgradeable.sol, 54, baseToken.transfer(who, what); \nNFTXFlashSwipe.sol, 51, IERC20Upgradeable(vault).transferFrom(msg.sender, address(this), mintFee + targetRedeemFee);\n```\n\n**[0xKiwi (NFTX) confirmed, but disagreed with high severity and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/40#issuecomment-1003186753):**\n > Disagreeing with the severity, but will make sure I stick to safeTransferFrom, thank you.\n\n**[0xKiwi (NFTX) resolved](https://github.com/code-423n4/2021-12-nftx-findings/issues/40)**\n\n**[LSDan (judge) decreased severity to medium and commented](https://github.com/code-423n4/2021-12-nftx-findings/issues/40#issuecomment-1064472797):**\n > This is medium risk, not high. Loss of funds requires external factors.\n\n\n\n***\n\n# Low Risk Findings (38)\n- [[L-01] safeApprove of openZeppelin is deprecated](https://github.com/code-423n4/2021-12-nftx-findings/issues/31) _Submitted by robee_\n- [[L-02] Validations](https://github.com/code-423n4/2021-12-nftx-findings/issues/234) _Submitted by pauliax_\n- [[L-03] NFTXVaultFactoryUpgradeable.sol function assignFees() does not have onlyOwner modifier](https://github.com/code-423n4/2021-12-nftx-findings/issues/196) _Submitted by PPrieditis_\n- [[L-04] Users can create vaults with a malicious _assetAddress ](https://github.com/code-423n4/2021-12-nftx-findings/issues/56) _Submitted by jayjonah8_\n- [[L-05] Timelock functionality for `xToken` is applied on all existing balance](https://github.com/code-423n4/2021-12-nftx-findings/issues/80) _Submitted by 0x0x0x_\n- [[L-06] Unsafe approve in NFTXSimpleFeeDistributor](https://github.com/code-423n4/2021-12-nftx-findings/issues/186) _Submitted by 0x1f8b_\n- [[L-07] Outdated comment in `TimelockRewardDistributionTokenImpl.burnFrom`](https://github.com/code-423n4/2021-12-nftx-findings/issues/150) _Submitted by cmichel_\n- [[L-08] PausableUpgradeable: Document lockId code 10 = deposit](https://github.com/code-423n4/2021-12-nftx-findings/issues/221) _Submitted by GreyArt_\n- [[L-09] Cached lpStaking and inventoryStaking in Zap contracts](https://github.com/code-423n4/2021-12-nftx-findings/issues/214) _Submitted by pauliax_\n- [[L-10] NFTXMarketplaceZap: Restrict native ETH transfers to WETH contract](https://github.com/code-423n4/2021-12-nftx-findings/issues/224) _Submitted by GreyArt, also found by defsec and pauliax_\n- [[L-11] NFTXSimpleFeeDistributor: Inconsistency between implementation and comment](https://github.com/code-423n4/2021-12-nftx-findings/issues/222) _Submitted by GreyArt, also found by hyh_\n- [[L-12] NFTXMarketplaceZap: Add rescue() function](https://github.com/code-423n4/2021-12-nftx-findings/issues/226) _Submitted by GreyArt_\n- [[L-13] NFTXStakingZap: Sanity checks on “to” (dest) address](https://github.com/code-423n4/2021-12-nftx-findings/issues/227) _Submitted by GreyArt_\n- [[L-14] Marketplace allows functions made for ERC721 vaults to interact with ERC1155 vaults](https://github.com/code-423n4/2021-12-nftx-findings/issues/51) _Submitted by Ruhum_\n- [[L-15] InventoryStaking `deposit()` and `withdraw()` don't validate passed vaultId](https://github.com/code-423n4/2021-12-nftx-findings/issues/61) _Submitted by Ruhum_\n- [[L-16] `NFTXSimpleFeeDistributor#__SimpleFeeDistributor__init__()` Missing `__ReentrancyGuard_init()`](https://github.com/code-423n4/2021-12-nftx-findings/issues/90) _Submitted by WatchPug_\n- [[L-17] Race condition in approve() 收件箱](https://github.com/code-423n4/2021-12-nftx-findings/issues/134) _Submitted by cccz, also found by WatchPug_\n- [[L-18] Same module can be added several times](https://github.com/code-423n4/2021-12-nftx-findings/issues/135) _Submitted by cmichel, also found by csanuragjain_\n- [[L-19] Zaps should verify paths](https://github.com/code-423n4/2021-12-nftx-findings/issues/137) _Submitted by cmichel, also found by leastwood_\n- [[L-20] Init frontrun](https://github.com/code-423n4/2021-12-nftx-findings/issues/33) _Submitted by robee_\n- [[L-21] Unbounded iteration in `NFTXVaultUpgradeable.allHoldings` over all holdings](https://github.com/code-423n4/2021-12-nftx-findings/issues/147) _Submitted by cmichel_\n- [[L-22] Inconsistency in fee distribution](https://github.com/code-423n4/2021-12-nftx-findings/issues/41) _Submitted by csanuragjain_\n- [[L-23] Unfair fee distribution](https://github.com/code-423n4/2021-12-nftx-findings/issues/108) _Submitted by p4st13r4, also found by cccz and cmichel_\n- [[L-24] Missing OOB check in `changeReceiverAlloc`](https://github.com/code-423n4/2021-12-nftx-findings/issues/181) _Submitted by gzeon_\n- [[L-25] `NFTXLPStaking.rewardDistTokenImpl` is never initialized](https://github.com/code-423n4/2021-12-nftx-findings/issues/54) _Submitted by Ruhum_\n- [[L-26] NFTXVaultUpgradeable.mintTo and swapTo do not check for user supplied arrays length](https://github.com/code-423n4/2021-12-nftx-findings/issues/111) _Submitted by hyh_\n- [[L-27] DOS on withdrawal](https://github.com/code-423n4/2021-12-nftx-findings/issues/13) _Submitted by csanuragjain_\n- [[L-28] NFTXInventoryStaking._deployXToken create2 deploy result isn't zero checked](https://github.com/code-423n4/2021-12-nftx-findings/issues/115) _Submitted by hyh_\n- [[L-29] NFTXStakingZap, NFTXMarketplaceZap and NFTXVaultUpgradeable use hard coded Cryptokitties and CryptoPunks addresses](https://github.com/code-423n4/2021-12-nftx-findings/issues/155) _Submitted by hyh_\n- [[L-30] onlyOwnerIfPaused(0) argument should not be hard coded ](https://github.com/code-423n4/2021-12-nftx-findings/issues/52) _Submitted by jayjonah8_\n- [[L-31] Missing address(0) checks](https://github.com/code-423n4/2021-12-nftx-findings/issues/122) _Submitted by sirhashalot, also found by BouSalman and robee_\n- [[L-32] `timelockMint` In `TimelockRewardDistributionTokenImpl` Does Not Ensure Mint Is Greater Than Zero](https://github.com/code-423n4/2021-12-nftx-findings/issues/64) _Submitted by leastwood_\n- [[L-33] `assignDefaultFeatures` Does Nothing](https://github.com/code-423n4/2021-12-nftx-findings/issues/65) _Submitted by leastwood_\n- [[L-34] Rewards Cannot Be Claimed If LP Tokens Are Unstaked](https://github.com/code-423n4/2021-12-nftx-findings/issues/73) _Submitted by leastwood_\n- [[L-35] max timelockLength](https://github.com/code-423n4/2021-12-nftx-findings/issues/172) _Submitted by pauliax_\n- [[L-36] Require with empty message](https://github.com/code-423n4/2021-12-nftx-findings/issues/29) _Submitted by robee, also found by hyh and WatchPug_\n- [[L-37] Require with not comprehensive message](https://github.com/code-423n4/2021-12-nftx-findings/issues/30) _Submitted by robee_\n- [[L-38] Two Steps Verification before Transferring Ownership](https://github.com/code-423n4/2021-12-nftx-findings/issues/36) _Submitted by robee, also found by Dravee and leastwood_\n\n# Non-Critical Findings (19)\n- [[N-01] Wrong code style](https://github.com/code-423n4/2021-12-nftx-findings/issues/190) _Submitted by 0x1f8b_\n- [[N-02] Local variables shadowing](https://github.com/code-423n4/2021-12-nftx-findings/issues/123) _Submitted by sirhashalot_\n- [[N-03] Weak nonce usage](https://github.com/code-423n4/2021-12-nftx-findings/issues/126) _Submitted by sirhashalot_\n- [[N-04] NFTXMarketplaceZap: incorrect parameter name](https://github.com/code-423n4/2021-12-nftx-findings/issues/228) _Submitted by GreyArt_\n- [[N-05] NFTXInventoryStaking: Index vaultId in events](https://github.com/code-423n4/2021-12-nftx-findings/issues/218) _Submitted by GreyArt_\n- [[N-06] NFTXLPStaking: Implementation Upgrade Storage Layout Caution](https://github.com/code-423n4/2021-12-nftx-findings/issues/220) _Submitted by GreyArt_\n- [[N-07] Staking Zap approves wrong LP token](https://github.com/code-423n4/2021-12-nftx-findings/issues/143) _Submitted by cmichel_\n- [[N-08] isContract() duplication and Address.sol library usage](https://github.com/code-423n4/2021-12-nftx-findings/issues/199) _Submitted by PPrieditis_\n- [[N-09] TimelockRewardDistributionTokenImpl.sol function withdrawableRewardOf() visibility can be changed from internal to public](https://github.com/code-423n4/2021-12-nftx-findings/issues/201) _Submitted by PPrieditis_\n- [[N-10] Unused function input argument \"vault\"](https://github.com/code-423n4/2021-12-nftx-findings/issues/205) _Submitted by PPrieditis_\n- [[N-11] Internal functions names should start with underscore](https://github.com/code-423n4/2021-12-nftx-findings/issues/124) _Submitted by sirhashalot_\n- [[N-12] Constants are not explicitly declared](https://github.com/code-423n4/2021-12-nftx-findings/issues/82) _Submitted by WatchPug_\n- [[N-13] Incorrect contract referenced in test](https://github.com/code-423n4/2021-12-nftx-findings/issues/116) _Submitted by sirhashalot_\n- [[N-14] Unchecked return value for `ERC20.approve` call](https://github.com/code-423n4/2021-12-nftx-findings/issues/87) _Submitted by WatchPug_\n- [[N-15] Outdated compiler version](https://github.com/code-423n4/2021-12-nftx-findings/issues/88) _Submitted by WatchPug_\n- [[N-16] `transfer()` is not recommended for sending ETH](https://github.com/code-423n4/2021-12-nftx-findings/issues/94) _Submitted by WatchPug_\n- [[N-17] Use of floating pragma](https://github.com/code-423n4/2021-12-nftx-findings/issues/179) _Submitted by saian_\n- [[N-18] Sell event amounts[1]](https://github.com/code-423n4/2021-12-nftx-findings/issues/173) _Submitted by pauliax_\n- [[N-19] Misleading comments](https://github.com/code-423n4/2021-12-nftx-findings/issues/109) _Submitted by p4st13r4_\n\n# Gas Optimizations (47)\n- [[G-01] Upgrade pragma to at least 0.8.4](https://github.com/code-423n4/2021-12-nftx-findings/issues/189) _Submitted by Dravee, also found by defsec_\n- [[G-02] Using 10**X for constants isn't gas efficient](https://github.com/code-423n4/2021-12-nftx-findings/issues/193) _Submitted by Dravee, also found by WatchPug_\n- [[G-03] Unnecessary checked arithmetic in for-loops](https://github.com/code-423n4/2021-12-nftx-findings/issues/198) _Submitted by Dravee, also found by 0x0x0x, defsec, PPrieditis, robee, and WatchPug_\n- [[G-04] `++i` costs less gass compared to `i++`](https://github.com/code-423n4/2021-12-nftx-findings/issues/195) _Submitted by Dravee, also found by 0x0x0x, robee, and WatchPug_\n- [[G-05] Unused local variables](https://github.com/code-423n4/2021-12-nftx-findings/issues/163) _Submitted by WatchPug, also found by gzeon and sirhashalot_\n- [[G-06] Explicit initialization with zero not required](https://github.com/code-423n4/2021-12-nftx-findings/issues/207) _Submitted by Dravee, also found by robee_\n- [[G-07] Constants can be made internal / private](https://github.com/code-423n4/2021-12-nftx-findings/issues/209) _Submitted by Dravee_\n- [[G-08] Avoid unnecessary external call can save gas](https://github.com/code-423n4/2021-12-nftx-findings/issues/89) _Submitted by WatchPug_\n- [[G-09] NFTXStakingZap: Unused xTokenMinted variable ](https://github.com/code-423n4/2021-12-nftx-findings/issues/217) _Submitted by GreyArt_\n- [[G-10] Use immutable variables can save gas](https://github.com/code-423n4/2021-12-nftx-findings/issues/100) _Submitted by WatchPug_\n- [[G-11] Remove unnecessary variables can make the code simpler and save some gas](https://github.com/code-423n4/2021-12-nftx-findings/issues/101) _Submitted by WatchPug_\n- [[G-12] Public functions to external](https://github.com/code-423n4/2021-12-nftx-findings/issues/23) _Submitted by robee, also found by cccz, csanuragjain, and WatchPug_\n- [[G-13] `NFTXMarketplaceZap.sol#buyAndSwap1155WETH()` Implementation can be simpler and save some gas](https://github.com/code-423n4/2021-12-nftx-findings/issues/156) _Submitted by WatchPug_\n- [[G-14] Move kitties/punk addresses to constants](https://github.com/code-423n4/2021-12-nftx-findings/issues/110) _Submitted by p4st13r4_\n- [[G-15] Inline unnecessary function can make the code simpler and save some gas](https://github.com/code-423n4/2021-12-nftx-findings/issues/159) _Submitted by WatchPug_\n- [[G-16] Unused events](https://github.com/code-423n4/2021-12-nftx-findings/issues/162) _Submitted by WatchPug_\n- [[G-17] Unused function parameters](https://github.com/code-423n4/2021-12-nftx-findings/issues/164) _Submitted by WatchPug_\n- [[G-18] Check if amount > 0 before token transfer can save gas](https://github.com/code-423n4/2021-12-nftx-findings/issues/165) _Submitted by WatchPug_\n- [[G-19] Cache storage variables in the stack can save gas](https://github.com/code-423n4/2021-12-nftx-findings/issues/191) _Submitted by WatchPug_\n- [[G-20] Unused imports](https://github.com/code-423n4/2021-12-nftx-findings/issues/19) _Submitted by robee, also found by PPrieditis_\n- [[G-21] Using constants instead of local variables can save some gas](https://github.com/code-423n4/2021-12-nftx-findings/issues/97) _Submitted by WatchPug_\n- [[G-22] Named return issue](https://github.com/code-423n4/2021-12-nftx-findings/issues/34) _Submitted by robee_\n- [[G-23] Gas savings](https://github.com/code-423n4/2021-12-nftx-findings/issues/11) _Submitted by csanuragjain_\n- [[G-24] Unnecessary assignment of 0 to an uninitialized variable](https://github.com/code-423n4/2021-12-nftx-findings/issues/53) _Submitted by Ruhum_\n- [[G-25] Gas saving by storing modulesCopy.length in local variable](https://github.com/code-423n4/2021-12-nftx-findings/issues/5) _Submitted by csanuragjain_\n- [[G-26] Store totalSupply() in variable](https://github.com/code-423n4/2021-12-nftx-findings/issues/119) _Submitted by sirhashalot_\n- [[G-27] Gas saving by using mapping instead of computeAddress](https://github.com/code-423n4/2021-12-nftx-findings/issues/7) _Submitted by csanuragjain_\n- [[G-28] Unnecessary check for a condition ](https://github.com/code-423n4/2021-12-nftx-findings/issues/49) _Submitted by ych18_\n- [[G-29] After Solidity 0.8.1, The Inline Assembly Contract Check Can Be replaced with the new function](https://github.com/code-423n4/2021-12-nftx-findings/issues/130) _Submitted by defsec_\n- [[G-30] Use a constant instead of block.timestamp for the deadline](https://github.com/code-423n4/2021-12-nftx-findings/issues/131) _Submitted by defsec_\n- [[G-31]  Use `calldata` instead of `memory` for function parameters](https://github.com/code-423n4/2021-12-nftx-findings/issues/132) _Submitted by defsec, also found by Dravee_\n- [[G-32] `> 0` can be replaced with `!= 0` for gas optimization](https://github.com/code-423n4/2021-12-nftx-findings/issues/176) _Submitted by defsec, also found by 0x0x0x, Dravee, and pedroais_\n- [[G-33] Gas Optimization: Use uint232 for `allocPoint`](https://github.com/code-423n4/2021-12-nftx-findings/issues/183) _Submitted by gzeon_\n- [[G-34] Gas Optimization: Use immutable to cache beaconhash](https://github.com/code-423n4/2021-12-nftx-findings/issues/187) _Submitted by gzeon_\n- [[G-35] isContract() code is duplicated in multiple files ](https://github.com/code-423n4/2021-12-nftx-findings/issues/48) _Submitted by jayjonah8_\n- [[G-36] Cache duplicate external calls](https://github.com/code-423n4/2021-12-nftx-findings/issues/167) _Submitted by pauliax_\n- [[G-37] Unused state variables](https://github.com/code-423n4/2021-12-nftx-findings/issues/169) _Submitted by pauliax, also found by GreyArt_\n- [[G-38] uint64 state variable is less efficient than uint256](https://github.com/code-423n4/2021-12-nftx-findings/issues/170) _Submitted by pauliax_\n- [[G-39] Use cached version of sushiRouter.WETH()](https://github.com/code-423n4/2021-12-nftx-findings/issues/171) _Submitted by pauliax, also found by cmichel_\n- [[G-40] Use unchecked math and cache values](https://github.com/code-423n4/2021-12-nftx-findings/issues/208) _Submitted by pauliax, also found by WatchPug_\n- [[G-41] Refactor `distribute()` logic](https://github.com/code-423n4/2021-12-nftx-findings/issues/120) _Submitted by sirhashalot_\n- [[G-42] Use bytes32 instead of string to save gas whenever possible](https://github.com/code-423n4/2021-12-nftx-findings/issues/20) _Submitted by robee_\n- [[G-43] Short the following require messages](https://github.com/code-423n4/2021-12-nftx-findings/issues/21) _Submitted by robee, also found by pauliax, sirhashalot, and WatchPug_\n- [[G-44] Storage double reading. Could save SLOAD](https://github.com/code-423n4/2021-12-nftx-findings/issues/22) _Submitted by robee, also found by WatchPug_\n- [[G-45] Unnecessary array boundaries check when loading an array element twice](https://github.com/code-423n4/2021-12-nftx-findings/issues/25) _Submitted by robee_\n- [[G-46] Importing unused contract](https://github.com/code-423n4/2021-12-nftx-findings/issues/180) _Submitted by saian_\n- [[G-47] provideInventory1155 assumes tokenIds.length == amounts.length](https://github.com/code-423n4/2021-12-nftx-findings/issues/117) _Submitted by sirhashalot_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}