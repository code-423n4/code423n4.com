{
  "circa": {
    "title": "Sushi Trident contest phase 2",
    "sponsor": "Sushi",
    "slug": "2021-09-sushitrident-2",
    "date": "2021-11-30",
    "findings": "https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues",
    "contest": 35
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Sushi Trident smart contract system written in Solidity. The code contest took place between September 30—October 6 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>8 Wardens contributed reports to the Sushi Trident contest  (phase 2):</p>\n<ol>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li>broccoli (<a href=\"https://github.com/x9453\">shw</a> and <a href=\"https://twitter.com/jonah1005w\">jonah1005</a>)</li>\n<li><a href=\"https://github.com/0xsanson\">0xsanson</a></li>\n<li><a href=\"https://twitter.com/HickupH\">hickuphh3</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/alcueca\">Alberto Cuesta Cañada</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/money_lego\">moneylegobatman</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 47 unique vulnerabilities and 63 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 17 received a risk rating in the category of HIGH severity, 7 received a risk rating in the category of MEDIUM severity, and 23 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 9 non-critical recommendations and 7 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The linkscode under review can be found within the <a href=\"https://github.com/code-423n4/2021-09-sushitrident-2\">C4 Sushi Trident contest (phase 2) repository</a>, and is composed of 12 smart contracts written in the Solidity programming language.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-17\" style=\"position:relative;\"><a href=\"#high-risk-findings-17\" aria-label=\"high risk findings 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (17)</h1>\n<h2 id=\"h-01-unsafe-cast-in-concentratedliquiditypoolburn-leads-to-attack\" style=\"position:relative;\"><a href=\"#h-01-unsafe-cast-in-concentratedliquiditypoolburn-leads-to-attack\" aria-label=\"h 01 unsafe cast in concentratedliquiditypoolburn leads to attack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/50\">[H-01] Unsafe cast in <code>ConcentratedLiquidityPool.burn</code> leads to attack</a></h2>\n<p><em>Submitted by cmichel, also found by broccoli</em></p>\n<p>The <code>ConcentratedLiquidityPool.burn</code> function performs an unsafe cast of a <code>uint128</code> type to a <em>signed</em> integer.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount0fees</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount1fees</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">_updatePosition</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">lower</span><span class=\"mtk1\">, </span><span class=\"mtk12\">upper</span><span class=\"mtk1\">, -</span><span class=\"mtk11\">int128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p>Note that <code>amount</code> is chosen by the caller and when choosing <code>amount = 2**128 - 1</code>, this is interpreted as <code>0xFFFFFFFFF... = -1</code> as a signed integer. Thus <code>-(-1)=1</code> adds 1 liquidity unit to the position</p>\n<p>This allows an attacker to not only mint LP tokens for free but as this is the <code>burn</code> function it also redeems token0/1 amounts according to the unmodified <code>uint128</code> <code>amount</code> which is an extremely large value.</p>\n<h4 id=\"poc\" style=\"position:relative;\"><a href=\"#poc\" aria-label=\"poc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POC</h4>\n<p>I created this POC that implements a hardhat test and shows how to steal the pool tokens.</p>\n<p>Choosing the correct <code>amount</code> of liquidity to burn and <code>lower, upper</code> ticks is not straight-forward because of two competing constraints:</p>\n<ol>\n<li>the <code>-int128(amount)</code> must be less than <code>MAX_TICK_LIQUIDITY</code> (see <code>_updatePosition</code>). This drives the the <code>amount</code> up to its max value (as the max <code>uint128</code> value is -1 => -(-1)=1 is very low)</li>\n<li>The redeemed <code>amount0, amount1</code> values must be less than the current pool balance as the transfers would otherwise fail. This drives the <code>amount</code> down. However, by choosing a smart <code>lower</code> and <code>upper</code> tick range we can redeem fewer tokens for the same liquidity.</li>\n</ol>\n<p><a href=\"https://gist.github.com/MrToph/1731dd6947073343cf6f942985d556a6\">This example</a> shows how to steal 99% of the <code>token0</code> pool reserves:</p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>An attacker can steal the pool tokens.</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Even though Solidity 0.8.x is used, type casts do not throw an error.\nA <a href=\"https://docs.openzeppelin.com/contracts/4.x/api/utils#SafeCast\"><code>SafeCast</code> library</a> must be used everywhere a typecast is done.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/50\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<h2 id=\"h-02-wrong-usage-of-positionid-in-concentratedliquiditypoolmanager\" style=\"position:relative;\"><a href=\"#h-02-wrong-usage-of-positionid-in-concentratedliquiditypoolmanager\" aria-label=\"h 02 wrong usage of positionid in concentratedliquiditypoolmanager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/86\">[H-02] Wrong usage of <code>positionId</code> in <code>ConcentratedLiquidityPoolManager</code></a></h2>\n<p><em>Submitted by broccoli, also found by 0xsanson, cmichel, hickuphh3, and pauliax</em></p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>In the <code>subscribe</code> function of <code>ConcentratedLiquidityPoolManager</code>, the <code>incentive</code> to subscribed is determined as follows:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">Incentive</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">incentive</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">incentives</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">][</span><span class=\"mtk12\">positionId</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<p>However, <code>positionId</code> should be <code>incentiveId</code>, a counter that increases by one whenever a new incentive is added to the pool. The usage of <code>positionId</code> could cause the wrong incentive to be used, and in general, the incentive is not found, and the transaction reverts (the condition <code>block.timestamp &#x3C; incentive.endTime</code> is not met). The <code>getReward</code> and <code>claimReward</code> functions have the bug of misusing <code>positionId</code> as the index of incentives.</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Referenced code:</p>\n<ul>\n<li><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L68\">ConcentratedLiquidityPoolManager.sol#L68</a></li>\n<li><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L87\">ConcentratedLiquidityPoolManager.sol#L87</a></li>\n<li><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L105\">ConcentratedLiquidityPoolManager.sol#L105</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Change <code>positionId</code> to <code>incentiveId</code> in the referenced lines of code.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/86#issuecomment-940846279\">sarangparikh22 (Sushi) confirmed but disagreed with severity</a></strong></p>\n<h2 id=\"h-03-concentratedliquiditypoolmanagers-incentives-can-be-stolen\" style=\"position:relative;\"><a href=\"#h-03-concentratedliquiditypoolmanagers-incentives-can-be-stolen\" aria-label=\"h 03 concentratedliquiditypoolmanagers incentives can be stolen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/37\">[H-03] <code>ConcentratedLiquidityPoolManager</code>’s incentives can be stolen</a></h2>\n<p><em>Submitted by cmichel, also found by broccoli, hickuphh3, pauliax, and WatchPug</em></p>\n<p>The <code>ConcentratedLiquidityPoolManager</code> keeps all tokens for all incentives in the same contract. The <code>reclaimIncentive</code> function does not reduce the <code>incentive.rewardsUnclaimed</code> field and thus one can reclaim tokens several times.\nThis allows anyone to steal all tokens from all incentives by creating an incentive themself, and once it’s expired, repeatedly claim the unclaimed rewards until the token balance is empty.</p>\n<h4 id=\"poc-1\" style=\"position:relative;\"><a href=\"#poc-1\" aria-label=\"poc 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POC</h4>\n<ul>\n<li>Attacker creates an incentive for a non-existent pool using a random address for <code>pool</code> (This is done such that no other user can claim rewards as we need a non-zero <code>rewardsUnclaimed</code> balance for expiry). They choose the <code>incentive.token</code> to be the token they want to steal from other incentives. (for example, <code>WETH</code>, <code>USDC</code>, or <code>SUSHI</code>) They choose the <code>startTime, endTime, expiry</code> such that the checks pass, i.e., starting and ending in a few seconds from now, expiring in 5 weeks. Then they choose a non-zero <code>rewardsUnclaimed</code> and transfer the <code>incentive.token</code> to the <code>PoolManager</code>.</li>\n<li>Attacker waits for 5 weeks until the incentive is expired</li>\n<li>Attacker can now call <code>reclaimIncentive(pool, incentiveId, amount=incentive.rewardsUnclaimed, attacker, false)</code> to withdraw <code>incentive.rewardsUnclaimed</code> of <code>incentive.token</code> from the pool manager.</li>\n<li>As the <code>incentive.rewardsUnclaimed</code> variable has not been decreased, they can keep calling <code>reclaimIncentive</code> until the pool is drained.</li>\n</ul>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>An attacker can steal all tokens in the <code>PoolManager</code>.</p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>In <code>reclaimIncentive</code>, reduce <code>incentive.rewardsUnclaimed</code> by the withdrawn <code>amount</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/37\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<h2 id=\"h-04-overflow-in-the-mint-function-of-concentratedliquiditypool-causes-lps-funds-to-be-stolen\" style=\"position:relative;\"><a href=\"#h-04-overflow-in-the-mint-function-of-concentratedliquiditypool-causes-lps-funds-to-be-stolen\" aria-label=\"h 04 overflow in the mint function of concentratedliquiditypool causes lps funds to be stolen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/84\">[H-04] Overflow in the <code>mint</code> function of <code>ConcentratedLiquidityPool</code> causes LPs’ funds to be stolen</a></h2>\n<p><em>Submitted by broccoli</em></p>\n<h4 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Similar to a previous finding in the <code>IndexPool</code> contract, the <code>mint</code> function of <code>ConcentratedLiquidityPool</code> allows integer overflows when checking the balance is larger or equal to the received amount of token plus the reserve. As a result, the attacker could get a large amount of liquidity but only provide a small number of tokens to the pool, effectively stealing other LPs’ funds when burning his liquidity.</p>\n<p>Notice that this bug is independent of another bug of incorrect casting <code>uint256</code> type to <code>uint128</code> in the <code>_getAmountsForLiquidity</code> function. Even if the previously mentioned bug does not exist, the attacker could still steal the funds in the pool by exploiting this bug.</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Suppose that the current price is at the tick <code>500000</code>, an attacker calls the <code>mint</code> function with the following parameters:</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">mintParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lower</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">100000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">mintParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">upper</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">500000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">mintParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount1Desired</span><span class=\"mtk1\"> = (</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> &lt;&lt; </span><span class=\"mtk7\">128</span><span class=\"mtk1\">) - </span><span class=\"mtk7\">47541305835</span><span class=\"mtk1\"> # </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk12\">carefully</span><span class=\"mtk1\"> </span><span class=\"mtk12\">chosen</span><span class=\"mtk1\"> </span><span class=\"mtk12\">number</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">mintParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount0Desired</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span></span></span></code></pre>\n<ol start=\"2\">\n<li>Since the current price is equal to the upper price, we have</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_liquidity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">mintParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount1Desired</span><span class=\"mtk1\"> * (</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> &lt;&lt; </span><span class=\"mtk7\">96</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// (priceUpper - priceLower)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    = </span><span class=\"mtk7\">4731732988155153573010127839</span></span></span></code></pre>\n<ol start=\"3\">\n<li>The amounts of <code>token0</code> and <code>token1</code> that the attacker has to pay is</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">amount0Actual</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">amount1Actual</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">DyDxMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getDy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_liquidity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">priceLower</span><span class=\"mtk1\">, </span><span class=\"mtk12\">priceUpper</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    = </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_liquidity</span><span class=\"mtk1\"> * (</span><span class=\"mtk12\">priceUpper</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">priceLower</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// (1 &lt;&lt; 96)) # round up</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    = </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk7\">340282366920938463463374607384226905622</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    = </span><span class=\"mtk7\">340282366920938463463374607384226905622</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    = (</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> &lt;&lt; </span><span class=\"mtk7\">128</span><span class=\"mtk1\">) - </span><span class=\"mtk7\">47541305834</span></span></span></code></pre>\n<ol start=\"4\">\n<li>As long as <code>reserve1</code> is greater than <code>47541305834</code>, the addition <code>amount1Actual + reserve1</code> overflows to a small number, causing the attacker to pass the balance check.</li>\n</ol>\n<p>Referenced code:</p>\n<ul>\n<li><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L204\">ConcentratedLiquidityPool.sol#L204</a></li>\n<li><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L209\">ConcentratedLiquidityPool.sol#L209</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider removing the <code>unchecked</code> statement to check for integer overflow or casting both <code>amount1Actual</code> and <code>reserve1</code> to type <code>uint256</code> before adding them and comparing to the <code>_balance(token)</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/84#issuecomment-954231077\">sarangparikh22 (Sushi) disputed</a>:</strong></p>\n<blockquote>\n<p>The example is wrong, you can’t add use upper tick as odd, correct the example and resubmit please.</p>\n</blockquote>\n<h2 id=\"h-05-incorrect-usage-of-typecasting-in-_getamountsforliquidity-lets-an-attacker-steal-funds-from-the-pool\" style=\"position:relative;\"><a href=\"#h-05-incorrect-usage-of-typecasting-in-_getamountsforliquidity-lets-an-attacker-steal-funds-from-the-pool\" aria-label=\"h 05 incorrect usage of typecasting in _getamountsforliquidity lets an attacker steal funds from the pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/83\">[H-05] Incorrect usage of typecasting in <code>_getAmountsForLiquidity</code> lets an attacker steal funds from the pool</a></h2>\n<p><em>Submitted by broccoli</em></p>\n<h4 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>_getAmountsForLiquidity</code> function of <code>ConcentratedLiquidityPool</code> explicitly converts the result of <code>DyDxMath.getDy</code> and <code>DyDxMath.getDx</code> from type <code>uint256</code> to type <code>uint128</code>. The explicit casting without checking whether the integer exceeds the maximum number (i.e., <code>type(uint128).max</code>) could cause incorrect results being used. Specifically, an attacker could exploit this bug to mint a large amount of liquidity but only pay a little of <code>token0</code> or <code>token1</code> to the pool and effectively steal other’s funds when burning his liquidity.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Suppose that the current price is at the tick <code>500000</code>, an attacker calls the <code>mint</code> function with the following parameters:</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">mintParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lower</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">100000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">mintParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">upper</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">500000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">mintParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount1Desired</span><span class=\"mtk1\"> = (</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> &lt;&lt; </span><span class=\"mtk7\">128</span><span class=\"mtk1\">) + </span><span class=\"mtk7\">71914955423</span><span class=\"mtk1\"> # </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk12\">carefully</span><span class=\"mtk1\"> </span><span class=\"mtk12\">chosen</span><span class=\"mtk1\"> </span><span class=\"mtk12\">number</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">mintParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount0Desired</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span></span></span></code></pre>\n<ol start=\"2\">\n<li>Since the current price is equal to the upper price, we have</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_liquidity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">mintParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount1Desired</span><span class=\"mtk1\"> * (</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> &lt;&lt; </span><span class=\"mtk7\">96</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// (priceUpper - priceLower)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    = </span><span class=\"mtk7\">4731732988155153573010127840</span></span></span></code></pre>\n<ol start=\"3\">\n<li>The amounts of <code>token0</code> and <code>token1</code> that the attacker has to pay is</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">amount0Actual</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">amount1Actual</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">DyDxMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getDy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_liquidity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">priceLower</span><span class=\"mtk1\">, </span><span class=\"mtk12\">priceUpper</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    = </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_liquidity</span><span class=\"mtk1\"> * (</span><span class=\"mtk12\">priceUpper</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">priceLower</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// (1 &lt;&lt; 96)) # round up</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    = </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk7\">340282366920938463463374607456141861046</span><span class=\"mtk1\">)             # </span><span class=\"mtk12\">exceed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">max</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    = </span><span class=\"mtk7\">24373649590</span><span class=\"mtk1\">                                                  # </span><span class=\"mtk12\">truncated</span></span></span></code></pre>\n<ol start=\"4\">\n<li>The attacker only pays <code>24373649590</code> of <code>token1</code> to get <code>4731732988155153573010127840</code> of the liquidity, which he could burn to get more <code>token1</code>. As a result, the attacker is stealing the funds from the pool and could potentially drain it.</li>\n</ol>\n<p>Referenced code:</p>\n<ul>\n<li><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L480\">ConcentratedLiquidityPool.sol#L480</a></li>\n<li><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/libraries/concentratedPool/DyDxMath.sol#L15\">concentratedPool/DyDxMath.sol#L15</a></li>\n<li><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/libraries/concentratedPool/DyDxMath.sol#L30\">concentratedPool/DyDxMath.sol#L30</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Check whether the result of <code>DyDxMath.getDy</code> or <code>DyDxMath.getDx</code> exceeds <code>type(uint128).max</code> or not. If so, then revert the transaction. Or consider using the <a href=\"https://docs.openzeppelin.com/contracts/3.x/api/utils#SafeCast\"><code>SafeCast</code> library</a> from OpenZeppelin instead.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/83#issuecomment-954233068\">sarangparikh22 (Sushi) disputed</a>:</strong></p>\n<blockquote>\n<p>The example is wrong, you can’t add use upper tick as odd, correct the example and resubmit please.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/83#issuecomment-967016368\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@sarangparikh22 (Sushi), could you confirm whether the casting to uint128 is known to be safe? Are you unconvinced of the issue?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/83#issuecomment-970807633\">sarangparikh22 (Sushi) confirmed</a>:</strong></p>\n<blockquote>\n<p>@alcueca (judge) I can confirm casting to uint128 is not safe, and will lead to overflow. However, the example mentioned is wrong.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/83#issuecomment-972587273\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Understood. I will uphold the severity 3 because the overflow happens in a critical function for the management of funds and an incorrect execution will likely lead to loss of funds.</p>\n</blockquote>\n<h2 id=\"h-06-concentratedliquiditypositionsolcollect-users-may-get-double-the-amount-of-yield-when-they-call-collect-before-burn\" style=\"position:relative;\"><a href=\"#h-06-concentratedliquiditypositionsolcollect-users-may-get-double-the-amount-of-yield-when-they-call-collect-before-burn\" aria-label=\"h 06 concentratedliquiditypositionsolcollect users may get double the amount of yield when they call collect before burn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/53\">[H-06] <code>ConcentratedLiquidityPosition.sol#collect()</code> Users may get double the amount of yield when they call <code>collect()</code> before <code>burn()</code></a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>When a user calls <code>ConcentratedLiquidityPosition.sol#collect()</code> to collect their yield, it calcuates the yield based on <code>position.pool.rangeFeeGrowth()</code> and <code>position.feeGrowthInside0, position.feeGrowthInside1</code>:</p>\n<p><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPosition.sol#L75-L101\"><code>ConcentratedLiquidityPosition.sol#L75</code> L101</a></p>\n<p>When there are enough tokens in <code>bento.balanceOf</code>, it will not call <code>position.pool.collect()</code> to collect fees from the pool.</p>\n<p>This makes the user who <code>collect()</code> their yield when there is enough balance to get double yield when they call <code>burn()</code> to remove liquidity. Because <code>burn()</code> will automatically collect fees on the pool contract.</p>\n<h4 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The yield belongs to other users will be diluted.</p>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider making <code>ConcentratedLiquidityPosition.sol#burn()</code> call <code>position.pool.collect()</code> before <code>position.pool.burn()</code>. User will need to call <code>ConcentratedLiquidityPosition.sol#collect()</code> to collect unclaimed fees after <code>burn()</code>.</p>\n<p>Or <code>ConcentratedLiquidityPosition.sol#collect()</code> can be changed into a <code>public</code> method and <code>ConcentratedLiquidityPosition.sol#burn()</code> can call it after <code>position.pool.burn()</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/53\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<h2 id=\"h-07-concentratedliquiditypositionsolburn-wrong-implementation-allows-attackers-to-steal-yield\" style=\"position:relative;\"><a href=\"#h-07-concentratedliquiditypositionsolburn-wrong-implementation-allows-attackers-to-steal-yield\" aria-label=\"h 07 concentratedliquiditypositionsolburn wrong implementation allows attackers to steal yield permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/52\">[H-07] <code>ConcentratedLiquidityPosition.sol#burn()</code> Wrong implementation allows attackers to steal yield</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>When a user calls <code>ConcentratedLiquidityPosition.sol#burn()</code> to burn their liquidity, it calls <code>ConcentratedLiquidityPool.sol#burn()</code> -> <code>_updatePosition()</code>:</p>\n<p><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L525-L553\"><code>ConcentratedLiquidityPool.sol#L525</code> L553</a></p>\n<p>The <code>_updatePosition()</code> function will return <code>amount0fees</code> and <code>amount1fees</code> of the whole position with the <code>lower</code> and <code>upper</code> tick and send them to the <code>recipient</code> alongside the burned liquidity amounts.</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Alice minted $10000 worth of liquidity with <code>lower</code> and <code>upper</code> tick set to 99 and 199;</li>\n<li>Alice accumulated $1000 worth of fee in token0 and token1;</li>\n<li>The attacker can mint a small amount ($1 worth) of liquidity using the same <code>lower</code> and <code>upper</code> tick;</li>\n<li>The attacker calls <code>ConcentratedLiquidityPosition.sol#burn()</code> to steal all the unclaimed yield with the ticks of (99, 199) include the $1000 worth of yield from Alice.</li>\n</ol>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider making <code>ConcentratedLiquidityPosition.sol#burn()</code> always use <code>address(this)</code> as <code>recipient</code> in:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lower</span><span class=\"mtk1\">, </span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">upper</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">unwrapBento</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p>and transfer proper amounts to the user.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/52\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<h2 id=\"h-08-wrong-inequality-when-addingremoving-liquidity-in-current-price-range\" style=\"position:relative;\"><a href=\"#h-08-wrong-inequality-when-addingremoving-liquidity-in-current-price-range\" aria-label=\"h 08 wrong inequality when addingremoving liquidity in current price range permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/34\">[H-08] Wrong inequality when adding/removing liquidity in current price range</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>ConcentratedLiquidityPool.mint/burn</code> functions add/remove <code>liquidity</code> when <code>(priceLower &#x3C; currentPrice &#x26;&#x26; currentPrice &#x3C; priceUpper)</code>.\nShouldn’t it also be changed if <code>priceLower == currentPrice</code>?</p>\n<h4 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Pools that mint/burn liquidity at a time where the <code>currentPrice</code> is right at the lower price range do not work correctly and will lead to wrong swap amounts.</p>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Change the inequalities to <code>if (priceLower &#x3C;= currentPrice &#x26;&#x26; currentPrice &#x3C; priceUpper)</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/34#issuecomment-942790793\">sarangparikh22 (Sushi) disputed</a>:</strong></p>\n<blockquote>\n<p>You shouldn’t be able to reach this, can you produce a POC?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/34#issuecomment-967792671\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@sarangparikh22 (Sushi), could you please elaborate on why this is not reachable?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/34#issuecomment-970749777\">sarangparikh22 (Sushi) confirmed</a>:</strong></p>\n<blockquote>\n<p>I confused this with another similar issue, my apologies, took a look at this, and this a valid issue, we should probably even bump the severity to Sev 3, not sure if I am allowed to do so haha, I created a PoC in which users can actually loose funds, when they add liquidity in that specific range. @alcueca (judge)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/34#issuecomment-972590913\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Sponsors are allowed to bump up severity, and I’ve done it myself in my past as a sponsor as well.</p>\n</blockquote>\n<h2 id=\"h-09-range-fee-growth-underflow\" style=\"position:relative;\"><a href=\"#h-09-range-fee-growth-underflow\" aria-label=\"h 09 range fee growth underflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/25\">[H-09] range fee growth underflow</a></h2>\n<p><em>Submitted by broccoli</em></p>\n<h4 id=\"impact-7\" style=\"position:relative;\"><a href=\"#impact-7\" aria-label=\"impact 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The function <code>RangeFeeGrowth</code> (<a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L601-L633\">ConcentratedLiquidityPool.sol#L601-L633</a>) would revert the transaction in some cases.</p>\n<p>When a pool cross a tick, it only updates either <code>feeGrowthOutside0</code> or <code>feeGrowthOutside1</code>. <a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/libraries/concentratedPool/Ticks.sol#L23-L53\">Ticks.sol#L23-L53</a></p>\n<p><code>RangeFeeGrowth</code> calculates the fee as follow:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">feeGrowthInside0</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_feeGrowthGlobal0</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">feeGrowthBelow0</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">feeGrowthAbove0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">feeGrowthInside1</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_feeGrowthGlobal1</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">feeGrowthBelow1</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">feeGrowthAbove1</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><code>feeGrowthBelow + feeGrowthAbove</code> is not necessary smaller than <code>_feeGrowthGlobal</code>. Please see <code>POC</code>.</p>\n<p>Users can not provide liquidity or burn liquidity. Fund will get stocked in the contract. I consider this is a high-risk issue.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"python\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># This is the wrapper.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># def add_liquidity(pool, amount, lower, upper)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># def swap(pool, buy, amount)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    add_liquidity(pool, deposit_amount, -</span><span class=\"mtk7\">800</span><span class=\"mtk1\">, </span><span class=\"mtk7\">500</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    add_liquidity(pool, deposit_amount, </span><span class=\"mtk7\">400</span><span class=\"mtk1\">, </span><span class=\"mtk7\">700</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># We cross the tick here to trigger the bug.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    swap(pool, </span><span class=\"mtk4\">False</span><span class=\"mtk1\">, deposit_amount)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># Only tick 700&#39;s feeGrowthOutside1 is updated</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    swap(pool, </span><span class=\"mtk4\">True</span><span class=\"mtk1\">, deposit_amount)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># Only tick 500&#39;s feeGrowthOutside0 is updated</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># current tick at -800</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># this would revert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># feeGrowthBelow1 = feeGrowthGlobal1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># feeGrowthGlobal1 - feeGrowthBelow1 - feeGrowthAbove1 would revert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># user would not be able to mint/withdraw/cross this tick. The pool is broken</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    add_liquidity(pool, deposit_amount, </span><span class=\"mtk7\">400</span><span class=\"mtk1\">, </span><span class=\"mtk7\">700</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Hardhat</p>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>It’s either modify the tick’s algo or <code>RangeFeeGrowth</code>. The quick-fix I come up with is to deal with the fee in <code>RangeFeeGrowth</code>. However, I recommend the team to go through tick’s logic again.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/25#issuecomment-942800266\">sarangparikh22 (Sushi) disputed</a>:</strong></p>\n<blockquote>\n<p>The example is wrong, you can’t add use upper tick as odd, correct the example and resubmit please.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/25#issuecomment-967128882\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@sarangparikh22 (Sushi), is the example invalid, or the whole issue? Is this something that you would consider fixing?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/25#issuecomment-972242461\">sarangparikh22 (Sushi) confirmed</a>:</strong></p>\n<blockquote>\n<p>@alcueca (judge) The example is invalid, but the issue is valid, the fix is to swap the condition of feeGrowthGlobal</p>\n</blockquote>\n<h2 id=\"h-10-concentratedliquiditypoolburn-wrong-implementation\" style=\"position:relative;\"><a href=\"#h-10-concentratedliquiditypoolburn-wrong-implementation\" aria-label=\"h 10 concentratedliquiditypoolburn wrong implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/24\">[H-10] <code>ConcentratedLiquidityPool.burn()</code> Wrong implementation</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>The reserves should be updated once LP tokens are burned to match the actual total bento shares hold by the pool.</p>\n<p>However, the current implementation only updated reserves with the fees subtracted.</p>\n<p>Makes the <code>reserve0</code> and <code>reserve1</code> smaller than the current <code>balance0</code> and <code>balance1</code>.</p>\n<h4 id=\"impact-8\" style=\"position:relative;\"><a href=\"#impact-8\" aria-label=\"impact 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>As a result, many essential features of the contract will malfunction, includes <code>swap()</code> and <code>mint()</code>.</p>\n<h4 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L263-L267\"><code>ConcentratedLiquidityPool.sol#L263</code> L267</a>\nChange:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">reserve0</span><span class=\"mtk1\"> -= </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount0fees</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">reserve1</span><span class=\"mtk1\"> -= </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount1fees</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">reserve0</span><span class=\"mtk1\"> -= </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">reserve1</span><span class=\"mtk1\"> -= </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/24\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<h2 id=\"h-11-concentratedliquiditypool-incorrect-feegrowthglobal-accounting-when-crossing-ticks\" style=\"position:relative;\"><a href=\"#h-11-concentratedliquiditypool-incorrect-feegrowthglobal-accounting-when-crossing-ticks\" aria-label=\"h 11 concentratedliquiditypool incorrect feegrowthglobal accounting when crossing ticks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/16\">[H-11] ConcentratedLiquidityPool: incorrect <code>feeGrowthGlobal</code> accounting when crossing ticks</a></h2>\n<p><em>Submitted by hickuphh3</em></p>\n<h5 id=\"impact-9\" style=\"position:relative;\"><a href=\"#impact-9\" aria-label=\"impact 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h5>\n<p>Swap fees are taken from the output. Hence, if swapping token0 for token1 (<code>zeroForOne</code> is true), then fees are taken in token1. We see this to be the case in the initialization of <code>feeGrowthGlobal</code> in the swap cache</p>\n<p><code>feeGrowthGlobal = zeroForOne ? feeGrowthGlobal1 : feeGrowthGlobal0;</code></p>\n<p>and in <code>_updateFees()</code>.</p>\n<p>However, looking at <code>Ticks.cross()</code>, the logic is the reverse, which causes wrong fee accounting.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">zeroForOne</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">ticks</span><span class=\"mtk1\">[</span><span class=\"mtk12\">nextTickToCross</span><span class=\"mtk1\">].</span><span class=\"mtk12\">feeGrowthOutside0</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">feeGrowthGlobal</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">ticks</span><span class=\"mtk1\">[</span><span class=\"mtk12\">nextTickToCross</span><span class=\"mtk1\">].</span><span class=\"mtk12\">feeGrowthOutside0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">ticks</span><span class=\"mtk1\">[</span><span class=\"mtk12\">nextTickToCross</span><span class=\"mtk1\">].</span><span class=\"mtk12\">feeGrowthOutside1</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">feeGrowthGlobal</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">ticks</span><span class=\"mtk1\">[</span><span class=\"mtk12\">nextTickToCross</span><span class=\"mtk1\">].</span><span class=\"mtk12\">feeGrowthOutside1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h5 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h5>\n<p>Switch the <code>0</code> and <code>1</code> in <code>Ticks.cross()</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">zeroForOne</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// `feeGrowthGlobal` = feeGrowthGlobal1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">ticks</span><span class=\"mtk1\">[</span><span class=\"mtk12\">nextTickToCross</span><span class=\"mtk1\">].</span><span class=\"mtk12\">feeGrowthOutside1</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">feeGrowthGlobal</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">ticks</span><span class=\"mtk1\">[</span><span class=\"mtk12\">nextTickToCross</span><span class=\"mtk1\">].</span><span class=\"mtk12\">feeGrowthOutside1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// feeGrowthGlobal = feeGrowthGlobal0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">ticks</span><span class=\"mtk1\">[</span><span class=\"mtk12\">nextTickToCross</span><span class=\"mtk1\">].</span><span class=\"mtk12\">feeGrowthOutside0</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">feeGrowthGlobal</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">ticks</span><span class=\"mtk1\">[</span><span class=\"mtk12\">nextTickToCross</span><span class=\"mtk1\">].</span><span class=\"mtk12\">feeGrowthOutside0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/16\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<h2 id=\"h-12-concentratedliquiditypool-secondsperliquidity-should-be-modified-whenever-pool-liquidity-changes\" style=\"position:relative;\"><a href=\"#h-12-concentratedliquiditypool-secondsperliquidity-should-be-modified-whenever-pool-liquidity-changes\" aria-label=\"h 12 concentratedliquiditypool secondsperliquidity should be modified whenever pool liquidity changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/15\">[H-12] <code>ConcentratedLiquidityPool</code>: <code>secondsPerLiquidity</code> should be modified whenever pool liquidity changes</a></h2>\n<p><em>Submitted by hickuphh3</em></p>\n<h5 id=\"impact-10\" style=\"position:relative;\"><a href=\"#impact-10\" aria-label=\"impact 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h5>\n<p><code>secondsPerLiquidity</code> is updated as such: <code>secondsPerLiquidity += uint160((diff &#x3C;&#x3C; 128) / liquidity);</code> where <code>diff = timestamp - uint256(lastObservation)</code>. Hence, whenever liquidity changes, <code>secondsPerLiquidity</code> should be updated prior to the change.</p>\n<p>In particular, this affects the <code>mint()</code> and <code>burn()</code> functions, in the case where liquidity changes when <code>lowerTick &#x3C;= currentTick &#x3C; upperTick</code>.</p>\n<p>In fact, the latest <code>secondsPerLiquidity</code> value should be calculated and used in <code>Ticks.insert()</code>. For comparison, notice how UniswapV3 fetches the latest value by calling <code>observations.observeSingle()</code> in its <code>_updatePosition()</code> function.</p>\n<h5 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h5>\n<p>The <code>secondsPerLiquidity</code> increment logic should be applied prior to liquidity addition in <code>mint()</code> and removal in <code>burn()</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// insert logic before these lines in mint()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">priceLower</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">currentPrice</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">currentPrice</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">priceUpper</span><span class=\"mtk1\">) </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> += </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_liquidity</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">nearestTick</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Ticks</span><span class=\"mtk1\">.</span><span class=\"mtk11\">insert</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">ticks</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">feeGrowthGlobal0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">feeGrowthGlobal1</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">secondsPerLiquidity</span><span class=\"mtk1\">, </span><span class=\"mtk3\">// should calculate and use latest secondsPerLiquidity value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// insert logic before before these lines in burn()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">priceLower</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">currentPrice</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">currentPrice</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">priceUpper</span><span class=\"mtk1\">) </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/15#issuecomment-954274917\">sarangparikh22 (Sushi) disputed</a>:</strong></p>\n<blockquote>\n<p>The secondsPerLiquidity is same, changing the order of that will not affect anything, since it is not getting calculated at the mint or burn function.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/15#issuecomment-967159284\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@sarangparikh22 (Sushi), could you please elaborate on why this isn’t an issue?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/15#issuecomment-970862817\">sarangparikh22 (Sushi) confirmed</a>:</strong></p>\n<blockquote>\n<p>@alcueca (judge) my apologies, this is an issue. I could confirm this.</p>\n</blockquote>\n<h2 id=\"h-13-burning-does-not-update-reserves\" style=\"position:relative;\"><a href=\"#h-13-burning-does-not-update-reserves\" aria-label=\"h 13 burning does not update reserves permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/51\">[H-13] Burning does not update reserves</a></h2>\n<p><em>Submitted by cmichel, also found by 0xsanson, broccoli, and pauliax</em></p>\n<p>The <code>ConcentratedLiquidityPool.burn</code> function sends out <code>amount0</code>/<code>amount1</code> tokens but only updates the reserves by decreasing it by the <strong>fees of these amounts</strong>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// @audit decreases by fees only, not by amount0/amount1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">reserve0</span><span class=\"mtk1\"> -= </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount0fees</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">reserve1</span><span class=\"mtk1\"> -= </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount1fees</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>This leads to the pool having wrong reserves after any <code>burn</code> action.\nThe pool’s balance will be much lower than the reserve variables.</p>\n<h4 id=\"impact-11\" style=\"position:relative;\"><a href=\"#impact-11\" aria-label=\"impact 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>As the pool’s actual balance will be much lower than the reserve variables, <code>mint</code>ing and <code>swap</code>ing will not work correctly either.\nThis is because of the <code>amount0Actual + reserve0 &#x3C;= _balance(token0)</code> check in <code>mint</code> using a much higher <code>reserve0</code> amount than the actual balance (already including the transferred assets from the user). An LP provider will have to make up for the missing reserve decrease from <code>burn</code> and pay more tokens.</p>\n<p>The same holds true for <code>swap</code> which performs the same check in <code>_updateReserves</code>.</p>\n<p>The pool essentially becomes unusable after a <code>burn</code> as LPs / traders need to pay more tokens.</p>\n<h4 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The reserve should be decreased by what is transferred out. In <code>burn</code>’s case this is <code>amount0</code> / <code>amount1</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/51\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<h2 id=\"h-14-concentratedliquiditypool-rangefeegrowth-and-secondsperliquidity-math-needs-to-be-unchecked\" style=\"position:relative;\"><a href=\"#h-14-concentratedliquiditypool-rangefeegrowth-and-secondsperliquidity-math-needs-to-be-unchecked\" aria-label=\"h 14 concentratedliquiditypool rangefeegrowth and secondsperliquidity math needs to be unchecked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/13\">[H-14] <code>ConcentratedLiquidityPool</code>: <code>rangeFeeGrowth</code> and <code>secondsPerLiquidity</code> math needs to be unchecked</a></h2>\n<p><em>Submitted by hickuphh3</em></p>\n<h5 id=\"impact-12\" style=\"position:relative;\"><a href=\"#impact-12\" aria-label=\"impact 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h5>\n<p>The fee growth mechanism, and by extension, <code>secondsPerLiquidity</code> mechanism of Uniswap V3 has the ability to underflow. It is therefore a necessity for the math to (ironically) be unsafe / unchecked.</p>\n<h5 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h5>\n<p>Assume the following scenario and initial conditions:</p>\n<ul>\n<li>Price at parity (nearestTick is 0)</li>\n<li>tickSpacing of 10</li>\n<li>Swaps only increase the price (nearestTick moves up only)</li>\n<li><code>feeGrowthGlobal</code> initializes with 0, increases by 1 for every tick moved for simplicity</li>\n<li>Existing positions that provide enough liquidity and enable nearestTick to be set to values in the example</li>\n<li>Every tick initialized in the example is ≤ nearestTick, so that its <code>feeGrowthOutside</code> = <code>feeGrowthGlobal</code></li>\n<li>When nearestTick is at 40, Alice creates a position for uninitialised ticks [-20, 30]. The ticks are initialized, resulting in their <code>feeGrowthOutside</code> values to be set to 40.</li>\n<li>nearestTick moves to 50. Bob creates a position with ticks [20, 30] (tick 20 is uninitialised, 30 was initialized from Alice’s mint). tick 20 will therefore have a <code>feeGrowthOutside</code> of 50.</li>\n<li>\n<p>Let us calculate <code>rangeFeeGrowth(20,30)</code>.</p>\n<ul>\n<li>lowerTick = 20, upperTick = 30</li>\n<li>feeGrowthBelow = 50 (lowerTick’s <code>feeGrowthOutside</code>) since lowerTick &#x3C; currentTick</li>\n<li>feeGrowthAbove = 50 - 40 = 10 (feeGrowthGlobal - upperTick’s <code>feeGrowthOutside</code>) since upperTick &#x3C; currentTick</li>\n<li>\n<p>feeGrowthInside</p>\n<p>= feeGrowthGlobal - feeGrowthBelow - feeGrowthAbove</p>\n<p>= 50 - 50 - 10</p>\n<p>= -10</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>We therefore have negative <code>feeGrowthInside</code>.</p>\n<p>This behaviour is actually acceptable, because the important thing about this mechanism is the relative values to each other, not the absolute values themselves.</p>\n<h5 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h5>\n<p><code>rangeFeeGrowth()</code> and <code>rangeSecondsInside()</code> has to be unchecked. In addition, the subtraction of <code>feeGrowthInside</code> values should also be unchecked in <code>_updatePosition()</code> and <code>ConcentratedLiquidityPosition#collect()</code>.</p>\n<p>The same also applies for the subtraction of <code>pool.rangeSecondsInside</code> and <code>stake.secondsInsideLast</code> in <code>claimReward()</code> and <code>getReward()</code> of the <code>ConcentratedLiquidityPoolManager</code> contract.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/13#issuecomment-962142019\">sarangparikh22 (Sushi) disputed</a>:</strong></p>\n<blockquote>\n<p>Can you give more elaborate example.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/13#issuecomment-967134083\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@sarangparikh22 (Sushi), I find the example quite elaborate. It shows an specific example in which underflow is desired, by comparing with other platform using similar mechanics. It explains that with your current implementation you can’t have negative <code>feeGrowthInside</code>, which is a possible and acceptable scenario. Could you please elaborate on what your grounds are for disputing this finding?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/13#issuecomment-972200918\">sarangparikh22 (Sushi) confirmed</a>:</strong></p>\n<blockquote>\n<p>@alcueca (judge) Yes this a valid issue.</p>\n</blockquote>\n<h2 id=\"h-15-concentratedliquiditypool-initialprice-should-be-checked-to-be-within-allowable-range\" style=\"position:relative;\"><a href=\"#h-15-concentratedliquiditypool-initialprice-should-be-checked-to-be-within-allowable-range\" aria-label=\"h 15 concentratedliquiditypool initialprice should be checked to be within allowable range permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/11\">[H-15] <code>ConcentratedLiquidityPool</code>: <code>initialPrice</code> should be checked to be within allowable range</a></h2>\n<p><em>Submitted by hickuphh3</em></p>\n<h5 id=\"impact-13\" style=\"position:relative;\"><a href=\"#impact-13\" aria-label=\"impact 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h5>\n<p>No check is performed for the initial price. This means that it can be set to be below the <code>MIN_SQRT_RATIO</code> or above <code>MAX_SQRT_RATIO</code> (Eg. zero value), which will prevent the usability of all other functions (minting, swapping, burning).</p>\n<p>For example, <code>Ticks.insert()</code> would fail when attempting to calculate <code>actualNearestTick = TickMath.getTickAtSqrtRatio(currentPrice);</code>, which means no one will be able to mint positions.</p>\n<h5 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h5>\n<p>Check the <code>initialPrice</code> is within the acceptable range, ie. <code>MIN_SQRT_RATIO &#x3C;= initialPrice &#x3C;= MAX_SQRT_RATIO</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/11\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<h2 id=\"h-16-possible-attacks-on-seconds--liquidity-calculation\" style=\"position:relative;\"><a href=\"#h-16-possible-attacks-on-seconds--liquidity-calculation\" aria-label=\"h 16 possible attacks on seconds  liquidity calculation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/8\">[H-16] Possible attacks on Seconds * Liquidity calculation</a></h2>\n<p>This is a possible line of attack on the staking contract, in particular the <code>claimReward()</code> function: <a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L90-L94\"><code>ConcentratedLiquidityPoolManager.sol#L90</code> L94</a></p>\n<ol>\n<li>A user with some spare capital mints a liquidity position with a very tight range (1-2 ticks wide) at the current price. Because the range is so small, his position.liquidity on his NFT is large (DyDxMath.sol).</li>\n<li>The user then sets up a bot to frontrun any price changes that someone else tries to do, burning his position after claiming rewards. He then mints a new liquidity position at the new price after the other persons trades go through.</li>\n<li>Rinse and repeat this process. If done correctly, no funds are at risk from the bot owner, he doesn’t pay any fees for burning/minting either.</li>\n</ol>\n<p>So what you have left is a sequence of positions with high position.liquidity and in the correct price range all the time, without taking on any risk. Thereby stealing incentive funds.</p>\n<p>The lines below reward the bot owner with a large amount of the token:</p>\n<p><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L90-L94\"><code>ConcentratedLiquidityPoolManager.sol#L90</code> L94</a>\nRecommendation:</p>\n<p>Lock the positions during a set time while they are staked.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/8#issuecomment-954283114\">sarangparikh22 (Sushi) disputed</a>:</strong></p>\n<blockquote>\n<p>This seems very unlikely to happen and does not affect the pool, it’s equivalent to just re balancing your position.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/8#issuecomment-967138536\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@sarangparikh22 (Sushi), Isn’t the warden describing a Just In Time liquidity pattern?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/8#issuecomment-970872759\">sarangparikh22 (Sushi) acknowledged</a>:</strong></p>\n<blockquote>\n<p>@alcueca (judge) yes exactly, even done right, the bot would still face huge IL. We don’t intend to solve this.</p>\n</blockquote>\n<h2 id=\"h-17-understanding-the-fee-growth-mechanism-why-nearesttick-is-unsuitable\" style=\"position:relative;\"><a href=\"#h-17-understanding-the-fee-growth-mechanism-why-nearesttick-is-unsuitable\" aria-label=\"h 17 understanding the fee growth mechanism why nearesttick is unsuitable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/1\">[H-17] Understanding the fee growth mechanism (why <code>nearestTick</code> is unsuitable)</a></h2>\n<p><em>Submitted by hickuphh3</em></p>\n<h4 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h4>\n<p>Uniswap V3’s whitepaper describes the fee growth mechanism, but the intuition behind it is not explained well (IMO). I’ve not been able to find any material that tries to describe it, so allow me the luxury of doing so. It is crucial to understand how it works, so that other issues regarding the fee growth variables (and by extension, secondsPerLiquidity) raised by fellow wardens / auditors are better understood by readers.</p>\n<h4 id=\"objective\" style=\"position:relative;\"><a href=\"#objective\" aria-label=\"objective permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Objective</h4>\n<p>We want a way to accurately track the fees accumulated by a position. Fees should only be given to the position it is active (the current tick / price is within the lower and upper ticks of the position).</p>\n<h4 id=\"feegrowthglobal\" style=\"position:relative;\"><a href=\"#feegrowthglobal\" aria-label=\"feegrowthglobal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>feeGrowthGlobal</h4>\n<p>Defined as the total amount of fees that would have been earned by 1 unit of unbounded liquidity that was deposited when the contract was first initialized. For simplicity, we can take this to be the range between <code>MIN_TICK</code> and <code>MAX_TICK</code>. We represent it visually like this:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// &lt;--------------------------------------------------------------------------&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// MIN_TICK                                                               MAX_TICK</span></span></span></code></pre>\n<h4 id=\"feegrowthoutside\" style=\"position:relative;\"><a href=\"#feegrowthoutside\" aria-label=\"feegrowthoutside permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>feeGrowthOutside</h4>\n<p>The fee growth per unit of liquidity on the <em>other</em> side of this tick (relative to the current tick). What does this mean?</p>\n<p>As defined, it is the fee growth <strong>relative</strong> to the current tick. Based on the convention, we define 2 cases:</p>\n<ul>\n<li>Case 1: initialized tick ≤ pool tick</li>\n<li>Case 2: Initialized tick > pool tick</li>\n</ul>\n<p>Visually, the feeGrowthOutside will look like this:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// CASE 1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// &lt;--------------------|--------------------|</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// MIN_TICK         INIT_TICK            POOL_TICK</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// &lt;-----------------------------------------|</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// MIN_TICK                        INIT_TICK = POOL_TICK</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// CASE 2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//                                           |--------------------|----------------&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//                                       POOL_TICK           INIT_TICK          MAX_TICK</span></span></span></code></pre>\n<p>Hence, regardless of whether the tick to initialize is either a lower or upper tick of a position, the <code>feeGrowthOutside</code> value that it is referring to is <strong>relatve</strong> to the pool tick.</p>\n<p>In other words, if initialized tick ≤ pool tick, then its <code>feeGrowthOutside</code> is towards <code>MIN_TICK</code>. Otherwise, its <code>feeGrowthOutside</code> is towards <code>MAX_TICK</code>.</p>\n<h5 id=\"initialization\" style=\"position:relative;\"><a href=\"#initialization\" aria-label=\"initialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initialization</h5>\n<p>By convention, when a tick is initialized, all fee growth is assumed to happen below it. Hence, the feeGrowthOutside is initialized to the following values:</p>\n<ul>\n<li>Case 1: tick’s feeGrowthOutside = feeGrowthGlobal</li>\n<li>Case 2: tick’s feeGrowthOtuside = 0</li>\n</ul>\n<h4 id=\"implications\" style=\"position:relative;\"><a href=\"#implications\" aria-label=\"implications permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implications</h4>\n<p>One should now understand why the <code>feeGrowthOutside</code> value is being flipped when crossing a tick, ie. <code>tick.feeGrowthOutside = feeGrowthGlobal - tick.feeGrowthOutside</code> in <code>Tick.cross()</code>, because it needs to follow the definition. (Case 1 becomes case 2 and vice versa).</p>\n<p>It should hopefully become clear why <strong>using <code>nearestTick</code> as the reference point for fee growth calculations instead of the pool tick might not a wise choice.</strong> (Case 1 and 2 becomes rather ambiguous).</p>\n<h4 id=\"range-fee-growth--feegrowthinside\" style=\"position:relative;\"><a href=\"#range-fee-growth--feegrowthinside\" aria-label=\"range fee growth  feegrowthinside permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Range fee growth / feeGrowthInside</h4>\n<p>Going back to our objective of calculating the fee growth accumulated for a position, we can break it down into 3 cases (take caution with the boundary cases), and understand how their values are calculated. In general, we take it to be feeGrowthGlobal - fee growth below lower tick - fee growth above upper tick (see illustrations), although it can be simplified further.</p>\n<ol>\n<li>\n<p>pool tick &#x3C; lower tick</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// ---------------------|---------------------|-----------------|-----------------</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//                  POOL_TICK            LOWER_TICK          UPPER_TICK</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// &lt;---------------------------- feeGrowthGlobal --------------------------------&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//       LOWER_TICK.feeGrowthOutside (CASE 2) |----------------------------------&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//                         UPPER_TICK.feeGrowthOutside (CASE 2) |----------------&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// we want the range between LOWER_TICK and UPPER_TICK</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// = LOWER_TICK.feeGrowthOutside - UPPER_TICK.feeGrowthOutside</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// alternatively, following the general formula, it is</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// = feeGrowthGLobal - fee growth below LOWER_TICK - fee growth above UPPER_TICK</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// = feeGrowthGlobal - (feeGrowthGlobal - LOWER_TICK.feeGrowthOutside) - UPPER_TICK.feeGrowthOtuside</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// = LOWER_TICK.feeGrowthOutside - UPPER_TICK.feeGrowthOutside</span></span></span></code></pre>\n</li>\n<li>\n<p>lower tick ≤ pool tick &#x3C; upper tick</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// ---------------------|---------------------|-----------------|-----------------</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//                  LOWER_TICK            POOL_TICK        UPPER_TICK</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// &lt;---------------------------- feeGrowthGlobal --------------------------------&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// &lt;--------------------| LOWER_TICK&#39;s feeGrowthOutside (CASE 1)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//                       UPPER_TICK&#39;s feeGrowthOutside (CASE 2) |----------------&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// we want the range between LOWER_TICK and UPPER_TICK</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// = feeGrowthGLobal - fee growth below LOWER_TICK - fee growth above UPPER_TICK</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// = feeGrowthGLobal - LOWER_TICK.feeGrowthOutside - UPPER_TICK.feeGrowthOutside</span></span></span></code></pre>\n</li>\n<li>\n<p>upper tick ≤ pool tick</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// ---------------------|---------------------|-----------------|-----------------</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//                  LOWER_TICK            POOL_TICK        UPPER_TICK</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// &lt;---------------------------- feeGrowthGlobal --------------------------------&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// &lt;--------------------| LOWER_TICK&#39;s feeGrowthOutside (CASE 1)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// &lt;------------------------------------------------------------| UPPER_TICK&#39;s feeGrowthOutside (CASE 1)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// we want the range between LOWER_TICK and UPPER_TICK</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// = UPPER_TICK.feeGrowthOutside - LOWER_TICK.feeGrowthOutside</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// alternatively, following the general formula, it is</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// = feeGrowthGLobal - fee growth below LOWER_TICK - fee growth above UPPER_TICK</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// = feeGrowthGLobal - LOWER_TICK.feeGrowthOutside - (feeGrowthGlobal - UPPER_TICK.feeGrowthOutside)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// = UPPER_TICK.feeGrowthOutside - LOWER_TICK.feeGrowthOutside</span></span></span></code></pre>\n</li>\n</ol>\n<h4 id=\"handling-the-boundary-case\" style=\"position:relative;\"><a href=\"#handling-the-boundary-case\" aria-label=\"handling the boundary case permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Handling The Boundary Case</h4>\n<p>An under appreciated, but very critical line of Uniswap V3’s pool contract is the following:</p>\n<p><code>state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;</code></p>\n<p>It serves a dual purpose:</p>\n<ol>\n<li>Because of how Tick Bitmap works, the tick needs to be manually decremented by 1 so that the next tick to be found is in the next word.</li>\n<li>More importantly, it handles the boundary case, where <code>zeroForOne</code> is true (pool tick goes down). In this scenario, case 1 becomes case 2 when the tick is crossed. However, should the poolTick after the swap be equal to <code>step.tickNext</code>, then when calculating fee growth inside a position that so happens to have <code>step.tickNext</code> as one of its ticks, it will be treated as case 1 (poolTick = lowerTick / upperTick) when it is required to be treated as case 2.</li>\n</ol>\n<h4 id=\"impact-14\" style=\"position:relative;\"><a href=\"#impact-14\" aria-label=\"impact 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Hopefully, this writeup helps readers understand the fee growth mechanism and its workings. More importantly, I hope it helps the team to understand why using <code>nearestTick</code> as the reference point for fee growth mechanism is unsuitable. Specifically, we have 2 high severity issues:</p>\n<ul>\n<li>\n<p>Wrong initialization value of <code>feeGrowthOutside</code> in the case either the lower or upper tick becomes the <code>nearestTick</code> upon insertion of a new tick.</p>\n<ul>\n<li>You are (in a sense) crossing the old nearestTick, so its <code>secondsPerLiquidityOutside</code> has to be flipped</li>\n<li>The lower / upper tick’s <code>feeGrowthOutside</code> is incorrectly initialized to be <code>0</code> when it should be <code>feeGrowthOutside</code></li>\n</ul>\n</li>\n<li>Case 1 and 2 becomes ambiguous. When a position is modified with either tick being <code>nearestTick</code>, it is treated to be case 1 when in fact there are times it should be treated as case 2.</li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-15\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-15\" aria-label=\"recommended mitigation steps 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Having a pool tick counter that closely matches the current pool price is rather critical for fee growth and seconds per liquidity initializations / calculations.</p>\n<p>Where relevant, the <code>nearestTick</code> should be replaced by <code>poolTick</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/1\">sarangparikh22 (Sushi) acknowledged</a></strong></p>\n<h1 id=\"medium-risk-findings-7\" style=\"position:relative;\"><a href=\"#medium-risk-findings-7\" aria-label=\"medium risk findings 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (7)</h1>\n<h2 id=\"m-01-incentive-should-check-that-it-hasnt-started-yet\" style=\"position:relative;\"><a href=\"#m-01-incentive-should-check-that-it-hasnt-started-yet\" aria-label=\"m 01 incentive should check that it hasnt started yet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/42\">[M-01] Incentive should check that it hasn’t started yet</a></h2>\n<p><em>Submitted by cmichel, also found by pauliax</em></p>\n<p>The <code>ConcentratedLiquidityPoolManager.addIncentive</code> function can add an incentive that already has a non-zero <code>incentive.secondsClaimed</code>.</p>\n<h4 id=\"impact-15\" style=\"position:relative;\"><a href=\"#impact-15\" aria-label=\"impact 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Rewards will be wrong.</p>\n<h4 id=\"recommended-mitigation-steps-16\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-16\" aria-label=\"recommended mitigation steps 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a check: <code>require(incentive.secondsClaimed == 0, \"!secondsClaimed\")</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/42\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/42#issuecomment-966994095\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Assets are at risk after a wrong governance action. Severity 2.</p>\n</blockquote>\n<h2 id=\"m-02-cannot-claim-reward\" style=\"position:relative;\"><a href=\"#m-02-cannot-claim-reward\" aria-label=\"m 02 cannot claim reward permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/41\">[M-02] Cannot claim reward</a></h2>\n<p><em>Submitted by cmichel, also found by 0xsanson, broccoli, hickuphh3, and WatchPug</em></p>\n<p>The <code>ConcentratedLiquidityPoolManager.claimReward</code> requires <code>stake.initialized</code> but it is never set.\nIt also performs a strange computation as <code>128 - incentive.secondsClaimed</code> which will almost always underflow and revert the transaction.</p>\n<h4 id=\"impact-16\" style=\"position:relative;\"><a href=\"#impact-16\" aria-label=\"impact 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>One cannot claim rewards.</p>\n<h4 id=\"recommended-mitigation-steps-17\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-17\" aria-label=\"recommended mitigation steps 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Rethink how claiming rewards should work.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/41\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<h2 id=\"m-03-concentratedliquiditypoolhelper-gettickstate-might-run-out-of-gas\" style=\"position:relative;\"><a href=\"#m-03-concentratedliquiditypoolhelper-gettickstate-might-run-out-of-gas\" aria-label=\"m 03 concentratedliquiditypoolhelper gettickstate might run out of gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/17\">[M-03] <code>ConcentratedLiquidityPoolHelper</code>: <code>getTickState()</code> might run out of gas</a></h2>\n<p><em>Submitted by hickuphh3, also found by cmichel</em></p>\n<h5 id=\"impact-17\" style=\"position:relative;\"><a href=\"#impact-17\" aria-label=\"impact 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h5>\n<p><code>getTickState()</code> attempts to fetch the state of all inserted ticks (including <code>MIN_TICK</code> and <code>MAX_TICK</code>) of a pool. Depending on the tick spacing, this function may run out of gas.</p>\n<h5 id=\"recommended-mitigation-steps-18\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-18\" aria-label=\"recommended mitigation steps 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h5>\n<p>Have a starting index parameter to start the iteration from. Also, <code>tickCount</code> can be made use of more meaningfully to limit the number of iterations performed.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getTickState</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">IConcentratedLiquidityPool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">int24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">startIndex</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">uint24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tickCount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">SimpleTick</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">SimpleTick</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ticks</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">SimpleTick</span><span class=\"mtk1\">[](</span><span class=\"mtk12\">tickCount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">IConcentratedLiquidityPool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Tick</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tick</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">int24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">current</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">startIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint24</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">tickCount</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">tick</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ticks</span><span class=\"mtk1\">(</span><span class=\"mtk12\">current</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">ticks</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">SimpleTick</span><span class=\"mtk1\">({</span><span class=\"mtk12\">index:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">current</span><span class=\"mtk1\">, </span><span class=\"mtk12\">liquidity:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tick</span><span class=\"mtk1\">.</span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">});</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk3\">// reached end of linked list, exit loop</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">current</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">TickMath</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MAX_TICK</span><span class=\"mtk1\">) </span><span class=\"mtk15\">break</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk3\">// else, continue with next iteration</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk12\">current</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tick</span><span class=\"mtk1\">.</span><span class=\"mtk12\">nextTick</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ticks</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/17\">sarangparikh22 (Sushi) acknowledged</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/17#issuecomment-967004172\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Functionality is affected, severity 2.</p>\n</blockquote>\n<h2 id=\"m-04-users-cannot-receive-rewards-from-concentratedliquiditypoolmanager-if-their-liquidity-is-too-large\" style=\"position:relative;\"><a href=\"#m-04-users-cannot-receive-rewards-from-concentratedliquiditypoolmanager-if-their-liquidity-is-too-large\" aria-label=\"m 04 users cannot receive rewards from concentratedliquiditypoolmanager if their liquidity is too large permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/88\">[M-04] Users cannot receive rewards from <code>ConcentratedLiquidityPoolManager</code> if their liquidity is too large</a></h2>\n<p><em>Submitted by broccoli</em></p>\n<h4 id=\"impact-18\" style=\"position:relative;\"><a href=\"#impact-18\" aria-label=\"impact 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>There could be an integer underflow error when the reward of an incentive is claimed, forcing users to wait for a sufficient period or reduce their liquidity to claim the rewards.</p>\n<h4 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The unclaimed reward that a user could claim is proportional to the <code>secondsInside</code>, which is, in fact, proportional to the position’s liquidity. It is possible that the liquidity is too large and causes <code>secondsInside</code> to be larger than <code>secondsUnclaimed</code>. As a result, the rewards that the user wants to claim exceed the <code>incentive.rewardsUnclaimed</code> and causes an integer underflow error, which prevents him from getting the rewards.</p>\n<p>Referenced code:</p>\n<ul>\n<li><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L94-L95\">ConcentratedLiquidityPoolManager.sol#L94-L95</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-19\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-19\" aria-label=\"recommended mitigation steps 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Check whether the <code>rewards</code> exceeds the <code>incentive.rewardsUnclaimed</code>. If so, then send only <code>incentive.rewardsUnclaimed</code> amount of rewards to the user.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/88#issuecomment-942705593\">sarangparikh22 (Sushi) acknowledged</a>:</strong></p>\n<blockquote>\n<p>The problem seems very unlikely to happen, would be great to see a POC.</p>\n</blockquote>\n<h2 id=\"m-05-tridentnftpermit-should-always-check-recoveredaddress--0\" style=\"position:relative;\"><a href=\"#m-05-tridentnftpermit-should-always-check-recoveredaddress--0\" aria-label=\"m 05 tridentnftpermit should always check recoveredaddress  0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/44\">[M-05] <code>TridentNFT.permit</code> should always check <code>recoveredAddress != 0</code></a></h2>\n<p><em>Submitted by cmichel, also found by pauliax</em></p>\n<p>The <code>TridentNFT.permit</code> function ignores the <code>recoveredAddress != 0</code> check if <code>isApprovedForAll[owner][recoveredAddress]</code> is true.</p>\n<h4 id=\"impact-19\" style=\"position:relative;\"><a href=\"#impact-19\" aria-label=\"impact 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>If a user accidentally set the zero address as the operator, tokens can be stolen by anyone as a wrong signature yield <code>recoveredAddress == 0</code>.</p>\n<h4 id=\"recommended-mitigation-steps-20\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-20\" aria-label=\"recommended mitigation steps 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Change the <code>require</code> logic to <code>recoveredAddress != address(0) &#x26;&#x26; (recoveredAddress == owner) || isApprovedForAll[owner][recoveredAddress])</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/44\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/44#issuecomment-966992097\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Assets are not at direct risk, but they are at risk. It wouldn’t be obvious to anyone that setting the zero address to the operator would lead to loss of assets. Severity 2.</p>\n</blockquote>\n<h2 id=\"m-06-concentratedliquiditypoolmanagersol-claimreward-and-reclaimincentive-will-fail-when-incentivetoken-is-token0-or-token1\" style=\"position:relative;\"><a href=\"#m-06-concentratedliquiditypoolmanagersol-claimreward-and-reclaimincentive-will-fail-when-incentivetoken-is-token0-or-token1\" aria-label=\"m 06 concentratedliquiditypoolmanagersol claimreward and reclaimincentive will fail when incentivetoken is token0 or token1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/23\">[M-06] ConcentratedLiquidityPoolManager.sol <code>claimReward()</code> and <code>reclaimIncentive()</code> will fail when <code>incentive.token</code> is <code>token0</code> or <code>token1</code></a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>In <code>ConcentratedLiquidityPosition.collect()</code>, balances of <code>token0</code> and <code>token1</code> in bento will be used to pay the fees.</p>\n<p><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPosition.sol#L103-L116\"><code>ConcentratedLiquidityPosition.sol#L103</code> L116</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance0</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">bento</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token0</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance1</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">bento</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token1</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">balance0</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">token0amount</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">balance1</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">token1amount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount0fees</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount1fees</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">collect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lower</span><span class=\"mtk1\">, </span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">upper</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newBalance0</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amount0fees</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">balance0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newBalance1</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amount1fees</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">balance1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev Rounding errors due to frequent claiming of other users in the same position may cost us some raw</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">token0amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">newBalance0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">token0amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">newBalance0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">token1amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">newBalance1</span><span class=\"mtk1\">) </span><span class=\"mtk12\">token1amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">newBalance1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token0</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token0amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">unwrapBento</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token1</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token1amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">unwrapBento</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>In the case of someone add an incentive with <code>token0</code> or <code>token1</code>, the incentive in the balance of bento will be used to pay fees until the balance is completely consumed.</p>\n<p>As a result, when a user calls <code>claimReward()</code>, the contract may not have enough balance to pay (it supposed to have it), cause the transaction to fail.</p>\n<p><a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L78-L100\"><code>ConcentratedLiquidityPoolManager.sol#L78</code> L100</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">claimReward</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">positionId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">incentiveId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">unwrapBento</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ownerOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">positionId</span><span class=\"mtk1\">] == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;OWNER&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Position</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">position</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">positions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">positionId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IConcentratedLiquidityPool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pool</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Incentive</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">incentive</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">incentives</span><span class=\"mtk1\">[</span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">][</span><span class=\"mtk12\">positionId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Stake</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">stake</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">stakes</span><span class=\"mtk1\">[</span><span class=\"mtk12\">positionId</span><span class=\"mtk1\">][</span><span class=\"mtk12\">incentiveId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">stake</span><span class=\"mtk1\">.</span><span class=\"mtk12\">initialized</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;UNINITIALIZED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">secondsPerLiquidityInside</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">rangeSecondsInside</span><span class=\"mtk1\">(</span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lower</span><span class=\"mtk1\">, </span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">upper</span><span class=\"mtk1\">) - </span><span class=\"mtk12\">stake</span><span class=\"mtk1\">.</span><span class=\"mtk12\">secondsInsideLast</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">secondsInside</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">secondsPerLiquidityInside</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxTime</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">endTime</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">endTime</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">secondsUnclaimed</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">maxTime</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">startTime</span><span class=\"mtk1\">) &lt;&lt; (</span><span class=\"mtk7\">128</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">secondsClaimed</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewards</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">rewardsUnclaimed</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">secondsInside</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">secondsUnclaimed</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">rewardsUnclaimed</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">rewards</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">secondsClaimed</span><span class=\"mtk1\"> += </span><span class=\"mtk11\">uint160</span><span class=\"mtk1\">(</span><span class=\"mtk12\">secondsInside</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">stake</span><span class=\"mtk1\">.</span><span class=\"mtk12\">secondsInsideLast</span><span class=\"mtk1\"> += </span><span class=\"mtk11\">uint160</span><span class=\"mtk1\">(</span><span class=\"mtk12\">secondsPerLiquidityInside</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">rewards</span><span class=\"mtk1\">, </span><span class=\"mtk12\">unwrapBento</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ClaimReward</span><span class=\"mtk1\">(</span><span class=\"mtk12\">positionId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">incentiveId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The same issue applies to <code>reclaimIncentive()</code> as well.\n<a href=\"https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L49-L62\"><code>ConcentratedLiquidityPoolManager.sol</code> L49 L62</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">reclaimIncentive</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IConcentratedLiquidityPool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">incentiveId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">unwrapBento</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Incentive</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">incentive</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">incentives</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">][</span><span class=\"mtk12\">incentiveId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">owner</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NOT_OWNER&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">expiry</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;EXPIRED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">rewardsUnclaimed</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;ALREADY_CLAIMED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">incentive</span><span class=\"mtk1\">.</span><span class=\"mtk12\">token</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">unwrapBento</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ReclaimIncentive</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">, </span><span class=\"mtk12\">incentiveId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Consider making adding <code>token0</code> or <code>token1</code> as incentives disallowed, or keep a record of total remaining incentive amounts for the incentive tokens and avoid consuming these revered balances when <code>collect()</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/23\">sarangparikh22 (Sushi) confirmed</a></strong></p>\n<h2 id=\"m-07-incentives-for-different-pools-should-differ-by-a-large-factor\" style=\"position:relative;\"><a href=\"#m-07-incentives-for-different-pools-should-differ-by-a-large-factor\" aria-label=\"m 07 incentives for different pools should differ by a large factor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/10\">[M-07] Incentives for different pools should differ by a large factor</a></h2>\n<p>I’m adding this as an issue because I didn’t see it mentioned anywhere in the codebase, and I think its a fair point that relates to how the protocol gives out rewards to users. As I understand , the point of staking is to provide users with additional compensation for providing liquidity (and taking on risk) for the good of the protocol. If a large fraction of rewards go to users who don’t provide a huge benefit to the protocol, that’s a problem.</p>\n<p>Consider two different pools: USDC-DAI and USDC-ETH. Suppose a user has $10K worth of tokens and decides to provide liquidity to each of these pools.</p>\n<p>In the USDC-DAI pool the user can very safely provide the $10K with a 1% spread between upper and lower tick. The total amount of liquidity he provides is roughly $10K * (1/0.01) = $1 M dollars of liquidity per second. The impermanent loss here is going to be basically 0 in normal conditions. The liquidity will be in range all the time.</p>\n<p>The same situation in the USDC-ETH pool on the other hand:\nSuppose a user has $10K worth of USDC+ETH, provides it with a 1% spread between upper and lower ticks at the current price => roughly $1 M dollars of liquidity per second, the same as before. However, now there is a good chance that price ranges by more than 1% meaning he loses all of his more valuable tokens for the cheaper ones due to impermanent loss. The liquidity will be out of range for a much longer percentage of the time.</p>\n<p>However, if the incentives for each pool are the same, the staking protocol would value the liquidity per second of each LP situation equally. To make things “fair per unit of risk/liquidity” the incentive on the USDC-ETH should be something like 10x or 20x the incentive on the USDC-DAI pool. The pools with higher volatility should have a <em>significantly</em> higher incentive.</p>\n<p>Recommendations:\nMake sure the developers are at least aware of something like this when choosing incentive amounts for different pools. Carefully choose incentive amounts for each pool.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/10#issuecomment-940867532\">sarangparikh22 (Sushi) disputed</a>:</strong></p>\n<blockquote>\n<p>This is not a med-risk issue, or an issue at all, we will improve the docs, so that devs are aware on how to set the incentives.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/10#issuecomment-967135732\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Setting the incentives wrong will make the protocol leak value, which warrants a Severity 2. The issue was not disclosed, and therefore is valid.</p>\n</blockquote>\n<h1 id=\"low-risk-findings-23\" style=\"position:relative;\"><a href=\"#low-risk-findings-23\" aria-label=\"low risk findings 23 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (23)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/76\">[L-01] <code>addIncentive</code> may need more inputs checked</a> <em>Submitted by 0xsanson</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/3\">[L-02] Unlocked Pragma Statements</a> <em>Submitted by anon, also found by broccoli</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/93\">[L-03] Sanity check on the lower and upper ticks</a> <em>Submitted by broccoli</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/91\">[L-04] Incorrect comparison in the <code>_updatePosition</code> of <code>ConcentratedLiquidityPool</code></a> <em>Submitted by broccoli</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/90\">[L-05] Timestamp underflow error in <code>swap</code> function of <code>ConcentratedLiquidityPool</code></a> <em>Submitted by broccoli</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/68\">[L-06] Boundaries for timestamp values</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/65\">[L-07] Handle of deflationary tokens</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/62\">[L-08] Inclusive conditions</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/48\">[L-09] <code>TridentNFT</code> signature malleability</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/47\">[L-10] <code>TridentNFT.safeTransferFrom</code> now EIP-721 compliant</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/46\">[L-11] <code>TridentNFT._mint</code> can mint to zero address</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/45\">[L-12] <code>TridentNFT.permitAll</code> prviliges discrepancy for operator</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/43\">[L-13] <code>TridentNFT</code> ignores <code>from</code></a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/40\">[L-14] Wrong inequality when trying to subscribe to an incentive</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/33\">[L-15] <code>ConcentratedLiquidityPool</code>s can be created with the same tokens</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/31\">[L-16] <code>Ticks.cross</code> wrong comment?</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/30\">[L-17] <code>DyDxMath.getLiquidityForAmounts</code> underflows</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/28\">[L-18]  No sanity check of <code>_price</code> in the constructor</a> <em>Submitted by broccoli</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/12\">[L-19] ConcentratedLiquidityPool: MAX<em>TICK</em>LIQUIDITY is checked incorrectly</a> <em>Submitted by hickuphh3</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/7\">[L-20] Consider using solidity version 0.8.8</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/6\">[L-21] Implement or remove functions</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/77\">[L-22] <code>subscribe</code> can be called by anyone</a> <em>Submitted by 0xsanson, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/60\">[L-23] _burn should decrement totalSupply</a> <em>Submitted by pauliax</em></li>\n</ul>\n<h1 id=\"non-critical-findings-9\" style=\"position:relative;\"><a href=\"#non-critical-findings-9\" aria-label=\"non critical findings 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (9)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/32\">[N-01] <code>ConcentratedLiquidityPool.Sync</code> event never used</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/74\">[N-02] Style issues</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/63\">[N-03] uint32 for timestamps</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/58\">[N-04] Replace hex numbers with .selector</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/54\">[N-05] <code>ConcentratedLiquidityPoolManager.sol#reclaimIncentive</code> Misleading error message</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/22\">[N-06] Spelling Errors</a> <em>Submitted by hickuphh3</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/21\">[N-07] Ticks: <code>getMaxLiquidity()</code> formula should be explained</a> <em>Submitted by hickuphh3</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/5\">[N-08] Possible underflow if other checks aren’t used</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/79\">[N-09] <code>incentiveId &#x3C;= incentiveCount[pool]</code> is bad and can be removed</a> <em>Submitted by 0xsanson, also found by broccoli</em></li>\n</ul>\n<h1 id=\"gas-optimizations-7\" style=\"position:relative;\"><a href=\"#gas-optimizations-7\" aria-label=\"gas optimizations 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (7)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/73\">[G-01] Useless state variable wETH</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/72\">[G-02] Unused import</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/57\">[G-03] Struct could be optimized for saving gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/56\">[G-04] Cache storage variables in the stack can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/55\">[G-05] Adding unchecked directive can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/49\">[G-06] Gas: <code>ConcentratedLiquidityPoolManager.addIncentive</code> </a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/75\">[G-07] <code>addIncentive</code> and <code>reclaimIncentive</code> can be external</a> <em>Submitted by 0xsanson</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-17\">High Risk Findings (17)</a></p>\n<ul>\n<li><a href=\"#h-01-unsafe-cast-in-concentratedliquiditypoolburn-leads-to-attack\">[H-01] Unsafe cast in <code>ConcentratedLiquidityPool.burn</code> leads to attack</a></li>\n<li><a href=\"#h-02-wrong-usage-of-positionid-in-concentratedliquiditypoolmanager\">[H-02] Wrong usage of <code>positionId</code> in <code>ConcentratedLiquidityPoolManager</code></a></li>\n<li><a href=\"#h-03-concentratedliquiditypoolmanagers-incentives-can-be-stolen\">[H-03] <code>ConcentratedLiquidityPoolManager</code>’s incentives can be stolen</a></li>\n<li><a href=\"#h-04-overflow-in-the-mint-function-of-concentratedliquiditypool-causes-lps-funds-to-be-stolen\">[H-04] Overflow in the <code>mint</code> function of <code>ConcentratedLiquidityPool</code> causes LPs’ funds to be stolen</a></li>\n<li><a href=\"#h-05-incorrect-usage-of-typecasting-in-_getamountsforliquidity-lets-an-attacker-steal-funds-from-the-pool\">[H-05] Incorrect usage of typecasting in <code>_getAmountsForLiquidity</code> lets an attacker steal funds from the pool</a></li>\n<li><a href=\"#h-06-concentratedliquiditypositionsolcollect-users-may-get-double-the-amount-of-yield-when-they-call-collect-before-burn\">[H-06] <code>ConcentratedLiquidityPosition.sol#collect()</code> Users may get double the amount of yield when they call <code>collect()</code> before <code>burn()</code></a></li>\n<li><a href=\"#h-07-concentratedliquiditypositionsolburn-wrong-implementation-allows-attackers-to-steal-yield\">[H-07] <code>ConcentratedLiquidityPosition.sol#burn()</code> Wrong implementation allows attackers to steal yield</a></li>\n<li><a href=\"#h-08-wrong-inequality-when-addingremoving-liquidity-in-current-price-range\">[H-08] Wrong inequality when adding/removing liquidity in current price range</a></li>\n<li><a href=\"#h-09-range-fee-growth-underflow\">[H-09] range fee growth underflow</a></li>\n<li><a href=\"#h-10-concentratedliquiditypoolburn-wrong-implementation\">[H-10] <code>ConcentratedLiquidityPool.burn()</code> Wrong implementation</a></li>\n<li><a href=\"#h-11-concentratedliquiditypool-incorrect-feegrowthglobal-accounting-when-crossing-ticks\">[H-11] ConcentratedLiquidityPool: incorrect <code>feeGrowthGlobal</code> accounting when crossing ticks</a></li>\n<li><a href=\"#h-12-concentratedliquiditypool-secondsperliquidity-should-be-modified-whenever-pool-liquidity-changes\">[H-12] <code>ConcentratedLiquidityPool</code>: <code>secondsPerLiquidity</code> should be modified whenever pool liquidity changes</a></li>\n<li><a href=\"#h-13-burning-does-not-update-reserves\">[H-13] Burning does not update reserves</a></li>\n<li><a href=\"#h-14-concentratedliquiditypool-rangefeegrowth-and-secondsperliquidity-math-needs-to-be-unchecked\">[H-14] <code>ConcentratedLiquidityPool</code>: <code>rangeFeeGrowth</code> and <code>secondsPerLiquidity</code> math needs to be unchecked</a></li>\n<li><a href=\"#h-15-concentratedliquiditypool-initialprice-should-be-checked-to-be-within-allowable-range\">[H-15] <code>ConcentratedLiquidityPool</code>: <code>initialPrice</code> should be checked to be within allowable range</a></li>\n<li><a href=\"#h-16-possible-attacks-on-seconds--liquidity-calculation\">[H-16] Possible attacks on Seconds * Liquidity calculation</a></li>\n<li><a href=\"#h-17-understanding-the-fee-growth-mechanism-why-nearesttick-is-unsuitable\">[H-17] Understanding the fee growth mechanism (why <code>nearestTick</code> is unsuitable)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-7\">Medium Risk Findings (7)</a></p>\n<ul>\n<li><a href=\"#m-01-incentive-should-check-that-it-hasnt-started-yet\">[M-01] Incentive should check that it hasn’t started yet</a></li>\n<li><a href=\"#m-02-cannot-claim-reward\">[M-02] Cannot claim reward</a></li>\n<li><a href=\"#m-03-concentratedliquiditypoolhelper-gettickstate-might-run-out-of-gas\">[M-03] <code>ConcentratedLiquidityPoolHelper</code>: <code>getTickState()</code> might run out of gas</a></li>\n<li><a href=\"#m-04-users-cannot-receive-rewards-from-concentratedliquiditypoolmanager-if-their-liquidity-is-too-large\">[M-04] Users cannot receive rewards from <code>ConcentratedLiquidityPoolManager</code> if their liquidity is too large</a></li>\n<li><a href=\"#m-05-tridentnftpermit-should-always-check-recoveredaddress--0\">[M-05] <code>TridentNFT.permit</code> should always check <code>recoveredAddress != 0</code></a></li>\n<li><a href=\"#m-06-concentratedliquiditypoolmanagersol-claimreward-and-reclaimincentive-will-fail-when-incentivetoken-is-token0-or-token1\">[M-06] ConcentratedLiquidityPoolManager.sol <code>claimReward()</code> and <code>reclaimIncentive()</code> will fail when <code>incentive.token</code> is <code>token0</code> or <code>token1</code></a></li>\n<li><a href=\"#m-07-incentives-for-different-pools-should-differ-by-a-large-factor\">[M-07] Incentives for different pools should differ by a large factor</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-23\">Low Risk Findings (23)</a></li>\n<li><a href=\"#non-critical-findings-9\">Non-Critical Findings (9)</a></li>\n<li><a href=\"#gas-optimizations-7\">Gas Optimizations (7)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of Sushi Trident smart contract system written in Solidity. The code contest took place between September 30—October 6 2021.\n\n## Wardens\n\n8 Wardens contributed reports to the Sushi Trident contest  (phase 2):\n\n1. [cmichel](https://twitter.com/cmichelio)\n2. broccoli ([shw](https://github.com/x9453) and [jonah1005](https://twitter.com/jonah1005w))\n3. [0xsanson](https://github.com/0xsanson)\n4. [hickuphh3](https://twitter.com/HickupH)\n5. [pauliax](https://twitter.com/SolidityDev)\n6. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n\nThis contest was judged by [Alberto Cuesta Cañada](https://twitter.com/alcueca).\n\nFinal report assembled by [moneylegobatman](https://twitter.com/money_lego) and [CloudEllie](https://twitter.com/CloudEllie1).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 47 unique vulnerabilities and 63 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 17 received a risk rating in the category of HIGH severity, 7 received a risk rating in the category of MEDIUM severity, and 23 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 9 non-critical recommendations and 7 gas optimizations.\n\n# Scope\n\nThe linkscode under review can be found within the [C4 Sushi Trident contest (phase 2) repository](https://github.com/code-423n4/2021-09-sushitrident-2), and is composed of 12 smart contracts written in the Solidity programming language.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (17)\n\n## [[H-01] Unsafe cast in `ConcentratedLiquidityPool.burn` leads to attack](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/50)\n_Submitted by cmichel, also found by broccoli_\n\nThe `ConcentratedLiquidityPool.burn` function performs an unsafe cast of a `uint128` type to a *signed* integer.\n\n```solidity\n(uint256 amount0fees, uint256 amount1fees) = _updatePosition(msg.sender, lower, upper, -int128(amount));\n```\n\nNote that `amount` is chosen by the caller and when choosing `amount = 2**128 - 1`, this is interpreted as `0xFFFFFFFFF... = -1` as a signed integer. Thus `-(-1)=1` adds 1 liquidity unit to the position\n\nThis allows an attacker to not only mint LP tokens for free but as this is the `burn` function it also redeems token0/1 amounts according to the unmodified `uint128` `amount` which is an extremely large value.\n\n#### POC\n\nI created this POC that implements a hardhat test and shows how to steal the pool tokens.\n\nChoosing the correct `amount` of liquidity to burn and `lower, upper` ticks is not straight-forward because of two competing constraints:\n\n1.  the `-int128(amount)` must be less than `MAX_TICK_LIQUIDITY` (see `_updatePosition`). This drives the the `amount` up to its max value (as the max `uint128` value is -1 => -(-1)=1 is very low)\n2.  The redeemed `amount0, amount1` values must be less than the current pool balance as the transfers would otherwise fail. This drives the `amount` down. However, by choosing a smart `lower` and `upper` tick range we can redeem fewer tokens for the same liquidity.\n\n[This example](https://gist.github.com/MrToph/1731dd6947073343cf6f942985d556a6) shows how to steal 99% of the `token0` pool reserves:\n\n#### Impact\n\nAn attacker can steal the pool tokens.\n\n#### Recommended Mitigation Steps\n\nEven though Solidity 0.8.x is used, type casts do not throw an error.\nA [`SafeCast` library](https://docs.openzeppelin.com/contracts/4.x/api/utils#SafeCast) must be used everywhere a typecast is done.\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/50)**\n\n## [[H-02] Wrong usage of `positionId` in `ConcentratedLiquidityPoolManager`](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/86)\n_Submitted by broccoli, also found by 0xsanson, cmichel, hickuphh3, and pauliax_\n\n#### Impact\nIn the `subscribe` function of `ConcentratedLiquidityPoolManager`, the `incentive` to subscribed is determined as follows:\n\n```solidity\nIncentive memory incentive = incentives[pool][positionId];\n```\n\nHowever, `positionId` should be `incentiveId`, a counter that increases by one whenever a new incentive is added to the pool. The usage of `positionId` could cause the wrong incentive to be used, and in general, the incentive is not found, and the transaction reverts (the condition `block.timestamp < incentive.endTime` is not met). The `getReward` and `claimReward` functions have the bug of misusing `positionId` as the index of incentives.\n\n#### Proof of Concept\nReferenced code:\n- [ConcentratedLiquidityPoolManager.sol#L68](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L68)\n- [ConcentratedLiquidityPoolManager.sol#L87](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L87)\n- [ConcentratedLiquidityPoolManager.sol#L105](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L105)\n\n#### Recommended Mitigation Steps\nChange `positionId` to `incentiveId` in the referenced lines of code.\n\n**[sarangparikh22 (Sushi) confirmed but disagreed with severity](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/86#issuecomment-940846279)**\n\n## [[H-03] `ConcentratedLiquidityPoolManager`'s incentives can be stolen](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/37)\n_Submitted by cmichel, also found by broccoli, hickuphh3, pauliax, and WatchPug_\n\nThe `ConcentratedLiquidityPoolManager` keeps all tokens for all incentives in the same contract. The `reclaimIncentive` function does not reduce the `incentive.rewardsUnclaimed` field and thus one can reclaim tokens several times.\nThis allows anyone to steal all tokens from all incentives by creating an incentive themself, and once it's expired, repeatedly claim the unclaimed rewards until the token balance is empty.\n\n#### POC\n*   Attacker creates an incentive for a non-existent pool using a random address for `pool` (This is done such that no other user can claim rewards as we need a non-zero `rewardsUnclaimed` balance for expiry). They choose the `incentive.token` to be the token they want to steal from other incentives. (for example, `WETH`, `USDC`, or `SUSHI`) They choose the `startTime, endTime, expiry` such that the checks pass, i.e., starting and ending in a few seconds from now, expiring in 5 weeks. Then they choose a non-zero `rewardsUnclaimed` and transfer the `incentive.token` to the `PoolManager`.\n*   Attacker waits for 5 weeks until the incentive is expired\n*   Attacker can now call `reclaimIncentive(pool, incentiveId, amount=incentive.rewardsUnclaimed, attacker, false)` to withdraw `incentive.rewardsUnclaimed` of `incentive.token` from the pool manager.\n*   As the `incentive.rewardsUnclaimed` variable has not been decreased, they can keep calling `reclaimIncentive` until the pool is drained.\n\n#### Impact\nAn attacker can steal all tokens in the `PoolManager`.\n\n#### Recommended Mitigation Steps\nIn `reclaimIncentive`, reduce `incentive.rewardsUnclaimed` by the withdrawn `amount`.\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/37)**\n\n## [[H-04] Overflow in the `mint` function of `ConcentratedLiquidityPool` causes LPs' funds to be stolen](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/84)\n_Submitted by broccoli_\n\n#### Impact\nSimilar to a previous finding in the `IndexPool` contract, the `mint` function of `ConcentratedLiquidityPool` allows integer overflows when checking the balance is larger or equal to the received amount of token plus the reserve. As a result, the attacker could get a large amount of liquidity but only provide a small number of tokens to the pool, effectively stealing other LPs' funds when burning his liquidity.\n\nNotice that this bug is independent of another bug of incorrect casting `uint256` type to `uint128` in the `_getAmountsForLiquidity` function. Even if the previously mentioned bug does not exist, the attacker could still steal the funds in the pool by exploiting this bug.\n\n#### Proof of Concept\n1.  Suppose that the current price is at the tick `500000`, an attacker calls the `mint` function with the following parameters:\n\n```solidity\nmintParams.lower = 100000\nmintParams.upper = 500000\nmintParams.amount1Desired = (1 << 128) - 47541305835 # a carefully chosen number\nmintParams.amount0Desired = 0\n```\n2.  Since the current price is equal to the upper price, we have\n\n```solidity\n_liquidity = mintParams.amount1Desired * (1 << 96) // (priceUpper - priceLower)\n    = 4731732988155153573010127839\n```\n3.  The amounts of `token0` and `token1` that the attacker has to pay is\n\n```solidity\namount0Actual = 0\namount1Actual = uint128(DyDxMath.getDy(_liquidity, priceLower, priceUpper, true))\n    = uint128(_liquidity * (priceUpper - priceLower) // (1 << 96)) # round up\n    = uint128(340282366920938463463374607384226905622)\n    = 340282366920938463463374607384226905622\n    = (1 << 128) - 47541305834\n```\n4.  As long as `reserve1` is greater than `47541305834`, the addition `amount1Actual + reserve1` overflows to a small number, causing the attacker to pass the balance check.\n\nReferenced code:\n- [ConcentratedLiquidityPool.sol#L204](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L204)\n- [ConcentratedLiquidityPool.sol#L209](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L209)\n\n#### Recommended Mitigation Steps\nConsider removing the `unchecked` statement to check for integer overflow or casting both `amount1Actual` and `reserve1` to type `uint256` before adding them and comparing to the `_balance(token)`.\n\n**[sarangparikh22 (Sushi) disputed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/84#issuecomment-954231077):**\n > The example is wrong, you can't add use upper tick as odd, correct the example and resubmit please.\n\n## [[H-05] Incorrect usage of typecasting in `_getAmountsForLiquidity` lets an attacker steal funds from the pool](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/83)\n_Submitted by broccoli_\n\n#### Impact\nThe `_getAmountsForLiquidity` function of `ConcentratedLiquidityPool` explicitly converts the result of `DyDxMath.getDy` and `DyDxMath.getDx` from type `uint256` to type `uint128`. The explicit casting without checking whether the integer exceeds the maximum number (i.e., `type(uint128).max`) could cause incorrect results being used. Specifically, an attacker could exploit this bug to mint a large amount of liquidity but only pay a little of `token0` or `token1` to the pool and effectively steal other's funds when burning his liquidity.\n\n#### Proof of Concept\n1.  Suppose that the current price is at the tick `500000`, an attacker calls the `mint` function with the following parameters:\n\n```solidity\nmintParams.lower = 100000\nmintParams.upper = 500000\nmintParams.amount1Desired = (1 << 128) + 71914955423 # a carefully chosen number\nmintParams.amount0Desired = 0\n```\n2.  Since the current price is equal to the upper price, we have\n\n```solidity\n_liquidity = mintParams.amount1Desired * (1 << 96) // (priceUpper - priceLower)\n    = 4731732988155153573010127840\n```\n3.  The amounts of `token0` and `token1` that the attacker has to pay is\n\n```solidity\namount0Actual = 0\namount1Actual = uint128(DyDxMath.getDy(_liquidity, priceLower, priceUpper, true))\n    = uint128(_liquidity * (priceUpper - priceLower) // (1 << 96)) # round up\n    = uint128(340282366920938463463374607456141861046)             # exceed the max\n    = 24373649590                                                  # truncated\n```\n4.  The attacker only pays `24373649590` of `token1` to get `4731732988155153573010127840` of the liquidity, which he could burn to get more `token1`. As a result, the attacker is stealing the funds from the pool and could potentially drain it.\n\nReferenced code:\n- [ConcentratedLiquidityPool.sol#L480](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L480)\n- [concentratedPool/DyDxMath.sol#L15](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/libraries/concentratedPool/DyDxMath.sol#L15)\n- [concentratedPool/DyDxMath.sol#L30](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/libraries/concentratedPool/DyDxMath.sol#L30)\n\n#### Recommended Mitigation Steps\nCheck whether the result of `DyDxMath.getDy` or `DyDxMath.getDx` exceeds `type(uint128).max` or not. If so, then revert the transaction. Or consider using the [`SafeCast` library](https://docs.openzeppelin.com/contracts/3.x/api/utils#SafeCast) from OpenZeppelin instead.\n\n**[sarangparikh22 (Sushi) disputed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/83#issuecomment-954233068):**\n > The example is wrong, you can't add use upper tick as odd, correct the example and resubmit please.\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/83#issuecomment-967016368):**\n > @sarangparikh22 (Sushi), could you confirm whether the casting to uint128 is known to be safe? Are you unconvinced of the issue?\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/83#issuecomment-970807633):**\n > @alcueca (judge) I can confirm casting to uint128 is not safe, and will lead to overflow. However, the example mentioned is wrong.\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/83#issuecomment-972587273):**\n > Understood. I will uphold the severity 3 because the overflow happens in a critical function for the management of funds and an incorrect execution will likely lead to loss of funds.\n\n## [[H-06] `ConcentratedLiquidityPosition.sol#collect()` Users may get double the amount of yield when they call `collect()` before `burn()`](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/53)\n_Submitted by WatchPug_\n\nWhen a user calls `ConcentratedLiquidityPosition.sol#collect()` to collect their yield, it calcuates the yield based on `position.pool.rangeFeeGrowth()` and `position.feeGrowthInside0, position.feeGrowthInside1`:\n\n[`ConcentratedLiquidityPosition.sol#L75` L101](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPosition.sol#L75-L101)\n\nWhen there are enough tokens in `bento.balanceOf`, it will not call `position.pool.collect()` to collect fees from the pool.\n\nThis makes the user who `collect()` their yield when there is enough balance to get double yield when they call `burn()` to remove liquidity. Because `burn()` will automatically collect fees on the pool contract.\n\n#### Impact\nThe yield belongs to other users will be diluted.\n\n#### Recommended Mitigation Steps\nConsider making `ConcentratedLiquidityPosition.sol#burn()` call `position.pool.collect()` before `position.pool.burn()`. User will need to call `ConcentratedLiquidityPosition.sol#collect()` to collect unclaimed fees after `burn()`.\n\nOr `ConcentratedLiquidityPosition.sol#collect()` can be changed into a `public` method and `ConcentratedLiquidityPosition.sol#burn()` can call it after `position.pool.burn()`.\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/53)**\n\n## [[H-07] `ConcentratedLiquidityPosition.sol#burn()` Wrong implementation allows attackers to steal yield](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/52)\n_Submitted by WatchPug_\n\nWhen a user calls `ConcentratedLiquidityPosition.sol#burn()` to burn their liquidity, it calls `ConcentratedLiquidityPool.sol#burn()` -> `_updatePosition()`:\n\n[`ConcentratedLiquidityPool.sol#L525` L553](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L525-L553)\n\nThe `_updatePosition()` function will return `amount0fees` and `amount1fees` of the whole position with the `lower` and `upper` tick and send them to the `recipient` alongside the burned liquidity amounts.\n\n#### Proof of Concept\n1.  Alice minted \\$10000 worth of liquidity with `lower` and `upper` tick set to 99 and 199;\n2.  Alice accumulated \\$1000 worth of fee in token0 and token1;\n3.  The attacker can mint a small amount (\\$1 worth) of liquidity using the same `lower` and `upper` tick;\n4.  The attacker calls `ConcentratedLiquidityPosition.sol#burn()` to steal all the unclaimed yield with the ticks of (99, 199) include the \\$1000 worth of yield from Alice.\n\n#### Recommended Mitigation Steps\nConsider making `ConcentratedLiquidityPosition.sol#burn()` always use `address(this)` as `recipient` in:\n\n```solidity\nposition.pool.burn(abi.encode(position.lower, position.upper, amount, recipient, unwrapBento));\n```\n\nand transfer proper amounts to the user.\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/52)**\n\n## [[H-08] Wrong inequality when adding/removing liquidity in current price range](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/34)\n_Submitted by cmichel_\n\nThe `ConcentratedLiquidityPool.mint/burn` functions add/remove `liquidity` when `(priceLower < currentPrice && currentPrice < priceUpper)`.\nShouldn't it also be changed if `priceLower == currentPrice`?\n\n#### Impact\nPools that mint/burn liquidity at a time where the `currentPrice` is right at the lower price range do not work correctly and will lead to wrong swap amounts.\n\n#### Recommended Mitigation Steps\nChange the inequalities to `if (priceLower <= currentPrice && currentPrice < priceUpper)`.\n\n**[sarangparikh22 (Sushi) disputed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/34#issuecomment-942790793):**\n > You shouldn't be able to reach this, can you produce a POC?\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/34#issuecomment-967792671):**\n > @sarangparikh22 (Sushi), could you please elaborate on why this is not reachable?\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/34#issuecomment-970749777):**\n > I confused this with another similar issue, my apologies, took a look at this, and this a valid issue, we should probably even bump the severity to Sev 3, not sure if I am allowed to do so haha, I created a PoC in which users can actually loose funds, when they add liquidity in that specific range. @alcueca (judge)\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/34#issuecomment-972590913):**\n > Sponsors are allowed to bump up severity, and I've done it myself in my past as a sponsor as well.\n\n## [[H-09] range fee growth underflow](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/25)\n_Submitted by broccoli_\n\n#### Impact\nThe function `RangeFeeGrowth` ([ConcentratedLiquidityPool.sol#L601-L633](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L601-L633)) would revert the transaction in some cases.\n\nWhen a pool cross a tick, it only updates either `feeGrowthOutside0` or `feeGrowthOutside1`. [Ticks.sol#L23-L53](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/libraries/concentratedPool/Ticks.sol#L23-L53)\n\n`RangeFeeGrowth` calculates the fee as follow:\n\n```solidity\n    feeGrowthInside0 = _feeGrowthGlobal0 - feeGrowthBelow0 - feeGrowthAbove0;\n    feeGrowthInside1 = _feeGrowthGlobal1 - feeGrowthBelow1 - feeGrowthAbove1;\n```\n\n`feeGrowthBelow + feeGrowthAbove` is not necessary smaller than `_feeGrowthGlobal`. Please see `POC`.\n\nUsers can not provide liquidity or burn liquidity. Fund will get stocked in the contract. I consider this is a high-risk issue.\n\n#### Proof of Concept\n```python\n    # This is the wrapper.\n    # def add_liquidity(pool, amount, lower, upper)\n    # def swap(pool, buy, amount)\n\n    add_liquidity(pool, deposit_amount, -800, 500)\n    add_liquidity(pool, deposit_amount, 400, 700)\n    # We cross the tick here to trigger the bug.\n\n    swap(pool, False, deposit_amount)\n    # Only tick 700's feeGrowthOutside1 is updated\n\n    swap(pool, True, deposit_amount)\n    # Only tick 500's feeGrowthOutside0 is updated\n\n    # current tick at -800\n\n    # this would revert\n    # feeGrowthBelow1 = feeGrowthGlobal1\n    # feeGrowthGlobal1 - feeGrowthBelow1 - feeGrowthAbove1 would revert\n    # user would not be able to mint/withdraw/cross this tick. The pool is broken\n    add_liquidity(pool, deposit_amount, 400, 700)\n```\n\n#### Tools Used\nHardhat\n\n#### Recommended Mitigation Steps\nIt's either modify the tick's algo or `RangeFeeGrowth`. The quick-fix I come up with is to deal with the fee in `RangeFeeGrowth`. However, I recommend the team to go through tick's logic again.\n\n**[sarangparikh22 (Sushi) disputed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/25#issuecomment-942800266):**\n > The example is wrong, you can't add use upper tick as odd, correct the example and resubmit please.\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/25#issuecomment-967128882):**\n > @sarangparikh22 (Sushi), is the example invalid, or the whole issue? Is this something that you would consider fixing?\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/25#issuecomment-972242461):**\n > @alcueca (judge) The example is invalid, but the issue is valid, the fix is to swap the condition of feeGrowthGlobal\n\n## [[H-10] `ConcentratedLiquidityPool.burn()` Wrong implementation](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/24)\n_Submitted by WatchPug_\n\nThe reserves should be updated once LP tokens are burned to match the actual total bento shares hold by the pool.\n\nHowever, the current implementation only updated reserves with the fees subtracted.\n\nMakes the `reserve0` and `reserve1` smaller than the current `balance0` and `balance1`.\n\n#### Impact\nAs a result, many essential features of the contract will malfunction, includes `swap()` and `mint()`.\n\n#### Recommended Mitigation Steps\n\n[`ConcentratedLiquidityPool.sol#L263` L267](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPool.sol#L263-L267)\nChange:\n\n```solidity\nunchecked {\n    reserve0 -= uint128(amount0fees);\n    reserve1 -= uint128(amount1fees);\n}\n\n```\n\nto:\n```solidity\nunchecked {\n    reserve0 -= uint128(amount0);\n    reserve1 -= uint128(amount1);\n}\n```\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/24)**\n\n## [[H-11] ConcentratedLiquidityPool: incorrect `feeGrowthGlobal` accounting when crossing ticks](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/16)\n_Submitted by hickuphh3_\n\n##### Impact\nSwap fees are taken from the output. Hence, if swapping token0 for token1 (`zeroForOne` is true), then fees are taken in token1. We see this to be the case in the initialization of `feeGrowthGlobal` in the swap cache\n\n`feeGrowthGlobal = zeroForOne ? feeGrowthGlobal1 : feeGrowthGlobal0;`\n\nand in `_updateFees()`.\n\nHowever, looking at `Ticks.cross()`, the logic is the reverse, which causes wrong fee accounting.\n\n```jsx\nif (zeroForOne) {\n\t...\n\tticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobal - ticks[nextTickToCross].feeGrowthOutside0;\n} else {\n\t...\n\tticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobal - ticks[nextTickToCross].feeGrowthOutside1;\n}\n```\n\n##### Recommended Mitigation Steps\nSwitch the `0` and `1` in `Ticks.cross()`.\n\n```jsx\nif (zeroForOne) {\n\t...\n\t// `feeGrowthGlobal` = feeGrowthGlobal1\n\tticks[nextTickToCross].feeGrowthOutside1 = feeGrowthGlobal - ticks[nextTickToCross].feeGrowthOutside1;\n} else {\n\t...\n\t// feeGrowthGlobal = feeGrowthGlobal0\n\tticks[nextTickToCross].feeGrowthOutside0 = feeGrowthGlobal - ticks[nextTickToCross].feeGrowthOutside0;\n}\n```\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/16)**\n\n## [[H-12] `ConcentratedLiquidityPool`: `secondsPerLiquidity` should be modified whenever pool liquidity changes](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/15)\n_Submitted by hickuphh3_\n\n##### Impact\n`secondsPerLiquidity` is updated as such: `secondsPerLiquidity += uint160((diff << 128) / liquidity);` where `diff = timestamp - uint256(lastObservation)`. Hence, whenever liquidity changes, `secondsPerLiquidity` should be updated prior to the change.\n\nIn particular, this affects the `mint()` and `burn()` functions, in the case where liquidity changes when `lowerTick <= currentTick < upperTick`.\n\nIn fact, the latest `secondsPerLiquidity` value should be calculated and used in `Ticks.insert()`. For comparison, notice how UniswapV3 fetches the latest value by calling `observations.observeSingle()` in its `_updatePosition()` function.\n\n##### Recommended Mitigation Steps\nThe `secondsPerLiquidity` increment logic should be applied prior to liquidity addition in `mint()` and removal in `burn()`.\n\n```jsx\n// insert logic before these lines in mint()\nunchecked {\n  if (priceLower < currentPrice && currentPrice < priceUpper) liquidity += uint128(_liquidity);\n}\n\nnearestTick = Ticks.insert(\nticks,\nfeeGrowthGlobal0,\nfeeGrowthGlobal1,\nsecondsPerLiquidity, // should calculate and use latest secondsPerLiquidity value\n    ...\n);\n\n// insert logic before before these lines in burn()\nunchecked {\n  if (priceLower < currentPrice && currentPrice < priceUpper) liquidity -= amount;\n}\n```\n\n**[sarangparikh22 (Sushi) disputed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/15#issuecomment-954274917):**\n > The secondsPerLiquidity is same, changing the order of that will not affect anything, since it is not getting calculated at the mint or burn function.\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/15#issuecomment-967159284):**\n > @sarangparikh22 (Sushi), could you please elaborate on why this isn't an issue?\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/15#issuecomment-970862817):**\n > @alcueca (judge) my apologies, this is an issue. I could confirm this.\n\n## [[H-13] Burning does not update reserves](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/51)\n_Submitted by cmichel, also found by 0xsanson, broccoli, and pauliax_\n\nThe `ConcentratedLiquidityPool.burn` function sends out `amount0`/`amount1` tokens but only updates the reserves by decreasing it by the **fees of these amounts**.\n\n```solidity\nunchecked {\n    // @audit decreases by fees only, not by amount0/amount1\n    reserve0 -= uint128(amount0fees);\n    reserve1 -= uint128(amount1fees);\n}\n```\n\nThis leads to the pool having wrong reserves after any `burn` action.\nThe pool's balance will be much lower than the reserve variables.\n\n#### Impact\nAs the pool's actual balance will be much lower than the reserve variables, `mint`ing and `swap`ing will not work correctly either.\nThis is because of the `amount0Actual + reserve0 <= _balance(token0)` check in `mint` using a much higher `reserve0` amount than the actual balance (already including the transferred assets from the user). An LP provider will have to make up for the missing reserve decrease from `burn` and pay more tokens.\n\nThe same holds true for `swap` which performs the same check in `_updateReserves`.\n\nThe pool essentially becomes unusable after a `burn` as LPs / traders need to pay more tokens.\n\n#### Recommended Mitigation Steps\nThe reserve should be decreased by what is transferred out. In `burn`'s case this is `amount0` / `amount1`.\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/51)**\n\n## [[H-14] `ConcentratedLiquidityPool`: `rangeFeeGrowth` and `secondsPerLiquidity` math needs to be unchecked](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/13)\n_Submitted by hickuphh3_\n\n##### Impact\nThe fee growth mechanism, and by extension, `secondsPerLiquidity` mechanism of Uniswap V3 has the ability to underflow. It is therefore a necessity for the math to (ironically) be unsafe / unchecked.\n\n##### Proof of Concept\n\nAssume the following scenario and initial conditions:\n\n*   Price at parity (nearestTick is 0)\n*   tickSpacing of 10\n*   Swaps only increase the price (nearestTick moves up only)\n*   `feeGrowthGlobal` initializes with 0, increases by 1 for every tick moved for simplicity\n*   Existing positions that provide enough liquidity and enable nearestTick to be set to values in the example\n*   Every tick initialized in the example is ≤ nearestTick, so that its `feeGrowthOutside` = `feeGrowthGlobal`\n\n1.  When nearestTick is at 40, Alice creates a position for uninitialised ticks \\[-20, 30]. The ticks are initialized, resulting in their `feeGrowthOutside` values to be set to 40.\n2.  nearestTick moves to 50. Bob creates a position with ticks \\[20, 30] (tick 20 is uninitialised, 30 was initialized from Alice's mint). tick 20 will therefore have a `feeGrowthOutside` of 50.\n3.  Let us calculate `rangeFeeGrowth(20,30)`.\n    *   lowerTick = 20, upperTick = 30\n    *   feeGrowthBelow = 50 (lowerTick's `feeGrowthOutside`) since lowerTick < currentTick\n    *   feeGrowthAbove = 50 - 40 = 10 (feeGrowthGlobal - upperTick's `feeGrowthOutside`) since upperTick < currentTick\n    *   feeGrowthInside\n\n        \\= feeGrowthGlobal - feeGrowthBelow - feeGrowthAbove\n\n        \\= 50 - 50 - 10\n\n        \\= -10\n\nWe therefore have negative `feeGrowthInside`.\n\nThis behaviour is actually acceptable, because the important thing about this mechanism is the relative values to each other, not the absolute values themselves.\n\n##### Recommended Mitigation Steps\n`rangeFeeGrowth()` and `rangeSecondsInside()` has to be unchecked. In addition, the subtraction of `feeGrowthInside` values should also be unchecked in `_updatePosition()` and `ConcentratedLiquidityPosition#collect()`.\n\nThe same also applies for the subtraction of `pool.rangeSecondsInside` and `stake.secondsInsideLast` in `claimReward()` and `getReward()` of the `ConcentratedLiquidityPoolManager` contract.\n\n**[sarangparikh22 (Sushi) disputed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/13#issuecomment-962142019):**\n > Can you give more elaborate example.\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/13#issuecomment-967134083):**\n > @sarangparikh22 (Sushi), I find the example quite elaborate. It shows an specific example in which underflow is desired, by comparing with other platform using similar mechanics. It explains that with your current implementation you can't have negative `feeGrowthInside`, which is a possible and acceptable scenario. Could you please elaborate on what your grounds are for disputing this finding?\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/13#issuecomment-972200918):**\n > @alcueca (judge) Yes this a valid issue.\n\n## [[H-15] `ConcentratedLiquidityPool`: `initialPrice` should be checked to be within allowable range](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/11)\n_Submitted by hickuphh3_\n\n##### Impact\nNo check is performed for the initial price. This means that it can be set to be below the `MIN_SQRT_RATIO` or above `MAX_SQRT_RATIO` (Eg. zero value), which will prevent the usability of all other functions (minting, swapping, burning).\n\nFor example, `Ticks.insert()` would fail when attempting to calculate `actualNearestTick = TickMath.getTickAtSqrtRatio(currentPrice);`, which means no one will be able to mint positions.\n\n##### Recommended Mitigation Steps\nCheck the `initialPrice` is within the acceptable range, ie. `MIN_SQRT_RATIO <= initialPrice <= MAX_SQRT_RATIO`\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/11)**\n\n## [[H-16] Possible attacks on Seconds * Liquidity calculation](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/8)\n\nThis is a possible line of attack on the staking contract, in particular the `claimReward()` function: [`ConcentratedLiquidityPoolManager.sol#L90` L94](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L90-L94)\n\n1.  A user with some spare capital mints a liquidity position with a very tight range (1-2 ticks wide) at the current price. Because the range is so small, his position.liquidity on his NFT is large (DyDxMath.sol).\n\n2.  The user then sets up a bot to frontrun any price changes that someone else tries to do, burning his position after claiming rewards. He then mints a new liquidity position at the new price after the other persons trades go through.\n\n3.  Rinse and repeat this process. If done correctly, no funds are at risk from the bot owner, he doesn't pay any fees for burning/minting either.\n\nSo what you have left is a sequence of positions with high position.liquidity and in the correct price range all the time, without taking on any risk. Thereby stealing incentive funds.\n\nThe lines below reward the bot owner with a large amount of the token:\n\n[`ConcentratedLiquidityPoolManager.sol#L90` L94](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L90-L94)\nRecommendation:\n\nLock the positions during a set time while they are staked.\n\n**[sarangparikh22 (Sushi) disputed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/8#issuecomment-954283114):**\n > This seems very unlikely to happen and does not affect the pool, it's equivalent to just re balancing your position.\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/8#issuecomment-967138536):**\n > @sarangparikh22 (Sushi), Isn't the warden describing a Just In Time liquidity pattern?\n\n**[sarangparikh22 (Sushi) acknowledged](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/8#issuecomment-970872759):**\n > @alcueca (judge) yes exactly, even done right, the bot would still face huge IL. We don't intend to solve this.\n\n## [[H-17] Understanding the fee growth mechanism (why `nearestTick` is unsuitable)](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/1)\n_Submitted by hickuphh3_\n\n#### Introduction\nUniswap V3's whitepaper describes the fee growth mechanism, but the intuition behind it is not explained well (IMO). I've not been able to find any material that tries to describe it, so allow me the luxury of doing so. It is crucial to understand how it works, so that other issues regarding the fee growth variables (and by extension, secondsPerLiquidity) raised by fellow wardens / auditors are better understood by readers.\n\n#### Objective\nWe want a way to accurately track the fees accumulated by a position. Fees should only be given to the position it is active (the current tick / price is within the lower and upper ticks of the position).\n\n#### feeGrowthGlobal\n\nDefined as the total amount of fees that would have been earned by 1 unit of unbounded liquidity that was deposited when the contract was first initialized. For simplicity, we can take this to be the range between `MIN_TICK` and `MAX_TICK`. We represent it visually like this:\n\n```jsx\n// <-------------------------------------------------------------------------->\n// MIN_TICK                                                               MAX_TICK\n```\n\n#### feeGrowthOutside\n\nThe fee growth per unit of liquidity on the *other* side of this tick (relative to the current tick). What does this mean?\n\nAs defined, it is the fee growth **relative** to the current tick. Based on the convention, we define 2 cases:\n\n*   Case 1: initialized tick ≤ pool tick\n*   Case 2: Initialized tick > pool tick\n\nVisually, the feeGrowthOutside will look like this:\n\n```jsx\n// CASE 1\n// <--------------------|--------------------|\n// MIN_TICK         INIT_TICK            POOL_TICK\n// <-----------------------------------------|\n// MIN_TICK                        INIT_TICK = POOL_TICK\n\n// CASE 2\n//                                           |--------------------|---------------->\n//                                       POOL_TICK           INIT_TICK          MAX_TICK\n```\n\nHence, regardless of whether the tick to initialize is either a lower or upper tick of a position, the `feeGrowthOutside` value that it is referring to is **relatve** to the pool tick.\n\nIn other words, if initialized tick ≤ pool tick, then its `feeGrowthOutside` is towards `MIN_TICK`. Otherwise, its `feeGrowthOutside` is towards `MAX_TICK`.\n\n##### Initialization\n\nBy convention, when a tick is initialized, all fee growth is assumed to happen below it. Hence, the feeGrowthOutside is initialized to the following values:\n\n*   Case 1: tick's feeGrowthOutside = feeGrowthGlobal\n*   Case 2: tick's feeGrowthOtuside = 0\n\n#### Implications\n\nOne should now understand why the `feeGrowthOutside` value is being flipped when crossing a tick, ie. `tick.feeGrowthOutside = feeGrowthGlobal - tick.feeGrowthOutside` in `Tick.cross()`, because it needs to follow the definition. (Case 1 becomes case 2 and vice versa).\n\nIt should hopefully become clear why **using `nearestTick` as the reference point for fee growth calculations instead of the pool tick might not a wise choice.** (Case 1 and 2 becomes rather ambiguous).\n\n#### Range fee growth / feeGrowthInside\n\nGoing back to our objective of calculating the fee growth accumulated for a position, we can break it down into 3 cases (take caution with the boundary cases), and understand how their values are calculated. In general, we take it to be feeGrowthGlobal - fee growth below lower tick - fee growth above upper tick (see illustrations), although it can be simplified further.\n\n1.  pool tick < lower tick\n\n    ```jsx\n    // ---------------------|---------------------|-----------------|-----------------\n    //                  POOL_TICK            LOWER_TICK          UPPER_TICK\n    // <---------------------------- feeGrowthGlobal -------------------------------->\n    //       LOWER_TICK.feeGrowthOutside (CASE 2) |---------------------------------->\n    //                         UPPER_TICK.feeGrowthOutside (CASE 2) |---------------->\n\n    // we want the range between LOWER_TICK and UPPER_TICK\n    // = LOWER_TICK.feeGrowthOutside - UPPER_TICK.feeGrowthOutside\n\n    // alternatively, following the general formula, it is\n    // = feeGrowthGLobal - fee growth below LOWER_TICK - fee growth above UPPER_TICK\n    // = feeGrowthGlobal - (feeGrowthGlobal - LOWER_TICK.feeGrowthOutside) - UPPER_TICK.feeGrowthOtuside\n    // = LOWER_TICK.feeGrowthOutside - UPPER_TICK.feeGrowthOutside\n    ```\n\n2.  lower tick ≤ pool tick < upper tick\n\n    ```jsx\n    // ---------------------|---------------------|-----------------|-----------------\n    //                  LOWER_TICK            POOL_TICK        UPPER_TICK\n    // <---------------------------- feeGrowthGlobal -------------------------------->\n    // <--------------------| LOWER_TICK's feeGrowthOutside (CASE 1)\n    //                       UPPER_TICK's feeGrowthOutside (CASE 2) |---------------->\n\n    // we want the range between LOWER_TICK and UPPER_TICK\n    // = feeGrowthGLobal - fee growth below LOWER_TICK - fee growth above UPPER_TICK\n    // = feeGrowthGLobal - LOWER_TICK.feeGrowthOutside - UPPER_TICK.feeGrowthOutside\n    ```\n\n3.  upper tick ≤ pool tick\n\n    ```jsx\n    // ---------------------|---------------------|-----------------|-----------------\n    //                  LOWER_TICK            POOL_TICK        UPPER_TICK\n    // <---------------------------- feeGrowthGlobal -------------------------------->\n    // <--------------------| LOWER_TICK's feeGrowthOutside (CASE 1)\n    // <------------------------------------------------------------| UPPER_TICK's feeGrowthOutside (CASE 1)\n\n    // we want the range between LOWER_TICK and UPPER_TICK\n    // = UPPER_TICK.feeGrowthOutside - LOWER_TICK.feeGrowthOutside\n\n    // alternatively, following the general formula, it is\n    // = feeGrowthGLobal - fee growth below LOWER_TICK - fee growth above UPPER_TICK\n    // = feeGrowthGLobal - LOWER_TICK.feeGrowthOutside - (feeGrowthGlobal - UPPER_TICK.feeGrowthOutside)\n    // = UPPER_TICK.feeGrowthOutside - LOWER_TICK.feeGrowthOutside\n    ```\n\n#### Handling The Boundary Case\n\nAn under appreciated, but very critical line of Uniswap V3's pool contract is the following:\n\n`state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;`\n\nIt serves a dual purpose:\n\n1.  Because of how Tick Bitmap works, the tick needs to be manually decremented by 1 so that the next tick to be found is in the next word.\n2.  More importantly, it handles the boundary case, where `zeroForOne` is true (pool tick goes down). In this scenario, case 1 becomes case 2 when the tick is crossed. However, should the poolTick after the swap be equal to `step.tickNext`, then when calculating fee growth inside a position that so happens to have `step.tickNext` as one of its ticks, it will be treated as case 1 (poolTick = lowerTick / upperTick) when it is required to be treated as case 2.\n\n#### Impact\nHopefully, this writeup helps readers understand the fee growth mechanism and its workings. More importantly, I hope it helps the team to understand why using `nearestTick` as the reference point for fee growth mechanism is unsuitable. Specifically, we have 2 high severity issues:\n\n*   Wrong initialization value of `feeGrowthOutside` in the case either the lower or upper tick becomes the `nearestTick` upon insertion of a new tick.\n    *   You are (in a sense) crossing the old nearestTick, so its `secondsPerLiquidityOutside` has to be flipped\n    *   The lower / upper tick's `feeGrowthOutside` is incorrectly initialized to be `0` when it should be `feeGrowthOutside`\n*   Case 1 and 2 becomes ambiguous. When a position is modified with either tick being `nearestTick`, it is treated to be case 1 when in fact there are times it should be treated as case 2.\n\n#### Recommended Mitigation Steps\nHaving a pool tick counter that closely matches the current pool price is rather critical for fee growth and seconds per liquidity initializations / calculations.\n\nWhere relevant, the `nearestTick` should be replaced by `poolTick`.\n\n**[sarangparikh22 (Sushi) acknowledged](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/1)**\n\n# Medium Risk Findings (7)\n\n## [[M-01] Incentive should check that it hasn't started yet](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/42)\n_Submitted by cmichel, also found by pauliax_\n\nThe `ConcentratedLiquidityPoolManager.addIncentive` function can add an incentive that already has a non-zero `incentive.secondsClaimed`.\n\n#### Impact\nRewards will be wrong.\n\n#### Recommended Mitigation Steps\nAdd a check: `require(incentive.secondsClaimed == 0, \"!secondsClaimed\")`.\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/42)**\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/42#issuecomment-966994095):**\n > Assets are at risk after a wrong governance action. Severity 2.\n\n## [[M-02] Cannot claim reward](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/41)\n_Submitted by cmichel, also found by 0xsanson, broccoli, hickuphh3, and WatchPug_\n\nThe `ConcentratedLiquidityPoolManager.claimReward` requires `stake.initialized` but it is never set.\nIt also performs a strange computation as `128 - incentive.secondsClaimed` which will almost always underflow and revert the transaction.\n\n#### Impact\nOne cannot claim rewards.\n\n#### Recommended Mitigation Steps\nRethink how claiming rewards should work.\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/41)**\n\n## [[M-03] `ConcentratedLiquidityPoolHelper`: `getTickState()` might run out of gas](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/17)\n_Submitted by hickuphh3, also found by cmichel_\n\n##### Impact\n`getTickState()` attempts to fetch the state of all inserted ticks (including `MIN_TICK` and `MAX_TICK`) of a pool. Depending on the tick spacing, this function may run out of gas.\n\n##### Recommended Mitigation Steps\nHave a starting index parameter to start the iteration from. Also, `tickCount` can be made use of more meaningfully to limit the number of iterations performed.\n\n```jsx\nfunction getTickState(\n\tIConcentratedLiquidityPool pool,\n\tint24 startIndex,\n\tuint24 tickCount\n) external view returns (SimpleTick[] memory) {\n  SimpleTick[] memory ticks = new SimpleTick[](tickCount);\n\n  IConcentratedLiquidityPool.Tick memory tick;\n\tint24 current = startIndex;\n\n\tfor (uint24 i; i < tickCount; i++) {\n\t\ttick = pool.ticks(current);\n\t\tticks[i] = SimpleTick({index: current, liquidity: tick.liquidity});\n\t\t// reached end of linked list, exit loop\n\t\tif (current == TickMath.MAX_TICK) break;\n\t\t// else, continue with next iteration\n\t\tcurrent = tick.nextTick;\n\t}\n\n  return ticks;\n}\n```\n\n**[sarangparikh22 (Sushi) acknowledged](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/17)**\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/17#issuecomment-967004172):**\n > Functionality is affected, severity 2.\n\n## [[M-04] Users cannot receive rewards from `ConcentratedLiquidityPoolManager` if their liquidity is too large](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/88)\n_Submitted by broccoli_\n\n#### Impact\nThere could be an integer underflow error when the reward of an incentive is claimed, forcing users to wait for a sufficient period or reduce their liquidity to claim the rewards.\n\n#### Proof of Concept\nThe unclaimed reward that a user could claim is proportional to the `secondsInside`, which is, in fact, proportional to the position's liquidity. It is possible that the liquidity is too large and causes `secondsInside` to be larger than `secondsUnclaimed`. As a result, the rewards that the user wants to claim exceed the `incentive.rewardsUnclaimed` and causes an integer underflow error, which prevents him from getting the rewards.\n\nReferenced code:\n- [ConcentratedLiquidityPoolManager.sol#L94-L95](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L94-L95)\n\n#### Recommended Mitigation Steps\nCheck whether the `rewards` exceeds the `incentive.rewardsUnclaimed`. If so, then send only `incentive.rewardsUnclaimed` amount of rewards to the user.\n\n**[sarangparikh22 (Sushi) acknowledged](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/88#issuecomment-942705593):**\n > The problem seems very unlikely to happen, would be great to see a POC.\n\n## [[M-05] `TridentNFT.permit` should always check `recoveredAddress != 0`](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/44)\n_Submitted by cmichel, also found by pauliax_\n\nThe `TridentNFT.permit` function ignores the `recoveredAddress != 0` check if `isApprovedForAll[owner][recoveredAddress]` is true.\n\n#### Impact\nIf a user accidentally set the zero address as the operator, tokens can be stolen by anyone as a wrong signature yield `recoveredAddress == 0`.\n\n#### Recommended Mitigation Steps\nChange the `require` logic to `recoveredAddress != address(0) && (recoveredAddress == owner) || isApprovedForAll[owner][recoveredAddress])`.\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/44)**\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/44#issuecomment-966992097):**\n > Assets are not at direct risk, but they are at risk. It wouldn't be obvious to anyone that setting the zero address to the operator would lead to loss of assets. Severity 2.\n\n## [[M-06] ConcentratedLiquidityPoolManager.sol `claimReward()` and `reclaimIncentive()` will fail when `incentive.token` is `token0` or `token1`](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/23)\n_Submitted by WatchPug_\n\nIn `ConcentratedLiquidityPosition.collect()`, balances of `token0` and `token1` in bento will be used to pay the fees.\n\n[`ConcentratedLiquidityPosition.sol#L103` L116](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPosition.sol#L103-L116)\n\n```solidity\nuint256 balance0 = bento.balanceOf(token0, address(this));\nuint256 balance1 = bento.balanceOf(token1, address(this));\nif (balance0 < token0amount || balance1 < token1amount) {\n    (uint256 amount0fees, uint256 amount1fees) = position.pool.collect(position.lower, position.upper, address(this), false);\n\n    uint256 newBalance0 = amount0fees + balance0;\n    uint256 newBalance1 = amount1fees + balance1;\n\n    /// @dev Rounding errors due to frequent claiming of other users in the same position may cost us some raw\n    if (token0amount > newBalance0) token0amount = newBalance0;\n    if (token1amount > newBalance1) token1amount = newBalance1;\n}\n_transfer(token0, address(this), recipient, token0amount, unwrapBento);\n_transfer(token1, address(this), recipient, token1amount, unwrapBento);\n\n```\n\nIn the case of someone add an incentive with `token0` or `token1`, the incentive in the balance of bento will be used to pay fees until the balance is completely consumed.\n\nAs a result, when a user calls `claimReward()`, the contract may not have enough balance to pay (it supposed to have it), cause the transaction to fail.\n\n[`ConcentratedLiquidityPoolManager.sol#L78` L100](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L78-L100)\n```solidity\nfunction claimReward(\n    uint256 positionId,\n    uint256 incentiveId,\n    address recipient,\n    bool unwrapBento\n) public {\n    require(ownerOf[positionId] == msg.sender, \"OWNER\");\n    Position memory position = positions[positionId];\n    IConcentratedLiquidityPool pool = position.pool;\n    Incentive storage incentive = incentives[position.pool][positionId];\n    Stake storage stake = stakes[positionId][incentiveId];\n    require(stake.initialized, \"UNINITIALIZED\");\n    uint256 secondsPerLiquidityInside = pool.rangeSecondsInside(position.lower, position.upper) - stake.secondsInsideLast;\n    uint256 secondsInside = secondsPerLiquidityInside * position.liquidity;\n    uint256 maxTime = incentive.endTime < block.timestamp ? block.timestamp : incentive.endTime;\n    uint256 secondsUnclaimed = (maxTime - incentive.startTime) << (128 - incentive.secondsClaimed);\n    uint256 rewards = (incentive.rewardsUnclaimed * secondsInside) / secondsUnclaimed;\n    incentive.rewardsUnclaimed -= rewards;\n    incentive.secondsClaimed += uint160(secondsInside);\n    stake.secondsInsideLast += uint160(secondsPerLiquidityInside);\n    _transfer(incentive.token, address(this), recipient, rewards, unwrapBento);\n    emit ClaimReward(positionId, incentiveId, recipient);\n}\n```\nThe same issue applies to `reclaimIncentive()` as well.\n[`ConcentratedLiquidityPoolManager.sol` L49 L62](https://github.com/sushiswap/trident/blob/c405f3402a1ed336244053f8186742d2da5975e9/contracts/pool/concentrated/ConcentratedLiquidityPoolManager.sol#L49-L62)\n\n```solidity\nfunction reclaimIncentive(\n    IConcentratedLiquidityPool pool,\n    uint256 incentiveId,\n    uint256 amount,\n    address receiver,\n    bool unwrapBento\n) public {\n    Incentive storage incentive = incentives[pool][incentiveId];\n    require(incentive.owner == msg.sender, \"NOT_OWNER\");\n    require(incentive.expiry < block.timestamp, \"EXPIRED\");\n    require(incentive.rewardsUnclaimed >= amount, \"ALREADY_CLAIMED\");\n    _transfer(incentive.token, address(this), receiver, amount, unwrapBento);\n    emit ReclaimIncentive(pool, incentiveId);\n}\n```\n\n#### Recommendation\nConsider making adding `token0` or `token1` as incentives disallowed, or keep a record of total remaining incentive amounts for the incentive tokens and avoid consuming these revered balances when `collect()`.\n\n**[sarangparikh22 (Sushi) confirmed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/23)**\n\n## [[M-07] Incentives for different pools should differ by a large factor](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/10)\n\nI'm adding this as an issue because I didn't see it mentioned anywhere in the codebase, and I think its a fair point that relates to how the protocol gives out rewards to users. As I understand , the point of staking is to provide users with additional compensation for providing liquidity (and taking on risk) for the good of the protocol. If a large fraction of rewards go to users who don't provide a huge benefit to the protocol, that's a problem.\n\nConsider two different pools: USDC-DAI and USDC-ETH. Suppose a user has \\$10K worth of tokens and decides to provide liquidity to each of these pools.\n\nIn the USDC-DAI pool the user can very safely provide the \\$10K with a 1% spread between upper and lower tick. The total amount of liquidity he provides is roughly \\$10K \\* (1/0.01) = \\$1 M dollars of liquidity per second. The impermanent loss here is going to be basically 0 in normal conditions. The liquidity will be in range all the time.\n\nThe same situation in the USDC-ETH pool on the other hand:\nSuppose a user has \\$10K worth of USDC+ETH, provides it with a 1% spread between upper and lower ticks at the current price => roughly \\$1 M dollars of liquidity per second, the same as before. However, now there is a good chance that price ranges by more than 1% meaning he loses all of his more valuable tokens for the cheaper ones due to impermanent loss. The liquidity will be out of range for a much longer percentage of the time.\n\nHowever, if the incentives for each pool are the same, the staking protocol would value the liquidity per second of each LP situation equally. To make things \"fair per unit of risk/liquidity\" the incentive on the USDC-ETH should be something like 10x or 20x the incentive on the USDC-DAI pool. The pools with higher volatility should have a *significantly* higher incentive.\n\nRecommendations:\nMake sure the developers are at least aware of something like this when choosing incentive amounts for different pools. Carefully choose incentive amounts for each pool.\n\n**[sarangparikh22 (Sushi) disputed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/10#issuecomment-940867532):**\n > This is not a med-risk issue, or an issue at all, we will improve the docs, so that devs are aware on how to set the incentives.\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/10#issuecomment-967135732):**\n > Setting the incentives wrong will make the protocol leak value, which warrants a Severity 2. The issue was not disclosed, and therefore is valid.\n\n# Low Risk Findings (23)\n- [[L-01] `addIncentive` may need more inputs checked](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/76) _Submitted by 0xsanson_\n- [[L-02] Unlocked Pragma Statements](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/3) _Submitted by anon, also found by broccoli_\n- [[L-03] Sanity check on the lower and upper ticks](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/93) _Submitted by broccoli_\n- [[L-04] Incorrect comparison in the `_updatePosition` of `ConcentratedLiquidityPool`](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/91) _Submitted by broccoli_\n- [[L-05] Timestamp underflow error in `swap` function of `ConcentratedLiquidityPool`](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/90) _Submitted by broccoli_\n- [[L-06] Boundaries for timestamp values](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/68) _Submitted by pauliax_\n- [[L-07] Handle of deflationary tokens](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/65) _Submitted by pauliax_\n- [[L-08] Inclusive conditions](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/62) _Submitted by pauliax_\n- [[L-09] `TridentNFT` signature malleability](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/48) _Submitted by cmichel_\n- [[L-10] `TridentNFT.safeTransferFrom` now EIP-721 compliant](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/47) _Submitted by cmichel_\n- [[L-11] `TridentNFT._mint` can mint to zero address](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/46) _Submitted by cmichel_\n- [[L-12] `TridentNFT.permitAll` prviliges discrepancy for operator](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/45) _Submitted by cmichel_\n- [[L-13] `TridentNFT` ignores `from`](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/43) _Submitted by cmichel_\n- [[L-14] Wrong inequality when trying to subscribe to an incentive](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/40) _Submitted by cmichel_\n- [[L-15] `ConcentratedLiquidityPool`s can be created with the same tokens](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/33) _Submitted by cmichel_\n- [[L-16] `Ticks.cross` wrong comment?](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/31) _Submitted by cmichel_\n- [[L-17] `DyDxMath.getLiquidityForAmounts` underflows](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/30) _Submitted by cmichel_\n- [[L-18]  No sanity check of `_price` in the constructor](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/28) _Submitted by broccoli_\n- [[L-19] ConcentratedLiquidityPool: MAX_TICK_LIQUIDITY is checked incorrectly](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/12) _Submitted by hickuphh3_\n- [[L-20] Consider using solidity version 0.8.8](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/7)\n- [[L-21] Implement or remove functions](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/6)\n- [[L-22] `subscribe` can be called by anyone](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/77) _Submitted by 0xsanson, also found by pauliax_\n- [[L-23] _burn should decrement totalSupply](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/60) _Submitted by pauliax_\n\n# Non-Critical Findings (9)\n- [[N-01] `ConcentratedLiquidityPool.Sync` event never used](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/32) _Submitted by cmichel_\n- [[N-02] Style issues](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/74) _Submitted by pauliax_\n- [[N-03] uint32 for timestamps](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/63) _Submitted by pauliax_\n- [[N-04] Replace hex numbers with .selector](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/58) _Submitted by pauliax_\n- [[N-05] `ConcentratedLiquidityPoolManager.sol#reclaimIncentive` Misleading error message](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/54) _Submitted by WatchPug_\n- [[N-06] Spelling Errors](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/22) _Submitted by hickuphh3_\n- [[N-07] Ticks: `getMaxLiquidity()` formula should be explained](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/21) _Submitted by hickuphh3_\n- [[N-08] Possible underflow if other checks aren't used](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/5)\n- [[N-09] `incentiveId <= incentiveCount[pool]` is bad and can be removed](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/79) _Submitted by 0xsanson, also found by broccoli_\n\n# Gas Optimizations (7)\n- [[G-01] Useless state variable wETH](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/73) _Submitted by pauliax_\n- [[G-02] Unused import](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/72) _Submitted by pauliax_\n- [[G-03] Struct could be optimized for saving gas](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/57) _Submitted by WatchPug_\n- [[G-04] Cache storage variables in the stack can save gas](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/56) _Submitted by WatchPug_\n- [[G-05] Adding unchecked directive can save gas](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/55) _Submitted by WatchPug_\n- [[G-06] Gas: `ConcentratedLiquidityPoolManager.addIncentive` ](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/49) _Submitted by cmichel_\n- [[G-07] `addIncentive` and `reclaimIncentive` can be external](https://github.com/code-423n4/2021-09-sushitrident-2-findings/issues/75) _Submitted by 0xsanson_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}