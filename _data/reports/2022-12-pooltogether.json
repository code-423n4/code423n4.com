{
  "circa": {
    "title": "PoolTogether contest",
    "sponsor": "PoolTogether",
    "slug": "2022-12-pooltogether",
    "date": "2023-01-20",
    "findings": "https://github.com/code-423n4/2022-12-pooltogether-findings/issues",
    "contest": 188
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the PoolTogether smart contract system written in Solidity. The audit contest took place between December 1—December 5 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>19 Wardens contributed reports to the PoolTogether contest:</p>\n<ol>\n<li>0x4non</li>\n<li>0x52</li>\n<li><a href=\"https://twitter.com/0xSmartContract\">0xSmartContract</a></li>\n<li><a href=\"https://twitter.com/akshaysrivastv\">AkshaySrivastav</a></li>\n<li><a href=\"https://chom.dev\">Chom</a></li>\n<li>Madalad</li>\n<li>Rolezn</li>\n<li>Tricko</li>\n<li><a href=\"https://github.com/romeroadrian\">adriro</a></li>\n<li>cccz</li>\n<li>cryptonue</li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li>enckrish</li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li>hihen</li>\n<li><a href=\"https://twitter.com/JoeStakey\">joestakey</a></li>\n<li>ktg</li>\n<li>ladboy233</li>\n<li>neko_nyaa</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/GalloDaSballo\">Alex the Entreprenerd</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 3 unique vulnerabilities. Of these vulnerabilities, 0 received a risk rating in the category of HIGH severity and 3 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 4 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 8 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-12-pooltogether\">C4 PoolTogether contest repository</a>, and is composed of 7 smart contracts written in the Solidity programming language and includes 279 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"medium-risk-findings-3\" style=\"position:relative;\"><a href=\"#medium-risk-findings-3\" aria-label=\"medium risk findings 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (3)</h1>\n<h2 id=\"m-01-an-attacker-can-make-users-unable-to-cancel-their-l1-calls-on-ethereum-to-arbitrum\" style=\"position:relative;\"><a href=\"#m-01-an-attacker-can-make-users-unable-to-cancel-their-l1-calls-on-ethereum-to-arbitrum\" aria-label=\"m 01 an attacker can make users unable to cancel their l1 calls on ethereum to arbitrum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60\">[M-01] An attacker can make users unable to cancel their L1 calls on Ethereum To Arbitrum</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60\">ktg</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/94\">0x52</a></em></p>\n<p><a href=\"https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-arbitrum/EthereumToArbitrumRelayer.sol#L118-#L127\">EthereumToArbitrumRelayer.sol#L118-#L127</a><br></p>\n<p>When someone wants to make  calls to Arbitrum from Ethereum, first they call <code>relayCalls</code> to fingerprint their data and then anyone else can call <code>processCalls</code> to process the calls. According to the doc in Inbox source code <a href=\"https://github.com/OffchainLabs/nitro/blob/1f32bec6b9b228bb2fab4bfa02867716f65d0c5c/contracts/src/bridge/Inbox.sol#L427\">https://github.com/OffchainLabs/nitro/blob/1f32bec6b9b228bb2fab4bfa02867716f65d0c5c/contracts/src/bridge/Inbox.sol#L427</a>, function <code>createRetryableTicket</code> has one parameter called <code>callValueRefundAddress</code> and this is the address that is granted the option to <code>cancel</code> a <code>Retryable</code>. In <code>EthereumToArbitrumRelayer.sol</code> it’s currently set as <code>msg.sender</code> (5th parameter) which is whoever make the call to  function <code>processCall</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 _ticketID = inbox.createRetryableTicket{ value: msg.value }(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      address(executor),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      0,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      _maxSubmissionCost,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      msg.sender,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      msg.sender,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      _gasLimit,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      _gasPriceBid,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      _data</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    );</span></span></code></pre>\n<p>This implementation allows an attacker to remove the possibility of a user to cancel their calls, which is an important mechanism to be properly implemented. This scenario demonstrates how this could happen:</p>\n<ul>\n<li>User A call <code>relayCalls</code> to fingerprint their calls</li>\n<li>User B call <code>processCalls</code> to process user A’s calls.</li>\n<li>User A now changes his mind and wants to cancel his calls but he’s unable to since  <code>callValueRefundAddress</code> is set to user B’s address, now user B is the one who decides whether to cancel user A’s calls or not, which should be user A’s option.</li>\n<li>Another common case is when users’s calls failed, anyone can try to <code>redeem</code> it, according to the doc <a href=\"https://developer.arbitrum.io/arbos/l1-to-l2-messaging\">https://developer.arbitrum.io/arbos/l1-to-l2-messaging</a>. So if a someone calls <code>processCalls</code> to process others’s calls and it fails, the owner of the calls now cannot cancel their calls and anyone else can redeem (reexecute) them.</li>\n</ul>\n<p>It should be noted here that <code>EthereumToArbitrumRelayer.sol</code> provides no other functionality to cancel users’s calls, but it seems to rely only on Arbitrum’s Retryable cancel mechanism to do so.</p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Currently, anyone can process others’s calls by calling <code>processCalls</code> functions and I think this does not pose any security risk as long as the user who actually fingerprinted these calls can reserve their rights to cancel it if they want to. Therefore, I recommend changing <code>callValueRefundAddress</code> in <code>createRetryableTicket</code> to <code>_sender</code>, this combines with event <code>ProcessedCalls(_nonce, msg.sender, _ticketID)</code> emitted at the end of <code>processCalls</code> function will allow a user to be notified if their calls has been processed by anyone else and they can cancel it in L2 using <code>_ticketID</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60#issuecomment-1345665985\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Relayer has privilege to cancel arbitrum txs, I think there may be a similar finding, but for now will keep separate.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60#issuecomment-1352223144\">PierrickGT (PoolTogether) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Very nice find! I’ve fixed the issue in the following PR: <a href=\"https://github.com/pooltogether/ERC5164/pull/10\">https://github.com/pooltogether/ERC5164/pull/10</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60#issuecomment-1365451144\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Worth flagging that allowing the caller to pass an arbitrary address may not solve, as I’d argue the only address that would rationally prevent the grief is the <code>_sender</code>, not fully sure if that is sufficient though.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60#issuecomment-1365451641\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The Warden has shown a specific scenario in which Arbitrum tickets, which are meant to be cancellable by the caller / the sender, can be griefed.</p>\n<p>Because this breaks the expectations of the code, and denies a functionality which was explicitly added, I agree with Medium Severity.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-when-a-smart-contract-calls-crosschainrelayerarbitrumprocesscalls-excess-submission-fees-may-be-lost\" style=\"position:relative;\"><a href=\"#m-02-when-a-smart-contract-calls-crosschainrelayerarbitrumprocesscalls-excess-submission-fees-may-be-lost\" aria-label=\"m 02 when a smart contract calls crosschainrelayerarbitrumprocesscalls excess submission fees may be lost permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63\">[M-02] When a smart contract calls <code>CrossChainRelayerArbitrum.processCalls</code>, excess submission fees may be lost</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63\">cccz</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/223\">joestakey</a>, <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/197\">enckrish</a>, and <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/42\">Chom</a></em></p>\n<p>When the user calls CrossChainRelayerArbitrum.processCalls, ETH is sent as the submission fee.</p>\n<p>According to the documentation : <a href=\"https://github.com/OffchainLabs/arbitrum/blob/master/docs/L1_L2_Messages.md#retryable-transaction-lifecycle\">https://github.com/OffchainLabs/arbitrum/blob/master/docs/L1_L2_Messages.md#retryable-transaction-lifecycle</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Credit-Back Address: Address to which all excess gas is credited on L2; i.e., excess ETH for base submission cost (MaxSubmissionCost - ActualSubmissionCostPaid) and excess ETH provided for L2 execution ( (GasPrice x MaxGas) - ActualETHSpentInExecution).</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Submission fee is collected: submission fee is deducted from the sender’s L2 account; MaxSubmissionCost - submission fee is credited to Credit-Back Address.</span></span></code></pre>\n<p>The excess submission fee is refunded to the address on L2 of the <code>excessFeeRefundAddress</code> provided when calling <code>createRetryableTicket</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @</span><span class=\"mtk12\">notice</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Put</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span><span class=\"mtk1\"> </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">L2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">inbox</span><span class=\"mtk1\"> </span><span class=\"mtk12\">that</span><span class=\"mtk1\"> </span><span class=\"mtk12\">can</span><span class=\"mtk1\"> </span><span class=\"mtk12\">be</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reexecuted</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">some</span><span class=\"mtk1\"> </span><span class=\"mtk12\">fixed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">time</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> </span><span class=\"mtk12\">it</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reverts</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @</span><span class=\"mtk12\">dev</span><span class=\"mtk1\"> </span><span class=\"mtk12\">all</span><span class=\"mtk1\"> </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> </span><span class=\"mtk12\">will</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deposited</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\"> </span><span class=\"mtk12\">callValueRefundAddress</span><span class=\"mtk1\"> </span><span class=\"mtk12\">on</span><span class=\"mtk1\"> </span><span class=\"mtk12\">L2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destAddr</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destination</span><span class=\"mtk1\"> </span><span class=\"mtk12\">L2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">address</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">l2CallValue</span><span class=\"mtk1\"> </span><span class=\"mtk12\">call</span><span class=\"mtk1\"> </span><span class=\"mtk12\">value</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">retryable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">L2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\">  </span><span class=\"mtk12\">maxSubmissionCost</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Max</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gas</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deducted</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk8\">&#39;s L2 balance to cover base submission fe</span><span class=\"mtk14\">e</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">excessFeeRefundAddress</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxgas</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gasprice</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">execution</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cost</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gets</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credited</span><span class=\"mtk1\"> </span><span class=\"mtk12\">here</span><span class=\"mtk1\"> </span><span class=\"mtk12\">on</span><span class=\"mtk1\"> </span><span class=\"mtk12\">L2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">callValueRefundAddress</span><span class=\"mtk1\"> </span><span class=\"mtk12\">l2Callvalue</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gets</span><span class=\"mtk1\"> </span><span class=\"mtk12\">credited</span><span class=\"mtk1\"> </span><span class=\"mtk12\">here</span><span class=\"mtk1\"> </span><span class=\"mtk12\">on</span><span class=\"mtk1\"> </span><span class=\"mtk12\">L2</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> </span><span class=\"mtk12\">retryable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">txn</span><span class=\"mtk1\"> </span><span class=\"mtk12\">times</span><span class=\"mtk1\"> </span><span class=\"mtk12\">out</span><span class=\"mtk1\"> </span><span class=\"mtk12\">or</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gets</span><span class=\"mtk1\"> </span><span class=\"mtk12\">cancelled</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxGas</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Max</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gas</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deducted</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk8\">&#39;s L2 balance to cover L2 executio</span><span class=\"mtk14\">n</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gasPriceBid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bid</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">L2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">execution</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @</span><span class=\"mtk12\">param</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ABI</span><span class=\"mtk1\"> </span><span class=\"mtk12\">encoded</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\"> </span><span class=\"mtk4\">of</span><span class=\"mtk1\"> </span><span class=\"mtk12\">L2</span><span class=\"mtk1\"> </span><span class=\"mtk12\">message</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     * @</span><span class=\"mtk12\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">unique</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> </span><span class=\"mtk12\">for</span><span class=\"mtk1\"> </span><span class=\"mtk12\">retryable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transaction</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">requestID</span><span class=\"mtk1\">, </span><span class=\"mtk11\">uint</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">createRetryableTicket</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destAddr</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">l2CallValue</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxSubmissionCost</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">excessFeeRefundAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">callValueRefundAddress</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxGas</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gasPriceBid</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyWhitelisted</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span></code></pre>\n<p>In <code>CrossChainRelayerArbitrum.processCalls</code>, <code>excessFeeRefundAddress == msg.sender</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_ticketID</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">inbox</span><span class=\"mtk1\">.</span><span class=\"mtk12\">createRetryableTicket</span><span class=\"mtk1\">{ value: </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> }(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">executor</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_maxSubmissionCost</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,   </span><span class=\"mtk3\">// @audit : excessFeeRefundAddress</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">,  </span><span class=\"mtk3\">// @audit: callValueRefundAddress</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_gasLimit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_gasPriceBid</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_data</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span></code></pre>\n<p>For EOA accounts, the excess submission fees are correctly refunded to their address on L2.\nHowever, for smart contracts, since there may not exist a corresponding address on L2, these excess submission fees will be lost.</p>\n<p>Also, since the <code>callValueRefundAddress</code> is also <code>msg.sender</code>, according to the documentation, if the Retryable Ticket is cancelled or expired, then the smart contract caller may lose all the submission fees</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">If the Retryable Ticket is cancelled or expires before it is redeemed, Callvalue is credited to Beneficiary.</span></span></code></pre>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-arbitrum/EthereumToArbitrumRelayer.sol#L118-L127\">https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-arbitrum/EthereumToArbitrumRelayer.sol#L118-L127</a></p>\n<p><a href=\"https://github.com/OffchainLabs/arbitrum/blob/master/packages/arb-bridge-eth/contracts/bridge/Inbox.sol#L333-L354\">https://github.com/OffchainLabs/arbitrum/blob/master/packages/arb-bridge-eth/contracts/bridge/Inbox.sol#L333-L354</a></p>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider allowing the user to specify <code>excessFeeRefundAddress</code> and <code>callValueRefundAddress</code> when calling <code>CrossChainRelayerArbitrum.processCalls</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63#issuecomment-1345650911\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Making primary for quality of info.</p>\n<p>Ultimately boils down to the idea that contracts won’t get a refund. Will have to think about whether this Med (submitted as such), or Low (self-inflicted).</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63#issuecomment-1350288109\">PierrickGT (PoolTogether) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Fixed in this PR: <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63\">https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63</a></p>\n<p>The <code>processCalls</code> function was intended to be called by an EOA only but it’s true that a contract may want to call it while providing the required <code>_gasLimit</code>, <code>_maxSubmissionCost</code> and <code>_gasPriceBid</code> by an EOA.<br>\nPassing a <code>refundAddress</code> variable will allow a contract to refund the EOA that called it.</p>\n<p>Regarding the severity, I think 2 (Med Risk) is appropriate since the contract would leak value.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63#issuecomment-1365313747\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with finding, am conflicted on severity:</p>\n<ul>\n<li>Low -> User sends more than necessary</li>\n<li>Med -> Behaviour, is inconsistent to expected / intended functionality</li>\n</ul>\n<p>Will think about it further.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63#issuecomment-1365317980\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>More specifically, the fact that the system wants to allow refunds and has a bug that prevents that, which would qualify as Medium. (We care if you send more, we will send it back, but because of bug we cannot)</p>\n<p>While the pre-condition, in case of a less sophisticated system, would most likely be Low (we don’t care if you send more, don’t send more)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63#issuecomment-1365508732\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The Warden has shown an incorrect implementation, which can cause excess fees to be lost.</p>\n<p>While the loss of excess fees could be considered Low Severity (self-inflicted), the integration mistake is worth flagging and warrants the increased severity. </p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-crosschainexecutor-contracts-do-not-update-the-necessary-states-for-failing-transactions\" style=\"position:relative;\"><a href=\"#m-03-crosschainexecutor-contracts-do-not-update-the-necessary-states-for-failing-transactions\" aria-label=\"m 03 crosschainexecutor contracts do not update the necessary states for failing transactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166\">[M-03] <code>CrossChainExecutor</code> contracts do not update the necessary states for failing transactions</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166\">AkshaySrivastav</a>, also found by <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/160\">ladboy233</a>, <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/49\">hihen</a>, and <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/18\">csanuragjain</a></em></p>\n<p><a href=\"https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-optimism/EthereumToOptimismExecutor.sol#L45-L59\">EthereumToOptimismExecutor.sol#L45-L59</a><br>\n<a href=\"https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-arbitrum/EthereumToArbitrumExecutor.sol#L31-L45\">EthereumToArbitrumExecutor.sol#L31-L45</a></p>\n<p>The <code>CrossChainExecutorArbitrum</code> and <code>CrossChainExecutorOptimism</code> contracts both use <code>CallLib</code> library to invoke <code>Call</code>s on external contract. As per the <code>CallLib</code> library implementation, any failing <code>Call</code> results in the entire transaction getting reverted.</p>\n<p>The <code>CrossChainExecutor</code> contracts does not store whether the calls in <code>CallLib.Call[]</code> were already attempted which failed.</p>\n<p>This creates several issues for <code>CrossChainExecutor</code> contracts.</p>\n<ol>\n<li>Offchain components can be tricked to submit failing <code>Call[]</code>s again and again. This can be used to drain the offchain component of gas.</li>\n<li>Once a failing <code>Call[]</code> was invoked (which failed) and if again the same <code>Call[]</code> is invoked, the transaction should revert with <code>CallsAlreadyExecuted</code> error but it reverts with <code>CallFailure</code> error.</li>\n<li>It is difficult to determine whether a to-be executed <code>Call[]</code> is pending or the invocation was already tried but failed.</li>\n</ol>\n<p>PoCs for the above issues are listed below.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<h4 id=\"scenario-1\" style=\"position:relative;\"><a href=\"#scenario-1\" aria-label=\"scenario 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenario 1</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Foo</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">bar</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; ; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ul>\n<li>The attacker relays the <code>Foo.bar()</code> call in the <code>CrossChainRelayer</code> contract with <code>maxGasLimit</code> as the <code>_gasLimit</code> parameter.</li>\n<li>The transport layer tries to invoke the <code>Foo.bar()</code> call by calling the <code>CrossChainExecutor.executeCalls()</code>. This transaction reverts costing the transport layer client <code>maxGasLimit</code> gas.</li>\n<li>Since no state updates were performed in <code>CrossChainExecutor</code>, the transport layer still assumes the relayed call as pending which needs to be executed. The transport layer client again tries to execute the pending relayed call which reverts again.</li>\n<li>Repeated execution of the above steps can deplete the gas reserves of transport layer client.</li>\n</ul>\n<h4 id=\"scenario-2\" style=\"position:relative;\"><a href=\"#scenario-2\" aria-label=\"scenario 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scenario 2</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Foo</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">bar</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">revert</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ul>\n<li>The attacker relays the <code>Foo.bar()</code> call in the <code>CrossChainRelayer</code> contract.</li>\n<li>The transport layer tries to invoke the <code>Foo.bar()</code> call by calling the <code>CrossChainExecutor.executeCalls()</code>. This transaction gets reverted.</li>\n<li>Since the relayed calls still seems as pending, the transport layer tries to invoke the <code>Foo.bar()</code> call again. This call should get reverted with <code>CallsAlreadyExecuted</code> error but it gets reverted with <code>CallFailure</code> error.</li>\n</ul>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>The <code>CrossChainExecutor</code> contract should store whether a relayed call was attempted to be executed to make sure the execution cannot be tried again.</p>\n<p>The <code>CallLib</code> library can be changed to not completely revert the transaction when any individual <code>Call</code> gets failed.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166#issuecomment-1339843628\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Not convinced by High Severity but the fact that you cannot determine whether calls were already attempted seems valid.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166#issuecomment-1353499958\">PierrickGT (PoolTogether) confirmed, but disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Indeed, in the current implementation, it’s pretty difficult to know which calls succeeded and which calls failed.</p>\n<p>So we’ve added two events:</p>\n<ul>\n<li><code>event CallSuccess(uint256 callIndex, bytes successData);</code></li>\n<li><code>event CallFailure(uint256 callIndex, bytes errorData);</code></li>\n</ul>\n<p>When a Call fails, we emit the <code>CallFailure</code> event and exit early the loop going through the batch calls.\n<code>CallLib.executeCalls</code> will return <code>false</code> and then the transaction will revert with the custom error <code>ExecuteCallsFailed</code>.</p>\n<p>If all calls have executed successfully, <code>CallLib.executeCalls</code> will return <code>true</code> and then the <code>ExecutedCalls</code> event will be emitted.</p>\n<p>This way, it’s possible to know which calls succeeded and which didn’t.<br>\nIf one Call fails, the entire transaction must revert cause the user may have intended to execute all the calls in one transaction and maybe some calls depends on others to succeed.</p>\n<p>I think this issue should be labeled as 2 (Med Risk) since it would indeed have been difficult for the transport layer client to figure out why the transaction failed and if it was worth replaying in the future.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166#issuecomment-1364420621\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I think the finding was well thought out and can tell it helped shaped the protocol.</p>\n<p>I believe Medium severity could be reasonably marked, however I think Low Severity to be the most appropriate one.</p>\n<p>Specifically:</p>\n<ul>\n<li>No loss of funds (beside gas happens)</li>\n<li>Similar architectures (e.g Chainlink Keepers), share the similar “cannot tell if failed or not”</li>\n<li>The responsibility for determining if the tx will fail is on the caller (relayer)</li>\n</ul>\n<p>For those reasons I believe QA Low (Notable finding for Relayer / Service Operators) to be the most appropriate.</p>\n<p>I will flag this during triage to get more opinions.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166#issuecomment-1365455690\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Some additional thinking I’m having is that a failed tx could remain un-broadcasted for an indefinite amount of time, and this could create issues for the receiving contract if / when the contract is made to not revert.</p>\n<p>Specifically the fact that a failed tx can be relayed in the future (no expiration) seems to create a risk that can cause loss of value, which leads to me believe there is a valid argument for Medium Severity.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166#issuecomment-1365508555\">Alex the Entreprenerd (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>After further thinking, I believe the most appropriate severity is Medium.</p>\n<p>The Warden has shown how the code allows the execution of old failed txs, while that is fine, I believe the lack of expiry can create situations in which a old message could be broadcasted and the broadcasting of it could cause a non idempotent behavior.</p>\n<p>The simplest example I can think of would be an unpause tx, that fails up until a set of contracts are paused, which would put a paused system (probably because of an exploit or the need for immediate stop) back into the unpaused state.</p>\n<p>While the externalities are multiple, I believe because:</p>\n<ul>\n<li>The general nature of the system</li>\n<li>The lack of expiration for old calls</li>\n</ul>\n<p>That Medium Severity is the most appropriate.</p>\n<p>Personally I would recommend considering a way to make calls expire after some time to avoid potential gotchas (or integrators may want to verify that via a nonce system or similar)</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 4 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/140\">report highlighted below</a> by <strong>0xSmartContract</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/204\">cryptonue</a>, <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/112\">ladboy233</a>, and <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/79\">gzeon</a>.</em></p>\n<h2 id=\"summary-1\" style=\"position:relative;\"><a href=\"#summary-1\" aria-label=\"summary 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<h3 id=\"low-risk-issues-list\" style=\"position:relative;\"><a href=\"#low-risk-issues-list\" aria-label=\"low risk issues list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Issues List</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Number</th>\n<th align=\"left\">Issues Details</th>\n<th align=\"center\">Context</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">[L-01]</td>\n<td align=\"left\">Hard-coding the <code>maxGasLimit</code> variable may cause problems in the future</td>\n<td align=\"center\">3</td>\n</tr>\n</tbody>\n</table>\n<p>Total 1 issue</p>\n<h3 id=\"non-critical-issues-list\" style=\"position:relative;\"><a href=\"#non-critical-issues-list\" aria-label=\"non critical issues list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Issues List</h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Number</th>\n<th align=\"left\">Issues Details</th>\n<th align=\"center\">Context</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">[N-01]</td>\n<td align=\"left\">For functions, follow Solidity standard naming conventions</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">[N-02]</td>\n<td align=\"left\">Use a more recent version of Solidity</td>\n<td align=\"center\">All contracts</td>\n</tr>\n<tr>\n<td align=\"center\">[N-03]</td>\n<td align=\"left\">For modern and more readable code; update import usages</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">[N-04]</td>\n<td align=\"left\">Use of <code>bytes.concat()</code> instead of <code>abi.encodePacked(,)</code></td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">[N-05]</td>\n<td align=\"left\">Missing Event for critical parameters change</td>\n<td align=\"center\">4</td>\n</tr>\n</tbody>\n</table>\n<p>Total 5 issues</p>\n<h2 id=\"l-01-hard-coding-the-maxgaslimit-variable-may-cause-problems-in-the-future\" style=\"position:relative;\"><a href=\"#l-01-hard-coding-the-maxgaslimit-variable-may-cause-problems-in-the-future\" aria-label=\"l 01 hard coding the maxgaslimit variable may cause problems in the future permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-01] Hard-coding the <code>maxGasLimit</code> variable may cause problems in the future</h2>\n<p>The variable <code>maxGasLimit</code> is defined as immutable and its value is assigned in <code>constructor</code> but cannot be changed later</p>\n<p>EVM-Based blockchains are hardforked and there is no such thing as Gas Limit etc. values may change, this has happened in the past, so it is recommended to have this value updated in the future</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">3</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">3</span><span class=\"mtk1\"> </span><span class=\"mtk12\">files</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">arbitrum</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToArbitrumRelayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">36</span><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @notice Gas limit provided for free on Arbitrum.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">37</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxGasLimit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">38</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">optimism</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToOptimismRelayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">25</span><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @notice Gas limit provided for free on Optimism.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">26</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxGasLimit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">27</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">polygon</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToPolygonRelayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">19</span><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @notice Gas limit provided for free on Polygon.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">20</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">immutable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxGasLimit</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"n-01-for-functions-follow-solidity-standard-naming-conventions\" style=\"position:relative;\"><a href=\"#n-01-for-functions-follow-solidity-standard-naming-conventions\" aria-label=\"n 01 for functions follow solidity standard naming conventions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-01] For functions, follow Solidity standard naming conventions</h2>\n<p><strong>Context:</strong></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">files</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">arbitrum</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToArbitrumRelayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">40</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nonce</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">optimism</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToOptimismRelayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">29</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nonce</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">polygon</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToPolygonRelayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">23</span><span class=\"mtk1\">:   </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nonce</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">libraries</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">48</span><span class=\"mtk1\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">49</span><span class=\"mtk1\">:   </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">executeCalls</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  50:     </span><span class=\"mtk10\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_nonce</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  51:     </span><span class=\"mtk10\">address</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_sender</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  52:     </span><span class=\"mtk10\">Call</span><span class=\"mtk1\">[] </span><span class=\"mtk10\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_calls</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  53:     </span><span class=\"mtk10\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk10\">_executedNonce</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">54</span><span class=\"mtk1\">:   ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p>The above codes don’t follow Solidity’s standard naming convention,</p>\n<p>internal and private functions : the mixedCase format starting with an underscore (_mixedCase starting with an underscore)</p>\n<h2 id=\"n-02-use-a-more-recent-version-of-solidity\" style=\"position:relative;\"><a href=\"#n-02-use-a-more-recent-version-of-solidity\" aria-label=\"n 02 use a more recent version of solidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-02] Use a more recent version of Solidity</h2>\n<p><strong>Context:</strong><br>\nAll contracts</p>\n<p><strong>Description:</strong><br>\nFor security, it is best practice to use the latest Solidity version.<br>\nFor the security fix list in the versions;<br>\n<a href=\"https://github.com/ethereum/solidity/blob/develop/Changelog.md\">https://github.com/ethereum/solidity/blob/develop/Changelog.md</a></p>\n<p><strong>Recommendation:</strong><br>\nOld version of Solidity is used , newer version can be used <code>(0.8.17)</code></p>\n<h2 id=\"n-03-for-modern-and-more-readable-code-update-import-usages\" style=\"position:relative;\"><a href=\"#n-03-for-modern-and-more-readable-code-update-import-usages\" aria-label=\"n 03 for modern and more readable code update import usages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-03] For modern and more readable code; update import usages</h2>\n<p><strong>Context:</strong></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">6</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">5</span><span class=\"mtk1\"> </span><span class=\"mtk12\">files</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">arbitrum</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToArbitrumExecutor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">7</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;../interfaces/ICrossChainExecutor.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">8</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;../libraries/CallLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">arbitrum</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToArbitrumRelayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">9</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;../libraries/CallLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">optimism</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToOptimismRelayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">9</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;../libraries/CallLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">polygon</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToPolygonExecutor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">7</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;../libraries/CallLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">polygon</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToPolygonRelayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">9</span><span class=\"mtk1\">: </span><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;../libraries/CallLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><strong>Description:</strong><br>\nSolidity code is also cleaner in another way that might not be noticeable: the struct Point. We were importing it previously with global import but not using it. The Point struct <code>polluted the source code</code> with an unnecessary object we were not using because we did not need it.<br>\nThis was breaking the rule of modularity and modular programming: <code>only import what you need</code> Specific imports with curly braces allow us to apply this rule better.</p>\n<p><strong>Recommendation:</strong><br>\n<code>import {contract1 , contract2} from \"filename.sol\";</code></p>\n<p>A good example from the ArtGobblers project;</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">Owned</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/auth/Owned.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">ERC721</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/tokens/ERC721.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">LibString</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/utils/LibString.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">MerkleProofLib</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/utils/MerkleProofLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">FixedPointMathLib</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/utils/FixedPointMathLib.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">ERC1155</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ERC1155TokenReceiver</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/tokens/ERC1155.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">toWadUnsafe</span><span class=\"mtk1\">, </span><span class=\"mtk12\">toDaysWadUnsafe</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;solmate/utils/SignedWadMath.sol&quot;</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h2 id=\"n-04-use-of-bytesconcat-instead-of-abiencodepacked\" style=\"position:relative;\"><a href=\"#n-04-use-of-bytesconcat-instead-of-abiencodepacked\" aria-label=\"n 04 use of bytesconcat instead of abiencodepacked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-04] Use of <code>bytes.concat()</code> instead of <code>abi.encodePacked(,)</code></h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">libraries</span><span class=\"mtk1\">/</span><span class=\"mtk12\">CallLib</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">62</span><span class=\"mtk1\">        </span><span class=\"mtk12\">Call</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_call</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_calls</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_callIndex</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">63</span><span class=\"mtk1\">: </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">64</span><span class=\"mtk1\">:       (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_returnData</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">_call</span><span class=\"mtk1\">.</span><span class=\"mtk12\">target</span><span class=\"mtk1\">.</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">65</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_call</span><span class=\"mtk1\">.</span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_nonce</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_sender</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">66</span><span class=\"mtk1\">:       );</span></span></span></code></pre>\n<p>Rather than using <code>abi.encodePacked</code> for appending bytes, since version 0.8.4, <code>bytes.concat()</code> is enabled</p>\n<p>Since version 0.8.4 for appending bytes, <code>bytes.concat()</code> can be used instead of <code>abi.encodePacked(,)</code>.</p>\n<h2 id=\"n-05-missing-event-for-critical-parameters-change\" style=\"position:relative;\"><a href=\"#n-05-missing-event-for-critical-parameters-change\" aria-label=\"n 05 missing event for critical parameters change permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-05] Missing Event for critical parameters change</h2>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">arbitrum</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToArbitrumExecutor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">51</span><span class=\"mtk1\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">52</span><span class=\"mtk1\">:   </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setRelayer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ICrossChainRelayer</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_relayer</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">53</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">relayer</span><span class=\"mtk1\">) == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Executor/relayer-already-set&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">54</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">relayer</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_relayer</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">55</span><span class=\"mtk1\">:   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">56</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">optimism</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToOptimismExecutor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">65</span><span class=\"mtk1\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">66</span><span class=\"mtk1\">:   </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setRelayer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ICrossChainRelayer</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_relayer</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">67</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">relayer</span><span class=\"mtk1\">) == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Executor/relayer-already-set&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">68</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">relayer</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_relayer</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">69</span><span class=\"mtk1\">:   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">70</span><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">arbitrum</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToArbitrumRelayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">138</span><span class=\"mtk1\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">139</span><span class=\"mtk1\">:   </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setExecutor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ICrossChainExecutor</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_executor</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">140</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">executor</span><span class=\"mtk1\">) == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Relayer/executor-already-set&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">141</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">executor</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_executor</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">142</span><span class=\"mtk1\">:   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">143</span><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">src</span><span class=\"mtk1\">/</span><span class=\"mtk12\">ethereum</span><span class=\"mtk1\">-</span><span class=\"mtk12\">optimism</span><span class=\"mtk1\">/</span><span class=\"mtk12\">EthereumToOptimismRelayer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">84</span><span class=\"mtk1\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">85</span><span class=\"mtk1\">:   </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setExecutor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ICrossChainExecutor</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_executor</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">86</span><span class=\"mtk1\">:     </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">executor</span><span class=\"mtk1\">) == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Relayer/executor-already-set&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">87</span><span class=\"mtk1\">:     </span><span class=\"mtk12\">executor</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_executor</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">88</span><span class=\"mtk1\">:   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk7\">89</span><span class=\"mtk1\">  }</span></span></span></code></pre>\n<p><strong>Description:</strong><br>\nEvents help non-contract tools to track changes, and events prevent users from being surprised by changes.</p>\n<p><strong>Recommendation:</strong><br>\nAdd Event-Emit.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/140#issuecomment-1352512123\">PierrickGT (PoolTogether) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>I’ve confirmed the issue because some suggestions have been fixed.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/140#issuecomment-1365492604\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p><strong>[L-01] | Hard-coding the maxGasLimit variable may cause problems in the future | 3</strong><br>\nLow</p>\n<p><strong>[N-01] | For functions, follow Solidity standard naming conventions | 4</strong><br>\nRefactoring</p>\n<p><strong>[N-02] | Use a more recent version of Solidity | All contracts</strong><br>\nNon-Critical</p>\n<p><strong>[N-03] | For modern and more readable code; update import usages | 6</strong><br>\nRefactoring</p>\n<p><strong>[N-04] | `Use of bytes.concat() instead of abi.encodePacked(,) | 1</strong><br>\nNon-Critical</p>\n<p><strong>[N-05] | Missing Event for critical parameters change</strong><br>\nNon-Critical</p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 8 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/179\">report highlighted below</a> by <strong>Tricko</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/214\">adriro</a>, <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/210\">cryptonue</a>, <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/195\">Madalad</a>, <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/177\">AkshaySrivastav</a>, <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/102\">Rolezn</a>, <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/32\">neko_nyaa</a>, and <a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/22\">0x4non</a>.</em></p>\n<h2 id=\"g-01-use-bitmaps-to-save-gas\" style=\"position:relative;\"><a href=\"#g-01-use-bitmaps-to-save-gas\" aria-label=\"g 01 use bitmaps to save gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01] Use bitmaps to save gas</h2>\n<p>During calls to <code>executeCalls</code> (and <code>processMessageFromRoot</code> in the Polygon executor) the <code>executed</code> mapping is updated, setting the bool flag to true, but because the way the EVM works it allocates an entire storage slot (256 bits) every time a new flag is set. <code>SSTORE</code> opcode cost up to 20000 gas for uninitialized slots like these. Consider using bitmaps instead, this enables you to convert the <code>mapping(uint256 => bool)</code> to a <code>mapping(uint256 => uint256)</code> and pay the cost of slot initialization just once every 256 <code>nonces</code> added, so the high gas costs are amortized over many calls.</p>\n<p>Each group of 256 sequential <code>nonces</code> values (0-255, 256-511, …) are stored together in a single uint256, where each bit represents a bool. The correct index of each nonce inside each bitmap can be calculated by <code>nonce mod 256</code>. An exemplified implementation is shown below (For complete implementations see Modifications section)</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"javascript\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">executed</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//setting executed nonce value to true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_nonce</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">256</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">index</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_nonce</span><span class=\"mtk1\"> - (</span><span class=\"mtk7\">256</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">baseIndex</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">mask</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> &lt;&lt; </span><span class=\"mtk12\">index</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">executed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">baseIndex</span><span class=\"mtk1\">] |= </span><span class=\"mtk12\">mask</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//getting the executed bool flag for a specific nonce</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_nonce</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">256</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">index</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_nonce</span><span class=\"mtk1\"> - (</span><span class=\"mtk7\">256</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">baseIndex</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">mask</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> &lt;&lt; </span><span class=\"mtk12\">index</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_executedNonce</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">executed</span><span class=\"mtk1\">[</span><span class=\"mtk12\">baseIndex</span><span class=\"mtk1\">] &amp; </span><span class=\"mtk12\">mask</span><span class=\"mtk1\">) != </span><span class=\"mtk7\">0</span></span></span></code></pre>\n<p>The full extent of the gas reduction from these changes cannot be seen using the tests present in the repo, as during the tests <code>executeCalls</code> are called at most a few times, so the effect of amortization cannot be seen, underestimating the effect of these changes. Extra tests were added to enable benchmarking more realistic conditions (See modifications section below), where <code>executeCalls</code> is called 100 times in sequence, simulating many user interacting with the contract during normal operating conditions. Using those benchmarks, we obtain the following results.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>avg. gas (before modification)</th>\n<th>avg. gas (after modification)</th>\n<th>gas diff</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CrossChainExecutorArbitrum - executeCalls</td>\n<td>31322</td>\n<td>9980</td>\n<td>-21342 (-68.1%)</td>\n</tr>\n<tr>\n<td>CrossChainExecutorOptimism - executeCalls</td>\n<td>32241</td>\n<td>10899</td>\n<td>-21342 (-66.2%)</td>\n</tr>\n<tr>\n<td>CrossChainExecutorPolygon - processMessageFromRoot</td>\n<td>32279</td>\n<td>10940</td>\n<td>-21339 (-66.1%)</td>\n</tr>\n<tr>\n<td>Total</td>\n<td>95842</td>\n<td>31819</td>\n<td>-64023 (-66.8%)</td>\n</tr>\n</tbody>\n</table>\n<p>*Values obtained by running <code>forge test --match-test Benchmark --gas-report</code></p>\n<h3 id=\"modifications\" style=\"position:relative;\"><a href=\"#modifications\" aria-label=\"modifications permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modifications</h3>\n<p><a href=\"https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-arbitrum/EthereumToArbitrumExecutor.sol\">https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-arbitrum/EthereumToArbitrumExecutor.sol</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/EthereumToArbitrumExecutor.sol.orig b/EthereumToArbitrumExecutor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index bfee411..cbe299b 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/EthereumToArbitrumExecutor.sol.orig</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/EthereumToArbitrumExecutor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -23,7 +23,7 @@ contract CrossChainExecutorArbitrum is ICrossChainExecutor {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    *         nonce =&gt; boolean</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    * @dev Ensure that batch of calls cannot be replayed once they have been executed.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-  mapping(uint256 =&gt; bool) public executed;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  mapping(uint256 =&gt; uint256) public executed;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   /* ============ External Functions ============ */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -36,8 +36,9 @@ contract CrossChainExecutorArbitrum is ICrossChainExecutor {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     ICrossChainRelayer _relayer = relayer;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     _isAuthorized(_relayer);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    bool _executedNonce = executed[_nonce];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    executed[_nonce] = true;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    bool _executedNonce = (executed[baseIndex] &amp; mask) != 0;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    executed[baseIndex] |= mask;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     CallLib.executeCalls(_nonce, _sender, _calls, _executedNonce);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -54,6 +55,11 @@ contract CrossChainExecutorArbitrum is ICrossChainExecutor {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     relayer = _relayer;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  function isExecuted(uint256 _nonce) external view returns (bool) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    return (executed[baseIndex] &amp; mask) != 0;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   /* ============ Internal Functions ============ */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   /**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -67,4 +73,11 @@ contract CrossChainExecutorArbitrum is ICrossChainExecutor {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       &quot;Executor/sender-unauthorized&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  function _getBaseIndexAndMask(uint256 _nonce) internal view returns (uint256, uint256) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    uint256 baseIndex = _nonce / 256;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    uint256 index = _nonce - (256 * baseIndex);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    uint256 mask = 1 &lt;&lt; index;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    return (baseIndex, mask);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> }</span></span></span></code></pre>\n<p><a href=\"https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-optimism/EthereumToOptimismExecutor.sol\">https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-optimism/EthereumToOptimismExecutor.sol</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/EthereumToOptimismExecutor.sol.orig b/EthereumToOptimismExecutor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 1aba9c1..6763b22 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/EthereumToOptimismExecutor.sol.orig</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/EthereumToOptimismExecutor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -26,7 +26,7 @@ contract CrossChainExecutorOptimism is ICrossChainExecutor {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    *         nonce =&gt; boolean</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    * @dev Ensure that batch of calls cannot be replayed once they have been executed.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-  mapping(uint256 =&gt; bool) public executed;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  mapping(uint256 =&gt; uint256) public executed;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   /* ============ Constructor ============ */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -50,8 +50,9 @@ contract CrossChainExecutorOptimism is ICrossChainExecutor {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     ICrossChainRelayer _relayer = relayer;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     _isAuthorized(_relayer);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    bool _executedNonce = executed[_nonce];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    executed[_nonce] = true;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    bool _executedNonce = (executed[baseIndex] &amp; mask) != 0;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    executed[baseIndex] |= mask;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     CallLib.executeCalls(_nonce, _sender, _calls, _executedNonce);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -68,6 +69,11 @@ contract CrossChainExecutorOptimism is ICrossChainExecutor {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     relayer = _relayer;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  function isExecuted(uint256 _nonce) external view returns (bool) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    return (executed[baseIndex] &amp; mask) != 0;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   /* ============ Internal Functions ============ */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   /**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -83,4 +89,11 @@ contract CrossChainExecutorOptimism is ICrossChainExecutor {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       &quot;Executor/sender-unauthorized&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  function _getBaseIndexAndMask(uint256 _nonce) internal view returns (uint256, uint256) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    uint256 baseIndex = _nonce / 256;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    uint256 index = _nonce - (256 * baseIndex);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    uint256 mask = 1 &lt;&lt; index;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    return (baseIndex, mask);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> }</span></span></span></code></pre>\n<p><a href=\"https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-polygon/EthereumToPolygonExecutor.sol\">https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-polygon/EthereumToPolygonExecutor.sol</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/EthereumToPolygonExecutor.sol.orig b/EthereumToPolygonExecutor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 29bc54f..9c0df8c 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/EthereumToPolygonExecutor.sol.orig</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/EthereumToPolygonExecutor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -28,7 +28,7 @@ contract CrossChainExecutorPolygon is FxBaseChildTunnel {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    *         nonce =&gt; boolean</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    * @dev Ensure that batch of calls cannot be replayed once they have been executed.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-  mapping(uint256 =&gt; bool) public executed;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  mapping(uint256 =&gt; uint256) public executed;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   /* ============ Constructor ============ */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -51,11 +51,24 @@ contract CrossChainExecutorPolygon is FxBaseChildTunnel {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       (uint256, address, CallLib.Call[])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    bool _executedNonce = executed[_nonce];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    executed[_nonce] = true;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    bool _executedNonce = (executed[baseIndex] &amp; mask) != 0;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    executed[baseIndex] |= mask;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     CallLib.executeCalls(_nonce, _callsSender, _calls, _executedNonce);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     emit ExecutedCalls(_sender, _nonce);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  function isExecuted(uint256 _nonce) external view returns (bool) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    return (executed[baseIndex] &amp; mask) != 0;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  function _getBaseIndexAndMask(uint256 _nonce) internal view returns (uint256, uint256) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    uint256 baseIndex = _nonce / 256;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    uint256 index = _nonce - (256 * baseIndex);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    uint256 mask = 1 &lt;&lt; index;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    return (baseIndex, mask);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> }</span></span></span></code></pre>\n<p><a href=\"https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/test/unit/ethereum-arbitrum/EthereumToArbitrumExecutor.t.sol\">https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/test/unit/ethereum-arbitrum/EthereumToArbitrumExecutor.t.sol</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/EthereumToArbitrumExecutor.t.sol.orig b/EthereumToArbitrumExecutor.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 942d92d..37e7161 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/EthereumToArbitrumExecutor.t.sol.orig</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/EthereumToArbitrumExecutor.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -70,7 +70,7 @@ contract CrossChainExecutorArbitrumUnitTest is Test {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     executor.executeCalls(nonce, sender, calls);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    assertTrue(executor.executed(nonce));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    assertTrue(executor.isExecuted(nonce));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   function testExecuteCallsAlreadyExecuted() public {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -90,6 +90,17 @@ contract CrossChainExecutorArbitrumUnitTest is Test {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     executor.executeCalls(nonce, sender, calls);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  function testExecuteCallsBenchmark() public {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    setRelayer();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    vm.startPrank(relayerAlias);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    for (uint256 i; i &lt; 100; i++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      executor.executeCalls(nonce, sender, calls);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      nonce++;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   /* ============ Setters ============ */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   function testSetRelayer() public {</span></span></span></code></pre>\n<p><a href=\"https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/test/fork/EthereumToOptimismFork.t.sol\">https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/test/fork/EthereumToOptimismFork.t.sol</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/EthereumToOptimismFork.t.sol.orig b/EthereumToOptimismFork.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index be84235..ed2d2e7 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/EthereumToOptimismFork.t.sol.orig</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/EthereumToOptimismFork.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -194,6 +194,39 @@ contract EthereumToOptimismForkTest is Test {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     assertEq(greeter.greet(), l1Greeting);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  function testExecuteCallsBenchmark() public {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    deployAll();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    setAll();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    vm.selectFork(optimismFork);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    CallLib.Call[] memory _calls = new CallLib.Call[](1);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    _calls[0] = CallLib.Call({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      target: address(greeter),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      data: abi.encodeWithSignature(&quot;setGreeting(string)&quot;, l1Greeting)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    L2CrossDomainMessenger l2Bridge = L2CrossDomainMessenger(l2CrossDomainMessenger);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    vm.startPrank(AddressAliasHelper.applyL1ToL2Alias(proxyOVML1CrossDomainMessenger));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    for (uint256 i; i &lt; 100; i++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      l2Bridge.relayMessage(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        address(executor),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        address(relayer),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        abi.encodeWithSignature(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+          &quot;executeCalls(uint256,address,(address,bytes)[])&quot;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+          nonce,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+          address(this),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+          _calls</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        ),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        l2Bridge.messageNonce() + 1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      nonce++;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   function testGasLimitTooHigh() public {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     deployAll();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     setAll();</span></span></span></code></pre>\n<p><a href=\"https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/test/fork/EthereumToPolygonFork.t.sol\">https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/test/fork/EthereumToPolygonFork.t.sol</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/EthereumToPolygonFork.t.sol.orig b/EthereumToPolygonFork.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 01913e6..eaad5f2 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/EthereumToPolygonFork.t.sol.orig</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/EthereumToPolygonFork.t.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -179,6 +179,31 @@ contract EthereumToPolygonForkTest is Test {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     assertEq(greeter.greet(), l1Greeting);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  function testExecuteCallsBenchmark() public {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    deployAll();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    setAll();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    vm.selectFork(polygonFork);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    CallLib.Call[] memory _calls = new CallLib.Call[](1);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    _calls[0] = CallLib.Call({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      target: address(greeter),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      data: abi.encodeWithSignature(&quot;setGreeting(string)&quot;, l1Greeting)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    vm.startPrank(fxChild);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    for (uint256 i; i &lt; 100; i++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      executor.processMessageFromRoot(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        1,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        address(relayer),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        abi.encode(nonce, address(this), _calls)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      nonce++;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   function testGasLimitTooHigh() public {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     deployAll();</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/179#issuecomment-1353700299\">PierrickGT (PoolTogether) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>Very interesting optimization but it does complexify the code quite a bit.<br>\nSo for this reason, I’ve acknowledged the issue but we won’t implement the suggestion.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-12-pooltogether-findings/issues/179#issuecomment-1365474238\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I believe that in the spirit of Gas Reports, the report has shown:</p>\n<ul>\n<li>A refactoring with code snippets</li>\n<li>It’s fully benchmarked</li>\n</ul>\n<p>Am accepting the finding as valid, and because it effectively saves one SSTORE on each operation, I believe 20k gas to be the appropriate amount saved</p>\n<p>20_000</p>\n</blockquote>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk14 { color: #F44747; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#medium-risk-findings-3\">Medium Risk Findings (3)</a></p>\n<ul>\n<li><a href=\"#m-01-an-attacker-can-make-users-unable-to-cancel-their-l1-calls-on-ethereum-to-arbitrum\">[M-01] An attacker can make users unable to cancel their L1 calls on Ethereum To Arbitrum</a></li>\n<li><a href=\"#m-02-when-a-smart-contract-calls-crosschainrelayerarbitrumprocesscalls-excess-submission-fees-may-be-lost\">[M-02] When a smart contract calls <code>CrossChainRelayerArbitrum.processCalls</code>, excess submission fees may be lost</a></li>\n<li><a href=\"#m-03-crosschainexecutor-contracts-do-not-update-the-necessary-states-for-failing-transactions\">[M-03] <code>CrossChainExecutor</code> contracts do not update the necessary states for failing transactions</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#summary-1\">Summary</a></li>\n<li><a href=\"#l-01-hard-coding-the-maxgaslimit-variable-may-cause-problems-in-the-future\">L-01 Hard-coding the <code>maxGasLimit</code> variable may cause problems in the future</a></li>\n<li><a href=\"#n-01-for-functions-follow-solidity-standard-naming-conventions\">N-01 For functions, follow Solidity standard naming conventions</a></li>\n<li><a href=\"#n-02-use-a-more-recent-version-of-solidity\">N-02 Use a more recent version of Solidity</a></li>\n<li><a href=\"#n-03-for-modern-and-more-readable-code-update-import-usages\">N-03 For modern and more readable code; update import usages</a></li>\n<li><a href=\"#n-04-use-of-bytesconcat-instead-of-abiencodepacked\">N-04 Use of <code>bytes.concat()</code> instead of <code>abi.encodePacked(,)</code></a></li>\n<li><a href=\"#n-05-missing-event-for-critical-parameters-change\">N-05 Missing Event for critical parameters change</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#g-01-use-bitmaps-to-save-gas\">G-01 Use bitmaps to save gas</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the audit contest outlined in this document, C4 conducted an analysis of the PoolTogether smart contract system written in Solidity. The audit contest took place between December 1—December 5 2022.\n\n## Wardens\n\n19 Wardens contributed reports to the PoolTogether contest:\n\n  1. 0x4non\n  2. 0x52\n  3. [0xSmartContract](https://twitter.com/0xSmartContract)\n  4. [AkshaySrivastav](https://twitter.com/akshaysrivastv)\n  5. [Chom](https://chom.dev)\n  6. Madalad\n  7. Rolezn\n  8. Tricko\n  9. [adriro](https://github.com/romeroadrian)\n  10. cccz\n  11. cryptonue\n  12. [csanuragjain](https://twitter.com/csanuragjain)\n  13. enckrish\n  14. [gzeon](https://twitter.com/gzeon)\n  15. hihen\n  16. [joestakey](https://twitter.com/JoeStakey)\n  17. ktg\n  18. ladboy233\n  19. neko\\_nyaa\n\nThis contest was judged by [Alex the Entreprenerd](https://twitter.com/GalloDaSballo).\n\nFinal report assembled by [liveactionllama](https://twitter.com/liveactionllama).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 3 unique vulnerabilities. Of these vulnerabilities, 0 received a risk rating in the category of HIGH severity and 3 received a risk rating in the category of MEDIUM severity.\n\nAdditionally, C4 analysis included 4 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 8 reports recommending gas optimizations.\n\nAll of the issues presented here are linked back to their original finding.\n\n# Scope\n\nThe code under review can be found within the [C4 PoolTogether contest repository](https://github.com/code-423n4/2022-12-pooltogether), and is composed of 7 smart contracts written in the Solidity programming language and includes 279 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code4rena.com).\n\n# Medium Risk Findings (3)\n## [[M-01] An attacker can make users unable to cancel their L1 calls on Ethereum To Arbitrum](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60)\n*Submitted by [ktg](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60), also found by [0x52](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/94)*\n\n[EthereumToArbitrumRelayer.sol#L118-#L127](https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-arbitrum/EthereumToArbitrumRelayer.sol#L118-#L127)<br>\n\nWhen someone wants to make  calls to Arbitrum from Ethereum, first they call `relayCalls` to fingerprint their data and then anyone else can call `processCalls` to process the calls. According to the doc in Inbox source code <https://github.com/OffchainLabs/nitro/blob/1f32bec6b9b228bb2fab4bfa02867716f65d0c5c/contracts/src/bridge/Inbox.sol#L427>, function `createRetryableTicket` has one parameter called `callValueRefundAddress` and this is the address that is granted the option to `cancel` a `Retryable`. In `EthereumToArbitrumRelayer.sol` it's currently set as `msg.sender` (5th parameter) which is whoever make the call to  function `processCall`:\n\n    uint256 _ticketID = inbox.createRetryableTicket{ value: msg.value }(\n          address(executor),\n          0,\n          _maxSubmissionCost,\n          msg.sender,\n          msg.sender,\n          _gasLimit,\n          _gasPriceBid,\n          _data\n        );\n\nThis implementation allows an attacker to remove the possibility of a user to cancel their calls, which is an important mechanism to be properly implemented. This scenario demonstrates how this could happen:\n\n*   User A call `relayCalls` to fingerprint their calls\n*   User B call `processCalls` to process user A's calls.\n*   User A now changes his mind and wants to cancel his calls but he's unable to since  `callValueRefundAddress` is set to user B's address, now user B is the one who decides whether to cancel user A's calls or not, which should be user A's option.\n*   Another common case is when users's calls failed, anyone can try to `redeem` it, according to the doc <https://developer.arbitrum.io/arbos/l1-to-l2-messaging>. So if a someone calls `processCalls` to process others's calls and it fails, the owner of the calls now cannot cancel their calls and anyone else can redeem (reexecute) them.\n\nIt should be noted here that `EthereumToArbitrumRelayer.sol` provides no other functionality to cancel users's calls, but it seems to rely only on Arbitrum's Retryable cancel mechanism to do so.\n\n### Recommended Mitigation Steps\n\nCurrently, anyone can process others's calls by calling `processCalls` functions and I think this does not pose any security risk as long as the user who actually fingerprinted these calls can reserve their rights to cancel it if they want to. Therefore, I recommend changing `callValueRefundAddress` in `createRetryableTicket` to `_sender`, this combines with event `ProcessedCalls(_nonce, msg.sender, _ticketID)` emitted at the end of `processCalls` function will allow a user to be notified if their calls has been processed by anyone else and they can cancel it in L2 using `_ticketID`.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60#issuecomment-1345665985):**\n > Relayer has privilege to cancel arbitrum txs, I think there may be a similar finding, but for now will keep separate.\n\n**[PierrickGT (PoolTogether) confirmed and commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60#issuecomment-1352223144):**\n > Very nice find! I've fixed the issue in the following PR: https://github.com/pooltogether/ERC5164/pull/10\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60#issuecomment-1365451144):**\n > Worth flagging that allowing the caller to pass an arbitrary address may not solve, as I'd argue the only address that would rationally prevent the grief is the `_sender`, not fully sure if that is sufficient though.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/60#issuecomment-1365451641):**\n > The Warden has shown a specific scenario in which Arbitrum tickets, which are meant to be cancellable by the caller / the sender, can be griefed.\n> \n> Because this breaks the expectations of the code, and denies a functionality which was explicitly added, I agree with Medium Severity.\n\n\n\n***\n\n## [[M-02] When a smart contract calls `CrossChainRelayerArbitrum.processCalls`, excess submission fees may be lost](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63)\n*Submitted by [cccz](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63), also found by [joestakey](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/223), [enckrish](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/197), and [Chom](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/42)*\n\nWhen the user calls CrossChainRelayerArbitrum.processCalls, ETH is sent as the submission fee.\n\nAccording to the documentation : <https://github.com/OffchainLabs/arbitrum/blob/master/docs/L1_L2_Messages.md#retryable-transaction-lifecycle>\n\n    Credit-Back Address: Address to which all excess gas is credited on L2; i.e., excess ETH for base submission cost (MaxSubmissionCost - ActualSubmissionCostPaid) and excess ETH provided for L2 execution ( (GasPrice x MaxGas) - ActualETHSpentInExecution).\n    ...\n    Submission fee is collected: submission fee is deducted from the sender’s L2 account; MaxSubmissionCost - submission fee is credited to Credit-Back Address.\n\nThe excess submission fee is refunded to the address on L2 of the `excessFeeRefundAddress` provided when calling `createRetryableTicket`.\n\n```solidity\n     * @notice Put a message in the L2 inbox that can be reexecuted for some fixed amount of time if it reverts\n     * @dev all msg.value will deposited to callValueRefundAddress on L2\n     * @param destAddr destination L2 contract address\n     * @param l2CallValue call value for retryable L2 message\n     * @param  maxSubmissionCost Max gas deducted from user's L2 balance to cover base submission fee\n     * @param excessFeeRefundAddress maxgas x gasprice - execution cost gets credited here on L2 balance\n     * @param callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\n     * @param maxGas Max gas deducted from user's L2 balance to cover L2 execution\n     * @param gasPriceBid price bid for L2 execution\n     * @param data ABI encoded data of L2 message\n     * @return unique id for retryable transaction (keccak256(requestID, uint(0) )\n     */\n    function createRetryableTicket(\n        address destAddr,\n        uint256 l2CallValue,\n        uint256 maxSubmissionCost,\n        address excessFeeRefundAddress,\n        address callValueRefundAddress,\n        uint256 maxGas,\n        uint256 gasPriceBid,\n        bytes calldata data\n    ) external payable virtual override onlyWhitelisted returns (uint256) {\n```\n\nIn `CrossChainRelayerArbitrum.processCalls`, `excessFeeRefundAddress == msg.sender`.\n\n```solidity\n    uint256 _ticketID = inbox.createRetryableTicket{ value: msg.value }(\n      address(executor),\n      0,\n      _maxSubmissionCost,\n      msg.sender,   // @audit : excessFeeRefundAddress\n      msg.sender,  // @audit: callValueRefundAddress\n      _gasLimit,\n      _gasPriceBid,\n      _data\n    );\n```\n\nFor EOA accounts, the excess submission fees are correctly refunded to their address on L2.\nHowever, for smart contracts, since there may not exist a corresponding address on L2, these excess submission fees will be lost.\n\nAlso, since the `callValueRefundAddress` is also `msg.sender`, according to the documentation, if the Retryable Ticket is cancelled or expired, then the smart contract caller may lose all the submission fees\n\n```\nIf the Retryable Ticket is cancelled or expires before it is redeemed, Callvalue is credited to Beneficiary.\n\n```\n\n### Proof of Concept\n\n<https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-arbitrum/EthereumToArbitrumRelayer.sol#L118-L127>\n\n<https://github.com/OffchainLabs/arbitrum/blob/master/packages/arb-bridge-eth/contracts/bridge/Inbox.sol#L333-L354>\n\n### Recommended Mitigation Steps\n\nConsider allowing the user to specify `excessFeeRefundAddress` and `callValueRefundAddress` when calling `CrossChainRelayerArbitrum.processCalls`.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63#issuecomment-1345650911):**\n > Making primary for quality of info.\n> \n> Ultimately boils down to the idea that contracts won't get a refund. Will have to think about whether this Med (submitted as such), or Low (self-inflicted).\n\n**[PierrickGT (PoolTogether) confirmed and commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63#issuecomment-1350288109):**\n > Fixed in this PR: https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63\n> \n> The `processCalls` function was intended to be called by an EOA only but it's true that a contract may want to call it while providing the required `_gasLimit`, `_maxSubmissionCost` and `_gasPriceBid` by an EOA.<br>\n> Passing a `refundAddress` variable will allow a contract to refund the EOA that called it.\n> \n> Regarding the severity, I think 2 (Med Risk) is appropriate since the contract would leak value.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63#issuecomment-1365313747):**\n > Agree with finding, am conflicted on severity:\n> - Low -> User sends more than necessary\n> - Med -> Behaviour, is inconsistent to expected / intended functionality\n> \n> Will think about it further.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63#issuecomment-1365317980):**\n > More specifically, the fact that the system wants to allow refunds and has a bug that prevents that, which would qualify as Medium. (We care if you send more, we will send it back, but because of bug we cannot)\n> \n> While the pre-condition, in case of a less sophisticated system, would most likely be Low (we don't care if you send more, don't send more)\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/63#issuecomment-1365508732):**\n > The Warden has shown an incorrect implementation, which can cause excess fees to be lost.\n> \n> While the loss of excess fees could be considered Low Severity (self-inflicted), the integration mistake is worth flagging and warrants the increased severity. \n\n\n\n***\n\n## [[M-03] `CrossChainExecutor` contracts do not update the necessary states for failing transactions](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166)\n*Submitted by [AkshaySrivastav](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166), also found by [ladboy233](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/160), [hihen](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/49), and [csanuragjain](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/18)*\n\n[EthereumToOptimismExecutor.sol#L45-L59](https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-optimism/EthereumToOptimismExecutor.sol#L45-L59)<br>\n[EthereumToArbitrumExecutor.sol#L31-L45](https://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-arbitrum/EthereumToArbitrumExecutor.sol#L31-L45)\n\nThe `CrossChainExecutorArbitrum` and `CrossChainExecutorOptimism` contracts both use `CallLib` library to invoke `Call`s on external contract. As per the `CallLib` library implementation, any failing `Call` results in the entire transaction getting reverted.\n\nThe `CrossChainExecutor` contracts does not store whether the calls in `CallLib.Call[]` were already attempted which failed.\n\nThis creates several issues for `CrossChainExecutor` contracts.\n\n1.  Offchain components can be tricked to submit failing `Call[]`s again and again. This can be used to drain the offchain component of gas.\n\n2.  Once a failing `Call[]` was invoked (which failed) and if again the same `Call[]` is invoked, the transaction should revert with `CallsAlreadyExecuted` error but it reverts with `CallFailure` error.\n\n3.  It is difficult to determine whether a to-be executed `Call[]` is pending or the invocation was already tried but failed.\n\nPoCs for the above issues are listed below.\n\n### Proof of Concept\n\n#### Scenario 1\n\n```solidity\ncontract Foo {\n    function bar() public {\n        for(uint256 i; ; i++) {}\n    }\n}\n```\n\n*   The attacker relays the `Foo.bar()` call in the `CrossChainRelayer` contract with `maxGasLimit` as the `_gasLimit` parameter.\n*   The transport layer tries to invoke the `Foo.bar()` call by calling the `CrossChainExecutor.executeCalls()`. This transaction reverts costing the transport layer client `maxGasLimit` gas.\n*   Since no state updates were performed in `CrossChainExecutor`, the transport layer still assumes the relayed call as pending which needs to be executed. The transport layer client again tries to execute the pending relayed call which reverts again.\n*   Repeated execution of the above steps can deplete the gas reserves of transport layer client.\n\n#### Scenario 2\n\n```solidity\ncontract Foo {\n    function bar() public {\n        revert();\n    }\n}\n```\n\n*   The attacker relays the `Foo.bar()` call in the `CrossChainRelayer` contract.\n*   The transport layer tries to invoke the `Foo.bar()` call by calling the `CrossChainExecutor.executeCalls()`. This transaction gets reverted.\n*   Since the relayed calls still seems as pending, the transport layer tries to invoke the `Foo.bar()` call again. This call should get reverted with `CallsAlreadyExecuted` error but it gets reverted with `CallFailure` error.\n\n### Recommended Mitigation Steps\n\nThe `CrossChainExecutor` contract should store whether a relayed call was attempted to be executed to make sure the execution cannot be tried again.\n\nThe `CallLib` library can be changed to not completely revert the transaction when any individual `Call` gets failed.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166#issuecomment-1339843628):**\n > Not convinced by High Severity but the fact that you cannot determine whether calls were already attempted seems valid.\n\n**[PierrickGT (PoolTogether) confirmed, but disagreed with severity and commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166#issuecomment-1353499958):**\n > Indeed, in the current implementation, it's pretty difficult to know which calls succeeded and which calls failed.\n> \n> So we've added two events:\n> - `event CallSuccess(uint256 callIndex, bytes successData);`\n> - `event CallFailure(uint256 callIndex, bytes errorData);`\n> \n> When a Call fails, we emit the `CallFailure` event and exit early the loop going through the batch calls.\n> `CallLib.executeCalls` will return `false` and then the transaction will revert with the custom error `ExecuteCallsFailed`.\n> \n> If all calls have executed successfully, `CallLib.executeCalls` will return `true` and then the `ExecutedCalls` event will be emitted.\n> \n> This way, it's possible to know which calls succeeded and which didn't.<br>\n> If one Call fails, the entire transaction must revert cause the user may have intended to execute all the calls in one transaction and maybe some calls depends on others to succeed.\n> \n> I think this issue should be labeled as 2 (Med Risk) since it would indeed have been difficult for the transport layer client to figure out why the transaction failed and if it was worth replaying in the future.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166#issuecomment-1364420621):**\n > I think the finding was well thought out and can tell it helped shaped the protocol.\n> \n> I believe Medium severity could be reasonably marked, however I think Low Severity to be the most appropriate one.\n> \n> Specifically:\n> - No loss of funds (beside gas happens)\n> - Similar architectures (e.g Chainlink Keepers), share the similar \"cannot tell if failed or not\"\n> - The responsibility for determining if the tx will fail is on the caller (relayer)\n> \n> For those reasons I believe QA Low (Notable finding for Relayer / Service Operators) to be the most appropriate.\n> \n> I will flag this during triage to get more opinions.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166#issuecomment-1365455690):**\n > Some additional thinking I'm having is that a failed tx could remain un-broadcasted for an indefinite amount of time, and this could create issues for the receiving contract if / when the contract is made to not revert.\n>\n > Specifically the fact that a failed tx can be relayed in the future (no expiration) seems to create a risk that can cause loss of value, which leads to me believe there is a valid argument for Medium Severity.\n\n**[Alex the Entreprenerd (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/166#issuecomment-1365508555):**\n > After further thinking, I believe the most appropriate severity is Medium.\n> \n> The Warden has shown how the code allows the execution of old failed txs, while that is fine, I believe the lack of expiry can create situations in which a old message could be broadcasted and the broadcasting of it could cause a non idempotent behavior.\n> \n> The simplest example I can think of would be an unpause tx, that fails up until a set of contracts are paused, which would put a paused system (probably because of an exploit or the need for immediate stop) back into the unpaused state.\n> \n> While the externalities are multiple, I believe because:\n> - The general nature of the system\n> - The lack of expiration for old calls\n> \n> That Medium Severity is the most appropriate.\n> \n> Personally I would recommend considering a way to make calls expire after some time to avoid potential gotchas (or integrators may want to verify that via a nonce system or similar)\n\n\n\n***\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 4 reports were submitted by wardens detailing low risk and non-critical issues. The [report highlighted below](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/140) by **0xSmartContract** received the top score from the judge.\n\n*The following wardens also submitted reports: [cryptonue](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/204), [ladboy233](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/112), and [gzeon](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/79).*\n\n## Summary\n\n### Low Risk Issues List\n| Number |Issues Details|Context|\n|:--:|:-------|:--:|\n|[L-01]| Hard-coding the `maxGasLimit` variable may cause problems in the future | 3 |\n\nTotal 1 issue\n\n### Non-Critical Issues List\n| Number |Issues Details|Context|\n|:--:|:-------|:--:|\n| [N-01]|For functions, follow Solidity standard naming conventions|4|\n| [N-02] |Use a more recent version of Solidity |All contracts|\n| [N-03] |For modern and more readable code; update import usages| 6 |\n| [N-04] |Use of `bytes.concat()` instead of `abi.encodePacked(,)` | 1|\n| [N-05] |Missing Event for critical parameters change | 4 |\n\nTotal 5 issues\n\n## [L-01] Hard-coding the `maxGasLimit` variable may cause problems in the future\n\nThe variable `maxGasLimit` is defined as immutable and its value is assigned in `constructor` but cannot be changed later\n\nEVM-Based blockchains are hardforked and there is no such thing as Gas Limit etc. values may change, this has happened in the past, so it is recommended to have this value updated in the future\n\n```solidity\n\n3 results - 3 files\n\nsrc/ethereum-arbitrum/EthereumToArbitrumRelayer.sol:\n  36    /// @notice Gas limit provided for free on Arbitrum.\n  37:   uint256 public immutable maxGasLimit;\n  38  \n\nsrc/ethereum-optimism/EthereumToOptimismRelayer.sol:\n  25    /// @notice Gas limit provided for free on Optimism.\n  26:   uint256 public immutable maxGasLimit;\n  27  \n\nsrc/ethereum-polygon/EthereumToPolygonRelayer.sol:\n  19    /// @notice Gas limit provided for free on Polygon.\n  20:   uint256 public immutable maxGasLimit;\n```\n\n## [N-01] For functions, follow Solidity standard naming conventions\n\n**Context:**\n\n```solidity\n\n4 results - 4 files\n\nsrc/ethereum-arbitrum/EthereumToArbitrumRelayer.sol:\n  40:   uint256 internal nonce;\n\nsrc/ethereum-optimism/EthereumToOptimismRelayer.sol:\n  29:   uint256 internal nonce;\n\nsrc/ethereum-polygon/EthereumToPolygonRelayer.sol:\n  23:   uint256 internal nonce;\n\nsrc/libraries/CallLib.sol:\n  48     */\n  49:   function executeCalls(\n  50:     uint256 _nonce,\n  51:     address _sender,\n  52:     Call[] memory _calls,\n  53:     bool _executedNonce\n  54:   ) internal {\n\n```\n\nThe above codes don't follow Solidity's standard naming convention,\n\ninternal and private functions : the mixedCase format starting with an underscore (\\_mixedCase starting with an underscore)\n\n## [N-02] Use a more recent version of Solidity\n\n**Context:**<br>\nAll contracts\n\n**Description:**<br>\nFor security, it is best practice to use the latest Solidity version.<br>\nFor the security fix list in the versions;<br>\nhttps://github.com/ethereum/solidity/blob/develop/Changelog.md\n\n**Recommendation:**<br>\nOld version of Solidity is used , newer version can be used `(0.8.17)`\n\n## [N-03] For modern and more readable code; update import usages\n\n**Context:**\n\n```solidity\n6 results - 5 files\n\nsrc/ethereum-arbitrum/EthereumToArbitrumExecutor.sol:\n  7: import \"../interfaces/ICrossChainExecutor.sol\";\n  8: import \"../libraries/CallLib.sol\";\n\nsrc/ethereum-arbitrum/EthereumToArbitrumRelayer.sol:\n  9: import \"../libraries/CallLib.sol\";\n\nsrc/ethereum-optimism/EthereumToOptimismRelayer.sol:\n  9: import \"../libraries/CallLib.sol\";\n\nsrc/ethereum-polygon/EthereumToPolygonExecutor.sol:\n  7: import \"../libraries/CallLib.sol\";\n\nsrc/ethereum-polygon/EthereumToPolygonRelayer.sol:\n  9: import \"../libraries/CallLib.sol\";\n\n```\n\n**Description:**<br>\nSolidity code is also cleaner in another way that might not be noticeable: the struct Point. We were importing it previously with global import but not using it. The Point struct `polluted the source code` with an unnecessary object we were not using because we did not need it.<br>\nThis was breaking the rule of modularity and modular programming: `only import what you need` Specific imports with curly braces allow us to apply this rule better.\n\n**Recommendation:**<br>\n`import {contract1 , contract2} from \"filename.sol\";`\n\nA good example from the ArtGobblers project;\n```js\nimport {Owned} from \"solmate/auth/Owned.sol\";\nimport {ERC721} from \"solmate/tokens/ERC721.sol\";\nimport {LibString} from \"solmate/utils/LibString.sol\";\nimport {MerkleProofLib} from \"solmate/utils/MerkleProofLib.sol\";\nimport {FixedPointMathLib} from \"solmate/utils/FixedPointMathLib.sol\";\nimport {ERC1155, ERC1155TokenReceiver} from \"solmate/tokens/ERC1155.sol\";\nimport {toWadUnsafe, toDaysWadUnsafe} from \"solmate/utils/SignedWadMath.sol\";\n```\n## [N-04] Use of `bytes.concat()` instead of `abi.encodePacked(,)`\n\n```solidity\n\nsrc/libraries/CallLib.sol:\n  62        Call memory _call = _calls[_callIndex];\n  63: \n  64:       (bool _success, bytes memory _returnData) = _call.target.call(\n  65:         abi.encodePacked(_call.data, _nonce, _sender)\n  66:       );\n\n```\nRather than using `abi.encodePacked` for appending bytes, since version 0.8.4, `bytes.concat()` is enabled\n\nSince version 0.8.4 for appending bytes, `bytes.concat()` can be used instead of `abi.encodePacked(,)`.\n\n## [N-05] Missing Event for critical parameters change\n\n```solidity\nsrc/ethereum-arbitrum/EthereumToArbitrumExecutor.sol:\n  51     */\n  52:   function setRelayer(ICrossChainRelayer _relayer) external {\n  53:     require(address(relayer) == address(0), \"Executor/relayer-already-set\");\n  54:     relayer = _relayer;\n  55:   }\n  56  \n\nsrc/ethereum-optimism/EthereumToOptimismExecutor.sol:\n  65     */\n  66:   function setRelayer(ICrossChainRelayer _relayer) external {\n  67:     require(address(relayer) == address(0), \"Executor/relayer-already-set\");\n  68:     relayer = _relayer;\n  69:   }\n  70 \n\nsrc/ethereum-arbitrum/EthereumToArbitrumRelayer.sol:\n  138     */\n  139:   function setExecutor(ICrossChainExecutor _executor) external {\n  140:     require(address(executor) == address(0), \"Relayer/executor-already-set\");\n  141:     executor = _executor;\n  142:   }\n  143  \n\nsrc/ethereum-optimism/EthereumToOptimismRelayer.sol:\n  84     */\n  85:   function setExecutor(ICrossChainExecutor _executor) external {\n  86:     require(address(executor) == address(0), \"Relayer/executor-already-set\");\n  87:     executor = _executor;\n  88:   }\n  89  }\n\n```\n\n**Description:**<br>\nEvents help non-contract tools to track changes, and events prevent users from being surprised by changes.\n\n**Recommendation:**<br>\nAdd Event-Emit.\n\n**[PierrickGT (PoolTogether) confirmed and commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/140#issuecomment-1352512123):**\n > I've confirmed the issue because some suggestions have been fixed.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/140#issuecomment-1365492604):**\n > **[L-01] | Hard-coding the maxGasLimit variable may cause problems in the future | 3**<br>\n> Low\n> \n> **[N-01] | For functions, follow Solidity standard naming conventions | 4**<br>\n> Refactoring\n> \n> **[N-02] | Use a more recent version of Solidity | All contracts**<br>\n> Non-Critical\n> \n> **[N-03] | For modern and more readable code; update import usages | 6**<br>\n> Refactoring\n> \n> **[N-04] | `Use of bytes.concat() instead of abi.encodePacked(,) | 1**<br>\n> Non-Critical\n> \n> **[N-05] | Missing Event for critical parameters change**<br>\n> Non-Critical\n\n\n\n***\n\n# Gas Optimizations\n\nFor this contest, 8 reports were submitted by wardens detailing gas optimizations. The [report highlighted below](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/179) by **Tricko** received the top score from the judge.\n\n*The following wardens also submitted reports: [adriro](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/214), [cryptonue](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/210), [Madalad](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/195), [AkshaySrivastav](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/177), [Rolezn](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/102), [neko\\_nyaa](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/32), and [0x4non](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/22).*\n\n## [G-01] Use bitmaps to save gas\n\nDuring calls to `executeCalls` (and `processMessageFromRoot` in the Polygon executor) the `executed` mapping is updated, setting the bool flag to true, but because the way the EVM works it allocates an entire storage slot (256 bits) every time a new flag is set. `SSTORE` opcode cost up to 20000 gas for uninitialized slots like these. Consider using bitmaps instead, this enables you to convert the `mapping(uint256 => bool)` to a `mapping(uint256 => uint256)` and pay the cost of slot initialization just once every 256 `nonces` added, so the high gas costs are amortized over many calls.\n\nEach group of 256 sequential `nonces` values (0-255, 256-511, ...) are stored together in a single uint256, where each bit represents a bool. The correct index of each nonce inside each bitmap can be calculated by `nonce mod 256`. An exemplified implementation is shown below (For complete implementations see Modifications section)\n\n```javascript\nmapping(uint256 => uint256) public executed;\n\n//setting executed nonce value to true\nuint256 baseIndex = _nonce / 256;\nuint256 index = _nonce - (256 * baseIndex); \nuint256 mask = 1 << index;\nexecuted[baseIndex] |= mask;\n\n//getting the executed bool flag for a specific nonce\nuint256 baseIndex = _nonce / 256;\nuint256 index = _nonce - (256 * baseIndex); \nuint256 mask = 1 << index;\nbool _executedNonce = (executed[baseIndex] & mask) != 0\n```\n\nThe full extent of the gas reduction from these changes cannot be seen using the tests present in the repo, as during the tests `executeCalls` are called at most a few times, so the effect of amortization cannot be seen, underestimating the effect of these changes. Extra tests were added to enable benchmarking more realistic conditions (See modifications section below), where `executeCalls` is called 100 times in sequence, simulating many user interacting with the contract during normal operating conditions. Using those benchmarks, we obtain the following results.\n\n|                                                    | avg. gas (before modification) | avg. gas (after modification) | gas diff         |\n|----------------------------------------------------|--------------------------------|-------------------------------|------------------|\n| CrossChainExecutorArbitrum - executeCalls          | 31322                          | 9980                          | -21342 (-68.1%)  |\n| CrossChainExecutorOptimism - executeCalls          | 32241                          | 10899                         | -21342 (-66.2%)  |\n| CrossChainExecutorPolygon - processMessageFromRoot | 32279                          | 10940                         | -21339 (-66.1%)  |\n| Total                                              | 95842                          | 31819                         | -64023 (-66.8%)  |\n\n*Values obtained by running `forge test --match-test Benchmark --gas-report`\n\n### Modifications\n\nhttps://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-arbitrum/EthereumToArbitrumExecutor.sol\n```diff\ndiff --git a/EthereumToArbitrumExecutor.sol.orig b/EthereumToArbitrumExecutor.sol\nindex bfee411..cbe299b 100644\n--- a/EthereumToArbitrumExecutor.sol.orig\n+++ b/EthereumToArbitrumExecutor.sol\n@@ -23,7 +23,7 @@ contract CrossChainExecutorArbitrum is ICrossChainExecutor {\n    *         nonce => boolean\n    * @dev Ensure that batch of calls cannot be replayed once they have been executed.\n    */\n-  mapping(uint256 => bool) public executed;\n+  mapping(uint256 => uint256) public executed;\n \n   /* ============ External Functions ============ */\n \n@@ -36,8 +36,9 @@ contract CrossChainExecutorArbitrum is ICrossChainExecutor {\n     ICrossChainRelayer _relayer = relayer;\n     _isAuthorized(_relayer);\n \n-    bool _executedNonce = executed[_nonce];\n-    executed[_nonce] = true;\n+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);\n+    bool _executedNonce = (executed[baseIndex] & mask) != 0;\n+    executed[baseIndex] |= mask;\n \n     CallLib.executeCalls(_nonce, _sender, _calls, _executedNonce);\n \n@@ -54,6 +55,11 @@ contract CrossChainExecutorArbitrum is ICrossChainExecutor {\n     relayer = _relayer;\n   }\n \n+  function isExecuted(uint256 _nonce) external view returns (bool) {\n+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);\n+    return (executed[baseIndex] & mask) != 0;\n+  }\n+\n   /* ============ Internal Functions ============ */\n \n   /**\n@@ -67,4 +73,11 @@ contract CrossChainExecutorArbitrum is ICrossChainExecutor {\n       \"Executor/sender-unauthorized\"\n     );\n   }\n+\n+  function _getBaseIndexAndMask(uint256 _nonce) internal view returns (uint256, uint256) {\n+    uint256 baseIndex = _nonce / 256;\n+    uint256 index = _nonce - (256 * baseIndex);\n+    uint256 mask = 1 << index;\n+    return (baseIndex, mask);\n+  }\n }\n```\n\nhttps://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-optimism/EthereumToOptimismExecutor.sol\n```diff\ndiff --git a/EthereumToOptimismExecutor.sol.orig b/EthereumToOptimismExecutor.sol\nindex 1aba9c1..6763b22 100644\n--- a/EthereumToOptimismExecutor.sol.orig\n+++ b/EthereumToOptimismExecutor.sol\n@@ -26,7 +26,7 @@ contract CrossChainExecutorOptimism is ICrossChainExecutor {\n    *         nonce => boolean\n    * @dev Ensure that batch of calls cannot be replayed once they have been executed.\n    */\n-  mapping(uint256 => bool) public executed;\n+  mapping(uint256 => uint256) public executed;\n \n   /* ============ Constructor ============ */\n \n@@ -50,8 +50,9 @@ contract CrossChainExecutorOptimism is ICrossChainExecutor {\n     ICrossChainRelayer _relayer = relayer;\n     _isAuthorized(_relayer);\n \n-    bool _executedNonce = executed[_nonce];\n-    executed[_nonce] = true;\n+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);\n+    bool _executedNonce = (executed[baseIndex] & mask) != 0;\n+    executed[baseIndex] |= mask;\n \n     CallLib.executeCalls(_nonce, _sender, _calls, _executedNonce);\n \n@@ -68,6 +69,11 @@ contract CrossChainExecutorOptimism is ICrossChainExecutor {\n     relayer = _relayer;\n   }\n \n+  function isExecuted(uint256 _nonce) external view returns (bool) {\n+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);\n+    return (executed[baseIndex] & mask) != 0;\n+  }\n+\n   /* ============ Internal Functions ============ */\n \n   /**\n@@ -83,4 +89,11 @@ contract CrossChainExecutorOptimism is ICrossChainExecutor {\n       \"Executor/sender-unauthorized\"\n     );\n   }\n+\n+  function _getBaseIndexAndMask(uint256 _nonce) internal view returns (uint256, uint256) {\n+    uint256 baseIndex = _nonce / 256;\n+    uint256 index = _nonce - (256 * baseIndex);\n+    uint256 mask = 1 << index;\n+    return (baseIndex, mask);\n+  }\n }\n```\n\nhttps://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/src/ethereum-polygon/EthereumToPolygonExecutor.sol\n```diff\ndiff --git a/EthereumToPolygonExecutor.sol.orig b/EthereumToPolygonExecutor.sol\nindex 29bc54f..9c0df8c 100644\n--- a/EthereumToPolygonExecutor.sol.orig\n+++ b/EthereumToPolygonExecutor.sol\n@@ -28,7 +28,7 @@ contract CrossChainExecutorPolygon is FxBaseChildTunnel {\n    *         nonce => boolean\n    * @dev Ensure that batch of calls cannot be replayed once they have been executed.\n    */\n-  mapping(uint256 => bool) public executed;\n+  mapping(uint256 => uint256) public executed;\n \n   /* ============ Constructor ============ */\n \n@@ -51,11 +51,24 @@ contract CrossChainExecutorPolygon is FxBaseChildTunnel {\n       (uint256, address, CallLib.Call[])\n     );\n \n-    bool _executedNonce = executed[_nonce];\n-    executed[_nonce] = true;\n+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);\n+    bool _executedNonce = (executed[baseIndex] & mask) != 0;\n+    executed[baseIndex] |= mask;\n \n     CallLib.executeCalls(_nonce, _callsSender, _calls, _executedNonce);\n \n     emit ExecutedCalls(_sender, _nonce);\n   }\n+\n+  function isExecuted(uint256 _nonce) external view returns (bool) {\n+    (uint256 baseIndex, uint256 mask) = _getBaseIndexAndMask(_nonce);\n+    return (executed[baseIndex] & mask) != 0;\n+  }\n+\n+  function _getBaseIndexAndMask(uint256 _nonce) internal view returns (uint256, uint256) {\n+    uint256 baseIndex = _nonce / 256;\n+    uint256 index = _nonce - (256 * baseIndex);\n+    uint256 mask = 1 << index;\n+    return (baseIndex, mask);\n+  }\n }\n```\n\nhttps://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/test/unit/ethereum-arbitrum/EthereumToArbitrumExecutor.t.sol\n```diff\ndiff --git a/EthereumToArbitrumExecutor.t.sol.orig b/EthereumToArbitrumExecutor.t.sol\nindex 942d92d..37e7161 100644\n--- a/EthereumToArbitrumExecutor.t.sol.orig\n+++ b/EthereumToArbitrumExecutor.t.sol\n@@ -70,7 +70,7 @@ contract CrossChainExecutorArbitrumUnitTest is Test {\n \n     executor.executeCalls(nonce, sender, calls);\n \n-    assertTrue(executor.executed(nonce));\n+    assertTrue(executor.isExecuted(nonce));\n   }\n \n   function testExecuteCallsAlreadyExecuted() public {\n@@ -90,6 +90,17 @@ contract CrossChainExecutorArbitrumUnitTest is Test {\n     executor.executeCalls(nonce, sender, calls);\n   }\n \n+  function testExecuteCallsBenchmark() public {\n+    setRelayer();\n+\n+    vm.startPrank(relayerAlias);\n+\n+    for (uint256 i; i < 100; i++) {\n+      executor.executeCalls(nonce, sender, calls);\n+      nonce++;\n+    }\n+  }\n+\n   /* ============ Setters ============ */\n \n   function testSetRelayer() public {\n```\n\nhttps://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/test/fork/EthereumToOptimismFork.t.sol\n```diff\ndiff --git a/EthereumToOptimismFork.t.sol.orig b/EthereumToOptimismFork.t.sol\nindex be84235..ed2d2e7 100644\n--- a/EthereumToOptimismFork.t.sol.orig\n+++ b/EthereumToOptimismFork.t.sol\n@@ -194,6 +194,39 @@ contract EthereumToOptimismForkTest is Test {\n     assertEq(greeter.greet(), l1Greeting);\n   }\n \n+  function testExecuteCallsBenchmark() public {\n+    deployAll();\n+    setAll();\n+\n+    vm.selectFork(optimismFork);\n+\n+    CallLib.Call[] memory _calls = new CallLib.Call[](1);\n+\n+    _calls[0] = CallLib.Call({\n+      target: address(greeter),\n+      data: abi.encodeWithSignature(\"setGreeting(string)\", l1Greeting)\n+    });\n+\n+    L2CrossDomainMessenger l2Bridge = L2CrossDomainMessenger(l2CrossDomainMessenger);\n+\n+    vm.startPrank(AddressAliasHelper.applyL1ToL2Alias(proxyOVML1CrossDomainMessenger));\n+\n+    for (uint256 i; i < 100; i++) {\n+      l2Bridge.relayMessage(\n+        address(executor),\n+        address(relayer),\n+        abi.encodeWithSignature(\n+          \"executeCalls(uint256,address,(address,bytes)[])\",\n+          nonce,\n+          address(this),\n+          _calls\n+        ),\n+        l2Bridge.messageNonce() + 1\n+      );\n+      nonce++;\n+    }\n+  }\n+\n   function testGasLimitTooHigh() public {\n     deployAll();\n     setAll();\n```\n\nhttps://github.com/pooltogether/ERC5164/blob/5647bd84f2a6d1a37f41394874d567e45a97bf48/test/fork/EthereumToPolygonFork.t.sol\n```diff\ndiff --git a/EthereumToPolygonFork.t.sol.orig b/EthereumToPolygonFork.t.sol\nindex 01913e6..eaad5f2 100644\n--- a/EthereumToPolygonFork.t.sol.orig\n+++ b/EthereumToPolygonFork.t.sol\n@@ -179,6 +179,31 @@ contract EthereumToPolygonForkTest is Test {\n     assertEq(greeter.greet(), l1Greeting);\n   }\n \n+  function testExecuteCallsBenchmark() public {\n+    deployAll();\n+    setAll();\n+\n+    vm.selectFork(polygonFork);\n+\n+    CallLib.Call[] memory _calls = new CallLib.Call[](1);\n+\n+    _calls[0] = CallLib.Call({\n+      target: address(greeter),\n+      data: abi.encodeWithSignature(\"setGreeting(string)\", l1Greeting)\n+    });\n+\n+    vm.startPrank(fxChild);\n+\n+    for (uint256 i; i < 100; i++) {\n+      executor.processMessageFromRoot(\n+        1,\n+        address(relayer),\n+        abi.encode(nonce, address(this), _calls)\n+      );\n+      nonce++;\n+    }\n+  }\n+\n   function testGasLimitTooHigh() public {\n     deployAll();\n```\n\n**[PierrickGT (PoolTogether) acknowledged and commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/179#issuecomment-1353700299):**\n > Very interesting optimization but it does complexify the code quite a bit.<br>\n> So for this reason, I've acknowledged the issue but we won't implement the suggestion.\n\n**[Alex the Entreprenerd (judge) commented](https://github.com/code-423n4/2022-12-pooltogether-findings/issues/179#issuecomment-1365474238):**\n > I believe that in the spirit of Gas Reports, the report has shown:\n> - A refactoring with code snippets\n> - It's fully benchmarked\n> \n> Am accepting the finding as valid, and because it effectively saves one SSTORE on each operation, I believe 20k gas to be the appropriate amount saved\n> \n> 20_000\n\n\n\n***\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}