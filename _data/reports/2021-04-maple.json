{
  "circa": {
    "title": "Maple Finance",
    "sponsor": "Maple Finance",
    "slug": "2021-04-maple",
    "date": "2021-05-03",
    "findings": "https://github.com/code-423n4/2021-04-maple-findings/issues",
    "contest": 4
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code 432n4 (C4) is an open organization that consists of security researchers, auditors, developers, and individuals with domain expertise in the area of smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Maple Finance’s smart contract system written in Solidity. The code contest took place between April 8, 2021 and April 21, 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>11 Wardens contributed reports to the Maple Finance code contest:</p>\n<ul>\n<li><a href=\"https://twitter.com/0xRajeev\">0xRajeev</a></li>\n<li>0xsomeone</li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li>jmukesh</li>\n<li>a_delamo</li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://twitter.com/unsafe_call\">janbro</a></li>\n<li><a href=\"https://twitter.com/jvaqa\">jvaqa</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/_smonica_\">s1mo</a></li>\n<li>shw</li>\n</ul>\n<p>This contest was judged by <a href=\"https://twitter.com/nicksdjohnson\">Nick Johnson</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/sockdrawermoney\">sockdrawermoney</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 15 unique vulnerabilities. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 0 received a risk rating in the category of HIGH severity, 3 received a risk rating in the category of MEDIUM severity, and 12 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified an aggregate total of 33 non-critical recommendations.</p>\n<p>The Maple Finance team responded to the issues identified as result of this code contest and provided information regarding any changes to the codebase with a pull request. Links to the aforementioned PRs are appended to the issue descriptions outlined within the corresponding details described in the Issues Found By Severity section of this document. A small set of vulnerabilities and submissions were disputed by the Maple Finance team. We have selected many of the comments.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review consists of smart contracts written in the Solidity programming language which can be found linked from the <a href=\"XXXXXX\">C4 code contest repository</a>.</p>\n<p>The codebase audited was the <a href=\"https://github.com/maple-labs/maple-core\"><code>maple-core</code> repository</a>, which includes the MPL token as a submodule (<a href=\"https://github.com/maple-labs/maple-token\"><code>maple-token</code></a>). All technical documentation for the protocol is located in the <code>maple-core</code> <a href=\"https://github.com/maple-labs/maple-core/wiki\">wiki</a>.</p>\n<p>The version of the code under review, including tests and tooling, is also available at the following URLs:</p>\n<ul>\n<li><a href=\"https://github.com/maple-labs/maple-core/tree/1b151c79ae1406b46405bb37cf82f033b1ba69dc\">maple-core</a></li>\n<li><a href=\"https://github.com/maple-labs/maple-token/tree/834e8392e4534fc405d70c58f0f7679b111e6e83\">maple-token</a></li>\n</ul>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into 3 primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings\" style=\"position:relative;\"><a href=\"#high-risk-findings\" aria-label=\"high risk findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings</h1>\n<p>No high risk findings.</p>\n<h1 id=\"medium-risk-findings\" style=\"position:relative;\"><a href=\"#medium-risk-findings\" aria-label=\"medium risk findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings</h1>\n<h2 id=\"m-01-loans-of-tokens-with-18-decimals-can-result-in-incorrect-collateral-calculation\" style=\"position:relative;\"><a href=\"#m-01-loans-of-tokens-with-18-decimals-can-result-in-incorrect-collateral-calculation\" aria-label=\"m 01 loans of tokens with 18 decimals can result in incorrect collateral calculation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/4\">[M-01] Loans of tokens with >18 decimals can result in incorrect collateral calculation</a></h2>\n<p>It is possible for a user to mislead a Pool Delegate to a seemingly innocuous loan by utilizing a token with more than 18 decimals as collateral and lucrative loan terms.</p>\n<p>The <a href=\"https://github.com/maple-labs/maple-core/blob/031374b2609560ade825532474048eb5826dec20/contracts/library/LoanLib.sol#L235\">final calculation</a> within the <code>collateralRequiredForDrawdown</code> of <code>LoanLib</code> incorrectly assumes the collateral token of a loan to be less than <code>18</code> decimals, which can not be the case as there is no sanitization conducted on the creation of a <code>Loan</code> via the factory. This can cause an underflow to the power of <code>10</code> which will cause the division to yield <code>0</code> and thus cause the <code>Loan</code> to calculate <code>0</code> as collateral required for the loan. We advise the <a href=\"https://github.com/maple-labs/maple-core/blob/031374b2609560ade825532474048eb5826dec20/contracts/library/LoanLib.sol#L247\">same paradigm</a> as <code>_toWad</code> to be applied, which is secure.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/4#issuecomment-824852669\">lucas-manuel (Maple) acknowledged</a>:</strong></p>\n<blockquote>\n<p>We are aware that we cannot onboard liquidityAssets or collateralAssets with more that 18 decimals of precision, and will make that part of our onboarding criteria.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/4#issuecomment-827193173\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>This is 100% a legitimate issue that could be exploited against the contract, and using social mitigations (making this part of the onboarding strategy) when there’s a technical mitigation (<code>require()</code>ing that the token have &#x3C;= 18 decimals, or using the recommended mitigation) is insufficient and could easily lead to an exploit due to human error.</p>\n<p>Based on the OWASP methodogology, I’m judging this as Likelihood=Low (because of the requirement to get it past human review) and Impact=High (because of the impact of the bug if it were exploited to create a 0-collateral loan and default on it), resulting in a Severity of Medium.</p>\n</blockquote>\n<h2 id=\"m-02-potential-huge-arbitrage-opportunities--mpl-price-decrease\" style=\"position:relative;\"><a href=\"#m-02-potential-huge-arbitrage-opportunities--mpl-price-decrease\" aria-label=\"m 02 potential huge arbitrage opportunities  mpl price decrease permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/92\">[M-02] Potential huge arbitrage opportunities / MPL price decrease</a></h2>\n<p>When the protocol suffers a default, the BPT stakers are the first line of defense and the protocol trades the BPT pool tokens for the single-sided liquidity asset of the Balancer LIQUIDITY &#x3C;> MPT pool. (<code>PoolLib.handleDefault</code>)</p>\n<p>Note that a pool token to single-asset trade is the same as burning the LP tokens to receive an equal amount of all underlying tokens, and then trading all other tokens received for the single asset.</p>\n<p>It’s the reverse of this:</p>\n<blockquote>\n<p>“Depositing a single asset A to a shared pool is equivalent to depositing all pool assets proportionally and then selling more of asset A to get back all the other tokens deposited.” (<a href=\"https://balancer.finance/whitepaper\">Balancer</a>)</p>\n</blockquote>\n<p>This means on each default MPT tokens are sold for the liquidity asset. As the default is potentially a huge amount that happens at once, this creates a huge arbitrage opportunity.</p>\n<p>As the default suffered can be a huge amount and the “repayment” happens at once, this creates a huge arbitrage opportunity: The MPT token price goes down. The borrow could also be incentivised to not repay the loan and take advantage of the arbitrage opportunity, either competing themselves on-chain or through shorts/bets on the MPT price.</p>\n<p>Hard to completely mitigate. Pool delegates should be especially careful when giving out high-value loans and demand high collateral lockup.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/92#issuecomment-825884796\">lucas-manuel (Maple) confirmed</a>:</strong></p>\n<blockquote>\n<p>This is a valid concern, but not something that we are going to mitigate before launch. We are going to plan for PDs to atomically liquidate and burn.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/92#issuecomment-827258265\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>I think this a valid finding; whether or not it’s intended to be mitigated pre-launch, the Sponsor acknowledges it’s a valid concern, and not something that’s declared as part of the protocol’s intrinsic assumptions. These sort of findings are exactly what audits are intended to uncover and bring to the attention of users as caveats when using the system. I concur with the Warden’s assessment of Medium.</p>\n</blockquote>\n<h2 id=\"m-03-bypass-or-reduction-on-the-lockup-period-of-pool-fdts\" style=\"position:relative;\"><a href=\"#m-03-bypass-or-reduction-on-the-lockup-period-of-pool-fdts\" aria-label=\"m 03 bypass or reduction on the lockup period of pool fdts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/117\">[M-03] Bypass or reduction on the lockup period of Pool FDTs.</a></h2>\n<p>In <code>Pool.sol</code>, the lockup restriction of withdrawal (<code>Pool.sol#396</code>) can be bypassed or reduced if new liquidity providers cooperate with existing ones.</p>\n<ol>\n<li>A liquidity provider, Alice, deposits liquidity assets into the pool and minted some FDTs. She then waits for <code>lockupPeriod</code> days and calls <code>intendToWithdraw</code> to pass her withdrawal window. Now she is available to receive FDTs from others.</li>\n<li>A new liquidity provider, Bob, deposits liquidity assets into the pool and minted some FDTs. Currently, he is not allowed to withdraw his funds by protocol design.</li>\n<li>Bob and Alice agree to cooperate with each other to reduce Bob’s waiting time for withdrawal. Bob transfers his FDT to Alice via the <code>_transfer</code> function.</li>\n<li>Alice calls <code>intendToWithdraw</code> and waits for the <code>withdrawCooldown</code> period. Notice that Alice’s <code>depositDate</code> is updated after the transfer; however, since it is calculated using a weighted timestamp, the increased amount of lockup time should be less than <code>lockupPeriod</code>. In situations where the deposit from Alice is much larger than that from Bob, Alice could only even need to wait for the <code>withdrawCooldown</code> period before she could withdraw any funds.</li>\n<li>Alice then withdraws the amount of FDT that Bob transferred to her and transfers the funds (liquidity assets) to Bob. Bob successfully reduces (or bypasses) the lockup period of withdrawal.</li>\n</ol>\n<p>Recommend forcing users to wait for the lockup period when transferring FDT to others or let the <code>depositDate</code> variable record the timestamp of the last operation instead of a weighted timestamp.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/117#issuecomment-827880947\">lucas-manuel (Maple) confirmed</a>:</strong></p>\n<blockquote>\n<p>Addressed in <a href=\"https://github.com/maple-labs/maple-core/pull/378\">this PR</a></p>\n</blockquote>\n<h1 id=\"low-risk-findings\" style=\"position:relative;\"><a href=\"#low-risk-findings\" aria-label=\"low risk findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings</h1>\n<h2 id=\"l-01-cross-chain-replay-attack\" style=\"position:relative;\"><a href=\"#l-01-cross-chain-replay-attack\" aria-label=\"l 01 cross chain replay attack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/2\">[L-01] Cross-Chain Replay Attack</a></h2>\n<p>The <code>constructor</code> of the Maple token calculates the <code>chainid</code> it should assign during its execution and permanently stores it in an <code>immutable</code> variable. Should Ethereum fork in the feature, the <code>chainid</code> will change however the one used by the permits will not enabling a user to use any new permits on both chains thus breaking the token on the forked chain permanently. (Please consult <a href=\"https://eips.ethereum.org/EIPS/eip-1344#rationale\">EIP1344</a> for more details.)</p>\n<p>The calculation of the <code>chainid</code> dynamically on each <code>permit</code> invocation. As a gas optimization, the deployment pre-calculated hash for the permits can be stored to an <code>immutable</code> variable and a validation can occur on the <code>permit</code> function that ensure the current <code>chainid</code> is equal to the one of the cached hash and if not, to re-calculate it on the spot.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/2#issuecomment-824848610\">lucas-manuel (Maple) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Not going to implement, if Ethereum forks we will not used forked MPL</p>\n</blockquote>\n<h2 id=\"l-02-missing-check-for-pool-state-on-several-functions-in-poolsol\" style=\"position:relative;\"><a href=\"#l-02-missing-check-for-pool-state-on-several-functions-in-poolsol\" aria-label=\"l 02 missing check for pool state on several functions in poolsol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/68\">[L-02] Missing check for Pool state on several functions in Pool.sol</a></h2>\n<p>The Pool may be in three states: Initialized, Finalized and Deactivated as indicated by the enum State variable. While a couple of functions such as fundLoan() and deposit() check against a valid Pool state i.e. Finalized using <code>\\_isValidState(State.Finalized)</code>, most other functions miss this check. This could cause unexpected protocol behavior if such functions are triggered in invalid Pool states (e.g. deactivated).</p>\n<p>Examples of such functions missing this Pool state validity check are <code>triggerDefault()``,</code>claim()<code></code>, <code>withdraw()</code>and<code>withdrawFunds()</code>.</p>\n<p>Recommend adding _isValidState(State.Finalized) check to all such functions specified above.</p>\n<p>**<a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/68#issuecomment-825866047\">lucas-manuel (Maple) acknowledged</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/68#issuecomment-827202832\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>Submitter has not demonstrated how this can be exploited, but these seem like important checks to be omitting and may well result in invariants being violated. In the absence of a specific exploit vector, I’m awarding this as Low.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/68#issuecomment-827736767\">satyamakgec (Maple) commented</a>:</strong></p>\n<blockquote>\n<p>So we did an analysis again and here are some data points:</p>\n<ul>\n<li><code>triggerDefault()</code> -> It will only be called by the Pool Delegate and it internally checks whether the Pool (precicesly DebtLocker) has the 20 % of supplied LoanFDTs If yes then procced otherwise fail. So in the <code>Initialized</code> state it will not be callable as there is no fund provided to loan so not LoanFDT in the debtlocker, While if the loan get defaulted once then loan will automatically get closed so triggerDefault() will revert in that case.</li>\n<li><code>withdraw()</code> -> It has again implicit check of the pool state as there is no way to get the poolFDT if the Pool is in the <code>Initialized</code> state while if Pool is in the Finalized state then again there is no harm as user can withdraw its funds if they have otherwise it will not be possible.</li>\n<li><code>withdrawFunds()</code> -> This is simillar as above if you have entitled amount then only it will works otherwise it will be a just a gas waste of the msg.sender.</li>\n<li><code>claim()</code> -> It is a permissioned function (only be callable by Pool delegate) even if it get called during <code>Initialized</code> or after <code>Finalized</code> state then nothing happen only be the waste of gas which I think it is okay in this case as PD is very well aware about the process.</li>\n</ul>\n<p>We could add the statechecks eventually but it doesn’t give us any extra benefit although it does increase the size of the PoolFactory contract bytecode that we don’t want as we are already on the verge of <code>24 KB</code></p>\n</blockquote>\n<h2 id=\"l-03-mirrored-admin-variables-in-global-context-pool-poolfactory-loan-and-loanfactory-may-make-it-confusing-for-deployment-and-maintenance\" style=\"position:relative;\"><a href=\"#l-03-mirrored-admin-variables-in-global-context-pool-poolfactory-loan-and-loanfactory-may-make-it-confusing-for-deployment-and-maintenance\" aria-label=\"l 03 mirrored admin variables in global context pool poolfactory loan and loanfactory may make it confusing for deployment and maintenance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/36\">[L-03] Mirrored admin variables in global context, Pool, PoolFactory, Loan and LoanFactory may make it confusing for deployment and maintenance</a></h2>\n<p>The access control model for the different contracts and how they interact is confusing and may cause issues during deployment and maintenance. Multiple contracts have the notion of admin(s), all of which use setAdmin function to update admin status. This mirroring and reuse of the admin variable is susceptible to accidents.</p>\n<p>Recommend renaming the different admin variables e.g. adminGlobal, adminPool, adminLoan. Document the access control roles, hierarchy and interactions explicitly.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/36#issuecomment-824948764\">lucas-manuel (Maple) confirmed</a>.</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/36#issuecomment-827208207\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>Unresolved, this could lead to issues (eg, forgetting to migrate admin on one contract, or accidentally granting admin permission on the wrong contract), so I’m rating this Low.</p>\n</blockquote>\n<h2 id=\"l-04-full-payment-does-not-consider-late-fees-of-the-payment\" style=\"position:relative;\"><a href=\"#l-04-full-payment-does-not-consider-late-fees-of-the-payment\" aria-label=\"l 04 full payment does not consider late fees of the payment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/112\">[L-04] Full payment does not consider late fees of the payment</a></h2>\n<p>Since the calculation of <code>makeFullPayment</code> (<code>Loan.sol#249</code>) does not consider whether the payment is late or not, the borrower can avoid paying late fees by only calling <code>makeFullPayment</code> instead of <code>makePayment</code> (<code>Loan.sol#238</code>). The borrower has no incentive to repay the loan in time and could</p>\n<p>The full payment is calculated by <code>PremiumCalc</code>, which ignores whether the payment is late or not. A configured premium fee calculates the interest; however, it is a fixed value through time. The interest that a borrower should pay for borrowing the loan for any amount of time (e.g., a month or a year) is the same.</p>\n<p>Recommend calculating late fees in <code>PremiumCalc</code> as in <code>RepaymentCalc</code> to let the borrower pay late fees based on the <code>apr</code> of loan.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/112#issuecomment-827295249\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>Another way to look at this is that the borrower gets <code>gracePeriod</code> extra days of borrowing for free - just by deferring their final payment. Agree with Medium.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/112#issuecomment-827901109\">lucas-manuel (Maple) commented</a>:</strong></p>\n<blockquote>\n<p>If they deferred their final payment and did makeFullPayment instead of makePayment they would pay premiumFee on their principal, which is set to be a larger amount than a given payment plus late fee, so they would be losing money in this case.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/112#issuecomment-828004317\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>Based on my understanding of the code:</p>\n<p>Relevant configurable parameters are the payment interval (<code>payment_interval</code>), grace period before foreclosure (<code>grace_period</code>), interest payment size (<code>interest_payment</code>), late payment fee as a percentage of interest payment size (<code>late_fee</code>), and premium fee (<code>premium_fee</code>).</p>\n<p>If <code>payment_interval * 2 &#x3C; grace_period</code>, it’s possible to be late multiple payments - in which case you pay multiple late fees.</p>\n<p>Without charging late payment fees on a full repayment, there are two scenarios in which the borrower can end up better off:</p>\n<ul>\n<li>If <code>(payment_interval / grace_period) * late_fee > premium_fee</code>, once the borrower is late some number of <code>payment_intervals</code>, they pay less by doing a full repayment with the premium fee than by paying off the normal way.</li>\n<li>If <code>(payment_interval / grace_period) * interest_payment > premium_fee</code>, they can treat the grace period as an extra loan period, and pay no more than they would have in interest (possibly less, depending on the parameters).</li>\n</ul>\n<p>Since both of these are only possible with certain parameter values, I’m downgrading this to Low. This could be remedied by either putting range checks for these parameter values in loan initialisation, or by calculating ‘missed interest’ and late fees in <code>makeFullPayment</code> and taking the minimum of that and the premium fee.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/112#issuecomment-828015753\">lucas-manuel (Maple) commented</a>:</strong></p>\n<blockquote>\n<p>We’re going to leave as is and just ensure that Pool Delegates are educated around Loan terms and what they entail before funding them.</p>\n</blockquote>\n<h2 id=\"l-05-chainlink-price-data-could-be-stale\" style=\"position:relative;\"><a href=\"#l-05-chainlink-price-data-could-be-stale\" aria-label=\"l 05 chainlink price data could be stale permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/82\">[L-05] Chainlink Price data could be stale</a></h2>\n<p>There is no check if the return value indicates stale data. This could lead to stale prices according to the Chainlink documentation:</p>\n<ul>\n<li><a href=\"https://docs.chain.link/docs/developer-communications#current-notifications\">“if answeredInRound &#x3C; roundId could indicate stale data.”</a></li>\n<li><a href=\"https://docs.chain.link/docs/historical-price-data#solidity\">“A timestamp with zero value means the round is not complete and should not be used.”</a></li>\n</ul>\n<p>The price oracle might return unreliable price data which can lead to a variety of different issues in the protocol, for example, for liquidating more staker &#x26; lender tokens than required at fair market price.</p>\n<p>Add missing checks for stale data. See example <a href=\"https://github.com/cryptexfinance/contracts/blob/master/contracts/oracles/ChainlinkOracle.sol#L58-L65\">here</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/82#issuecomment-825199891\">lucas-manuel (Maple) confirmed</a>:</strong></p>\n<blockquote>\n<p>We will add this check, but disagree that this is a high severity bug.\nEspecially since we will be using BTC and ETH oracles to start, it is very rare that there will be stale data.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/82#issuecomment-827243670\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>Since the contract only asks for latest data, incomplete rounds should be impossible, so we can discount them. Stale data is possible; I would rate this as Likelihood=LOW (it’ll be difficult to make ChainLink oracles go stale) and Impact=Medium (this could only be used to create arb opportunities on loan collateral or liquidations, which will be limited to the price change during the stale period), resulting in a Severity=Low.</p>\n</blockquote>\n<h2 id=\"l-06-chainlink-price-oracle-always-assumes-8-decimals\" style=\"position:relative;\"><a href=\"#l-06-chainlink-price-oracle-always-assumes-8-decimals\" aria-label=\"l 06 chainlink price oracle always assumes 8 decimals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/83\">[L-06] Chainlink Price oracle always assumes 8 decimals</a></h2>\n<p>The response from the price oracle always assumes 8 decimals (see <code>PoolLib.convertFromUsd</code>) but it’s never checked if the oracle response has 8 decimals using ChainLink’s <code>.decimals()</code> function. At some point, the governor might set up a USD price feed oracle that contains more than 8 decimals leading to inflated prices everywhere.</p>\n<p>Recommend checking <code>_aggregator.decimals() == 8</code> in <code>ChainlinkOracle</code> constructor and <code>changeAggregator</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/83#issuecomment-825200582\">lucas-manuel (Maple) confirmed</a>:</strong></p>\n<blockquote>\n<p>We were going to do this manually, we were aware of this issue, but it is a good idea to just add a check. Disagree with severity.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/83#issuecomment-827244538\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>Impact would be High if this happened, but the Likelihood is very low. Agree with Severity=Low.</p>\n</blockquote>\n<h2 id=\"l-07-missing-check-on-setmanualpriceint256-_price\" style=\"position:relative;\"><a href=\"#l-07-missing-check-on-setmanualpriceint256-_price\" aria-label=\"l 07 missing check on setmanualpriceint256 _price permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/85\">[L-07] Missing check on <code>setManualPrice(int256 _price)</code></a></h2>\n<p>The <code>ChainlinkOracle.setManualPrice</code> function specifies that it can only be called “if manualOverride == true”.</p>\n<p>This is not the case.</p>\n<p>Assume an oracle failure happened, and the oracle needs to be manually set to prevent losses.\nThe <code>setManualPrice</code> function succeeds and the owner might think that the oracle price is overwritten as the function would fail when <code>manualOverride</code> is not <code>true</code> according to specification.\nThe protocol would still use the broken chainlink price feed and suffer losses.</p>\n<p>Add the missing <code>require(manualOverride == true, \"manual override not set\")</code> check.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/85#issuecomment-825202377\">lucas-manuel (Maple) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Not really a bug, but we will address this.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/85#issuecomment-827245604\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>I would add, though, that the current configuration is unsafe. If <code>setManualPrice</code> is changed to require that <code>manualOverride</code> is true, there will be an interval between calling <code>setManualOverride</code> and <code>setManualPrice</code> during which an old price is used. Instead, a single function that enables the manual override and sets the price should probably be used.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/85#issuecomment-827245967\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>On further thought, upgrading to Low based on Warden’s reasoning - the success of the call to <code>setManualPrice</code> may lead the submitter to believe that the issue is resolved, when it only sets a value that is not referenced.</p>\n</blockquote>\n<h2 id=\"l-08-missing-non-zero-check\" style=\"position:relative;\"><a href=\"#l-08-missing-non-zero-check\" aria-label=\"l 08 missing non zero check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/87\">[L-08] Missing non-zero check</a></h2>\n<p>The <code>MapleGlobals.setPriceOracle</code> should check that the oracle address is not zero.</p>\n<p>A wrong call to this function might set the oracle address to the zero address and break core oracle functionality.</p>\n<p>Add a <code>require(oracle != 0)</code> statement.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/87#issuecomment-826983646\">lucas-manuel (Maple) disputed</a>:</strong></p>\n<blockquote>\n<p>We actually are not going to address this, we do not think this is a bug. The governor will manually verify non-zero addresses.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/87#issuecomment-827247634\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>I think this warrants Likelihood=Low,Impact=Medium => Severity=Low. Unlike deployment misconfigurations, this mistake, while unlikely, would impact the running system, and it’s easily defended against.</p>\n</blockquote>\n<h2 id=\"l-09-mpl-reward-claims-of-balancer-pools-can-be-exploited\" style=\"position:relative;\"><a href=\"#l-09-mpl-reward-claims-of-balancer-pools-can-be-exploited\" aria-label=\"l 09 mpl reward claims of balancer pools can be exploited permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/90\">[L-09] MPL reward claims of balancer pools can be exploited</a></h2>\n<blockquote>\n<p><a href=\"https://github.com/maple-labs/maple-core/wiki/MPL-Token\">When MPL tokens are added as liquidity to the Balancer pool, the Balancer pool is the owner of those tokens, which are accruing USDC interest.</a></p>\n</blockquote>\n<p>Anyone can send the USDC interest to the balancer pool by calling <code>withdrawFundsOnBehalf(balancerPool)</code>.</p>\n<p>An attacker can abuse this to capture part of this interest by doing the following steps in a single transaction:</p>\n<ol>\n<li>Deposit MPT/USDC to the balancer pool (the initial liquidity can also be acquired by a flash loan)</li>\n<li>Send USDC to the pool by calling <code>withdrawFundsOnBehalf(bPool)</code>, call <code>gulp</code>.</li>\n<li>Withdraw liquidity again, the attacker will receive their initial deposit + a share of the USDC interest proportional to their LP tokens.</li>\n</ol>\n<p>USDC interest that was supposed to go to MPT balancer pool stakers is stolen by attackers.\nFunds might be locked forever.</p>\n<p>This is hard to prevent completely because you’re sending free money to the pool.\nOne way to reduce the risk is to only allow claiming interest by the governor / trusted parties. This would disallow attacker to perform this in a risk-free way in a single transaction, but the same attack would still be possible for miners.</p>\n<p>Consider alternative ways of distributing the interest of balancer pools like transferring it to all MPT holders instead of liquidity providers, because:</p>\n<ol>\n<li>it’s currently not fair anyway because only the LPs that are in the pool at the time <code>withdrawFundsOnBehalf</code> was called will benefit, regardless of how long they have been providing this liquidity.</li>\n<li>External arbitrageurs are the ones that benefit from this short-term pool price imbalance the most and a good chunk of the USDC interest will go to them</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/90#issuecomment-825874771\">lucas-manuel (Maple) disputed</a>:</strong></p>\n<blockquote>\n<p>Not a bug, <code>distributeToHolders</code> and <code>withdrawFundsOnBehalfOf</code> will always be called atomically by the governor.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/90#issuecomment-827253756\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>Without code to ensure that <code>withdrawFundsOnBehalfOf is called immediately after</code>distributeToHolders`, this bug can still occur. I’m considering this Likelihood=Low,Impact=Medium => Severity=Low.</p>\n</blockquote>\n<h2 id=\"l-10-mpl-usdc-distributions-can-be-withdrawn-by-anyone\" style=\"position:relative;\"><a href=\"#l-10-mpl-usdc-distributions-can-be-withdrawn-by-anyone\" aria-label=\"l 10 mpl usdc distributions can be withdrawn by anyone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/91\">[L-10] MPL USDC distributions can be withdrawn by anyone</a></h2>\n<p>Anyone can withdraw USDC interest of another address by calling <code>withdrawFundsOnBehalf(addr)</code>.</p>\n<p>Imagine a smart contract that has a specific function for withdrawing the USDC contract to their contract:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawAndTransfer</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">mpt</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">owner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>If the contract has no <code>skim</code> function to transfer out the assets, they can get stuck forever.</p>\n<p>USDC interest can get stuck forever.</p>\n<p>Disallow withdrawals on behalf of other users.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/91#issuecomment-825877487\">lucas-manuel (Maple) disputed</a>:</strong></p>\n<blockquote>\n<p>Not a bug, this was intended. Projects that integrate with MPL will have to take this functionality into account.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/91#issuecomment-827255034\">Nick Johnson (Judge)</a>:</strong></p>\n<blockquote>\n<p>Many systems integrate support for generic ERC-20 token contracts without being able to handle per-token special cases. For example, I believe this issue would affect any Uniswap/Balancer/etc liquidity pool between MPL and any non-USDC token. Rating this as Low, per submitter, though I believe an argument could be made for making this higher severity, since it limits the ability to use MPL tokens in generic systems without losing out on dividends.</p>\n</blockquote>\n<h2 id=\"l-11-loanlibunwind-uses-globalsfundingperiod\" style=\"position:relative;\"><a href=\"#l-11-loanlibunwind-uses-globalsfundingperiod\" aria-label=\"l 11 loanlibunwind uses globalsfundingperiod permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/100\">[L-11] LoanLib.unwind uses globals.fundingPeriod()</a></h2>\n<p>Every loan has its own fundingPeriod which is set once in the constructor:\nfundingPeriod = globals.fundingPeriod();\nfundingPeriod in globals can change. It does not effect already deployed Loans.\nHowever, in Loan contract function unwind() calls LoanLib.unwind which checks against globals.fundingPeriod():\nIGlobals globals = _globals(superFactory);\n// Only callable if time has passed drawdown grace period, set in MapleGlobals\nrequire(block.timestamp > createdAt.add(globals.fundingPeriod()), “Loan:FUNDING<em>PERIOD</em>NOT_FINISHED”);\nat this time, globals.fundingPeriod() could be different than this specific Loan’s fundingPeriod.</p>\n<p>Recommend checking expiration against local fundingPeriod.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/100#issuecomment-825713481\">lucas-manuel (Maple) confirmed</a></strong></p>\n<h2 id=\"l-12-uniswap-dos\" style=\"position:relative;\"><a href=\"#l-12-uniswap-dos\" aria-label=\"l 12 uniswap dos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/105\">[L-12] Uniswap DOS</a></h2>\n<p>Borrowers can launch a front running/sandwich attack on triggerDefault() which manipulates the price on Uniswap outside the maxSwapSlippage range causing the function to revert and the collateral to stay in the collateralLocker There is no way to transfer the collateral out of the collateralLocker after a loan default without going through a Uniswap trade, so a borrower can lock funds indefinitely for a fraction of the locked collateral (cost of Uniswap fees) and potentially hold their collateral hostage.</p>\n<p>Recommend using more than one source of liquidity for liquidations.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/105#issuecomment-825725616\">lucas-manuel (Maple) acknowledged</a>:</strong></p>\n<blockquote>\n<p>We will be upgrading liquidations post-launch.</p>\n</blockquote>\n<h1 id=\"non-critical-findings\" style=\"position:relative;\"><a href=\"#non-critical-findings\" aria-label=\"non critical findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/113\">[N-01] Functions calculating the value of <code>BPT</code> is vulnerable to flash-loan attacks.</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/8\">[N-02] MapleTreasury does not emit an event when MapleGlobals address is updated</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/9\">[N-03] Constructor arguments to MapleTreasury not validated</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/10\">[N-04] Missing zero address validation</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/17\">[N-05] Unused definition of enum</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/23\">[N-06] Same constants defined in different files</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/25\">[N-07] Typo NULL<em>TRASNFER</em>DST</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/26\">[N-08] Year is not exactly 365 days</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/27\">[N-09] Missing event for critical operation of new Collateral locker creation in CollateralLockerFactory.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/32\">[N-10] Vulnerable to potential reentrancy attacks in Loan.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/34\">[N-11] Inconsistent NatSpec comment in DebtLocker.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/43\">[N-12] Missing input validation on function parameter for zero address in StakeLocker.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/46\">[N-13] Inconsistent NatSpec comment in StakeLocker.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/52\">[N-14] Specification/Implementation mismatch on Security Multisig capability</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/54\">[N-15] Inconsistent NatSpec comment in PoolFactory.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/62\">[N-16] Incorrect require error message string in LoanFactory.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/96\">[N-17] Comment indicates that FundsWithdrawn event should be emitted only when _withdrawableDividend > 0</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/76\">[N-18] Use of mapping in place of array in <code>PoolFactory</code> and <code>LoanFactory</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/77\">[N-19] Outdated Compiler</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/78\">[N-20] Unused variable in <code>PoolLib.handleDefault</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/79\">[N-21] Unnecessary check for <code>uint256 >= 0</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/84\">[N-22] Wrong docs on UsdOracle</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/86\">[N-23] Missing index on events</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/108\">[N-24] Not ERC20 Compliant</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/89\">[N-25] Allowance Double-Spend Exploit</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/93\">[N-26] Griefing attack on loan creation in LoanFactory.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/94\">[N-27] Griefing attack on pool creation in PoolFactory.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/97\">[N-28] Unused code</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/98\">[N-29] Interface and implementation function declaration differs</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/99\">[N-30] Function triggerDefault should call _emitBalanceUpdateEventForCollateralLocker</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/103\">[N-31] getRewardForDuration will start returning misleading results if rewardsDuration is updated</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/110\">[N-32] Oracle not checked if set for an asset</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-04-maple-findings/issues/106\">[N-33] Default slippage value too high</a></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code, but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li><a href=\"#high-risk-findings\">High Risk Findings</a></li>\n<li>\n<p><a href=\"#medium-risk-findings\">Medium Risk Findings</a></p>\n<ul>\n<li><a href=\"#m-01-loans-of-tokens-with-18-decimals-can-result-in-incorrect-collateral-calculation\">[M-01] Loans of tokens with >18 decimals can result in incorrect collateral calculation</a></li>\n<li><a href=\"#m-02-potential-huge-arbitrage-opportunities--mpl-price-decrease\">[M-02] Potential huge arbitrage opportunities / MPL price decrease</a></li>\n<li><a href=\"#m-03-bypass-or-reduction-on-the-lockup-period-of-pool-fdts\">[M-03] Bypass or reduction on the lockup period of Pool FDTs.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-findings\">Low Risk Findings</a></p>\n<ul>\n<li><a href=\"#l-01-cross-chain-replay-attack\">[L-01] Cross-Chain Replay Attack</a></li>\n<li><a href=\"#l-02-missing-check-for-pool-state-on-several-functions-in-poolsol\">[L-02] Missing check for Pool state on several functions in Pool.sol</a></li>\n<li><a href=\"#l-03-mirrored-admin-variables-in-global-context-pool-poolfactory-loan-and-loanfactory-may-make-it-confusing-for-deployment-and-maintenance\">[L-03] Mirrored admin variables in global context, Pool, PoolFactory, Loan and LoanFactory may make it confusing for deployment and maintenance</a></li>\n<li><a href=\"#l-04-full-payment-does-not-consider-late-fees-of-the-payment\">[L-04] Full payment does not consider late fees of the payment</a></li>\n<li><a href=\"#l-05-chainlink-price-data-could-be-stale\">[L-05] Chainlink Price data could be stale</a></li>\n<li><a href=\"#l-06-chainlink-price-oracle-always-assumes-8-decimals\">[L-06] Chainlink Price oracle always assumes 8 decimals</a></li>\n<li><a href=\"#l-07-missing-check-on-setmanualpriceint256-_price\">[L-07] Missing check on <code>setManualPrice(int256 _price)</code></a></li>\n<li><a href=\"#l-08-missing-non-zero-check\">[L-08] Missing non-zero check</a></li>\n<li><a href=\"#l-09-mpl-reward-claims-of-balancer-pools-can-be-exploited\">[L-09] MPL reward claims of balancer pools can be exploited</a></li>\n<li><a href=\"#l-10-mpl-usdc-distributions-can-be-withdrawn-by-anyone\">[L-10] MPL USDC distributions can be withdrawn by anyone</a></li>\n<li><a href=\"#l-11-loanlibunwind-uses-globalsfundingperiod\">[L-11] LoanLib.unwind uses globals.fundingPeriod()</a></li>\n<li><a href=\"#l-12-uniswap-dos\">[L-12] Uniswap DOS</a></li>\n</ul>\n</li>\n<li><a href=\"#non-critical-findings\">Non-Critical Findings</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode 432n4 (C4) is an open organization that consists of security researchers, auditors, developers, and individuals with domain expertise in the area of smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of Maple Finance’s smart contract system written in Solidity. The code contest took place between April 8, 2021 and April 21, 2021.\n\n## Wardens\n\n11 Wardens contributed reports to the Maple Finance code contest:\n\n- [0xRajeev](https://twitter.com/0xRajeev)\n- 0xsomeone\n- [cmichel](https://twitter.com/cmichelio)\n- jmukesh\n- a_delamo\n- [gpersoon](https://twitter.com/gpersoon)\n- [janbro](https://twitter.com/unsafe_call)\n- [jvaqa](https://twitter.com/jvaqa)\n- [pauliax](https://twitter.com/SolidityDev)\n- [s1mo](https://twitter.com/_smonica_)\n- shw\n\nThis contest was judged by [Nick Johnson](https://twitter.com/nicksdjohnson).\n\nFinal report assembled by [sockdrawermoney](https://twitter.com/sockdrawermoney).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 15 unique vulnerabilities. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 0 received a risk rating in the category of HIGH severity, 3 received a risk rating in the category of MEDIUM severity, and 12 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified an aggregate total of 33 non-critical recommendations.\n\nThe Maple Finance team responded to the issues identified as result of this code contest and provided information regarding any changes to the codebase with a pull request. Links to the aforementioned PRs are appended to the issue descriptions outlined within the corresponding details described in the Issues Found By Severity section of this document. A small set of vulnerabilities and submissions were disputed by the Maple Finance team. We have selected many of the comments.\n\n# Scope\n\nThe code under review consists of smart contracts written in the Solidity programming language which can be found linked from the [C4 code contest repository](XXXXXX).\n\nThe codebase audited was the [`maple-core` repository](https://github.com/maple-labs/maple-core), which includes the MPL token as a submodule ([`maple-token`](https://github.com/maple-labs/maple-token)). All technical documentation for the protocol is located in the `maple-core` [wiki](https://github.com/maple-labs/maple-core/wiki).\n\nThe version of the code under review, including tests and tooling, is also available at the following URLs:\n\n- [maple-core](https://github.com/maple-labs/maple-core/tree/1b151c79ae1406b46405bb37cf82f033b1ba69dc)\n- [maple-token](https://github.com/maple-labs/maple-token/tree/834e8392e4534fc405d70c58f0f7679b111e6e83)\n\n# Severity Criteria\n\nC4 assesses severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into 3 primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings\n\nNo high risk findings.\n\n# Medium Risk Findings\n\n## [[M-01] Loans of tokens with >18 decimals can result in incorrect collateral calculation](https://github.com/code-423n4/2021-04-maple-findings/issues/4)\n\nIt is possible for a user to mislead a Pool Delegate to a seemingly innocuous loan by utilizing a token with more than 18 decimals as collateral and lucrative loan terms.\n\nThe [final calculation](https://github.com/maple-labs/maple-core/blob/031374b2609560ade825532474048eb5826dec20/contracts/library/LoanLib.sol#L235) within the `collateralRequiredForDrawdown` of `LoanLib` incorrectly assumes the collateral token of a loan to be less than `18` decimals, which can not be the case as there is no sanitization conducted on the creation of a `Loan` via the factory. This can cause an underflow to the power of `10` which will cause the division to yield `0` and thus cause the `Loan` to calculate `0` as collateral required for the loan. We advise the [same paradigm](https://github.com/maple-labs/maple-core/blob/031374b2609560ade825532474048eb5826dec20/contracts/library/LoanLib.sol#L247) as `_toWad` to be applied, which is secure.\n\n**[lucas-manuel (Maple) acknowledged](https://github.com/code-423n4/2021-04-maple-findings/issues/4#issuecomment-824852669):**\n\n> We are aware that we cannot onboard liquidityAssets or collateralAssets with more that 18 decimals of precision, and will make that part of our onboarding criteria.\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/4#issuecomment-827193173):**\n\n> This is 100% a legitimate issue that could be exploited against the contract, and using social mitigations (making this part of the onboarding strategy) when there's a technical mitigation (`require()`ing that the token have <= 18 decimals, or using the recommended mitigation) is insufficient and could easily lead to an exploit due to human error.\n>\n> Based on the OWASP methodogology, I'm judging this as Likelihood=Low (because of the requirement to get it past human review) and Impact=High (because of the impact of the bug if it were exploited to create a 0-collateral loan and default on it), resulting in a Severity of Medium.\n\n## [[M-02] Potential huge arbitrage opportunities / MPL price decrease](https://github.com/code-423n4/2021-04-maple-findings/issues/92)\n\nWhen the protocol suffers a default, the BPT stakers are the first line of defense and the protocol trades the BPT pool tokens for the single-sided liquidity asset of the Balancer LIQUIDITY <> MPT pool. (`PoolLib.handleDefault`)\n\nNote that a pool token to single-asset trade is the same as burning the LP tokens to receive an equal amount of all underlying tokens, and then trading all other tokens received for the single asset.\n\nIt's the reverse of this:\n\n> \"Depositing a single asset A to a shared pool is equivalent to depositing all pool assets proportionally and then selling more of asset A to get back all the other tokens deposited.\" ([Balancer](https://balancer.finance/whitepaper))\n\nThis means on each default MPT tokens are sold for the liquidity asset. As the default is potentially a huge amount that happens at once, this creates a huge arbitrage opportunity.\n\nAs the default suffered can be a huge amount and the \"repayment\" happens at once, this creates a huge arbitrage opportunity: The MPT token price goes down. The borrow could also be incentivised to not repay the loan and take advantage of the arbitrage opportunity, either competing themselves on-chain or through shorts/bets on the MPT price.\n\nHard to completely mitigate. Pool delegates should be especially careful when giving out high-value loans and demand high collateral lockup.\n\n**[lucas-manuel (Maple) confirmed](https://github.com/code-423n4/2021-04-maple-findings/issues/92#issuecomment-825884796):**\n\n> This is a valid concern, but not something that we are going to mitigate before launch. We are going to plan for PDs to atomically liquidate and burn.\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/92#issuecomment-827258265):**\n\n> I think this a valid finding; whether or not it's intended to be mitigated pre-launch, the Sponsor acknowledges it's a valid concern, and not something that's declared as part of the protocol's intrinsic assumptions. These sort of findings are exactly what audits are intended to uncover and bring to the attention of users as caveats when using the system. I concur with the Warden's assessment of Medium.\n\n## [[M-03] Bypass or reduction on the lockup period of Pool FDTs.](https://github.com/code-423n4/2021-04-maple-findings/issues/117)\n\nIn `Pool.sol`, the lockup restriction of withdrawal (`Pool.sol#396`) can be bypassed or reduced if new liquidity providers cooperate with existing ones.\n\n1. A liquidity provider, Alice, deposits liquidity assets into the pool and minted some FDTs. She then waits for `lockupPeriod` days and calls `intendToWithdraw` to pass her withdrawal window. Now she is available to receive FDTs from others.\n2. A new liquidity provider, Bob, deposits liquidity assets into the pool and minted some FDTs. Currently, he is not allowed to withdraw his funds by protocol design.\n3. Bob and Alice agree to cooperate with each other to reduce Bob's waiting time for withdrawal. Bob transfers his FDT to Alice via the `_transfer` function.\n4. Alice calls `intendToWithdraw` and waits for the `withdrawCooldown` period. Notice that Alice's `depositDate` is updated after the transfer; however, since it is calculated using a weighted timestamp, the increased amount of lockup time should be less than `lockupPeriod`. In situations where the deposit from Alice is much larger than that from Bob, Alice could only even need to wait for the `withdrawCooldown` period before she could withdraw any funds.\n5. Alice then withdraws the amount of FDT that Bob transferred to her and transfers the funds (liquidity assets) to Bob. Bob successfully reduces (or bypasses) the lockup period of withdrawal.\n\nRecommend forcing users to wait for the lockup period when transferring FDT to others or let the `depositDate` variable record the timestamp of the last operation instead of a weighted timestamp.\n\n**[lucas-manuel (Maple) confirmed](https://github.com/code-423n4/2021-04-maple-findings/issues/117#issuecomment-827880947):**\n\n> Addressed in [this PR](https://github.com/maple-labs/maple-core/pull/378)\n\n# Low Risk Findings\n\n## [[L-01] Cross-Chain Replay Attack](https://github.com/code-423n4/2021-04-maple-findings/issues/2)\n\nThe `constructor` of the Maple token calculates the `chainid` it should assign during its execution and permanently stores it in an `immutable` variable. Should Ethereum fork in the feature, the `chainid` will change however the one used by the permits will not enabling a user to use any new permits on both chains thus breaking the token on the forked chain permanently. (Please consult [EIP1344](https://eips.ethereum.org/EIPS/eip-1344#rationale) for more details.)\n\nThe calculation of the `chainid` dynamically on each `permit` invocation. As a gas optimization, the deployment pre-calculated hash for the permits can be stored to an `immutable` variable and a validation can occur on the `permit` function that ensure the current `chainid` is equal to the one of the cached hash and if not, to re-calculate it on the spot.\n\n**[lucas-manuel (Maple) acknowledged](https://github.com/code-423n4/2021-04-maple-findings/issues/2#issuecomment-824848610):**\n\n> Not going to implement, if Ethereum forks we will not used forked MPL\n\n## [[L-02] Missing check for Pool state on several functions in Pool.sol](https://github.com/code-423n4/2021-04-maple-findings/issues/68)\n\nThe Pool may be in three states: Initialized, Finalized and Deactivated as indicated by the enum State variable. While a couple of functions such as fundLoan() and deposit() check against a valid Pool state i.e. Finalized using `\\_isValidState(State.Finalized)`, most other functions miss this check. This could cause unexpected protocol behavior if such functions are triggered in invalid Pool states (e.g. deactivated).\n\nExamples of such functions missing this Pool state validity check are ` triggerDefault()``,  `claim()``, `withdraw()`and`withdrawFunds()`.\n\nRecommend adding \\_isValidState(State.Finalized) check to all such functions specified above.\n\n\\*\\*[lucas-manuel (Maple) acknowledged](https://github.com/code-423n4/2021-04-maple-findings/issues/68#issuecomment-825866047).\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/68#issuecomment-827202832):**\n\n> Submitter has not demonstrated how this can be exploited, but these seem like important checks to be omitting and may well result in invariants being violated. In the absence of a specific exploit vector, I'm awarding this as Low.\n\n**[satyamakgec (Maple) commented](https://github.com/code-423n4/2021-04-maple-findings/issues/68#issuecomment-827736767):**\n\n> So we did an analysis again and here are some data points:\n>\n> - `triggerDefault()` -> It will only be called by the Pool Delegate and it internally checks whether the Pool (precicesly DebtLocker) has the 20 % of supplied LoanFDTs If yes then procced otherwise fail. So in the `Initialized` state it will not be callable as there is no fund provided to loan so not LoanFDT in the debtlocker, While if the loan get defaulted once then loan will automatically get closed so triggerDefault() will revert in that case.\n>\n> - `withdraw()` -> It has again implicit check of the pool state as there is no way to get the poolFDT if the Pool is in the `Initialized` state while if Pool is in the Finalized state then again there is no harm as user can withdraw its funds if they have otherwise it will not be possible.\n>\n> - `withdrawFunds()` -> This is simillar as above if you have entitled amount then only it will works otherwise it will be a just a gas waste of the msg.sender.\n>\n> - `claim()` -> It is a permissioned function (only be callable by Pool delegate) even if it get called during `Initialized` or after `Finalized` state then nothing happen only be the waste of gas which I think it is okay in this case as PD is very well aware about the process.\n>\n> We could add the statechecks eventually but it doesn't give us any extra benefit although it does increase the size of the PoolFactory contract bytecode that we don't want as we are already on the verge of `24 KB`\n\n## [[L-03] Mirrored admin variables in global context, Pool, PoolFactory, Loan and LoanFactory may make it confusing for deployment and maintenance](https://github.com/code-423n4/2021-04-maple-findings/issues/36)\n\nThe access control model for the different contracts and how they interact is confusing and may cause issues during deployment and maintenance. Multiple contracts have the notion of admin(s), all of which use setAdmin function to update admin status. This mirroring and reuse of the admin variable is susceptible to accidents.\n\nRecommend renaming the different admin variables e.g. adminGlobal, adminPool, adminLoan. Document the access control roles, hierarchy and interactions explicitly.\n\n**[lucas-manuel (Maple) confirmed](https://github.com/code-423n4/2021-04-maple-findings/issues/36#issuecomment-824948764).**\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/36#issuecomment-827208207):**\n\n> Unresolved, this could lead to issues (eg, forgetting to migrate admin on one contract, or accidentally granting admin permission on the wrong contract), so I'm rating this Low.\n\n## [[L-04] Full payment does not consider late fees of the payment](https://github.com/code-423n4/2021-04-maple-findings/issues/112)\n\nSince the calculation of `makeFullPayment` (`Loan.sol#249`) does not consider whether the payment is late or not, the borrower can avoid paying late fees by only calling `makeFullPayment` instead of `makePayment` (`Loan.sol#238`). The borrower has no incentive to repay the loan in time and could\n\nThe full payment is calculated by `PremiumCalc`, which ignores whether the payment is late or not. A configured premium fee calculates the interest; however, it is a fixed value through time. The interest that a borrower should pay for borrowing the loan for any amount of time (e.g., a month or a year) is the same.\n\nRecommend calculating late fees in `PremiumCalc` as in `RepaymentCalc` to let the borrower pay late fees based on the `apr` of loan.\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/112#issuecomment-827295249):**\n\n> Another way to look at this is that the borrower gets `gracePeriod` extra days of borrowing for free - just by deferring their final payment. Agree with Medium.\n\n**[lucas-manuel (Maple) commented](https://github.com/code-423n4/2021-04-maple-findings/issues/112#issuecomment-827901109):**\n\n> If they deferred their final payment and did makeFullPayment instead of makePayment they would pay premiumFee on their principal, which is set to be a larger amount than a given payment plus late fee, so they would be losing money in this case.\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/112#issuecomment-828004317):**\n\n> Based on my understanding of the code:\n>\n> Relevant configurable parameters are the payment interval (`payment_interval`), grace period before foreclosure (`grace_period`), interest payment size (`interest_payment`), late payment fee as a percentage of interest payment size (`late_fee`), and premium fee (`premium_fee`).\n>\n> If `payment_interval * 2 < grace_period`, it's possible to be late multiple payments - in which case you pay multiple late fees.\n>\n> Without charging late payment fees on a full repayment, there are two scenarios in which the borrower can end up better off:\n>\n> - If `(payment_interval / grace_period) * late_fee > premium_fee`, once the borrower is late some number of `payment_intervals`, they pay less by doing a full repayment with the premium fee than by paying off the normal way.\n> - If `(payment_interval / grace_period) * interest_payment > premium_fee`, they can treat the grace period as an extra loan period, and pay no more than they would have in interest (possibly less, depending on the parameters).\n>\n> Since both of these are only possible with certain parameter values, I'm downgrading this to Low. This could be remedied by either putting range checks for these parameter values in loan initialisation, or by calculating 'missed interest' and late fees in `makeFullPayment` and taking the minimum of that and the premium fee.\n\n**[lucas-manuel (Maple) commented](https://github.com/code-423n4/2021-04-maple-findings/issues/112#issuecomment-828015753):**\n\n> We're going to leave as is and just ensure that Pool Delegates are educated around Loan terms and what they entail before funding them.\n\n## [[L-05] Chainlink Price data could be stale](https://github.com/code-423n4/2021-04-maple-findings/issues/82)\n\nThere is no check if the return value indicates stale data. This could lead to stale prices according to the Chainlink documentation:\n\n- [\"if answeredInRound < roundId could indicate stale data.\"](https://docs.chain.link/docs/developer-communications#current-notifications)\n- [\"A timestamp with zero value means the round is not complete and should not be used.\"](https://docs.chain.link/docs/historical-price-data#solidity)\n\nThe price oracle might return unreliable price data which can lead to a variety of different issues in the protocol, for example, for liquidating more staker & lender tokens than required at fair market price.\n\nAdd missing checks for stale data. See example [here](https://github.com/cryptexfinance/contracts/blob/master/contracts/oracles/ChainlinkOracle.sol#L58-L65).\n\n**[lucas-manuel (Maple) confirmed](https://github.com/code-423n4/2021-04-maple-findings/issues/82#issuecomment-825199891):**\n\n> We will add this check, but disagree that this is a high severity bug.\n> Especially since we will be using BTC and ETH oracles to start, it is very rare that there will be stale data.\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/82#issuecomment-827243670):**\n\n> Since the contract only asks for latest data, incomplete rounds should be impossible, so we can discount them. Stale data is possible; I would rate this as Likelihood=LOW (it'll be difficult to make ChainLink oracles go stale) and Impact=Medium (this could only be used to create arb opportunities on loan collateral or liquidations, which will be limited to the price change during the stale period), resulting in a Severity=Low.\n\n## [[L-06] Chainlink Price oracle always assumes 8 decimals](https://github.com/code-423n4/2021-04-maple-findings/issues/83)\n\nThe response from the price oracle always assumes 8 decimals (see `PoolLib.convertFromUsd`) but it's never checked if the oracle response has 8 decimals using ChainLink's `.decimals()` function. At some point, the governor might set up a USD price feed oracle that contains more than 8 decimals leading to inflated prices everywhere.\n\nRecommend checking `_aggregator.decimals() == 8` in `ChainlinkOracle` constructor and `changeAggregator`.\n\n**[lucas-manuel (Maple) confirmed](https://github.com/code-423n4/2021-04-maple-findings/issues/83#issuecomment-825200582):**\n\n> We were going to do this manually, we were aware of this issue, but it is a good idea to just add a check. Disagree with severity.\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/83#issuecomment-827244538):**\n\n> Impact would be High if this happened, but the Likelihood is very low. Agree with Severity=Low.\n\n## [[L-07] Missing check on `setManualPrice(int256 _price)`](https://github.com/code-423n4/2021-04-maple-findings/issues/85)\n\nThe `ChainlinkOracle.setManualPrice` function specifies that it can only be called \"if manualOverride == true\".\n\nThis is not the case.\n\nAssume an oracle failure happened, and the oracle needs to be manually set to prevent losses.\nThe `setManualPrice` function succeeds and the owner might think that the oracle price is overwritten as the function would fail when `manualOverride` is not `true` according to specification.\nThe protocol would still use the broken chainlink price feed and suffer losses.\n\nAdd the missing `require(manualOverride == true, \"manual override not set\")` check.\n\n**[lucas-manuel (Maple) acknowledged](https://github.com/code-423n4/2021-04-maple-findings/issues/85#issuecomment-825202377):**\n\n> Not really a bug, but we will address this.\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/85#issuecomment-827245604):**\n\n> I would add, though, that the current configuration is unsafe. If `setManualPrice` is changed to require that `manualOverride` is true, there will be an interval between calling `setManualOverride` and `setManualPrice` during which an old price is used. Instead, a single function that enables the manual override and sets the price should probably be used.\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/85#issuecomment-827245967):**\n\n> On further thought, upgrading to Low based on Warden's reasoning - the success of the call to `setManualPrice` may lead the submitter to believe that the issue is resolved, when it only sets a value that is not referenced.\n\n## [[L-08] Missing non-zero check](https://github.com/code-423n4/2021-04-maple-findings/issues/87)\n\nThe `MapleGlobals.setPriceOracle` should check that the oracle address is not zero.\n\nA wrong call to this function might set the oracle address to the zero address and break core oracle functionality.\n\nAdd a `require(oracle != 0)` statement.\n\n**[lucas-manuel (Maple) disputed](https://github.com/code-423n4/2021-04-maple-findings/issues/87#issuecomment-826983646):**\n\n> We actually are not going to address this, we do not think this is a bug. The governor will manually verify non-zero addresses.\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/87#issuecomment-827247634):**\n\n> I think this warrants Likelihood=Low,Impact=Medium => Severity=Low. Unlike deployment misconfigurations, this mistake, while unlikely, would impact the running system, and it's easily defended against.\n\n## [[L-09] MPL reward claims of balancer pools can be exploited](https://github.com/code-423n4/2021-04-maple-findings/issues/90)\n\n> [When MPL tokens are added as liquidity to the Balancer pool, the Balancer pool is the owner of those tokens, which are accruing USDC interest.](https://github.com/maple-labs/maple-core/wiki/MPL-Token)\n\nAnyone can send the USDC interest to the balancer pool by calling `withdrawFundsOnBehalf(balancerPool)`.\n\nAn attacker can abuse this to capture part of this interest by doing the following steps in a single transaction:\n\n1. Deposit MPT/USDC to the balancer pool (the initial liquidity can also be acquired by a flash loan)\n2. Send USDC to the pool by calling `withdrawFundsOnBehalf(bPool)`, call `gulp`.\n3. Withdraw liquidity again, the attacker will receive their initial deposit + a share of the USDC interest proportional to their LP tokens.\n\nUSDC interest that was supposed to go to MPT balancer pool stakers is stolen by attackers.\nFunds might be locked forever.\n\nThis is hard to prevent completely because you're sending free money to the pool.\nOne way to reduce the risk is to only allow claiming interest by the governor / trusted parties. This would disallow attacker to perform this in a risk-free way in a single transaction, but the same attack would still be possible for miners.\n\nConsider alternative ways of distributing the interest of balancer pools like transferring it to all MPT holders instead of liquidity providers, because:\n\n1. it's currently not fair anyway because only the LPs that are in the pool at the time `withdrawFundsOnBehalf` was called will benefit, regardless of how long they have been providing this liquidity.\n2. External arbitrageurs are the ones that benefit from this short-term pool price imbalance the most and a good chunk of the USDC interest will go to them\n\n**[lucas-manuel (Maple) disputed](https://github.com/code-423n4/2021-04-maple-findings/issues/90#issuecomment-825874771):**\n\n> Not a bug, `distributeToHolders` and `withdrawFundsOnBehalfOf` will always be called atomically by the governor.\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/90#issuecomment-827253756):**\n\n> Without code to ensure that `withdrawFundsOnBehalfOf is called immediately after `distributeToHolders`, this bug can still occur. I'm considering this Likelihood=Low,Impact=Medium => Severity=Low.\n\n## [[L-10] MPL USDC distributions can be withdrawn by anyone](https://github.com/code-423n4/2021-04-maple-findings/issues/91)\n\nAnyone can withdraw USDC interest of another address by calling `withdrawFundsOnBehalf(addr)`.\n\nImagine a smart contract that has a specific function for withdrawing the USDC contract to their contract:\n\n```solidity\nfunction withdrawAndTransfer() {\n  mpt.withdraw();\n  usdc.transfer(usdc.balanceOf(address(this), owner);\n}\n```\n\nIf the contract has no `skim` function to transfer out the assets, they can get stuck forever.\n\nUSDC interest can get stuck forever.\n\nDisallow withdrawals on behalf of other users.\n\n**[lucas-manuel (Maple) disputed](https://github.com/code-423n4/2021-04-maple-findings/issues/91#issuecomment-825877487):**\n\n> Not a bug, this was intended. Projects that integrate with MPL will have to take this functionality into account.\n\n**[Nick Johnson (Judge)](https://github.com/code-423n4/2021-04-maple-findings/issues/91#issuecomment-827255034):**\n\n> Many systems integrate support for generic ERC-20 token contracts without being able to handle per-token special cases. For example, I believe this issue would affect any Uniswap/Balancer/etc liquidity pool between MPL and any non-USDC token. Rating this as Low, per submitter, though I believe an argument could be made for making this higher severity, since it limits the ability to use MPL tokens in generic systems without losing out on dividends.\n\n## [[L-11] LoanLib.unwind uses globals.fundingPeriod()](https://github.com/code-423n4/2021-04-maple-findings/issues/100)\n\nEvery loan has its own fundingPeriod which is set once in the constructor:\nfundingPeriod = globals.fundingPeriod();\nfundingPeriod in globals can change. It does not effect already deployed Loans.\nHowever, in Loan contract function unwind() calls LoanLib.unwind which checks against globals.fundingPeriod():\nIGlobals globals = \\_globals(superFactory);\n// Only callable if time has passed drawdown grace period, set in MapleGlobals\nrequire(block.timestamp > createdAt.add(globals.fundingPeriod()), \"Loan:FUNDING_PERIOD_NOT_FINISHED\");\nat this time, globals.fundingPeriod() could be different than this specific Loan's fundingPeriod.\n\nRecommend checking expiration against local fundingPeriod.\n\n**[lucas-manuel (Maple) confirmed](https://github.com/code-423n4/2021-04-maple-findings/issues/100#issuecomment-825713481)**\n\n## [[L-12] Uniswap DOS](https://github.com/code-423n4/2021-04-maple-findings/issues/105)\n\nBorrowers can launch a front running/sandwich attack on triggerDefault() which manipulates the price on Uniswap outside the maxSwapSlippage range causing the function to revert and the collateral to stay in the collateralLocker There is no way to transfer the collateral out of the collateralLocker after a loan default without going through a Uniswap trade, so a borrower can lock funds indefinitely for a fraction of the locked collateral (cost of Uniswap fees) and potentially hold their collateral hostage.\n\nRecommend using more than one source of liquidity for liquidations.\n\n**[lucas-manuel (Maple) acknowledged](https://github.com/code-423n4/2021-04-maple-findings/issues/105#issuecomment-825725616):**\n\n> We will be upgrading liquidations post-launch.\n\n# Non-Critical Findings\n\n- [[N-01] Functions calculating the value of `BPT` is vulnerable to flash-loan attacks.](https://github.com/code-423n4/2021-04-maple-findings/issues/113)\n- [[N-02] MapleTreasury does not emit an event when MapleGlobals address is updated](https://github.com/code-423n4/2021-04-maple-findings/issues/8)\n- [[N-03] Constructor arguments to MapleTreasury not validated](https://github.com/code-423n4/2021-04-maple-findings/issues/9)\n- [[N-04] Missing zero address validation](https://github.com/code-423n4/2021-04-maple-findings/issues/10)\n- [[N-05] Unused definition of enum](https://github.com/code-423n4/2021-04-maple-findings/issues/17)\n- [[N-06] Same constants defined in different files](https://github.com/code-423n4/2021-04-maple-findings/issues/23)\n- [[N-07] Typo NULL_TRASNFER_DST](https://github.com/code-423n4/2021-04-maple-findings/issues/25)\n- [[N-08] Year is not exactly 365 days](https://github.com/code-423n4/2021-04-maple-findings/issues/26)\n- [[N-09] Missing event for critical operation of new Collateral locker creation in CollateralLockerFactory.sol](https://github.com/code-423n4/2021-04-maple-findings/issues/27)\n- [[N-10] Vulnerable to potential reentrancy attacks in Loan.sol](https://github.com/code-423n4/2021-04-maple-findings/issues/32)\n- [[N-11] Inconsistent NatSpec comment in DebtLocker.sol](https://github.com/code-423n4/2021-04-maple-findings/issues/34)\n- [[N-12] Missing input validation on function parameter for zero address in StakeLocker.sol](https://github.com/code-423n4/2021-04-maple-findings/issues/43)\n- [[N-13] Inconsistent NatSpec comment in StakeLocker.sol](https://github.com/code-423n4/2021-04-maple-findings/issues/46)\n- [[N-14] Specification/Implementation mismatch on Security Multisig capability](https://github.com/code-423n4/2021-04-maple-findings/issues/52)\n- [[N-15] Inconsistent NatSpec comment in PoolFactory.sol](https://github.com/code-423n4/2021-04-maple-findings/issues/54)\n- [[N-16] Incorrect require error message string in LoanFactory.sol](https://github.com/code-423n4/2021-04-maple-findings/issues/62)\n- [[N-17] Comment indicates that FundsWithdrawn event should be emitted only when \\_withdrawableDividend > 0](https://github.com/code-423n4/2021-04-maple-findings/issues/96)\n- [[N-18] Use of mapping in place of array in `PoolFactory` and `LoanFactory`](https://github.com/code-423n4/2021-04-maple-findings/issues/76)\n- [[N-19] Outdated Compiler](https://github.com/code-423n4/2021-04-maple-findings/issues/77)\n- [[N-20] Unused variable in `PoolLib.handleDefault`](https://github.com/code-423n4/2021-04-maple-findings/issues/78)\n- [[N-21] Unnecessary check for `uint256 >= 0`](https://github.com/code-423n4/2021-04-maple-findings/issues/79)\n- [[N-22] Wrong docs on UsdOracle](https://github.com/code-423n4/2021-04-maple-findings/issues/84)\n- [[N-23] Missing index on events](https://github.com/code-423n4/2021-04-maple-findings/issues/86)\n- [[N-24] Not ERC20 Compliant](https://github.com/code-423n4/2021-04-maple-findings/issues/108)\n- [[N-25] Allowance Double-Spend Exploit](https://github.com/code-423n4/2021-04-maple-findings/issues/89)\n- [[N-26] Griefing attack on loan creation in LoanFactory.sol](https://github.com/code-423n4/2021-04-maple-findings/issues/93)\n- [[N-27] Griefing attack on pool creation in PoolFactory.sol](https://github.com/code-423n4/2021-04-maple-findings/issues/94)\n- [[N-28] Unused code](https://github.com/code-423n4/2021-04-maple-findings/issues/97)\n- [[N-29] Interface and implementation function declaration differs](https://github.com/code-423n4/2021-04-maple-findings/issues/98)\n- [[N-30] Function triggerDefault should call \\_emitBalanceUpdateEventForCollateralLocker](https://github.com/code-423n4/2021-04-maple-findings/issues/99)\n- [[N-31] getRewardForDuration will start returning misleading results if rewardsDuration is updated](https://github.com/code-423n4/2021-04-maple-findings/issues/103)\n- [[N-32] Oracle not checked if set for an asset](https://github.com/code-423n4/2021-04-maple-findings/issues/110)\n- [[N-33] Default slippage value too high](https://github.com/code-423n4/2021-04-maple-findings/issues/106)\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code, but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}