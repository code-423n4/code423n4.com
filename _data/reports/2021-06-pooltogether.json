{
  "circa": {
    "title": "PoolTogether",
    "sponsor": "PoolTogether",
    "slug": "2021-06-pooltogether",
    "date": "2021-09-16",
    "findings": "https://github.com/code-423n4/2021-06-pooltogether-findings/issues",
    "contest": 14
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of PoolTogether smart contract system written in Solidity. The code contest took place between June 16—June 23.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>12 Wardens contributed reports to the PoolTogether code contest:</p>\n<ol>\n<li>\n<ul>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n</ul>\n</li>\n<li>\n<ul>\n<li><a href=\"https://twitter.com/0xRajeev\">0xRajeev</a></li>\n</ul>\n</li>\n<li>\n<ul>\n<li><a href=\"https://github.com/x9453\">shw</a></li>\n</ul>\n</li>\n<li>\n<ul>\n<li><a href=\"https://twitter.com/Tensors8\">tensors</a></li>\n</ul>\n</li>\n<li>\n<ul>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n</ul>\n</li>\n<li>\n<ul>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n</ul>\n</li>\n<li>\n<ul>\n<li><a href=\"https://twitter.com/MukeshJ_eth\">Jmukesh</a></li>\n</ul>\n</li>\n<li>\n<ul>\n<li><a href=\"https://twitter.com/gallodasballo\">GalloDaSballo</a></li>\n</ul>\n</li>\n<li>\n<ul>\n<li><a href=\"https://twitter.com/jvaqa\">jvaqa</a></li>\n</ul>\n</li>\n<li>\n<ul>\n<li><a href=\"https://twitter.com/_hrkrshnn\">hrkrshnn</a></li>\n</ul>\n</li>\n<li>\n<ul>\n<li><a href=\"https://twitter.com/a_delamo\">a_delamo</a></li>\n</ul>\n</li>\n<li>\n<ul>\n<li><a href=\"https://twitter.com/alexberegszaszi\">axic</a></li>\n</ul>\n</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/lsdan_defi\">LSDan</a> (ElasticDAO).</p>\n<p>Final report assembled by <a href=\"https://twitter.com/money_lego\">moneylegobatman</a> and <a href=\"https://twitter.com/_ninek_\">ninek</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 30 unique vulnerabilities. All of the issues presented here are linked back to their original finding</p>\n<p>Of these vulnerabilities, 5 received a risk rating in the category of HIGH severity, 7 received a risk rating in the category of MEDIUM severity, and 18 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 6 non-critical recommendations and 34 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-06-pooltogether\">C4 PoolTogether code contest repository</a> is comprised of 10 smart contracts written in the Solidity programming language and includes 1,395 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-5\" style=\"position:relative;\"><a href=\"#high-risk-findings-5\" aria-label=\"high risk findings 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (5)</h1>\n<h2 id=\"h-01-user-could-lose-underlying-tokens-when-redeeming-from-the-idleyieldsource\" style=\"position:relative;\"><a href=\"#h-01-user-could-lose-underlying-tokens-when-redeeming-from-the-idleyieldsource\" aria-label=\"h 01 user could lose underlying tokens when redeeming from the idleyieldsource permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/120\">[H-01] User could lose underlying tokens when redeeming from the <code>IdleYieldSource</code></a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The <code>redeemToken</code> function in <code>IdleYieldSource</code> uses <code>redeemedShare</code> instead of <code>redeemAmount</code> as the input parameter when calling <code>redeemIdleToken</code> of the Idle yield source. As a result, users could get fewer underlying tokens than they should.</p>\n<p>When burning users’ shares, it is correct to use <code>redeemedShare</code> (line 130). However, when redeeming underlying tokens from Idle Finance, <code>redeemAmount</code> should be used instead of <code>redeemedShare</code> (line 131). Usually, the <code>tokenPriceWithFee()</code> is greater than <code>ONE_IDLE_TOKEN</code>, and thus <code>redeemedShare</code> is less than <code>redeemAmount</code>, causing users to get fewer underlying tokens than expected.</p>\n<p>Recommend changing <code>redeemedShare</code> to <code>redeemAmount</code> at line <a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/yield-source/IdleYieldSource.sol#L129-L131\">L131</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/120#issuecomment-871284667\">PierrickGT (PoolTogether) confirmed and patched</a>:</strong></p>\n<blockquote>\n<p>PR: <a href=\"https://github.com/pooltogether/idle-yield-source/pull/4\">https://github.com/pooltogether/idle-yield-source/pull/4</a></p>\n</blockquote>\n<h2 id=\"h-02-yearnv2yieldsource-wrong-subtraction-in-withdraw\" style=\"position:relative;\"><a href=\"#h-02-yearnv2yieldsource-wrong-subtraction-in-withdraw\" aria-label=\"h 02 yearnv2yieldsource wrong subtraction in withdraw permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/90\">[H-02] <code>YearnV2YieldSource</code> wrong subtraction in withdraw</a></h2>\n<p><em>Submitted by cmichel, also found by 0xRajeev</em></p>\n<p>When withdrawing from the <code>vault</code>, one redeems <code>yTokens</code> for <code>token</code>s, thus the <code>token</code> balance of the contract should increase after withdrawal.\nBut the contract subtracts the <code>currentBalance</code> from the <code>previousBalance</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">yShares</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_tokenToYShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">previousBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// we accept losses to avoid being locked in the Vault (if losses happened for some reason)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">maxLosses</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">yShares</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">maxLosses</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vault</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">yShares</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// @audit-issue this seems wrong</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">previousBalance</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">currentBalance</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>All vault withdrawals fail due to the integer underflow as the <code>previousBalance</code> is less than <code>currentBalance</code>. Users won’t be able to get back their investment.</p>\n<p>Recommend that It should return <code>currentBalance > previousBalance ? currentBalance - previousBalance : 0</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/90#issuecomment-871932751\">kamescg (PoolTogether) confirmed and patched</a>:</strong></p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/new/fix/90\">https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/new/fix/90</a></li>\n<li><a href=\"https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/7\">https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/7</a></li>\n</ul>\n</blockquote>\n<h2 id=\"h-03-badgeryieldsource-balanceoftoken-share-calculation-seems-wrong\" style=\"position:relative;\"><a href=\"#h-03-badgeryieldsource-balanceoftoken-share-calculation-seems-wrong\" aria-label=\"h 03 badgeryieldsource balanceoftoken share calculation seems wrong permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/84\">[H-03] <code>BadgerYieldSource</code> <code>balanceOfToken</code> share calculation seems wrong</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>When suppling to the <code>BadgerYieldSource</code>, some <code>amount</code> of <code>badger</code> is deposited to <code>badgerSett</code> and one receives <code>badgerSett</code> share tokens in return which are stored in the <code>balances</code> mapping of the user. So far this is correct.</p>\n<p>The <code>balanceOfToken</code> function should then return the redeemable balance in <code>badger</code> for the user’s <code>badgerSett</code> balance.\nIt computes it as the pro-rata share of the user balance (compared to the total-supply of <code>badgerSett</code>) on the <code>badger</code> in the vault:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">addr</span><span class=\"mtk1\">].</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">badger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">badgerSett</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">badgerSett</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>However, <code>badger.balanceOf(address(badgerSett))</code> is only a small amount of badger that is deployed in the vault (“Sett”) due to most of the capital being deployed to the <em>strategies</em>. Therefore, it under-reports the actual balance:</p>\n<blockquote>\n<p>Typically, a Sett will keep a small portion of deposited funds in reserve to handle small withdrawals cheaply. <a href=\"https://badger-finance.gitbook.io/badger-finance/technical/setts/sett-contract\">Badger Docs</a></p>\n</blockquote>\n<p>Any contract or user calling the <code>balanceOf</code> function will receive a value that is far lower than the actual balance.\nUsing this value as a basis for computations will lead to further errors in the integrations.</p>\n<p>Recommend using <a href=\"https://github.com/Badger-Finance/badger-system/blob/2b0ee9bd77a2cc6f875b9b984ae4dfe713bbc55c/contracts/badger-sett/Sett.sol#L126\"><code>badgerSett.balance()</code></a> instead of <code>badger.balanceOf(address(badgerSett))</code> to also account for “the balance in the Sett, the Controller, and the Strategy”.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/84\">asselstine (PoolTogether) confirmed</a></strong></p>\n<h2 id=\"h-04-withdraw-timelock-can-be-circumvented\" style=\"position:relative;\"><a href=\"#h-04-withdraw-timelock-can-be-circumvented\" aria-label=\"h 04 withdraw timelock can be circumvented permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/91\">[H-04] withdraw timelock can be circumvented</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>One can withdraw the entire <code>PrizePool</code> deposit by circumventing the timelock.\nAssume the user has no credits for ease of computation:</p>\n<ul>\n<li>user calls <code>withdrawWithTimelockFrom(user, amount=userBalance)</code> with their entire balance. This “mints” an equivalent <code>amount</code> of <code>timelock</code> and resets <code>_unlockTimestamps[user] = timestamp = blockTime + lockDuration</code>.</li>\n<li>user calls <code>withdrawWithTimelockFrom(user, amount=0)</code> again but this time withdrawing <code>0</code> amount. This will return a <code>lockDuration</code> of <code>0</code> and thus <code>unlockTimestamp = blockTime</code>. The inner <code>_mintTimelock</code> now resets <code>_unlockTimestamps[user] = unlockTimestamp</code></li>\n<li>As <code>if (timestamp &#x3C;= _currentTime())</code> is true, the full users amount is now transferred out to the user in the <code>_sweepTimelockBalances</code> call.</li>\n</ul>\n<p>Users don’t need to wait for their deposit to contribute their fair share to the prize pool.\nThey can join before the awards and leave right after without a penalty which leads to significant issues for the protocol.\nIt’s the superior strategy but it leads to no investments in the strategy to earn the actual interest.</p>\n<p>Recommend that the unlock timestamp should be increased by duration each time, instead of being reset to the duration.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/91#issuecomment-868089158\">asselstine (PoolTogether) confirmed</a>:</strong></p>\n<blockquote>\n<p>Mitigation:</p>\n<p>If a user’s timelock balance is non-zero, the prize strategy rejects the ticket burn.</p>\n</blockquote>\n<h2 id=\"h-05-idleyieldsource-doesnt-use-mantissa-calculations\" style=\"position:relative;\"><a href=\"#h-05-idleyieldsource-doesnt-use-mantissa-calculations\" aria-label=\"h 05 idleyieldsource doesnt use mantissa calculations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/103\">[H-05] <code>IdleYieldSource</code> doesn’t use mantissa calculations</a></h2>\n<p><em>Submitted by tensors</em></p>\n<p>Because mantissa calculations are not used in this case to account for decimals, the arithmetic can zero out the number of shares or tokens that should be given.</p>\n<p>For example, say I deposit 1 token, expecting 1 share in return. On <a href=\"https://github.com/sunnyRK/IdleYieldSource-PoolTogether/blob/6dcc419e881a4f0f205c07c58f4db87520b6046d/contracts/IdleYieldSource.sol#L95\">L95</a>, if the <code>totalUnderlyingAssets</code> is increased to be larger than the number of total shares, then the division would output 0 and I wouldn’t get any shares.</p>\n<p>Recommend  implementing mantissa calculations like in the contract for the AAVE  yield.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/103#issuecomment-873072563\">PierrickGT (PoolTogether) confirmed and patched</a>:</strong></p>\n<blockquote>\n<p>PR: <a href=\"https://github.com/pooltogether/idle-yield-source/pull/5\">https://github.com/pooltogether/idle-yield-source/pull/5</a></p>\n</blockquote>\n<h1 id=\"medium-risk-findings-7\" style=\"position:relative;\"><a href=\"#medium-risk-findings-7\" aria-label=\"medium risk findings 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (7)</h1>\n<h2 id=\"m-01-safeapprove-for-yearn-vault-may-revert-preventing-deposits-causing-dos\" style=\"position:relative;\"><a href=\"#m-01-safeapprove-for-yearn-vault-may-revert-preventing-deposits-causing-dos\" aria-label=\"m 01 safeapprove for yearn vault may revert preventing deposits causing dos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/71\">[M-01] <code>safeApprove()</code> for Yearn Vault may revert preventing deposits causing DoS</a></h2>\n<p><em>Submitted by 0xRajeev, also found by pauliax</em></p>\n<p>The <code>_depositInVault()</code> function for Yearn yield source uses ERC20 <code>safeApprove()</code> from OpenZeppelin’s SafeERC20 library to give maximum allowance to the Yearn Vault address if the current allowance is less than contract’s token balance.</p>\n<p>However, the <code>safeApprove</code> function prevents changing an allowance between non-zero values to mitigate a possible front-running attack. It reverts if that is the case. Instead, the <code>safeIncreaseAllowance</code> and <code>safeDecreaseAllowance</code> functions should be used. Comment from the OZ library for this function:</p>\n<blockquote>\n<p>“// <code>safeApprove</code> should only be called when setting an initial allowance, // or when resetting it to zero. To increase and decrease it, use // ‘safeIncreaseAllowance’ and ‘safeDecreaseAllowance’”</p>\n</blockquote>\n<p>If the existing allowance is non-zero (say, for e.g., previously the entire balance was not deposited due to vault balance limit resulting in the allowance being reduced but not made 0), then <code>safeApprove()</code> will revert causing the user’s token deposits to fail leading to denial-of-service. The condition predicate indicates that this scenario is possible. See <a href=\"https://blog.openzeppelin.com/1inch-exchange-audit/\">similar Medium-severity finding M03</a>.</p>\n<p>Recommend using <code>safeIncreaseAllowance()</code> function instead of <code>safeApprove()</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/71#issuecomment-871928392\">kamescg (PoolTogether) confirmed and patched</a>:</strong></p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/new/fix/71\">https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/new/fix/71</a></li>\n<li><a href=\"https://github.com/jmonteer/pooltogether-yearnv2-yield-source/pull/6\">https://github.com/jmonteer/pooltogether-yearnv2-yield-source/pull/6</a></li>\n</ul>\n</blockquote>\n<h2 id=\"m-02-return-values-of-erc20-transfer-and-transferfrom-are-unchecked\" style=\"position:relative;\"><a href=\"#m-02-return-values-of-erc20-transfer-and-transferfrom-are-unchecked\" aria-label=\"m 02 return values of erc20 transfer and transferfrom are unchecked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/112\">[M-02] Return values of ERC20 <code>transfer</code> and <code>transferFrom</code> are unchecked</a></h2>\n<p><em>Submitted by shw, gpersoon, JMukesh, also found by a</em>delamo and cmichel_</p>\n<p>In the contracts <code>BadgerYieldSource</code> and <code>SushiYieldSource</code>, the return values of ERC20 <code>transfer</code> and <code>transferFrom</code> are not checked to be <code>true</code>, which could be <code>false</code> if the transferred tokens are not ERC20-compliant (e.g., <code>BADGER</code>). In that case, the transfer fails without being noticed by the calling contract.</p>\n<p>If warden’s understanding of the <code>BadgerYieldSource</code> is correct, the <code>badger</code> variable should be the <code>BADGER</code> token at address <code>0x3472a5a71965499acd81997a54bba8d852c6e53d</code>. However, this implementation of <code>BADGER</code> is not ERC20-compliant, which returns <code>false</code> when the sender does not have enough token to transfer (both for <code>transfer</code> and <code>transferFrom</code>). See the <a href=\"https://etherscan.io/address/0x3472a5a71965499acd81997a54bba8d852c6e53d#code\">source code on Etherscan</a> (at line 226) for more details.</p>\n<p>Recommend using the <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\"><code>SafeERC20</code> library implementation</a> from Openzeppelin and call <code>safeTransfer</code> or <code>safeTransferFrom</code> when transferring ERC20 tokens.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/112#issuecomment-870060136\">kamescg (PoolTogether) confirmed and patched</a>:</strong></p>\n<blockquote>\n<p>Sushi</p>\n<ul>\n<li><a href=\"https://github.com/pooltogether/sushi-pooltogether/pull/new/fix/112\">https://github.com/pooltogether/sushi-pooltogether/pull/new/fix/112</a></li>\n<li><a href=\"https://github.com/pooltogether/sushi-pooltogether/pull/11\">https://github.com/pooltogether/sushi-pooltogether/pull/11</a></li>\n</ul>\n<p>Badger</p>\n<ul>\n<li><a href=\"https://github.com/pooltogether/badger-yield-source/pull/new/fix/112\">https://github.com/pooltogether/badger-yield-source/pull/new/fix/112</a></li>\n<li><a href=\"https://github.com/pooltogether/badger-yield-source/pull/2\">https://github.com/pooltogether/badger-yield-source/pull/2</a></li>\n</ul>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/112#issuecomment-890403952\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Sponsor has repeatedly stated in duplicate issues that: “It’s more of a 1 (Low Risk) because the subsequent deposit calls will fail. There is no advantage to be gained; the logic is simply poor.”</p>\n<p>I disagree with this assessment. The function(s) in question do not immediately call deposit or another function that would cause a revert. In fact the balances are updated:</p>\n</blockquote>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">requiredSharesBalance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">badger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">badgerBalanceDiff</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">badgerBalanceDiff</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<blockquote>\n<p>The impact that this would have on the rest of the system is substantial, including causing incorrect balances to be returned and potentially lost funds.</p>\n<p>That said, I do not think this is very likely and so high severity seems excessive here. Im adjusting all of these reports to Medium Risk given that lower likelihood.</p>\n</blockquote>\n<h2 id=\"m-03-safemath-not-completely-used-in-yield-source-contracts\" style=\"position:relative;\"><a href=\"#m-03-safemath-not-completely-used-in-yield-source-contracts\" aria-label=\"m 03 safemath not completely used in yield source contracts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/114\">[M-03] <code>SafeMath</code> not completely used in yield source contracts</a></h2>\n<p><em>Submitted by shw, also found by cmichel</em></p>\n<p><code>SafeMath</code> is not completely used at the following lines of yield source contracts, which could potentially cause arithmetic underflow and overflow:</p>\n<ol>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/yield-source/SushiYieldSource.sol#L78\">line 78</a> in <code>SushiYieldSource</code></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/yield-source/BadgerYieldSource.sol#L67\">line 67</a> in <code>BadgerYieldSource</code></li>\n<li>line <a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/yield-source/IdleYieldSource.sol#L91\">91</a> and <a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/yield-source/IdleYieldSource.sol#L98\">98</a> in <code>IdleYieldSource</code></li>\n</ol>\n<p>Recommend using the <code>SafeMath</code> library functions in the above lines.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/114#issuecomment-868022899\">asselstine (PoolTogether) confirmed and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>While the arithmetic ceiling is quite high, if an overflow occurred this would significantly disrupt the yield sources.  I’d qualify this issue higher as <code>2 (Med Risk)</code>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/114#issuecomment-904646481\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I agree with the sponsor’s risk evaluation. Increasing to medium.</p>\n</blockquote>\n<h2 id=\"m-04-the-assumption-that-operator--to-user-may-not-hold-leading-to-failed-timelock-deposits\" style=\"position:relative;\"><a href=\"#m-04-the-assumption-that-operator--to-user-may-not-hold-leading-to-failed-timelock-deposits\" aria-label=\"m 04 the assumption that operator  to user may not hold leading to failed timelock deposits permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/51\">[M-04] The assumption that operator == to (user) may not hold leading to failed timelock deposits</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>The contract uses <code>_msgSender()</code> to denote an operator who is operating on behalf of the user. This is typically used for meta-transactions where the operator is an intermediary/relayer who may facilitate gas-less transactions on behalf of the user. They may be the same address but it is safer to assume that they may not be.</p>\n<p>While the code handles this separation of role in most cases, it misses doing so in <code>timelockDepositTo()</code> function where it accounts the <code>_timelockBalances</code> to the operator address instead of the user specified <code>to</code> address. It assumes they are the same. The corresponding usage in <code>_mintTimelock()</code> which is called from <code>withdrawWithTimelockFrom()</code> uses the user specified ‘from’ address and not the <code>_msgSender()</code>. Therefore the corresponding usage in <code>timelockDepositTo()</code> should be the same.</p>\n<p>In the scenario where the operator address != user specified from/to addresses, i.e. meta-transactions, the timelock deposits and withdrawals are made to/from different addresses and so the deposits of timelocked tokens will fail because the operator’s address does not have the required amount of <code>_timelockBalances</code>.</p>\n<p>Recommend changing <code>operator</code> to <code>from</code> on <a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/85f8d044e7e46b7a3c64465dcd5dffa9d70e4a3e/contracts/PrizePool.sol#L281\">L281</a> of <code>timelockDepositTo()</code> and specifying the scenarios where the role of the operator is applicable and document/implement those accordingly.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/51#issuecomment-868891482\">asselstine (PoolTogether) disputed</a>:</strong></p>\n<blockquote>\n<p>In the function <code>timelockDepositTo()</code> the msg.sender is using their timelocked funds to re-enter the pool.  They can only spend their own funds; they should not be able to spend other user’s funds.</p>\n<p>The warden is saying the <code>timelockDepositTo</code> should be callable by anyone and allow them to transfer other user’s funds from the timelock back into tickets.  This actually introduces an attack vector.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/51#issuecomment-907497531\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I think sponsor is misunderstanding warden’s concern here. The issue is not that <code>msg.sender</code> is being checked, but that <code>_msgSender</code> is being checked. Happy to discuss this more if sponsor still disagrees, but I think the concern raised is valid.</p>\n</blockquote>\n<h2 id=\"m-05-actual-yield-source-check-on-address-will-succeed-for-non-existent-contract\" style=\"position:relative;\"><a href=\"#m-05-actual-yield-source-check-on-address-will-succeed-for-non-existent-contract\" aria-label=\"m 05 actual yield source check on address will succeed for non existent contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/59\">[M-05] Actual yield source check on address will succeed for non-existent contract</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>Low-level calls <code>call</code>/<code>delegatecall</code>/<code>staticcall</code> return true even if the account called is non-existent (per EVM design). <a href=\"https://docs.soliditylang.org/en/v0.8.6/control-structures.html#error-handling-assert-require-revert-and-exceptions\">Solidity documentation</a> warns:</p>\n<blockquote>\n<p>“The low-level functions call, delegatecall and staticcall return true as their first return value if the account called is non-existent, as part of the design of the EVM. Account existence must be checked prior to calling if needed.”</p>\n</blockquote>\n<p>The <code>staticcall</code> here will return True even if the <code>_yieldSource</code> contract doesn’t exist at any incorrect-but-not-zero address, e.g. EOA address, used during initialization by accident.</p>\n<p>The hack, as commented, to check if it’s an actual yield source contract, will fail if the address is indeed a contract account which doesn’t implement the <code>depositToken</code> function. However, if the address is that of an EOA account, the check will pass here but will revert in all future calls to the yield source forcing contract redeployment after the pool is active. Users will not be able to interact with the pool and abandon it.</p>\n<p>Recommend that a contract existence check should be performed on <code>_yieldSource</code> prior to the depositToken function existence hack for determining yield source contract.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/59\">asselstine (PoolTogether) confirmed</a></strong></p>\n<h2 id=\"m-06-yieldsourceprizepool_canawardexternal-does-not-work\" style=\"position:relative;\"><a href=\"#m-06-yieldsourceprizepool_canawardexternal-does-not-work\" aria-label=\"m 06 yieldsourceprizepool_canawardexternal does not work permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/92\">[M-06] <code>YieldSourcePrizePool_canAwardExternal</code> does not work</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The idea of <code>YieldSourcePrizePool_canAwardExternal</code> seems to be to disallow awarding the interest-bearing token of the yield source, like aTokens, cTokens, yTokens.</p>\n<blockquote>\n<p>“@dev Different yield sources will hold the deposits as another kind of token: such a Compound’s cToken.  The prize strategy should not be allowed to move those tokens.”</p>\n</blockquote>\n<p>However, the code checks <code>_externalToken != address(yieldSource)</code> where <code>yieldSource</code> is the actual yield strategy contract and not the strategy’s interest-bearing token.\nNote that the <code>yieldSource</code> is usually not even a token contract except for <code>ATokenYieldSource</code> and <code>YearnV2YieldSource</code>.</p>\n<p>The <code>_canAwardExternal</code> does not work as expected. It might be possible to award the interest-bearing token which would lead to errors and loss of funds when trying to redeem underlying.</p>\n<p>There doesn’t seem to be a function to return the interest-bearing token. It needs to be added, similar to <code>depositToken()</code> which retrieves the underlying token.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/92#issuecomment-868859317\">asselstine (PoolTogether) acknowledged</a>:</strong></p>\n<blockquote>\n<p>This is an interesting one:</p>\n<ul>\n<li>the yield source interface does not require the deposit be tokenized; the implementation is entirely up to the yield source.</li>\n<li>the _canAwardExternal is a legacy of older code.  Since it had to be included it was set to assume the yield source was tokenized.</li>\n</ul>\n<p>Since yield sources are audited and analyzed, I think this is a pretty low risk.  Additionally, not all of the yield sources are tokenized (Badger and Sushi are not), so it isn’t a risk for them.</p>\n<p>We could have <code>canAwardExternal</code> on the yield source itself, but it would add gas overhead.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/92#issuecomment-873106239\">aodhgan (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>Could we add an check -\n<code>function _canAwardExternal(address _externalToken) internal override view returns (bool) { return _externalToken != address(yieldSource) &#x26;&#x26; _externalToken != address(yieldSource.depositToken()) }</code></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/92#issuecomment-874342323\">asselstine (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>We could add another check, but it’s still arbitrary.  The point is that the yield source knows what token the prize pool may or may not hold, so without asking the yield source it’s just a guess.</p>\n<p>Let’s leave it as-is</p>\n</blockquote>\n<h2 id=\"m-07-using-transferfrom-on-erc721-tokens\" style=\"position:relative;\"><a href=\"#m-07-using-transferfrom-on-erc721-tokens\" aria-label=\"m 07 using transferfrom on erc721 tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/115\">[M-07] Using <code>transferFrom</code> on ERC721 tokens</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>In the function <code>awardExternalERC721</code> of contract <code>PrizePool</code>, when awarding external ERC721 tokens to the winners, the <code>transferFrom</code> keyword is used instead of <code>safeTransferFrom</code>. If any winner is a contract and is not aware of incoming ERC721 tokens, the sent tokens could be locked.</p>\n<p>Recommend consider changing <code>transferFrom</code> to <code>safeTransferFrom</code> at line 602. However, it could introduce a DoS attack vector if any winner maliciously rejects the received ERC721 tokens to make the others unable to get their awards. Possible mitigations are to use a <code>try/catch</code> statement to handle error cases separately or provide a function for the pool owner to remove malicious winners manually if this happens.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/115#issuecomment-868021913\">asselstine (PoolTogether) confirmed and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>This issue poses no risk to the Prize Pool, so it’s more of a <code>1 (Low Risk</code> IMO.</p>\n<p>This is just about triggering a callback on the ERC721 recipient.  We omitted it originally because we didn’t want a revert on the callback to DoS the prize pool.</p>\n<p>However, to respect the interface it makes sense to implement it fully.  That being said, if it does throw we must ignore it to prevent DoS attacks.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/115#issuecomment-907507608\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I agree with the medium risk rating provided by the warden.</p>\n</blockquote>\n<h1 id=\"low-risk-findings-18\" style=\"position:relative;\"><a href=\"#low-risk-findings-18\" aria-label=\"low risk findings 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (18)</h1>\n<h2 id=\"l-01-no-check-for-_staketoken0\" style=\"position:relative;\"><a href=\"#l-01-no-check-for-_staketoken0\" aria-label=\"l 01 no check for _staketoken0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/4\">[L-01] no check for <code>_stakeToken</code>!=0</a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>The <code>initializeYieldSourcePrizePool</code> function of <code>YieldSourcePrizePool.sol</code> has a check to make sure <code>_yieldSource</code> !=0. However, the <code>initialize</code> function  of the comparable <code>StakePrizePool.sol</code> doesn’t do this check.</p>\n<p>Although unlikely this will introduce problems, it is more consistent to check for 0.</p>\n<p><a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/YieldSourcePrizePool.sol#L24\"><code>YieldSourcePrizePool.sol</code> L24</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initializeYieldSourcePrizePool</span><span class=\"mtk1\"> (... </span><span class=\"mtk12\">IYieldSource</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_yieldSource</span><span class=\"mtk1\">) ... {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_yieldSource</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;YieldSourcePrizePool/yield-source-zero&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">PrizePool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">initialize</span><span class=\"mtk1\">(</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/StakePrizePool.sol#L20\"><code>StakePrizePool.sol</code> L20</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initialize</span><span class=\"mtk1\"> ( ..  </span><span class=\"mtk12\">IERC20Upgradeable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_stakeToken</span><span class=\"mtk1\">)...  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">PrizePool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">initialize</span><span class=\"mtk1\">(</span></span></span></code></pre>\n<p>Recommend adding something like the following in the initialize function of <code>StakePrizePool.sol</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_stakeToken</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;StakePrizePool/stakeToken-zero&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h2 id=\"l-02-lack-of-nonreentrant-modifier-in-yield-source-contracts\" style=\"position:relative;\"><a href=\"#l-02-lack-of-nonreentrant-modifier-in-yield-source-contracts\" aria-label=\"l 02 lack of nonreentrant modifier in yield source contracts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/119\">[L-02] Lack of <code>nonReentrant</code> modifier in yield source contracts</a></h2>\n<p>_Submitted by shw, also found by gpersoon, 0xRajeev and pauliax__</p>\n<p>The <code>YearnV2YieldSource</code> contract prevents the <code>supplyTokenTo</code>, <code>redeemToken</code>, and <code>sponsor</code> functions from being reentered by applying a <code>nonReentrant</code> modifier. Since these contracts share a similar logic, adding a <code>nonReentrant</code> modifier to these functions in all of the yield source contracts is reasonable. However, the same protection is not seen in other yield source contracts.</p>\n<p>A <code>nonReentrant</code> modifier in the following functions is missing:</p>\n<ol>\n<li>The <code>sponsor</code> function of <code>ATokenYieldSource</code></li>\n<li>The <code>supplyTokenTo</code> and <code>redeemToken</code> function of <code>BadgerYieldSource</code></li>\n<li>The <code>sponsor</code> function of <code>IdleYieldSource</code></li>\n<li>The <code>supplyTokenTo</code> and <code>redeemToken</code> function of <code>SushiYieldSource</code></li>\n</ol>\n<p>Recommend adding a <code>nonReentrant</code> modifier to these functions. For <code>BadgerYieldSource</code> and <code>SushiYieldSource</code> contracts, make them inherit from Openzeppelin’s <code>ReentrancyGuardUpgradeable</code> to use the <code>nonReentrant</code> modifier.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/119#issuecomment-869971264\">kamescg (PoolTogether) confirmed and patched</a>:</strong></p>\n<blockquote>\n<p>ATokenYieldSource: <a href=\"https://github.com/pooltogether/aave-yield-source/tree/fix/119\">https://github.com/pooltogether/aave-yield-source/tree/fix/119</a>\nSushiYieldSource: <a href=\"https://github.com/pooltogether/sushi-pooltogether/pull/new/fix/119\">https://github.com/pooltogether/sushi-pooltogether/pull/new/fix/119</a>\nBadgerYieldSource: <a href=\"https://github.com/pooltogether/badger-yield-source/pull/new/fix/119\">https://github.com/pooltogether/badger-yield-source/pull/new/fix/119</a>\nIdleYieldSource: <a href=\"https://github.com/pooltogether/idle-yield-source/pull/new/fix/119\">https://github.com/pooltogether/idle-yield-source/pull/new/fix/119</a></p>\n</blockquote>\n<h2 id=\"l-03-what-is-default-duration-when-creditratemantissa-is-not-set\" style=\"position:relative;\"><a href=\"#l-03-what-is-default-duration-when-creditratemantissa-is-not-set\" aria-label=\"l 03 what is default duration when creditratemantissa is not set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/10\">[L-03] What is default duration when <code>creditRateMantissa</code> is not set</a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>In <code>PrizePool.sol</code>, if the value of  <code>_tokenCreditPlans[_controlledToken].creditRateMantissa</code> isn’t set (yet), then the function <code>_estimateCreditAccrualTime</code> returns 0.\nThis means the <code>TimelockDuration</code> is 0 and funds can be withdrawn immediately, defeating the entire timelock mechanism.</p>\n<p>Recommend perhaps a different default would be useful.</p>\n<p><a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/PrizePool.sol#L783\"><code>PrizePool.sol</code> L783</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_estimateCreditAccrualTime</span><span class=\"mtk1\">( </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_controlledToken</span><span class=\"mtk1\">,</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_principal</span><span class=\"mtk1\">,</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_interest</span><span class=\"mtk1\"> ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">durationSeconds</span><span class=\"mtk1\">)  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">accruedPerSecond</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">FixedPoint</span><span class=\"mtk1\">.</span><span class=\"mtk11\">multiplyUintByMantissa</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_principal</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_tokenCreditPlans</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_controlledToken</span><span class=\"mtk1\">].</span><span class=\"mtk12\">creditRateMantissa</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">accruedPerSecond</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_interest</span><span class=\"mtk1\">.</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">accruedPerSecond</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/PrizePool.sol#L710\"><code>PrizePool.sol</code> L710</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_calculateTimelockDuration</span><span class=\"mtk1\">( </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">controlledToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">durationSeconds</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">burnedCredit</span><span class=\"mtk1\"> )  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">duration</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_estimateCreditAccrualTime</span><span class=\"mtk1\">(</span><span class=\"mtk12\">controlledToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">exitFee</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">duration</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">maxTimelockDuration</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">duration</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">maxTimelockDuration</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">duration</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_burnedCredit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend considering the default duration for the case <code>_tokenCreditPlans[_controlledToken].creditRateMantissa</code> isn’t set.</p>\n<h2 id=\"l-04-staticcall-to-yieldsourcedeposittoken-doesnt-provide-any-security-guarantees\" style=\"position:relative;\"><a href=\"#l-04-staticcall-to-yieldsourcedeposittoken-doesnt-provide-any-security-guarantees\" aria-label=\"l 04 staticcall to yieldsourcedeposittoken doesnt provide any security guarantees permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/14\">[L-04] <code>staticCall</code> to <code>yieldSource.depositToken</code> doesn’t provide any security guarantees</a></h2>\n<p><em>Submitted by GalloDaSballo</em></p>\n<p>The assumption that a yield source is valid, just because it has the method <code>depositToken</code>, is not a security guarantee. I could create any random contract with that function but that is not a guarantee that the contract will behave as intended.</p>\n<p>I believe a better solution would be to have a registry, controlled by governance, that accepts the valid yield sources. A valid registry ensures the the yield sources are properly maintained.</p>\n<p>In summary: There is no security difference between having the check and not having the check, because the check can be sidelined without any effort and doesn’t truly provide any guarantee of the contract being valid. Having no checks would save you gas. While having a governance registry would guarantee that the yield sources usable are exclusively the community vetted ones.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/14#issuecomment-869044961\">asselstine (PoolTogether) acknowledged</a>:</strong></p>\n<blockquote>\n<p>It’s possible for a malicious developer to fork our code and create a pool with a rugging yield source.  That can’t really be helped either way.</p>\n<p>We decide which pools to display on <a href=\"https://app.pooltogether.com\">https://app.pooltogether.com</a>, so we can vet pools already.</p>\n</blockquote>\n<h2 id=\"l-05-switch-modifier-order-to-consistently-place-the-non-reentrant-modifier-as-the-first-one\" style=\"position:relative;\"><a href=\"#l-05-switch-modifier-order-to-consistently-place-the-non-reentrant-modifier-as-the-first-one\" aria-label=\"l 05 switch modifier order to consistently place the non reentrant modifier as the first one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/50\">[L-05] Switch modifier order to consistently place the non-reentrant modifier as the first one</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>If a function has multiple modifiers they are executed in the order specified. If checks or logic of modifiers depend on other modifiers this has to be considered in their ordering. <code>PrizePool</code> has functions with multiple modifiers with one of them being non-reentrant which prevents reentrancy on the functions. This should ideally be the first one to prevent even the execution of other modifiers in case of re-entrancies.</p>\n<p>While there is no obvious vulnerability currently with non-reentrant being the last modifier in the list, it is safer to place it in the first. This is of slight concern with the deposit functions which have the <code>canAddLiquidity()</code> modifier (before non-reentrant) that makes external calls to get <code>totalSupply</code> of controlled tokens.</p>\n<p>For reference, see similar finding in <a href=\"https://consensys.net/diligence/audits/2020/05/balancer-finance/#switch-modifier-order-in-bpool\">Consensys’s audit of Balancer</a>.</p>\n<p>Recommend switching modifier order to consistently place the non-reentrant modifier as the first one to run so that all other modifiers are executed only if the call is non-reentrant.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/50#issuecomment-871168783\">kamescg (PoolTogether) confirmed and patched</a>:</strong></p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/50\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/50</a></li>\n<li><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/308\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/308</a></li>\n</ul>\n</blockquote>\n<h2 id=\"l-06-missing-modifier-onlycontrolledtoken-may-result-in-undefinedexceptional-behavior\" style=\"position:relative;\"><a href=\"#l-06-missing-modifier-onlycontrolledtoken-may-result-in-undefinedexceptional-behavior\" aria-label=\"l 06 missing modifier onlycontrolledtoken may result in undefinedexceptional behavior permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/54\">[L-06] Missing modifier <code>onlyControlledToken</code> may result in undefined/exceptional behavior</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>The modifier <code>onlyControlledToken</code> is used for functions that allow the <code>controlledToken</code> address as a parameter to ensure that only whitelisted tokens (ticket and sponsorship) are provided. This is used in all functions except <code>calculateEarlyExitFee()</code>.</p>\n<p>The use of a non-whitelisted <code>controlledToken</code> will result in calls to potentially malicious token contract and cause undefined behavior for the <code>from</code> user address specified in the call.</p>\n<p>Recommend adding missing modifier <code>onlyControlledToken</code> to <code>calculateEarlyExitFee()</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/54#issuecomment-871148826\">kamescg (PoolTogether) confirmed</a>:</strong></p>\n<blockquote>\n<p>This would likely break assumptions made by other contracts when used to get the early exit fee.</p>\n<p>For example in Pods to calculate the exit fee. Plus this is called statically from JS frontends to get the fee.</p>\n</blockquote>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">  * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> Calculate the cost of withdrawing from the Pod if the</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">  * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk3\"> Amount of tokens to withdraw when calculating early exit fee.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">  * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> Based of the Pod&#39;s total token/ticket balance and totalSupply it calculates the pricePerShare.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">*/</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getEarlyExitFee</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_podTokenBalance</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">tokenBalance</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Calculate Early Exit Fee</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">exitFee</span><span class=\"mtk1\">, ) =</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_prizePool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">calculateEarlyExitFee</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ticket</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenBalance</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Early Exit Fee</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">exitFee</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/54#issuecomment-874371325\">asselstine (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>@kamescg Rajeev is suggesting to add the modifier <code>onlyControlledToken</code> to <code>calculateEarlyExitFee()</code></p>\n<p>That means it would revert on invalid controlled tokens.  It would still be a static call!</p>\n<p>That being said this isn’t a deal breaker.  We can skip this one and it wouldn’t hurt.</p>\n</blockquote>\n<h2 id=\"l-07-missing-calls-to-init-functions-of-inherited-contracts\" style=\"position:relative;\"><a href=\"#l-07-missing-calls-to-init-functions-of-inherited-contracts\" aria-label=\"l 07 missing calls to init functions of inherited contracts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/60\">[L-07] Missing calls to <code>init</code> functions of inherited contracts</a></h2>\n<p><em>Submitted by 0xRajeev, also found by shw</em></p>\n<p>Most contracts use the <code>delegateCall</code> proxy pattern and hence their implementations require the use of <code>initialize()</code> functions instead of constructors. This requires derived contracts to call the corresponding <code>init</code> functions of their inherited base contracts. This is done in most places except a few.</p>\n<p>The inherited base classes do not get initialized which may lead to undefined behavior.</p>\n<ul>\n<li>Missing call to <code>__ReentrancyGuard_init</code> in <code>ATokenYieldSource.sol</code> <a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/85f8d044e7e46b7a3c64465dcd5dffa9d70e4a3e/contracts/yield-source/ATokenYieldSource.sol#L99-L102\">L99-L102</a> and <a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/85f8d044e7e46b7a3c64465dcd5dffa9d70e4a3e/contracts/yield-source/IdleYieldSource.sol#L59-L61\">L59-L61</a></li>\n<li>Missing call to <code>__ERC20_init</code> in <code>ATokenYieldSource.sol</code> <a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/85f8d044e7e46b7a3c64465dcd5dffa9d70e4a3e/contracts/yield-source/IdleYieldSource.sol#L59-L61\">L59-L61</a> and <a href=\"https://github.com/code-423n4/2021-06-pooltogether/blob/85f8d044e7e46b7a3c64465dcd5dffa9d70e4a3e/contracts/yield-source/YearnV2YieldSource.sol#L83-L86\">L83-L86</a></li>\n</ul>\n<p>Recommend adding missing calls to init functions of inherited contracts.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/60#issuecomment-869689788\">PierrickGT (PoolTogether) confirmed and patched</a>:</strong></p>\n<blockquote>\n<p>ATokenYieldSource PR: <a href=\"https://github.com/pooltogether/aave-yield-source/pull/18\">https://github.com/pooltogether/aave-yield-source/pull/18</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/60#issuecomment-871409254\">PierrickGT (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>Has been fixed already for IdleYieldSource: <a href=\"https://github.com/pooltogether/idle-yield-source/blob/master/contracts/IdleYieldSource.sol#L60-#62\">https://github.com/pooltogether/idle-yield-source/blob/master/contracts/IdleYieldSource.sol#L60-#62</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/60#issuecomment-872254875\">PierrickGT (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>YearnV2YieldSource: <a href=\"https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/8\">https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/8</a></p>\n</blockquote>\n<h2 id=\"l-08-unlocked-pragma-used-in-multiple-contracts\" style=\"position:relative;\"><a href=\"#l-08-unlocked-pragma-used-in-multiple-contracts\" aria-label=\"l 08 unlocked pragma used in multiple contracts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/109\">[L-08] Unlocked pragma used in multiple contracts</a></h2>\n<p><em>Submitted by shw, also found by 0xRajeev and JMukesh</em></p>\n<p>Some contracts (e.g., <code>PrizePool</code>) use an unlocked pragma (e.g., <code>pragma solidity >=0.6.0 &#x3C;0.7.0;</code>) which is not fixed to a specific Solidity version. Locking the pragma helps ensure that contracts do not accidentally get deployed using a different compiler version with which they have been tested the most.</p>\n<p>Please use <code>grep -R pragma .</code> to find the unlocked pragma statements.</p>\n<p>Recommend locking pragmas to a specific Solidity version. Consider the compiler bugs in the following lists and ensure the contracts are not affected by them. It is also recommended to use the latest version of Solidity when deploying contracts (see <a href=\"https://docs.soliditylang.org/en/v0.8.4/#solidity\">Solidity docs</a>).</p>\n<p>Solidity compiler bugs:\n<a href=\"https://github.com/ethereum/solidity/blob/develop/docs/bugs.json\">Solidity repo - known bugs</a>\n<a href=\"https://github.com/ethereum/solidity/blob/develop/docs/bugs_by_version.json\">Solidity repo - bugs by version</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/109#issuecomment-870992869\">kamescg (PoolTogether) confirmed</a>:</strong></p>\n<blockquote>\n<p>PrizePool</p>\n<ul>\n<li><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/109\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/109</a></li>\n<li><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/303\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/303</a></li>\n</ul>\n<p>Remaining Contracts</p>\n<ul>\n<li><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/109-remaining-contracts\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/109-remaining-contracts</a></li>\n<li><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/304\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/304</a></li>\n</ul>\n</blockquote>\n<h2 id=\"l-09-missing-zero-address-checks\" style=\"position:relative;\"><a href=\"#l-09-missing-zero-address-checks\" aria-label=\"l 09 missing zero address checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/65\">[L-09] Missing zero-address checks</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>Checking addresses against zero-address during initialization or during setting is a security best-practice. However, such checks are missing in all address variable initializations.</p>\n<p>Allowing zero-addresses will lead to contract reverts and force redeployments if there are no setters for such address variables.</p>\n<p>Recommend adding zero-address checks for all initializations of address state variables.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/65#issuecomment-871145349\">kamescg (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>Core</p>\n<ul>\n<li><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/65\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/65</a></li>\n<li><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/306\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/306</a></li>\n</ul>\n<p>Aave</p>\n<ul>\n<li><a href=\"https://github.com/pooltogether/aave-yield-source/pull/new/fix/65\">https://github.com/pooltogether/aave-yield-source/pull/new/fix/65</a></li>\n<li><a href=\"https://github.com/pooltogether/aave-yield-source/pull/22\">https://github.com/pooltogether/aave-yield-source/pull/22</a></li>\n</ul>\n<p>Sushi</p>\n<ul>\n<li><a href=\"https://github.com/pooltogether/sushi-pooltogether/pull/new/fix/65\">https://github.com/pooltogether/sushi-pooltogether/pull/new/fix/65</a></li>\n<li><a href=\"https://github.com/steffenix/sushi-pooltogether/pull/21\">https://github.com/steffenix/sushi-pooltogether/pull/21</a></li>\n</ul>\n<p>Idle</p>\n<ul>\n<li><a href=\"https://github.com/pooltogether/idle-yield-source/pull/new/fix/65\">https://github.com/pooltogether/idle-yield-source/pull/new/fix/65</a></li>\n<li><a href=\"https://github.com/pooltogether/idle-yield-source/pull/3\">https://github.com/pooltogether/idle-yield-source/pull/3</a></li>\n</ul>\n<p>Badger</p>\n<ul>\n<li><a href=\"https://github.com/pooltogether/badger-yield-source/pull/new/fix/65\">https://github.com/pooltogether/badger-yield-source/pull/new/fix/65</a></li>\n<li><a href=\"https://github.com/pooltogether/badger-yield-source/pull/6\">https://github.com/pooltogether/badger-yield-source/pull/6</a></li>\n</ul>\n</blockquote>\n<h2 id=\"l-10-overly-permissive-threshold-check-allows-high-yield-loss\" style=\"position:relative;\"><a href=\"#l-10-overly-permissive-threshold-check-allows-high-yield-loss\" aria-label=\"l 10 overly permissive threshold check allows high yield loss permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/69\">[L-10] Overly permissive threshold check allows high yield loss</a></h2>\n<p><em>Submitted by0xRajeev</em></p>\n<p>The Yearn yield source defines <code>maxLosses</code> as: “Max % of losses that the Yield Source will accept from the Vault in BPS” and uses a setter <code>setMaxLosses()</code> to allow owner to set this value. However, the threshold check implemented only checks if this value is less than 10_000 or 100%, which is a good sanity check but allows loss of even 100%. The buffer for the loss is to avoid funds being locked in the Yearn vault in any emergency situation.</p>\n<p>If the losses are really high for some reason, it will impact the interest and the prizes.</p>\n<p>Perform a tighter upper threshold check to allow a more acceptable max loss value in <code>setMaxLosses()</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/69#issuecomment-868875095\">asselstine (PoolTogether) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Yield sources are controlled by governance, so this isn’t a concern</p>\n</blockquote>\n<h2 id=\"l-11-ignored-return-values-may-lead-to-undefined-behavior\" style=\"position:relative;\"><a href=\"#l-11-ignored-return-values-may-lead-to-undefined-behavior\" aria-label=\"l 11 ignored return values may lead to undefined behavior permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/70\">[L-11] Ignored return values may lead to undefined behavior</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>The <code>_depositInVault()</code> returns the value returned from its call to the Yearn vault’s <code>deposit()</code> function. However, the return value is ignored at both call sites in <code>supplyTokenTo()</code> and <code>sponsor()</code>.</p>\n<p> It is unclear what the intended usage is and how, if any, the return value should be checked. This should perhaps check how much of the full balance was indeed deposited/rejected in the vault by comparing the return value of issued vault shares as commented: “The actual amount of shares that were received for the deposited tokens” because “if deposit limit is reached, tokens will remain in the Yield Source and they will be queued for retries in subsequent deposits.”</p>\n<p>Recommend checking return value appropriately or if not, document why this is not necessary.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/70#issuecomment-868871925\">asselstine (PoolTogether) disputed</a>:</strong></p>\n<blockquote>\n<p>Regardless of how much of the deposit made it into the underlying vault, the depositor will hold the correct number shares.  It doesn’t matter if only a portion of the funds made it into the vault.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/70#issuecomment-904093881\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I think this is a reasonable finding by the warden. If the return value isn’t needed, it should be removed or at least documented that it’s there for no reason. If there is a reason to have the return value, the return value should be considered by the calling functions.</p>\n</blockquote>\n<h2 id=\"l-12-using-memory-parameter-without-checking-its-length\" style=\"position:relative;\"><a href=\"#l-12-using-memory-parameter-without-checking-its-length\" aria-label=\"l 12 using memory parameter without checking its length permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/75\">[L-12] Using <code>memory[]</code> parameter without checking its length</a></h2>\n<p><em>Submitted by JMukesh</em></p>\n<p>Using memory array parameters (e.g.<code>uint[]</code> memory) as function parameters can be tricky in Solidity, because an attack is possible with a very large array which will overlap with other parts of the memory.</p>\n<p>This an example to show the exploit based on <a href=\"https://github.com/paradigm-operations/paradigm-ctf-2021/blob/master/swap/private/Exploit.sol\"><code>Exploit.sol</code></a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> ^</span><span class=\"mtk7\">0.4</span><span class=\"mtk1\">.</span><span class=\"mtk7\">24</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// only works with low solidity version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Overlap</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">field0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\">  </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\">) {   </span><span class=\"mtk3\">// this can be in any solidity version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">Overlap</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">v</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">v</span><span class=\"mtk1\">.</span><span class=\"mtk12\">field0</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1234</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">]); </span><span class=\"mtk3\">// would expect to be 0 however is 1234</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">go</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> { </span><span class=\"mtk3\">// this part requires the low solidity version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\">=</span><span class=\"mtk7\">0x800000000000000000000000000000000000000000000000000000000000000</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// 2^251</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">payload</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">mint</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0x20</span><span class=\"mtk1\">, </span><span class=\"mtk12\">x</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">=</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">payload</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend checking the array length before using it</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/75#issuecomment-868867927\">asselstine (PoolTogether) confirmed</a>:</strong></p>\n<blockquote>\n<p>We’re going to remove the timelock functions.  The initializer I’m not concerned about.</p>\n</blockquote>\n<h2 id=\"l-13-uneven-use-of-events\" style=\"position:relative;\"><a href=\"#l-13-uneven-use-of-events\" aria-label=\"l 13 uneven use of events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/78\">[L-13] Uneven use of events</a></h2>\n<p><em>Submitted by JMukesh</em></p>\n<p>To track off-chain data it is necessary to use events</p>\n<p>In <code>ATokenYieldSource.sol</code>, <code>IdleYieldSource.sol</code>, and <code>yearnV2yieldsource</code>, events are emmitted in <code>supplyTokenTo()</code>, <code>redeemToken()</code>, and <code>sponsor()</code>, but not in <code>BadgerYieldsource.sol</code> and <code>shushiyieldsource.sol</code></p>\n<p>Recommend using events.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/78\">asselstine (PoolTogether) confirmed</a></strong></p>\n<h2 id=\"l-14-missing-parameter-validation\" style=\"position:relative;\"><a href=\"#l-14-missing-parameter-validation\" aria-label=\"l 14 missing parameter validation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81\">[L-14] Missing parameter validation</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>Some parameters of functions are not checked for invalid values:</p>\n<ul>\n<li><code>StakePrizePool.initialize</code>: <code>address _stakeToken</code> not checked for non-zero or contract</li>\n<li><code>ControlledToken.initialize</code>: <code>address controller</code> not checked for non-zero or contract</li>\n<li><code>PrizePool.withdrawReserve</code>: <code>address to</code> not checked for non-zero, funds will be lost when sending to zero address</li>\n<li><code>ATokenYieldSource.initialize</code>: <code>address _aToken, _lendingPoolAddressesProviderRegistry</code> not checked for non-zero or contract</li>\n<li><code>BadgerYieldSource.initialize</code>: <code>address badgerSettAddr, badgerAddr</code> not checked for non-zero or contract</li>\n<li><code>SushiYieldSource.constructor</code>: <code>address _sushiBar, _sushiAddr</code> not checked for non-zero or contract</li>\n</ul>\n<p>Wrong user input or wallets defaulting to the zero addresses for a missing input can lead to the contract needing to redeploy or wasted gas.</p>\n<p>Recommend validating the parameters.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-869892506\">PierrickGT (PoolTogether) confirmed and patched</a>:</strong></p>\n<blockquote>\n<p>ATokenYieldSource PR: <a href=\"https://github.com/pooltogether/aave-yield-source/pull/19\">https://github.com/pooltogether/aave-yield-source/pull/19</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-872312046\">PierrickGT (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>BadgerYieldSource PR: <a href=\"https://github.com/pooltogether/badger-yield-source/pull/6\">https://github.com/pooltogether/badger-yield-source/pull/6</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-872373042\">PierrickGT (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>SushiYieldSource PR: <a href=\"https://github.com/pooltogether/sushi-pooltogether/pull/16\">https://github.com/pooltogether/sushi-pooltogether/pull/16</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-872391467\">PierrickGT (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>ControlledToken PR: <a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/306\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/306</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-872448781\">PierrickGT (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>StakePrizePool PR: <a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/314\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/314</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-872797002\">PierrickGT (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>@asselstine (PoolTogether) I’m not sure we want to check for non zero address in the PrizePool <code>withdrawReserve</code> function since this function is only callable by the Reserve and the owner of the Reserve contract.\n<a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/blob/192429c808ad9714e9e05821386eb926150a009f/contracts/reserve/Reserve.sol#L32\">https://github.com/pooltogether/pooltogether-pool-contracts/blob/192429c808ad9714e9e05821386eb926150a009f/contracts/reserve/Reserve.sol#L32</a>\n<a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/blob/4449bb2e4216511b7187b1ab420118c30af39eb7/contracts/prize-pool/PrizePool.sol#L473\">https://github.com/pooltogether/pooltogether-pool-contracts/blob/4449bb2e4216511b7187b1ab420118c30af39eb7/contracts/prize-pool/PrizePool.sol#L473</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-874362014\">asselstine (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>Yeah @PierrickGT (PoolTogether) I don’t think the <code>withdrawReserve</code> needs to do the check.  Many tokens reject on transfer to zero anyway.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-876790734\">kamescg (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>LGTM</p>\n</blockquote>\n<h2 id=\"l-15-atokenyieldsource-mixes-atokens-and-underlying-when-redeeming\" style=\"position:relative;\"><a href=\"#l-15-atokenyieldsource-mixes-atokens-and-underlying-when-redeeming\" aria-label=\"l 15 atokenyieldsource mixes atokens and underlying when redeeming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/86\">[L-15] <code>ATokenYieldSource</code> mixes aTokens and underlying when redeeming</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>ATokenYieldSource.redeemToken</code> function burns <code>aTokens</code> and sends out underlying; however, it’s used in a reverse way in the code:\nThe <code>balanceDiff</code> is used as the <code>depositToken</code> that is transferred out but it’s computed on the <strong>aTokens</strong> that were burned instead of on the <code>depositToken</code> received.</p>\n<p>It should not directly lead to issues as aTokens are 1-to-1 with their underlying but we still recommend doing it correctly to make the code more robust against any possible rounding issues.</p>\n<p>Recommend computing <code>balanceDiff</code> on the underyling balance (<code>depositToken</code>), not on the aToken. Then, subtract the actual burned aTokens from the user shares.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/86#issuecomment-869640418\">PierrickGT (PoolTogether) confirmed</a>:</strong></p>\n<blockquote>\n<p>I agree that we should compute <code>balanceDiff</code> on the underlying balance.\nRegarding the burn of the user’s shares, we should keep it as is to verify first that the user has enough shares. This way if he doesn’t, the code execution will revert before funds are withdrawn from Aave.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/86#issuecomment-869648166\">PierrickGT (PoolTogether) commented</a>:</strong></p>\n<blockquote>\n<p>PR: <a href=\"https://github.com/pooltogether/aave-yield-source/pull/17\">https://github.com/pooltogether/aave-yield-source/pull/17</a></p>\n</blockquote>\n<h2 id=\"l-16badgeryieldsource-and-sushiyieldsource-are-not-upgradeable\" style=\"position:relative;\"><a href=\"#l-16badgeryieldsource-and-sushiyieldsource-are-not-upgradeable\" aria-label=\"l 16badgeryieldsource and sushiyieldsource are not upgradeable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/113\">[L-16]\t<code>BadgerYieldSource</code> and <code>SushiYieldSource</code> are not upgradeable</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The contracts <code>BadgerYieldSource</code> and <code>SushiYieldSource</code> are not upgradeable since they do not inherit from any Openzeppelin’s upgradeable contract (e.g., ERC20Upgradeable) as the other yield source contracts.</p>\n<p>Recommend making <code>BadgerYieldSource</code> and <code>SushiYieldSource</code> upgradable.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/113#issuecomment-868023522\">asselstine (PoolTogether) disputed:</a></strong></p>\n<blockquote>\n<p>We don’t want them to be upgradeable! It’s a feature not a bug.</p>\n</blockquote>\n<h2 id=\"l-17-onerc721received-not-implemented-in-prizepool\" style=\"position:relative;\"><a href=\"#l-17-onerc721received-not-implemented-in-prizepool\" aria-label=\"l 17 onerc721received not implemented in prizepool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/118\">[L-17] <code>onERC721Received</code> not implemented in <code>PrizePool</code></a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The <code>PrizePool</code> contract does not implement the <code>onERC721Received</code> function, which is considered a best practice to transfer ERC721 tokens from contracts to contracts. The absence of this function could prevent <code>PrizePool</code> from receiving ERC721 tokens from other contracts via <code>safeTransferFrom</code>.</p>\n<p>Consider adding an implementation of the <code>onERC721Received</code> function in <code>PrizePool</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/118#issuecomment-870022736\">kamescg (PoolTogether) confirmed</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/118\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/118</a></p>\n<p><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/300\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/300</a></p>\n</blockquote>\n<h2 id=\"l-18-lack-of-event-emission-after-critical-initialize-functions\" style=\"position:relative;\"><a href=\"#l-18-lack-of-event-emission-after-critical-initialize-functions\" aria-label=\"l 18 lack of event emission after critical initialize functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/68\">[L-18] Lack of event emission after critical <code>initialize()</code> functions</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>Most contracts use <code>initialize()</code> functions instead of constructor given the <code>delegatecall</code> proxy pattern. While most of them emit an event in the critical <code>initialize()</code> functions to record the init parameters for off-chain monitoring and transparency reasons, <code>Ticket.sol</code> nor its base class <code>ControlledToken.sol</code> emit such an event in their <code>initialize()</code> functions.</p>\n<p>These contracts are initialized but their critical init parameters (name, symbol, decimals and controller address) are not logged for any off-chain monitoring.</p>\n<p>See similar <a href=\"https://blog.openzeppelin.com/uma-audit-phase-4/\">Medium-severity Finding M01</a> in OpenZeppelin’s audit of UMA protocol.</p>\n<p>Recommend emitting an initialized event in <code>Ticket.sol</code> and <code>ControlledToken.sol</code> logging their init parameters.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/68#issuecomment-868876017\">asselstine (PoolTogether) confirmed but disagree with severity</a>:</strong></p>\n<blockquote>\n<p>This is just event emission; it’s severity is <code>0 (Non-critical)</code>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/68#issuecomment-871063414\">kamescg (PoolTogether) patched</a>:</strong></p>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/68\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/68</a></li>\n<li><a href=\"https://github.com/pooltogether/pooltogether-pool-contracts/pull/305\">https://github.com/pooltogether/pooltogether-pool-contracts/pull/305</a></li>\n</ul>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/68#issuecomment-907507066\">dmvt (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m going to split the difference here. Events are important for various reasons. In this case, due to the proxy pattern, the creation of the contract in the initialize function happen at the same time, making it trivial for a user to go back and look at the initialization parameters in the creation transaction.</p>\n</blockquote>\n<h1 id=\"non-critical-findings-6\" style=\"position:relative;\"><a href=\"#non-critical-findings-6\" aria-label=\"non critical findings 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical findings (6)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/7\">[N-01] Use immutable keyword</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/3\">[N-02] uint256(-1)</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/6\">[N-03] function sponsor not all ways present</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/23\">[N-04] <code>PrizePool.beforeTokenTransfer()</code> incorrectly uses msg.sender in seven places instead of <code>_msgSender()</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/53\">[N-05] Named return values are never used in favor of explicit returns</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/15\">[N-06] setPrizeStrategy check for Interface Supported in PrizePool.sol doesn’t guarantee that the new prize strategy is valid</a></li>\n</ul>\n<h1 id=\"gas-optimizations-34\" style=\"position:relative;\"><a href=\"#gas-optimizations-34\" aria-label=\"gas optimizations 34 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (34)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/2\">[G-01] cache and reuse _vault.apiVersion() result</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/38\">[G-02] Caching badger and badgerSett can save 400 gas in <code>supplyTokenTo()</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/11\">[G-03] currentTime() outside of loop</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/94\">[G-04] SushiYieldSource save gas with pre-approval</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/18\">[G-05] _accrueCredit -> _updateCreditBalance</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/19\">[G-06] modifier canAddLiquidity and function _canAddLiquidity</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/20\">[G-07] function _getRefferalCode() can be refactored to a constant variable</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/24\">[G-08] Gas Optimization: PrizePool._calculateCreditBalance.creditBalance is incorrectly passed by reference rather than passed by value, causing unnecessary SLOADs instead of MLOADs</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/25\">[G-09] Upgrading the solc compiler to >=0.8 may save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/26\">[G-10] Avoid use of state variables in event emissions to save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/27\">[G-11] Simplifying extensible but expensive modifier may save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/29\">[G-12] Gas savings of 300 by caching _currentAwardBalance in captureAwardBalance()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/31\">[G-13] Using access lists can save gas due to EIP-2930 post-Berlin hard fork</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/32\">[G-14] Gas savings of 100 per user by caching _timelockBalances[user] in _sweepTimelockBalances()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/33\">[G-15] Gas savings of 100 by caching maxTimelockDuration in _calculateTimelockDuration()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/34\">[G-16] Unnecessary indirection to access block.timestamp value</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/35\">[G-17] Preventing zero-address controlled tokens from being added can avoid checks later</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/36\">[G-18] Gas savings of (100*loop-iteration-count) by caching _tokens.end() in _tokenTotalSupply()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/80\">[G-19] _depositToAave always returns 0</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/42\">[G-20] Zero-address check unnecessary due to the initializer modifier</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/43\">[G-21] Using function parameter in <code>initialize()</code> instead of state variable saves 100 gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/44\">[G-22] token can be cached in a local variable to save 200 gas in <code>_depositInVault()</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/45\">[G-23] token can be cached in a local variable to save 100 gas in _withdrawFromVault()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/46\">[G-24] <code>maxLosses</code> can be cached in a local variable to save 100 gas in _withdrawFromVault()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/47\">[G-25] Caching sushiAddr and sushiBar in local variables to save 200 gas in <code>supplyTokenTo()</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/77\">[G-26] Various gas optimizations</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/93\">[G-27] ATokenYieldSource save gas with pre-approval</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/96\">[G-28] Credit accrual is done twice in <code>award</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/97\">[G-29] CreditBurned event emitted even on zero tokens burned</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/101\">[G-30] Gas savings on uninitialized variables.</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/107\">[G-31] Declare functions as <code>external</code> to save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/122\">[G-32] Gas optimization on <code>_depositToAave</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/123\">[G-33] Gas optimization on <code>redeemToken</code> of <code>ATokenYieldSource</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-pooltogether-findings/issues/104\">[G-34] Use ERC-165 instead of homebrew staticcall-based check</a></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-5\">High Risk Findings (5)</a></p>\n<ul>\n<li><a href=\"#h-01-user-could-lose-underlying-tokens-when-redeeming-from-the-idleyieldsource\">[H-01] User could lose underlying tokens when redeeming from the <code>IdleYieldSource</code></a></li>\n<li><a href=\"#h-02-yearnv2yieldsource-wrong-subtraction-in-withdraw\">[H-02] <code>YearnV2YieldSource</code> wrong subtraction in withdraw</a></li>\n<li><a href=\"#h-03-badgeryieldsource-balanceoftoken-share-calculation-seems-wrong\">[H-03] <code>BadgerYieldSource</code> <code>balanceOfToken</code> share calculation seems wrong</a></li>\n<li><a href=\"#h-04-withdraw-timelock-can-be-circumvented\">[H-04] withdraw timelock can be circumvented</a></li>\n<li><a href=\"#h-05-idleyieldsource-doesnt-use-mantissa-calculations\">[H-05] <code>IdleYieldSource</code> doesn’t use mantissa calculations</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-7\">Medium Risk Findings (7)</a></p>\n<ul>\n<li><a href=\"#m-01-safeapprove-for-yearn-vault-may-revert-preventing-deposits-causing-dos\">[M-01] <code>safeApprove()</code> for Yearn Vault may revert preventing deposits causing DoS</a></li>\n<li><a href=\"#m-02-return-values-of-erc20-transfer-and-transferfrom-are-unchecked\">[M-02] Return values of ERC20 <code>transfer</code> and <code>transferFrom</code> are unchecked</a></li>\n<li><a href=\"#m-03-safemath-not-completely-used-in-yield-source-contracts\">[M-03] <code>SafeMath</code> not completely used in yield source contracts</a></li>\n<li><a href=\"#m-04-the-assumption-that-operator--to-user-may-not-hold-leading-to-failed-timelock-deposits\">[M-04] The assumption that operator == to (user) may not hold leading to failed timelock deposits</a></li>\n<li><a href=\"#m-05-actual-yield-source-check-on-address-will-succeed-for-non-existent-contract\">[M-05] Actual yield source check on address will succeed for non-existent contract</a></li>\n<li><a href=\"#m-06-yieldsourceprizepool_canawardexternal-does-not-work\">[M-06] <code>YieldSourcePrizePool_canAwardExternal</code> does not work</a></li>\n<li><a href=\"#m-07-using-transferfrom-on-erc721-tokens\">[M-07] Using <code>transferFrom</code> on ERC721 tokens</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-findings-18\">Low Risk Findings (18)</a></p>\n<ul>\n<li><a href=\"#l-01-no-check-for-_staketoken0\">[L-01] no check for <code>_stakeToken</code>!=0</a></li>\n<li><a href=\"#l-02-lack-of-nonreentrant-modifier-in-yield-source-contracts\">[L-02] Lack of <code>nonReentrant</code> modifier in yield source contracts</a></li>\n<li><a href=\"#l-03-what-is-default-duration-when-creditratemantissa-is-not-set\">[L-03] What is default duration when <code>creditRateMantissa</code> is not set</a></li>\n<li><a href=\"#l-04-staticcall-to-yieldsourcedeposittoken-doesnt-provide-any-security-guarantees\">[L-04] <code>staticCall</code> to <code>yieldSource.depositToken</code> doesn’t provide any security guarantees</a></li>\n<li><a href=\"#l-05-switch-modifier-order-to-consistently-place-the-non-reentrant-modifier-as-the-first-one\">[L-05] Switch modifier order to consistently place the non-reentrant modifier as the first one</a></li>\n<li><a href=\"#l-06-missing-modifier-onlycontrolledtoken-may-result-in-undefinedexceptional-behavior\">[L-06] Missing modifier <code>onlyControlledToken</code> may result in undefined/exceptional behavior</a></li>\n<li><a href=\"#l-07-missing-calls-to-init-functions-of-inherited-contracts\">[L-07] Missing calls to <code>init</code> functions of inherited contracts</a></li>\n<li><a href=\"#l-08-unlocked-pragma-used-in-multiple-contracts\">[L-08] Unlocked pragma used in multiple contracts</a></li>\n<li><a href=\"#l-09-missing-zero-address-checks\">[L-09] Missing zero-address checks</a></li>\n<li><a href=\"#l-10-overly-permissive-threshold-check-allows-high-yield-loss\">[L-10] Overly permissive threshold check allows high yield loss</a></li>\n<li><a href=\"#l-11-ignored-return-values-may-lead-to-undefined-behavior\">[L-11] Ignored return values may lead to undefined behavior</a></li>\n<li><a href=\"#l-12-using-memory-parameter-without-checking-its-length\">[L-12] Using <code>memory[]</code> parameter without checking its length</a></li>\n<li><a href=\"#l-13-uneven-use-of-events\">[L-13] Uneven use of events</a></li>\n<li><a href=\"#l-14-missing-parameter-validation\">[L-14] Missing parameter validation</a></li>\n<li><a href=\"#l-15-atokenyieldsource-mixes-atokens-and-underlying-when-redeeming\">[L-15] <code>ATokenYieldSource</code> mixes aTokens and underlying when redeeming</a></li>\n<li><a href=\"#l-16badgeryieldsource-and-sushiyieldsource-are-not-upgradeable\">[L-16]\t<code>BadgerYieldSource</code> and <code>SushiYieldSource</code> are not upgradeable</a></li>\n<li><a href=\"#l-17-onerc721received-not-implemented-in-prizepool\">[L-17] <code>onERC721Received</code> not implemented in <code>PrizePool</code></a></li>\n<li><a href=\"#l-18-lack-of-event-emission-after-critical-initialize-functions\">[L-18] Lack of event emission after critical <code>initialize()</code> functions</a></li>\n</ul>\n</li>\n<li><a href=\"#non-critical-findings-6\">Non-Critical findings (6)</a></li>\n<li><a href=\"#gas-optimizations-34\">Gas Optimizations (34)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of PoolTogether smart contract system written in Solidity. The code contest took place between June 16—June 23.\n\n## Wardens\n\n12 Wardens contributed reports to the PoolTogether code contest:\n\n1. - [cmichel](https://twitter.com/cmichelio)\n2. - [0xRajeev](https://twitter.com/0xRajeev)\n3. - [shw](https://github.com/x9453)\n4. - [tensors](https://twitter.com/Tensors8)\n5. - [pauliax](https://twitter.com/SolidityDev)\n6. - [gpersoon](https://twitter.com/gpersoon)\n7. - [Jmukesh](https://twitter.com/MukeshJ_eth)\n8. - [GalloDaSballo](https://twitter.com/gallodasballo)\n9. - [jvaqa](https://twitter.com/jvaqa)\n10. - [hrkrshnn](https://twitter.com/_hrkrshnn)\n11. - [a_delamo](https://twitter.com/a_delamo)\n12. - [axic](https://twitter.com/alexberegszaszi)\n\nThis contest was judged by [LSDan](https://twitter.com/lsdan_defi) (ElasticDAO).\n\nFinal report assembled by [moneylegobatman](https://twitter.com/money_lego) and [ninek](https://twitter.com/_ninek_).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 30 unique vulnerabilities. All of the issues presented here are linked back to their original finding\n\nOf these vulnerabilities, 5 received a risk rating in the category of HIGH severity, 7 received a risk rating in the category of MEDIUM severity, and 18 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 6 non-critical recommendations and 34 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 PoolTogether code contest repository](https://github.com/code-423n4/2021-06-pooltogether) is comprised of 10 smart contracts written in the Solidity programming language and includes 1,395 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (5)\n\n## [[H-01] User could lose underlying tokens when redeeming from the `IdleYieldSource`](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/120)\n_Submitted by shw_\n\nThe `redeemToken` function in `IdleYieldSource` uses `redeemedShare` instead of `redeemAmount` as the input parameter when calling `redeemIdleToken` of the Idle yield source. As a result, users could get fewer underlying tokens than they should.\n\nWhen burning users' shares, it is correct to use `redeemedShare` (line 130). However, when redeeming underlying tokens from Idle Finance, `redeemAmount` should be used instead of `redeemedShare` (line 131). Usually, the `tokenPriceWithFee()` is greater than `ONE_IDLE_TOKEN`, and thus `redeemedShare` is less than `redeemAmount`, causing users to get fewer underlying tokens than expected.\n\nRecommend changing `redeemedShare` to `redeemAmount` at line [L131](https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/yield-source/IdleYieldSource.sol#L129-L131).\n\n**[PierrickGT (PoolTogether) confirmed and patched](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/120#issuecomment-871284667):**\n > PR: https://github.com/pooltogether/idle-yield-source/pull/4\n\n## [[H-02] `YearnV2YieldSource` wrong subtraction in withdraw](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/90)\n_Submitted by cmichel, also found by 0xRajeev_\n\nWhen withdrawing from the `vault`, one redeems `yTokens` for `token`s, thus the `token` balance of the contract should increase after withdrawal.\nBut the contract subtracts the `currentBalance` from the `previousBalance`:\n\n```solidity\nuint256 yShares = _tokenToYShares(amount);\nuint256 previousBalance = token.balanceOf(address(this));\n// we accept losses to avoid being locked in the Vault (if losses happened for some reason)\nif(maxLosses != 0) {\n    vault.withdraw(yShares, address(this), maxLosses);\n} else {\n    vault.withdraw(yShares);\n}\nuint256 currentBalance = token.balanceOf(address(this));\n// @audit-issue this seems wrong\nreturn previousBalance.sub(currentBalance);\n```\n\nAll vault withdrawals fail due to the integer underflow as the `previousBalance` is less than `currentBalance`. Users won't be able to get back their investment.\n\nRecommend that It should return `currentBalance > previousBalance ? currentBalance - previousBalance : 0`\n\n**[kamescg (PoolTogether) confirmed and patched](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/90#issuecomment-871932751):**\n > - https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/new/fix/90\n> - https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/7\n\n## [[H-03] `BadgerYieldSource` `balanceOfToken` share calculation seems wrong](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/84)\n_Submitted by cmichel_\n\nWhen suppling to the `BadgerYieldSource`, some `amount` of `badger` is deposited to `badgerSett` and one receives `badgerSett` share tokens in return which are stored in the `balances` mapping of the user. So far this is correct.\n\nThe `balanceOfToken` function should then return the redeemable balance in `badger` for the user's `badgerSett` balance.\nIt computes it as the pro-rata share of the user balance (compared to the total-supply of `badgerSett`) on the `badger` in the vault:\n\n```solidity\nbalances[addr].mul(\n  badger.balanceOf(address(badgerSett))\n).div(\n  badgerSett.totalSupply()\n)\n```\n\nHowever, `badger.balanceOf(address(badgerSett))` is only a small amount of badger that is deployed in the vault (\"Sett\") due to most of the capital being deployed to the _strategies_. Therefore, it under-reports the actual balance:\n\n> Typically, a Sett will keep a small portion of deposited funds in reserve to handle small withdrawals cheaply. [Badger Docs](https://badger-finance.gitbook.io/badger-finance/technical/setts/sett-contract)\n\nAny contract or user calling the `balanceOf` function will receive a value that is far lower than the actual balance.\nUsing this value as a basis for computations will lead to further errors in the integrations.\n\nRecommend using [`badgerSett.balance()`](https://github.com/Badger-Finance/badger-system/blob/2b0ee9bd77a2cc6f875b9b984ae4dfe713bbc55c/contracts/badger-sett/Sett.sol#L126) instead of `badger.balanceOf(address(badgerSett))` to also account for \"the balance in the Sett, the Controller, and the Strategy\".\n\n**[asselstine (PoolTogether) confirmed](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/84)**\n\n## [[H-04] withdraw timelock can be circumvented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/91)\n_Submitted by cmichel_\n\nOne can withdraw the entire `PrizePool` deposit by circumventing the timelock.\nAssume the user has no credits for ease of computation:\n- user calls `withdrawWithTimelockFrom(user, amount=userBalance)` with their entire balance. This \"mints\" an equivalent `amount` of `timelock` and resets `_unlockTimestamps[user] = timestamp = blockTime + lockDuration`.\n- user calls `withdrawWithTimelockFrom(user, amount=0)` again but this time withdrawing `0` amount. This will return a `lockDuration` of `0` and thus `unlockTimestamp = blockTime`. The inner `_mintTimelock` now resets `_unlockTimestamps[user] = unlockTimestamp`\n- As `if (timestamp <= _currentTime()) ` is true, the full users amount is now transferred out to the user in the `_sweepTimelockBalances` call.\n\nUsers don't need to wait for their deposit to contribute their fair share to the prize pool.\nThey can join before the awards and leave right after without a penalty which leads to significant issues for the protocol.\nIt's the superior strategy but it leads to no investments in the strategy to earn the actual interest.\n\nRecommend that the unlock timestamp should be increased by duration each time, instead of being reset to the duration.\n\n**[asselstine (PoolTogether) confirmed](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/91#issuecomment-868089158):**\n> Mitigation:\n>\n> If a user's timelock balance is non-zero, the prize strategy rejects the ticket burn.\n\n## [[H-05] `IdleYieldSource` doesn't use mantissa calculations](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/103)\n_Submitted by tensors_\n\nBecause mantissa calculations are not used in this case to account for decimals, the arithmetic can zero out the number of shares or tokens that should be given.\n\nFor example, say I deposit 1 token, expecting 1 share in return. On [L95](https://github.com/sunnyRK/IdleYieldSource-PoolTogether/blob/6dcc419e881a4f0f205c07c58f4db87520b6046d/contracts/IdleYieldSource.sol#L95), if the `totalUnderlyingAssets` is increased to be larger than the number of total shares, then the division would output 0 and I wouldn't get any shares.\n\nRecommend  implementing mantissa calculations like in the contract for the AAVE  yield.\n\n**[PierrickGT (PoolTogether) confirmed and patched](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/103#issuecomment-873072563):**\n > PR: https://github.com/pooltogether/idle-yield-source/pull/5\n\n# Medium Risk Findings (7)\n\n## [[M-01] `safeApprove()` for Yearn Vault may revert preventing deposits causing DoS](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/71)\n_Submitted by 0xRajeev, also found by pauliax_\n\nThe `_depositInVault()` function for Yearn yield source uses ERC20 `safeApprove()` from OpenZeppelin's SafeERC20 library to give maximum allowance to the Yearn Vault address if the current allowance is less than contract’s token balance.\n\nHowever, the `safeApprove` function prevents changing an allowance between non-zero values to mitigate a possible front-running attack. It reverts if that is the case. Instead, the `safeIncreaseAllowance` and `safeDecreaseAllowance` functions should be used. Comment from the OZ library for this function:\n> “// `safeApprove` should only be called when setting an initial allowance, // or when resetting it to zero. To increase and decrease it, use // 'safeIncreaseAllowance' and ‘safeDecreaseAllowance'\"\n\nIf the existing allowance is non-zero (say, for e.g., previously the entire balance was not deposited due to vault balance limit resulting in the allowance being reduced but not made 0), then `safeApprove()` will revert causing the user’s token deposits to fail leading to denial-of-service. The condition predicate indicates that this scenario is possible. See [similar Medium-severity finding M03](https://blog.openzeppelin.com/1inch-exchange-audit/).\n\nRecommend using `safeIncreaseAllowance()` function instead of `safeApprove()`.\n\n**[kamescg (PoolTogether) confirmed and patched](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/71#issuecomment-871928392):**\n> - https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/new/fix/71\n> - https://github.com/jmonteer/pooltogether-yearnv2-yield-source/pull/6\n\n## [[M-02] Return values of ERC20 `transfer` and `transferFrom` are unchecked](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/112)\n_Submitted by shw, gpersoon, JMukesh, also found by a_delamo and cmichel_\n\nIn the contracts `BadgerYieldSource` and `SushiYieldSource`, the return values of ERC20 `transfer` and `transferFrom` are not checked to be `true`, which could be `false` if the transferred tokens are not ERC20-compliant (e.g., `BADGER`). In that case, the transfer fails without being noticed by the calling contract.\n\nIf warden's understanding of the `BadgerYieldSource` is correct, the `badger` variable should be the `BADGER` token at address `0x3472a5a71965499acd81997a54bba8d852c6e53d`. However, this implementation of `BADGER` is not ERC20-compliant, which returns `false` when the sender does not have enough token to transfer (both for `transfer` and `transferFrom`). See the [source code on Etherscan](https://etherscan.io/address/0x3472a5a71965499acd81997a54bba8d852c6e53d#code) (at line 226) for more details.\n\nRecommend using the [`SafeERC20` library implementation](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol) from Openzeppelin and call `safeTransfer` or `safeTransferFrom` when transferring ERC20 tokens.\n\n**[kamescg (PoolTogether) confirmed and patched](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/112#issuecomment-870060136):**\n> Sushi\n> - https://github.com/pooltogether/sushi-pooltogether/pull/new/fix/112\n> - https://github.com/pooltogether/sushi-pooltogether/pull/11\n>\n> Badger\n> - https://github.com/pooltogether/badger-yield-source/pull/new/fix/112\n> - https://github.com/pooltogether/badger-yield-source/pull/2\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/112#issuecomment-890403952):**\n > Sponsor has repeatedly stated in duplicate issues that: \"It's more of a 1 (Low Risk) because the subsequent deposit calls will fail. There is no advantage to be gained; the logic is simply poor.\"\n>\n> I disagree with this assessment. The function(s) in question do not immediately call deposit or another function that would cause a revert. In fact the balances are updated:\n\n```solidity\n  balances[msg.sender] = balances[msg.sender].sub(requiredSharesBalance);\n  badger.transfer(msg.sender, badgerBalanceDiff);\n  return (badgerBalanceDiff);\n```\n\n> The impact that this would have on the rest of the system is substantial, including causing incorrect balances to be returned and potentially lost funds.\n>\n> That said, I do not think this is very likely and so high severity seems excessive here. Im adjusting all of these reports to Medium Risk given that lower likelihood.\n\n## [[M-03] `SafeMath` not completely used in yield source contracts](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/114)\n_Submitted by shw, also found by cmichel_\n\n`SafeMath` is not completely used at the following lines of yield source contracts, which could potentially cause arithmetic underflow and overflow:\n1. [line 78](https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/yield-source/SushiYieldSource.sol#L78) in `SushiYieldSource`\n2. [line 67](https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/yield-source/BadgerYieldSource.sol#L67) in `BadgerYieldSource`\n3. line [91](https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/yield-source/IdleYieldSource.sol#L91) and [98](https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/yield-source/IdleYieldSource.sol#L98) in `IdleYieldSource`\n\nRecommend using the `SafeMath` library functions in the above lines.\n\n**[asselstine (PoolTogether) confirmed and disagreed with severity](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/114#issuecomment-868022899):**\n > While the arithmetic ceiling is quite high, if an overflow occurred this would significantly disrupt the yield sources.  I'd qualify this issue higher as `2 (Med Risk)`.\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/114#issuecomment-904646481):**\n > I agree with the sponsor's risk evaluation. Increasing to medium.\n\n## [[M-04] The assumption that operator == to (user) may not hold leading to failed timelock deposits](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/51)\n_Submitted by 0xRajeev_\n\nThe contract uses `_msgSender()` to denote an operator who is operating on behalf of the user. This is typically used for meta-transactions where the operator is an intermediary/relayer who may facilitate gas-less transactions on behalf of the user. They may be the same address but it is safer to assume that they may not be.\n\nWhile the code handles this separation of role in most cases, it misses doing so in `timelockDepositTo()` function where it accounts the `_timelockBalances` to the operator address instead of the user specified `to` address. It assumes they are the same. The corresponding usage in `_mintTimelock()` which is called from `withdrawWithTimelockFrom()` uses the user specified 'from' address and not the `_msgSender()`. Therefore the corresponding usage in `timelockDepositTo()` should be the same.\n\nIn the scenario where the operator address != user specified from/to addresses, i.e. meta-transactions, the timelock deposits and withdrawals are made to/from different addresses and so the deposits of timelocked tokens will fail because the operator’s address does not have the required amount of `_timelockBalances`.\n\nRecommend changing `operator` to `from` on [L281](https://github.com/code-423n4/2021-06-pooltogether/blob/85f8d044e7e46b7a3c64465dcd5dffa9d70e4a3e/contracts/PrizePool.sol#L281) of `timelockDepositTo()` and specifying the scenarios where the role of the operator is applicable and document/implement those accordingly.\n\n**[asselstine (PoolTogether) disputed](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/51#issuecomment-868891482):**\n > In the function `timelockDepositTo()` the msg.sender is using their timelocked funds to re-enter the pool.  They can only spend their own funds; they should not be able to spend other user's funds.\n>\n> The warden is saying the `timelockDepositTo` should be callable by anyone and allow them to transfer other user's funds from the timelock back into tickets.  This actually introduces an attack vector.\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/51#issuecomment-907497531):**\n > I think sponsor is misunderstanding warden's concern here. The issue is not that `msg.sender` is being checked, but that `_msgSender` is being checked. Happy to discuss this more if sponsor still disagrees, but I think the concern raised is valid.\n\n## [[M-05] Actual yield source check on address will succeed for non-existent contract](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/59)\n_Submitted by 0xRajeev_\n\nLow-level calls `call`/`delegatecall`/`staticcall` return true even if the account called is non-existent (per EVM design). [Solidity documentation](https://docs.soliditylang.org/en/v0.8.6/control-structures.html#error-handling-assert-require-revert-and-exceptions) warns:\n> \"The low-level functions call, delegatecall and staticcall return true as their first return value if the account called is non-existent, as part of the design of the EVM. Account existence must be checked prior to calling if needed.”\n\nThe `staticcall` here will return True even if the `_yieldSource` contract doesn't exist at any incorrect-but-not-zero address, e.g. EOA address, used during initialization by accident.\n\nThe hack, as commented, to check if it’s an actual yield source contract, will fail if the address is indeed a contract account which doesn’t implement the `depositToken` function. However, if the address is that of an EOA account, the check will pass here but will revert in all future calls to the yield source forcing contract redeployment after the pool is active. Users will not be able to interact with the pool and abandon it.\n\nRecommend that a contract existence check should be performed on `_yieldSource` prior to the depositToken function existence hack for determining yield source contract.\n\n**[asselstine (PoolTogether) confirmed](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/59)**\n\n## [[M-06] `YieldSourcePrizePool_canAwardExternal` does not work](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/92)\n_Submitted by cmichel_\n\nThe idea of `YieldSourcePrizePool_canAwardExternal` seems to be to disallow awarding the interest-bearing token of the yield source, like aTokens, cTokens, yTokens.\n\n> \"@dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken.  The prize strategy should not be allowed to move those tokens.\"\n\nHowever, the code checks `_externalToken != address(yieldSource)` where `yieldSource` is the actual yield strategy contract and not the strategy's interest-bearing token.\nNote that the `yieldSource` is usually not even a token contract except for `ATokenYieldSource` and `YearnV2YieldSource`.\n\nThe `_canAwardExternal` does not work as expected. It might be possible to award the interest-bearing token which would lead to errors and loss of funds when trying to redeem underlying.\n\nThere doesn't seem to be a function to return the interest-bearing token. It needs to be added, similar to `depositToken()` which retrieves the underlying token.\n\n**[asselstine (PoolTogether) acknowledged](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/92#issuecomment-868859317):**\n > This is an interesting one:\n>\n> - the yield source interface does not require the deposit be tokenized; the implementation is entirely up to the yield source.\n> - the _canAwardExternal is a legacy of older code.  Since it had to be included it was set to assume the yield source was tokenized.\n>\n> Since yield sources are audited and analyzed, I think this is a pretty low risk.  Additionally, not all of the yield sources are tokenized (Badger and Sushi are not), so it isn't a risk for them.\n>\n> We could have `canAwardExternal` on the yield source itself, but it would add gas overhead.\n>\n\n**[aodhgan (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/92#issuecomment-873106239):**\n > Could we add an check -\n> `\n> function _canAwardExternal(address _externalToken) internal override view returns (bool) {\n> return _externalToken != address(yieldSource) && _externalToken != address(yieldSource.depositToken())\n> }`\n\n**[asselstine (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/92#issuecomment-874342323):**\n > We could add another check, but it's still arbitrary.  The point is that the yield source knows what token the prize pool may or may not hold, so without asking the yield source it's just a guess.\n>\n> Let's leave it as-is\n\n## [[M-07] Using `transferFrom` on ERC721 tokens](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/115)\n_Submitted by shw_\n\nIn the function `awardExternalERC721` of contract `PrizePool`, when awarding external ERC721 tokens to the winners, the `transferFrom` keyword is used instead of `safeTransferFrom`. If any winner is a contract and is not aware of incoming ERC721 tokens, the sent tokens could be locked.\n\nRecommend consider changing `transferFrom` to `safeTransferFrom` at line 602. However, it could introduce a DoS attack vector if any winner maliciously rejects the received ERC721 tokens to make the others unable to get their awards. Possible mitigations are to use a `try/catch` statement to handle error cases separately or provide a function for the pool owner to remove malicious winners manually if this happens.\n\n**[asselstine (PoolTogether) confirmed and disagreed with severity](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/115#issuecomment-868021913):**\n > This issue poses no risk to the Prize Pool, so it's more of a `1 (Low Risk` IMO.\n>\n> This is just about triggering a callback on the ERC721 recipient.  We omitted it originally because we didn't want a revert on the callback to DoS the prize pool.\n>\n> However, to respect the interface it makes sense to implement it fully.  That being said, if it does throw we must ignore it to prevent DoS attacks.\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/115#issuecomment-907507608):**\n > I agree with the medium risk rating provided by the warden.\n\n# Low Risk Findings (18)\n\n## [[L-01] no check for `_stakeToken`!=0](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/4)\n_Submitted by gpersoon_\n\nThe `initializeYieldSourcePrizePool` function of `YieldSourcePrizePool.sol` has a check to make sure `_yieldSource` !=0. However, the `initialize` function  of the comparable `StakePrizePool.sol` doesn't do this check.\n\nAlthough unlikely this will introduce problems, it is more consistent to check for 0.\n\n[`YieldSourcePrizePool.sol` L24](https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/YieldSourcePrizePool.sol#L24)\n```solidity\n  function initializeYieldSourcePrizePool (... IYieldSource _yieldSource) ... {\n..\n  require(address(_yieldSource) != address(0), \"YieldSourcePrizePool/yield-source-zero\");\n  PrizePool.initialize(\n```\n\n[`StakePrizePool.sol` L20](https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/StakePrizePool.sol#L20)\n```solidity\nfunction initialize ( ..  IERC20Upgradeable _stakeToken)...  {\n  PrizePool.initialize(\n```\n\nRecommend adding something like the following in the initialize function of `StakePrizePool.sol`:\n```solidity\n  require(address(_stakeToken) != address(0), \"StakePrizePool/stakeToken-zero\");\n```\n\n## [[L-02] Lack of `nonReentrant` modifier in yield source contracts](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/119)\n_Submitted by shw, also found by gpersoon, 0xRajeev and pauliax__\n\nThe `YearnV2YieldSource` contract prevents the `supplyTokenTo`, `redeemToken`, and `sponsor` functions from being reentered by applying a `nonReentrant` modifier. Since these contracts share a similar logic, adding a `nonReentrant` modifier to these functions in all of the yield source contracts is reasonable. However, the same protection is not seen in other yield source contracts.\n\nA `nonReentrant` modifier in the following functions is missing:\n1. The `sponsor` function of `ATokenYieldSource`\n2. The `supplyTokenTo` and `redeemToken` function of `BadgerYieldSource`\n3. The `sponsor` function of `IdleYieldSource`\n4. The `supplyTokenTo` and `redeemToken` function of `SushiYieldSource`\n\nRecommend adding a `nonReentrant` modifier to these functions. For `BadgerYieldSource` and `SushiYieldSource` contracts, make them inherit from Openzeppelin's `ReentrancyGuardUpgradeable` to use the `nonReentrant` modifier.\n\n**[kamescg (PoolTogether) confirmed and patched](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/119#issuecomment-869971264):**\n > ATokenYieldSource: https://github.com/pooltogether/aave-yield-source/tree/fix/119\n> SushiYieldSource: https://github.com/pooltogether/sushi-pooltogether/pull/new/fix/119\n> BadgerYieldSource: https://github.com/pooltogether/badger-yield-source/pull/new/fix/119\n> IdleYieldSource: https://github.com/pooltogether/idle-yield-source/pull/new/fix/119\n>\n\n## [[L-03] What is default duration when `creditRateMantissa` is not set](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/10)\n_Submitted by gpersoon_\n\nIn `PrizePool.sol`, if the value of  `_tokenCreditPlans[_controlledToken].creditRateMantissa` isn't set (yet), then the function `_estimateCreditAccrualTime` returns 0.\nThis means the `TimelockDuration` is 0 and funds can be withdrawn immediately, defeating the entire timelock mechanism.\n\nRecommend perhaps a different default would be useful.\n\n[`PrizePool.sol` L783](https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/PrizePool.sol#L783)\n```solidity\nfunction _estimateCreditAccrualTime( address _controlledToken,uint256 _principal,uint256 _interest ) internal view returns (uint256 durationSeconds)  {\n  uint256 accruedPerSecond = FixedPoint.multiplyUintByMantissa(_principal, _tokenCreditPlans[_controlledToken].creditRateMantissa);\n  if (accruedPerSecond == 0) {\n    return 0;\n  }\n  return _interest.div(accruedPerSecond);\n}\n```\n\n[`PrizePool.sol` L710](https://github.com/code-423n4/2021-06-pooltogether/blob/main/contracts/PrizePool.sol#L710)\n```solidity\nfunction _calculateTimelockDuration( address from, address controlledToken, uint256 amount) internal returns (uint256 durationSeconds, uint256 burnedCredit )  {\n...\n  uint256 duration = _estimateCreditAccrualTime(controlledToken, amount, exitFee);\n  if (duration > maxTimelockDuration) {\n    duration = maxTimelockDuration;\n  }\n  return (duration, _burnedCredit);\n}\n```\n\nRecommend considering the default duration for the case `_tokenCreditPlans[_controlledToken].creditRateMantissa` isn't set.\n\n## [[L-04] `staticCall` to `yieldSource.depositToken` doesn't provide any security guarantees](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/14)\n_Submitted by GalloDaSballo_\n\nThe assumption that a yield source is valid, just because it has the method `depositToken`, is not a security guarantee. I could create any random contract with that function but that is not a guarantee that the contract will behave as intended.\n\nI believe a better solution would be to have a registry, controlled by governance, that accepts the valid yield sources. A valid registry ensures the the yield sources are properly maintained.\n\nIn summary: There is no security difference between having the check and not having the check, because the check can be sidelined without any effort and doesn’t truly provide any guarantee of the contract being valid. Having no checks would save you gas. While having a governance registry would guarantee that the yield sources usable are exclusively the community vetted ones.\n\n**[asselstine (PoolTogether) acknowledged](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/14#issuecomment-869044961):**\n > It's possible for a malicious developer to fork our code and create a pool with a rugging yield source.  That can't really be helped either way.\n>\n> We decide which pools to display on https://app.pooltogether.com, so we can vet pools already.\n\n## [[L-05] Switch modifier order to consistently place the non-reentrant modifier as the first one](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/50)\n_Submitted by 0xRajeev_\n\nIf a function has multiple modifiers they are executed in the order specified. If checks or logic of modifiers depend on other modifiers this has to be considered in their ordering. `PrizePool` has functions with multiple modifiers with one of them being non-reentrant which prevents reentrancy on the functions. This should ideally be the first one to prevent even the execution of other modifiers in case of re-entrancies.\n\nWhile there is no obvious vulnerability currently with non-reentrant being the last modifier in the list, it is safer to place it in the first. This is of slight concern with the deposit functions which have the `canAddLiquidity()` modifier (before non-reentrant) that makes external calls to get `totalSupply` of controlled tokens.\n\nFor reference, see similar finding in [Consensys’s audit of Balancer](https://consensys.net/diligence/audits/2020/05/balancer-finance/#switch-modifier-order-in-bpool).\n\nRecommend switching modifier order to consistently place the non-reentrant modifier as the first one to run so that all other modifiers are executed only if the call is non-reentrant.\n\n**[kamescg (PoolTogether) confirmed and patched](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/50#issuecomment-871168783):**\n > - https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/50\n> - https://github.com/pooltogether/pooltogether-pool-contracts/pull/308\n\n## [[L-06] Missing modifier `onlyControlledToken` may result in undefined/exceptional behavior](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/54)\n_Submitted by 0xRajeev_\n\nThe modifier `onlyControlledToken` is used for functions that allow the `controlledToken` address as a parameter to ensure that only whitelisted tokens (ticket and sponsorship) are provided. This is used in all functions except `calculateEarlyExitFee()`.\n\nThe use of a non-whitelisted `controlledToken` will result in calls to potentially malicious token contract and cause undefined behavior for the `from` user address specified in the call.\n\nRecommend adding missing modifier `onlyControlledToken` to `calculateEarlyExitFee()`.\n\n**[kamescg (PoolTogether) confirmed](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/54#issuecomment-871148826):**\n > This would likely break assumptions made by other contracts when used to get the early exit fee.\n>\n> For example in Pods to calculate the exit fee. Plus this is called statically from JS frontends to get the fee.\n>\n```solidity\n/**\n  * @notice Calculate the cost of withdrawing from the Pod if the\n  * @param amount Amount of tokens to withdraw when calculating early exit fee.\n  * @dev Based of the Pod's total token/ticket balance and totalSupply it calculates the pricePerShare.\n*/\nfunction getEarlyExitFee(uint256 amount) external returns (uint256) {\n    uint256 tokenBalance = _podTokenBalance();\n    if (amount <= tokenBalance) {\n        return 0;\n    } else {\n        // Calculate Early Exit Fee\n        (uint256 exitFee, ) =\n            _prizePool.calculateEarlyExitFee(\n                address(this),\n                address(ticket),\n                amount.sub(tokenBalance)\n            );\n        // Early Exit Fee\n        return exitFee;\n    }\n}\n```\n\n**[asselstine (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/54#issuecomment-874371325):**\n> @kamescg Rajeev is suggesting to add the modifier `onlyControlledToken` to `calculateEarlyExitFee()`\n>\n> That means it would revert on invalid controlled tokens.  It would still be a static call!\n>\n> That being said this isn't a deal breaker.  We can skip this one and it wouldn't hurt.\n\n\n## [[L-07] Missing calls to `init` functions of inherited contracts](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/60)\n_Submitted by 0xRajeev, also found by shw_\n\nMost contracts use the `delegateCall` proxy pattern and hence their implementations require the use of `initialize()` functions instead of constructors. This requires derived contracts to call the corresponding `init` functions of their inherited base contracts. This is done in most places except a few.\n\nThe inherited base classes do not get initialized which may lead to undefined behavior.\n- Missing call to `__ReentrancyGuard_init` in `ATokenYieldSource.sol` [L99-L102](https://github.com/code-423n4/2021-06-pooltogether/blob/85f8d044e7e46b7a3c64465dcd5dffa9d70e4a3e/contracts/yield-source/ATokenYieldSource.sol#L99-L102) and [L59-L61](https://github.com/code-423n4/2021-06-pooltogether/blob/85f8d044e7e46b7a3c64465dcd5dffa9d70e4a3e/contracts/yield-source/IdleYieldSource.sol#L59-L61)\n- Missing call to `__ERC20_init` in `ATokenYieldSource.sol` [L59-L61](https://github.com/code-423n4/2021-06-pooltogether/blob/85f8d044e7e46b7a3c64465dcd5dffa9d70e4a3e/contracts/yield-source/IdleYieldSource.sol#L59-L61) and [L83-L86](https://github.com/code-423n4/2021-06-pooltogether/blob/85f8d044e7e46b7a3c64465dcd5dffa9d70e4a3e/contracts/yield-source/YearnV2YieldSource.sol#L83-L86)\n\nRecommend adding missing calls to init functions of inherited contracts.\n\n**[PierrickGT (PoolTogether) confirmed and patched](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/60#issuecomment-869689788):**\n > ATokenYieldSource PR: https://github.com/pooltogether/aave-yield-source/pull/18\n\n**[PierrickGT (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/60#issuecomment-871409254):**\n > Has been fixed already for IdleYieldSource: https://github.com/pooltogether/idle-yield-source/blob/master/contracts/IdleYieldSource.sol#L60-#62\n\n**[PierrickGT (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/60#issuecomment-872254875):**\n > YearnV2YieldSource: https://github.com/pooltogether/pooltogether-yearnv2-yield-source/pull/8\n\n## [[L-08] Unlocked pragma used in multiple contracts](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/109)\n_Submitted by shw, also found by 0xRajeev and JMukesh_\n\nSome contracts (e.g., `PrizePool`) use an unlocked pragma (e.g., `pragma solidity >=0.6.0 <0.7.0;`) which is not fixed to a specific Solidity version. Locking the pragma helps ensure that contracts do not accidentally get deployed using a different compiler version with which they have been tested the most.\n\nPlease use `grep -R pragma .` to find the unlocked pragma statements.\n\nRecommend locking pragmas to a specific Solidity version. Consider the compiler bugs in the following lists and ensure the contracts are not affected by them. It is also recommended to use the latest version of Solidity when deploying contracts (see [Solidity docs](https://docs.soliditylang.org/en/v0.8.4/#solidity)).\n\nSolidity compiler bugs:\n[Solidity repo - known bugs](https://github.com/ethereum/solidity/blob/develop/docs/bugs.json)\n[Solidity repo - bugs by version](https://github.com/ethereum/solidity/blob/develop/docs/bugs_by_version.json)\n\n**[kamescg (PoolTogether) confirmed](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/109#issuecomment-870992869):**\n > PrizePool\n> -  https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/109\n> - https://github.com/pooltogether/pooltogether-pool-contracts/pull/303\n>\n> Remaining Contracts\n> - https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/109-remaining-contracts\n> - https://github.com/pooltogether/pooltogether-pool-contracts/pull/304\n\n## [[L-09] Missing zero-address checks](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/65)\n_Submitted by 0xRajeev_\n\nChecking addresses against zero-address during initialization or during setting is a security best-practice. However, such checks are missing in all address variable initializations.\n\nAllowing zero-addresses will lead to contract reverts and force redeployments if there are no setters for such address variables.\n\nRecommend adding zero-address checks for all initializations of address state variables.\n\n**[kamescg (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/65#issuecomment-871145349):**\n > Core\n> - https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/65\n> - https://github.com/pooltogether/pooltogether-pool-contracts/pull/306\n>\n> Aave\n> - https://github.com/pooltogether/aave-yield-source/pull/new/fix/65\n> - https://github.com/pooltogether/aave-yield-source/pull/22\n>\n> Sushi\n> - https://github.com/pooltogether/sushi-pooltogether/pull/new/fix/65\n> - https://github.com/steffenix/sushi-pooltogether/pull/21\n>\n> Idle\n> - https://github.com/pooltogether/idle-yield-source/pull/new/fix/65\n> - https://github.com/pooltogether/idle-yield-source/pull/3\n>\n> Badger\n> - https://github.com/pooltogether/badger-yield-source/pull/new/fix/65\n> - https://github.com/pooltogether/badger-yield-source/pull/6\n\n\n## [[L-10] Overly permissive threshold check allows high yield loss](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/69)\n_Submitted by0xRajeev_\n\nThe Yearn yield source defines `maxLosses` as: “Max % of losses that the Yield Source will accept from the Vault in BPS” and uses a setter `setMaxLosses()` to allow owner to set this value. However, the threshold check implemented only checks if this value is less than 10_000 or 100%, which is a good sanity check but allows loss of even 100%. The buffer for the loss is to avoid funds being locked in the Yearn vault in any emergency situation.\n\nIf the losses are really high for some reason, it will impact the interest and the prizes.\n\nPerform a tighter upper threshold check to allow a more acceptable max loss value in `setMaxLosses()`\n\n**[asselstine (PoolTogether) acknowledged](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/69#issuecomment-868875095):**\n > Yield sources are controlled by governance, so this isn't a concern\n\n## [[L-11] Ignored return values may lead to undefined behavior](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/70)\n_Submitted by 0xRajeev_\n\nThe `_depositInVault()` returns the value returned from its call to the Yearn vault’s `deposit()` function. However, the return value is ignored at both call sites in `supplyTokenTo()` and `sponsor()`.\n\n It is unclear what the intended usage is and how, if any, the return value should be checked. This should perhaps check how much of the full balance was indeed deposited/rejected in the vault by comparing the return value of issued vault shares as commented: “The actual amount of shares that were received for the deposited tokens” because \"if deposit limit is reached, tokens will remain in the Yield Source and they will be queued for retries in subsequent deposits.”\n\nRecommend checking return value appropriately or if not, document why this is not necessary.\n\n**[asselstine (PoolTogether) disputed](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/70#issuecomment-868871925):**\n > Regardless of how much of the deposit made it into the underlying vault, the depositor will hold the correct number shares.  It doesn't matter if only a portion of the funds made it into the vault.\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/70#issuecomment-904093881):**\n > I think this is a reasonable finding by the warden. If the return value isn't needed, it should be removed or at least documented that it's there for no reason. If there is a reason to have the return value, the return value should be considered by the calling functions.\n\n## [[L-12] Using `memory[]` parameter without checking its length](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/75)\n_Submitted by JMukesh_\n\nUsing memory array parameters (e.g.` uint[]` memory) as function parameters can be tricky in Solidity, because an attack is possible with a very large array which will overlap with other parts of the memory.\n\nThis an example to show the exploit based on [`Exploit.sol`](https://github.com/paradigm-operations/paradigm-ctf-2021/blob/master/swap/private/Exploit.sol):\n```solidity\npragma solidity ^0.4.24; // only works with low solidity version\n\ncontract test{\n    struct Overlap {\n        uint field0;\n    }\n    event log(uint);\n\n  function mint(uint[] memory amounts) public  returns (uint) {   // this can be in any solidity version\n       Overlap memory v;\n       v.field0 = 1234;\n       emit log(amounts[0]); // would expect to be 0 however is 1234\n       return 1;\n     }\n\n  function go() public { // this part requires the low solidity version\n      uint x=0x800000000000000000000000000000000000000000000000000000000000000; // 2^251\n      bytes memory payload = abi.encodeWithSelector(this.mint.selector, 0x20, x);\n      bool success=address(this).call(payload);\n  }\n}\n```\n\nRecommend checking the array length before using it\n\n**[asselstine (PoolTogether) confirmed](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/75#issuecomment-868867927):**\n > We're going to remove the timelock functions.  The initializer I'm not concerned about.\n\n## [[L-13] Uneven use of events](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/78)\n_Submitted by JMukesh_\n\nTo track off-chain data it is necessary to use events\n\nIn `ATokenYieldSource.sol`, `IdleYieldSource.sol`, and `yearnV2yieldsource`, events are emmitted in `supplyTokenTo()`, `redeemToken()`, and `sponsor()`, but not in `BadgerYieldsource.sol` and `shushiyieldsource.sol`\n\nRecommend using events.\n\n**[asselstine (PoolTogether) confirmed](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/78)**\n\n## [[L-14] Missing parameter validation](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81)\n_Submitted by cmichel_\n\nSome parameters of functions are not checked for invalid values:\n- `StakePrizePool.initialize`: `address _stakeToken` not checked for non-zero or contract\n- `ControlledToken.initialize`: `address controller` not checked for non-zero or contract\n- `PrizePool.withdrawReserve`: `address to` not checked for non-zero, funds will be lost when sending to zero address\n- `ATokenYieldSource.initialize`: `address _aToken, _lendingPoolAddressesProviderRegistry` not checked for non-zero or contract\n- `BadgerYieldSource.initialize`: `address badgerSettAddr, badgerAddr` not checked for non-zero or contract\n- `SushiYieldSource.constructor`: `address _sushiBar, _sushiAddr` not checked for non-zero or contract\n\nWrong user input or wallets defaulting to the zero addresses for a missing input can lead to the contract needing to redeploy or wasted gas.\n\nRecommend validating the parameters.\n\n**[PierrickGT (PoolTogether) confirmed and patched](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-869892506):**\n > ATokenYieldSource PR: https://github.com/pooltogether/aave-yield-source/pull/19\n\n**[PierrickGT (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-872312046):**\n > BadgerYieldSource PR: https://github.com/pooltogether/badger-yield-source/pull/6\n\n**[PierrickGT (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-872373042):**\n > SushiYieldSource PR: https://github.com/pooltogether/sushi-pooltogether/pull/16\n\n**[PierrickGT (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-872391467):**\n > ControlledToken PR: https://github.com/pooltogether/pooltogether-pool-contracts/pull/306\n\n**[PierrickGT (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-872448781):**\n > StakePrizePool PR: https://github.com/pooltogether/pooltogether-pool-contracts/pull/314\n\n**[PierrickGT (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-872797002):**\n > @asselstine (PoolTogether) I'm not sure we want to check for non zero address in the PrizePool `withdrawReserve` function since this function is only callable by the Reserve and the owner of the Reserve contract.\n> https://github.com/pooltogether/pooltogether-pool-contracts/blob/192429c808ad9714e9e05821386eb926150a009f/contracts/reserve/Reserve.sol#L32\n> https://github.com/pooltogether/pooltogether-pool-contracts/blob/4449bb2e4216511b7187b1ab420118c30af39eb7/contracts/prize-pool/PrizePool.sol#L473\n\n**[asselstine (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-874362014):**\n > Yeah @PierrickGT (PoolTogether) I don't think the `withdrawReserve` needs to do the check.  Many tokens reject on transfer to zero anyway.\n\n**[kamescg (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/81#issuecomment-876790734):**\n > LGTM\n\n## [[L-15] `ATokenYieldSource` mixes aTokens and underlying when redeeming](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/86)\n_Submitted by cmichel_\n\nThe `ATokenYieldSource.redeemToken` function burns `aTokens` and sends out underlying; however, it's used in a reverse way in the code:\nThe `balanceDiff` is used as the `depositToken` that is transferred out but it's computed on the **aTokens** that were burned instead of on the `depositToken` received.\n\nIt should not directly lead to issues as aTokens are 1-to-1 with their underlying but we still recommend doing it correctly to make the code more robust against any possible rounding issues.\n\nRecommend computing `balanceDiff` on the underyling balance (`depositToken`), not on the aToken. Then, subtract the actual burned aTokens from the user shares.\n\n**[PierrickGT (PoolTogether) confirmed](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/86#issuecomment-869640418):**\n > I agree that we should compute `balanceDiff` on the underlying balance.\n> Regarding the burn of the user's shares, we should keep it as is to verify first that the user has enough shares. This way if he doesn't, the code execution will revert before funds are withdrawn from Aave.\n\n**[PierrickGT (PoolTogether) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/86#issuecomment-869648166):**\n > PR: https://github.com/pooltogether/aave-yield-source/pull/17\n\n## [[L-16]\t`BadgerYieldSource` and `SushiYieldSource` are not upgradeable](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/113)\n_Submitted by shw_\n\nThe contracts `BadgerYieldSource` and `SushiYieldSource` are not upgradeable since they do not inherit from any Openzeppelin's upgradeable contract (e.g., ERC20Upgradeable) as the other yield source contracts.\n\nRecommend making `BadgerYieldSource` and `SushiYieldSource` upgradable.\n\n**[asselstine (PoolTogether) disputed:](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/113#issuecomment-868023522)**\n> We don't want them to be upgradeable! It's a feature not a bug.\n\n## [[L-17] `onERC721Received` not implemented in `PrizePool`](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/118)\n_Submitted by shw_\n\nThe `PrizePool` contract does not implement the `onERC721Received` function, which is considered a best practice to transfer ERC721 tokens from contracts to contracts. The absence of this function could prevent `PrizePool` from receiving ERC721 tokens from other contracts via `safeTransferFrom`.\n\nConsider adding an implementation of the `onERC721Received` function in `PrizePool`.\n\n**[kamescg (PoolTogether) confirmed](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/118#issuecomment-870022736):**\n > https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/118\n>\n> https://github.com/pooltogether/pooltogether-pool-contracts/pull/300\n\n## [[L-18] Lack of event emission after critical `initialize()` functions](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/68)\n_Submitted by 0xRajeev_\n\nMost contracts use `initialize()` functions instead of constructor given the `delegatecall` proxy pattern. While most of them emit an event in the critical `initialize()` functions to record the init parameters for off-chain monitoring and transparency reasons, `Ticket.sol` nor its base class `ControlledToken.sol` emit such an event in their `initialize()` functions.\n\nThese contracts are initialized but their critical init parameters (name, symbol, decimals and controller address) are not logged for any off-chain monitoring.\n\nSee similar [Medium-severity Finding M01](https://blog.openzeppelin.com/uma-audit-phase-4/) in OpenZeppelin’s audit of UMA protocol.\n\nRecommend emitting an initialized event in `Ticket.sol` and `ControlledToken.sol` logging their init parameters.\n\n**[asselstine (PoolTogether) confirmed but disagree with severity](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/68#issuecomment-868876017):**\n > This is just event emission; it's severity is `0 (Non-critical)`.\n\n**[kamescg (PoolTogether) patched](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/68#issuecomment-871063414):**\n > - https://github.com/pooltogether/pooltogether-pool-contracts/pull/new/fix/68\n> - https://github.com/pooltogether/pooltogether-pool-contracts/pull/305\n\n**[dmvt (judge) commented](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/68#issuecomment-907507066):**\n > I'm going to split the difference here. Events are important for various reasons. In this case, due to the proxy pattern, the creation of the contract in the initialize function happen at the same time, making it trivial for a user to go back and look at the initialization parameters in the creation transaction.\n\n# Non-Critical findings (6)\n\n- [[N-01] Use immutable keyword](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/7)\n- [[N-02] uint256(-1)](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/3)\n- [[N-03] function sponsor not all ways present](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/6)\n- [[N-04] `PrizePool.beforeTokenTransfer()` incorrectly uses msg.sender in seven places instead of `_msgSender()`](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/23)\n- [[N-05] Named return values are never used in favor of explicit returns](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/53)\n- [[N-06] setPrizeStrategy check for Interface Supported in PrizePool.sol doesn't guarantee that the new prize strategy is valid](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/15)\n\n# Gas Optimizations (34)\n\n- [[G-01] cache and reuse _vault.apiVersion() result](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/2)\n- [[G-02] Caching badger and badgerSett can save 400 gas in `supplyTokenTo()`](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/38)\n- [[G-03] currentTime() outside of loop](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/11)\n- [[G-04] SushiYieldSource save gas with pre-approval](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/94)\n- [[G-05] _accrueCredit -> _updateCreditBalance](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/18)\n- [[G-06] modifier canAddLiquidity and function _canAddLiquidity](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/19)\n- [[G-07] function _getRefferalCode() can be refactored to a constant variable](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/20)\n- [[G-08] Gas Optimization: PrizePool._calculateCreditBalance.creditBalance is incorrectly passed by reference rather than passed by value, causing unnecessary SLOADs instead of MLOADs](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/24)\n- [[G-09] Upgrading the solc compiler to >=0.8 may save gas](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/25)\n- [[G-10] Avoid use of state variables in event emissions to save gas](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/26)\n- [[G-11] Simplifying extensible but expensive modifier may save gas](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/27)\n- [[G-12] Gas savings of 300 by caching _currentAwardBalance in captureAwardBalance()](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/29)\n- [[G-13] Using access lists can save gas due to EIP-2930 post-Berlin hard fork](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/31)\n- [[G-14] Gas savings of 100 per user by caching _timelockBalances[user] in _sweepTimelockBalances()](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/32)\n- [[G-15] Gas savings of 100 by caching maxTimelockDuration in _calculateTimelockDuration()](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/33)\n- [[G-16] Unnecessary indirection to access block.timestamp value](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/34)\n- [[G-17] Preventing zero-address controlled tokens from being added can avoid checks later](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/35)\n- [[G-18] Gas savings of (100*loop-iteration-count) by caching _tokens.end() in _tokenTotalSupply()](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/36)\n- [[G-19] _depositToAave always returns 0](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/80)\n- [[G-20] Zero-address check unnecessary due to the initializer modifier](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/42)\n- [[G-21] Using function parameter in `initialize()` instead of state variable saves 100 gas](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/43)\n- [[G-22] token can be cached in a local variable to save 200 gas in `_depositInVault()`](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/44)\n- [[G-23] token can be cached in a local variable to save 100 gas in _withdrawFromVault()](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/45)\n- [[G-24] `maxLosses` can be cached in a local variable to save 100 gas in _withdrawFromVault()](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/46)\n- [[G-25] Caching sushiAddr and sushiBar in local variables to save 200 gas in `supplyTokenTo()`](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/47)\n- [[G-26] Various gas optimizations](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/77)\n- [[G-27] ATokenYieldSource save gas with pre-approval](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/93)\n- [[G-28] Credit accrual is done twice in `award`](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/96)\n- [[G-29] CreditBurned event emitted even on zero tokens burned](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/97)\n- [[G-30] Gas savings on uninitialized variables.](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/101)\n- [[G-31] Declare functions as `external` to save gas](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/107)\n- [[G-32] Gas optimization on `_depositToAave`](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/122)\n- [[G-33] Gas optimization on `redeemToken` of `ATokenYieldSource`](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/123)\n- [[G-34] Use ERC-165 instead of homebrew staticcall-based check](https://github.com/code-423n4/2021-06-pooltogether-findings/issues/104)\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}