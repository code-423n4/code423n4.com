{
  "circa": {
    "title": "Juicebox contest",
    "sponsor": "Juicebox",
    "slug": "2022-10-juicebox",
    "date": "2023-01-09",
    "findings": "https://github.com/code-423n4/2022-10-juicebox-findings/issues",
    "contest": 172
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Juicebox DAO smart contract system written in Solidity. The audit contest took place between October 18—23, 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>70 Wardens contributed reports to the Juicebox contest:</p>\n<ol>\n<li>0x1f8b</li>\n<li>0x4non</li>\n<li>0x52</li>\n<li>0x5rings</li>\n<li><a href=\"https://twitter.com/0xNazgul\">0xNazgul</a></li>\n<li><a href=\"https://twitter.com/0xSmartContract\">0xSmartContract</a></li>\n<li>Awesome</li>\n<li><a href=\"https://github.com/Aymen1001\">Aymen0909</a></li>\n<li>BClabs (nalus and Reptilia)</li>\n<li>Bnke0x0</li>\n<li>CodingNameKiki</li>\n<li>Diana</li>\n<li>DimSon</li>\n<li><a href=\"https://twitter.com/sm4rtcontr4ct\">JC</a></li>\n<li><a href=\"https://jeiwan.net\">Jeiwan</a></li>\n<li><a href=\"https://twitter.com/JagadeshRonanki\">JrNet</a></li>\n<li>Lambda</li>\n<li>LeoS</li>\n<li>RaoulSchaffranek</li>\n<li>RaymondFam</li>\n<li>RedOneN</li>\n<li>ReyAdmirado</li>\n<li>Rolezn</li>\n<li><a href=\"https://twitter.com/SAPanahloo\">SaharAP</a></li>\n<li>Saintcode_</li>\n<li>Shinchan (<a href=\"https://twitter.com/Sm4rty_\">Sm4rty</a>, <a href=\"https://twitter.com/prasantgupta52\">prasantgupta52</a> and <a href=\"https://twitter.com/rohan16___\">Rohan16</a>)</li>\n<li><a href=\"https://twitter.com/trust__90\">Trust</a></li>\n<li>V_B (Barichek and vlad_bochok)</li>\n<li>__141345__</li>\n<li><a href=\"https://twitter.com/a12jmx\">a12jmx</a></li>\n<li><a href=\"https://twitter.com/berndartmueller\">berndartmueller</a></li>\n<li><a href=\"https://twitter.com/Bharg4v\">bharg4v</a></li>\n<li>brgltd</li>\n<li><a href=\"https://twitter.com/CAA1994\">carlitox477</a></li>\n<li>cccz</li>\n<li>ch0bu</li>\n<li>chaduke</li>\n<li>cloudjunky</li>\n<li>cryptostellar5</li>\n<li>cryptphi</li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li>d3e4</li>\n<li>delfin454000</li>\n<li>emrekocak</li>\n<li>erictee</li>\n<li><a href=\"https://twitter.com/father0fBl0cks\">fatherOfBlocks</a></li>\n<li><a href=\"https://www.linkedin.com/in/georgi-nikolaev-georgiev-978253219\">gogo</a></li>\n<li><a href=\"https://twitter.com/hansfriese\">hansfriese</a></li>\n<li><a href=\"https://twitter.com/0xheynacho\">ignacio</a></li>\n<li><a href=\"https://twitter.com/JoeStakey\">joestakey</a></li>\n<li>karanctf</li>\n<li>ladboy233</li>\n<li>lukris02</li>\n<li><a href=\"https://github.com/martin-petrov03\">martin</a></li>\n<li>mcwildy</li>\n<li><a href=\"https://www.linkedin.com/in/minhquanym/\">minhquanym</a></li>\n<li>minhtrng</li>\n<li>peanuts</li>\n<li><a href=\"https://twitter.com/ret2basic\">ret2basic</a></li>\n<li>sakman</li>\n<li><a href=\"https://twitter.com/seynixyz\">seyni</a></li>\n<li>slowmoses</li>\n<li><a href=\"https://twitter.com/svs_kaushik\">svskaushik</a></li>\n<li>tnevler</li>\n<li>trustindistrust</li>\n<li>yixxas</li>\n<li><a href=\"https://zishansami102.github.io/\">zishansami</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/thePicodes\">Picodes</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 13 unique vulnerabilities. Of these vulnerabilities, 5 received a risk rating in the category of HIGH severity and 8 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 49 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 34 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-10-juicebox\">C4 Juicebox contest repository</a>, and is composed of 10 smart contracts written in the Solidity programming language and includes 1467 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-5\" style=\"position:relative;\"><a href=\"#high-risk-findings-5\" aria-label=\"high risk findings 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (5)</h1>\n<h2 id=\"h-01-making-a-payment-to-the-protocol-with-_dontmint-parameter-will-result-in-lost-fund-for-user\" style=\"position:relative;\"><a href=\"#h-01-making-a-payment-to-the-protocol-with-_dontmint-parameter-will-result-in-lost-fund-for-user\" aria-label=\"h 01 making a payment to the protocol with _dontmint parameter will result in lost fund for user permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/45\">[H-01] Making a payment to the protocol with <code>_dontMint</code> parameter will result in lost fund for user.</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/45\">yixxas</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/157\">minhquanym</a> and <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/84\">cccz</a></em></p>\n<p>User will have their funds lost if they tries to pay the protocol with <code>_dontMint = False</code>. A payment made with this parameter set should increase the <code>creditsOf[]</code> balance of user.</p>\n<p>In <code>_processPayment()</code>, <code>creditsOf[_data.beneficiary]</code> is updated at the end if there are leftover funds. However, If <code>metadata</code> is provided and <code>_dontMint == true</code>, it immediately returns.\n<a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L524-L590\">JBTiered721Delegate.sol#L524-L590</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_processPayment</span><span class=\"mtk1\">(</span><span class=\"mtk12\">JBDidPayData</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Keep a reference to the amount of credits the beneficiary already has.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_credits</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">creditsOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">metadata</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">36</span><span class=\"mtk1\"> &amp;&amp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">bytes4</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">metadata</span><span class=\"mtk1\">[</span><span class=\"mtk7\">32</span><span class=\"mtk1\">:</span><span class=\"mtk7\">36</span><span class=\"mtk1\">]) == </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IJB721Delegate</span><span class=\"mtk1\">).</span><span class=\"mtk12\">interfaceId</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// Don&#39;t mint if not desired.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_dontMint</span><span class=\"mtk1\">) </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// If there are funds leftover, mint the best available with it.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_leftoverAmount</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_leftoverAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_mintBestAvailableTier</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_leftoverAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_expectMintFromExtraFunds</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_leftoverAmount</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Make sure there are no leftover funds after minting if not expected.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_dontOverspend</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">OVERSPENDING</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Increment the leftover amount.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">creditsOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">_leftoverAmount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_credits</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">creditsOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_credits</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">creditsOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>I’ve wrote a coded POC to illustrate this. It uses the same Foundry environment used by the project. Simply copy this function to <code>E2E.t.sol</code> to verify.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testPaymentNotAddedToCreditsOf</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_user</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes20</span><span class=\"mtk1\">(</span><span class=\"mtk11\">keccak256</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;user&#39;</span><span class=\"mtk1\">)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">JBDeployTiered721DelegateData</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">NFTRewardDeployerData</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">JBLaunchProjectData</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">launchProjectData</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) = </span><span class=\"mtk11\">createData</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">projectId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">deployer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">launchProjectFor</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_projectOwner</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">NFTRewardDeployerData</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">launchProjectData</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Get the dataSource</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IJBTiered721Delegate</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_delegate</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IJBTiered721Delegate</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_jbFundingCycleStore</span><span class=\"mtk1\">.</span><span class=\"mtk11\">currentOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">projectId</span><span class=\"mtk1\">).</span><span class=\"mtk11\">dataSource</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">NFTRewardDataSource</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_jbFundingCycleStore</span><span class=\"mtk1\">.</span><span class=\"mtk11\">currentOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">projectId</span><span class=\"mtk1\">).</span><span class=\"mtk11\">dataSource</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_creditBefore</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IJBTiered721Delegate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">NFTRewardDataSource</span><span class=\"mtk1\">).</span><span class=\"mtk11\">creditsOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Project is initiated with 10 different tiers with contributionFee of 10,20,30,40, .... , 100</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Make payment to mint 1 NFT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_payAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_jbETHPaymentTerminal</span><span class=\"mtk1\">.</span><span class=\"mtk12\">pay</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">_payAmount</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">projectId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">100</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_user</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">false</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk8\">&#39;Take my money!&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Minted 1 NFT</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">NFTRewardDataSource</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">), </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Now, we make the payment but supply _dontMint metadata</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_dontMint</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint16</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">empty</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_jbETHPaymentTerminal</span><span class=\"mtk1\">.</span><span class=\"mtk12\">pay</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">_payAmount</span><span class=\"mtk1\">}(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">projectId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">100</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_user</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">false</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk8\">&#39;Take my money!&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">//new bytes(0)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IJB721Delegate</span><span class=\"mtk1\">).</span><span class=\"mtk12\">interfaceId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_dontMint</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">false</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">false</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">empty</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// NFT not minted</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">NFTRewardDataSource</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">), </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Check that credits of user is still the same as before even though we have made the payment</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IJBTiered721Delegate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">NFTRewardDataSource</span><span class=\"mtk1\">).</span><span class=\"mtk11\">creditsOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">),</span><span class=\"mtk12\">_creditBefore</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Foundry</p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Update the <code>creditsOf[]</code> in the <code>if(_dontMint)</code> check.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- if(_dontMint) return;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ if(_dontMint){ creditsOf[_data.beneficiary] += _value; }</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1289367091\">mejango (Juicebox DAO) commented on duplicate issue #157</a>:</strong></p>\n<blockquote>\n<p>mixed feels. <code>_dontMint</code> basically says “Save me gas at all costs.”. I see the argument for value leaking being bad though. will mull over.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1298417807\">drgorillamd (Juicebox DAO) commented on duplicate issue #157</a>:</strong></p>\n<blockquote>\n<p>paying small amounts (under the floor or with <code>dontMint</code>) only to save them to later mint is a bit of a nonsense -> it’s way cheaper to just not pay, save in an eoa then mint within the same tx.</p>\n<p>I have the feeling the severity is based on seeing <code>_credit</code> as a saving account, while it’s rather something to collect leftovers.</p>\n<p>Anyway, we changed it, but not sure of high sev on this one, happy to see others’ point of view.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1303536360\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@drgorillamd @mejango I have to say that I don’t see why someone would use the <code>dontMint</code> flag in the first place. Wasn’t the original intent to use this flag specifically to modify <code>_credit</code> without minting?\nIn the meantime I’ll keep the High label for this one, the <code>dontMint</code> functionality being flawed and leading to a loss of funds. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1304540813\">drgorillamd (Juicebox DAO) commented</a>:</strong></p>\n<blockquote>\n<p>@Picodes <code>nftReward</code> is just an extension plugged into a Jb project -> <code>dontMint</code> is to avoid forcing users of the project who don’t want a nft reward when contributing, i.e. “classic” use of a Jb project.\nThe use case we had in mind was smaller payers, wanting to get the erc20 (or even just donating), without the gas burden of a nft reward (which might, on L1, sometimes be more than the contribution itself).\nDoes that make sense?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1304553910\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Definitely, thanks for the clarification @drgorillamd.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1373365444\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The final decision for this issue was to keep the high severity because of the leak of value and the possibility that some users use the function thinking it will change <code>_credit</code>, despite the fact that it was not the original intent of the code.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1374569372\">mejango (Juicebox DAO) commented</a>:</strong></p>\n<blockquote>\n<p>We ended up adding credits even when <code>_dontMint</code> is true!!<br>\nIt was a last minute design decision, initially we marked the issue as “Disagree with severity” and we were planning on keeping the code unchanged since it didnt pose a risk and was working as designed.<br>\nWe ended up changing the design, but the wardens’ feedback was ultimately helpful!<br></p>\n</blockquote>\n<hr>\n<h2 id=\"h-02-minting-and-redeeming-will-break-for-fully-minted-tiers-with-reserverate--0-and-reserveratemaxreserverate-tokens-burned\" style=\"position:relative;\"><a href=\"#h-02-minting-and-redeeming-will-break-for-fully-minted-tiers-with-reserverate--0-and-reserveratemaxreserverate-tokens-burned\" aria-label=\"h 02 minting and redeeming will break for fully minted tiers with reserverate  0 and reserveratemaxreserverate tokens burned permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/113\">[H-02] Minting and redeeming will break for fully minted tiers with <code>reserveRate != 0</code> and <code>reserveRate</code>/<code>MaxReserveRate</code> tokens burned</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/113\">0x52</a></em></p>\n<p>Minting and redeeming become impossible.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 _numberOfNonReservesMinted = _storedTier.initialQuantity -</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  _storedTier.remainingQuantity -</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  _reserveTokensMinted;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 _numerator = uint256(_numberOfNonReservesMinted * _storedTier.reservedRate);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 _numberReservedTokensMintable = _numerator / JBConstants.MAX_RESERVED_RATE;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if (_numerator - JBConstants.MAX_RESERVED_RATE * _numberReservedTokensMintable &gt; 0)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ++_numberReservedTokensMintable;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">return _numberReservedTokensMintable - _reserveTokensMinted;</span></span></code></pre>\n<p>The lines above are taken from JBTiered721DelegateStore#_numberOfReservedTokensOutstandingFor and used to calculate and return the available number of reserve tokens that can be minted. Since the return statement doesn’t check that _numberReservedTokensMintable >= _reserveTokensMinted, it will revert under those circumstances. The issue is that there are legitimate circumstances in which this becomes false. If a tier is fully minted then all reserve tokens are mintable. When the tier begins to redeem, _numberReservedTokensMintable will fall under _reserveTokensMinted, permanently breaking minting and redeeming. Minting is broken because all mint functions directly call _numberOfReservedTokensOutstandingFor. Redeeming is broken because the redeem callback (JB721Delegate#redeemParams) calls _totalRedemtionWeight which calls _numberOfReservedTokensOutstandingFor.</p>\n<p>Example:</p>\n<p>A tier has a reserveRate of 100 (1/100 tokens reserved) and an initialQuantity of 10000. We assume that the tier has been fully minted, that is, _reserveTokensMinted is 100 and remainingQuantity = 0. Now we begin burning the tokens. Let’s run through the lines above after 100 tokens have been burned (remainingQuantity = 100):</p>\n<p>_numberOfNonReservedMinted = 10000 - 100 - 100 = 9800</p>\n<p>_numerator = 9800 * 100 = 980000</p>\n<p>_numberReservedTokensMintable = 980000 / 10000 = 98</p>\n<p>Since _numberReservedTokensMintable &#x3C; _reserveTokensMinted the line will underflow and revert.</p>\n<p>JBTiered721DelegateStore#_numberOfReservedTokensOutstandingFor will now revert every time it is called. This affects all minting functions as well as totalRedemptionWeight. Since those functions now revert when called, it is impossible to mint or redeem anymore NFTs.</p>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add a check before returning:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">+   if (_reserveTokensMinted &gt; _numberReservedTokensMintable) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+       return 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+   }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    return _numberReservedTokensMintable - _reserveTokensMinted;</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/113\">mejango (Juicebox DAO) confirmed</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/113#issuecomment-1288218772\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>The root cause seems to be that there is no tracking of reserve tokens burnt.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/113#issuecomment-1289371161\">mejango (Juicebox DAO) commented</a>:</strong></p>\n<blockquote>\n<p>@Trust fair. this would require extra storage to track which tokenIDs were minted as reserves. could be a nice-to-have, and also used to prevent this issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/113#issuecomment-1303719893\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Without tracking the number of burnt tokens, the mitigation suggested by the warden avoids the underflow so solves the main issue, which is that minting and redeeming break</p>\n<p>Accounting for <code>numberOfBurnedReservesFor</code> may help fixing the math but the underflow would still be possible if only non reserve tokens are burned</p>\n</blockquote>\n<hr>\n<h2 id=\"h-03-outstanding-reserved-tokens-are-incorrectly-counted-in-total-redemption-weight\" style=\"position:relative;\"><a href=\"#h-03-outstanding-reserved-tokens-are-incorrectly-counted-in-total-redemption-weight\" aria-label=\"h 03 outstanding reserved tokens are incorrectly counted in total redemption weight permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/129\">[H-03] Outstanding reserved tokens are incorrectly counted in total redemption weight</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/129\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/194\">Trust</a>, <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/43\">ladboy233</a>, and <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/28\">cccz</a></em></p>\n<p>The amounts redeemed in overflow redemption can be calculated incorrectly due to incorrect accounting of the outstanding number of reserved tokens.</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Project contributors are allowed to redeem their NFT tokens for a portion of the overflow (excessive funded amounts). The amount a contributor receives is calculated as <a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/abstract/JB721Delegate.sol#L135-L142\">overflow * (user’s redemption rate / total redemption weight)</a>, where user’s redemption weight is <a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L532-L539\">the total contribution floor of all their NFTs</a> and total redemption weight is <a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L563-L566\">the total contribution floor of all minted NFTs</a>. Since the total redemption weight is the sum of individual contributor redemption weights, the amount they can redeem is proportional to their contribution.</p>\n<p>However, the total redemption weight calculation incorrectly accounts outstanding reserved tokens (<a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L563-L566\">JBTiered721DelegateStore.sol#L563-L566</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Add the tier&#39;s contribution floor multiplied by the quantity minted.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">weight</span><span class=\"mtk1\"> +=</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  (</span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">contributionFloor</span><span class=\"mtk1\"> *</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">initialQuantity</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">remainingQuantity</span><span class=\"mtk1\">)) +</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_numberOfReservedTokensOutstandingFor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_i</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Specifically, the <em>number</em> of reserved tokens is added to the <em>weight</em> of minted tokens. This disrupts the redemption amount calculation formula since the total redemption weight is in fact not the sum of individual contributor redemption weights.</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Two options can be seen:</p>\n<ol>\n<li>\n<p>if the outstanding number of reserved tokens is considered minted (which seems to be so, judging by <a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L1058-L1063\">this logic</a>) then it needs to be added to the quantity, i.e.:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/JBTiered721DelegateStore.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/JBTiered721DelegateStore.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -562,8 +562,7 @@ contract JBTiered721DelegateStore is IJBTiered721DelegateStore {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      // Add the tier&#39;s contribution floor multiplied by the quantity minted.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      weight +=</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (_storedTier.contributionFloor *</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-          (_storedTier.initialQuantity - _storedTier.remainingQuantity)) +</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        _numberOfReservedTokensOutstandingFor(_nft, _i, _storedTier);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+          (_storedTier.initialQuantity - _storedTier.remainingQuantity +</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+           _numberOfReservedTokensOutstandingFor(_nft, _i, _storedTier)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      unchecked {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ++_i;</span></span></span></code></pre>\n</li>\n<li>if it’s not considered minted, then it shouldn’t be counted at all.</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/129\">drgorillamd (Juicebox DAO) confirmed</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/129#issuecomment-1303554688\">Picodes (judge) upgraded severity</a>:</strong></p>\n<blockquote>\n<p>As the redeemed amounts are at stake, upgrading to High</p>\n</blockquote>\n<hr>\n<h2 id=\"h-04-reserved-token-rounding-can-be-abused-to-honeypot-and-steal-users-funds\" style=\"position:relative;\"><a href=\"#h-04-reserved-token-rounding-can-be-abused-to-honeypot-and-steal-users-funds\" aria-label=\"h 04 reserved token rounding can be abused to honeypot and steal users funds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/191\">[H-04] Reserved token rounding can be abused to honeypot and steal user’s funds</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/191\">Trust</a></em></p>\n<p>When the project wishes to mint reserved tokens, they call mintReservesFor which allows minting up to the amount calculated by DelegateStore’s _numberOfReservedTokensOutstandingFor. The function has this line:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">// No token minted yet? Round up to 1.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if (_storedTier.initialQuantity == _storedTier.remainingQuantity) return 1;</span></span></code></pre>\n<p>In order to ease calculations, if reserve rate is not 0 and no token has been minted yet, the function allows a single reserve token to be printed. It turns out that this introduces a very significant risk for users. Projects can launch with several tierIDs of similar contribution size, and reserve rate as low as 1%. Once a victim contributes to the project, it can instantly mint a single reserve token of all the rest of the tiers. They can then redeem the reserve token and receive most of the user’s contribution, without putting in any money of their own.</p>\n<p>Since this attack does not require setting “dangerous” flags like lockReservedTokenChanges or lockManualMintingChanges, it represents a very considerable threat to unsuspecting users. Note that the attack circumvents user voting or any funding cycle changes which leave time for victim to withdraw their funds. </p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Honeypot project can instantly take most of first user’s contribution.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>New project launches, with 10 tiers, of contributions 1000, 1050, 1100, …</p>\n<p>Reserve rate is set to 1% and redemption rate = 100%</p>\n<p>User contributes 1100 and gets a Tier 3 NFT reward. </p>\n<p>Project immediately mints Tier 1,  Tier 2, Tier 4,… Tier 10 reserve tokens, and redeems all the reserve tokens.</p>\n<p>Project’s total weight = 12250</p>\n<p>Reserve token weight = 11150</p>\n<p>Malicious project cashes 1100 (overflow) * 11150 / 12250 = ~1001 tokens.</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Don’t round up outstanding reserve tokens as it represents too much of a threat.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/191\">mejango (Juicebox DAO) acknowledged</a></strong>  </p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/191#issuecomment-1305972852\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The finding is valid and clearly demonstrates how project owners could bypass the flags and safeguards implemented to trick users into thinking that they’ll be safe.</p>\n<p>However, it falls within the “centralization risk” category, and within reports showing “a unique attack path which users were not told upfront about” (see <a href=\"https://github.com/code-423n4/org/issues/54\">this issue</a>). So I believe Medium severity to be appropriate.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/191#issuecomment-1306080547\">Trust (warden) commented</a>:</strong></p>\n<blockquote>\n<p>I would just like to state that the way I look at it, this is not a centralization risk, as the counterparty which can perform the exploit is some listed project on Juicebox, rather than Juicebox itself. It is very similar to a high severity <a href=\"https://github.com/code-423n4/2022-05-enso-findings/issues/204\">finding </a> in Enso Finance, where a strategy creator can rug funds sent to their strategy. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/191#issuecomment-1321944954\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Kept it high risk out of coherence with <a href=\"https://github.com/code-423n4/2022-05-enso-findings/issues/204\">https://github.com/code-423n4/2022-05-enso-findings/issues/204</a>, and because this attack would bypass all the safeguards implemented by Juicebox</p>\n</blockquote>\n<hr>\n<h2 id=\"h-05-redemption-weight-of-tiered-nfts-miscalculates-making-users-redeem-incorrect-amounts---bug-1\" style=\"position:relative;\"><a href=\"#h-05-redemption-weight-of-tiered-nfts-miscalculates-making-users-redeem-incorrect-amounts---bug-1\" aria-label=\"h 05 redemption weight of tiered nfts miscalculates making users redeem incorrect amounts   bug 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/193\">[H-05] Redemption weight of tiered NFTs miscalculates, making users redeem incorrect amounts - Bug #1</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/193\">Trust</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/171\">Aymen0909</a> and <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/105\">0x52</a></em></p>\n<p>Redemption weight is a concept used in Juicebox to determine investor’s eligible percentage of the non-locked funds. In redeemParams, JB721Delegate calculates user’s share using:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 _redemptionWeight = _redemptionWeightOf(_decodedTokenIds);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 _total = _totalRedemptionWeight();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 _base = PRBMath.mulDiv(_data.overflow, _redemptionWeight, _total);</span></span></code></pre>\n<p>_totalRedemptionWeight eventually is implemented in DelegateStore:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">for (uint256 _i; _i &lt; _maxTierId; ) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // Keep a reference to the stored tier.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  _storedTier = _storedTierOf[_nft][_i + 1];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // Add the tier&#39;s contribution floor multiplied by the quantity minted.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  weight +=</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    (_storedTier.contributionFloor *</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      (_storedTier.initialQuantity - _storedTier.remainingQuantity)) +</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _numberOfReservedTokensOutstandingFor(_nft, _i, _storedTier);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  unchecked {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ++_i;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>If we pay attention to _numberOfReservedTokensOutstandingFor() call, we can see it is called with tierId = i, yet storedTier of i+1. It is definitely not the intention as for example, recordMintReservesFor() uses the function correctly:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function recordMintReservesFor(uint256 _tierId, uint256 _count)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  external</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  override</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  returns (uint256[] memory tokenIds)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // Get a reference to the tier.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  JBStored721Tier storage _storedTier = _storedTierOf[msg.sender][_tierId];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // Get a reference to the number of reserved tokens mintable for the tier.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  uint256 _numberOfReservedTokensOutstanding = _numberOfReservedTokensOutstandingFor(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    msg.sender,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _tierId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _storedTier</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span></code></pre>\n<p>The impact of this bug is incorrect calculation of the weight of user’s contributions. The <code>initialQuantity</code> and <code>remainingQuantity</code> values are taken from the correct tier, but <code>_reserveTokensMinted</code> minted is taken from previous tier. In the case where <code>_reserveTokensMinted</code> is smaller than correct value, for example tierID=0 which is empty, the outstanding value returned is larger, meaning weight is larger and redemptions are worth less. In the opposite case, where lower tierID has higher <code>_reserveTokensMinted</code>, the redemptions will receive <em>more</em> payout than they should.</p>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Users of projects can receive less or more funds than they are eligible for when redeeming NFT rewards.</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>1. Suppose we have a project with 2 tiers, reserve ratio = 50%, redemption ratio = 100%:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Tier</td>\n<td>Contribution</td>\n<td>Initial quantity</td>\n<td>Remaining quantity</td>\n<td>Reserves minted</td>\n<td>Reserves outstanding</td>\n</tr>\n<tr>\n<td>Tier 1</td>\n<td>50</td>\n<td>10</td>\n<td>3</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>Tier 2</td>\n<td>100</td>\n<td>30</td>\n<td>2</td>\n<td>8</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>When calculating totalRedemptionWeight(), the correct result is</p>\n<p>50 * (10 - 3) + 2 + 100 * (30-2) + 2 = 3154</p>\n<p>The wrong result will be:</p>\n<p>50 * (10 -3) + <strong>4</strong> + 100 * (30-2) + <strong>13</strong>  = 3167</p>\n<p>Therefore, when users redeem NFT rewards, they will get less value than they are eligible for. Note that totalRedemptionWeight() has an <em>additional</em> bug where the reserve amount is not multiplied by the contribution, which is discussed in another submission. If it would be calculated correctly, the correct weight would be 3450.</p>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Change the calculation to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">_numberOfReservedTokensOutstandingFor(_nft, _i+1, _storedTier);</span></span></code></pre>\n<h3 id=\"additional-discussion\" style=\"position:relative;\"><a href=\"#additional-discussion\" aria-label=\"additional discussion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional discussion</h3>\n<p>Likelihood of impact is very high, because the conditions will arise naturally (different tiers, different reserve minted count for each tier, user calls redeem).\nSeverity of impact is high because users receive less or more tokens than they are eligible for.</p>\n<p>Initially I thought this bug could allow attacker to steal entire unlocked project funds, using a mint/burn loop. However, this would not be profitable because their calculated share of the funds would always be at most what they put in, because reserve tokens are printed out of thin air.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/193\">mejango (Juicebox DAO) confirmed</a></strong> </p>\n<hr>\n<h1 id=\"medium-risk-findings-8\" style=\"position:relative;\"><a href=\"#medium-risk-findings-8\" aria-label=\"medium risk findings 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (8)</h1>\n<h2 id=\"m-01-multiples-initializations-of-jbtiered721delegate\" style=\"position:relative;\"><a href=\"#m-01-multiples-initializations-of-jbtiered721delegate\" aria-label=\"m 01 multiples initializations of jbtiered721delegate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/24\">[M-01] Multiples initializations of <code>JBTiered721Delegate</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/24\">0x1f8b</a></em></p>\n<p>The <code>initialize</code> method of the <code>JBTiered721Delegate</code> contract has as a flag that the <code>_store</code> argument is different from <code>address(0)</code>, however, it can be initialized by anyone with this value to allow the project to continue with its usual initialization, the attacker could have interfered and modified the corresponding values to carry out an attack.</p>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Looking at the method below, we highlight in green the parts that need to be initialized to prevent a call to <code>store=address(0)</code> from failing.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  function initialize(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    uint256 _projectId,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    IJBDirectory _directory,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    string memory _name,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    string memory _symbol,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    IJBFundingCycleStore _fundingCycleStore,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    string memory _baseUri,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    IJBTokenUriResolver _tokenUriResolver,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    string memory _contractUri,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    JB721PricingParams memory _pricing,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    IJBTiered721DelegateStore _store,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    JBTiered721Flags memory _flags</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ) public override {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // Make the original un-initializable.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    require(address(this) != codeOrigin);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // Stop re-initialization.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    require(address(store) == address(0));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // Initialize the sub class.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    JB721Delegate._initialize(_projectId, _directory, _name, _symbol);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    fundingCycleStore = _fundingCycleStore;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    store = _store;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    pricingCurrency = _pricing.currency;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    pricingDecimals = _pricing.decimals;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    prices = _pricing.prices;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // Store the base URI if provided.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+   if (bytes(_baseUri).length != 0) _store.recordSetBaseUri(_baseUri);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // Set the contract URI if provided.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+   if (bytes(_contractUri).length != 0) _store.recordSetContractUri(_contractUri);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // Set the token URI resolver if provided.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+   if (_tokenUriResolver != IJBTokenUriResolver(address(0)))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      _store.recordSetTokenUriResolver(_tokenUriResolver);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // Record adding the provided tiers.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+   if (_pricing.tiers.length &gt; 0) _store.recordAddTiers(_pricing.tiers);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // Set the flags if needed.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    if (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+     _flags.lockReservedTokenChanges ||</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+     _flags.lockVotingUnitChanges ||</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+     _flags.lockManualMintingChanges ||</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+     _flags.pausable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) _store.recordFlags(_flags);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    // Transfer ownership to the initializer.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    _transferOwnership(msg.sender);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<p>So if the attacker initializes the contract as follows:</p>\n<ul>\n<li><code>_baseUri</code> = \"\"</li>\n<li><code>_contractUri</code> = \"\"</li>\n<li><code>_tokenUriResolver</code> = <code>address(0)</code></li>\n<li><code>_pricing.tiers</code> = []</li>\n<li><code>_flags</code> = all <code>false</code></li>\n</ul>\n<p>The contract will be initialized and transfered the ownership to <code>msg.sender</code>.</p>\n<p>After that, the owner can call <code>didPay</code> with the the fake data provided in <a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L221\">JBTiered721Delegate.sol:221</a> and increase <code>creditsOf</code> of anyone <a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L587\">JBTiered721Delegate.sol:587</a> without touching any <code>store</code> call.</p>\n<ul>\n<li>The attacker can transfer the ownership to the contract, and the project will be able to initialize the contract again without notice.</li>\n</ul>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Ensure that the <code>store</code> address is not empty.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/24#issuecomment-1304542277\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I believe the finding to be valid if:</p>\n<ul>\n<li>the attacker initialize the contract with <code>_store == address(0)</code> and the parameters as above so it does not revert in the normal process</li>\n<li>the attacker calls initialize to transfer the ownership to himself and modify the storage so he can then call <code>didPay</code></li>\n<li>the attacker calls <code>didPay</code> to manipulate <code>creditsOf</code></li>\n<li>finally the attacker calls <code>initialize</code> to set <code>_store</code> to non zero and at this point it is like if nothing happened although <code>creditsOf</code> has been manipulated</li>\n</ul>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/24#issuecomment-1304544699\">drgorillamd (Juicebox DAO) commented</a>:</strong></p>\n<blockquote>\n<p>Hmm, this would require a spoof directory too (to bypass the isTerminalOf check) -> I’d mitigate with a <code>check msg.value==data.value</code> in the abstract delegate contract, ie if someone wants to do this, actually paying the credit is needed</p>\n</blockquote>\n<blockquote>\n<p>Def nice finding, ggwp!</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/24#issuecomment-1304552713\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I do agree that Med is more appropriate as it falls within centralization risks as ultimately only the deployer could exploit this.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-the-tier-setting-parameter-are-unsafely-downcasted-from-type-uint256-to-type-uint80--uint48--uint40--uint16\" style=\"position:relative;\"><a href=\"#m-02-the-tier-setting-parameter-are-unsafely-downcasted-from-type-uint256-to-type-uint80--uint48--uint40--uint16\" aria-label=\"m 02 the tier setting parameter are unsafely downcasted from type uint256 to type uint80  uint48  uint40  uint16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/31\">[M-02] The tier setting parameter are unsafely downcasted from type uint256 to type uint80 / uint48 / uint40 / uint16</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/31\">ladboy233</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/225\">brgltd</a></em></p>\n<p><a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L240\">https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L240</a><br>\n<a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L628\">https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L628</a><br>\n<a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L689\">https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L689</a></p>\n<p>The tier setting parameter are unsafely downcasted from uint256 to uint80 / uint48 / uint16</p>\n<p>the tier is setted by owner is crucial because the parameter affect how nft is minted.</p>\n<p>the callstack is</p>\n<p><code>JBTiered721Delegate.sol#initialize</code> -> <code>Store#recordAddTiers</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">recordAddTiers</span><span class=\"mtk1\">(</span><span class=\"mtk12\">JB721TierParams</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tiersToAdd</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>what does the struct <code>JB721TierParams</code> look like? all parameter in <code>JB721TierParams</code> is uint256 type</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk12\">JB721TierParams</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contributionFloor</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lockedUntil</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">initialQuantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">votingUnits</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reservedRate</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reservedTokenBeneficiary</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">encodedIPFSUri</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">allowManualMint</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">shouldUseBeneficiaryAsDefault</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>however in side the function</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Record adding the provided tiers.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_pricing</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tiers</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">_store</span><span class=\"mtk1\">.</span><span class=\"mtk11\">recordAddTiers</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pricing</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tiers</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>all uint256 parameter are downcasted.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Add the tier with the iterative ID.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_storedTierOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_tierId</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">JBStored721Tier</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contributionFloor:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint80</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tierToAdd</span><span class=\"mtk1\">.</span><span class=\"mtk12\">contributionFloor</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">lockedUntil:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint48</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tierToAdd</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lockedUntil</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">remainingQuantity:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint40</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tierToAdd</span><span class=\"mtk1\">.</span><span class=\"mtk12\">initialQuantity</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">initialQuantity:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint40</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tierToAdd</span><span class=\"mtk1\">.</span><span class=\"mtk12\">initialQuantity</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">votingUnits:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint16</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tierToAdd</span><span class=\"mtk1\">.</span><span class=\"mtk12\">votingUnits</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">reservedRate:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint16</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tierToAdd</span><span class=\"mtk1\">.</span><span class=\"mtk12\">reservedRate</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">allowManualMint:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tierToAdd</span><span class=\"mtk1\">.</span><span class=\"mtk12\">allowManualMint</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">});</span></span></span></code></pre>\n<p>uint256 <code>contributionFloor</code> is downcasted to uint80,</p>\n<p>uint256 <code>lockedUntil</code> is downcasted to uint48</p>\n<p>uint256 <code>initialQuantity</code> and <code>initialQuantity</code> are downcasted to uint40</p>\n<p>uint256 <code>votingUnits</code> and uint256 <code>reservedRate</code> are downcasted to uint16</p>\n<p>this means the original setting is greatly truncated.</p>\n<p>For example, the owner wants to set the initial supply to a number larger than uint40, but the supply is truncated to type(uint40).max</p>\n<p>The owner wants to set the contribution floor price above uint80,but the contribution floor price is truncated to type(uint80).max, the user may underpay the price and get the NFT price at a discount.</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>We can add POC</p>\n<p><a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/forge-test/NFTReward_Unit.t.sol#L1689\">https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/forge-test/NFTReward_Unit.t.sol#L1689</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testJBTieredNFTRewardDelegate_mintFor_mintArrayOfTiers_downcast_POC</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nbTiers</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mockCall</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">mockJBProjects</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IERC721</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ownerOf</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">projectId</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">owner</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">JB721TierParams</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tiers</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">JB721TierParams</span><span class=\"mtk1\">[](</span><span class=\"mtk12\">nbTiers</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint16</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tiersToMint</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">uint16</span><span class=\"mtk1\">[](</span><span class=\"mtk12\">nbTiers</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Temp tiers, will get overwritten later (pass the constructor check)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">originalFloorPrice</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10000000000000000000000000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">nbTiers</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_tiers</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">JB721TierParams</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">contributionFloor:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">originalFloorPrice</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">lockedUntil:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint48</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">initialQuantity:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">20</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">votingUnits:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint16</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">reservedRate:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint16</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">reservedTokenBeneficiary:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserveBeneficiary</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">encodedIPFSUri:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenUris</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">],</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">allowManualMint:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">, </span><span class=\"mtk3\">// Allow this type of mint</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">shouldUseBeneficiaryAsDefault:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_tiersToMint</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">uint16</span><span class=\"mtk1\">(</span><span class=\"mtk12\">i</span><span class=\"mtk1\">)+</span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_tiersToMint</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_tiersToMint</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">uint16</span><span class=\"mtk1\">(</span><span class=\"mtk12\">i</span><span class=\"mtk1\">)+</span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ForTest_JBTiered721DelegateStore</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_ForTest_store</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ForTest_JBTiered721DelegateStore</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ForTest_JBTiered721Delegate</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_delegate</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">ForTest_JBTiered721Delegate</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">projectId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">IJBDirectory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mockJBDirectory</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">name</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">symbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">IJBFundingCycleStore</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mockJBFundingCycleStore</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">baseUri</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">IJBTokenUriResolver</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mockTokenUriResolver</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">contractUri</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_tiers</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">IJBTiered721DelegateStore</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_ForTest_store</span><span class=\"mtk1\">)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">JBTiered721Flags</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">lockReservedTokenChanges:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">lockVotingUnitChanges:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">lockManualMintingChanges:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">pausable:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_delegate</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferOwnership</span><span class=\"mtk1\">(</span><span class=\"mtk12\">owner</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">floorPrice</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_delegate</span><span class=\"mtk1\">.</span><span class=\"mtk11\">test_store</span><span class=\"mtk1\">().</span><span class=\"mtk11\">tier</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_delegate</span><span class=\"mtk1\">), </span><span class=\"mtk7\">1</span><span class=\"mtk1\">).</span><span class=\"mtk12\">contributionFloor</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;original floor price&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">originalFloorPrice</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;truncated floor price&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">floorPrice</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>note, our initial contribution floor price setting is</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">originalFloorPrice</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10000000000000000000000000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">nbTiers</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">_tiers</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">JB721TierParams</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">contributionFloor:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">originalFloorPrice</span><span class=\"mtk1\">,</span></span></span></code></pre>\n<p>then we run our test</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">forge</span><span class=\"mtk1\"> </span><span class=\"mtk12\">test</span><span class=\"mtk1\"> -</span><span class=\"mtk12\">vv</span><span class=\"mtk1\"> --</span><span class=\"mtk12\">match</span><span class=\"mtk1\"> </span><span class=\"mtk12\">testJBTieredNFTRewardDelegate_mintFor_mintArrayOfTiers_downcast_POC</span></span></span></code></pre>\n<p>the result is</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[</span><span class=\"mtk12\">PASS</span><span class=\"mtk1\">] </span><span class=\"mtk11\">testJBTieredNFTRewardDelegate_mintFor_mintArrayOfTiers_downcast_POC</span><span class=\"mtk1\">() (</span><span class=\"mtk12\">gas</span><span class=\"mtk1\">: </span><span class=\"mtk7\">7601212</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Logs:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  original floor price</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  10000000000000000000000000000000000000000000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  truncated floor price</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  863278115882885135204352</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">Test result: ok. 1 passed; 0 failed; finished in 10.43ms</span></span></span></code></pre>\n<p>clearly the floor price is unsafed downcasted and truncated.</p>\n<h3 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Foundry, Manual Review</p>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>We recommend the project either change the data type in the struct</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk12\">JB721TierParams</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contributionFloor</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lockedUntil</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">initialQuantity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">votingUnits</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reservedRate</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reservedTokenBeneficiary</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">encodedIPFSUri</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">allowManualMint</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">shouldUseBeneficiaryAsDefault</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>or safely downcast the number to make sure the number is not shortened unexpectedly.</p>\n<p><a href=\"https://docs.openzeppelin.com/contracts/3.x/api/utils#SafeCast\">https://docs.openzeppelin.com/contracts/3.x/api/utils#SafeCast</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/31#issuecomment-1288886867\">drgorillamd (Juicebox DAO) commented</a>:</strong> </p>\n<blockquote>\n<p>Thank you for the real poc:)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/31#issuecomment-1303295686\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The warden showed how due to casting the original parameters could be truncated</p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-changing-default-reserved-token-beneficiary-may-result-in-wrong-beneficiary-for-tier\" style=\"position:relative;\"><a href=\"#m-03-changing-default-reserved-token-beneficiary-may-result-in-wrong-beneficiary-for-tier\" aria-label=\"m 03 changing default reserved token beneficiary may result in wrong beneficiary for tier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/63\">[M-03] Changing default reserved token beneficiary may result in wrong beneficiary for tier</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/63\">Lambda</a></em></p>\n<p>When the <code>reservedTokenBeneficiary</code> of a tier is equal to <code>defaultReservedTokenBeneficiaryOf[msg.sender]</code>, it is not explicitly set for this tier. This generally works well because in the function <code>reservedTokenBeneficiaryOf(address _nft, uint256 _tierId)</code>, <code>defaultReservedTokenBeneficiaryOf[_nft]</code> is used as a backup when <code>_reservedTokenBeneficiaryOf[_nft][_tierId]</code> is not set. However, it will lead to the wrong beneficiary when <code>defaultReservedTokenBeneficiaryOf[msg.sender]</code> is later changed, as this new beneficiary will be used for the tier, which is not the intended one.</p>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<p><code>defaultReservedTokenBeneficiaryOf[address(delegate)]</code> is originally set to <code>address(Bob)</code> when the following happens:</p>\n<ol>\n<li>A new tier 42 is added with <code>_tierToAdd.reservedTokenBeneficiary = address(Bob)</code>. Because this is equal to <code>defaultReservedTokenBeneficiaryOf[address(delegate)]</code>, <code>_reservedTokenBeneficiaryOf[msg.sender][_tierId]</code> is not set.</li>\n<li>The owner calls <code>setDefaultReservedTokenBeneficiary</code> to change the default beneficiary (i.e., the value <code>defaultReservedTokenBeneficiaryOf[address(delegate)]</code>) to <code>address(Alice)</code>.</li>\n<li>Now, every call to <code>reservedTokenBeneficiaryOf(address(delegate), 42)</code> will return <code>address(Alice)</code>, meaning she will get these reserved tokens. This is of course wrong, the tier was explicitly created with Bob as the beneficiary.</li>\n</ol>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Also set <code>_reservedTokenBeneficiaryOf[msg.sender][_tierId]</code> when it is equal to the current default beneficiary.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/63\">mejango (Juicebox DAO) confirmed</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/63#issuecomment-1288870514\">drgorillamd (Juicebox DAO) commented</a>:</strong></p>\n<blockquote>\n<p>Edge case but valid imo! Nice finding!</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/63#issuecomment-1289361130\">mejango (Juicebox DAO) commented</a>:</strong></p>\n<blockquote>\n<p>yep. valid imo too!</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-iterations-over-all-tiers-in-recordmintbestavailabletier-can-render-system-unusable\" style=\"position:relative;\"><a href=\"#m-04-iterations-over-all-tiers-in-recordmintbestavailabletier-can-render-system-unusable\" aria-label=\"m 04 iterations over all tiers in recordmintbestavailabletier can render system unusable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/64\">[M-04] Iterations over all tiers in recordMintBestAvailableTier can render system unusable</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/64\">Lambda</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/226\">brgltd</a></em></p>\n<p><code>JBTiered721DelegateStore.recordMintBestAvailableTier</code> potentially iterates over all tiers to find the one with the highest contribution floor that is lower than <code>_amount</code>. When there are many tiers, this loop can always run out of gas, which will cause some transactions (the ones that have a high <code>_leftoverAmount</code> within <code>_processPayment</code>) to always revert. The (implicit) limit for the number of tiers is 2^16 - 1, so it is possible that this happens in practice.</p>\n<h3 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof Of Concept</h3>\n<p>Let’s say that 1,000 tiers are registered for a project. Small payments without a leftover amount or a small amount will be succesfully processed by <code>_processPayment</code>, because <code>_mintBestAvailableTier</code> is either not called or it is called with a small amount, meaning that <code>recordMintBestAvailableTier</code> will exit the loop early (when it is called with a small amount). However, if a payment with a large leftover amount (let’s say greater than the highest contribution floor) is processed, it is necessary to iterate over all tiers, which will use too much gas and cause the processing to revert.</p>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use a binary search (which requires some architectural changes) for determining the best available tier. Then, the gas usage grows logarithmically (instead of linear with the current design) with the number of tiers, meaning that it would only be ~16 times higher for 65535 tiers as for 2 tiers.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/226#issuecomment-1288627984\">drgorillamd (Juicebox DAO) commented on duplicate issue #226</a>:</strong></p>\n<blockquote>\n<p>Disagree with:</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>Over time maxTierIdOf for a nft address gets large due to several increments</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>There is no several increments outside of adding new tiers by the project owner (this is similar to adding new token in an erc1155 - there is no such check in, for instance, OZ <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/ERC1155.sol\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/ERC1155.sol</a>), this is a project owner choice, not faulty logic.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/226#issuecomment-1307478020\">Picodes (judge) commented on duplicate issue #226</a>:</strong></p>\n<blockquote>\n<p>User funds could be at stake as <code>redeemParams</code> would revert because of the for loop in <code>totalRedemptionWeight</code>. A limit value would be indeed a good safeguard.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-nft-not-minted-when-contributed-via-a-supported-payment-terminal\" style=\"position:relative;\"><a href=\"#m-05-nft-not-minted-when-contributed-via-a-supported-payment-terminal\" aria-label=\"m 05 nft not minted when contributed via a supported payment terminal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/124\">[M-05] NFT not minted when contributed via a supported payment terminal</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/124\">Jeiwan</a>, also found by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/83\">cccz</a></em></p>\n<p>A contributor won’t get an NFT they’re eligible for if the payment is made through a payment terminal that’s supported by the project but not by the NFT delegate.</p>\n<h3 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>A Juicebox project can use multiple <a href=\"https://info.juicebox.money/dev/learn/glossary/payment-terminal\">payment terminals</a> to receive contributions (<a href=\"https://github.com/jbx-protocol/juice-contracts-v3/blob/main/contracts/JBController.sol#L441-L442\">JBController.sol#L441-L442</a>).  Payment terminals are single token payment terminals (<a href=\"https://github.com/jbx-protocol/juice-contracts-v3/blob/main/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L310\">JBPayoutRedemptionPaymentTerminal.sol#L310</a>) that support only one currency (<a href=\"https://github.com/jbx-protocol/juice-contracts-v3/blob/main/contracts/abstract/JBSingleTokenPaymentTerminal.sol#L124-L132\">JBSingleTokenPaymentTerminal.sol#L124-L132</a>). Since projects can have multiple terminals, they can receive payments in multiple currencies.</p>\n<p>However, the NFT delegate supports only one currency (<a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L225\">JBTiered721Delegate.sol#L225</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initialize</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_projectId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">IJBDirectory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_directory</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_symbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">IJBFundingCycleStore</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_fundingCycleStore</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_baseUri</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">IJBTokenUriResolver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenUriResolver</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_contractUri</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">JB721PricingParams</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_pricing</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">IJBTiered721DelegateStore</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_store</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">JBTiered721Flags</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_flags</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Make the original un-initializable.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">) != </span><span class=\"mtk12\">codeOrigin</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Stop re-initialization.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">store</span><span class=\"mtk1\">) == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Initialize the sub class.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">JB721Delegate</span><span class=\"mtk1\">.</span><span class=\"mtk11\">_initialize</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_projectId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_directory</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_symbol</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">fundingCycleStore</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_fundingCycleStore</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">store</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_store</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">pricingCurrency</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_pricing</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currency</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// @audit only one currency is supported</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">pricingDecimals</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_pricing</span><span class=\"mtk1\">.</span><span class=\"mtk12\">decimals</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">prices</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_pricing</span><span class=\"mtk1\">.</span><span class=\"mtk12\">prices</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>When a payment is made in a currency that’s supported by the project (via one of its terminals) but not by the NFT delegate, there’s an attempt to convert the currency to a supported one (<a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L527-L534\">JBTiered721Delegate.sol#L527-L534</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currency</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">pricingCurrency</span><span class=\"mtk1\">) </span><span class=\"mtk12\">_value</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">prices</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">IJBPrices</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">_value</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">PRBMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mulDiv</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk12\">pricingDecimals</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">prices</span><span class=\"mtk1\">.</span><span class=\"mtk11\">priceFor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currency</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pricingCurrency</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">.</span><span class=\"mtk12\">decimals</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>However, since <code>prices</code> is optional (it can be set to the zero address, as seen from the snippet), the conversion step can be skipped. When this happens, the contributor gets no NFT due to the early <code>return</code> even though the amount of their contribution might still be eligible for a tiered NFT.</p>\n<h3 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Short term, consider reverting when a different currency is used and <code>prices</code> is not set. Long term, consider supporting multiple currencies in the NFT delegate.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/124\">drgorillamd (Juicebox DAO) disputed</a></strong></p>\n<blockquote>\n<p>This is poor project management from the project owner (not adding the appropriate price feed), not a vulnerability</p>\n<p>And there is no revert here as to not freeze the Juicebox project (NFT reward is an add-on, there is a full project running behind)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/124#issuecomment-1305939427\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>As this finding:</p>\n<ul>\n<li>would lead to a leak of value</li>\n<li>is conditional on the project owner’s mistake (that seems not so unlikely as they may think that one currency is enough and that they don’t need to set <code>prices</code>)</li>\n<li>but ultimately lead to a loss of funds for users</li>\n</ul>\n<p> I believe Medium severity to be appropriate</p>\n</blockquote>\n<hr>\n<h2 id=\"m-06-beneficiary-credit-balance-can-unwillingly-be-used-to-mint-low-tier-nft-\" style=\"position:relative;\"><a href=\"#m-06-beneficiary-credit-balance-can-unwillingly-be-used-to-mint-low-tier-nft-\" aria-label=\"m 06 beneficiary credit balance can unwillingly be used to mint low tier nft  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/160\">[M-06] Beneficiary credit balance can unwillingly be used to mint low tier NFT </a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/160\">minhquanym</a></em></p>\n<p>In the function <code>_processPayment()</code>, it will use provided <code>JBDidPayData</code> from <code>JBPaymentTerminal</code> to mint to the beneficiary. The <code>_value</code> from <code>JBDidPayData</code> will be sum up with previous <code>_credits</code> balance of beneficiary. There are 2 cases that beneficiary credit balance is updated in previous payment:</p>\n<ol>\n<li>The payment received does not meet a minting threshold or is in excess of the minted tiers, the leftover amount will be stored as credit for future minting.</li>\n<li>Clients may want to accumulate to mint higher tier NFT, they might specify that the previous payment should not mint anything. (Currently it’s incorrectly implemented in case <code>_dontMint=true</code>, but sponsor confirmed that it’s a bug)</li>\n</ol>\n<p>In both cases, an attacker can pay a small amount (just enough to mint lowest tier NFT) and specify the victim to be the beneficiary. Function <code>__processPayment()</code> will use credit balance of beneficiary from previous payment to mint low-value tier.</p>\n<p>For example, there are 2 tiers</p>\n<ol>\n<li>Tier A: mintingThreshold = 20 ETH, votingUnits = 100</li>\n<li>Tier B: mintingThreshold = 10 ETH, votingUnits = 10</li>\n</ol>\n<p>Obviously tier A is much more better than tier B in term of voting power, so Alice (the victim) might want to accumulate her credit to mint tier A.</p>\n<p>Assume current credit balance <code>creditsOf[Alice] = 19 ETH</code>. Now Bob (the attacker) can pay <code>1 ETH</code> and specify Alice as beneficiary and mint <code>2</code> Tier B NFT. Alice will have to receive <code>2</code> Tier B NFT with just <code>20 voting power</code> instead of <code>100 voting power</code> for a Tier A NFT.</p>\n<p>Since these NFTs can be used in a governance system, it may create much higher impact if this governance is used to make important decision. E.g: minting new tokens, transfering funds of community.</p>\n<h3 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Function <code>didPay()</code> only check that the caller is a terminal of the project</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">didPay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">JBDidPayData</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Make sure the caller is a terminal of the project, and the call is being made on behalf of an interaction with the correct project.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> ||</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      !</span><span class=\"mtk12\">directory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isTerminalOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">projectId</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IJBPaymentTerminal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">)) ||</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">projectId</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">projectId</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">INVALID_PAYMENT_EVENT</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Process the payment.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_processPayment</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Attacker can specify any beneficiary and use previous credit balance</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Keep a reference to the amount of credits the beneficiary already has.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_credits</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">creditsOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">beneficiary</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Set the leftover amount as the initial value, including any credits the beneficiary might already have.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_leftoverAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_value</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">_credits</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider adding a config param to allow others from using beneficiary’s credit balance. Its value can be default to <code>false</code> for every address. And if beneficiary want to, they can toggle this state for their address to allow other using their credit balance.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/160\">mejango (Juicebox DAO) acknowledged</a></strong></p>\n<blockquote>\n<p>fancy. i think accumulating credits to “save up” is out of scope for this contract’s design. Still a pretty cool pattern to note, thank you!</p>\n</blockquote>\n<blockquote>\n<p>yeah: if you are saving up for a specific nft, save up elsewhere, not through the credit system. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/160#issuecomment-1290893449\">minhquanym (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Thanks for your comments. Just put a note cause my writing might be vague. Saving up is just 1 case that I listed. The other case, funds are left after minting a specific tier in the docs.</p>\n<blockquote>\n<p>If a payment received does not meet a minting threshold or is in excess of the minted tiers, the balance is stored as a credit which will be added to future payments and applied to mints at that time.</p>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"m-07-deactivated-tiers-can-still-mint-reserve-tokens-even-if-no-non-reserve-tokens-were-minted-\" style=\"position:relative;\"><a href=\"#m-07-deactivated-tiers-can-still-mint-reserve-tokens-even-if-no-non-reserve-tokens-were-minted-\" aria-label=\"m 07 deactivated tiers can still mint reserve tokens even if no non reserve tokens were minted  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/189\">[M-07] Deactivated tiers can still mint reserve tokens, even if no non-reserve tokens were minted. </a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/189\">Trust</a></em></p>\n<p>Tiers in Juicebox can be deactivated using the adjustTiers() function. It makes sense that reserve tokens may be minted in deactivated tiers, in order to be consistent with already minted tokens. However, the code allows the first reserve token to be minted in a deactivated tier, <em>even</em> though there was no previous minting of that tier.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function recordMintReservesFor(uint256 _tierId, uint256 _count)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  external</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  override</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  returns (uint256[] memory tokenIds)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // Get a reference to the tier.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  JBStored721Tier storage _storedTier = _storedTierOf[msg.sender][_tierId];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // Get a reference to the number of reserved tokens mintable for the tier.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  uint256 _numberOfReservedTokensOutstanding = _numberOfReservedTokensOutstandingFor(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    msg.sender,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _tierId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _storedTier</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  if (_count &gt; _numberOfReservedTokensOutstanding) revert INSUFFICIENT_RESERVES();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  for (uint256 _i; _i &lt; _count; ) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // Generate the tokens.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  tokenIds[_i] = _generateTokenId(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _tierId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _storedTier.initialQuantity - --_storedTier.remainingQuantity + _numberOfBurnedFromTier</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  unchecked {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ++_i;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<!---->\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function _numberOfReservedTokensOutstandingFor(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  address _nft,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  uint256 _tierId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  JBStored721Tier memory _storedTier</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">) internal view returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // Invalid tier or no reserved rate?</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  if (_storedTier.initialQuantity == 0 || _storedTier.reservedRate == 0) return 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // No token minted yet? Round up to 1.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  // ******************* BUG HERE *********************</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  if (_storedTier.initialQuantity == _storedTier.remainingQuantity) return 1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Using the rounding mechanism is not valid when the tier has been deactivated, since we know there won’t be any minting of this tier.</p>\n<h3 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The reserve beneficiary receives an unfair NFT which may be used to withdraw tokens using the redemption mechanism.</p>\n<h3 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>If Juicebox intends to use rounding functionality, pass an argument <em>isDeactivated</em> which, if true, deactivated the rounding logic.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/189\">mejango (Juicebox DAO) acknowledged</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/189#issuecomment-1304610700\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The finding illustrates how a reserve token could be minted for a removed tier, and this token used to redeem funds.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/189#issuecomment-1322979998\">cccz (warden) commented</a>:</strong></p>\n<blockquote>\n<p>This one seems to be a subset of this finding<br>\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/191\">https://github.com/code-423n4/2022-10-juicebox-findings/issues/191</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/189#issuecomment-1323312382\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Thank you for flagging, I will think about it!</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/189#issuecomment-1328305868\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Although it is in the same lines and functionalities, I don’t think this one is a subset of #191: this one is about the fact that you can still mint when it’s deactivated, and #191 is about the rounding feature itself</p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-the-tier-reserved-rate-is-not-validated-and-can-surpass-jbconstantsmax_reserved_rate\" style=\"position:relative;\"><a href=\"#m-08-the-tier-reserved-rate-is-not-validated-and-can-surpass-jbconstantsmax_reserved_rate\" aria-label=\"m 08 the tier reserved rate is not validated and can surpass jbconstantsmax_reserved_rate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/201\">[M-08] The tier reserved rate is not validated and can surpass <code>JBConstants.MAX_RESERVED_RATE</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/201\">berndartmueller</a></em></p>\n<p><a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L1224-L1259\">https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L1224-L1259</a><br>\n<a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L566\">https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L566</a><br>\n<a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/abstract/JB721Delegate.sol#L142\">https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/abstract/JB721Delegate.sol#L142</a></p>\n<p>If the reserved rate of a tier is set to a value > <code>JBConstants.MAX_RESERVED_RATE</code>, the <code>JBTiered721DelegateStore._numberOfReservedTokensOutstandingFor</code> function will return way more outstanding reserved tokens (up to ~6 times more than allowed - <strong>2^16 - 1</strong> due to the manual cast of <code>reservedRate</code> to <code>uint16</code> divided by <code>JBConstants.MAX_RESERVED_RATE = 10_000</code>). This inflated value is used in the <code>JBTiered721DelegateStore.totalRedemptionWeight</code> function to calculate the cumulative redemption weight of all tokens across all tiers.</p>\n<p>This higher-than-expected redemption weight will lower the <code>reclaimAmount</code> calculated in the <code>JB721Delegate.redeemParams</code> function. Depending on the values of <code>_data.overflow</code> and <code>_redemptionWeight</code>, the calculated <code>reclaimAmount</code> can be <strong>0</strong> (due to rounding down, <a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/abstract/JB721Delegate.sol#L142\">see here</a>) or a smaller than anticipated value, leading to burned NFT tokens from the user and no redemptions.</p>\n<h3 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The owner of an NFT contract can add tiers with higher than usual reserved rates (and mint an appropriate number of NFTs to bypass all conditions in the <code>JBTiered721DelegateStore._numberOfReservedTokensOutstandingFor</code>), which will lead to a lower-than-expected redemption amount for users.</p>\n<h3 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L1224-L1259\">JBTiered721DelegateStore._numberOfReservedTokensOutstandingFor</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_numberOfReservedTokensOutstandingFor</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tierId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">JBStored721Tier</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_storedTier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Invalid tier or no reserved rate?</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">initialQuantity</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">reservedRate</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// No token minted yet? Round up to 1.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">initialQuantity</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">remainingQuantity</span><span class=\"mtk1\">) </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// The number of reserved tokens of the tier already minted.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_reserveTokensMinted</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">numberOfReservesMintedFor</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_tierId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// If only the reserved token (from the rounding up) has been minted so far, return 0.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">initialQuantity</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_reserveTokensMinted</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">remainingQuantity</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Get a reference to the number of tokens already minted in the tier, not counting reserves or burned tokens.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_numberOfNonReservesMinted</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">initialQuantity</span><span class=\"mtk1\"> -</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">remainingQuantity</span><span class=\"mtk1\"> -</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_reserveTokensMinted</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Store the numerator common to the next two calculations.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_numerator</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_numberOfNonReservesMinted</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">reservedRate</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Get the number of reserved tokens mintable given the number of non reserved tokens minted. This will round down.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_numberReservedTokensMintable</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_numerator</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">JBConstants</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MAX_RESERVED_RATE</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Round up.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_numerator</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">JBConstants</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MAX_RESERVED_RATE</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_numberReservedTokensMintable</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ++</span><span class=\"mtk12\">_numberReservedTokensMintable</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Return the difference between the amount mintable and the amount already minted.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_numberReservedTokensMintable</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_reserveTokensMinted</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L566\">JBTiered721DelegateStore.totalRedemptionWeight</a></p>\n<p>The <code>JBTiered721DelegateStore._numberOfReservedTokensOutstandingFor</code> function is called from within the <code>JBTiered721DelegateStore.totalRedemptionWeight</code> function. This allows for inflating the total redemption weight.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">totalRedemptionWeight</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">weight</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Keep a reference to the greatest tier ID.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_maxTierId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">maxTierIdOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Keep a reference to the tier being iterated on.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">JBStored721Tier</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Add each token&#39;s tier&#39;s contribution floor to the weight.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">_i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_maxTierId</span><span class=\"mtk1\">; ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Keep a reference to the stored tier.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_storedTierOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_i</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Add the tier&#39;s contribution floor multiplied by the quantity minted.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">weight</span><span class=\"mtk1\"> +=</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      (</span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">contributionFloor</span><span class=\"mtk1\"> *</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">initialQuantity</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">.</span><span class=\"mtk12\">remainingQuantity</span><span class=\"mtk1\">)) +</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">_numberOfReservedTokensOutstandingFor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_nft</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_i</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_storedTier</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      ++</span><span class=\"mtk12\">_i</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L712\">JBTiered721Delegate._totalRedemptionWeight</a></p>\n<p><code>JBTiered721DelegateStore.totalRedemptionWeight</code> is called in the <code>JBTiered721Delegate._totalRedemptionWeight</code> function.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_totalRedemptionWeight</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">store</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalRedemptionWeight</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/abstract/JB721Delegate.sol#L139\">abstract/JB721Delegate.redeemParams</a></p>\n<p>This <code>JBTiered721Delegate._totalRedemptionWeight</code> function is then called in the <code>JB721Delegate.redeemParams</code> function, which ultimately calculates the <code>reclaimAmount</code> given an overflow and <code>_decodedTokenIds</code>.</p>\n<p><code>uint256 _base = PRBMath.mulDiv(_data.overflow, _redemptionWeight, _total);</code> in <a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/abstract/JB721Delegate.sol#L142\">line 142</a> will lead to a lower <code>_base</code> due to the inflated denumerator <code>_total</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">redeemParams</span><span class=\"mtk1\">(</span><span class=\"mtk12\">JBRedeemParamsData</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reclaimAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memo</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">JBRedemptionDelegateAllocation</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">delegateAllocations</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Make sure fungible project tokens aren&#39;t being redeemed too.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenCount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">UNEXPECTED_TOKEN_REDEEMED</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Check the 4 bytes interfaceId and handle the case where the metadata was not intended for this contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">metadata</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">4</span><span class=\"mtk1\"> || </span><span class=\"mtk11\">bytes4</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">metadata</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">:</span><span class=\"mtk7\">4</span><span class=\"mtk1\">]) != </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IJB721Delegate</span><span class=\"mtk1\">).</span><span class=\"mtk12\">interfaceId</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">INVALID_REDEMPTION_METADATA</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Set the only delegate allocation to be a callback to this contract.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">delegateAllocations</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">JBRedemptionDelegateAllocation</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">delegateAllocations</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">JBRedemptionDelegateAllocation</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// If redemption rate is 0, nothing can be reclaimed from the treasury</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">redemptionRate</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">memo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">delegateAllocations</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Decode the metadata</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  (, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_decodedTokenIds</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">metadata</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[]));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Get a reference to the redemption rate of the provided tokens.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_redemptionWeight</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_redemptionWeightOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_decodedTokenIds</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Get a reference to the total redemption weight.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_total</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_totalRedemptionWeight</span><span class=\"mtk1\">(); </span><span class=\"mtk3\">// @audit-info Uses the inflated total redemption weight</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Get a reference to the linear proportion.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_base</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">PRBMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mulDiv</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">overflow</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_redemptionWeight</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_total</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// These conditions are all part of the same curve. Edge conditions are separated because fewer operation are necessary.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">redemptionRate</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">JBConstants</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MAX_REDEMPTION_RATE</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_base</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">memo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">delegateAllocations</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Return the weighted overflow, and this contract as the delegate so that tokens can be deleted.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">PRBMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mulDiv</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_base</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">redemptionRate</span><span class=\"mtk1\"> +</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">PRBMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mulDiv</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">_redemptionWeight</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">JBConstants</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MAX_REDEMPTION_RATE</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">redemptionRate</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">_total</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">JBConstants</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MAX_REDEMPTION_RATE</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">memo</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">delegateAllocations</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended mitigation steps</h3>\n<p>Consider validating the tier reserved rate <code>reservedRate</code> in the <code>JBTiered721DelegateStore.recordAddTiers</code> function to ensure the reserved rate is not greater than <code>JBConstants.MAX_RESERVED_RATE</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/201\">mejango (Juicebox DAO) confirmed</a></strong></p>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 49 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/198\">report highlighted below</a> by <strong>berndartmueller</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/229\">brgltd</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/228\">SaharAP</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/227\">minhtrng</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/220\">0xSmartContract</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/218\">joestakey</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/217\">d3e4</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/209\">peanuts</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/205\">svskaushik</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/196\">bharg4v</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/188\">delfin454000</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/180\">Trust</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/179\">Aymen0909</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/172\">V_B</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/167\">a12jmx</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/165\">0x4non</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/153\">cryptostellar5</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/152\">Diana</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/151\">ReyAdmirado</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/144\">__141345__</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/139\">ret2basic</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/135\">cryptphi</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/134\">tnevler</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/123\">Jeiwan</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/120\">carlitox477</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/112\">lukris02</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/111\">erictee</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/109\">mcwildy</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/104\">hansfriese</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/103\">RaymondFam</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/99\">ignacio</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/94\">LeoS</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/91\">0xNazgul</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/88\">ch0bu</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/87\">karanctf</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/85\">slowmoses</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/80\">RaoulSchaffranek</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/72\">yixxas</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/70\">RedOneN</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/66\">fatherOfBlocks</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/61\">Lambda</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/59\">BClabs</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/55\">cloudjunky</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/53\">Rolezn</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/41\">seyni</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/26\">0x1f8b</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/18\">ladboy233</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/11\">csanuragjain</a>, and\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/9\">chaduke</a>.</em></p>\n<h2 id=\"l-01-jbtiered721delegatetokenuri-should-throw-an-error-if-_tokenid-is-not-a-valid-nft\" style=\"position:relative;\"><a href=\"#l-01-jbtiered721delegatetokenuri-should-throw-an-error-if-_tokenid-is-not-a-valid-nft\" aria-label=\"l 01 jbtiered721delegatetokenuri should throw an error if _tokenid is not a valid nft permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-01] <code>JBTiered721Delegate.tokenURI</code> should throw an error if <code>_tokenId</code> is not a valid NFT</h2>\n<p>According to <a href=\"https://eips.ethereum.org/EIPS/eip-721\"><code>EIP-721</code></a> and specifically, the metadata extension, the <code>tokenURI</code> function should throw an error if <code>_tokenId</code> is not a valid NFT. Contrary, the current implementation returns an empty string.</p>\n<h3 id=\"findings\" style=\"position:relative;\"><a href=\"#findings\" aria-label=\"findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Findings</h3>\n<p><a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L140\">JBTiered721Delegate.sol#L140</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tokenURI</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// A token without an owner doesn&#39;t have a URI.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_owners</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">] == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;&#39;</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// @audit-info Should throw instead of returning an empty string</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Get a reference to the URI resolver.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">IJBTokenUriResolver</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_resolver</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">store</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokenUriResolverOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// If a token URI resolver is provided, use it to resolve the token URI.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_resolver</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_resolver</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getUri</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Return the token URI for the token&#39;s tier.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">JBIpfsDecoder</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">store</span><span class=\"mtk1\">.</span><span class=\"mtk11\">baseUriOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">store</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodedTierIPFSUriOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended mitigation steps</h3>\n<p>Consider throwing an error if <code>_tokenId</code> is not a valid NFT.</p>\n<h2 id=\"l-02-decoding-an-ipfs-hash-using-a-fixed-hash-function-and-length-of-the-hash\" style=\"position:relative;\"><a href=\"#l-02-decoding-an-ipfs-hash-using-a-fixed-hash-function-and-length-of-the-hash\" aria-label=\"l 02 decoding an ipfs hash using a fixed hash function and length of the hash permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-02] Decoding an IPFS hash using a fixed hash function and length of the hash</h2>\n<p>An IPFS hash specifies the hash function and length of the hash in the first two bytes of the hash. The first two bytes are <strong>0x1220</strong>, where <strong>12</strong> denotes that this is the SHA256 hash function and <strong>20</strong> is the length of the hash in bytes (32 bytes).</p>\n<p>Although SHA256 is 32 bytes and is currently the most common IPFS hash function, other content could use a hash function that is larger than 32 bytes. The current implementation limits the usage to the SHA256 hash function and a hash length of 32 bytes.</p>\n<h3 id=\"findings-1\" style=\"position:relative;\"><a href=\"#findings-1\" aria-label=\"findings 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Findings</h3>\n<p><a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/libraries/JBIpfsDecoder.sol#L28\">libraries/JBIpfsDecoder.sol#L28</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_baseUri</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_hexString</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">pure</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Concatenate the hex string with the fixed IPFS hash part (0x12 and 0x20)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">completeHexString</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk11\">bytes2</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0x1220</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_hexString</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Convert the hex string to an hash</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ipfsHash</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_toBase58</span><span class=\"mtk1\">(</span><span class=\"mtk12\">completeHexString</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Concatenate with the base URI</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">string</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_baseUri</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ipfsHash</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended mitigation steps</h3>\n<p>Consider using a more generic implementation that can handle different hash functions and lengths and allow the user to choose.</p>\n<h2 id=\"l-03-the-tier-id-can-potentially-surpass-16-bits-leading-to-token-id-collisions\" style=\"position:relative;\"><a href=\"#l-03-the-tier-id-can-potentially-surpass-16-bits-leading-to-token-id-collisions\" aria-label=\"l 03 the tier id can potentially surpass 16 bits leading to token id collisions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-03] The tier id can potentially surpass 16 bits leading to token id collisions</h2>\n<p>The token id is composed of the given tier id <code>_tierId</code> and the number of the token <code>_tokenNumber</code> in the tier. The tier id is limited to 16 bits, which means that there can <strong>theoretically</strong> only exist 65,535 tiers <em>(this is very unlikely as this would have more serious consequences on other parts of the system and will cause a serious denial of service caused by unbounded loops. Still, theoretically, it’s possible and there is no check in place)</em>.</p>\n<p>If more than 65,535 tiers exist, the 16 bits reserved for the tier id will be surpassed and overwritten by <code>_tokenNumber</code>. This will lead to token id collisions with other tiers with a lower tier id.</p>\n<h3 id=\"findings-2\" style=\"position:relative;\"><a href=\"#findings-2\" aria-label=\"findings 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Findings</h3>\n<p><a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L1276\">JBTiered721DelegateStore._generateTokenId</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_generateTokenId</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tierId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenNumber</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">pure</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// The tier ID in the first 16 bits.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_tierId</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// The token number in the rest.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\"> |= </span><span class=\"mtk12\">_tokenNumber</span><span class=\"mtk1\"> &lt;&lt; </span><span class=\"mtk7\">16</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-15\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-15\" aria-label=\"recommended mitigation steps 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended mitigation steps</h3>\n<p>Consider reverting if the <code>_tierId</code> is > 16 bits.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/198#issuecomment-1291223806\">drgorillamd (Juicebox DAO) commented</a>:</strong></p>\n<blockquote>\n<p>[L-01]: Doc<br>\n[L-02]: Mitigated by a custom uri resolver (if/when ipfs hashes change their length and/or algo)<br>\n[L-03]: Mitigated<br></p>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this contest, 34 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/133\">report highlighted below</a> by <strong>Jeiwan</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/230\">brgltd</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/224\">0xSmartContract</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/223\">JC</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/221\">zishansami</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/199\">lukris02</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/197\">berndartmueller</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/195\">bharg4v</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/192\">CodingNameKiki</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/178\">Aymen0909</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/164\">sakman</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/158\">0x4non</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/154\">Shinchan</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/150\">ReyAdmirado</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/149\">JrNet</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/148\">Saintcode_</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/146\">Awesome</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/143\">__141345__</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/141\">DimSon</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/137\">emrekocak</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/131\">0x5rings</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/128\">cryptostellar5</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/126\">Diana</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/118\">carlitox477</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/107\">mcwildy</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/100\">RaymondFam</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/89\">LeoS</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/71\">ch0bu</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/54\">Bnke0x0</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/42\">trustindistrust</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/34\">gogo</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/32\">martin</a>,\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/27\">0x1f8b</a>, and\n<a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/10\">chaduke</a>.</em></p>\n<h2 id=\"g-01-optimize-nft-delegate-deployments-by-using-proxy\" style=\"position:relative;\"><a href=\"#g-01-optimize-nft-delegate-deployments-by-using-proxy\" aria-label=\"g 01 optimize nft delegate deployments by using proxy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01] Optimize NFT delegate deployments by using proxy</h2>\n<p><a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateDeployer.sol#L115\">https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateDeployer.sol#L115</a></p>\n<p>The cost of NFT delegate deployments can be significantly reduced by deploying proxies instead of clones of the implementation.</p>\n<h3 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>This function is used to deploy new NFT delegates (<a href=\"https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateDeployer.sol#L115\">JBTiered721DelegateDeployer.sol#L115</a>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_clone</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_targetAddress</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_out</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">assembly</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Get deployed/runtime code size</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_codeSize</span><span class=\"mtk1\"> := </span><span class=\"mtk10\">extcodesize</span><span class=\"mtk1\">(</span><span class=\"mtk10\">_targetAddress</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Get a bit of freemem to land the bytecode, not updated as we&#39;ll leave this scope right after create(..)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_freeMem</span><span class=\"mtk1\"> := </span><span class=\"mtk10\">mload</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0x40</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Shift the length to the length placeholder, in the constructor</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_mask</span><span class=\"mtk1\"> := </span><span class=\"mtk10\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_codeSize</span><span class=\"mtk1\">, 0x100000000000000000000000000000000000000000000000000000000)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Insert the length in the correct sport (after the PUSH3 / 0x62)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_initCode</span><span class=\"mtk1\"> := </span><span class=\"mtk10\">or</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_mask</span><span class=\"mtk1\">, 0x62000000600081600d8239f3fe00000000000000000000000000000000000000)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Store the deployment bytecode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">mstore</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_freeMem</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_initCode</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Copy the bytecode (our initialise part is 13 bytes long)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">extcodecopy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_targetAddress</span><span class=\"mtk1\">, </span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_freeMem</span><span class=\"mtk1\">, </span><span class=\"mtk7\">13</span><span class=\"mtk1\">), </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_codeSize</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Deploy the copied bytecode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    _out := </span><span class=\"mtk11\">create</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_freeMem</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_codeSize</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<p>It copies the code of an existing contract (<code>JBTiered721Delegate</code>, <code>JB721TieredGovernance</code>, or <code>JB721GlobalGovernance</code>) and deploys a new contract with the same code. This is a costly operation because each of the three contracts is a big contract with a lot of code. It’ll be much cheaper to deploy non-upgradable proxies instead.</p>\n<h3 id=\"recommended-mitigation-steps-16\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-16\" aria-label=\"recommended mitigation steps 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider using <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Clones.sol\">the Clones library from OpenZeppelin</a>–it deploys and absolutely minimal non-upgradable proxy contract. Such proxies, however, <a href=\"https://forum.openzeppelin.com/t/how-to-verify-contracts-created-using-clonesupgradeable-clonedeterministic/7746/3\">cannot be verified on Etherscan</a>. <a href=\"https://blog.openzeppelin.com/workshop-recap-cheap-contract-deployment-through-clones/\">Some more info</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/133#issuecomment-1307653316\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Depending on the number of deployments this could be the biggest gas saving so far.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/133#issuecomment-1318661319\">drgorillamd (Juicebox DAO) commented</a>:</strong></p>\n<blockquote>\n<p>@Picodes (judge) we didn’t use proxies for 2 reasons (it would have obviously been easier;):</p>\n<ul>\n<li>this is shifting the gas burden -> each call cost an extra call() cost to the users (on a cold address, that’s at least 2600)</li>\n<li>the saving of deploying a proxy is a one off, for the project owner, while the gas saved on every call is cumulative through time (and might end up being bigger)</li>\n</ul>\n<p>+ even if using a non-upgradeable proxy, some users have concern with such (I know, ux/docs/education is out of scope;)</p>\n<p>In summary, not convinced this would be the biggest gas saving, on an overall basis</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-10-juicebox-findings/issues/133#issuecomment-1318951912\">Picodes (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Indeed it totally depends on the usage! </p>\n<p>Giving this option to users could easily save a lot of gas for projects that expect only a few transactions. I also selected this report as it’s the only one suggesting this.</p>\n<p>The deployment of the clone contract would be only <code>&#x3C;50k</code> gas and then per call <code>&#x3C;2k</code> (700 for the <code>DELEGATECALL</code> , <code>2600</code> for the cold address and then the memory expansion) so it’d be worth it for projects with less than a few hundred transactions.</p>\n</blockquote>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-5\">High Risk Findings (5)</a></p>\n<ul>\n<li><a href=\"#h-01-making-a-payment-to-the-protocol-with-_dontmint-parameter-will-result-in-lost-fund-for-user\">[H-01] Making a payment to the protocol with <code>_dontMint</code> parameter will result in lost fund for user.</a></li>\n<li><a href=\"#h-02-minting-and-redeeming-will-break-for-fully-minted-tiers-with-reserverate--0-and-reserveratemaxreserverate-tokens-burned\">[H-02] Minting and redeeming will break for fully minted tiers with <code>reserveRate != 0</code> and <code>reserveRate</code>/<code>MaxReserveRate</code> tokens burned</a></li>\n<li><a href=\"#h-03-outstanding-reserved-tokens-are-incorrectly-counted-in-total-redemption-weight\">[H-03] Outstanding reserved tokens are incorrectly counted in total redemption weight</a></li>\n<li><a href=\"#h-04-reserved-token-rounding-can-be-abused-to-honeypot-and-steal-users-funds\">[H-04] Reserved token rounding can be abused to honeypot and steal user’s funds</a></li>\n<li><a href=\"#h-05-redemption-weight-of-tiered-nfts-miscalculates-making-users-redeem-incorrect-amounts---bug-1\">[H-05] Redemption weight of tiered NFTs miscalculates, making users redeem incorrect amounts - Bug #1</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-8\">Medium Risk Findings (8)</a></p>\n<ul>\n<li><a href=\"#m-01-multiples-initializations-of-jbtiered721delegate\">[M-01] Multiples initializations of <code>JBTiered721Delegate</code></a></li>\n<li><a href=\"#m-02-the-tier-setting-parameter-are-unsafely-downcasted-from-type-uint256-to-type-uint80--uint48--uint40--uint16\">[M-02] The tier setting parameter are unsafely downcasted from type uint256 to type uint80 / uint48 / uint40 / uint16</a></li>\n<li><a href=\"#m-03-changing-default-reserved-token-beneficiary-may-result-in-wrong-beneficiary-for-tier\">[M-03] Changing default reserved token beneficiary may result in wrong beneficiary for tier</a></li>\n<li><a href=\"#m-04-iterations-over-all-tiers-in-recordmintbestavailabletier-can-render-system-unusable\">[M-04] Iterations over all tiers in recordMintBestAvailableTier can render system unusable</a></li>\n<li><a href=\"#m-05-nft-not-minted-when-contributed-via-a-supported-payment-terminal\">[M-05] NFT not minted when contributed via a supported payment terminal</a></li>\n<li><a href=\"#m-06-beneficiary-credit-balance-can-unwillingly-be-used-to-mint-low-tier-nft-\">[M-06] Beneficiary credit balance can unwillingly be used to mint low tier NFT </a></li>\n<li><a href=\"#m-07-deactivated-tiers-can-still-mint-reserve-tokens-even-if-no-non-reserve-tokens-were-minted-\">[M-07] Deactivated tiers can still mint reserve tokens, even if no non-reserve tokens were minted. </a></li>\n<li><a href=\"#m-08-the-tier-reserved-rate-is-not-validated-and-can-surpass-jbconstantsmax_reserved_rate\">[M-08] The tier reserved rate is not validated and can surpass <code>JBConstants.MAX_RESERVED_RATE</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#l-01-jbtiered721delegatetokenuri-should-throw-an-error-if-_tokenid-is-not-a-valid-nft\">[L-01] <code>JBTiered721Delegate.tokenURI</code> should throw an error if <code>_tokenId</code> is not a valid NFT</a></li>\n<li><a href=\"#l-02-decoding-an-ipfs-hash-using-a-fixed-hash-function-and-length-of-the-hash\">[L-02] Decoding an IPFS hash using a fixed hash function and length of the hash</a></li>\n<li><a href=\"#l-03-the-tier-id-can-potentially-surpass-16-bits-leading-to-token-id-collisions\">[L-03] The tier id can potentially surpass 16 bits leading to token id collisions</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#g-01-optimize-nft-delegate-deployments-by-using-proxy\">G-01 Optimize NFT delegate deployments by using proxy</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the audit contest outlined in this document, C4 conducted an analysis of the Juicebox DAO smart contract system written in Solidity. The audit contest took place between October 18—23, 2022.\n\n## Wardens\n\n70 Wardens contributed reports to the Juicebox contest:\n\n  1. 0x1f8b\n  2. 0x4non\n  3. 0x52\n  4. 0x5rings\n  5. [0xNazgul](https://twitter.com/0xNazgul)\n  6. [0xSmartContract](https://twitter.com/0xSmartContract)\n  7. Awesome\n  8. [Aymen0909](https://github.com/Aymen1001)\n  9. BClabs (nalus and Reptilia)\n  10. Bnke0x0\n  11. CodingNameKiki\n  12. Diana\n  13. DimSon\n  14. [JC](https://twitter.com/sm4rtcontr4ct)\n  15. [Jeiwan](https://jeiwan.net)\n  16. [JrNet](https://twitter.com/JagadeshRonanki)\n  17. Lambda\n  18. LeoS\n  19. RaoulSchaffranek\n  20. RaymondFam\n  21. RedOneN\n  22. ReyAdmirado\n  23. Rolezn\n  24. [SaharAP](https://twitter.com/SAPanahloo)\n  25. Saintcode\\_\n  26. Shinchan ([Sm4rty](https://twitter.com/Sm4rty_), [prasantgupta52](https://twitter.com/prasantgupta52) and [Rohan16](https://twitter.com/rohan16___))\n  27. [Trust](https://twitter.com/trust__90)\n  28. V\\_B (Barichek and vlad\\_bochok)\n  29. \\_\\_141345\\_\\_\n  30. [a12jmx](https://twitter.com/a12jmx)\n  31. [berndartmueller](https://twitter.com/berndartmueller)\n  32. [bharg4v](https://twitter.com/Bharg4v)\n  33. brgltd\n  34. [carlitox477](https://twitter.com/CAA1994)\n  35. cccz\n  36. ch0bu\n  37. chaduke\n  38. cloudjunky\n  39. cryptostellar5\n  40. cryptphi\n  41. [csanuragjain](https://twitter.com/csanuragjain)\n  42. d3e4\n  43. delfin454000\n  44. emrekocak\n  45. erictee\n  46. [fatherOfBlocks](https://twitter.com/father0fBl0cks)\n  47. [gogo](https://www.linkedin.com/in/georgi-nikolaev-georgiev-978253219)\n  48. [hansfriese](https://twitter.com/hansfriese)\n  49. [ignacio](https://twitter.com/0xheynacho)\n  50. [joestakey](https://twitter.com/JoeStakey)\n  51. karanctf\n  52. ladboy233\n  53. lukris02\n  54. [martin](https://github.com/martin-petrov03)\n  55. mcwildy\n  56. [minhquanym](https://www.linkedin.com/in/minhquanym/)\n  57. minhtrng\n  58. peanuts\n  59. [ret2basic](https://twitter.com/ret2basic)\n  60. sakman\n  61. [seyni](https://twitter.com/seynixyz)\n  62. slowmoses\n  63. [svskaushik](https://twitter.com/svs_kaushik)\n  64. tnevler\n  65. trustindistrust\n  66. yixxas\n  67. [zishansami](https://zishansami102.github.io/)\n\n\nThis contest was judged by [Picodes](https://twitter.com/thePicodes).\n\nFinal report assembled by [CloudEllie](https://twitter.com/CloudEllie1).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 13 unique vulnerabilities. Of these vulnerabilities, 5 received a risk rating in the category of HIGH severity and 8 received a risk rating in the category of MEDIUM severity.\n\nAdditionally, C4 analysis included 49 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 34 reports recommending gas optimizations.\n\nAll of the issues presented here are linked back to their original finding.\n\n# Scope\n\nThe code under review can be found within the [C4 Juicebox contest repository](https://github.com/code-423n4/2022-10-juicebox), and is composed of 10 smart contracts written in the Solidity programming language and includes 1467 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code4rena.com).\n\n# High Risk Findings (5)\n\n## [[H-01] Making a payment to the protocol with `_dontMint` parameter will result in lost fund for user.](https://github.com/code-423n4/2022-10-juicebox-findings/issues/45)\n*Submitted by [yixxas](https://github.com/code-423n4/2022-10-juicebox-findings/issues/45), also found by [minhquanym](https://github.com/code-423n4/2022-10-juicebox-findings/issues/157) and [cccz](https://github.com/code-423n4/2022-10-juicebox-findings/issues/84)*\n\nUser will have their funds lost if they tries to pay the protocol with `_dontMint = False`. A payment made with this parameter set should increase the `creditsOf[]` balance of user.\n\nIn `_processPayment()`, `creditsOf[_data.beneficiary]` is updated at the end if there are leftover funds. However, If `metadata` is provided and `_dontMint == true`, it immediately returns.\n[JBTiered721Delegate.sol#L524-L590](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L524-L590)\n\n```solidity\n  function _processPayment(JBDidPayData calldata _data) internal override {\n    // Keep a reference to the amount of credits the beneficiary already has.\n    uint256 _credits = creditsOf[_data.beneficiary];\n    ...\n    if (\n      _data.metadata.length > 36 &&\n      bytes4(_data.metadata[32:36]) == type(IJB721Delegate).interfaceId\n    ) {\n      ...\n      // Don't mint if not desired.\n      if (_dontMint) return;\n      ...\n    }\n    ...\n    // If there are funds leftover, mint the best available with it.\n    if (_leftoverAmount != 0) {\n      _leftoverAmount = _mintBestAvailableTier(\n        _leftoverAmount,\n        _data.beneficiary,\n        _expectMintFromExtraFunds\n      );\n\n      if (_leftoverAmount != 0) {\n        // Make sure there are no leftover funds after minting if not expected.\n        if (_dontOverspend) revert OVERSPENDING();\n\n        // Increment the leftover amount.\n        creditsOf[_data.beneficiary] = _leftoverAmount;\n      } else if (_credits != 0) creditsOf[_data.beneficiary] = 0;\n    } else if (_credits != 0) creditsOf[_data.beneficiary] = 0;\n  }\n```\n\n### Proof of Concept\n\nI've wrote a coded POC to illustrate this. It uses the same Foundry environment used by the project. Simply copy this function to `E2E.t.sol` to verify.\n\n```solidity\n  function testPaymentNotAddedToCreditsOf() public{\n    address _user = address(bytes20(keccak256('user')));\n    (\n      JBDeployTiered721DelegateData memory NFTRewardDeployerData,\n      JBLaunchProjectData memory launchProjectData\n    ) = createData();\n\n    uint256 projectId = deployer.launchProjectFor(\n      _projectOwner,\n      NFTRewardDeployerData,\n      launchProjectData\n    );\n\n    // Get the dataSource\n    IJBTiered721Delegate _delegate = IJBTiered721Delegate(\n      _jbFundingCycleStore.currentOf(projectId).dataSource()\n    );\n\n    address NFTRewardDataSource = _jbFundingCycleStore.currentOf(projectId).dataSource();\n\n    uint256 _creditBefore = IJBTiered721Delegate(NFTRewardDataSource).creditsOf(_user);\n\n    // Project is initiated with 10 different tiers with contributionFee of 10,20,30,40, .... , 100\n\n    // Make payment to mint 1 NFT\n    uint256 _payAmount = 10;\n    _jbETHPaymentTerminal.pay{value: _payAmount}(\n      projectId,\n      100,\n      address(0),\n      _user,\n      0,\n      false,\n      'Take my money!',\n      new bytes(0)\n    );\n\n    // Minted 1 NFT\n    assertEq(IERC721(NFTRewardDataSource).balanceOf(_user), 1);\n\n    // Now, we make the payment but supply _dontMint metadata\n    bool _dontMint = true;\n    uint16[] memory empty;\n    _jbETHPaymentTerminal.pay{value: _payAmount}(\n      projectId,\n      100,\n      address(0),\n      _user,\n      0,\n      false,\n      'Take my money!',\n      //new bytes(0)\n      abi.encode(\n        bytes32(0),\n        type(IJB721Delegate).interfaceId,\n        _dontMint,\n        false,\n        false,\n        empty\n        )\n    );\n\n    // NFT not minted\n    assertEq(IERC721(NFTRewardDataSource).balanceOf(_user), 1);\n\n    // Check that credits of user is still the same as before even though we have made the payment\n    assertEq(IJBTiered721Delegate(NFTRewardDataSource).creditsOf(_user),_creditBefore);\n\n  }\n```\n\n### Tools Used\n\nFoundry\n\n### Recommended Mitigation Steps\n\nUpdate the `creditsOf[]` in the `if(_dontMint)` check.\n\n```diff\n- if(_dontMint) return;\n+ if(_dontMint){ creditsOf[_data.beneficiary] += _value; }\n```\n\n**[mejango (Juicebox DAO) commented on duplicate issue #157](https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1289367091):**\n> mixed feels. `_dontMint` basically says \"Save me gas at all costs.\". I see the argument for value leaking being bad though. will mull over.\n\n**[drgorillamd (Juicebox DAO) commented on duplicate issue #157](https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1298417807):**\n> paying small amounts (under the floor or with `dontMint`) only to save them to later mint is a bit of a nonsense -> it's way cheaper to just not pay, save in an eoa then mint within the same tx.\n> \n> I have the feeling the severity is based on seeing `_credit` as a saving account, while it's rather something to collect leftovers.\n> \n> Anyway, we changed it, but not sure of high sev on this one, happy to see others' point of view.\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1303536360):**\n> @drgorillamd @mejango I have to say that I don't see why someone would use the `dontMint` flag in the first place. Wasn't the original intent to use this flag specifically to modify `_credit` without minting?\n> In the meantime I'll keep the High label for this one, the `dontMint` functionality being flawed and leading to a loss of funds. \n\n**[drgorillamd (Juicebox DAO) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1304540813):**\n> @Picodes `nftReward` is just an extension plugged into a Jb project -> `dontMint` is to avoid forcing users of the project who don't want a nft reward when contributing, i.e. \"classic\" use of a Jb project.\n> The use case we had in mind was smaller payers, wanting to get the erc20 (or even just donating), without the gas burden of a nft reward (which might, on L1, sometimes be more than the contribution itself).\n> Does that make sense?\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1304553910):**\n> Definitely, thanks for the clarification @drgorillamd.\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1373365444):**\n> The final decision for this issue was to keep the high severity because of the leak of value and the possibility that some users use the function thinking it will change `_credit`, despite the fact that it was not the original intent of the code.\n\n**[mejango (Juicebox DAO) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/157#issuecomment-1374569372):**\n> We ended up adding credits even when `_dontMint` is true!!<br>\n> It was a last minute design decision, initially we marked the issue as \"Disagree with severity\" and we were planning on keeping the code unchanged since it didnt pose a risk and was working as designed.<br>\n> We ended up changing the design, but the wardens' feedback was ultimately helpful!<br>\n\n\n\n***\n\n## [[H-02] Minting and redeeming will break for fully minted tiers with `reserveRate != 0` and `reserveRate`/`MaxReserveRate` tokens burned](https://github.com/code-423n4/2022-10-juicebox-findings/issues/113)\n*Submitted by [0x52](https://github.com/code-423n4/2022-10-juicebox-findings/issues/113)*\n\nMinting and redeeming become impossible.\n\n### Proof of Concept\n\n    uint256 _numberOfNonReservesMinted = _storedTier.initialQuantity -\n      _storedTier.remainingQuantity -\n      _reserveTokensMinted;\n\n    uint256 _numerator = uint256(_numberOfNonReservesMinted * _storedTier.reservedRate);\n\n    uint256 _numberReservedTokensMintable = _numerator / JBConstants.MAX_RESERVED_RATE;\n\n    if (_numerator - JBConstants.MAX_RESERVED_RATE * _numberReservedTokensMintable > 0)\n      ++_numberReservedTokensMintable;\n\n    return _numberReservedTokensMintable - _reserveTokensMinted;\n\nThe lines above are taken from JBTiered721DelegateStore#\\_numberOfReservedTokensOutstandingFor and used to calculate and return the available number of reserve tokens that can be minted. Since the return statement doesn't check that \\_numberReservedTokensMintable >= \\_reserveTokensMinted, it will revert under those circumstances. The issue is that there are legitimate circumstances in which this becomes false. If a tier is fully minted then all reserve tokens are mintable. When the tier begins to redeem, \\_numberReservedTokensMintable will fall under \\_reserveTokensMinted, permanently breaking minting and redeeming. Minting is broken because all mint functions directly call \\_numberOfReservedTokensOutstandingFor. Redeeming is broken because the redeem callback (JB721Delegate#redeemParams) calls \\_totalRedemtionWeight which calls \\_numberOfReservedTokensOutstandingFor.\n\nExample:\n\nA tier has a reserveRate of 100 (1/100 tokens reserved) and an initialQuantity of 10000. We assume that the tier has been fully minted, that is, \\_reserveTokensMinted is 100 and remainingQuantity = 0. Now we begin burning the tokens. Let's run through the lines above after 100 tokens have been burned (remainingQuantity = 100):\n\n\\_numberOfNonReservedMinted = 10000 - 100 - 100 = 9800\n\n\\_numerator = 9800 &ast; 100 = 980000\n\n\\_numberReservedTokensMintable = 980000 / 10000 = 98\n\nSince \\_numberReservedTokensMintable < \\_reserveTokensMinted the line will underflow and revert.\n\nJBTiered721DelegateStore#\\_numberOfReservedTokensOutstandingFor will now revert every time it is called. This affects all minting functions as well as totalRedemptionWeight. Since those functions now revert when called, it is impossible to mint or redeem anymore NFTs.\n\n### Recommended Mitigation Steps\n\nAdd a check before returning:\n\n    +   if (_reserveTokensMinted > _numberReservedTokensMintable) {\n    +       return 0;\n    +   }\n\n        return _numberReservedTokensMintable - _reserveTokensMinted;\n\n**[mejango (Juicebox DAO) confirmed](https://github.com/code-423n4/2022-10-juicebox-findings/issues/113)** \n\n**[Trust (warden) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/113#issuecomment-1288218772):**\n > The root cause seems to be that there is no tracking of reserve tokens burnt.\n\n**[mejango (Juicebox DAO) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/113#issuecomment-1289371161):**\n > @Trust fair. this would require extra storage to track which tokenIDs were minted as reserves. could be a nice-to-have, and also used to prevent this issue.\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/113#issuecomment-1303719893):**\n > Without tracking the number of burnt tokens, the mitigation suggested by the warden avoids the underflow so solves the main issue, which is that minting and redeeming break\n> \n> Accounting for `numberOfBurnedReservesFor` may help fixing the math but the underflow would still be possible if only non reserve tokens are burned\n\n***\n\n## [[H-03] Outstanding reserved tokens are incorrectly counted in total redemption weight](https://github.com/code-423n4/2022-10-juicebox-findings/issues/129)\n*Submitted by [Jeiwan](https://github.com/code-423n4/2022-10-juicebox-findings/issues/129), also found by [Trust](https://github.com/code-423n4/2022-10-juicebox-findings/issues/194), [ladboy233](https://github.com/code-423n4/2022-10-juicebox-findings/issues/43), and [cccz](https://github.com/code-423n4/2022-10-juicebox-findings/issues/28)*\n\nThe amounts redeemed in overflow redemption can be calculated incorrectly due to incorrect accounting of the outstanding number of reserved tokens.\n\n### Proof of Concept\n\nProject contributors are allowed to redeem their NFT tokens for a portion of the overflow (excessive funded amounts). The amount a contributor receives is calculated as [overflow &ast; (user's redemption rate / total redemption weight)](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/abstract/JB721Delegate.sol#L135-L142), where user's redemption weight is [the total contribution floor of all their NFTs](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L532-L539) and total redemption weight is [the total contribution floor of all minted NFTs](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L563-L566). Since the total redemption weight is the sum of individual contributor redemption weights, the amount they can redeem is proportional to their contribution.\n\nHowever, the total redemption weight calculation incorrectly accounts outstanding reserved tokens ([JBTiered721DelegateStore.sol#L563-L566](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L563-L566)):\n\n```solidity\n// Add the tier's contribution floor multiplied by the quantity minted.\nweight +=\n  (_storedTier.contributionFloor *\n    (_storedTier.initialQuantity - _storedTier.remainingQuantity)) +\n  _numberOfReservedTokensOutstandingFor(_nft, _i, _storedTier);\n```\n\nSpecifically, the *number* of reserved tokens is added to the *weight* of minted tokens. This disrupts the redemption amount calculation formula since the total redemption weight is in fact not the sum of individual contributor redemption weights.\n\n### Recommended Mitigation Steps\n\nTwo options can be seen:\n\n1.  if the outstanding number of reserved tokens is considered minted (which seems to be so, judging by [this logic](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L1058-L1063)) then it needs to be added to the quantity, i.e.:\n    ```diff\n    --- a/contracts/JBTiered721DelegateStore.sol\n    +++ b/contracts/JBTiered721DelegateStore.sol\n    @@ -562,8 +562,7 @@ contract JBTiered721DelegateStore is IJBTiered721DelegateStore {\n          // Add the tier's contribution floor multiplied by the quantity minted.\n          weight +=\n            (_storedTier.contributionFloor *\n    -          (_storedTier.initialQuantity - _storedTier.remainingQuantity)) +\n    -        _numberOfReservedTokensOutstandingFor(_nft, _i, _storedTier);\n    +          (_storedTier.initialQuantity - _storedTier.remainingQuantity +\n    +           _numberOfReservedTokensOutstandingFor(_nft, _i, _storedTier)));\n\n          unchecked {\n            ++_i;\n    ```\n2.  if it's not considered minted, then it shouldn't be counted at all.\n\n**[drgorillamd (Juicebox DAO) confirmed](https://github.com/code-423n4/2022-10-juicebox-findings/issues/129)** \n\n**[Picodes (judge) upgraded severity](https://github.com/code-423n4/2022-10-juicebox-findings/issues/129#issuecomment-1303554688):**\n > As the redeemed amounts are at stake, upgrading to High\n\n\n***\n\n## [[H-04] Reserved token rounding can be abused to honeypot and steal user's funds](https://github.com/code-423n4/2022-10-juicebox-findings/issues/191)\n*Submitted by [Trust](https://github.com/code-423n4/2022-10-juicebox-findings/issues/191)*\n\nWhen the project wishes to mint reserved tokens, they call mintReservesFor which allows minting up to the amount calculated by DelegateStore's \\_numberOfReservedTokensOutstandingFor. The function has this line:\n\n    // No token minted yet? Round up to 1.\n    if (_storedTier.initialQuantity == _storedTier.remainingQuantity) return 1;\n\nIn order to ease calculations, if reserve rate is not 0 and no token has been minted yet, the function allows a single reserve token to be printed. It turns out that this introduces a very significant risk for users. Projects can launch with several tierIDs of similar contribution size, and reserve rate as low as 1%. Once a victim contributes to the project, it can instantly mint a single reserve token of all the rest of the tiers. They can then redeem the reserve token and receive most of the user's contribution, without putting in any money of their own.\n\nSince this attack does not require setting \"dangerous\" flags like lockReservedTokenChanges or lockManualMintingChanges, it represents a very considerable threat to unsuspecting users. Note that the attack circumvents user voting or any funding cycle changes which leave time for victim to withdraw their funds. \n\n### Impact\n\nHoneypot project can instantly take most of first user's contribution.\n\n### Proof of Concept\n\nNew project launches, with 10 tiers, of contributions 1000, 1050, 1100, ...\n\nReserve rate is set to 1% and redemption rate = 100%\n\nUser contributes 1100 and gets a Tier 3 NFT reward. \n\nProject immediately mints Tier 1,  Tier 2, Tier 4,... Tier 10 reserve tokens, and redeems all the reserve tokens.\n\nProject's total weight = 12250\n\nReserve token weight = 11150\n\nMalicious project cashes 1100 (overflow) &ast; 11150 / 12250 = \\~1001 tokens.\n\n### Recommended Mitigation Steps\n\nDon't round up outstanding reserve tokens as it represents too much of a threat.\n\n**[mejango (Juicebox DAO) acknowledged](https://github.com/code-423n4/2022-10-juicebox-findings/issues/191)**  \n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/191#issuecomment-1305972852):**\n > The finding is valid and clearly demonstrates how project owners could bypass the flags and safeguards implemented to trick users into thinking that they'll be safe.\n> \n> However, it falls within the \"centralization risk\" category, and within reports showing \"a unique attack path which users were not told upfront about\" (see [this issue](https://github.com/code-423n4/org/issues/54)). So I believe Medium severity to be appropriate.\n\n**[Trust (warden) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/191#issuecomment-1306080547):**\n > I would just like to state that the way I look at it, this is not a centralization risk, as the counterparty which can perform the exploit is some listed project on Juicebox, rather than Juicebox itself. It is very similar to a high severity [finding ](https://github.com/code-423n4/2022-05-enso-findings/issues/204) in Enso Finance, where a strategy creator can rug funds sent to their strategy. \n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/191#issuecomment-1321944954):**\n > Kept it high risk out of coherence with https://github.com/code-423n4/2022-05-enso-findings/issues/204, and because this attack would bypass all the safeguards implemented by Juicebox\n\n\n***\n\n## [[H-05] Redemption weight of tiered NFTs miscalculates, making users redeem incorrect amounts - Bug #1](https://github.com/code-423n4/2022-10-juicebox-findings/issues/193)\n*Submitted by [Trust](https://github.com/code-423n4/2022-10-juicebox-findings/issues/193), also found by [Aymen0909](https://github.com/code-423n4/2022-10-juicebox-findings/issues/171) and [0x52](https://github.com/code-423n4/2022-10-juicebox-findings/issues/105)*\n\nRedemption weight is a concept used in Juicebox to determine investor's eligible percentage of the non-locked funds. In redeemParams, JB721Delegate calculates user's share using:\n\n    uint256 _redemptionWeight = _redemptionWeightOf(_decodedTokenIds);\n    uint256 _total = _totalRedemptionWeight();\n    uint256 _base = PRBMath.mulDiv(_data.overflow, _redemptionWeight, _total);\n\n\\_totalRedemptionWeight eventually is implemented in DelegateStore:\n\n    for (uint256 _i; _i < _maxTierId; ) {\n      // Keep a reference to the stored tier.\n      _storedTier = _storedTierOf[_nft][_i + 1];\n      // Add the tier's contribution floor multiplied by the quantity minted.\n      weight +=\n        (_storedTier.contributionFloor *\n          (_storedTier.initialQuantity - _storedTier.remainingQuantity)) +\n        _numberOfReservedTokensOutstandingFor(_nft, _i, _storedTier);\n      unchecked {\n        ++_i;\n      }\n    }\n\nIf we pay attention to \\_numberOfReservedTokensOutstandingFor() call, we can see it is called with tierId = i, yet storedTier of i+1. It is definitely not the intention as for example, recordMintReservesFor() uses the function correctly:\n\n    function recordMintReservesFor(uint256 _tierId, uint256 _count)\n      external\n      override\n      returns (uint256[] memory tokenIds)\n    {\n      // Get a reference to the tier.\n      JBStored721Tier storage _storedTier = _storedTierOf[msg.sender][_tierId];\n      // Get a reference to the number of reserved tokens mintable for the tier.\n      uint256 _numberOfReservedTokensOutstanding = _numberOfReservedTokensOutstandingFor(\n        msg.sender,\n        _tierId,\n        _storedTier\n      );\n      ...\n\nThe impact of this bug is incorrect calculation of the weight of user's contributions. The `initialQuantity` and `remainingQuantity` values are taken from the correct tier, but `_reserveTokensMinted` minted is taken from previous tier. In the case where `_reserveTokensMinted` is smaller than correct value, for example tierID=0 which is empty, the outstanding value returned is larger, meaning weight is larger and redemptions are worth less. In the opposite case, where lower tierID has higher `_reserveTokensMinted`, the redemptions will receive *more* payout than they should.\n\n### Impact\n\nUsers of projects can receive less or more funds than they are eligible for when redeeming NFT rewards.\n\n### Proof of Concept\n\n1\\. Suppose we have a project with 2 tiers, reserve ratio = 50%, redemption ratio = 100%:\n\n|        |              |                  |                    |                 |                      |\n| ------ | ------------ | ---------------- | ------------------ | --------------- | -------------------- |\n| Tier   | Contribution | Initial quantity | Remaining quantity | Reserves minted | Reserves outstanding |\n| Tier 1 | 50           | 10               | 3                  | 1               | 2                    |\n| Tier 2 | 100          | 30               | 2                  | 8               | 2                    |\n\nWhen calculating totalRedemptionWeight(), the correct result is\n\n50 &ast; (10 - 3) + 2 + 100 &ast; (30-2) + 2 = 3154\n\nThe wrong result will be:\n\n50 &ast; (10 -3) + **4** + 100 &ast; (30-2) + **13**  = 3167\n\nTherefore, when users redeem NFT rewards, they will get less value than they are eligible for. Note that totalRedemptionWeight() has an *additional* bug where the reserve amount is not multiplied by the contribution, which is discussed in another submission. If it would be calculated correctly, the correct weight would be 3450.\n\n### Recommended Mitigation Steps\n\nChange the calculation to:\n\n    _numberOfReservedTokensOutstandingFor(_nft, _i+1, _storedTier);\n\n### Additional discussion\n\nLikelihood of impact is very high, because the conditions will arise naturally (different tiers, different reserve minted count for each tier, user calls redeem). \nSeverity of impact is high because users receive less or more tokens than they are eligible for.\n\nInitially I thought this bug could allow attacker to steal entire unlocked project funds, using a mint/burn loop. However, this would not be profitable because their calculated share of the funds would always be at most what they put in, because reserve tokens are printed out of thin air.\n\n**[mejango (Juicebox DAO) confirmed](https://github.com/code-423n4/2022-10-juicebox-findings/issues/193)** \n\n\n***\n \n# Medium Risk Findings (8)\n## [[M-01] Multiples initializations of `JBTiered721Delegate`](https://github.com/code-423n4/2022-10-juicebox-findings/issues/24)\n*Submitted by [0x1f8b](https://github.com/code-423n4/2022-10-juicebox-findings/issues/24)*\n\nThe `initialize` method of the `JBTiered721Delegate` contract has as a flag that the `_store` argument is different from `address(0)`, however, it can be initialized by anyone with this value to allow the project to continue with its usual initialization, the attacker could have interfered and modified the corresponding values to carry out an attack.\n\n### Proof of Concept\n\nLooking at the method below, we highlight in green the parts that need to be initialized to prevent a call to `store=address(0)` from failing.\n\n```diff\n  function initialize(\n    uint256 _projectId,\n    IJBDirectory _directory,\n    string memory _name,\n    string memory _symbol,\n    IJBFundingCycleStore _fundingCycleStore,\n    string memory _baseUri,\n    IJBTokenUriResolver _tokenUriResolver,\n    string memory _contractUri,\n    JB721PricingParams memory _pricing,\n    IJBTiered721DelegateStore _store,\n    JBTiered721Flags memory _flags\n  ) public override {\n    // Make the original un-initializable.\n    require(address(this) != codeOrigin);\n    // Stop re-initialization.\n    require(address(store) == address(0));\n\n    // Initialize the sub class.\n    JB721Delegate._initialize(_projectId, _directory, _name, _symbol);\n\n    fundingCycleStore = _fundingCycleStore;\n    store = _store;\n    pricingCurrency = _pricing.currency;\n    pricingDecimals = _pricing.decimals;\n    prices = _pricing.prices;\n\n    // Store the base URI if provided.\n+   if (bytes(_baseUri).length != 0) _store.recordSetBaseUri(_baseUri);\n\n    // Set the contract URI if provided.\n+   if (bytes(_contractUri).length != 0) _store.recordSetContractUri(_contractUri);\n\n    // Set the token URI resolver if provided.\n+   if (_tokenUriResolver != IJBTokenUriResolver(address(0)))\n      _store.recordSetTokenUriResolver(_tokenUriResolver);\n\n    // Record adding the provided tiers.\n+   if (_pricing.tiers.length > 0) _store.recordAddTiers(_pricing.tiers);\n\n    // Set the flags if needed.\n    if (\n+     _flags.lockReservedTokenChanges ||\n+     _flags.lockVotingUnitChanges ||\n+     _flags.lockManualMintingChanges ||\n+     _flags.pausable\n    ) _store.recordFlags(_flags);\n\n    // Transfer ownership to the initializer.\n    _transferOwnership(msg.sender);\n  }\n```\n\nSo if the attacker initializes the contract as follows:\n\n*   `_baseUri` = \"\"\n*   `_contractUri` = \"\"\n*   `_tokenUriResolver` = `address(0)`\n*   `_pricing.tiers` = \\[]\n*   `_flags` = all `false`\n\nThe contract will be initialized and transfered the ownership to `msg.sender`.\n\nAfter that, the owner can call `didPay` with the the fake data provided in [JBTiered721Delegate.sol:221](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L221) and increase `creditsOf` of anyone [JBTiered721Delegate.sol:587](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L587) without touching any `store` call.\n\n*   The attacker can transfer the ownership to the contract, and the project will be able to initialize the contract again without notice.\n\n### Recommended Mitigation Steps\n\nEnsure that the `store` address is not empty.\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/24#issuecomment-1304542277):**\n > I believe the finding to be valid if:\n> \n> - the attacker initialize the contract with `_store == address(0)` and the parameters as above so it does not revert in the normal process\n> - the attacker calls initialize to transfer the ownership to himself and modify the storage so he can then call `didPay`\n> - the attacker calls `didPay` to manipulate `creditsOf`\n> - finally the attacker calls `initialize` to set `_store` to non zero and at this point it is like if nothing happened although `creditsOf` has been manipulated\n\n**[drgorillamd (Juicebox DAO) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/24#issuecomment-1304544699):**\n > Hmm, this would require a spoof directory too (to bypass the isTerminalOf check) -> I'd mitigate with a `check msg.value==data.value` in the abstract delegate contract, ie if someone wants to do this, actually paying the credit is needed\n\n> Def nice finding, ggwp!\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/24#issuecomment-1304552713):**\n > I do agree that Med is more appropriate as it falls within centralization risks as ultimately only the deployer could exploit this.\n\n\n***\n\n## [[M-02] The tier setting parameter are unsafely downcasted from type uint256 to type uint80 / uint48 / uint40 / uint16](https://github.com/code-423n4/2022-10-juicebox-findings/issues/31)\n*Submitted by [ladboy233](https://github.com/code-423n4/2022-10-juicebox-findings/issues/31), also found by [brgltd](https://github.com/code-423n4/2022-10-juicebox-findings/issues/225)*\n\n<https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L240><br>\n<https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L628><br>\n<https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L689>\n\nThe tier setting parameter are unsafely downcasted from uint256 to uint80 / uint48 / uint16\n\nthe tier is setted by owner is crucial because the parameter affect how nft is minted.\n\nthe callstack is\n\n`JBTiered721Delegate.sol#initialize` -> `Store#recordAddTiers`\n\n```solidity\nfunction recordAddTiers(JB721TierParams[] memory _tiersToAdd)\n```\n\nwhat does the struct `JB721TierParams` look like? all parameter in `JB721TierParams` is uint256 type\n\n```solidity\nstruct JB721TierParams {\n  uint256 contributionFloor;\n  uint256 lockedUntil;\n  uint256 initialQuantity;\n  uint256 votingUnits;\n  uint256 reservedRate;\n  address reservedTokenBeneficiary;\n  bytes32 encodedIPFSUri;\n  bool allowManualMint;\n  bool shouldUseBeneficiaryAsDefault;\n}\n```\n\nhowever in side the function\n\n```solidity\n// Record adding the provided tiers.\nif (_pricing.tiers.length > 0) _store.recordAddTiers(_pricing.tiers);\n```\n\nall uint256 parameter are downcasted.\n\n```solidity\n// Add the tier with the iterative ID.\n_storedTierOf[msg.sender][_tierId] = JBStored721Tier({\ncontributionFloor: uint80(_tierToAdd.contributionFloor),\nlockedUntil: uint48(_tierToAdd.lockedUntil),\nremainingQuantity: uint40(_tierToAdd.initialQuantity),\ninitialQuantity: uint40(_tierToAdd.initialQuantity),\nvotingUnits: uint16(_tierToAdd.votingUnits),\nreservedRate: uint16(_tierToAdd.reservedRate),\nallowManualMint: _tierToAdd.allowManualMint\n});\n```\n\nuint256 `contributionFloor` is downcasted to uint80,\n\nuint256 `lockedUntil` is downcasted to uint48\n\nuint256 `initialQuantity` and `initialQuantity` are downcasted to uint40\n\nuint256 `votingUnits` and uint256 `reservedRate` are downcasted to uint16\n\nthis means the original setting is greatly truncated.\n\nFor example, the owner wants to set the initial supply to a number larger than uint40, but the supply is truncated to type(uint40).max\n\nThe owner wants to set the contribution floor price above uint80,but the contribution floor price is truncated to type(uint80).max, the user may underpay the price and get the NFT price at a discount.\n\n### Proof of Concept\n\nWe can add POC\n\n<https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/forge-test/NFTReward_Unit.t.sol#L1689>\n\n```solidity\n function testJBTieredNFTRewardDelegate_mintFor_mintArrayOfTiers_downcast_POC() public {\n    uint256 nbTiers = 1;\n\n    vm.mockCall(\n      mockJBProjects,\n      abi.encodeWithSelector(IERC721.ownerOf.selector, projectId),\n      abi.encode(owner)\n    );\n\n    JB721TierParams[] memory _tiers = new JB721TierParams[](nbTiers);\n    uint16[] memory _tiersToMint = new uint16[](nbTiers);\n\n    // Temp tiers, will get overwritten later (pass the constructor check)\n    uint256 originalFloorPrice = 10000000000000000000000000 ether;\n  \n    for (uint256 i; i < nbTiers; i++) {\n      _tiers[i] = JB721TierParams({\n        contributionFloor: originalFloorPrice,\n        lockedUntil: uint48(0),\n        initialQuantity: 20,\n        votingUnits: uint16(0),\n        reservedRate: uint16(0),\n        reservedTokenBeneficiary: reserveBeneficiary,\n        encodedIPFSUri: tokenUris[i],\n        allowManualMint: true, // Allow this type of mint\n        shouldUseBeneficiaryAsDefault: false\n      });\n\n      _tiersToMint[i] = uint16(i)+1;\n      _tiersToMint[_tiersToMint.length - 1 - i] = uint16(i)+1;\n    }\n\n    ForTest_JBTiered721DelegateStore _ForTest_store = new ForTest_JBTiered721DelegateStore();\n    ForTest_JBTiered721Delegate _delegate = new ForTest_JBTiered721Delegate(\n      projectId,\n      IJBDirectory(mockJBDirectory),\n      name,\n      symbol,\n      IJBFundingCycleStore(mockJBFundingCycleStore),\n      baseUri,\n      IJBTokenUriResolver(mockTokenUriResolver),\n      contractUri,\n      _tiers,\n      IJBTiered721DelegateStore(address(_ForTest_store)),\n      JBTiered721Flags({\n        lockReservedTokenChanges: false,\n        lockVotingUnitChanges: false,\n        lockManualMintingChanges: true,\n        pausable: true\n      })\n    );\n\n    _delegate.transferOwnership(owner);\n\n    uint256 floorPrice = _delegate.test_store().tier(address(_delegate), 1).contributionFloor;\n    console.log(\"original floor price\");\n    console.log(originalFloorPrice);\n    console.log(\"truncated floor price\");\n    console.log(floorPrice);\n\n}\n```\n\nnote, our initial contribution floor price setting is\n\n```solidity\nuint256 originalFloorPrice = 10000000000000000000000000 ether;\n\nfor (uint256 i; i < nbTiers; i++) {\n  _tiers[i] = JB721TierParams({\n\tcontributionFloor: originalFloorPrice,\n```\n\nthen we run our test\n\n```solidity\nforge test -vv --match testJBTieredNFTRewardDelegate_mintFor_mintArrayOfTiers_downcast_POC\n```\n\nthe result is\n\n```solidity\n[PASS] testJBTieredNFTRewardDelegate_mintFor_mintArrayOfTiers_downcast_POC() (gas: 7601212)\nLogs:\n  original floor price\n  10000000000000000000000000000000000000000000\n  truncated floor price\n  863278115882885135204352\n\nTest result: ok. 1 passed; 0 failed; finished in 10.43ms\n```\n\nclearly the floor price is unsafed downcasted and truncated.\n\n### Tools Used\n\nFoundry, Manual Review\n\n### Recommended Mitigation Steps\n\nWe recommend the project either change the data type in the struct\n\n```solidity\nstruct JB721TierParams {\n  uint256 contributionFloor;\n  uint256 lockedUntil;\n  uint256 initialQuantity;\n  uint256 votingUnits;\n  uint256 reservedRate;\n  address reservedTokenBeneficiary;\n  bytes32 encodedIPFSUri;\n  bool allowManualMint;\n  bool shouldUseBeneficiaryAsDefault;\n}\n```\n\nor safely downcast the number to make sure the number is not shortened unexpectedly.\n\n<https://docs.openzeppelin.com/contracts/3.x/api/utils#SafeCast>\n\n\n**[drgorillamd (Juicebox DAO) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/31#issuecomment-1288886867):** \n> Thank you for the real poc:)\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/31#issuecomment-1303295686):**\n > The warden showed how due to casting the original parameters could be truncated\n\n\n***\n\n## [[M-03] Changing default reserved token beneficiary may result in wrong beneficiary for tier](https://github.com/code-423n4/2022-10-juicebox-findings/issues/63)\n*Submitted by [Lambda](https://github.com/code-423n4/2022-10-juicebox-findings/issues/63)*\n\nWhen the `reservedTokenBeneficiary` of a tier is equal to `defaultReservedTokenBeneficiaryOf[msg.sender]`, it is not explicitly set for this tier. This generally works well because in the function `reservedTokenBeneficiaryOf(address _nft, uint256 _tierId)`, `defaultReservedTokenBeneficiaryOf[_nft]` is used as a backup when `_reservedTokenBeneficiaryOf[_nft][_tierId]` is not set. However, it will lead to the wrong beneficiary when `defaultReservedTokenBeneficiaryOf[msg.sender]` is later changed, as this new beneficiary will be used for the tier, which is not the intended one.\n\n### Proof Of Concept\n\n`defaultReservedTokenBeneficiaryOf[address(delegate)]` is originally set to `address(Bob)` when the following happens:\n1. A new tier 42 is added with `_tierToAdd.reservedTokenBeneficiary = address(Bob)`. Because this is equal to `defaultReservedTokenBeneficiaryOf[address(delegate)]`, `_reservedTokenBeneficiaryOf[msg.sender][_tierId]` is not set.\n2. The owner calls `setDefaultReservedTokenBeneficiary` to change the default beneficiary (i.e., the value `defaultReservedTokenBeneficiaryOf[address(delegate)]`) to `address(Alice)`.\n3. Now, every call to `reservedTokenBeneficiaryOf(address(delegate), 42)` will return `address(Alice)`, meaning she will get these reserved tokens. This is of course wrong, the tier was explicitly created with Bob as the beneficiary.\n\n### Recommended Mitigation Steps\n\nAlso set `_reservedTokenBeneficiaryOf[msg.sender][_tierId]` when it is equal to the current default beneficiary.\n\n**[mejango (Juicebox DAO) confirmed](https://github.com/code-423n4/2022-10-juicebox-findings/issues/63)** \n\n**[drgorillamd (Juicebox DAO) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/63#issuecomment-1288870514):**\n > Edge case but valid imo! Nice finding!\n\n**[mejango (Juicebox DAO) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/63#issuecomment-1289361130):**\n > yep. valid imo too!\n\n\n***\n\n## [[M-04] Iterations over all tiers in recordMintBestAvailableTier can render system unusable](https://github.com/code-423n4/2022-10-juicebox-findings/issues/64)\n*Submitted by [Lambda](https://github.com/code-423n4/2022-10-juicebox-findings/issues/64), also found by [brgltd](https://github.com/code-423n4/2022-10-juicebox-findings/issues/226)*\n\n`JBTiered721DelegateStore.recordMintBestAvailableTier` potentially iterates over all tiers to find the one with the highest contribution floor that is lower than `_amount`. When there are many tiers, this loop can always run out of gas, which will cause some transactions (the ones that have a high `_leftoverAmount` within `_processPayment`) to always revert. The (implicit) limit for the number of tiers is 2^16 - 1, so it is possible that this happens in practice.\n\n### Proof Of Concept\n\nLet's say that 1,000 tiers are registered for a project. Small payments without a leftover amount or a small amount will be succesfully processed by `_processPayment`, because `_mintBestAvailableTier` is either not called or it is called with a small amount, meaning that `recordMintBestAvailableTier` will exit the loop early (when it is called with a small amount). However, if a payment with a large leftover amount (let's say greater than the highest contribution floor) is processed, it is necessary to iterate over all tiers, which will use too much gas and cause the processing to revert.\n\n### Recommended Mitigation Steps\n\nUse a binary search (which requires some architectural changes) for determining the best available tier. Then, the gas usage grows logarithmically (instead of linear with the current design) with the number of tiers, meaning that it would only be \\~16 times higher for 65535 tiers as for 2 tiers.\n\n\n**[drgorillamd (Juicebox DAO) commented on duplicate issue #226](https://github.com/code-423n4/2022-10-juicebox-findings/issues/226#issuecomment-1288627984):**\n> Disagree with:\n\n> > Over time maxTierIdOf for a nft address gets large due to several increments\n\n> There is no several increments outside of adding new tiers by the project owner (this is similar to adding new token in an erc1155 - there is no such check in, for instance, OZ https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/ERC1155.sol), this is a project owner choice, not faulty logic.\n\n\n**[Picodes (judge) commented on duplicate issue #226](https://github.com/code-423n4/2022-10-juicebox-findings/issues/226#issuecomment-1307478020):**\n > User funds could be at stake as `redeemParams` would revert because of the for loop in `totalRedemptionWeight`. A limit value would be indeed a good safeguard.\n\n\n***\n\n## [[M-05] NFT not minted when contributed via a supported payment terminal](https://github.com/code-423n4/2022-10-juicebox-findings/issues/124)\n*Submitted by [Jeiwan](https://github.com/code-423n4/2022-10-juicebox-findings/issues/124), also found by [cccz](https://github.com/code-423n4/2022-10-juicebox-findings/issues/83)*\n\nA contributor won't get an NFT they're eligible for if the payment is made through a payment terminal that's supported by the project but not by the NFT delegate.\n\n### Proof of Concept\n\nA Juicebox project can use multiple [payment terminals](https://info.juicebox.money/dev/learn/glossary/payment-terminal) to receive contributions ([JBController.sol#L441-L442](https://github.com/jbx-protocol/juice-contracts-v3/blob/main/contracts/JBController.sol#L441-L442)).  Payment terminals are single token payment terminals ([JBPayoutRedemptionPaymentTerminal.sol#L310](https://github.com/jbx-protocol/juice-contracts-v3/blob/main/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L310)) that support only one currency ([JBSingleTokenPaymentTerminal.sol#L124-L132](https://github.com/jbx-protocol/juice-contracts-v3/blob/main/contracts/abstract/JBSingleTokenPaymentTerminal.sol#L124-L132)). Since projects can have multiple terminals, they can receive payments in multiple currencies.\n\nHowever, the NFT delegate supports only one currency ([JBTiered721Delegate.sol#L225](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L225)):\n\n```solidity\nfunction initialize(\n  uint256 _projectId,\n  IJBDirectory _directory,\n  string memory _name,\n  string memory _symbol,\n  IJBFundingCycleStore _fundingCycleStore,\n  string memory _baseUri,\n  IJBTokenUriResolver _tokenUriResolver,\n  string memory _contractUri,\n  JB721PricingParams memory _pricing,\n  IJBTiered721DelegateStore _store,\n  JBTiered721Flags memory _flags\n) public override {\n  // Make the original un-initializable.\n  require(address(this) != codeOrigin);\n  // Stop re-initialization.\n  require(address(store) == address(0));\n\n  // Initialize the sub class.\n  JB721Delegate._initialize(_projectId, _directory, _name, _symbol);\n\n  fundingCycleStore = _fundingCycleStore;\n  store = _store;\n  pricingCurrency = _pricing.currency; // @audit only one currency is supported\n  pricingDecimals = _pricing.decimals;\n  prices = _pricing.prices;\n\n  ...\n}\n```\n\nWhen a payment is made in a currency that's supported by the project (via one of its terminals) but not by the NFT delegate, there's an attempt to convert the currency to a supported one ([JBTiered721Delegate.sol#L527-L534](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L527-L534)):\n\n```solidity\nif (_data.amount.currency == pricingCurrency) _value = _data.amount.value;\nelse if (prices != IJBPrices(address(0)))\n  _value = PRBMath.mulDiv(\n    _data.amount.value,\n    10**pricingDecimals,\n    prices.priceFor(_data.amount.currency, pricingCurrency, _data.amount.decimals)\n  );\nelse return;\n```\n\nHowever, since `prices` is optional (it can be set to the zero address, as seen from the snippet), the conversion step can be skipped. When this happens, the contributor gets no NFT due to the early `return` even though the amount of their contribution might still be eligible for a tiered NFT.\n\n### Recommended Mitigation Steps\n\nShort term, consider reverting when a different currency is used and `prices` is not set. Long term, consider supporting multiple currencies in the NFT delegate.\n\n**[drgorillamd (Juicebox DAO) disputed](https://github.com/code-423n4/2022-10-juicebox-findings/issues/124)**\n> This is poor project management from the project owner (not adding the appropriate price feed), not a vulnerability\n> \n> And there is no revert here as to not freeze the Juicebox project (NFT reward is an add-on, there is a full project running behind)\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/124#issuecomment-1305939427):**\n > As this finding:\n>  - would lead to a leak of value\n>  - is conditional on the project owner's mistake (that seems not so unlikely as they may think that one currency is enough and that they don't need to set `prices`)\n>  - but ultimately lead to a loss of funds for users\n>  \n>  I believe Medium severity to be appropriate\n\n\n***\n\n## [[M-06] Beneficiary credit balance can unwillingly be used to mint low tier NFT ](https://github.com/code-423n4/2022-10-juicebox-findings/issues/160)\n*Submitted by [minhquanym](https://github.com/code-423n4/2022-10-juicebox-findings/issues/160)*\n\nIn the function `_processPayment()`, it will use provided `JBDidPayData` from `JBPaymentTerminal` to mint to the beneficiary. The `_value` from `JBDidPayData` will be sum up with previous `_credits` balance of beneficiary. There are 2 cases that beneficiary credit balance is updated in previous payment:\n\n1.  The payment received does not meet a minting threshold or is in excess of the minted tiers, the leftover amount will be stored as credit for future minting.\n2.  Clients may want to accumulate to mint higher tier NFT, they might specify that the previous payment should not mint anything. (Currently it's incorrectly implemented in case `_dontMint=true`, but sponsor confirmed that it's a bug)\n\nIn both cases, an attacker can pay a small amount (just enough to mint lowest tier NFT) and specify the victim to be the beneficiary. Function `__processPayment()` will use credit balance of beneficiary from previous payment to mint low-value tier.\n\nFor example, there are 2 tiers\n\n1.  Tier A: mintingThreshold = 20 ETH, votingUnits = 100\n2.  Tier B: mintingThreshold = 10 ETH, votingUnits = 10\n\nObviously tier A is much more better than tier B in term of voting power, so Alice (the victim) might want to accumulate her credit to mint tier A.\n\nAssume current credit balance `creditsOf[Alice] = 19 ETH`. Now Bob (the attacker) can pay `1 ETH` and specify Alice as beneficiary and mint `2` Tier B NFT. Alice will have to receive `2` Tier B NFT with just `20 voting power` instead of `100 voting power` for a Tier A NFT.\n\nSince these NFTs can be used in a governance system, it may create much higher impact if this governance is used to make important decision. E.g: minting new tokens, transfering funds of community.\n\n### Proof of Concept\n\nFunction `didPay()` only check that the caller is a terminal of the project\n\n```solidity\nfunction didPay(JBDidPayData calldata _data) external payable virtual override {\n    // Make sure the caller is a terminal of the project, and the call is being made on behalf of an interaction with the correct project.\n    if (\n      msg.value != 0 ||\n      !directory.isTerminalOf(projectId, IJBPaymentTerminal(msg.sender)) ||\n      _data.projectId != projectId\n    ) revert INVALID_PAYMENT_EVENT();\n\n    // Process the payment.\n    _processPayment(_data);\n}\n```\n\nAttacker can specify any beneficiary and use previous credit balance\n\n```solidity\n// Keep a reference to the amount of credits the beneficiary already has.\nuint256 _credits = creditsOf[_data.beneficiary];\n\n// Set the leftover amount as the initial value, including any credits the beneficiary might already have.\nuint256 _leftoverAmount = _value + _credits;\n```\n\n### Recommended Mitigation Steps\n\nConsider adding a config param to allow others from using beneficiary's credit balance. Its value can be default to `false` for every address. And if beneficiary want to, they can toggle this state for their address to allow other using their credit balance.\n\n**[mejango (Juicebox DAO) acknowledged](https://github.com/code-423n4/2022-10-juicebox-findings/issues/160)**\n> fancy. i think accumulating credits to \"save up\" is out of scope for this contract's design. Still a pretty cool pattern to note, thank you!\n\n> yeah: if you are saving up for a specific nft, save up elsewhere, not through the credit system. \n\n**[minhquanym (warden) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/160#issuecomment-1290893449):**\n> Thanks for your comments. Just put a note cause my writing might be vague. Saving up is just 1 case that I listed. The other case, funds are left after minting a specific tier in the docs.\n> > If a payment received does not meet a minting threshold or is in excess of the minted tiers, the balance is stored as a credit which will be added to future payments and applied to mints at that time.\n\n\n***\n\n## [[M-07] Deactivated tiers can still mint reserve tokens, even if no non-reserve tokens were minted. ](https://github.com/code-423n4/2022-10-juicebox-findings/issues/189)\n*Submitted by [Trust](https://github.com/code-423n4/2022-10-juicebox-findings/issues/189)*\n\nTiers in Juicebox can be deactivated using the adjustTiers() function. It makes sense that reserve tokens may be minted in deactivated tiers, in order to be consistent with already minted tokens. However, the code allows the first reserve token to be minted in a deactivated tier, *even* though there was no previous minting of that tier.\n\n    function recordMintReservesFor(uint256 _tierId, uint256 _count)\n      external\n      override\n      returns (uint256[] memory tokenIds)\n    {\n      // Get a reference to the tier.\n      JBStored721Tier storage _storedTier = _storedTierOf[msg.sender][_tierId];\n      // Get a reference to the number of reserved tokens mintable for the tier.\n      uint256 _numberOfReservedTokensOutstanding = _numberOfReservedTokensOutstandingFor(\n        msg.sender,\n        _tierId,\n        _storedTier\n      );\n      if (_count > _numberOfReservedTokensOutstanding) revert INSUFFICIENT_RESERVES();\n      ...\n      for (uint256 _i; _i < _count; ) {\n      // Generate the tokens.\n      tokenIds[_i] = _generateTokenId(\n        _tierId,\n        _storedTier.initialQuantity - --_storedTier.remainingQuantity + _numberOfBurnedFromTier\n      );\n      unchecked {\n        ++_i;\n      }\n    }\n\n<!---->\n\n    function _numberOfReservedTokensOutstandingFor(\n      address _nft,\n      uint256 _tierId,\n      JBStored721Tier memory _storedTier\n    ) internal view returns (uint256) {\n      // Invalid tier or no reserved rate?\n      if (_storedTier.initialQuantity == 0 || _storedTier.reservedRate == 0) return 0;\n      // No token minted yet? Round up to 1.\n      // ******************* BUG HERE *********************\n      if (_storedTier.initialQuantity == _storedTier.remainingQuantity) return 1;\n      ...\n    }\n\nUsing the rounding mechanism is not valid when the tier has been deactivated, since we know there won't be any minting of this tier.\n\n### Impact\n\nThe reserve beneficiary receives an unfair NFT which may be used to withdraw tokens using the redemption mechanism.\n\n### Recommended Mitigation Steps\n\nIf Juicebox intends to use rounding functionality, pass an argument *isDeactivated* which, if true, deactivated the rounding logic.\n\n**[mejango (Juicebox DAO) acknowledged](https://github.com/code-423n4/2022-10-juicebox-findings/issues/189)** \n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/189#issuecomment-1304610700):**\n > The finding illustrates how a reserve token could be minted for a removed tier, and this token used to redeem funds.\n\n**[cccz (warden) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/189#issuecomment-1322979998):**\n> This one seems to be a subset of this finding<br>\n> https://github.com/code-423n4/2022-10-juicebox-findings/issues/191\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/189#issuecomment-1323312382):**\n > Thank you for flagging, I will think about it!\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/189#issuecomment-1328305868):**\n > Although it is in the same lines and functionalities, I don't think this one is a subset of #191: this one is about the fact that you can still mint when it's deactivated, and #191 is about the rounding feature itself\n\n\n\n***\n\n## [[M-08] The tier reserved rate is not validated and can surpass `JBConstants.MAX_RESERVED_RATE`](https://github.com/code-423n4/2022-10-juicebox-findings/issues/201)\n*Submitted by [berndartmueller](https://github.com/code-423n4/2022-10-juicebox-findings/issues/201)*\n\n<https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L1224-L1259><br>\n<https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L566><br>\n<https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/abstract/JB721Delegate.sol#L142>\n\nIf the reserved rate of a tier is set to a value > `JBConstants.MAX_RESERVED_RATE`, the `JBTiered721DelegateStore._numberOfReservedTokensOutstandingFor` function will return way more outstanding reserved tokens (up to \\~6 times more than allowed - **2^16 - 1** due to the manual cast of `reservedRate` to `uint16` divided by `JBConstants.MAX_RESERVED_RATE = 10_000`). This inflated value is used in the `JBTiered721DelegateStore.totalRedemptionWeight` function to calculate the cumulative redemption weight of all tokens across all tiers.\n\nThis higher-than-expected redemption weight will lower the `reclaimAmount` calculated in the `JB721Delegate.redeemParams` function. Depending on the values of `_data.overflow` and `_redemptionWeight`, the calculated `reclaimAmount` can be **0** (due to rounding down, [see here](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/abstract/JB721Delegate.sol#L142)) or a smaller than anticipated value, leading to burned NFT tokens from the user and no redemptions.\n\n### Impact\n\nThe owner of an NFT contract can add tiers with higher than usual reserved rates (and mint an appropriate number of NFTs to bypass all conditions in the `JBTiered721DelegateStore._numberOfReservedTokensOutstandingFor`), which will lead to a lower-than-expected redemption amount for users.\n\n### Proof of Concept\n\n[JBTiered721DelegateStore.\\_numberOfReservedTokensOutstandingFor](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L1224-L1259)\n\n```solidity\nfunction _numberOfReservedTokensOutstandingFor(\n  address _nft,\n  uint256 _tierId,\n  JBStored721Tier memory _storedTier\n) internal view returns (uint256) {\n  // Invalid tier or no reserved rate?\n  if (_storedTier.initialQuantity == 0 || _storedTier.reservedRate == 0) return 0;\n\n  // No token minted yet? Round up to 1.\n  if (_storedTier.initialQuantity == _storedTier.remainingQuantity) return 1;\n\n  // The number of reserved tokens of the tier already minted.\n  uint256 _reserveTokensMinted = numberOfReservesMintedFor[_nft][_tierId];\n\n  // If only the reserved token (from the rounding up) has been minted so far, return 0.\n  if (_storedTier.initialQuantity - _reserveTokensMinted == _storedTier.remainingQuantity)\n    return 0;\n\n  // Get a reference to the number of tokens already minted in the tier, not counting reserves or burned tokens.\n  uint256 _numberOfNonReservesMinted = _storedTier.initialQuantity -\n    _storedTier.remainingQuantity -\n    _reserveTokensMinted;\n\n  // Store the numerator common to the next two calculations.\n  uint256 _numerator = uint256(_numberOfNonReservesMinted * _storedTier.reservedRate);\n\n  // Get the number of reserved tokens mintable given the number of non reserved tokens minted. This will round down.\n  uint256 _numberReservedTokensMintable = _numerator / JBConstants.MAX_RESERVED_RATE;\n\n  // Round up.\n  if (_numerator - JBConstants.MAX_RESERVED_RATE * _numberReservedTokensMintable > 0)\n    ++_numberReservedTokensMintable;\n\n  // Return the difference between the amount mintable and the amount already minted.\n  return _numberReservedTokensMintable - _reserveTokensMinted;\n}\n```\n\n[JBTiered721DelegateStore.totalRedemptionWeight](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L566)\n\nThe `JBTiered721DelegateStore._numberOfReservedTokensOutstandingFor` function is called from within the `JBTiered721DelegateStore.totalRedemptionWeight` function. This allows for inflating the total redemption weight.\n\n```solidity\nfunction totalRedemptionWeight(address _nft) public view override returns (uint256 weight) {\n  // Keep a reference to the greatest tier ID.\n  uint256 _maxTierId = maxTierIdOf[_nft];\n\n  // Keep a reference to the tier being iterated on.\n  JBStored721Tier memory _storedTier;\n\n  // Add each token's tier's contribution floor to the weight.\n  for (uint256 _i; _i < _maxTierId; ) {\n    // Keep a reference to the stored tier.\n    _storedTier = _storedTierOf[_nft][_i + 1];\n\n    // Add the tier's contribution floor multiplied by the quantity minted.\n    weight +=\n      (_storedTier.contributionFloor *\n        (_storedTier.initialQuantity - _storedTier.remainingQuantity)) +\n      _numberOfReservedTokensOutstandingFor(_nft, _i, _storedTier);\n\n    unchecked {\n      ++_i;\n    }\n  }\n}\n```\n\n[JBTiered721Delegate.\\_totalRedemptionWeight](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L712)\n\n`JBTiered721DelegateStore.totalRedemptionWeight` is called in the `JBTiered721Delegate._totalRedemptionWeight` function.\n\n```solidity\nfunction _totalRedemptionWeight() internal view virtual override returns (uint256) {\n  return store.totalRedemptionWeight(address(this));\n}\n```\n\n[abstract/JB721Delegate.redeemParams](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/abstract/JB721Delegate.sol#L139)\n\nThis `JBTiered721Delegate._totalRedemptionWeight` function is then called in the `JB721Delegate.redeemParams` function, which ultimately calculates the `reclaimAmount` given an overflow and `_decodedTokenIds`.\n\n`uint256 _base = PRBMath.mulDiv(_data.overflow, _redemptionWeight, _total);` in [line 142](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/abstract/JB721Delegate.sol#L142) will lead to a lower `_base` due to the inflated denumerator `_total`.\n\n```solidity\nfunction redeemParams(JBRedeemParamsData calldata _data)\n  external\n  view\n  override\n  returns (\n    uint256 reclaimAmount,\n    string memory memo,\n    JBRedemptionDelegateAllocation[] memory delegateAllocations\n  )\n{\n  // Make sure fungible project tokens aren't being redeemed too.\n  if (_data.tokenCount > 0) revert UNEXPECTED_TOKEN_REDEEMED();\n\n  // Check the 4 bytes interfaceId and handle the case where the metadata was not intended for this contract\n  if (\n    _data.metadata.length < 4 || bytes4(_data.metadata[0:4]) != type(IJB721Delegate).interfaceId\n  ) {\n    revert INVALID_REDEMPTION_METADATA();\n  }\n\n  // Set the only delegate allocation to be a callback to this contract.\n  delegateAllocations = new JBRedemptionDelegateAllocation[](1);\n  delegateAllocations[0] = JBRedemptionDelegateAllocation(this, 0);\n\n  // If redemption rate is 0, nothing can be reclaimed from the treasury\n  if (_data.redemptionRate == 0) return (0, _data.memo, delegateAllocations);\n\n  // Decode the metadata\n  (, uint256[] memory _decodedTokenIds) = abi.decode(_data.metadata, (bytes4, uint256[]));\n\n  // Get a reference to the redemption rate of the provided tokens.\n  uint256 _redemptionWeight = _redemptionWeightOf(_decodedTokenIds);\n\n  // Get a reference to the total redemption weight.\n  uint256 _total = _totalRedemptionWeight(); // @audit-info Uses the inflated total redemption weight\n\n  // Get a reference to the linear proportion.\n  uint256 _base = PRBMath.mulDiv(_data.overflow, _redemptionWeight, _total);\n\n  // These conditions are all part of the same curve. Edge conditions are separated because fewer operation are necessary.\n  if (_data.redemptionRate == JBConstants.MAX_REDEMPTION_RATE)\n    return (_base, _data.memo, delegateAllocations);\n\n  // Return the weighted overflow, and this contract as the delegate so that tokens can be deleted.\n  return (\n    PRBMath.mulDiv(\n      _base,\n      _data.redemptionRate +\n        PRBMath.mulDiv(\n          _redemptionWeight,\n          JBConstants.MAX_REDEMPTION_RATE - _data.redemptionRate,\n          _total\n        ),\n      JBConstants.MAX_REDEMPTION_RATE\n    ),\n    _data.memo,\n    delegateAllocations\n  );\n}\n```\n\n### Recommended mitigation steps\n\nConsider validating the tier reserved rate `reservedRate` in the `JBTiered721DelegateStore.recordAddTiers` function to ensure the reserved rate is not greater than `JBConstants.MAX_RESERVED_RATE`.\n\n**[mejango (Juicebox DAO) confirmed](https://github.com/code-423n4/2022-10-juicebox-findings/issues/201)**\n\n\n***\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 49 reports were submitted by wardens detailing low risk and non-critical issues. The [report highlighted below](https://github.com/code-423n4/2022-10-juicebox-findings/issues/198) by **berndartmueller** received the top score from the judge.\n\n*The following wardens also submitted reports: [brgltd](https://github.com/code-423n4/2022-10-juicebox-findings/issues/229), \n[SaharAP](https://github.com/code-423n4/2022-10-juicebox-findings/issues/228), \n[minhtrng](https://github.com/code-423n4/2022-10-juicebox-findings/issues/227), \n[0xSmartContract](https://github.com/code-423n4/2022-10-juicebox-findings/issues/220), \n[joestakey](https://github.com/code-423n4/2022-10-juicebox-findings/issues/218), \n[d3e4](https://github.com/code-423n4/2022-10-juicebox-findings/issues/217), \n[peanuts](https://github.com/code-423n4/2022-10-juicebox-findings/issues/209), \n[svskaushik](https://github.com/code-423n4/2022-10-juicebox-findings/issues/205), \n[bharg4v](https://github.com/code-423n4/2022-10-juicebox-findings/issues/196), \n[delfin454000](https://github.com/code-423n4/2022-10-juicebox-findings/issues/188), \n[Trust](https://github.com/code-423n4/2022-10-juicebox-findings/issues/180), \n[Aymen0909](https://github.com/code-423n4/2022-10-juicebox-findings/issues/179), \n[V\\_B](https://github.com/code-423n4/2022-10-juicebox-findings/issues/172), \n[a12jmx](https://github.com/code-423n4/2022-10-juicebox-findings/issues/167), \n[0x4non](https://github.com/code-423n4/2022-10-juicebox-findings/issues/165), \n[cryptostellar5](https://github.com/code-423n4/2022-10-juicebox-findings/issues/153), \n[Diana](https://github.com/code-423n4/2022-10-juicebox-findings/issues/152), \n[ReyAdmirado](https://github.com/code-423n4/2022-10-juicebox-findings/issues/151), \n[\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-10-juicebox-findings/issues/144), \n[ret2basic](https://github.com/code-423n4/2022-10-juicebox-findings/issues/139), \n[cryptphi](https://github.com/code-423n4/2022-10-juicebox-findings/issues/135), \n[tnevler](https://github.com/code-423n4/2022-10-juicebox-findings/issues/134), \n[Jeiwan](https://github.com/code-423n4/2022-10-juicebox-findings/issues/123), \n[carlitox477](https://github.com/code-423n4/2022-10-juicebox-findings/issues/120), \n[lukris02](https://github.com/code-423n4/2022-10-juicebox-findings/issues/112), \n[erictee](https://github.com/code-423n4/2022-10-juicebox-findings/issues/111), \n[mcwildy](https://github.com/code-423n4/2022-10-juicebox-findings/issues/109), \n[hansfriese](https://github.com/code-423n4/2022-10-juicebox-findings/issues/104), \n[RaymondFam](https://github.com/code-423n4/2022-10-juicebox-findings/issues/103), \n[ignacio](https://github.com/code-423n4/2022-10-juicebox-findings/issues/99), \n[LeoS](https://github.com/code-423n4/2022-10-juicebox-findings/issues/94), \n[0xNazgul](https://github.com/code-423n4/2022-10-juicebox-findings/issues/91), \n[ch0bu](https://github.com/code-423n4/2022-10-juicebox-findings/issues/88), \n[karanctf](https://github.com/code-423n4/2022-10-juicebox-findings/issues/87), \n[slowmoses](https://github.com/code-423n4/2022-10-juicebox-findings/issues/85), \n[RaoulSchaffranek](https://github.com/code-423n4/2022-10-juicebox-findings/issues/80), \n[yixxas](https://github.com/code-423n4/2022-10-juicebox-findings/issues/72), \n[RedOneN](https://github.com/code-423n4/2022-10-juicebox-findings/issues/70), \n[fatherOfBlocks](https://github.com/code-423n4/2022-10-juicebox-findings/issues/66), \n[Lambda](https://github.com/code-423n4/2022-10-juicebox-findings/issues/61), \n[BClabs](https://github.com/code-423n4/2022-10-juicebox-findings/issues/59), \n[cloudjunky](https://github.com/code-423n4/2022-10-juicebox-findings/issues/55), \n[Rolezn](https://github.com/code-423n4/2022-10-juicebox-findings/issues/53), \n[seyni](https://github.com/code-423n4/2022-10-juicebox-findings/issues/41), \n[0x1f8b](https://github.com/code-423n4/2022-10-juicebox-findings/issues/26), \n[ladboy233](https://github.com/code-423n4/2022-10-juicebox-findings/issues/18), \n[csanuragjain](https://github.com/code-423n4/2022-10-juicebox-findings/issues/11), and \n[chaduke](https://github.com/code-423n4/2022-10-juicebox-findings/issues/9).*\n\n## \\[L-01] `JBTiered721Delegate.tokenURI` should throw an error if `_tokenId` is not a valid NFT\n\nAccording to [`EIP-721`](https://eips.ethereum.org/EIPS/eip-721) and specifically, the metadata extension, the `tokenURI` function should throw an error if `_tokenId` is not a valid NFT. Contrary, the current implementation returns an empty string.\n\n### Findings\n\n[JBTiered721Delegate.sol#L140](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721Delegate.sol#L140)\n\n```solidity\nfunction tokenURI(uint256 _tokenId) public view override returns (string memory) {\n  // A token without an owner doesn't have a URI.\n  if (_owners[_tokenId] == address(0)) return ''; // @audit-info Should throw instead of returning an empty string\n\n  // Get a reference to the URI resolver.\n  IJBTokenUriResolver _resolver = store.tokenUriResolverOf(address(this));\n\n  // If a token URI resolver is provided, use it to resolve the token URI.\n  if (address(_resolver) != address(0)) return _resolver.getUri(_tokenId);\n\n  // Return the token URI for the token's tier.\n  return\n    JBIpfsDecoder.decode(\n      store.baseUriOf(address(this)),\n      store.encodedTierIPFSUriOf(address(this), _tokenId)\n    );\n}\n```\n\n### Recommended mitigation steps\n\nConsider throwing an error if `_tokenId` is not a valid NFT.\n\n## \\[L-02] Decoding an IPFS hash using a fixed hash function and length of the hash\n\nAn IPFS hash specifies the hash function and length of the hash in the first two bytes of the hash. The first two bytes are **0x1220**, where **12** denotes that this is the SHA256 hash function and **20** is the length of the hash in bytes (32 bytes).\n\nAlthough SHA256 is 32 bytes and is currently the most common IPFS hash function, other content could use a hash function that is larger than 32 bytes. The current implementation limits the usage to the SHA256 hash function and a hash length of 32 bytes.\n\n### Findings\n\n[libraries/JBIpfsDecoder.sol#L28](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/libraries/JBIpfsDecoder.sol#L28)\n\n```solidity\nfunction decode(string memory _baseUri, bytes32 _hexString)\n  external\n  pure\n  returns (string memory)\n{\n  // Concatenate the hex string with the fixed IPFS hash part (0x12 and 0x20)\n  bytes memory completeHexString = abi.encodePacked(bytes2(0x1220), _hexString);\n\n  // Convert the hex string to an hash\n  string memory ipfsHash = _toBase58(completeHexString);\n\n  // Concatenate with the base URI\n  return string(abi.encodePacked(_baseUri, ipfsHash));\n}\n```\n\n### Recommended mitigation steps\n\nConsider using a more generic implementation that can handle different hash functions and lengths and allow the user to choose.\n\n## \\[L-03] The tier id can potentially surpass 16 bits leading to token id collisions\n\nThe token id is composed of the given tier id `_tierId` and the number of the token `_tokenNumber` in the tier. The tier id is limited to 16 bits, which means that there can **theoretically** only exist 65,535 tiers *(this is very unlikely as this would have more serious consequences on other parts of the system and will cause a serious denial of service caused by unbounded loops. Still, theoretically, it's possible and there is no check in place)*.\n\nIf more than 65,535 tiers exist, the 16 bits reserved for the tier id will be surpassed and overwritten by `_tokenNumber`. This will lead to token id collisions with other tiers with a lower tier id.\n\n### Findings\n\n[JBTiered721DelegateStore.\\_generateTokenId](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateStore.sol#L1276)\n\n```solidity\nfunction _generateTokenId(uint256 _tierId, uint256 _tokenNumber)\n  internal\n  pure\n  returns (uint256 tokenId)\n{\n  // The tier ID in the first 16 bits.\n  tokenId = _tierId;\n\n  // The token number in the rest.\n  tokenId |= _tokenNumber << 16;\n}\n```\n\n### Recommended mitigation steps\n\nConsider reverting if the `_tierId` is > 16 bits.\n\n\n**[drgorillamd (Juicebox DAO) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/198#issuecomment-1291223806):**\n> \\[L-01\\]: Doc<br>\n> \\[L-02\\]: Mitigated by a custom uri resolver (if/when ipfs hashes change their length and/or algo)<br>\n> \\[L-03\\]: Mitigated<br>\n\n\n\n***\n\n# Gas Optimizations\n\nFor this contest, 34 reports were submitted by wardens detailing gas optimizations. The [report highlighted below](https://github.com/code-423n4/2022-10-juicebox-findings/issues/133) by **Jeiwan** received the top score from the judge.\n\n*The following wardens also submitted reports: [brgltd](https://github.com/code-423n4/2022-10-juicebox-findings/issues/230), \n[0xSmartContract](https://github.com/code-423n4/2022-10-juicebox-findings/issues/224), \n[JC](https://github.com/code-423n4/2022-10-juicebox-findings/issues/223), \n[zishansami](https://github.com/code-423n4/2022-10-juicebox-findings/issues/221), \n[lukris02](https://github.com/code-423n4/2022-10-juicebox-findings/issues/199), \n[berndartmueller](https://github.com/code-423n4/2022-10-juicebox-findings/issues/197), \n[bharg4v](https://github.com/code-423n4/2022-10-juicebox-findings/issues/195), \n[CodingNameKiki](https://github.com/code-423n4/2022-10-juicebox-findings/issues/192), \n[Aymen0909](https://github.com/code-423n4/2022-10-juicebox-findings/issues/178), \n[sakman](https://github.com/code-423n4/2022-10-juicebox-findings/issues/164), \n[0x4non](https://github.com/code-423n4/2022-10-juicebox-findings/issues/158), \n[Shinchan](https://github.com/code-423n4/2022-10-juicebox-findings/issues/154), \n[ReyAdmirado](https://github.com/code-423n4/2022-10-juicebox-findings/issues/150), \n[JrNet](https://github.com/code-423n4/2022-10-juicebox-findings/issues/149), \n[Saintcode\\_](https://github.com/code-423n4/2022-10-juicebox-findings/issues/148), \n[Awesome](https://github.com/code-423n4/2022-10-juicebox-findings/issues/146), \n[\\_\\_141345\\_\\_](https://github.com/code-423n4/2022-10-juicebox-findings/issues/143), \n[DimSon](https://github.com/code-423n4/2022-10-juicebox-findings/issues/141), \n[emrekocak](https://github.com/code-423n4/2022-10-juicebox-findings/issues/137), \n[0x5rings](https://github.com/code-423n4/2022-10-juicebox-findings/issues/131), \n[cryptostellar5](https://github.com/code-423n4/2022-10-juicebox-findings/issues/128), \n[Diana](https://github.com/code-423n4/2022-10-juicebox-findings/issues/126), \n[carlitox477](https://github.com/code-423n4/2022-10-juicebox-findings/issues/118), \n[mcwildy](https://github.com/code-423n4/2022-10-juicebox-findings/issues/107), \n[RaymondFam](https://github.com/code-423n4/2022-10-juicebox-findings/issues/100), \n[LeoS](https://github.com/code-423n4/2022-10-juicebox-findings/issues/89), \n[ch0bu](https://github.com/code-423n4/2022-10-juicebox-findings/issues/71), \n[Bnke0x0](https://github.com/code-423n4/2022-10-juicebox-findings/issues/54), \n[trustindistrust](https://github.com/code-423n4/2022-10-juicebox-findings/issues/42), \n[gogo](https://github.com/code-423n4/2022-10-juicebox-findings/issues/34), \n[martin](https://github.com/code-423n4/2022-10-juicebox-findings/issues/32), \n[0x1f8b](https://github.com/code-423n4/2022-10-juicebox-findings/issues/27), and \n[chaduke](https://github.com/code-423n4/2022-10-juicebox-findings/issues/10).*\n\n## [G-01] Optimize NFT delegate deployments by using proxy\n\n<https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateDeployer.sol#L115>\n\nThe cost of NFT delegate deployments can be significantly reduced by deploying proxies instead of clones of the implementation.\n\n### Proof of Concept\n\nThis function is used to deploy new NFT delegates ([JBTiered721DelegateDeployer.sol#L115](https://github.com/jbx-protocol/juice-nft-rewards/blob/f9893b1497098241dd3a664956d8016ff0d0efd0/contracts/JBTiered721DelegateDeployer.sol#L115)):\n\n```solidity\nfunction _clone(address _targetAddress) internal returns (address _out) {\n  assembly {\n    // Get deployed/runtime code size\n    let _codeSize := extcodesize(_targetAddress)\n\n    // Get a bit of freemem to land the bytecode, not updated as we'll leave this scope right after create(..)\n    let _freeMem := mload(0x40)\n\n    // Shift the length to the length placeholder, in the constructor\n    let _mask := mul(_codeSize, 0x100000000000000000000000000000000000000000000000000000000)\n\n    // Insert the length in the correct sport (after the PUSH3 / 0x62)\n    let _initCode := or(_mask, 0x62000000600081600d8239f3fe00000000000000000000000000000000000000)\n\n    // Store the deployment bytecode\n    mstore(_freeMem, _initCode)\n\n    // Copy the bytecode (our initialise part is 13 bytes long)\n    extcodecopy(_targetAddress, add(_freeMem, 13), 0, _codeSize)\n\n    // Deploy the copied bytecode\n    _out := create(0, _freeMem, _codeSize)\n  }\n```\n\nIt copies the code of an existing contract (`JBTiered721Delegate`, `JB721TieredGovernance`, or `JB721GlobalGovernance`) and deploys a new contract with the same code. This is a costly operation because each of the three contracts is a big contract with a lot of code. It'll be much cheaper to deploy non-upgradable proxies instead.\n\n### Recommended Mitigation Steps\n\nConsider using [the Clones library from OpenZeppelin](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Clones.sol)–it deploys and absolutely minimal non-upgradable proxy contract. Such proxies, however, [cannot be verified on Etherscan](https://forum.openzeppelin.com/t/how-to-verify-contracts-created-using-clonesupgradeable-clonedeterministic/7746/3). [Some more info](https://blog.openzeppelin.com/workshop-recap-cheap-contract-deployment-through-clones/).\n\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/133#issuecomment-1307653316):**\n > Depending on the number of deployments this could be the biggest gas saving so far.\n\n**[drgorillamd (Juicebox DAO) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/133#issuecomment-1318661319):**\n > @Picodes (judge) we didn't use proxies for 2 reasons (it would have obviously been easier;):\n> - this is shifting the gas burden -> each call cost an extra call() cost to the users (on a cold address, that's at least 2600)\n> - the saving of deploying a proxy is a one off, for the project owner, while the gas saved on every call is cumulative through time (and might end up being bigger)\n> \n> \\+ even if using a non-upgradeable proxy, some users have concern with such (I know, ux/docs/education is out of scope;)\n> \n> In summary, not convinced this would be the biggest gas saving, on an overall basis\n\n**[Picodes (judge) commented](https://github.com/code-423n4/2022-10-juicebox-findings/issues/133#issuecomment-1318951912):**\n > Indeed it totally depends on the usage! \n> \n> Giving this option to users could easily save a lot of gas for projects that expect only a few transactions. I also selected this report as it's the only one suggesting this.\n> \n> The deployment of the clone contract would be only `<50k` gas and then per call `<2k` (700 for the `DELEGATECALL` , `2600` for the cold address and then the memory expansion) so it'd be worth it for projects with less than a few hundred transactions.\n\n\n***\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}